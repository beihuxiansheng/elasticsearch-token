begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.testng
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|testng
package|;
end_package

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|TestListenerAdapter
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|DotTestListener
specifier|public
class|class
name|DotTestListener
extends|extends
name|TestListenerAdapter
block|{
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|1
decl_stmt|;
DECL|method|onTestFailure
annotation|@
name|Override
specifier|public
name|void
name|onTestFailure
parameter_list|(
name|ITestResult
name|tr
parameter_list|)
block|{
name|log
argument_list|(
literal|"F"
argument_list|)
expr_stmt|;
block|}
DECL|method|onTestSkipped
annotation|@
name|Override
specifier|public
name|void
name|onTestSkipped
parameter_list|(
name|ITestResult
name|tr
parameter_list|)
block|{
name|log
argument_list|(
literal|"S"
argument_list|)
expr_stmt|;
block|}
DECL|method|onTestSuccess
annotation|@
name|Override
specifier|public
name|void
name|onTestSuccess
parameter_list|(
name|ITestResult
name|tr
parameter_list|)
block|{
name|log
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
DECL|method|log
specifier|private
name|void
name|log
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|string
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|++
operator|%
literal|40
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

