begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.testng
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|testng
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|TestListenerAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|LoggingListener
specifier|public
class|class
name|LoggingListener
extends|extends
name|TestListenerAdapter
block|{
DECL|method|onStart
annotation|@
name|Override
specifier|public
name|void
name|onStart
parameter_list|(
name|ITestContext
name|context
parameter_list|)
block|{
name|String
name|logsDir
init|=
name|context
operator|.
name|getOutputDirectory
argument_list|()
operator|+
literal|"/logs"
decl_stmt|;
name|deleteRecursively
argument_list|(
operator|new
name|File
argument_list|(
name|logsDir
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.log.dir"
argument_list|,
name|logsDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.path.data"
argument_list|,
name|context
operator|.
name|getOutputDirectory
argument_list|()
operator|+
literal|"/data"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.path.work"
argument_list|,
name|context
operator|.
name|getOutputDirectory
argument_list|()
operator|+
literal|"/work"
argument_list|)
expr_stmt|;
block|}
DECL|method|onTestStart
annotation|@
name|Override
specifier|public
name|void
name|onTestStart
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
name|String
name|logName
init|=
name|result
operator|.
name|getTestClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|logName
operator|.
name|startsWith
argument_list|(
literal|"org.elasticsearch."
argument_list|)
condition|)
block|{
name|logName
operator|=
name|logName
operator|.
name|substring
argument_list|(
literal|"org.elasticsearch."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.log.name"
argument_list|,
name|logName
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|LoggingListener
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"es.test.log.conf"
argument_list|,
literal|"log4j.properties"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"testng"
argument_list|)
operator|.
name|info
argument_list|(
literal|"========== Starting Test ["
operator|+
name|result
operator|.
name|getName
argument_list|()
operator|+
literal|"] =========="
argument_list|)
expr_stmt|;
block|}
DECL|method|onTestSuccess
annotation|@
name|Override
specifier|public
name|void
name|onTestSuccess
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"testng"
argument_list|)
operator|.
name|info
argument_list|(
literal|"========== Test Success ["
operator|+
name|result
operator|.
name|getName
argument_list|()
operator|+
literal|"] =========="
argument_list|)
expr_stmt|;
block|}
DECL|method|onTestFailure
annotation|@
name|Override
specifier|public
name|void
name|onTestFailure
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"testng"
argument_list|)
operator|.
name|info
argument_list|(
literal|"========== Test Failure ["
operator|+
name|result
operator|.
name|getName
argument_list|()
operator|+
literal|"] =========="
argument_list|)
expr_stmt|;
block|}
DECL|method|onTestSkipped
annotation|@
name|Override
specifier|public
name|void
name|onTestSkipped
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"testng"
argument_list|)
operator|.
name|info
argument_list|(
literal|"========== Test Skipped ["
operator|+
name|result
operator|.
name|getName
argument_list|()
operator|+
literal|"] =========="
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delete the supplied {@link java.io.File} - for directories,      * recursively delete any nested directories or files as well.      *      * @param root       the root<code>File</code> to delete      * @param deleteRoot whether or not to delete the root itself or just the content of the root.      * @return<code>true</code> if the<code>File</code> was deleted,      *         otherwise<code>false</code>      */
DECL|method|deleteRecursively
specifier|public
specifier|static
name|boolean
name|deleteRecursively
parameter_list|(
name|File
name|root
parameter_list|,
name|boolean
name|deleteRoot
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|root
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|aChildren
range|:
name|children
control|)
block|{
name|deleteRecursively
argument_list|(
name|aChildren
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|deleteRoot
condition|)
block|{
return|return
name|root
operator|.
name|delete
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

