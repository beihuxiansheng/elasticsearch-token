begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.testng
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|testng
package|;
end_package

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestResult
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|Listeners
specifier|public
class|class
name|Listeners
implements|implements
name|ITestListener
block|{
DECL|field|listeners
specifier|private
specifier|final
name|ITestListener
index|[]
name|listeners
init|=
operator|new
name|ITestListener
index|[]
block|{
operator|new
name|DotTestListener
argument_list|()
block|,
operator|new
name|LoggingListener
argument_list|()
block|}
decl_stmt|;
DECL|method|onTestStart
annotation|@
name|Override
specifier|public
name|void
name|onTestStart
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
for|for
control|(
name|ITestListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onTestStart
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onTestSuccess
annotation|@
name|Override
specifier|public
name|void
name|onTestSuccess
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
for|for
control|(
name|ITestListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onTestSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onTestFailure
annotation|@
name|Override
specifier|public
name|void
name|onTestFailure
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
for|for
control|(
name|ITestListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onTestFailure
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onTestSkipped
annotation|@
name|Override
specifier|public
name|void
name|onTestSkipped
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
for|for
control|(
name|ITestListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onTestSkipped
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onTestFailedButWithinSuccessPercentage
annotation|@
name|Override
specifier|public
name|void
name|onTestFailedButWithinSuccessPercentage
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
for|for
control|(
name|ITestListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onTestFailedButWithinSuccessPercentage
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onStart
annotation|@
name|Override
specifier|public
name|void
name|onStart
parameter_list|(
name|ITestContext
name|context
parameter_list|)
block|{
for|for
control|(
name|ITestListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onStart
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onFinish
annotation|@
name|Override
specifier|public
name|void
name|onFinish
parameter_list|(
name|ITestContext
name|context
parameter_list|)
block|{
for|for
control|(
name|ITestListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onFinish
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

