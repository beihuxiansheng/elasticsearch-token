begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.integration
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|Maps
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_class
DECL|class|AbstractNodesTests
specifier|public
specifier|abstract
class|class
name|AbstractNodesTests
block|{
DECL|field|logger
specifier|protected
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|nodes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|nodes
init|=
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|clients
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Client
argument_list|>
name|clients
init|=
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|startNode
specifier|public
name|Node
name|startNode
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|buildNode
argument_list|(
name|id
argument_list|)
operator|.
name|start
argument_list|()
return|;
block|}
DECL|method|startNode
specifier|public
name|Node
name|startNode
parameter_list|(
name|String
name|id
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|buildNode
argument_list|(
name|id
argument_list|,
name|settings
argument_list|)
operator|.
name|start
argument_list|()
return|;
block|}
DECL|method|buildNode
specifier|public
name|Node
name|buildNode
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|buildNode
argument_list|(
name|id
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
return|;
block|}
DECL|method|buildNode
specifier|public
name|Node
name|buildNode
parameter_list|(
name|String
name|id
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|settingsSource
init|=
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".yml"
decl_stmt|;
name|Settings
name|finalSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|loadFromClasspath
argument_list|(
name|settingsSource
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|nodeBuilder
argument_list|()
operator|.
name|settings
argument_list|(
name|finalSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|clients
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|node
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|closeNode
specifier|public
name|void
name|closeNode
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Client
name|client
init|=
name|clients
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Node
name|node
init|=
name|nodes
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|node
specifier|public
name|Node
name|node
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|client
specifier|public
name|Client
name|client
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|clients
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|closeAllNodes
specifier|public
name|void
name|closeAllNodes
parameter_list|()
block|{
for|for
control|(
name|Client
name|client
range|:
name|clients
operator|.
name|values
argument_list|()
control|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|clients
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

