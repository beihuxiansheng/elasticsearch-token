begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.integration.gateway.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|gateway
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|Gateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|server
operator|.
name|internal
operator|.
name|InternalServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|AbstractServersTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|FsMetaDataGatewayTests
specifier|public
class|class
name|FsMetaDataGatewayTests
extends|extends
name|AbstractServersTests
block|{
DECL|method|closeServers
annotation|@
name|AfterMethod
name|void
name|closeServers
parameter_list|()
block|{
name|server
argument_list|(
literal|"server1"
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// since we store (by default) the index snapshot under the gateway, resetting it will reset the index data as well
operator|(
operator|(
name|InternalServer
operator|)
name|server
argument_list|(
literal|"server1"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Gateway
operator|.
name|class
argument_list|)
operator|.
name|reset
argument_list|()
expr_stmt|;
name|closeAllServers
argument_list|()
expr_stmt|;
block|}
DECL|method|buildServer1
annotation|@
name|BeforeMethod
name|void
name|buildServer1
parameter_list|()
block|{
name|buildServer
argument_list|(
literal|"server1"
argument_list|)
expr_stmt|;
comment|// since we store (by default) the index snapshot under the gateway, resetting it will reset the index data as well
operator|(
operator|(
name|InternalServer
operator|)
name|server
argument_list|(
literal|"server1"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Gateway
operator|.
name|class
argument_list|)
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|testIndexActions
annotation|@
name|Test
specifier|public
name|void
name|testIndexActions
parameter_list|()
throws|throws
name|Exception
block|{
name|buildServer
argument_list|(
literal|"server1"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|InternalServer
operator|)
name|server
argument_list|(
literal|"server1"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Gateway
operator|.
name|class
argument_list|)
operator|.
name|reset
argument_list|()
expr_stmt|;
name|server
argument_list|(
literal|"server1"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
argument_list|(
literal|"server1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|create
argument_list|(
name|createIndexRequest
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|closeServer
argument_list|(
literal|"server1"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
literal|"server1"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|(
literal|"server1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|create
argument_list|(
name|createIndexRequest
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
assert|assert
literal|false
operator|:
literal|"index should exists"
assert|;
block|}
catch|catch
parameter_list|(
name|IndexAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
block|}
end_class

end_unit

