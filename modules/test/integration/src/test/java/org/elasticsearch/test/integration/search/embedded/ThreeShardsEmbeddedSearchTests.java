begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.integration.search.embedded
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|search
operator|.
name|embedded
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|ExtTIntArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|controller
operator|.
name|SearchPhaseController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|controller
operator|.
name|ShardDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|AggregatedDfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|FacetBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|query
operator|.
name|QueryFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|QueryFetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalScrollSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|AbstractNodesTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|xcontent
operator|.
name|QueryBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ThreeShardsEmbeddedSearchTests
specifier|public
class|class
name|ThreeShardsEmbeddedSearchTests
extends|extends
name|AbstractNodesTests
block|{
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|nodeToSearchService
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SearchService
argument_list|>
name|nodeToSearchService
decl_stmt|;
DECL|field|searchPhaseController
specifier|private
name|SearchPhaseController
name|searchPhaseController
decl_stmt|;
DECL|method|createNodeAndInitWithData
annotation|@
name|BeforeClass
specifier|public
name|void
name|createNodeAndInitWithData
parameter_list|()
throws|throws
name|Exception
block|{
name|startNode
argument_list|(
literal|"server1"
argument_list|)
expr_stmt|;
name|startNode
argument_list|(
literal|"server2"
argument_list|)
expr_stmt|;
name|clusterService
operator|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
literal|"server1"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
expr_stmt|;
name|client
argument_list|(
literal|"server1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|create
argument_list|(
name|Requests
operator|.
name|createIndexRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
name|client
argument_list|(
literal|"server1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|client
argument_list|(
literal|"server1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|refresh
argument_list|(
name|refreshRequest
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchService
name|searchService1
init|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
literal|"server1"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
decl_stmt|;
name|SearchService
name|searchService2
init|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
literal|"server2"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
decl_stmt|;
name|nodeToSearchService
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|SearchService
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
literal|"server1"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|,
name|searchService1
argument_list|)
operator|.
name|put
argument_list|(
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
literal|"server2"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|,
name|searchService2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|searchPhaseController
operator|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
literal|"server1"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|SearchPhaseController
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|closeServers
annotation|@
name|AfterClass
specifier|public
name|void
name|closeServers
parameter_list|()
block|{
name|closeAllNodes
argument_list|()
expr_stmt|;
block|}
DECL|method|testDfsQueryThenFetch
annotation|@
name|Test
specifier|public
name|void
name|testDfsQueryThenFetch
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchSourceBuilder
name|sourceBuilder
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"multi"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|indexBoost
argument_list|(
literal|"test"
argument_list|,
literal|1.0f
argument_list|)
operator|.
name|indexBoost
argument_list|(
literal|"test2"
argument_list|,
literal|2.0f
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DfsSearchResult
argument_list|>
name|dfsResults
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardIterator
name|shardIt
range|:
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|searchShards
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|shardIt
control|)
block|{
name|InternalSearchRequest
name|searchRequest
init|=
name|searchRequest
argument_list|(
name|shardRouting
argument_list|,
name|sourceBuilder
argument_list|,
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|dfsResults
operator|.
name|add
argument_list|(
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|executeDfsPhase
argument_list|(
name|searchRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|AggregatedDfs
name|dfs
init|=
name|searchPhaseController
operator|.
name|aggregateDfs
argument_list|(
name|dfsResults
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|QuerySearchResultProvider
argument_list|>
name|queryResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|DfsSearchResult
name|dfsResult
range|:
name|dfsResults
control|)
block|{
name|queryResults
operator|.
name|put
argument_list|(
name|dfsResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|dfsResult
operator|.
name|shardTarget
argument_list|()
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeQueryPhase
argument_list|(
operator|new
name|QuerySearchRequest
argument_list|(
name|dfsResult
operator|.
name|id
argument_list|()
argument_list|,
name|dfs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ShardDoc
index|[]
name|sortedShardList
init|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|queryResults
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|docIdsToLoad
init|=
name|searchPhaseController
operator|.
name|docIdsToLoad
argument_list|(
name|sortedShardList
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|FetchSearchResult
argument_list|>
name|fetchResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|entry
range|:
name|docIdsToLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SearchShardTarget
name|shardTarget
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExtTIntArrayList
name|docIds
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FetchSearchResult
name|fetchResult
init|=
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardTarget
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeFetchPhase
argument_list|(
operator|new
name|FetchSearchRequest
argument_list|(
name|queryResults
operator|.
name|get
argument_list|(
name|shardTarget
argument_list|)
operator|.
name|queryResult
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|docIds
argument_list|)
argument_list|)
decl_stmt|;
name|fetchResults
operator|.
name|put
argument_list|(
name|fetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|fetchResult
operator|.
name|initCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SearchHits
name|hits
init|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
name|sortedShardList
argument_list|,
name|queryResults
argument_list|,
name|fetchResults
argument_list|)
operator|.
name|hits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|hits
operator|.
name|hits
argument_list|()
index|[
name|i
index|]
decl_stmt|;
comment|//            System.out.println(hit.explanation());
name|assertThat
argument_list|(
literal|"id["
operator|+
name|hit
operator|.
name|id
argument_list|()
operator|+
literal|"]"
argument_list|,
name|hit
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|100
operator|-
name|i
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now try and scroll to the next batch of results
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|QuerySearchResultProvider
argument_list|>
name|scrollQueryResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|QuerySearchResultProvider
name|queryResult
range|:
name|queryResults
operator|.
name|values
argument_list|()
control|)
block|{
name|scrollQueryResults
operator|.
name|put
argument_list|(
name|queryResult
operator|.
name|queryResult
argument_list|()
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|queryResult
operator|.
name|shardTarget
argument_list|()
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeQueryPhase
argument_list|(
operator|new
name|InternalScrollSearchRequest
argument_list|(
name|queryResult
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
operator|.
name|queryResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queryResults
operator|=
name|scrollQueryResults
expr_stmt|;
name|sortedShardList
operator|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|queryResults
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|docIdsToLoad
operator|=
name|searchPhaseController
operator|.
name|docIdsToLoad
argument_list|(
name|sortedShardList
argument_list|)
expr_stmt|;
name|fetchResults
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|entry
range|:
name|docIdsToLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SearchShardTarget
name|shardTarget
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExtTIntArrayList
name|docIds
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FetchSearchResult
name|fetchResult
init|=
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardTarget
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeFetchPhase
argument_list|(
operator|new
name|FetchSearchRequest
argument_list|(
name|queryResults
operator|.
name|get
argument_list|(
name|shardTarget
argument_list|)
operator|.
name|queryResult
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|docIds
argument_list|)
argument_list|)
decl_stmt|;
name|fetchResults
operator|.
name|put
argument_list|(
name|fetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|fetchResult
operator|.
name|initCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hits
operator|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
name|sortedShardList
argument_list|,
name|queryResults
argument_list|,
name|fetchResults
argument_list|)
operator|.
name|hits
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|hits
operator|.
name|hits
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|assertThat
argument_list|(
literal|"id["
operator|+
name|hit
operator|.
name|id
argument_list|()
operator|+
literal|"]"
argument_list|,
name|hit
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|100
operator|-
literal|60
operator|-
literal|1
operator|-
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDfsQueryThenFetchWithSort
annotation|@
name|Test
specifier|public
name|void
name|testDfsQueryThenFetchWithSort
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchSourceBuilder
name|sourceBuilder
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"multi"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|sort
argument_list|(
literal|"age"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DfsSearchResult
argument_list|>
name|dfsResults
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardIterator
name|shardIt
range|:
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|searchShards
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|shardIt
control|)
block|{
name|InternalSearchRequest
name|searchRequest
init|=
name|searchRequest
argument_list|(
name|shardRouting
argument_list|,
name|sourceBuilder
argument_list|,
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|dfsResults
operator|.
name|add
argument_list|(
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|executeDfsPhase
argument_list|(
name|searchRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|AggregatedDfs
name|dfs
init|=
name|searchPhaseController
operator|.
name|aggregateDfs
argument_list|(
name|dfsResults
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|QuerySearchResultProvider
argument_list|>
name|queryResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|DfsSearchResult
name|dfsResult
range|:
name|dfsResults
control|)
block|{
name|queryResults
operator|.
name|put
argument_list|(
name|dfsResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|dfsResult
operator|.
name|shardTarget
argument_list|()
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeQueryPhase
argument_list|(
operator|new
name|QuerySearchRequest
argument_list|(
name|dfsResult
operator|.
name|id
argument_list|()
argument_list|,
name|dfs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ShardDoc
index|[]
name|sortedShardList
init|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|queryResults
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|docIdsToLoad
init|=
name|searchPhaseController
operator|.
name|docIdsToLoad
argument_list|(
name|sortedShardList
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|FetchSearchResult
argument_list|>
name|fetchResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|entry
range|:
name|docIdsToLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SearchShardTarget
name|shardTarget
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExtTIntArrayList
name|docIds
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FetchSearchResult
name|fetchResult
init|=
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardTarget
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeFetchPhase
argument_list|(
operator|new
name|FetchSearchRequest
argument_list|(
name|queryResults
operator|.
name|get
argument_list|(
name|shardTarget
argument_list|)
operator|.
name|queryResult
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|docIds
argument_list|)
argument_list|)
decl_stmt|;
name|fetchResults
operator|.
name|put
argument_list|(
name|fetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|fetchResult
operator|.
name|initCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SearchHits
name|hits
init|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
name|sortedShardList
argument_list|,
name|queryResults
argument_list|,
name|fetchResults
argument_list|)
operator|.
name|hits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|hits
operator|.
name|hits
argument_list|()
index|[
name|i
index|]
decl_stmt|;
comment|//            System.out.println(hit.explanation());
name|assertThat
argument_list|(
literal|"id["
operator|+
name|hit
operator|.
name|id
argument_list|()
operator|+
literal|"]"
argument_list|,
name|hit
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now try and scroll to the next batch of results
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|QuerySearchResultProvider
argument_list|>
name|scrollQueryResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|QuerySearchResultProvider
name|queryResult
range|:
name|queryResults
operator|.
name|values
argument_list|()
control|)
block|{
name|scrollQueryResults
operator|.
name|put
argument_list|(
name|queryResult
operator|.
name|queryResult
argument_list|()
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|queryResult
operator|.
name|shardTarget
argument_list|()
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeQueryPhase
argument_list|(
operator|new
name|InternalScrollSearchRequest
argument_list|(
name|queryResult
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|timeValueMinutes
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|queryResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queryResults
operator|=
name|scrollQueryResults
expr_stmt|;
name|sortedShardList
operator|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|queryResults
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|docIdsToLoad
operator|=
name|searchPhaseController
operator|.
name|docIdsToLoad
argument_list|(
name|sortedShardList
argument_list|)
expr_stmt|;
name|fetchResults
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|entry
range|:
name|docIdsToLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SearchShardTarget
name|shardTarget
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExtTIntArrayList
name|docIds
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FetchSearchResult
name|fetchResult
init|=
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardTarget
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeFetchPhase
argument_list|(
operator|new
name|FetchSearchRequest
argument_list|(
name|queryResults
operator|.
name|get
argument_list|(
name|shardTarget
argument_list|)
operator|.
name|queryResult
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|docIds
argument_list|)
argument_list|)
decl_stmt|;
name|fetchResults
operator|.
name|put
argument_list|(
name|fetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|fetchResult
operator|.
name|initCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hits
operator|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
name|sortedShardList
argument_list|,
name|queryResults
argument_list|,
name|fetchResults
argument_list|)
operator|.
name|hits
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|hits
operator|.
name|hits
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|assertThat
argument_list|(
literal|"id["
operator|+
name|hit
operator|.
name|id
argument_list|()
operator|+
literal|"]"
argument_list|,
name|hit
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|60
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now try and scroll to the next next batch of results
name|scrollQueryResults
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|QuerySearchResultProvider
name|queryResult
range|:
name|queryResults
operator|.
name|values
argument_list|()
control|)
block|{
name|scrollQueryResults
operator|.
name|put
argument_list|(
name|queryResult
operator|.
name|queryResult
argument_list|()
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|queryResult
operator|.
name|shardTarget
argument_list|()
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeQueryPhase
argument_list|(
operator|new
name|InternalScrollSearchRequest
argument_list|(
name|queryResult
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
operator|.
name|queryResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queryResults
operator|=
name|scrollQueryResults
expr_stmt|;
name|sortedShardList
operator|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|queryResults
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|docIdsToLoad
operator|=
name|searchPhaseController
operator|.
name|docIdsToLoad
argument_list|(
name|sortedShardList
argument_list|)
expr_stmt|;
name|fetchResults
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|entry
range|:
name|docIdsToLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SearchShardTarget
name|shardTarget
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExtTIntArrayList
name|docIds
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FetchSearchResult
name|fetchResult
init|=
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardTarget
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeFetchPhase
argument_list|(
operator|new
name|FetchSearchRequest
argument_list|(
name|queryResults
operator|.
name|get
argument_list|(
name|shardTarget
argument_list|)
operator|.
name|queryResult
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|docIds
argument_list|)
argument_list|)
decl_stmt|;
name|fetchResults
operator|.
name|put
argument_list|(
name|fetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|fetchResult
operator|.
name|initCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hits
operator|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
name|sortedShardList
argument_list|,
name|queryResults
argument_list|,
name|fetchResults
argument_list|)
operator|.
name|hits
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryAndFetch
annotation|@
name|Test
specifier|public
name|void
name|testQueryAndFetch
parameter_list|()
block|{
name|SearchSourceBuilder
name|sourceBuilder
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"multi"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|20
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|expectedIds
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|QueryFetchSearchResult
argument_list|>
name|queryFetchResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardIterator
name|shardIt
range|:
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|searchShards
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|shardIt
control|)
block|{
name|InternalSearchRequest
name|searchRequest
init|=
name|searchRequest
argument_list|(
name|shardRouting
argument_list|,
name|sourceBuilder
argument_list|,
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QueryFetchSearchResult
name|queryFetchResult
init|=
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|executeFetchPhase
argument_list|(
name|searchRequest
argument_list|)
decl_stmt|;
name|queryFetchResults
operator|.
name|put
argument_list|(
name|queryFetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|queryFetchResult
argument_list|)
expr_stmt|;
block|}
block|}
name|ShardDoc
index|[]
name|sortedShardList
init|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|queryFetchResults
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|SearchHits
name|hits
init|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
name|sortedShardList
argument_list|,
name|queryFetchResults
argument_list|,
name|queryFetchResults
argument_list|)
operator|.
name|hits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
comment|// 60 results, with size 20, since we have 3 shards
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|hits
operator|.
name|hits
argument_list|()
index|[
name|i
index|]
decl_stmt|;
comment|//            System.out.println(hit.id() + " " + hit.explanation());
comment|//            assertThat("id[" + hit.id() + "]", hit.id(), equalTo(Integer.toString(100 - i - 1)));
name|assertThat
argument_list|(
literal|"make sure we don't have duplicates"
argument_list|,
name|expectedIds
operator|.
name|remove
argument_list|(
name|hit
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// scrolling with query+fetch is not perfect when it comes to dist sorting
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|QueryFetchSearchResult
argument_list|>
name|scrollQueryFetchResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryFetchSearchResult
name|searchResult
range|:
name|queryFetchResults
operator|.
name|values
argument_list|()
control|)
block|{
name|QueryFetchSearchResult
name|queryFetchResult
init|=
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|searchResult
operator|.
name|shardTarget
argument_list|()
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeFetchPhase
argument_list|(
operator|new
name|InternalScrollSearchRequest
argument_list|(
name|searchResult
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|timeValueMinutes
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|result
argument_list|()
decl_stmt|;
name|scrollQueryFetchResults
operator|.
name|put
argument_list|(
name|queryFetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|queryFetchResult
argument_list|)
expr_stmt|;
block|}
name|queryFetchResults
operator|=
name|scrollQueryFetchResults
expr_stmt|;
name|sortedShardList
operator|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|queryFetchResults
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
name|sortedShardList
argument_list|,
name|queryFetchResults
argument_list|,
name|queryFetchResults
argument_list|)
operator|.
name|hits
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|hits
operator|.
name|hits
argument_list|()
index|[
name|i
index|]
decl_stmt|;
comment|//            System.out.println(hit.id() + " " + hit.explanation());
comment|// we don't do perfect sorting when it comes to scroll with Query+Fetch
comment|//            assertThat("id[" + hit.id() + "]", hit.id(), equalTo(Integer.toString(100 - 60 - 1 - i)));
name|assertThat
argument_list|(
literal|"make sure we don't have duplicates"
argument_list|,
name|expectedIds
operator|.
name|remove
argument_list|(
name|hit
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"make sure we got all ["
operator|+
name|expectedIds
operator|+
literal|"]"
argument_list|,
name|expectedIds
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleFacets
annotation|@
name|Test
specifier|public
name|void
name|testSimpleFacets
parameter_list|()
block|{
name|SearchSourceBuilder
name|sourceBuilder
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"multi"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|20
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|sort
argument_list|(
literal|"age"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|facet
argument_list|(
name|FacetBuilders
operator|.
name|queryFacet
argument_list|(
literal|"all"
argument_list|,
name|termQuery
argument_list|(
literal|"multi"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|facet
argument_list|(
name|FacetBuilders
operator|.
name|queryFacet
argument_list|(
literal|"test1"
argument_list|,
name|termQuery
argument_list|(
literal|"name"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|QuerySearchResultProvider
argument_list|>
name|queryResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardIterator
name|shardIt
range|:
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|searchShards
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|shardIt
control|)
block|{
name|InternalSearchRequest
name|searchRequest
init|=
name|searchRequest
argument_list|(
name|shardRouting
argument_list|,
name|sourceBuilder
argument_list|,
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QuerySearchResult
name|queryResult
init|=
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|executeQueryPhase
argument_list|(
name|searchRequest
argument_list|)
decl_stmt|;
name|queryResults
operator|.
name|put
argument_list|(
name|queryResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|queryResult
argument_list|)
expr_stmt|;
block|}
block|}
name|ShardDoc
index|[]
name|sortedShardList
init|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|queryResults
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|docIdsToLoad
init|=
name|searchPhaseController
operator|.
name|docIdsToLoad
argument_list|(
name|sortedShardList
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|FetchSearchResult
argument_list|>
name|fetchResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|entry
range|:
name|docIdsToLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SearchShardTarget
name|shardTarget
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExtTIntArrayList
name|docIds
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FetchSearchResult
name|fetchResult
init|=
name|nodeToSearchService
operator|.
name|get
argument_list|(
name|shardTarget
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|.
name|executeFetchPhase
argument_list|(
operator|new
name|FetchSearchRequest
argument_list|(
name|queryResults
operator|.
name|get
argument_list|(
name|shardTarget
argument_list|)
operator|.
name|queryResult
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|docIds
argument_list|)
argument_list|)
decl_stmt|;
name|fetchResults
operator|.
name|put
argument_list|(
name|fetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|fetchResult
operator|.
name|initCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InternalSearchResponse
name|searchResponse
init|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
name|sortedShardList
argument_list|,
name|queryResults
argument_list|,
name|fetchResults
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|hits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|facets
argument_list|()
operator|.
name|facet
argument_list|(
name|QueryFacet
operator|.
name|class
argument_list|,
literal|"test1"
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|facets
argument_list|()
operator|.
name|facet
argument_list|(
name|QueryFacet
operator|.
name|class
argument_list|,
literal|"all"
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100l
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleFacetsTwice
annotation|@
name|Test
specifier|public
name|void
name|testSimpleFacetsTwice
parameter_list|()
block|{
name|testSimpleFacets
argument_list|()
expr_stmt|;
name|testSimpleFacets
argument_list|()
expr_stmt|;
block|}
DECL|method|searchRequest
specifier|private
name|InternalSearchRequest
name|searchRequest
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|SearchSourceBuilder
name|builder
parameter_list|,
name|SearchType
name|searchType
parameter_list|)
block|{
return|return
operator|new
name|InternalSearchRequest
argument_list|(
name|shardRouting
argument_list|,
literal|3
argument_list|,
name|searchType
argument_list|)
operator|.
name|source
argument_list|(
name|builder
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|index
specifier|private
name|void
name|index
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|nameValue
parameter_list|,
name|int
name|age
parameter_list|)
block|{
name|client
operator|.
name|index
argument_list|(
name|indexRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|(
name|id
argument_list|,
name|nameValue
argument_list|,
name|age
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
DECL|method|source
specifier|private
name|String
name|source
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|nameValue
parameter_list|,
name|int
name|age
parameter_list|)
block|{
name|StringBuilder
name|multi
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|nameValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|age
condition|;
name|i
operator|++
control|)
block|{
name|multi
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|nameValue
argument_list|)
expr_stmt|;
block|}
return|return
literal|"{ type1 : { \"id\" : \""
operator|+
name|id
operator|+
literal|"\", \"nid\" : "
operator|+
name|id
operator|+
literal|", \"name\" : \""
operator|+
operator|(
name|nameValue
operator|+
name|id
operator|)
operator|+
literal|"\", age : "
operator|+
name|age
operator|+
literal|", multi : \""
operator|+
name|multi
operator|.
name|toString
argument_list|()
operator|+
literal|"\", _boost : "
operator|+
operator|(
name|age
operator|*
literal|10
operator|)
operator|+
literal|" } }"
return|;
block|}
block|}
end_class

end_unit

