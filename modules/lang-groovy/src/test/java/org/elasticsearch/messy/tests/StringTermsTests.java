begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.messy.tests
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|messy
operator|.
name|tests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|IndexFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
operator|.
name|GroovyPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
operator|.
name|SubAggCollectionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|AbstractTermsTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregatorFactory
operator|.
name|ExecutionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|avg
operator|.
name|Avg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|Stats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|extended
operator|.
name|ExtendedStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|sum
operator|.
name|Sum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|valuecount
operator|.
name|ValueCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|avg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|count
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|extendedStats
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|histogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|stats
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|sum
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|terms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|nullValue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|SuiteScopeTestCase
DECL|class|StringTermsTests
specifier|public
class|class
name|StringTermsTests
extends|extends
name|AbstractTermsTestCase
block|{
DECL|field|SINGLE_VALUED_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SINGLE_VALUED_FIELD_NAME
init|=
literal|"s_value"
decl_stmt|;
DECL|field|MULTI_VALUED_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|MULTI_VALUED_FIELD_NAME
init|=
literal|"s_values"
decl_stmt|;
DECL|field|expectedMultiSortBuckets
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|expectedMultiSortBuckets
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|GroovyPlugin
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=keyword"
argument_list|,
name|MULTI_VALUED_FIELD_NAME
argument_list|,
literal|"type=keyword"
argument_list|,
literal|"tag"
argument_list|,
literal|"type=keyword"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val"
operator|+
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|,
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|,
name|i
operator|<
literal|5
operator|/
literal|2
operator|+
literal|1
condition|?
literal|"more"
else|:
literal|"less"
argument_list|)
operator|.
name|startArray
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|value
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
operator|.
name|value
argument_list|(
literal|"val"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getMultiSortDocs
argument_list|(
name|builders
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"high_card_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val"
operator|+
name|Strings
operator|.
name|padStart
argument_list|(
name|i
operator|+
literal|""
argument_list|,
literal|3
argument_list|,
literal|'0'
argument_list|)
argument_list|)
operator|.
name|startArray
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|value
argument_list|(
literal|"val"
operator|+
name|Strings
operator|.
name|padStart
argument_list|(
name|i
operator|+
literal|""
argument_list|,
literal|3
argument_list|,
literal|'0'
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"val"
operator|+
name|Strings
operator|.
name|padStart
argument_list|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|""
argument_list|,
literal|3
argument_list|,
literal|'0'
argument_list|)
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|prepareCreate
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=integer"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"empty_bucket_idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|i
operator|*
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
DECL|method|getMultiSortDocs
specifier|private
name|void
name|getMultiSortDocs
parameter_list|(
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
parameter_list|)
throws|throws
name|IOException
block|{
name|expectedMultiSortBuckets
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|bucketProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_term"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_count"
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"avg_l"
argument_list|,
literal|1d
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"sum_d"
argument_list|,
literal|6d
argument_list|)
expr_stmt|;
name|expectedMultiSortBuckets
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|bucketProps
operator|.
name|get
argument_list|(
literal|"_term"
argument_list|)
argument_list|,
name|bucketProps
argument_list|)
expr_stmt|;
name|bucketProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_term"
argument_list|,
literal|"val2"
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_count"
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"avg_l"
argument_list|,
literal|2d
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"sum_d"
argument_list|,
literal|6d
argument_list|)
expr_stmt|;
name|expectedMultiSortBuckets
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|bucketProps
operator|.
name|get
argument_list|(
literal|"_term"
argument_list|)
argument_list|,
name|bucketProps
argument_list|)
expr_stmt|;
name|bucketProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_term"
argument_list|,
literal|"val3"
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_count"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"avg_l"
argument_list|,
literal|3d
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"sum_d"
argument_list|,
literal|3d
argument_list|)
expr_stmt|;
name|expectedMultiSortBuckets
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|bucketProps
operator|.
name|get
argument_list|(
literal|"_term"
argument_list|)
argument_list|,
name|bucketProps
argument_list|)
expr_stmt|;
name|bucketProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_term"
argument_list|,
literal|"val4"
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_count"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"avg_l"
argument_list|,
literal|3d
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"sum_d"
argument_list|,
literal|4d
argument_list|)
expr_stmt|;
name|expectedMultiSortBuckets
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|bucketProps
operator|.
name|get
argument_list|(
literal|"_term"
argument_list|)
argument_list|,
name|bucketProps
argument_list|)
expr_stmt|;
name|bucketProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_term"
argument_list|,
literal|"val5"
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_count"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"avg_l"
argument_list|,
literal|5d
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"sum_d"
argument_list|,
literal|3d
argument_list|)
expr_stmt|;
name|expectedMultiSortBuckets
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|bucketProps
operator|.
name|get
argument_list|(
literal|"_term"
argument_list|)
argument_list|,
name|bucketProps
argument_list|)
expr_stmt|;
name|bucketProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_term"
argument_list|,
literal|"val6"
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_count"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"avg_l"
argument_list|,
literal|5d
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"sum_d"
argument_list|,
literal|1d
argument_list|)
expr_stmt|;
name|expectedMultiSortBuckets
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|bucketProps
operator|.
name|get
argument_list|(
literal|"_term"
argument_list|)
argument_list|,
name|bucketProps
argument_list|)
expr_stmt|;
name|bucketProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_term"
argument_list|,
literal|"val7"
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"_count"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"avg_l"
argument_list|,
literal|5d
argument_list|)
expr_stmt|;
name|bucketProps
operator|.
name|put
argument_list|(
literal|"sum_d"
argument_list|,
literal|1d
argument_list|)
expr_stmt|;
name|expectedMultiSortBuckets
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|bucketProps
operator|.
name|get
argument_list|(
literal|"_term"
argument_list|)
argument_list|,
name|bucketProps
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"sort_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=keyword"
argument_list|,
name|MULTI_VALUED_FIELD_NAME
argument_list|,
literal|"type=keyword"
argument_list|,
literal|"tag"
argument_list|,
literal|"type=keyword"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|1
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
name|i
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|2
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
name|i
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val3"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|3
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val3"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|3
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val4"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|3
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val4"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|3
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
literal|3
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val5"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|5
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val5"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|5
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val6"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|5
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"sort_idx"
argument_list|,
literal|"multi_sort_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"val7"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
literal|5
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|key
specifier|private
name|String
name|key
parameter_list|(
name|Terms
operator|.
name|Bucket
name|bucket
parameter_list|)
block|{
return|return
name|bucket
operator|.
name|getKeyAsString
argument_list|()
return|;
block|}
comment|// the main purpose of this test is to make sure we're not allocating 2GB of memory per shard
DECL|method|testSizeIsZero
specifier|public
name|void
name|testSizeIsZero
parameter_list|()
block|{
specifier|final
name|int
name|minDocCount
init|=
name|randomInt
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|exception
init|=
name|expectThrows
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"high_card_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|minDocCount
argument_list|(
name|minDocCount
argument_list|)
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"parameters [required_size] and [shard_size] must be>0 in terms aggregation."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValueField
specifier|public
name|void
name|testSingleValueField
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|propertiesKeys
init|=
operator|(
name|Object
index|[]
operator|)
name|terms
operator|.
name|getProperty
argument_list|(
literal|"_key"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesDocCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|terms
operator|.
name|getProperty
argument_list|(
literal|"_count"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|propertiesKeys
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesDocCounts
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSingleValueFieldWithGlobalOrdinals
specifier|public
name|void
name|testSingleValueFieldWithGlobalOrdinals
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutionMode
index|[]
name|executionModes
init|=
operator|new
name|ExecutionMode
index|[]
block|{
literal|null
block|,
name|ExecutionMode
operator|.
name|GLOBAL_ORDINALS
block|,
name|ExecutionMode
operator|.
name|GLOBAL_ORDINALS_HASH
block|,
name|ExecutionMode
operator|.
name|GLOBAL_ORDINALS_LOW_CARDINALITY
block|}
decl_stmt|;
for|for
control|(
name|ExecutionMode
name|executionMode
range|:
name|executionModes
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Execution mode: {}"
argument_list|,
name|executionMode
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|executionMode
operator|==
literal|null
condition|?
literal|null
else|:
name|executionMode
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSingleValueFieldWithRegexFiltering
specifier|public
name|void
name|testSingleValueFieldWithRegexFiltering
parameter_list|()
throws|throws
name|Exception
block|{
comment|// include without exclude
comment|// we should be left with: val000, val001, val002, val003, val004, val005, val006, val007, val008, val009
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"high_card_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|includeExclude
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|"val00.+"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val00"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val00"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// include and exclude
comment|// we should be left with: val002, val003, val004, val005, val006, val007, val008, val009
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"high_card_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|includeExclude
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|"val00.+"
argument_list|,
literal|"(val000|val001)"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|terms
operator|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val00"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val00"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// exclude without include
comment|// we should be left with: val000, val001, val002, val003, val004, val005, val006, val007, val008, val009
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"high_card_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|includeExclude
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|null
argument_list|,
operator|new
name|RegExp
argument_list|(
literal|"val0[1-9]+.+"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|terms
operator|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val00"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val00"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSingleValueFieldWithExactTermFiltering
specifier|public
name|void
name|testSingleValueFieldWithExactTermFiltering
parameter_list|()
throws|throws
name|Exception
block|{
comment|// include without exclude
name|String
name|incVals
index|[]
init|=
block|{
literal|"val000"
block|,
literal|"val001"
block|,
literal|"val002"
block|,
literal|"val003"
block|,
literal|"val004"
block|,
literal|"val005"
block|,
literal|"val006"
block|,
literal|"val007"
block|,
literal|"val008"
block|,
literal|"val009"
block|}
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"high_card_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|includeExclude
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
name|incVals
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|incVals
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|incVal
range|:
name|incVals
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
name|incVal
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|incVal
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// include and exclude
comment|// Slightly illogical example with exact terms below as include and exclude sets
comment|// are made to overlap but the exclude set should have priority over matches.
comment|// we should be left with: val002, val003, val004, val005, val006, val007, val008, val009
name|String
name|excVals
index|[]
init|=
block|{
literal|"val000"
block|,
literal|"val001"
block|}
decl_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"high_card_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|includeExclude
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
name|incVals
argument_list|,
name|excVals
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|terms
operator|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val00"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val00"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check case with only exact term exclude clauses
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"high_card_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|includeExclude
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|null
argument_list|,
name|excVals
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|terms
operator|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|excVals
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getIntegerInstance
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|nf
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|nf
operator|.
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|nf
operator|.
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSingleValueFieldWithMaxSize
specifier|public
name|void
name|testSingleValueFieldWithMaxSize
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"high_card_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|size
argument_list|(
literal|20
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
comment|// we need to sort by terms cause we're checking the first 20 values
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|Strings
operator|.
name|padStart
argument_list|(
name|i
operator|+
literal|""
argument_list|,
literal|3
argument_list|,
literal|'0'
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|Strings
operator|.
name|padStart
argument_list|(
name|i
operator|+
literal|""
argument_list|,
literal|3
argument_list|,
literal|'0'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSingleValueFieldOrderedByTermAsc
specifier|public
name|void
name|testSingleValueFieldOrderedByTermAsc
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testSingleValueFieldOrderedByTermDesc
specifier|public
name|void
name|testSingleValueFieldOrderedByTermDesc
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|4
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
block|}
DECL|method|testSingleValuedFieldWithSubAggregation
specifier|public
name|void
name|testSingleValuedFieldWithSubAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|count
argument_list|(
literal|"count"
argument_list|)
operator|.
name|field
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|propertiesKeys
init|=
operator|(
name|Object
index|[]
operator|)
name|terms
operator|.
name|getProperty
argument_list|(
literal|"_key"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesDocCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|terms
operator|.
name|getProperty
argument_list|(
literal|"_count"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|terms
operator|.
name|getProperty
argument_list|(
literal|"count.value"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|ValueCount
name|valueCount
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|valueCount
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|valueCount
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|propertiesKeys
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesDocCounts
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|propertiesCounts
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSingleValuedFieldWithValueScript
specifier|public
name|void
name|testSingleValuedFieldWithValueScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"'foo_' + _value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"foo_val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"foo_val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultiValuedFieldWithValueScriptNotUnique
specifier|public
name|void
name|testMultiValuedFieldWithValueScriptNotUnique
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_value.substring(0,3)"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedField
specifier|public
name|void
name|testMultiValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|5
condition|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testMultiValuedScript
specifier|public
name|void
name|testMultiValuedScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['"
operator|+
name|MULTI_VALUED_FIELD_NAME
operator|+
literal|"']"
argument_list|)
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|5
condition|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testMultiValuedFieldWithValueScript
specifier|public
name|void
name|testMultiValuedFieldWithValueScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"'foo_' + _value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"foo_val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"foo_val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|5
condition|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      *      * [foo_val0, foo_val1] [foo_val1, foo_val2] [foo_val2, foo_val3] [foo_val3,      * foo_val4] [foo_val4, foo_val5]      *      *      * foo_val0 - doc_count: 1 - val_count: 2 foo_val1 - doc_count: 2 -      * val_count: 4 foo_val2 - doc_count: 2 - val_count: 4 foo_val3 - doc_count:      * 2 - val_count: 4 foo_val4 - doc_count: 2 - val_count: 4 foo_val5 -      * doc_count: 1 - val_count: 2      */
DECL|method|testScriptSingleValue
specifier|public
name|void
name|testScriptSingleValue
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['"
operator|+
name|SINGLE_VALUED_FIELD_NAME
operator|+
literal|"'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testScriptSingleValueExplicitSingleValue
specifier|public
name|void
name|testScriptSingleValueExplicitSingleValue
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['"
operator|+
name|SINGLE_VALUED_FIELD_NAME
operator|+
literal|"'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testScriptMultiValued
specifier|public
name|void
name|testScriptMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['"
operator|+
name|MULTI_VALUED_FIELD_NAME
operator|+
literal|"']"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|5
condition|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testUnmapped
specifier|public
name|void
name|testUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_unmapped"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|size
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartiallyUnmapped
specifier|public
name|void
name|testPartiallyUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStringTermsNestedIntoPerBucketAggregator
specifier|public
name|void
name|testStringTermsNestedIntoPerBucketAggregator
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no execution hint so that the logic that decides whether or not to use ordinals is executed
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"filter"
argument_list|,
name|termQuery
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|,
literal|"val3"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter"
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|filter
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|terms
operator|.
name|getBucketByKey
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|i
operator|==
literal|3
condition|?
literal|2L
else|:
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEmptyAggregation
specifier|public
name|void
name|testEmptyAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
literal|1L
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedBySingleValueSubAggregationAsc
specifier|public
name|void
name|testSingleValuedFieldOrderedBySingleValueSubAggregationAsc
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|asc
init|=
literal|true
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_i"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|avg
argument_list|(
literal|"avg_i"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_i"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|avg
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testSingleValuedFieldOrderedByIllegalAgg
specifier|public
name|void
name|testSingleValuedFieldOrderedByIllegalAgg
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|asc
init|=
literal|true
decl_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"inner_terms>avg"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|terms
argument_list|(
literal|"inner_terms"
argument_list|)
operator|.
name|field
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|avg
argument_list|(
literal|"avg"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
name|ElasticsearchException
index|[]
name|rootCauses
init|=
name|e
operator|.
name|guessRootCauses
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootCauses
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|ElasticsearchException
name|rootCause
init|=
name|rootCauses
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|rootCause
operator|instanceof
name|AggregationExecutionException
condition|)
block|{
name|AggregationExecutionException
name|aggException
init|=
operator|(
name|AggregationExecutionException
operator|)
name|rootCause
decl_stmt|;
name|assertThat
argument_list|(
name|aggException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|startsWith
argument_list|(
literal|"Invalid terms aggregation order path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|testSingleValuedFieldOrderedBySingleBucketSubAggregationAsc
specifier|public
name|void
name|testSingleValuedFieldOrderedBySingleBucketSubAggregationAsc
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|asc
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"filter"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|filter
argument_list|(
literal|"filter"
argument_list|,
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|tags
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tags
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tags
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tags
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|iters
init|=
name|tags
operator|.
name|getBuckets
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Terms
operator|.
name|Bucket
name|tag
init|=
name|iters
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tag
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|tag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|"less"
else|:
literal|"more"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
name|tag
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|tag
operator|=
name|iters
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tag
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|tag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|"more"
else|:
literal|"less"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|tag
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevels
specifier|public
name|void
name|testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevels
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|asc
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"filter1>filter2>stats.max"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|filter
argument_list|(
literal|"filter1"
argument_list|,
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|filter
argument_list|(
literal|"filter2"
argument_list|,
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|stats
argument_list|(
literal|"stats"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|tags
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tags
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tags
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tags
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|iters
init|=
name|tags
operator|.
name|getBuckets
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// the max for "more" is 2
comment|// the max for "less" is 4
name|Terms
operator|.
name|Bucket
name|tag
init|=
name|iters
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tag
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|tag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|"more"
else|:
literal|"less"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter1
init|=
name|tag
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter1
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter1
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter2
init|=
name|filter1
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter2
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter2
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Stats
name|stats
init|=
name|filter2
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2.0
else|:
literal|4.0
argument_list|)
argument_list|)
expr_stmt|;
name|tag
operator|=
name|iters
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tag
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|tag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|"less"
else|:
literal|"more"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|filter1
operator|=
name|tag
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter1
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter1
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|filter2
operator|=
name|filter1
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter2
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter2
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|filter2
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|4.0
else|:
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevelsSpecialChars
specifier|public
name|void
name|testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevelsSpecialChars
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|filter2NameBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"filt.er2"
argument_list|)
decl_stmt|;
name|filter2NameBuilder
operator|.
name|append
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|filter2Name
init|=
name|filter2NameBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringBuilder
name|statsNameBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"st.ats"
argument_list|)
decl_stmt|;
name|statsNameBuilder
operator|.
name|append
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|statsName
init|=
name|statsNameBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|asc
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"filter1>"
operator|+
name|filter2Name
operator|+
literal|">"
operator|+
name|statsName
operator|+
literal|".max"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|filter
argument_list|(
literal|"filter1"
argument_list|,
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|filter
argument_list|(
name|filter2Name
argument_list|,
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|stats
argument_list|(
name|statsName
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|tags
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tags
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tags
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tags
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|iters
init|=
name|tags
operator|.
name|getBuckets
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// the max for "more" is 2
comment|// the max for "less" is 4
name|Terms
operator|.
name|Bucket
name|tag
init|=
name|iters
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tag
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|tag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|"more"
else|:
literal|"less"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter1
init|=
name|tag
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter1
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter1
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter2
init|=
name|filter1
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
name|filter2Name
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter2
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter2
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Stats
name|stats
init|=
name|filter2
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
name|statsName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2.0
else|:
literal|4.0
argument_list|)
argument_list|)
expr_stmt|;
name|tag
operator|=
name|iters
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tag
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|tag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|"less"
else|:
literal|"more"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|filter1
operator|=
name|tag
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter1
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter1
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|filter2
operator|=
name|filter1
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
name|filter2Name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter2
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter2
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|filter2
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
name|statsName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|4.0
else|:
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevelsSpecialCharsNoDotNotation
specifier|public
name|void
name|testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevelsSpecialCharsNoDotNotation
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|filter2NameBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"filt.er2"
argument_list|)
decl_stmt|;
name|filter2NameBuilder
operator|.
name|append
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|filter2Name
init|=
name|filter2NameBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringBuilder
name|statsNameBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"st.ats"
argument_list|)
decl_stmt|;
name|statsNameBuilder
operator|.
name|append
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|statsName
init|=
name|statsNameBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|asc
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"filter1>"
operator|+
name|filter2Name
operator|+
literal|">"
operator|+
name|statsName
operator|+
literal|"[max]"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|filter
argument_list|(
literal|"filter1"
argument_list|,
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|filter
argument_list|(
name|filter2Name
argument_list|,
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|stats
argument_list|(
name|statsName
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|tags
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tags
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tags
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tags
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|iters
init|=
name|tags
operator|.
name|getBuckets
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// the max for "more" is 2
comment|// the max for "less" is 4
name|Terms
operator|.
name|Bucket
name|tag
init|=
name|iters
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tag
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|tag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|"more"
else|:
literal|"less"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter1
init|=
name|tag
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter1
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter1
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter2
init|=
name|filter1
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
name|filter2Name
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter2
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter2
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|3L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Stats
name|stats
init|=
name|filter2
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
name|statsName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2.0
else|:
literal|4.0
argument_list|)
argument_list|)
expr_stmt|;
name|tag
operator|=
name|iters
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tag
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|tag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|"less"
else|:
literal|"more"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|filter1
operator|=
name|tag
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filter1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter1
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter1
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|filter2
operator|=
name|filter1
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
name|filter2Name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter2
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter2
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|2L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|filter2
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
name|statsName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|asc
condition|?
literal|4.0
else|:
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedByMissingSubAggregation
specifier|public
name|void
name|testSingleValuedFieldOrderedByMissingSubAggregation
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|index
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
control|)
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_i"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected search to fail when trying to sort terms aggregation by sug-aggregation that doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
DECL|method|testSingleValuedFieldOrderedByNonMetricsOrMultiBucketSubAggregation
specifier|public
name|void
name|testSingleValuedFieldOrderedByNonMetricsOrMultiBucketSubAggregation
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|index
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
control|)
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"values"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|terms
argument_list|(
literal|"values"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected search to fail when trying to sort terms aggregation by sug-aggregation which is not of a metrics or single-bucket type"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
DECL|method|testSingleValuedFieldOrderedByMultiValuedSubAggregationWithUknownMetric
specifier|public
name|void
name|testSingleValuedFieldOrderedByMultiValuedSubAggregationWithUknownMetric
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|index
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
control|)
block|{
try|try
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"stats.foo"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|stats
argument_list|(
literal|"stats"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"Expected search to fail when trying to sort terms aggregation by multi-valued sug-aggregation "
operator|+
literal|"with an unknown specified metric to order by. response had "
operator|+
name|response
operator|.
name|getFailedShards
argument_list|()
operator|+
literal|" failed shards."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
DECL|method|testSingleValuedFieldOrderedByMultiValuedSubAggregationWithoutMetric
specifier|public
name|void
name|testSingleValuedFieldOrderedByMultiValuedSubAggregationWithoutMetric
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|index
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
control|)
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"stats"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|stats
argument_list|(
literal|"stats"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected search to fail when trying to sort terms aggregation by multi-valued sug-aggregation "
operator|+
literal|"where the metric name is not specified"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
DECL|method|testSingleValuedFieldOrderedBySingleValueSubAggregationDesc
specifier|public
name|void
name|testSingleValuedFieldOrderedBySingleValueSubAggregationDesc
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|asc
init|=
literal|false
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_i"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|avg
argument_list|(
literal|"avg_i"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|4
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_i"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|avg
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
block|}
DECL|method|testSingleValuedFieldOrderedByMultiValueSubAggregationAsc
specifier|public
name|void
name|testSingleValuedFieldOrderedByMultiValueSubAggregationAsc
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|asc
init|=
literal|true
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"stats.avg"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|stats
argument_list|(
literal|"stats"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Stats
name|stats
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testSingleValuedFieldOrderedByMultiValueSubAggregationDesc
specifier|public
name|void
name|testSingleValuedFieldOrderedByMultiValueSubAggregationDesc
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|asc
init|=
literal|false
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"stats.avg"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|stats
argument_list|(
literal|"stats"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|4
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Stats
name|stats
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
block|}
DECL|method|testSingleValuedFieldOrderedByMultiValueExtendedStatsAsc
specifier|public
name|void
name|testSingleValuedFieldOrderedByMultiValueExtendedStatsAsc
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|asc
init|=
literal|true
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"stats.sum_of_squares"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|extendedStats
argument_list|(
literal|"stats"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|ExtendedStats
name|stats
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testSingleValuedFieldOrderedByStatsAggAscWithTermsSubAgg
specifier|public
name|void
name|testSingleValuedFieldOrderedByStatsAggAscWithTermsSubAgg
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|asc
init|=
literal|true
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"stats.sum_of_squares"
argument_list|,
name|asc
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|extendedStats
argument_list|(
literal|"stats"
argument_list|)
operator|.
name|field
argument_list|(
literal|"i"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|terms
argument_list|(
literal|"subTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"s_values"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|ExtendedStats
name|stats
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Terms
name|subTermsAgg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"subTerms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|subTermsAgg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subTermsAgg
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|j
init|=
name|i
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|subBucket
range|:
name|subTermsAgg
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|subBucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|subBucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subBucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsDesc
specifier|public
name|void
name|testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsDesc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedKeys
init|=
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|,
literal|"val4"
block|,
literal|"val3"
block|,
literal|"val7"
block|,
literal|"val6"
block|,
literal|"val5"
block|}
decl_stmt|;
name|assertMultiSortResponse
argument_list|(
name|expectedKeys
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_l"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsAsc
specifier|public
name|void
name|testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsAsc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedKeys
init|=
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|,
literal|"val3"
block|,
literal|"val4"
block|,
literal|"val5"
block|,
literal|"val6"
block|,
literal|"val7"
block|}
decl_stmt|;
name|assertMultiSortResponse
argument_list|(
name|expectedKeys
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_l"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedBySingleValueSubAggregationDescAndTermsAsc
specifier|public
name|void
name|testSingleValuedFieldOrderedBySingleValueSubAggregationDescAndTermsAsc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedKeys
init|=
operator|new
name|String
index|[]
block|{
literal|"val5"
block|,
literal|"val6"
block|,
literal|"val7"
block|,
literal|"val3"
block|,
literal|"val4"
block|,
literal|"val2"
block|,
literal|"val1"
block|}
decl_stmt|;
name|assertMultiSortResponse
argument_list|(
name|expectedKeys
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_l"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedByCountAscAndSingleValueSubAggregationAsc
specifier|public
name|void
name|testSingleValuedFieldOrderedByCountAscAndSingleValueSubAggregationAsc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedKeys
init|=
operator|new
name|String
index|[]
block|{
literal|"val6"
block|,
literal|"val7"
block|,
literal|"val3"
block|,
literal|"val4"
block|,
literal|"val5"
block|,
literal|"val1"
block|,
literal|"val2"
block|}
decl_stmt|;
name|assertMultiSortResponse
argument_list|(
name|expectedKeys
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|count
argument_list|(
literal|true
argument_list|)
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_l"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc
specifier|public
name|void
name|testSingleValuedFieldOrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedKeys
init|=
operator|new
name|String
index|[]
block|{
literal|"val6"
block|,
literal|"val7"
block|,
literal|"val3"
block|,
literal|"val5"
block|,
literal|"val4"
block|,
literal|"val1"
block|,
literal|"val2"
block|}
decl_stmt|;
name|assertMultiSortResponse
argument_list|(
name|expectedKeys
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"sum_d"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_l"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedByThreeCriteria
specifier|public
name|void
name|testSingleValuedFieldOrderedByThreeCriteria
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedKeys
init|=
operator|new
name|String
index|[]
block|{
literal|"val2"
block|,
literal|"val1"
block|,
literal|"val4"
block|,
literal|"val5"
block|,
literal|"val3"
block|,
literal|"val6"
block|,
literal|"val7"
block|}
decl_stmt|;
name|assertMultiSortResponse
argument_list|(
name|expectedKeys
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|count
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"sum_d"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_l"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldOrderedBySingleValueSubAggregationAscAsCompound
specifier|public
name|void
name|testSingleValuedFieldOrderedBySingleValueSubAggregationAscAsCompound
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedKeys
init|=
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|,
literal|"val3"
block|,
literal|"val4"
block|,
literal|"val5"
block|,
literal|"val6"
block|,
literal|"val7"
block|}
decl_stmt|;
name|assertMultiSortResponse
argument_list|(
name|expectedKeys
argument_list|,
name|Terms
operator|.
name|Order
operator|.
name|aggregation
argument_list|(
literal|"avg_l"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMultiSortResponse
specifier|private
name|void
name|assertMultiSortResponse
parameter_list|(
name|String
index|[]
name|expectedKeys
parameter_list|,
name|Terms
operator|.
name|Order
modifier|...
name|order
parameter_list|)
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"sort_idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"multi_sort_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|compound
argument_list|(
name|order
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|avg
argument_list|(
literal|"avg_l"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum_d"
argument_list|)
operator|.
name|field
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedKeys
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedKeys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedMultiSortBuckets
operator|.
name|get
argument_list|(
name|expectedKeys
index|[
name|i
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_l"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|avg
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedMultiSortBuckets
operator|.
name|get
argument_list|(
name|expectedKeys
index|[
name|i
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|"avg_l"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum_d"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sum
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedMultiSortBuckets
operator|.
name|get
argument_list|(
name|expectedKeys
index|[
name|i
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|"sum_d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testIndexMetaField
specifier|public
name|void
name|testIndexMetaField
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|,
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|IndexFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|"idx"
else|:
literal|"empty_bucket_idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|5L
else|:
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testOtherDocCount
specifier|public
name|void
name|testOtherDocCount
parameter_list|()
block|{
name|testOtherDocCount
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|MULTI_VALUED_FIELD_NAME
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

