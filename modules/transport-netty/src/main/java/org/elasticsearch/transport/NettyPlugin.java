begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty
operator|.
name|NettyHttpServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
operator|.
name|NettyTransport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|NettyPlugin
specifier|public
class|class
name|NettyPlugin
extends|extends
name|Plugin
block|{
DECL|field|NETTY_TRANSPORT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|NETTY_TRANSPORT_NAME
init|=
literal|"netty"
decl_stmt|;
DECL|field|NETTY_HTTP_TRANSPORT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|NETTY_HTTP_TRANSPORT_NAME
init|=
literal|"netty"
decl_stmt|;
DECL|method|NettyPlugin
specifier|public
name|NettyPlugin
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
name|sm
operator|.
name|checkPermission
argument_list|(
operator|new
name|SpecialPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.jboss.netty.channel.socket.nio.SelectorUtil"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
comment|// we don't do anything with this
block|}
return|return
literal|null
return|;
block|}
block|)
class|;
end_class

begin_comment
comment|/*          * Asserts that sun.nio.ch.bugLevel has been set to a non-null value. This assertion will fail if the corresponding code          * is not executed in a doPrivileged block. This can be disabled via `netty.assert.buglevel` setting which isn't registered          * by default but test can do so if they depend on the jar instead of the module.          */
end_comment

begin_comment
comment|//TODO Once we have no jar level dependency we can get rid of this.
end_comment

begin_if
if|if
condition|(
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"netty.assert.buglevel"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
assert|assert
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.nio.ch.bugLevel"
argument_list|)
operator|!=
literal|null
operator|:
literal|"sun.nio.ch.bugLevel is null somebody pulls in SelectorUtil without doing stuff in a doPrivileged block?"
assert|;
block|}
end_if

begin_function
unit|}      @
name|Override
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|NettyHttpServerTransport
operator|.
name|SETTING_HTTP_NETTY_MAX_CUMULATION_BUFFER_CAPACITY
argument_list|,
name|NettyHttpServerTransport
operator|.
name|SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS
argument_list|,
name|NettyHttpServerTransport
operator|.
name|SETTING_HTTP_WORKER_COUNT
argument_list|,
name|NettyHttpServerTransport
operator|.
name|SETTING_HTTP_TCP_NO_DELAY
argument_list|,
name|NettyHttpServerTransport
operator|.
name|SETTING_HTTP_TCP_KEEP_ALIVE
argument_list|,
name|NettyHttpServerTransport
operator|.
name|SETTING_HTTP_TCP_BLOCKING_SERVER
argument_list|,
name|NettyHttpServerTransport
operator|.
name|SETTING_HTTP_TCP_REUSE_ADDRESS
argument_list|,
name|NettyHttpServerTransport
operator|.
name|SETTING_HTTP_TCP_SEND_BUFFER_SIZE
argument_list|,
name|NettyHttpServerTransport
operator|.
name|SETTING_HTTP_TCP_RECEIVE_BUFFER_SIZE
argument_list|,
name|NettyTransport
operator|.
name|WORKER_COUNT
argument_list|,
name|NettyTransport
operator|.
name|NETTY_MAX_CUMULATION_BUFFER_CAPACITY
argument_list|,
name|NettyTransport
operator|.
name|NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS
argument_list|,
name|NettyTransport
operator|.
name|NETTY_RECEIVE_PREDICTOR_SIZE
argument_list|,
name|NettyTransport
operator|.
name|NETTY_RECEIVE_PREDICTOR_MIN
argument_list|,
name|NettyTransport
operator|.
name|NETTY_RECEIVE_PREDICTOR_MAX
argument_list|,
name|NettyTransport
operator|.
name|NETTY_BOSS_COUNT
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|onModule
specifier|public
name|void
name|onModule
parameter_list|(
name|NetworkModule
name|networkModule
parameter_list|)
block|{
if|if
condition|(
name|networkModule
operator|.
name|canRegisterHttpExtensions
argument_list|()
condition|)
block|{
name|networkModule
operator|.
name|registerHttpTransport
argument_list|(
name|NETTY_HTTP_TRANSPORT_NAME
argument_list|,
name|NettyHttpServerTransport
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|networkModule
operator|.
name|registerTransport
argument_list|(
name|NETTY_TRANSPORT_NAME
argument_list|,
name|NettyTransport
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

