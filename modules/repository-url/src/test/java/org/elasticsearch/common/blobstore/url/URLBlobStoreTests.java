begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.blobstore.url
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|url
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|mocksocket
operator|.
name|MockHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_class
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"use http server"
argument_list|)
DECL|class|URLBlobStoreTests
specifier|public
class|class
name|URLBlobStoreTests
extends|extends
name|ESTestCase
block|{
DECL|field|httpServer
specifier|private
specifier|static
name|HttpServer
name|httpServer
decl_stmt|;
DECL|field|blobName
specifier|private
specifier|static
name|String
name|blobName
decl_stmt|;
DECL|field|message
specifier|private
specifier|static
name|byte
index|[]
name|message
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
DECL|field|urlBlobStore
specifier|private
name|URLBlobStore
name|urlBlobStore
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startHttp
specifier|public
specifier|static
name|void
name|startHttp
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|message
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|message
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
block|}
name|blobName
operator|=
name|randomAsciiOfLength
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|httpServer
operator|=
name|MockHttpServer
operator|.
name|createHttp
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|,
literal|6001
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|createContext
argument_list|(
literal|"/indices/"
operator|+
name|blobName
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{
name|s
operator|.
name|sendResponseHeaders
argument_list|(
literal|200
argument_list|,
name|message
operator|.
name|length
argument_list|)
expr_stmt|;
name|OutputStream
name|responseBody
init|=
name|s
operator|.
name|getResponseBody
argument_list|()
decl_stmt|;
name|responseBody
operator|.
name|write
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|responseBody
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|stopHttp
specifier|public
specifier|static
name|void
name|stopHttp
parameter_list|()
throws|throws
name|IOException
block|{
name|httpServer
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|httpServer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|storeSetup
specifier|public
name|void
name|storeSetup
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|EMPTY
decl_stmt|;
name|String
name|spec
init|=
literal|"http://localhost:6001/"
decl_stmt|;
name|urlBlobStore
operator|=
operator|new
name|URLBlobStore
argument_list|(
name|settings
argument_list|,
operator|new
name|URL
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testURLBlobStoreCanReadBlob
specifier|public
name|void
name|testURLBlobStoreCanReadBlob
parameter_list|()
throws|throws
name|IOException
block|{
name|BlobContainer
name|container
init|=
name|urlBlobStore
operator|.
name|blobContainer
argument_list|(
name|BlobPath
operator|.
name|cleanPath
argument_list|()
operator|.
name|add
argument_list|(
literal|"indices"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|container
operator|.
name|readBlob
argument_list|(
name|blobName
argument_list|)
init|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|message
operator|.
name|length
index|]
decl_stmt|;
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|message
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|message
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNoBlobFound
specifier|public
name|void
name|testNoBlobFound
parameter_list|()
throws|throws
name|IOException
block|{
name|BlobContainer
name|container
init|=
name|urlBlobStore
operator|.
name|blobContainer
argument_list|(
name|BlobPath
operator|.
name|cleanPath
argument_list|()
operator|.
name|add
argument_list|(
literal|"indices"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|incorrectBlobName
init|=
literal|"incorrect_"
operator|+
name|blobName
decl_stmt|;
try|try
init|(
name|InputStream
name|ignored
init|=
name|container
operator|.
name|readBlob
argument_list|(
name|incorrectBlobName
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"Should have thrown NoSuchFileException exception"
argument_list|)
expr_stmt|;
name|ignored
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"[%s] blob not found"
argument_list|,
name|incorrectBlobName
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

