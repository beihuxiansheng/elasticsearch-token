begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.url
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|url
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoryMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
DECL|class|URLRepositoryTests
specifier|public
class|class
name|URLRepositoryTests
extends|extends
name|ESTestCase
block|{
DECL|method|testWhiteListingRepoURL
specifier|public
name|void
name|testWhiteListingRepoURL
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|repoPath
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"repository"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Settings
name|baseSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|URLRepository
operator|.
name|ALLOWED_URLS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|repoPath
argument_list|)
operator|.
name|put
argument_list|(
name|URLRepository
operator|.
name|REPOSITORIES_URL_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|repoPath
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RepositoryMetaData
name|repositoryMetaData
init|=
operator|new
name|RepositoryMetaData
argument_list|(
literal|"url"
argument_list|,
name|URLRepository
operator|.
name|TYPE
argument_list|,
name|baseSettings
argument_list|)
decl_stmt|;
operator|new
name|URLRepository
argument_list|(
name|repositoryMetaData
argument_list|,
operator|new
name|Environment
argument_list|(
name|baseSettings
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIfNotWhiteListedMustSetRepoURL
specifier|public
name|void
name|testIfNotWhiteListedMustSetRepoURL
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|repoPath
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"repository"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Settings
name|baseSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|URLRepository
operator|.
name|REPOSITORIES_URL_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|repoPath
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RepositoryMetaData
name|repositoryMetaData
init|=
operator|new
name|RepositoryMetaData
argument_list|(
literal|"url"
argument_list|,
name|URLRepository
operator|.
name|TYPE
argument_list|,
name|baseSettings
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|URLRepository
argument_list|(
name|repositoryMetaData
argument_list|,
operator|new
name|Environment
argument_list|(
name|baseSettings
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RepositoryException should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"[url] file url ["
operator|+
name|repoPath
operator|+
literal|"] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls"
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMustBeSupportedProtocol
specifier|public
name|void
name|testMustBeSupportedProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|directory
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|repoPath
init|=
name|directory
operator|.
name|resolve
argument_list|(
literal|"repository"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Settings
name|baseSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_REPO_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|directory
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|URLRepository
operator|.
name|REPOSITORIES_URL_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|repoPath
argument_list|)
operator|.
name|put
argument_list|(
name|URLRepository
operator|.
name|SUPPORTED_PROTOCOLS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"http,https"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RepositoryMetaData
name|repositoryMetaData
init|=
operator|new
name|RepositoryMetaData
argument_list|(
literal|"url"
argument_list|,
name|URLRepository
operator|.
name|TYPE
argument_list|,
name|baseSettings
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|URLRepository
argument_list|(
name|repositoryMetaData
argument_list|,
operator|new
name|Environment
argument_list|(
name|baseSettings
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RepositoryException should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"[url] unsupported url protocol [file] from URL ["
operator|+
name|repoPath
operator|+
literal|"]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

