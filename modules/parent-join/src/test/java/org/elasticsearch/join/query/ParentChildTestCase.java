begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.join.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|join
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|join
operator|.
name|ParentJoinPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
argument_list|)
DECL|class|ParentChildTestCase
specifier|public
specifier|abstract
class|class
name|ParentChildTestCase
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|ignoreExternalCluster
specifier|protected
name|boolean
name|ignoreExternalCluster
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|ParentJoinPlugin
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|transportClientPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|transportClientPlugins
parameter_list|()
block|{
return|return
name|nodePlugins
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|indexSettings
specifier|public
name|Settings
name|indexSettings
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|indexSettings
argument_list|()
argument_list|)
comment|// aggressive filter caching so that we can assert on the filter cache size
operator|.
name|put
argument_list|(
name|IndexModule
operator|.
name|INDEX_QUERY_CACHE_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexModule
operator|.
name|INDEX_QUERY_CACHE_EVERYTHING_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|legacy
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"index.mapping.single_type"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|legacy
specifier|protected
name|boolean
name|legacy
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|createIndexRequest
specifier|protected
name|IndexRequestBuilder
name|createIndexRequest
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|parentId
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|source
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|fields
index|[
name|i
index|]
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|createIndexRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|parentId
argument_list|,
name|source
argument_list|)
return|;
block|}
DECL|method|createIndexRequest
specifier|protected
name|IndexRequestBuilder
name|createIndexRequest
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|parentId
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|createIndexRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|parentId
argument_list|,
name|source
argument_list|)
return|;
block|}
DECL|method|createIndexRequest
specifier|private
name|IndexRequestBuilder
name|createIndexRequest
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|parentId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
name|String
name|name
init|=
name|type
decl_stmt|;
if|if
condition|(
name|legacy
argument_list|()
operator|==
literal|false
condition|)
block|{
name|type
operator|=
literal|"doc"
expr_stmt|;
block|}
name|IndexRequestBuilder
name|indexRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|legacy
argument_list|()
condition|)
block|{
if|if
condition|(
name|parentId
operator|!=
literal|null
condition|)
block|{
name|indexRequestBuilder
operator|.
name|setParent
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
block|}
name|indexRequestBuilder
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|joinField
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentId
operator|!=
literal|null
condition|)
block|{
name|joinField
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|joinField
operator|.
name|put
argument_list|(
literal|"parent"
argument_list|,
name|parentId
argument_list|)
expr_stmt|;
name|indexRequestBuilder
operator|.
name|setRouting
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joinField
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|source
operator|.
name|put
argument_list|(
literal|"join_field"
argument_list|,
name|joinField
argument_list|)
expr_stmt|;
name|indexRequestBuilder
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|indexRequestBuilder
return|;
block|}
block|}
end_class

end_unit

