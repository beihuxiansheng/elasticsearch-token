begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.join.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|join
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_class
DECL|class|JoinQueryBuilders
specifier|public
specifier|abstract
class|class
name|JoinQueryBuilders
block|{
comment|/**      * Constructs a new has_child query, with the child type and the query to run on the child documents. The      * results of this query are the parent docs that those child docs matched.      *      * @param type      The child type.      * @param query     The query.      * @param scoreMode How the scores from the children hits should be aggregated into the parent hit.      */
DECL|method|hasChildQuery
specifier|public
specifier|static
name|HasChildQueryBuilder
name|hasChildQuery
parameter_list|(
name|String
name|type
parameter_list|,
name|QueryBuilder
name|query
parameter_list|,
name|ScoreMode
name|scoreMode
parameter_list|)
block|{
return|return
operator|new
name|HasChildQueryBuilder
argument_list|(
name|type
argument_list|,
name|query
argument_list|,
name|scoreMode
argument_list|)
return|;
block|}
comment|/**      * Constructs a new parent query, with the parent type and the query to run on the parent documents. The      * results of this query are the children docs that those parent docs matched.      *      * @param type      The parent type.      * @param query     The query.      * @param score     Whether the score from the parent hit should propagate to the child hit      */
DECL|method|hasParentQuery
specifier|public
specifier|static
name|HasParentQueryBuilder
name|hasParentQuery
parameter_list|(
name|String
name|type
parameter_list|,
name|QueryBuilder
name|query
parameter_list|,
name|boolean
name|score
parameter_list|)
block|{
return|return
operator|new
name|HasParentQueryBuilder
argument_list|(
name|type
argument_list|,
name|query
argument_list|,
name|score
argument_list|)
return|;
block|}
comment|/**      * Constructs a new parent id query that returns all child documents of the specified type that      * point to the specified id.      */
DECL|method|parentId
specifier|public
specifier|static
name|ParentIdQueryBuilder
name|parentId
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|ParentIdQueryBuilder
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
end_class

end_unit

