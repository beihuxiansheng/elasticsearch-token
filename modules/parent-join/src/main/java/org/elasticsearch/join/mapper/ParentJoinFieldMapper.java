begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.join.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|join
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|DocValuesIndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ContentPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|StringFieldType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A {@link FieldMapper} that creates hierarchical joins (parent-join) between documents in the same index.  * TODO Should be restricted to a single join field per index  */
end_comment

begin_class
DECL|class|ParentJoinFieldMapper
specifier|public
specifier|final
class|class
name|ParentJoinFieldMapper
extends|extends
name|FieldMapper
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"join"
decl_stmt|;
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"join"
decl_stmt|;
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|MappedFieldType
name|FIELD_TYPE
init|=
operator|new
name|JoinFieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|FIELD_TYPE
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getParentIdFieldName
specifier|static
name|String
name|getParentIdFieldName
parameter_list|(
name|String
name|joinFieldName
parameter_list|,
name|String
name|parentName
parameter_list|)
block|{
return|return
name|joinFieldName
operator|+
literal|"#"
operator|+
name|parentName
return|;
block|}
DECL|method|checkPreConditions
specifier|static
name|void
name|checkPreConditions
parameter_list|(
name|Version
name|indexCreatedVersion
parameter_list|,
name|ContentPath
name|path
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|indexCreatedVersion
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to create join field ["
operator|+
name|name
operator|+
literal|"] for index created before "
operator|+
name|Version
operator|.
name|V_6_0_0_alpha2
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|.
name|pathAsText
argument_list|(
name|name
argument_list|)
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"join field ["
operator|+
name|path
operator|.
name|pathAsText
argument_list|(
name|name
argument_list|)
operator|+
literal|"] "
operator|+
literal|"cannot be added inside an object or in a multi-field"
argument_list|)
throw|;
block|}
block|}
DECL|method|checkParentFields
specifier|static
name|void
name|checkParentFields
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|ParentIdFieldMapper
argument_list|>
name|mappers
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|children
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ParentIdFieldMapper
name|mapper
range|:
name|mappers
control|)
block|{
for|for
control|(
name|String
name|child
range|:
name|mapper
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"["
operator|+
name|child
operator|+
literal|"] cannot have multiple parents"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|conflicts
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid definition for join field ["
operator|+
name|name
operator|+
literal|"]:\n"
operator|+
name|conflicts
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|checkDuplicateJoinFields
specifier|static
name|void
name|checkDuplicateJoinFields
parameter_list|(
name|ParseContext
operator|.
name|Document
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|.
name|getFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
parameter_list|(
lambda|m
argument_list|)
operator|->
name|m
operator|.
name|fieldType
argument_list|()
operator|instanceof
name|JoinFieldType
condition|)
block|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot have two join fields in the same document"
argument_list|)
throw|;
block|}
block|}
end_class

begin_class
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|FieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|ParentJoinFieldMapper
argument_list|>
block|{
DECL|field|parentIdFieldBuilders
specifier|final
name|List
argument_list|<
name|ParentIdFieldMapper
operator|.
name|Builder
argument_list|>
name|parentIdFieldBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|JoinFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|JoinFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
DECL|method|addParent
specifier|public
name|Builder
name|addParent
parameter_list|(
name|String
name|parent
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|children
parameter_list|)
block|{
name|String
name|parentIdFieldName
init|=
name|getParentIdFieldName
argument_list|(
name|name
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|parentIdFieldBuilders
operator|.
name|add
argument_list|(
operator|new
name|ParentIdFieldMapper
operator|.
name|Builder
argument_list|(
name|parentIdFieldName
argument_list|,
name|parent
argument_list|,
name|children
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|ParentJoinFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|checkPreConditions
argument_list|(
name|context
operator|.
name|indexCreatedVersion
argument_list|()
argument_list|,
name|context
operator|.
name|path
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ParentIdFieldMapper
argument_list|>
name|parentIdFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|parentIdFieldBuilders
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|e
parameter_list|)
lambda|->
name|e
operator|.
name|build
argument_list|(
name|context
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|parentIdFields
operator|::
name|add
argument_list|)
expr_stmt|;
name|checkParentFields
argument_list|(
name|name
argument_list|()
argument_list|,
name|parentIdFields
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParentJoinFieldMapper
argument_list|(
name|name
argument_list|,
name|fieldType
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|parentIdFields
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_class
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
specifier|final
name|IndexSettings
name|indexSettings
init|=
name|parserContext
operator|.
name|mapperService
argument_list|()
operator|.
name|getIndexSettings
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexSettings
operator|.
name|getIndexMetaData
argument_list|()
operator|.
name|isRoutingPartitionedIndex
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot set join field ["
operator|+
name|name
operator|+
literal|"] for the partitioned index "
operator|+
literal|"["
operator|+
name|indexSettings
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|String
name|parent
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|children
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
name|children
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|childObj
range|:
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|childObj
operator|instanceof
name|String
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
name|childObj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"["
operator|+
name|parent
operator|+
literal|"] expected an array of strings but was:"
operator|+
name|childObj
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|children
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|children
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"["
operator|+
name|parent
operator|+
literal|"] expected string but was:"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
name|builder
operator|.
name|addParent
argument_list|(
name|parent
argument_list|,
name|children
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
end_class

begin_class
DECL|class|JoinFieldType
specifier|public
specifier|static
specifier|final
class|class
name|JoinFieldType
extends|extends
name|StringFieldType
block|{
DECL|method|JoinFieldType
specifier|public
name|JoinFieldType
parameter_list|()
block|{
name|setIndexAnalyzer
argument_list|(
name|Lucene
operator|.
name|KEYWORD_ANALYZER
argument_list|)
expr_stmt|;
name|setSearchAnalyzer
argument_list|(
name|Lucene
operator|.
name|KEYWORD_ANALYZER
argument_list|)
expr_stmt|;
block|}
DECL|method|JoinFieldType
specifier|protected
name|JoinFieldType
parameter_list|(
name|JoinFieldType
name|ref
parameter_list|)
block|{
name|super
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|clone
specifier|public
name|JoinFieldType
name|clone
parameter_list|()
block|{
return|return
operator|new
name|JoinFieldType
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|typeName
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|fielddataBuilder
specifier|public
name|IndexFieldData
operator|.
name|Builder
name|fielddataBuilder
parameter_list|()
block|{
name|failIfNoDocValues
argument_list|()
expr_stmt|;
return|return
operator|new
name|DocValuesIndexFieldData
operator|.
name|Builder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|valueForDisplay
specifier|public
name|Object
name|valueForDisplay
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BytesRef
name|binaryValue
init|=
operator|(
name|BytesRef
operator|)
name|value
decl_stmt|;
return|return
name|binaryValue
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
block|}
end_class

begin_decl_stmt
DECL|field|parentIdFields
specifier|private
name|List
argument_list|<
name|ParentIdFieldMapper
argument_list|>
name|parentIdFields
decl_stmt|;
end_decl_stmt

begin_constructor
DECL|method|ParentJoinFieldMapper
specifier|protected
name|ParentJoinFieldMapper
parameter_list|(
name|String
name|simpleName
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|List
argument_list|<
name|ParentIdFieldMapper
argument_list|>
name|parentIdFields
parameter_list|)
block|{
name|super
argument_list|(
name|simpleName
argument_list|,
name|fieldType
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|,
name|indexSettings
argument_list|,
name|MultiFields
operator|.
name|empty
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentIdFields
operator|=
name|parentIdFields
expr_stmt|;
block|}
end_constructor

begin_function
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clone
specifier|protected
name|ParentJoinFieldMapper
name|clone
parameter_list|()
block|{
return|return
operator|(
name|ParentJoinFieldMapper
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|JoinFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|JoinFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Mapper
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|parentIdFields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|field
parameter_list|)
lambda|->
operator|(
name|Mapper
operator|)
name|field
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * Returns true if<code>name</code> is a parent name in the field.      */
end_comment

begin_function
DECL|method|hasParent
specifier|public
name|boolean
name|hasParent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parentIdFields
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
parameter_list|(
name|mapper
parameter_list|)
lambda|->
name|name
operator|.
name|equals
argument_list|(
name|mapper
operator|.
name|getParentName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Returns true if<code>name</code> is a child name in the field.      */
end_comment

begin_function
DECL|method|hasChild
specifier|public
name|boolean
name|hasChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parentIdFields
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
parameter_list|(
name|mapper
parameter_list|)
lambda|->
name|mapper
operator|.
name|getChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Returns the parent Id field mapper associated with a parent<code>name</code>      * if<code>isParent</code> is true and a child<code>name</code> otherwise.      */
end_comment

begin_function
DECL|method|getParentIdFieldMapper
specifier|public
name|ParentIdFieldMapper
name|getParentIdFieldMapper
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isParent
parameter_list|)
block|{
for|for
control|(
name|ParentIdFieldMapper
name|mapper
range|:
name|parentIdFields
control|)
block|{
if|if
condition|(
name|isParent
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|mapper
operator|.
name|getParentName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|mapper
return|;
block|}
elseif|else
if|if
condition|(
name|isParent
operator|==
literal|false
operator|&&
name|mapper
operator|.
name|getChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|mapper
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|doMerge
specifier|protected
name|void
name|doMerge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
name|super
operator|.
name|doMerge
argument_list|(
name|mergeWith
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
name|ParentJoinFieldMapper
name|joinMergeWith
init|=
operator|(
name|ParentJoinFieldMapper
operator|)
name|mergeWith
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ParentIdFieldMapper
name|mapper
range|:
name|parentIdFields
control|)
block|{
if|if
condition|(
name|joinMergeWith
operator|.
name|getParentIdFieldMapper
argument_list|(
name|mapper
operator|.
name|getParentName
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"cannot remove parent ["
operator|+
name|mapper
operator|.
name|getParentName
argument_list|()
operator|+
literal|"] in join field ["
operator|+
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|ParentIdFieldMapper
argument_list|>
name|newParentIdFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ParentIdFieldMapper
name|mergeWithMapper
range|:
name|joinMergeWith
operator|.
name|parentIdFields
control|)
block|{
name|ParentIdFieldMapper
name|self
init|=
name|getParentIdFieldMapper
argument_list|(
name|mergeWithMapper
operator|.
name|getParentName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|self
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getParentIdFieldMapper
argument_list|(
name|mergeWithMapper
operator|.
name|getParentName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// it is forbidden to add a parent to an existing child
name|conflicts
operator|.
name|add
argument_list|(
literal|"cannot create parent ["
operator|+
name|mergeWithMapper
operator|.
name|getParentName
argument_list|()
operator|+
literal|"] from an existing child"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|child
range|:
name|mergeWithMapper
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|getParentIdFieldMapper
argument_list|(
name|child
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// it is forbidden to add a parent to an existing child
name|conflicts
operator|.
name|add
argument_list|(
literal|"cannot create child ["
operator|+
name|child
operator|+
literal|"] from an existing parent"
argument_list|)
expr_stmt|;
block|}
block|}
name|newParentIdFields
operator|.
name|add
argument_list|(
name|mergeWithMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|child
range|:
name|self
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|mergeWithMapper
operator|.
name|getChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|child
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"cannot remove child ["
operator|+
name|child
operator|+
literal|"] in join field ["
operator|+
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
name|ParentIdFieldMapper
name|merged
init|=
operator|(
name|ParentIdFieldMapper
operator|)
name|self
operator|.
name|merge
argument_list|(
name|mergeWithMapper
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|newParentIdFields
operator|.
name|add
argument_list|(
name|merged
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conflicts
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"invalid update for join field ["
operator|+
name|name
argument_list|()
operator|+
literal|"]:\n"
operator|+
name|conflicts
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|parentIdFields
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|newParentIdFields
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|updateFieldType
specifier|public
name|FieldMapper
name|updateFieldType
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MappedFieldType
argument_list|>
name|fullNameToFieldType
parameter_list|)
block|{
name|ParentJoinFieldMapper
name|fieldMapper
init|=
operator|(
name|ParentJoinFieldMapper
operator|)
name|super
operator|.
name|updateFieldType
argument_list|(
name|fullNameToFieldType
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ParentIdFieldMapper
argument_list|>
name|newMappers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ParentIdFieldMapper
name|mapper
range|:
name|fieldMapper
operator|.
name|parentIdFields
control|)
block|{
name|newMappers
operator|.
name|add
argument_list|(
operator|(
name|ParentIdFieldMapper
operator|)
name|mapper
operator|.
name|updateFieldType
argument_list|(
name|fullNameToFieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldMapper
operator|.
name|parentIdFields
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|newMappers
argument_list|)
expr_stmt|;
return|return
name|fieldMapper
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|parseCreateField
specifier|protected
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|IndexableField
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"parsing is implemented in parse(), this method should NEVER be called"
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
name|parse
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Only one join field per document
name|checkDuplicateJoinFields
argument_list|(
name|context
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|simpleName
argument_list|()
argument_list|)
expr_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|parent
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
literal|"name"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|name
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"parent"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|parent
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown field name ["
operator|+
name|currentFieldName
operator|+
literal|"] in join field ["
operator|+
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|name
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|text
argument_list|()
expr_stmt|;
name|parent
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"["
operator|+
name|name
operator|+
literal|"] expected START_OBJECT or VALUE_STRING but was: "
operator|+
name|token
argument_list|)
throw|;
block|}
name|ParentIdFieldMapper
name|parentIdField
init|=
name|getParentIdFieldMapper
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ParentIdFieldMapper
name|childParentIdField
init|=
name|getParentIdFieldMapper
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIdField
operator|==
literal|null
operator|&&
name|childParentIdField
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown join name ["
operator|+
name|name
operator|+
literal|"] for field ["
operator|+
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|childParentIdField
operator|!=
literal|null
condition|)
block|{
comment|// Index the document as a child
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[parent] is missing for join field ["
operator|+
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|.
name|sourceToParse
argument_list|()
operator|.
name|routing
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[routing] is missing for join field ["
operator|+
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
assert|assert
name|childParentIdField
operator|.
name|getChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
assert|;
name|ParseContext
name|externalContext
init|=
name|context
operator|.
name|createExternalValueContext
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|childParentIdField
operator|.
name|parse
argument_list|(
name|externalContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentIdField
operator|!=
literal|null
condition|)
block|{
comment|// Index the document as a parent
assert|assert
name|parentIdField
operator|.
name|getParentName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
assert|;
name|ParseContext
name|externalContext
init|=
name|context
operator|.
name|createExternalValueContext
argument_list|(
name|context
operator|.
name|sourceToParse
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|parentIdField
operator|.
name|parse
argument_list|(
name|externalContext
argument_list|)
expr_stmt|;
block|}
name|BytesRef
name|binaryValue
init|=
operator|new
name|BytesRef
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|binaryValue
argument_list|,
name|fieldType
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|context
operator|.
name|doc
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|binaryValue
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|void
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|contentType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ParentIdFieldMapper
name|field
range|:
name|parentIdFields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|field
operator|.
name|getParentName
argument_list|()
argument_list|,
name|field
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|field
operator|.
name|getParentName
argument_list|()
argument_list|,
name|field
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

unit|}
end_unit

