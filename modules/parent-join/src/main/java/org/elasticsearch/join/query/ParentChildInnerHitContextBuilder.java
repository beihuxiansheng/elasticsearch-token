begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.join.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|join
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocValuesTermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|IdFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParentFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|InnerHitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|InnerHitContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|join
operator|.
name|mapper
operator|.
name|ParentIdFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|join
operator|.
name|mapper
operator|.
name|ParentJoinFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHitField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|InnerHitsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|InnerHitsContext
operator|.
name|intersect
import|;
end_import

begin_class
DECL|class|ParentChildInnerHitContextBuilder
class|class
name|ParentChildInnerHitContextBuilder
extends|extends
name|InnerHitContextBuilder
block|{
DECL|field|typeName
specifier|private
specifier|final
name|String
name|typeName
decl_stmt|;
DECL|field|fetchChildInnerHits
specifier|private
specifier|final
name|boolean
name|fetchChildInnerHits
decl_stmt|;
DECL|method|ParentChildInnerHitContextBuilder
name|ParentChildInnerHitContextBuilder
parameter_list|(
name|String
name|typeName
parameter_list|,
name|boolean
name|fetchChildInnerHits
parameter_list|,
name|QueryBuilder
name|query
parameter_list|,
name|InnerHitBuilder
name|innerHitBuilder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InnerHitContextBuilder
argument_list|>
name|children
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|,
name|innerHitBuilder
argument_list|,
name|children
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|fetchChildInnerHits
operator|=
name|fetchChildInnerHits
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|void
name|build
parameter_list|(
name|SearchContext
name|parentSearchContext
parameter_list|,
name|InnerHitsContext
name|innerHitsContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentSearchContext
operator|.
name|mapperService
argument_list|()
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|isSingleType
argument_list|()
condition|)
block|{
name|handleJoinFieldInnerHits
argument_list|(
name|parentSearchContext
argument_list|,
name|innerHitsContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleParentFieldInnerHits
argument_list|(
name|parentSearchContext
argument_list|,
name|innerHitsContext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleJoinFieldInnerHits
specifier|private
name|void
name|handleJoinFieldInnerHits
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|InnerHitsContext
name|innerHitsContext
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryShardContext
name|queryShardContext
init|=
name|context
operator|.
name|getQueryShardContext
argument_list|()
decl_stmt|;
name|ParentJoinFieldMapper
name|joinFieldMapper
init|=
name|ParentJoinFieldMapper
operator|.
name|getMapper
argument_list|(
name|context
operator|.
name|mapperService
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinFieldMapper
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|innerHitBuilder
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|?
name|innerHitBuilder
operator|.
name|getName
argument_list|()
else|:
name|typeName
decl_stmt|;
name|JoinFieldInnerHitSubContext
name|joinFieldInnerHits
init|=
operator|new
name|JoinFieldInnerHitSubContext
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|typeName
argument_list|,
name|fetchChildInnerHits
argument_list|,
name|joinFieldMapper
argument_list|)
decl_stmt|;
name|setupInnerHitsContext
argument_list|(
name|queryShardContext
argument_list|,
name|joinFieldInnerHits
argument_list|)
expr_stmt|;
name|innerHitsContext
operator|.
name|addInnerHitDefinition
argument_list|(
name|joinFieldInnerHits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|innerHitBuilder
operator|.
name|isIgnoreUnmapped
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no join field has been configured"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|handleParentFieldInnerHits
specifier|private
name|void
name|handleParentFieldInnerHits
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|InnerHitsContext
name|innerHitsContext
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryShardContext
name|queryShardContext
init|=
name|context
operator|.
name|getQueryShardContext
argument_list|()
decl_stmt|;
name|DocumentMapper
name|documentMapper
init|=
name|queryShardContext
operator|.
name|documentMapper
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentMapper
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|innerHitBuilder
operator|.
name|isIgnoreUnmapped
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"["
operator|+
name|query
operator|.
name|getName
argument_list|()
operator|+
literal|"] no mapping found for type ["
operator|+
name|typeName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
return|return;
block|}
block|}
name|String
name|name
init|=
name|innerHitBuilder
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|?
name|innerHitBuilder
operator|.
name|getName
argument_list|()
else|:
name|documentMapper
operator|.
name|type
argument_list|()
decl_stmt|;
name|ParentChildInnerHitSubContext
name|parentChildInnerHits
init|=
operator|new
name|ParentChildInnerHitSubContext
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|queryShardContext
operator|.
name|getMapperService
argument_list|()
argument_list|,
name|documentMapper
argument_list|)
decl_stmt|;
name|setupInnerHitsContext
argument_list|(
name|queryShardContext
argument_list|,
name|parentChildInnerHits
argument_list|)
expr_stmt|;
name|innerHitsContext
operator|.
name|addInnerHitDefinition
argument_list|(
name|parentChildInnerHits
argument_list|)
expr_stmt|;
block|}
DECL|class|JoinFieldInnerHitSubContext
specifier|static
specifier|final
class|class
name|JoinFieldInnerHitSubContext
extends|extends
name|InnerHitsContext
operator|.
name|InnerHitSubContext
block|{
DECL|field|typeName
specifier|private
specifier|final
name|String
name|typeName
decl_stmt|;
DECL|field|fetchChildInnerHits
specifier|private
specifier|final
name|boolean
name|fetchChildInnerHits
decl_stmt|;
DECL|field|joinFieldMapper
specifier|private
specifier|final
name|ParentJoinFieldMapper
name|joinFieldMapper
decl_stmt|;
DECL|method|JoinFieldInnerHitSubContext
name|JoinFieldInnerHitSubContext
parameter_list|(
name|String
name|name
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|String
name|typeName
parameter_list|,
name|boolean
name|fetchChildInnerHits
parameter_list|,
name|ParentJoinFieldMapper
name|joinFieldMapper
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|fetchChildInnerHits
operator|=
name|fetchChildInnerHits
expr_stmt|;
name|this
operator|.
name|joinFieldMapper
operator|=
name|joinFieldMapper
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|topDocs
specifier|public
name|TopDocs
index|[]
name|topDocs
parameter_list|(
name|SearchHit
index|[]
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|Weight
name|innerHitQueryWeight
init|=
name|createInnerHitQueryWeight
argument_list|()
decl_stmt|;
name|TopDocs
index|[]
name|result
init|=
operator|new
name|TopDocs
index|[
name|hits
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|hits
index|[
name|i
index|]
decl_stmt|;
name|SearchHitField
name|joinField
init|=
name|hit
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
name|joinFieldMapper
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinField
operator|==
literal|null
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|Lucene
operator|.
name|EMPTY_TOP_DOCS
expr_stmt|;
continue|continue;
block|}
name|QueryShardContext
name|qsc
init|=
name|context
operator|.
name|getQueryShardContext
argument_list|()
decl_stmt|;
name|ParentIdFieldMapper
name|parentIdFieldMapper
init|=
name|joinFieldMapper
operator|.
name|getParentIdFieldMapper
argument_list|(
name|typeName
argument_list|,
name|fetchChildInnerHits
operator|==
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIdFieldMapper
operator|==
literal|null
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|Lucene
operator|.
name|EMPTY_TOP_DOCS
expr_stmt|;
continue|continue;
block|}
name|Query
name|q
decl_stmt|;
if|if
condition|(
name|fetchChildInnerHits
condition|)
block|{
name|Query
name|hitQuery
init|=
name|parentIdFieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|termQuery
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|,
name|qsc
argument_list|)
decl_stmt|;
name|q
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
comment|// Only include child documents that have the current hit as parent:
operator|.
name|add
argument_list|(
name|hitQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
comment|// and only include child documents of a single relation:
operator|.
name|add
argument_list|(
name|joinFieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|termQuery
argument_list|(
name|typeName
argument_list|,
name|qsc
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SearchHitField
name|parentIdField
init|=
name|hit
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
name|parentIdFieldMapper
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|=
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
name|IdFieldMapper
operator|.
name|NAME
argument_list|)
operator|.
name|termQuery
argument_list|(
name|parentIdField
operator|.
name|getValue
argument_list|()
argument_list|,
name|qsc
argument_list|)
expr_stmt|;
block|}
name|Weight
name|weight
init|=
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|createNormalizedWeight
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|TotalHitCountCollector
name|totalHitCountCollector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|intersect
argument_list|(
name|weight
argument_list|,
name|innerHitQueryWeight
argument_list|,
name|totalHitCountCollector
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
name|result
index|[
name|i
index|]
operator|=
operator|new
name|TopDocs
argument_list|(
name|totalHitCountCollector
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|Lucene
operator|.
name|EMPTY_SCORE_DOCS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|topN
init|=
name|Math
operator|.
name|min
argument_list|(
name|from
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|TopDocsCollector
argument_list|<
name|?
argument_list|>
name|topDocsCollector
decl_stmt|;
if|if
condition|(
name|sort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|topDocsCollector
operator|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
argument_list|()
operator|.
name|sort
argument_list|,
name|topN
argument_list|,
literal|true
argument_list|,
name|trackScores
argument_list|()
argument_list|,
name|trackScores
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|topDocsCollector
operator|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
name|topN
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|intersect
argument_list|(
name|weight
argument_list|,
name|innerHitQueryWeight
argument_list|,
name|topDocsCollector
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|clearReleasables
argument_list|(
name|Lifetime
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
name|result
index|[
name|i
index|]
operator|=
name|topDocsCollector
operator|.
name|topDocs
argument_list|(
name|from
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
DECL|class|ParentChildInnerHitSubContext
specifier|static
specifier|final
class|class
name|ParentChildInnerHitSubContext
extends|extends
name|InnerHitsContext
operator|.
name|InnerHitSubContext
block|{
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|documentMapper
specifier|private
specifier|final
name|DocumentMapper
name|documentMapper
decl_stmt|;
DECL|method|ParentChildInnerHitSubContext
name|ParentChildInnerHitSubContext
parameter_list|(
name|String
name|name
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|MapperService
name|mapperService
parameter_list|,
name|DocumentMapper
name|documentMapper
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|this
operator|.
name|documentMapper
operator|=
name|documentMapper
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|topDocs
specifier|public
name|TopDocs
index|[]
name|topDocs
parameter_list|(
name|SearchHit
index|[]
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|Weight
name|innerHitQueryWeight
init|=
name|createInnerHitQueryWeight
argument_list|()
decl_stmt|;
name|TopDocs
index|[]
name|result
init|=
operator|new
name|TopDocs
index|[
name|hits
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|hits
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|Query
name|hitQuery
decl_stmt|;
if|if
condition|(
name|isParentHit
argument_list|(
name|hit
argument_list|)
condition|)
block|{
name|String
name|field
init|=
name|ParentFieldMapper
operator|.
name|joinField
argument_list|(
name|hit
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|hitQuery
operator|=
operator|new
name|DocValuesTermsQuery
argument_list|(
name|field
argument_list|,
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isChildHit
argument_list|(
name|hit
argument_list|)
condition|)
block|{
name|DocumentMapper
name|hitDocumentMapper
init|=
name|mapperService
operator|.
name|documentMapper
argument_list|(
name|hit
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|parentType
init|=
name|hitDocumentMapper
operator|.
name|parentFieldMapper
argument_list|()
operator|.
name|type
argument_list|()
decl_stmt|;
name|SearchHitField
name|parentField
init|=
name|hit
operator|.
name|field
argument_list|(
name|ParentFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentField
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"All children must have a _parent"
argument_list|)
throw|;
block|}
name|Term
name|uidTerm
init|=
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|createUidTerm
argument_list|(
name|parentType
argument_list|,
name|parentField
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uidTerm
operator|==
literal|null
condition|)
block|{
name|hitQuery
operator|=
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"Missing type: "
operator|+
name|parentType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hitQuery
operator|=
operator|new
name|TermQuery
argument_list|(
name|uidTerm
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
index|[
name|i
index|]
operator|=
name|Lucene
operator|.
name|EMPTY_TOP_DOCS
expr_stmt|;
continue|continue;
block|}
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
comment|// Only include docs that have the current hit as parent
operator|.
name|add
argument_list|(
name|hitQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
comment|// Only include docs that have this inner hits type
operator|.
name|add
argument_list|(
name|documentMapper
operator|.
name|typeFilter
argument_list|(
name|context
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Weight
name|weight
init|=
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|createNormalizedWeight
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|TotalHitCountCollector
name|totalHitCountCollector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|intersect
argument_list|(
name|weight
argument_list|,
name|innerHitQueryWeight
argument_list|,
name|totalHitCountCollector
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
name|result
index|[
name|i
index|]
operator|=
operator|new
name|TopDocs
argument_list|(
name|totalHitCountCollector
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|Lucene
operator|.
name|EMPTY_SCORE_DOCS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|topN
init|=
name|Math
operator|.
name|min
argument_list|(
name|from
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|TopDocsCollector
argument_list|<
name|?
argument_list|>
name|topDocsCollector
decl_stmt|;
if|if
condition|(
name|sort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|topDocsCollector
operator|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
argument_list|()
operator|.
name|sort
argument_list|,
name|topN
argument_list|,
literal|true
argument_list|,
name|trackScores
argument_list|()
argument_list|,
name|trackScores
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|topDocsCollector
operator|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
name|topN
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|intersect
argument_list|(
name|weight
argument_list|,
name|innerHitQueryWeight
argument_list|,
name|topDocsCollector
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|clearReleasables
argument_list|(
name|Lifetime
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
name|result
index|[
name|i
index|]
operator|=
name|topDocsCollector
operator|.
name|topDocs
argument_list|(
name|from
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|isParentHit
specifier|private
name|boolean
name|isParentHit
parameter_list|(
name|SearchHit
name|hit
parameter_list|)
block|{
return|return
name|hit
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|documentMapper
operator|.
name|parentFieldMapper
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isChildHit
specifier|private
name|boolean
name|isChildHit
parameter_list|(
name|SearchHit
name|hit
parameter_list|)
block|{
name|DocumentMapper
name|hitDocumentMapper
init|=
name|mapperService
operator|.
name|documentMapper
argument_list|(
name|hit
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|documentMapper
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|hitDocumentMapper
operator|.
name|parentFieldMapper
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

