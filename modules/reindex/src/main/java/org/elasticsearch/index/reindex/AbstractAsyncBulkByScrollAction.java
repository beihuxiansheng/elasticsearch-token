begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BackoffPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|Retry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|ScrollableHitSource
operator|.
name|SearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ParentTaskAssigningClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|IdFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|IndexFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParentFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|RoutingFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|VersionFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|CompiledScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|max
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|min
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BackoffPolicy
operator|.
name|exponentialBackoff
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|AbstractBulkByScrollRequest
operator|.
name|SIZE_ALL_MATCHES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueNanos
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|CONFLICT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
operator|.
name|fieldSort
import|;
end_import

begin_comment
comment|/**  * Abstract base for scrolling across a search and executing bulk actions on all results. All package private methods are package private so  * their tests can use them. Most methods run in the listener thread pool because the are meant to be fast and don't expect to block.  */
end_comment

begin_class
DECL|class|AbstractAsyncBulkByScrollAction
specifier|public
specifier|abstract
class|class
name|AbstractAsyncBulkByScrollAction
parameter_list|<
name|Request
extends|extends
name|AbstractBulkByScrollRequest
parameter_list|<
name|Request
parameter_list|>
parameter_list|>
block|{
DECL|field|logger
specifier|protected
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|field|task
specifier|protected
specifier|final
name|WorkingBulkByScrollTask
name|task
decl_stmt|;
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|scriptService
specifier|protected
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|clusterState
specifier|protected
specifier|final
name|ClusterState
name|clusterState
decl_stmt|;
comment|/**      * The request for this action. Named mainRequest because we create lots of<code>request</code> variables all representing child      * requests of this mainRequest.      */
DECL|field|mainRequest
specifier|protected
specifier|final
name|Request
name|mainRequest
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|AtomicLong
name|startTime
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|destinationIndices
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|destinationIndices
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|ParentTaskAssigningClient
name|client
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|listener
decl_stmt|;
DECL|field|bulkRetry
specifier|private
specifier|final
name|Retry
name|bulkRetry
decl_stmt|;
DECL|field|scrollSource
specifier|private
specifier|final
name|ScrollableHitSource
name|scrollSource
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
comment|/**      * This BiFunction is used to apply various changes depending of the Reindex action and  the search hit,      * from copying search hit metadata (parent, routing, etc) to potentially transforming the      * {@link RequestWrapper} completely.      */
DECL|field|scriptApplier
specifier|private
specifier|final
name|BiFunction
argument_list|<
name|RequestWrapper
argument_list|<
name|?
argument_list|>
argument_list|,
name|ScrollableHitSource
operator|.
name|Hit
argument_list|,
name|RequestWrapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|scriptApplier
decl_stmt|;
DECL|method|AbstractAsyncBulkByScrollAction
specifier|public
name|AbstractAsyncBulkByScrollAction
parameter_list|(
name|WorkingBulkByScrollTask
name|task
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|ParentTaskAssigningClient
name|client
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|Request
name|mainRequest
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|,
name|ActionListener
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|this
argument_list|(
name|task
argument_list|,
name|logger
argument_list|,
name|client
argument_list|,
name|threadPool
argument_list|,
name|mainRequest
argument_list|,
name|scriptService
argument_list|,
name|clusterState
argument_list|,
name|listener
argument_list|,
name|client
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractAsyncBulkByScrollAction
specifier|public
name|AbstractAsyncBulkByScrollAction
parameter_list|(
name|WorkingBulkByScrollTask
name|task
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|ParentTaskAssigningClient
name|client
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|Request
name|mainRequest
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|,
name|ActionListener
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|listener
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|clusterState
expr_stmt|;
name|this
operator|.
name|mainRequest
operator|=
name|mainRequest
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|BackoffPolicy
name|backoffPolicy
init|=
name|buildBackoffPolicy
argument_list|()
decl_stmt|;
name|bulkRetry
operator|=
operator|new
name|Retry
argument_list|(
name|EsRejectedExecutionException
operator|.
name|class
argument_list|,
name|BackoffPolicy
operator|.
name|wrap
argument_list|(
name|backoffPolicy
argument_list|,
name|task
operator|::
name|countBulkRetry
argument_list|)
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|scrollSource
operator|=
name|buildScrollableResultSource
argument_list|(
name|backoffPolicy
argument_list|)
expr_stmt|;
name|scriptApplier
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|buildScriptApplier
argument_list|()
argument_list|,
literal|"script applier must not be null"
argument_list|)
expr_stmt|;
comment|/*          * Default to sorting by doc. We can't do this in the request itself because it is normal to *add* to the sorts rather than replace          * them and if we add _doc as the first sort by default then sorts will never work.... So we add it here, only if there isn't          * another sort.          */
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sorts
init|=
name|mainRequest
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|sorts
argument_list|()
decl_stmt|;
if|if
condition|(
name|sorts
operator|==
literal|null
operator|||
name|sorts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mainRequest
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|sort
argument_list|(
name|fieldSort
argument_list|(
literal|"_doc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mainRequest
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|version
argument_list|(
name|needsSourceDocumentVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Build the {@link BiFunction} to apply to all {@link RequestWrapper}.      *      * Public for testings....      */
DECL|method|buildScriptApplier
specifier|public
name|BiFunction
argument_list|<
name|RequestWrapper
argument_list|<
name|?
argument_list|>
argument_list|,
name|ScrollableHitSource
operator|.
name|Hit
argument_list|,
name|RequestWrapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|buildScriptApplier
parameter_list|()
block|{
comment|// The default script applier executes a no-op
return|return
parameter_list|(
name|request
parameter_list|,
name|searchHit
parameter_list|)
lambda|->
name|request
return|;
block|}
comment|/**      * Does this operation need the versions of the source documents?      */
DECL|method|needsSourceDocumentVersions
specifier|protected
specifier|abstract
name|boolean
name|needsSourceDocumentVersions
parameter_list|()
function_decl|;
comment|/**      * Build the {@link RequestWrapper} for a single search hit. This shouldn't handle      * metadata or scripting. That will be handled by copyMetadata and      * apply functions that can be overridden.      */
DECL|method|buildRequest
specifier|protected
specifier|abstract
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|buildRequest
parameter_list|(
name|ScrollableHitSource
operator|.
name|Hit
name|doc
parameter_list|)
function_decl|;
comment|/**      * Copies the metadata from a hit to the request.      */
DECL|method|copyMetadata
specifier|protected
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|copyMetadata
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|ScrollableHitSource
operator|.
name|Hit
name|doc
parameter_list|)
block|{
name|request
operator|.
name|setParent
argument_list|(
name|doc
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|copyRouting
argument_list|(
name|request
argument_list|,
name|doc
operator|.
name|getRouting
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
comment|/**      * Copy the routing from a search hit to the request.      */
DECL|method|copyRouting
specifier|protected
name|void
name|copyRouting
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|String
name|routing
parameter_list|)
block|{
name|request
operator|.
name|setRouting
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to accept or ignore a search hit. Ignored search hits will be excluded      * from the bulk request. It is also where we fail on invalid search hits, like      * when the document has no source but it's required.      */
DECL|method|accept
specifier|protected
name|boolean
name|accept
parameter_list|(
name|ScrollableHitSource
operator|.
name|Hit
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|.
name|getSource
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|/*              * Either the document didn't store _source or we didn't fetch it for some reason. Since we don't allow the user to              * change the "fields" part of the search request it is unlikely that we got here because we didn't fetch _source.              * Thus the error message assumes that it wasn't stored.              */
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|doc
operator|.
name|getIndex
argument_list|()
operator|+
literal|"]["
operator|+
name|doc
operator|.
name|getType
argument_list|()
operator|+
literal|"]["
operator|+
name|doc
operator|.
name|getId
argument_list|()
operator|+
literal|"] didn't store _source"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|buildBulk
specifier|private
name|BulkRequest
name|buildBulk
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ScrollableHitSource
operator|.
name|Hit
argument_list|>
name|docs
parameter_list|)
block|{
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|ScrollableHitSource
operator|.
name|Hit
name|doc
range|:
name|docs
control|)
block|{
if|if
condition|(
name|accept
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
init|=
name|scriptApplier
operator|.
name|apply
argument_list|(
name|copyMetadata
argument_list|(
name|buildRequest
argument_list|(
name|doc
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|bulkRequest
operator|.
name|add
argument_list|(
name|request
operator|.
name|self
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|bulkRequest
return|;
block|}
DECL|method|buildScrollableResultSource
specifier|protected
name|ScrollableHitSource
name|buildScrollableResultSource
parameter_list|(
name|BackoffPolicy
name|backoffPolicy
parameter_list|)
block|{
return|return
operator|new
name|ClientScrollableHitSource
argument_list|(
name|logger
argument_list|,
name|backoffPolicy
argument_list|,
name|threadPool
argument_list|,
name|task
operator|::
name|countSearchRetry
argument_list|,
name|this
operator|::
name|finishHim
argument_list|,
name|client
argument_list|,
name|mainRequest
operator|.
name|getSearchRequest
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Build the response for reindex actions.      */
DECL|method|buildResponse
specifier|protected
name|BulkByScrollResponse
name|buildResponse
parameter_list|(
name|TimeValue
name|took
parameter_list|,
name|List
argument_list|<
name|BulkItemResponse
operator|.
name|Failure
argument_list|>
name|indexingFailures
parameter_list|,
name|List
argument_list|<
name|SearchFailure
argument_list|>
name|searchFailures
parameter_list|,
name|boolean
name|timedOut
parameter_list|)
block|{
return|return
operator|new
name|BulkByScrollResponse
argument_list|(
name|took
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
argument_list|,
name|indexingFailures
argument_list|,
name|searchFailures
argument_list|,
name|timedOut
argument_list|)
return|;
block|}
comment|/**      * Start the action by firing the initial search request.      */
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|task
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|finishHim
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|startTime
operator|.
name|set
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
name|scrollSource
operator|.
name|start
argument_list|(
name|response
lambda|->
name|onScrollResponse
argument_list|(
name|timeValueNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|finishHim
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Process a scroll response.      * @param lastBatchStartTime the time when the last batch started. Used to calculate the throttling delay.      * @param lastBatchSize the size of the last batch. Used to calculate the throttling delay.      * @param response the scroll response to process      */
DECL|method|onScrollResponse
name|void
name|onScrollResponse
parameter_list|(
name|TimeValue
name|lastBatchStartTime
parameter_list|,
name|int
name|lastBatchSize
parameter_list|,
name|ScrollableHitSource
operator|.
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|finishHim
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
comment|// If any of the shards failed that should abort the request.
operator|(
name|response
operator|.
name|getFailures
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
comment|// Timeouts aren't shard failures but we still need to pass them back to the user.
operator|||
name|response
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|refreshAndFinish
argument_list|(
name|emptyList
argument_list|()
argument_list|,
name|response
operator|.
name|getFailures
argument_list|()
argument_list|,
name|response
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|total
init|=
name|response
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
if|if
condition|(
name|mainRequest
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|total
operator|=
name|min
argument_list|(
name|total
argument_list|,
name|mainRequest
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|setTotal
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|AbstractRunnable
name|prepareBulkRequestRunnable
init|=
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*                  * It is important that the batch start time be calculated from here, scroll response to scroll response. That way the time                  * waiting on the scroll doesn't count against this batch in the throttle.                  */
name|prepareBulkRequest
argument_list|(
name|timeValueNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|finishHim
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|prepareBulkRequestRunnable
operator|=
operator|(
name|AbstractRunnable
operator|)
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|preserveContext
argument_list|(
name|prepareBulkRequestRunnable
argument_list|)
expr_stmt|;
name|task
operator|.
name|delayPrepareBulkRequest
argument_list|(
name|threadPool
argument_list|,
name|lastBatchStartTime
argument_list|,
name|lastBatchSize
argument_list|,
name|prepareBulkRequestRunnable
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prepare the bulk request. Called on the generic thread pool after some preflight checks have been done one the SearchResponse and any      * delay has been slept. Uses the generic thread pool because reindex is rare enough not to need its own thread pool and because the      * thread may be blocked by the user script.      */
DECL|method|prepareBulkRequest
name|void
name|prepareBulkRequest
parameter_list|(
name|TimeValue
name|thisBatchStartTime
parameter_list|,
name|ScrollableHitSource
operator|.
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|finishHim
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|refreshAndFinish
argument_list|(
name|emptyList
argument_list|()
argument_list|,
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|task
operator|.
name|countBatch
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|ScrollableHitSource
operator|.
name|Hit
argument_list|>
name|hits
init|=
name|response
operator|.
name|getHits
argument_list|()
decl_stmt|;
if|if
condition|(
name|mainRequest
operator|.
name|getSize
argument_list|()
operator|!=
name|SIZE_ALL_MATCHES
condition|)
block|{
comment|// Truncate the hits if we have more than the request size
name|long
name|remaining
init|=
name|max
argument_list|(
literal|0
argument_list|,
name|mainRequest
operator|.
name|getSize
argument_list|()
operator|-
name|task
operator|.
name|getSuccessfullyProcessed
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|remaining
operator|<
name|hits
operator|.
name|size
argument_list|()
condition|)
block|{
name|hits
operator|=
name|hits
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|remaining
argument_list|)
expr_stmt|;
block|}
block|}
name|BulkRequest
name|request
init|=
name|buildBulk
argument_list|(
name|hits
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|requests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|/*              * If we noop-ed the entire batch then just skip to the next batch or the BulkRequest would fail validation.              */
name|startNextScroll
argument_list|(
name|thisBatchStartTime
argument_list|,
name|timeValueNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|request
operator|.
name|timeout
argument_list|(
name|mainRequest
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|waitForActiveShards
argument_list|(
name|mainRequest
operator|.
name|getWaitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"sending [{}] entry, [{}] bulk request"
argument_list|,
name|request
operator|.
name|requests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|request
operator|.
name|estimatedSizeInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sendBulkRequest
argument_list|(
name|thisBatchStartTime
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**      * Send a bulk request, handling retries.      */
DECL|method|sendBulkRequest
name|void
name|sendBulkRequest
parameter_list|(
name|TimeValue
name|thisBatchStartTime
parameter_list|,
name|BulkRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|finishHim
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|bulkRetry
operator|.
name|withBackoff
argument_list|(
name|client
operator|::
name|bulk
argument_list|,
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BulkResponse
name|response
parameter_list|)
block|{
name|onBulkResponse
argument_list|(
name|thisBatchStartTime
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|finishHim
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Processes bulk responses, accounting for failures.      */
DECL|method|onBulkResponse
name|void
name|onBulkResponse
parameter_list|(
name|TimeValue
name|thisBatchStartTime
parameter_list|,
name|BulkResponse
name|response
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|Failure
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<
name|Failure
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|destinationIndicesThisBatch
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BulkItemResponse
name|item
range|:
name|response
control|)
block|{
if|if
condition|(
name|item
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|recordFailure
argument_list|(
name|item
operator|.
name|getFailure
argument_list|()
argument_list|,
name|failures
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|item
operator|.
name|getOpType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
if|if
condition|(
name|item
operator|.
name|getResponse
argument_list|()
operator|.
name|getResult
argument_list|()
operator|==
name|DocWriteResponse
operator|.
name|Result
operator|.
name|CREATED
condition|)
block|{
name|task
operator|.
name|countCreated
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|countUpdated
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|UPDATE
case|:
name|task
operator|.
name|countUpdated
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|task
operator|.
name|countDeleted
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// Track the indexes we've seen so we can refresh them if requested
name|destinationIndicesThisBatch
operator|.
name|add
argument_list|(
name|item
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|finishHim
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|addDestinationIndices
argument_list|(
name|destinationIndicesThisBatch
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|failures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|refreshAndFinish
argument_list|(
name|unmodifiableList
argument_list|(
name|failures
argument_list|)
argument_list|,
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mainRequest
operator|.
name|getSize
argument_list|()
operator|!=
name|SIZE_ALL_MATCHES
operator|&&
name|task
operator|.
name|getSuccessfullyProcessed
argument_list|()
operator|>=
name|mainRequest
operator|.
name|getSize
argument_list|()
condition|)
block|{
comment|// We've processed all the requested docs.
name|refreshAndFinish
argument_list|(
name|emptyList
argument_list|()
argument_list|,
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|startNextScroll
argument_list|(
name|thisBatchStartTime
argument_list|,
name|timeValueNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|,
name|response
operator|.
name|getItems
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|finishHim
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Start the next scroll request.      *      * @param lastBatchSize the number of requests sent in the last batch. This is used to calculate the throttling values which are applied      *        when the scroll returns      */
DECL|method|startNextScroll
name|void
name|startNextScroll
parameter_list|(
name|TimeValue
name|lastBatchStartTime
parameter_list|,
name|TimeValue
name|now
parameter_list|,
name|int
name|lastBatchSize
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|finishHim
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|TimeValue
name|extraKeepAlive
init|=
name|task
operator|.
name|throttleWaitTime
argument_list|(
name|lastBatchStartTime
argument_list|,
name|now
argument_list|,
name|lastBatchSize
argument_list|)
decl_stmt|;
name|scrollSource
operator|.
name|startNextScroll
argument_list|(
name|extraKeepAlive
argument_list|,
name|response
lambda|->
block|{
name|onScrollResponse
argument_list|(
name|lastBatchStartTime
argument_list|,
name|lastBatchSize
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|recordFailure
specifier|private
name|void
name|recordFailure
parameter_list|(
name|Failure
name|failure
parameter_list|,
name|List
argument_list|<
name|Failure
argument_list|>
name|failures
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|.
name|getStatus
argument_list|()
operator|==
name|CONFLICT
condition|)
block|{
name|task
operator|.
name|countVersionConflict
argument_list|()
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|mainRequest
operator|.
name|isAbortOnVersionConflict
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
name|failures
operator|.
name|add
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
comment|/**      * Start terminating a request that finished non-catastrophically by refreshing the modified indices and then proceeding to      * {@link #finishHim(Exception, List, List, boolean)}.      */
DECL|method|refreshAndFinish
name|void
name|refreshAndFinish
parameter_list|(
name|List
argument_list|<
name|Failure
argument_list|>
name|indexingFailures
parameter_list|,
name|List
argument_list|<
name|SearchFailure
argument_list|>
name|searchFailures
parameter_list|,
name|boolean
name|timedOut
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|isCancelled
argument_list|()
operator|||
literal|false
operator|==
name|mainRequest
operator|.
name|isRefresh
argument_list|()
operator|||
name|destinationIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|finishHim
argument_list|(
literal|null
argument_list|,
name|indexingFailures
argument_list|,
name|searchFailures
argument_list|,
name|timedOut
argument_list|)
expr_stmt|;
return|return;
block|}
name|RefreshRequest
name|refresh
init|=
operator|new
name|RefreshRequest
argument_list|()
decl_stmt|;
name|refresh
operator|.
name|indices
argument_list|(
name|destinationIndices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|destinationIndices
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|refresh
argument_list|(
name|refresh
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|RefreshResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|RefreshResponse
name|response
parameter_list|)
block|{
name|finishHim
argument_list|(
literal|null
argument_list|,
name|indexingFailures
argument_list|,
name|searchFailures
argument_list|,
name|timedOut
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|finishHim
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Finish the request.      *      * @param failure if non null then the request failed catastrophically with this exception      */
DECL|method|finishHim
specifier|protected
name|void
name|finishHim
parameter_list|(
name|Exception
name|failure
parameter_list|)
block|{
name|finishHim
argument_list|(
name|failure
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Finish the request.      * @param failure if non null then the request failed catastrophically with this exception      * @param indexingFailures any indexing failures accumulated during the request      * @param searchFailures any search failures accumulated during the request      * @param timedOut have any of the sub-requests timed out?      */
DECL|method|finishHim
specifier|protected
name|void
name|finishHim
parameter_list|(
name|Exception
name|failure
parameter_list|,
name|List
argument_list|<
name|Failure
argument_list|>
name|indexingFailures
parameter_list|,
name|List
argument_list|<
name|SearchFailure
argument_list|>
name|searchFailures
parameter_list|,
name|boolean
name|timedOut
parameter_list|)
block|{
name|scrollSource
operator|.
name|close
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|BulkByScrollResponse
name|response
init|=
name|buildResponse
argument_list|(
name|timeValueNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|indexingFailures
argument_list|,
name|searchFailures
argument_list|,
name|timedOut
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the backoff policy for use with retries.      */
DECL|method|buildBackoffPolicy
name|BackoffPolicy
name|buildBackoffPolicy
parameter_list|()
block|{
return|return
name|exponentialBackoff
argument_list|(
name|mainRequest
operator|.
name|getRetryBackoffInitialTime
argument_list|()
argument_list|,
name|mainRequest
operator|.
name|getMaxRetries
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Add to the list of indices that were modified by this request. This is the list of indices refreshed at the end of the request if the      * request asks for a refresh.      */
DECL|method|addDestinationIndices
name|void
name|addDestinationIndices
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|)
block|{
name|destinationIndices
operator|.
name|addAll
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the last returned scrollId. Exists entirely for testing.      */
DECL|method|setScroll
name|void
name|setScroll
parameter_list|(
name|String
name|scroll
parameter_list|)
block|{
name|scrollSource
operator|.
name|setScroll
argument_list|(
name|scroll
argument_list|)
expr_stmt|;
block|}
comment|/**      * Wrapper for the {@link DocWriteRequest} that are used in this action class.      */
DECL|interface|RequestWrapper
specifier|public
interface|interface
name|RequestWrapper
parameter_list|<
name|Self
extends|extends
name|DocWriteRequest
parameter_list|<
name|Self
parameter_list|>
parameter_list|>
block|{
DECL|method|setIndex
name|void
name|setIndex
parameter_list|(
name|String
name|index
parameter_list|)
function_decl|;
DECL|method|getIndex
name|String
name|getIndex
parameter_list|()
function_decl|;
DECL|method|setType
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
function_decl|;
DECL|method|getType
name|String
name|getType
parameter_list|()
function_decl|;
DECL|method|setId
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
function_decl|;
DECL|method|getId
name|String
name|getId
parameter_list|()
function_decl|;
DECL|method|setVersion
name|void
name|setVersion
parameter_list|(
name|long
name|version
parameter_list|)
function_decl|;
DECL|method|getVersion
name|long
name|getVersion
parameter_list|()
function_decl|;
DECL|method|setVersionType
name|void
name|setVersionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
function_decl|;
DECL|method|setParent
name|void
name|setParent
parameter_list|(
name|String
name|parent
parameter_list|)
function_decl|;
DECL|method|getParent
name|String
name|getParent
parameter_list|()
function_decl|;
DECL|method|setRouting
name|void
name|setRouting
parameter_list|(
name|String
name|routing
parameter_list|)
function_decl|;
DECL|method|getRouting
name|String
name|getRouting
parameter_list|()
function_decl|;
DECL|method|setSource
name|void
name|setSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
function_decl|;
DECL|method|getSource
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSource
parameter_list|()
function_decl|;
DECL|method|self
name|Self
name|self
parameter_list|()
function_decl|;
block|}
comment|/**      * {@link RequestWrapper} for {@link IndexRequest}      */
DECL|class|IndexRequestWrapper
specifier|public
specifier|static
class|class
name|IndexRequestWrapper
implements|implements
name|RequestWrapper
argument_list|<
name|IndexRequest
argument_list|>
block|{
DECL|field|request
specifier|private
specifier|final
name|IndexRequest
name|request
decl_stmt|;
DECL|method|IndexRequestWrapper
name|IndexRequestWrapper
parameter_list|(
name|IndexRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|request
argument_list|,
literal|"Wrapped IndexRequest can not be null"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setIndex
specifier|public
name|void
name|setIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|request
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|request
operator|.
name|index
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setType
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|request
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|request
operator|.
name|type
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setId
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|request
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|request
operator|.
name|id
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setVersion
specifier|public
name|void
name|setVersion
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|request
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|request
operator|.
name|version
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setVersionType
specifier|public
name|void
name|setVersionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|request
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setParent
specifier|public
name|void
name|setParent
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
name|request
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParent
specifier|public
name|String
name|getParent
parameter_list|()
block|{
return|return
name|request
operator|.
name|parent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setRouting
specifier|public
name|void
name|setRouting
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
name|request
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRouting
specifier|public
name|String
name|getRouting
parameter_list|()
block|{
return|return
name|request
operator|.
name|routing
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSource
parameter_list|()
block|{
return|return
name|request
operator|.
name|sourceAsMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setSource
specifier|public
name|void
name|setSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|self
specifier|public
name|IndexRequest
name|self
parameter_list|()
block|{
return|return
name|request
return|;
block|}
block|}
comment|/**      * Wraps a {@link IndexRequest} in a {@link RequestWrapper}      */
DECL|method|wrap
specifier|public
specifier|static
name|RequestWrapper
argument_list|<
name|IndexRequest
argument_list|>
name|wrap
parameter_list|(
name|IndexRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|IndexRequestWrapper
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**      * {@link RequestWrapper} for {@link DeleteRequest}      */
DECL|class|DeleteRequestWrapper
specifier|public
specifier|static
class|class
name|DeleteRequestWrapper
implements|implements
name|RequestWrapper
argument_list|<
name|DeleteRequest
argument_list|>
block|{
DECL|field|request
specifier|private
specifier|final
name|DeleteRequest
name|request
decl_stmt|;
DECL|method|DeleteRequestWrapper
name|DeleteRequestWrapper
parameter_list|(
name|DeleteRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|request
argument_list|,
literal|"Wrapped DeleteRequest can not be null"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setIndex
specifier|public
name|void
name|setIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|request
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|request
operator|.
name|index
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setType
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|request
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|request
operator|.
name|type
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setId
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|request
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|request
operator|.
name|id
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setVersion
specifier|public
name|void
name|setVersion
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|request
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|request
operator|.
name|version
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setVersionType
specifier|public
name|void
name|setVersionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|request
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setParent
specifier|public
name|void
name|setParent
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
name|request
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParent
specifier|public
name|String
name|getParent
parameter_list|()
block|{
return|return
name|request
operator|.
name|parent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setRouting
specifier|public
name|void
name|setRouting
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
name|request
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRouting
specifier|public
name|String
name|getRouting
parameter_list|()
block|{
return|return
name|request
operator|.
name|routing
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSource
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unable to get source from action request ["
operator|+
name|request
operator|.
name|getClass
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setSource
specifier|public
name|void
name|setSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unable to set [source] on action request ["
operator|+
name|request
operator|.
name|getClass
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|self
specifier|public
name|DeleteRequest
name|self
parameter_list|()
block|{
return|return
name|request
return|;
block|}
block|}
comment|/**      * Wraps a {@link DeleteRequest} in a {@link RequestWrapper}      */
DECL|method|wrap
specifier|public
specifier|static
name|RequestWrapper
argument_list|<
name|DeleteRequest
argument_list|>
name|wrap
parameter_list|(
name|DeleteRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|DeleteRequestWrapper
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**      * Apply a {@link Script} to a {@link RequestWrapper}      */
DECL|class|ScriptApplier
specifier|public
specifier|abstract
class|class
name|ScriptApplier
implements|implements
name|BiFunction
argument_list|<
name|RequestWrapper
argument_list|<
name|?
argument_list|>
argument_list|,
name|ScrollableHitSource
operator|.
name|Hit
argument_list|,
name|RequestWrapper
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|field|task
specifier|private
specifier|final
name|WorkingBulkByScrollTask
name|task
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|Script
name|script
decl_stmt|;
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
DECL|field|executable
specifier|private
name|ExecutableScript
name|executable
decl_stmt|;
DECL|field|context
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
decl_stmt|;
DECL|method|ScriptApplier
specifier|public
name|ScriptApplier
parameter_list|(
name|WorkingBulkByScrollTask
name|task
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|Script
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|apply
specifier|public
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|ScrollableHitSource
operator|.
name|Hit
name|doc
parameter_list|)
block|{
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
return|return
name|request
return|;
block|}
if|if
condition|(
name|executable
operator|==
literal|null
condition|)
block|{
name|CompiledScript
name|compiled
init|=
name|scriptService
operator|.
name|compile
argument_list|(
name|script
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|UPDATE
argument_list|)
decl_stmt|;
name|executable
operator|=
name|scriptService
operator|.
name|executable
argument_list|(
name|compiled
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|put
argument_list|(
name|IndexFieldMapper
operator|.
name|NAME
argument_list|,
name|doc
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|doc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|IdFieldMapper
operator|.
name|NAME
argument_list|,
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|oldVersion
init|=
name|doc
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|VersionFieldMapper
operator|.
name|NAME
argument_list|,
name|oldVersion
argument_list|)
expr_stmt|;
name|String
name|oldParent
init|=
name|doc
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|ParentFieldMapper
operator|.
name|NAME
argument_list|,
name|oldParent
argument_list|)
expr_stmt|;
name|String
name|oldRouting
init|=
name|doc
operator|.
name|getRouting
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|RoutingFieldMapper
operator|.
name|NAME
argument_list|,
name|oldRouting
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|request
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|OpType
name|oldOpType
init|=
name|OpType
operator|.
name|INDEX
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"op"
argument_list|,
name|oldOpType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|executable
operator|.
name|setNextVar
argument_list|(
literal|"ctx"
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|executable
operator|.
name|run
argument_list|()
expr_stmt|;
name|String
name|newOp
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|remove
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Script cleared operation type"
argument_list|)
throw|;
block|}
comment|/*              * It'd be lovely to only set the source if we know its been modified              * but it isn't worth keeping two copies of it around just to check!              */
name|request
operator|.
name|setSource
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|remove
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|newValue
init|=
name|context
operator|.
name|remove
argument_list|(
name|IndexFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|false
operator|==
name|doc
operator|.
name|getIndex
argument_list|()
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedIndex
argument_list|(
name|request
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|context
operator|.
name|remove
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|doc
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedType
argument_list|(
name|request
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|context
operator|.
name|remove
argument_list|(
name|IdFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|doc
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedId
argument_list|(
name|request
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|context
operator|.
name|remove
argument_list|(
name|VersionFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|Objects
operator|.
name|equals
argument_list|(
name|oldVersion
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedVersion
argument_list|(
name|request
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|context
operator|.
name|remove
argument_list|(
name|ParentFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|Objects
operator|.
name|equals
argument_list|(
name|oldParent
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedParent
argument_list|(
name|request
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
comment|/*              * Its important that routing comes after parent in case you want to              * change them both.              */
name|newValue
operator|=
name|context
operator|.
name|remove
argument_list|(
name|RoutingFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|Objects
operator|.
name|equals
argument_list|(
name|oldRouting
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedRouting
argument_list|(
name|request
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|OpType
name|newOpType
init|=
name|OpType
operator|.
name|fromString
argument_list|(
name|newOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOpType
operator|!=
name|oldOpType
condition|)
block|{
return|return
name|scriptChangedOpType
argument_list|(
name|request
argument_list|,
name|oldOpType
argument_list|,
name|newOpType
argument_list|)
return|;
block|}
if|if
condition|(
literal|false
operator|==
name|context
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid fields added to context ["
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|context
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|']'
argument_list|)
throw|;
block|}
return|return
name|request
return|;
block|}
DECL|method|scriptChangedOpType
specifier|protected
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|scriptChangedOpType
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|OpType
name|oldOpType
parameter_list|,
name|OpType
name|newOpType
parameter_list|)
block|{
switch|switch
condition|(
name|newOpType
condition|)
block|{
case|case
name|NOOP
case|:
name|task
operator|.
name|countNoop
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
case|case
name|DELETE
case|:
name|RequestWrapper
argument_list|<
name|DeleteRequest
argument_list|>
name|delete
init|=
name|wrap
argument_list|(
operator|new
name|DeleteRequest
argument_list|(
name|request
operator|.
name|getIndex
argument_list|()
argument_list|,
name|request
operator|.
name|getType
argument_list|()
argument_list|,
name|request
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|delete
operator|.
name|setVersion
argument_list|(
name|request
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setVersionType
argument_list|(
name|VersionType
operator|.
name|INTERNAL
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setParent
argument_list|(
name|request
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setRouting
argument_list|(
name|request
operator|.
name|getRouting
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|delete
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation type change from ["
operator|+
name|oldOpType
operator|+
literal|"] to ["
operator|+
name|newOpType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|scriptChangedIndex
specifier|protected
specifier|abstract
name|void
name|scriptChangedIndex
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedType
specifier|protected
specifier|abstract
name|void
name|scriptChangedType
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedId
specifier|protected
specifier|abstract
name|void
name|scriptChangedId
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedVersion
specifier|protected
specifier|abstract
name|void
name|scriptChangedVersion
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedRouting
specifier|protected
specifier|abstract
name|void
name|scriptChangedRouting
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedParent
specifier|protected
specifier|abstract
name|void
name|scriptChangedParent
parameter_list|(
name|RequestWrapper
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
block|}
DECL|enum|OpType
specifier|public
enum|enum
name|OpType
block|{
DECL|enum constant|NOOP
name|NOOP
argument_list|(
literal|"noop"
argument_list|)
block|,
DECL|enum constant|INDEX
name|INDEX
argument_list|(
literal|"index"
argument_list|)
block|,
DECL|enum constant|DELETE
name|DELETE
argument_list|(
literal|"delete"
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|OpType
name|OpType
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|OpType
name|fromString
parameter_list|(
name|String
name|opType
parameter_list|)
block|{
name|String
name|lowerOpType
init|=
name|opType
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|lowerOpType
condition|)
block|{
case|case
literal|"noop"
case|:
return|return
name|OpType
operator|.
name|NOOP
return|;
case|case
literal|"index"
case|:
return|return
name|OpType
operator|.
name|INDEX
return|;
case|case
literal|"delete"
case|:
return|return
name|OpType
operator|.
name|DELETE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Operation type ["
operator|+
name|lowerOpType
operator|+
literal|"] not allowed, only "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|values
argument_list|()
argument_list|)
operator|+
literal|" are allowed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|id
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

