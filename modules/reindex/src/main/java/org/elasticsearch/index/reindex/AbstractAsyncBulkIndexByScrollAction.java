begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|IdFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|IndexFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|ParentFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|RoutingFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TTLFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TimestampFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|VersionFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|CompiledScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHitField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_comment
comment|/**  * Abstract base for scrolling across a search and executing bulk indexes on all  * results.  */
end_comment

begin_class
DECL|class|AbstractAsyncBulkIndexByScrollAction
specifier|public
specifier|abstract
class|class
name|AbstractAsyncBulkIndexByScrollAction
parameter_list|<
name|Request
extends|extends
name|AbstractBulkIndexByScrollRequest
parameter_list|<
name|Request
parameter_list|>
parameter_list|,
name|Response
extends|extends
name|BulkIndexByScrollResponse
parameter_list|>
extends|extends
name|AbstractAsyncBulkByScrollAction
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|>
block|{
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|CompiledScript
name|script
decl_stmt|;
DECL|method|AbstractAsyncBulkIndexByScrollAction
specifier|public
name|AbstractAsyncBulkIndexByScrollAction
parameter_list|(
name|BulkByScrollTask
name|task
parameter_list|,
name|ESLogger
name|logger
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|Client
name|client
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|Request
name|mainRequest
parameter_list|,
name|SearchRequest
name|firstSearchRequest
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|task
argument_list|,
name|logger
argument_list|,
name|client
argument_list|,
name|threadPool
argument_list|,
name|mainRequest
argument_list|,
name|firstSearchRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
if|if
condition|(
name|mainRequest
operator|.
name|getScript
argument_list|()
operator|==
literal|null
condition|)
block|{
name|script
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|script
operator|=
name|scriptService
operator|.
name|compile
argument_list|(
name|mainRequest
operator|.
name|getScript
argument_list|()
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|UPDATE
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Build the IndexRequest for a single search hit. This shouldn't handle      * metadata or the script. That will be handled by copyMetadata and      * applyScript functions that can be overridden.      */
DECL|method|buildIndexRequest
specifier|protected
specifier|abstract
name|IndexRequest
name|buildIndexRequest
parameter_list|(
name|SearchHit
name|doc
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|buildBulk
specifier|protected
name|BulkRequest
name|buildBulk
parameter_list|(
name|Iterable
argument_list|<
name|SearchHit
argument_list|>
name|docs
parameter_list|)
block|{
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|ExecutableScript
name|executableScript
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptCtx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SearchHit
name|doc
range|:
name|docs
control|)
block|{
if|if
condition|(
name|doc
operator|.
name|hasSource
argument_list|()
condition|)
block|{
comment|/*                  * Either the document didn't store _source or we didn't fetch it for some reason. Since we don't allow the user to                  * change the "fields" part of the search request it is unlikely that we got here because we didn't fetch _source.                  * Thus the error message assumes that it wasn't stored.                  */
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|doc
operator|.
name|index
argument_list|()
operator|+
literal|"]["
operator|+
name|doc
operator|.
name|type
argument_list|()
operator|+
literal|"]["
operator|+
name|doc
operator|.
name|id
argument_list|()
operator|+
literal|"] didn't store _source"
argument_list|)
throw|;
block|}
name|IndexRequest
name|index
init|=
name|buildIndexRequest
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|copyMetadata
argument_list|(
name|index
argument_list|,
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|executableScript
operator|==
literal|null
condition|)
block|{
name|executableScript
operator|=
name|scriptService
operator|.
name|executable
argument_list|(
name|script
argument_list|,
name|mainRequest
operator|.
name|getScript
argument_list|()
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|scriptCtx
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|false
operator|==
name|applyScript
argument_list|(
name|index
argument_list|,
name|doc
argument_list|,
name|executableScript
argument_list|,
name|scriptCtx
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|bulkRequest
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|bulkRequest
return|;
block|}
comment|/**      * Copies the metadata from a hit to the index request.      */
DECL|method|copyMetadata
specifier|protected
name|void
name|copyMetadata
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|SearchHit
name|doc
parameter_list|)
block|{
name|index
operator|.
name|parent
argument_list|(
name|fieldValue
argument_list|(
name|doc
argument_list|,
name|ParentFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|copyRouting
argument_list|(
name|index
argument_list|,
name|doc
argument_list|)
expr_stmt|;
comment|// Comes back as a Long but needs to be a string
name|Long
name|timestamp
init|=
name|fieldValue
argument_list|(
name|doc
argument_list|,
name|TimestampFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|!=
literal|null
condition|)
block|{
name|index
operator|.
name|timestamp
argument_list|(
name|timestamp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Long
name|ttl
init|=
name|fieldValue
argument_list|(
name|doc
argument_list|,
name|TTLFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttl
operator|!=
literal|null
condition|)
block|{
name|index
operator|.
name|ttl
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Part of copyMetadata but called out individual for easy overwriting.      */
DECL|method|copyRouting
specifier|protected
name|void
name|copyRouting
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|SearchHit
name|doc
parameter_list|)
block|{
name|index
operator|.
name|routing
argument_list|(
name|fieldValue
argument_list|(
name|doc
argument_list|,
name|RoutingFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|fieldValue
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|fieldValue
parameter_list|(
name|SearchHit
name|doc
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|SearchHitField
name|field
init|=
name|doc
operator|.
name|field
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|field
operator|==
literal|null
condition|?
literal|null
else|:
name|field
operator|.
name|value
argument_list|()
return|;
block|}
comment|/**      * Apply a script to the request.      *      * @return is this request still ok to apply (true) or is it a noop (false)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|applyScript
specifier|protected
name|boolean
name|applyScript
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|SearchHit
name|doc
parameter_list|,
name|ExecutableScript
name|script
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|ctx
operator|.
name|put
argument_list|(
name|IndexFieldMapper
operator|.
name|NAME
argument_list|,
name|doc
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|doc
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|IdFieldMapper
operator|.
name|NAME
argument_list|,
name|doc
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|oldVersion
init|=
name|doc
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|VersionFieldMapper
operator|.
name|NAME
argument_list|,
name|oldVersion
argument_list|)
expr_stmt|;
name|String
name|oldParent
init|=
name|fieldValue
argument_list|(
name|doc
argument_list|,
name|ParentFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ParentFieldMapper
operator|.
name|NAME
argument_list|,
name|oldParent
argument_list|)
expr_stmt|;
name|String
name|oldRouting
init|=
name|fieldValue
argument_list|(
name|doc
argument_list|,
name|RoutingFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|RoutingFieldMapper
operator|.
name|NAME
argument_list|,
name|oldRouting
argument_list|)
expr_stmt|;
name|Long
name|oldTimestamp
init|=
name|fieldValue
argument_list|(
name|doc
argument_list|,
name|TimestampFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|TimestampFieldMapper
operator|.
name|NAME
argument_list|,
name|oldTimestamp
argument_list|)
expr_stmt|;
name|Long
name|oldTTL
init|=
name|fieldValue
argument_list|(
name|doc
argument_list|,
name|TTLFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|TTLFieldMapper
operator|.
name|NAME
argument_list|,
name|oldTTL
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|index
operator|.
name|sourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
literal|"op"
argument_list|,
literal|"update"
argument_list|)
expr_stmt|;
name|script
operator|.
name|setNextVar
argument_list|(
literal|"ctx"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|script
operator|.
name|run
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resultCtx
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|script
operator|.
name|unwrap
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|String
name|newOp
init|=
operator|(
name|String
operator|)
name|resultCtx
operator|.
name|remove
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Script cleared op!"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"noop"
operator|.
name|equals
argument_list|(
name|newOp
argument_list|)
condition|)
block|{
name|task
operator|.
name|countNoop
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|false
operator|==
literal|"update"
operator|.
name|equals
argument_list|(
name|newOp
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid op ["
operator|+
name|newOp
operator|+
literal|']'
argument_list|)
throw|;
block|}
comment|/*          * It'd be lovely to only set the source if we know its been modified          * but it isn't worth keeping two copies of it around just to check!          */
name|index
operator|.
name|source
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|resultCtx
operator|.
name|remove
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|newValue
init|=
name|ctx
operator|.
name|remove
argument_list|(
name|IndexFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|false
operator|==
name|doc
operator|.
name|index
argument_list|()
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedIndex
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|ctx
operator|.
name|remove
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|doc
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedType
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|ctx
operator|.
name|remove
argument_list|(
name|IdFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|doc
operator|.
name|id
argument_list|()
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedId
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|ctx
operator|.
name|remove
argument_list|(
name|VersionFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|Objects
operator|.
name|equals
argument_list|(
name|oldVersion
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedVersion
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|ctx
operator|.
name|remove
argument_list|(
name|ParentFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|Objects
operator|.
name|equals
argument_list|(
name|oldParent
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedParent
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
comment|/*          * Its important that routing comes after parent in case you want to          * change them both.          */
name|newValue
operator|=
name|ctx
operator|.
name|remove
argument_list|(
name|RoutingFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|Objects
operator|.
name|equals
argument_list|(
name|oldRouting
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedRouting
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|ctx
operator|.
name|remove
argument_list|(
name|TimestampFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|Objects
operator|.
name|equals
argument_list|(
name|oldTimestamp
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedTimestamp
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|=
name|ctx
operator|.
name|remove
argument_list|(
name|TTLFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|Objects
operator|.
name|equals
argument_list|(
name|oldTTL
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|scriptChangedTTL
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|false
operator|==
name|ctx
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid fields added to ctx ["
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|ctx
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|']'
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|scriptChangedIndex
specifier|protected
specifier|abstract
name|void
name|scriptChangedIndex
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedType
specifier|protected
specifier|abstract
name|void
name|scriptChangedType
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedId
specifier|protected
specifier|abstract
name|void
name|scriptChangedId
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedVersion
specifier|protected
specifier|abstract
name|void
name|scriptChangedVersion
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedRouting
specifier|protected
specifier|abstract
name|void
name|scriptChangedRouting
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedParent
specifier|protected
specifier|abstract
name|void
name|scriptChangedParent
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedTimestamp
specifier|protected
specifier|abstract
name|void
name|scriptChangedTimestamp
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
DECL|method|scriptChangedTTL
specifier|protected
specifier|abstract
name|void
name|scriptChangedTTL
parameter_list|(
name|IndexRequest
name|index
parameter_list|,
name|Object
name|to
parameter_list|)
function_decl|;
block|}
end_class

end_unit

