begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|CancellableTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|max
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|round
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueNanos
import|;
end_import

begin_comment
comment|/**  * Task storing information about a currently running BulkByScroll request.  */
end_comment

begin_class
DECL|class|BulkByScrollTask
specifier|public
class|class
name|BulkByScrollTask
extends|extends
name|CancellableTask
block|{
comment|/**      * The total number of documents this request will process. 0 means we don't yet know or, possibly, there are actually 0 documents      * to process. Its ok that these have the same meaning because any request with 0 actual documents should be quite short lived.      */
DECL|field|total
specifier|private
specifier|final
name|AtomicLong
name|total
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|updated
specifier|private
specifier|final
name|AtomicLong
name|updated
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|created
specifier|private
specifier|final
name|AtomicLong
name|created
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|deleted
specifier|private
specifier|final
name|AtomicLong
name|deleted
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|noops
specifier|private
specifier|final
name|AtomicLong
name|noops
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|batch
specifier|private
specifier|final
name|AtomicInteger
name|batch
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|versionConflicts
specifier|private
specifier|final
name|AtomicLong
name|versionConflicts
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|retries
specifier|private
specifier|final
name|AtomicLong
name|retries
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|throttledNanos
specifier|private
specifier|final
name|AtomicLong
name|throttledNanos
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/**      * The number of requests per second to which to throttle the request that this task represents. The other variables are all AtomicXXX      * style variables but there isn't an AtomicFloat so we just use a volatile.      */
DECL|field|requestsPerSecond
specifier|private
specifier|volatile
name|float
name|requestsPerSecond
decl_stmt|;
comment|/**      * Reference to any the last delayed prepareBulkRequest call. Used during rethrottling and canceling to reschedule the request.      */
DECL|field|delayedPrepareBulkRequestReference
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|DelayedPrepareBulkRequest
argument_list|>
name|delayedPrepareBulkRequestReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|BulkByScrollTask
specifier|public
name|BulkByScrollTask
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|description
parameter_list|,
name|TaskId
name|parentTask
parameter_list|,
name|float
name|requestsPerSecond
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|action
argument_list|,
name|description
argument_list|,
name|parentTask
argument_list|)
expr_stmt|;
name|setRequestsPerSecond
argument_list|(
name|requestsPerSecond
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCancelled
specifier|protected
name|void
name|onCancelled
parameter_list|()
block|{
comment|// Drop the throttle to 0, immediately rescheduling all outstanding tasks so the task will wake up and cancel itself.
name|rethrottle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStatus
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
operator|new
name|Status
argument_list|(
name|total
operator|.
name|get
argument_list|()
argument_list|,
name|updated
operator|.
name|get
argument_list|()
argument_list|,
name|created
operator|.
name|get
argument_list|()
argument_list|,
name|deleted
operator|.
name|get
argument_list|()
argument_list|,
name|batch
operator|.
name|get
argument_list|()
argument_list|,
name|versionConflicts
operator|.
name|get
argument_list|()
argument_list|,
name|noops
operator|.
name|get
argument_list|()
argument_list|,
name|retries
operator|.
name|get
argument_list|()
argument_list|,
name|timeValueNanos
argument_list|(
name|throttledNanos
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|getReasonCancelled
argument_list|()
argument_list|,
name|throttledUntil
argument_list|()
argument_list|)
return|;
block|}
DECL|method|throttledUntil
specifier|private
name|TimeValue
name|throttledUntil
parameter_list|()
block|{
name|DelayedPrepareBulkRequest
name|delayed
init|=
name|delayedPrepareBulkRequestReference
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|delayed
operator|==
literal|null
condition|)
block|{
return|return
name|timeValueNanos
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|delayed
operator|.
name|future
operator|==
literal|null
condition|)
block|{
return|return
name|timeValueNanos
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|timeValueNanos
argument_list|(
name|max
argument_list|(
literal|0
argument_list|,
name|delayed
operator|.
name|future
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Total number of successfully processed documents.      */
DECL|method|getSuccessfullyProcessed
specifier|public
name|long
name|getSuccessfullyProcessed
parameter_list|()
block|{
return|return
name|updated
operator|.
name|get
argument_list|()
operator|+
name|created
operator|.
name|get
argument_list|()
operator|+
name|deleted
operator|.
name|get
argument_list|()
return|;
block|}
DECL|class|Status
specifier|public
specifier|static
class|class
name|Status
implements|implements
name|Task
operator|.
name|Status
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"bulk-by-scroll"
decl_stmt|;
comment|/**          * XContent param name to indicate if "created" count must be included          * in the response.          */
DECL|field|INCLUDE_CREATED
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_CREATED
init|=
literal|"include_created"
decl_stmt|;
comment|/**          * XContent param name to indicate if "updated" count must be included          * in the response.          */
DECL|field|INCLUDE_UPDATED
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_UPDATED
init|=
literal|"include_updated"
decl_stmt|;
comment|/**          * XContent param name to indicate if "deleted" count must be included          * in the response.          */
DECL|field|INCLUDE_DELETED
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_DELETED
init|=
literal|"include_deleted"
decl_stmt|;
DECL|field|total
specifier|private
specifier|final
name|long
name|total
decl_stmt|;
DECL|field|updated
specifier|private
specifier|final
name|long
name|updated
decl_stmt|;
DECL|field|created
specifier|private
specifier|final
name|long
name|created
decl_stmt|;
DECL|field|deleted
specifier|private
specifier|final
name|long
name|deleted
decl_stmt|;
DECL|field|batches
specifier|private
specifier|final
name|int
name|batches
decl_stmt|;
DECL|field|versionConflicts
specifier|private
specifier|final
name|long
name|versionConflicts
decl_stmt|;
DECL|field|noops
specifier|private
specifier|final
name|long
name|noops
decl_stmt|;
DECL|field|retries
specifier|private
specifier|final
name|long
name|retries
decl_stmt|;
DECL|field|throttled
specifier|private
specifier|final
name|TimeValue
name|throttled
decl_stmt|;
DECL|field|requestsPerSecond
specifier|private
specifier|final
name|float
name|requestsPerSecond
decl_stmt|;
DECL|field|reasonCancelled
specifier|private
specifier|final
name|String
name|reasonCancelled
decl_stmt|;
DECL|field|throttledUntil
specifier|private
specifier|final
name|TimeValue
name|throttledUntil
decl_stmt|;
DECL|method|Status
specifier|public
name|Status
parameter_list|(
name|long
name|total
parameter_list|,
name|long
name|updated
parameter_list|,
name|long
name|created
parameter_list|,
name|long
name|deleted
parameter_list|,
name|int
name|batches
parameter_list|,
name|long
name|versionConflicts
parameter_list|,
name|long
name|noops
parameter_list|,
name|long
name|retries
parameter_list|,
name|TimeValue
name|throttled
parameter_list|,
name|float
name|requestsPerSecond
parameter_list|,
annotation|@
name|Nullable
name|String
name|reasonCancelled
parameter_list|,
name|TimeValue
name|throttledUntil
parameter_list|)
block|{
name|this
operator|.
name|total
operator|=
name|checkPositive
argument_list|(
name|total
argument_list|,
literal|"total"
argument_list|)
expr_stmt|;
name|this
operator|.
name|updated
operator|=
name|checkPositive
argument_list|(
name|updated
argument_list|,
literal|"updated"
argument_list|)
expr_stmt|;
name|this
operator|.
name|created
operator|=
name|checkPositive
argument_list|(
name|created
argument_list|,
literal|"created"
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleted
operator|=
name|checkPositive
argument_list|(
name|deleted
argument_list|,
literal|"deleted"
argument_list|)
expr_stmt|;
name|this
operator|.
name|batches
operator|=
name|checkPositive
argument_list|(
name|batches
argument_list|,
literal|"batches"
argument_list|)
expr_stmt|;
name|this
operator|.
name|versionConflicts
operator|=
name|checkPositive
argument_list|(
name|versionConflicts
argument_list|,
literal|"versionConflicts"
argument_list|)
expr_stmt|;
name|this
operator|.
name|noops
operator|=
name|checkPositive
argument_list|(
name|noops
argument_list|,
literal|"noops"
argument_list|)
expr_stmt|;
name|this
operator|.
name|retries
operator|=
name|checkPositive
argument_list|(
name|retries
argument_list|,
literal|"retries"
argument_list|)
expr_stmt|;
name|this
operator|.
name|throttled
operator|=
name|throttled
expr_stmt|;
name|this
operator|.
name|requestsPerSecond
operator|=
name|requestsPerSecond
expr_stmt|;
name|this
operator|.
name|reasonCancelled
operator|=
name|reasonCancelled
expr_stmt|;
name|this
operator|.
name|throttledUntil
operator|=
name|throttledUntil
expr_stmt|;
block|}
DECL|method|Status
specifier|public
name|Status
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|total
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|updated
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|created
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|deleted
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|batches
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|versionConflicts
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|noops
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|retries
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|throttled
operator|=
name|TimeValue
operator|.
name|readTimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requestsPerSecond
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|reasonCancelled
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|throttledUntil
operator|=
name|TimeValue
operator|.
name|readTimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|updated
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|created
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|batches
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|versionConflicts
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|noops
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|retries
argument_list|)
expr_stmt|;
name|throttled
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|requestsPerSecond
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|reasonCancelled
argument_list|)
expr_stmt|;
name|throttledUntil
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|innerXContent
specifier|public
name|XContentBuilder
name|innerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"total"
argument_list|,
name|total
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|INCLUDE_UPDATED
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"updated"
argument_list|,
name|updated
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|INCLUDE_CREATED
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"created"
argument_list|,
name|created
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|INCLUDE_DELETED
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"deleted"
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"batches"
argument_list|,
name|batches
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"version_conflicts"
argument_list|,
name|versionConflicts
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"noops"
argument_list|,
name|noops
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"retries"
argument_list|,
name|retries
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
literal|"throttled_millis"
argument_list|,
literal|"throttled"
argument_list|,
name|throttled
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"requests_per_second"
argument_list|,
name|requestsPerSecond
operator|==
name|Float
operator|.
name|POSITIVE_INFINITY
condition|?
literal|"unlimited"
else|:
name|requestsPerSecond
argument_list|)
expr_stmt|;
if|if
condition|(
name|reasonCancelled
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"canceled"
argument_list|,
name|reasonCancelled
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|timeValueField
argument_list|(
literal|"throttled_until_millis"
argument_list|,
literal|"throttled_until"
argument_list|,
name|throttledUntil
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"BulkIndexByScrollResponse["
argument_list|)
expr_stmt|;
name|innerToString
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|innerToString
specifier|public
name|void
name|innerToString
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"updated="
argument_list|)
operator|.
name|append
argument_list|(
name|updated
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|",created="
argument_list|)
operator|.
name|append
argument_list|(
name|created
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|",deleted="
argument_list|)
operator|.
name|append
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|",batches="
argument_list|)
operator|.
name|append
argument_list|(
name|batches
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|",versionConflicts="
argument_list|)
operator|.
name|append
argument_list|(
name|versionConflicts
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|",noops="
argument_list|)
operator|.
name|append
argument_list|(
name|noops
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|",retries="
argument_list|)
operator|.
name|append
argument_list|(
name|retries
argument_list|)
expr_stmt|;
if|if
condition|(
name|reasonCancelled
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|",canceled="
argument_list|)
operator|.
name|append
argument_list|(
name|reasonCancelled
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|",throttledUntil="
argument_list|)
operator|.
name|append
argument_list|(
name|throttledUntil
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
comment|/**          * The total number of documents this request will process. 0 means we don't yet know or, possibly, there are actually 0 documents          * to process. Its ok that these have the same meaning because any request with 0 actual documents should be quite short lived.          */
DECL|method|getTotal
specifier|public
name|long
name|getTotal
parameter_list|()
block|{
return|return
name|total
return|;
block|}
comment|/**          * Count of documents updated.          */
DECL|method|getUpdated
specifier|public
name|long
name|getUpdated
parameter_list|()
block|{
return|return
name|updated
return|;
block|}
comment|/**          * Count of documents created.          */
DECL|method|getCreated
specifier|public
name|long
name|getCreated
parameter_list|()
block|{
return|return
name|created
return|;
block|}
comment|/**          * Count of successful delete operations.          */
DECL|method|getDeleted
specifier|public
name|long
name|getDeleted
parameter_list|()
block|{
return|return
name|deleted
return|;
block|}
comment|/**          * Number of scan responses this request has processed.          */
DECL|method|getBatches
specifier|public
name|int
name|getBatches
parameter_list|()
block|{
return|return
name|batches
return|;
block|}
comment|/**          * Number of version conflicts this request has hit.          */
DECL|method|getVersionConflicts
specifier|public
name|long
name|getVersionConflicts
parameter_list|()
block|{
return|return
name|versionConflicts
return|;
block|}
comment|/**          * Number of noops (skipped bulk items) as part of this request.          */
DECL|method|getNoops
specifier|public
name|long
name|getNoops
parameter_list|()
block|{
return|return
name|noops
return|;
block|}
comment|/**          * Number of retries that had to be attempted due to rejected executions.          */
DECL|method|getRetries
specifier|public
name|long
name|getRetries
parameter_list|()
block|{
return|return
name|retries
return|;
block|}
comment|/**          * The total time this request has throttled itself not including the current throttle time if it is currently sleeping.          */
DECL|method|getThrottled
specifier|public
name|TimeValue
name|getThrottled
parameter_list|()
block|{
return|return
name|throttled
return|;
block|}
comment|/**          * The number of requests per second to which to throttle the request. 0 means unlimited.          */
DECL|method|getRequestsPerSecond
specifier|public
name|float
name|getRequestsPerSecond
parameter_list|()
block|{
return|return
name|requestsPerSecond
return|;
block|}
comment|/**          * The reason that the request was canceled or null if it hasn't been.          */
DECL|method|getReasonCancelled
specifier|public
name|String
name|getReasonCancelled
parameter_list|()
block|{
return|return
name|reasonCancelled
return|;
block|}
comment|/**          * Remaining delay of any current throttle sleep or 0 if not sleeping.          */
DECL|method|getThrottledUntil
specifier|public
name|TimeValue
name|getThrottledUntil
parameter_list|()
block|{
return|return
name|throttledUntil
return|;
block|}
DECL|method|checkPositive
specifier|private
name|int
name|checkPositive
parameter_list|(
name|int
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be greater than 0 but was ["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
DECL|method|checkPositive
specifier|private
name|long
name|checkPositive
parameter_list|(
name|long
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be greater than 0 but was ["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
block|}
DECL|method|setTotal
name|void
name|setTotal
parameter_list|(
name|long
name|totalHits
parameter_list|)
block|{
name|total
operator|.
name|set
argument_list|(
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|countBatch
name|void
name|countBatch
parameter_list|()
block|{
name|batch
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|countNoop
name|void
name|countNoop
parameter_list|()
block|{
name|noops
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|countCreated
name|void
name|countCreated
parameter_list|()
block|{
name|created
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|countUpdated
name|void
name|countUpdated
parameter_list|()
block|{
name|updated
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|countDeleted
name|void
name|countDeleted
parameter_list|()
block|{
name|deleted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|countVersionConflict
name|void
name|countVersionConflict
parameter_list|()
block|{
name|versionConflicts
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|countRetry
name|void
name|countRetry
parameter_list|()
block|{
name|retries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|getRequestsPerSecond
name|float
name|getRequestsPerSecond
parameter_list|()
block|{
return|return
name|requestsPerSecond
return|;
block|}
comment|/**      * Schedule prepareBulkRequestRunnable to run after some delay. This is where throttling plugs into reindexing so the request can be      * rescheduled over and over again.      */
DECL|method|delayPrepareBulkRequest
name|void
name|delayPrepareBulkRequest
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|,
name|TimeValue
name|delay
parameter_list|,
name|AbstractRunnable
name|prepareBulkRequestRunnable
parameter_list|)
block|{
comment|// Synchronize so we are less likely to schedule the same request twice.
synchronized|synchronized
init|(
name|delayedPrepareBulkRequestReference
init|)
block|{
name|AbstractRunnable
name|oneTime
init|=
operator|new
name|AbstractRunnable
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|hasRun
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Paranoia to prevent furiously rethrottling from running the command multiple times. Without this we totally can.
if|if
condition|(
name|hasRun
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|prepareBulkRequestRunnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|prepareBulkRequestRunnable
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|delayedPrepareBulkRequestReference
operator|.
name|set
argument_list|(
operator|new
name|DelayedPrepareBulkRequest
argument_list|(
name|threadPool
argument_list|,
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|delay
argument_list|,
name|oneTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setRequestsPerSecond
specifier|private
name|void
name|setRequestsPerSecond
parameter_list|(
name|float
name|requestsPerSecond
parameter_list|)
block|{
name|this
operator|.
name|requestsPerSecond
operator|=
name|requestsPerSecond
expr_stmt|;
block|}
DECL|method|rethrottle
name|void
name|rethrottle
parameter_list|(
name|float
name|newRequestsPerSecond
parameter_list|)
block|{
synchronized|synchronized
init|(
name|delayedPrepareBulkRequestReference
init|)
block|{
name|setRequestsPerSecond
argument_list|(
name|newRequestsPerSecond
argument_list|)
expr_stmt|;
name|DelayedPrepareBulkRequest
name|delayedPrepareBulkRequest
init|=
name|this
operator|.
name|delayedPrepareBulkRequestReference
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|delayedPrepareBulkRequest
operator|==
literal|null
condition|)
block|{
comment|// No request has been queued yet so nothing to reschedule.
return|return;
block|}
name|this
operator|.
name|delayedPrepareBulkRequestReference
operator|.
name|set
argument_list|(
name|delayedPrepareBulkRequest
operator|.
name|rethrottle
argument_list|(
name|newRequestsPerSecond
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DelayedPrepareBulkRequest
class|class
name|DelayedPrepareBulkRequest
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|command
specifier|private
specifier|final
name|AbstractRunnable
name|command
decl_stmt|;
DECL|field|requestsPerSecond
specifier|private
specifier|final
name|float
name|requestsPerSecond
decl_stmt|;
DECL|field|future
specifier|private
specifier|final
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
DECL|method|DelayedPrepareBulkRequest
name|DelayedPrepareBulkRequest
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|,
name|float
name|requestsPerSecond
parameter_list|,
name|TimeValue
name|delay
parameter_list|,
name|AbstractRunnable
name|command
parameter_list|)
block|{
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|requestsPerSecond
operator|=
name|requestsPerSecond
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|delay
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|throttledNanos
operator|.
name|addAndGet
argument_list|(
name|delay
operator|.
name|nanos
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|command
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|rethrottle
name|DelayedPrepareBulkRequest
name|rethrottle
parameter_list|(
name|float
name|newRequestsPerSecond
parameter_list|)
block|{
if|if
condition|(
name|newRequestsPerSecond
operator|!=
literal|0
operator|&&
name|newRequestsPerSecond
operator|<
name|requestsPerSecond
condition|)
block|{
comment|/*                  * The user is attempting to slow the request down. We'll let the change in throttle take effect the next time we delay                  * prepareBulkRequest. We can't just reschedule the request further out in the future the bulk context might time out.                  */
return|return
name|this
return|;
block|}
name|long
name|remainingDelay
init|=
name|future
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
comment|// Actually reschedule the task
if|if
condition|(
literal|false
operator|==
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|future
argument_list|)
condition|)
block|{
comment|// Couldn't cancel, probably because the task has finished or been scheduled. Either way we have nothing to do here.
return|return
name|this
return|;
block|}
comment|/*              * Strangely enough getting here doesn't mean that you actually cancelled the request, just that you probably did. If you stress              * test it you'll find that requests sneak through. So each request is given a runOnce boolean to prevent that.              */
name|TimeValue
name|newDelay
init|=
name|newDelay
argument_list|(
name|remainingDelay
argument_list|,
name|newRequestsPerSecond
argument_list|)
decl_stmt|;
return|return
operator|new
name|DelayedPrepareBulkRequest
argument_list|(
name|threadPool
argument_list|,
name|requestsPerSecond
argument_list|,
name|newDelay
argument_list|,
name|command
argument_list|)
return|;
block|}
comment|/**          * Scale back remaining delay to fit the new delay.          */
DECL|method|newDelay
name|TimeValue
name|newDelay
parameter_list|(
name|long
name|remainingDelay
parameter_list|,
name|float
name|newRequestsPerSecond
parameter_list|)
block|{
if|if
condition|(
name|remainingDelay
operator|<
literal|0
operator|||
name|newRequestsPerSecond
operator|==
literal|0
condition|)
block|{
return|return
name|timeValueNanos
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|timeValueNanos
argument_list|(
name|round
argument_list|(
name|remainingDelay
operator|*
name|requestsPerSecond
operator|/
name|newRequestsPerSecond
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

