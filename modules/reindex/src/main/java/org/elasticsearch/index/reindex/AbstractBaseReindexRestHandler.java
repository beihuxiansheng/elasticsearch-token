begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|query
operator|.
name|IndicesQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BaseRestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BytesRestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|LoggingTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|AbstractBaseReindexRestHandler
specifier|public
specifier|abstract
class|class
name|AbstractBaseReindexRestHandler
parameter_list|<
name|Request
extends|extends
name|ActionRequest
parameter_list|<
name|Request
parameter_list|>
parameter_list|,
name|Response
extends|extends
name|BulkIndexByScrollResponse
parameter_list|,
name|TA
extends|extends
name|TransportAction
parameter_list|<
name|Request
parameter_list|,
name|Response
parameter_list|>
parameter_list|>
extends|extends
name|BaseRestHandler
block|{
DECL|field|indicesQueriesRegistry
specifier|protected
specifier|final
name|IndicesQueriesRegistry
name|indicesQueriesRegistry
decl_stmt|;
DECL|field|aggParsers
specifier|protected
specifier|final
name|AggregatorParsers
name|aggParsers
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|action
specifier|private
specifier|final
name|TA
name|action
decl_stmt|;
DECL|method|AbstractBaseReindexRestHandler
specifier|protected
name|AbstractBaseReindexRestHandler
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Client
name|client
parameter_list|,
name|IndicesQueriesRegistry
name|indicesQueriesRegistry
parameter_list|,
name|AggregatorParsers
name|aggParsers
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TA
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesQueriesRegistry
operator|=
name|indicesQueriesRegistry
expr_stmt|;
name|this
operator|.
name|aggParsers
operator|=
name|aggParsers
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|Request
name|internalRequest
parameter_list|,
name|RestChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"wait_for_completion"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|action
operator|.
name|execute
argument_list|(
name|internalRequest
argument_list|,
operator|new
name|BulkIndexByScrollResponseContentListener
argument_list|<
name|Response
argument_list|>
argument_list|(
name|channel
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*          * Lets try and validate before forking so the user gets some error. The          * task can't totally validate until it starts but this is better than          * nothing.          */
name|ActionRequestValidationException
name|validationException
init|=
name|internalRequest
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|validationException
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
name|validationException
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Task
name|task
init|=
name|action
operator|.
name|execute
argument_list|(
name|internalRequest
argument_list|,
name|LoggingTaskListener
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|sendTask
argument_list|(
name|channel
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|sendTask
specifier|private
name|void
name|sendTask
parameter_list|(
name|RestChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|channel
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"task"
argument_list|,
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|BytesRestResponse
argument_list|(
name|RestStatus
operator|.
name|OK
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

