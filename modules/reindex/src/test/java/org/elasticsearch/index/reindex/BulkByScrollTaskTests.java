begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|parseTimeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueSeconds
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|both
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_class
DECL|class|BulkByScrollTaskTests
specifier|public
class|class
name|BulkByScrollTaskTests
extends|extends
name|ESTestCase
block|{
DECL|field|task
specifier|private
name|BulkByScrollTask
name|task
decl_stmt|;
annotation|@
name|Before
DECL|method|createTask
specifier|public
name|void
name|createTask
parameter_list|()
block|{
name|task
operator|=
operator|new
name|BulkByScrollTask
argument_list|(
literal|1
argument_list|,
literal|"test_type"
argument_list|,
literal|"test_action"
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicData
specifier|public
name|void
name|testBasicData
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_type"
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_action"
argument_list|,
name|task
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testProgress
specifier|public
name|void
name|testProgress
parameter_list|()
block|{
name|long
name|created
init|=
literal|0
decl_stmt|;
name|long
name|updated
init|=
literal|0
decl_stmt|;
name|long
name|deleted
init|=
literal|0
decl_stmt|;
name|long
name|versionConflicts
init|=
literal|0
decl_stmt|;
name|long
name|noops
init|=
literal|0
decl_stmt|;
name|int
name|batch
init|=
literal|0
decl_stmt|;
name|BulkByScrollTask
operator|.
name|Status
name|status
init|=
name|task
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|status
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|status
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|status
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|status
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batch
argument_list|,
name|status
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|noops
argument_list|,
name|status
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|totalHits
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|task
operator|.
name|setTotal
argument_list|(
name|totalHits
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|p
init|=
literal|0
init|;
name|p
operator|<
name|totalHits
condition|;
name|p
operator|++
control|)
block|{
name|status
operator|=
name|task
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHits
argument_list|,
name|status
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|status
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|status
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|status
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|status
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batch
argument_list|,
name|status
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|noops
argument_list|,
name|status
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|created
operator|++
expr_stmt|;
name|task
operator|.
name|countCreated
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|updated
operator|++
expr_stmt|;
name|task
operator|.
name|countUpdated
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|deleted
operator|++
expr_stmt|;
name|task
operator|.
name|countDeleted
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|versionConflicts
operator|++
expr_stmt|;
name|task
operator|.
name|countVersionConflict
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|batch
operator|++
expr_stmt|;
name|task
operator|.
name|countBatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|noops
operator|++
expr_stmt|;
name|task
operator|.
name|countNoop
argument_list|()
expr_stmt|;
block|}
block|}
name|status
operator|=
name|task
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHits
argument_list|,
name|status
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|status
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|status
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|status
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|status
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batch
argument_list|,
name|status
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|noops
argument_list|,
name|status
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStatusHatesNegatives
specifier|public
name|void
name|testStatusHatesNegatives
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|status
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|status
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Build a task status with only some values. Used for testing negative values.      */
DECL|method|status
specifier|private
name|ThrowingRunnable
name|status
parameter_list|(
name|long
name|total
parameter_list|,
name|long
name|updated
parameter_list|,
name|long
name|created
parameter_list|,
name|long
name|deleted
parameter_list|,
name|int
name|batches
parameter_list|,
name|long
name|versionConflicts
parameter_list|,
name|long
name|noops
parameter_list|,
name|long
name|retries
parameter_list|)
block|{
name|TimeValue
name|throttle
init|=
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TimeValue
name|throttledUntil
init|=
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
return|return
parameter_list|()
lambda|->
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|throttle
argument_list|,
literal|0f
argument_list|,
literal|null
argument_list|,
name|throttledUntil
argument_list|)
return|;
block|}
comment|/**      * Furiously rethrottles a delayed request to make sure that we never run it twice.      */
DECL|method|testDelayAndRethrottle
specifier|public
name|void
name|testDelayAndRethrottle
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|int
name|threads
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|CyclicBarrier
name|waitForShutdown
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|threads
argument_list|)
decl_stmt|;
comment|/*          * We never end up waiting this long because the test rethrottles over and over again, ratcheting down the delay a random amount          * each time.          */
name|float
name|originalRequestsPerSecond
init|=
operator|(
name|float
operator|)
name|randomDoubleBetween
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|task
operator|.
name|rethrottle
argument_list|(
name|originalRequestsPerSecond
argument_list|)
expr_stmt|;
name|TimeValue
name|maxDelay
init|=
name|timeValueSeconds
argument_list|(
name|between
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|maxDelay
operator|.
name|nanos
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|ThreadPool
name|threadPool
init|=
operator|new
name|ThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|schedule
parameter_list|(
name|TimeValue
name|delay
parameter_list|,
name|String
name|name
parameter_list|,
name|Runnable
name|command
parameter_list|)
block|{
name|assertThat
argument_list|(
name|delay
operator|.
name|nanos
argument_list|()
argument_list|,
name|both
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|lessThanOrEqualTo
argument_list|(
name|maxDelay
operator|.
name|nanos
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|schedule
argument_list|(
name|delay
argument_list|,
name|name
argument_list|,
name|command
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|task
operator|.
name|delayPrepareBulkRequest
argument_list|(
name|threadPool
argument_list|,
name|maxDelay
argument_list|,
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|oldValue
init|=
name|done
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ran twice oh no!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Rethrottle on a random number of threads, on of which is this thread.
name|Runnable
name|test
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|int
name|rethrottles
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|false
operator|==
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
name|float
name|requestsPerSecond
init|=
operator|(
name|float
operator|)
name|randomDoubleBetween
argument_list|(
literal|0
argument_list|,
name|originalRequestsPerSecond
operator|*
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|task
operator|.
name|rethrottle
argument_list|(
name|requestsPerSecond
argument_list|)
expr_stmt|;
name|rethrottles
operator|+=
literal|1
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Rethrottled [{}] times"
argument_list|,
name|rethrottles
argument_list|)
expr_stmt|;
name|waitForShutdown
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|threads
condition|;
name|i
operator|++
control|)
block|{
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
name|test
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// Other threads should finish up quickly as they are checking the same AtomicBoolean.
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|errors
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

