begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
operator|.
name|RemoteInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|TransportReindexAction
operator|.
name|checkRemoteWhitelist
import|;
end_import

begin_comment
comment|/**  * Tests the reindex-from-remote whitelist of remotes.  */
end_comment

begin_class
DECL|class|ReindexFromRemoteWhitelistTests
specifier|public
class|class
name|ReindexFromRemoteWhitelistTests
extends|extends
name|ESTestCase
block|{
DECL|field|localhost
specifier|private
name|TransportAddress
name|localhost
decl_stmt|;
annotation|@
name|Before
DECL|method|setupLocalhost
specifier|public
name|void
name|setupLocalhost
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|localhost
operator|=
operator|new
name|InetSocketTransportAddress
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x01
block|}
argument_list|)
argument_list|,
literal|9200
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocalRequestWithoutWhitelist
specifier|public
name|void
name|testLocalRequestWithoutWhitelist
parameter_list|()
block|{
name|checkRemoteWhitelist
argument_list|(
name|emptySet
argument_list|()
argument_list|,
literal|null
argument_list|,
name|localhostOrNone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocalRequestWithWhitelist
specifier|public
name|void
name|testLocalRequestWithWhitelist
parameter_list|()
block|{
name|checkRemoteWhitelist
argument_list|(
name|randomWhitelist
argument_list|()
argument_list|,
literal|null
argument_list|,
name|localhostOrNone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhitelistedRemote
specifier|public
name|void
name|testWhitelistedRemote
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|whitelist
init|=
name|randomWhitelist
argument_list|()
decl_stmt|;
name|String
index|[]
name|inList
init|=
name|whitelist
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|inList
index|[
literal|0
index|]
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|inList
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|checkRemoteWhitelist
argument_list|(
name|whitelist
argument_list|,
operator|new
name|RemoteInfo
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
name|localhostOrNone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMyselfInWhitelistRemote
specifier|public
name|void
name|testMyselfInWhitelistRemote
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|whitelist
init|=
name|randomWhitelist
argument_list|()
decl_stmt|;
name|whitelist
operator|.
name|add
argument_list|(
literal|"myself"
argument_list|)
expr_stmt|;
name|TransportAddress
name|publishAddress
init|=
operator|new
name|InetSocketTransportAddress
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x01
block|}
argument_list|)
argument_list|,
literal|9200
argument_list|)
decl_stmt|;
name|checkRemoteWhitelist
argument_list|(
name|whitelist
argument_list|,
operator|new
name|RemoteInfo
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"127.0.0.1"
argument_list|,
literal|9200
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
name|publishAddress
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnwhitelistedRemote
specifier|public
name|void
name|testUnwhitelistedRemote
parameter_list|()
block|{
name|int
name|port
init|=
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|RemoteInfo
name|remoteInfo
init|=
operator|new
name|RemoteInfo
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"not in list"
argument_list|,
name|port
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|checkRemoteWhitelist
argument_list|(
name|randomWhitelist
argument_list|()
argument_list|,
name|remoteInfo
argument_list|,
name|localhostOrNone
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[not in list:"
operator|+
name|port
operator|+
literal|"] not whitelisted in reindex.remote.whitelist"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|randomWhitelist
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|randomWhitelist
parameter_list|()
block|{
name|int
name|size
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|size
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
operator|+
literal|':'
operator|+
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|method|localhostOrNone
specifier|private
name|TransportAddress
name|localhostOrNone
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
literal|null
argument_list|,
name|localhost
argument_list|)
return|;
block|}
block|}
end_class

end_unit

