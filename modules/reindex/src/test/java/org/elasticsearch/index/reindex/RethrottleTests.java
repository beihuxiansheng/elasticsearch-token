begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ListenableActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|ListTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|TaskGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
operator|.
name|AbstractBulkByScrollRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
operator|.
name|BulkByScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
operator|.
name|BulkByScrollTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_comment
comment|/**  * Tests that you can set requests_per_second over the Java API and that you can rethrottle running requests. There are REST tests for this  * too but this is the only place that tests running against multiple nodes so it is the only integration tests that checks for  * serialization.  */
end_comment

begin_class
DECL|class|RethrottleTests
specifier|public
class|class
name|RethrottleTests
extends|extends
name|ReindexTestCase
block|{
DECL|method|testReindex
specifier|public
name|void
name|testReindex
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
argument_list|(
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"test"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
argument_list|,
name|ReindexAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdateByQuery
specifier|public
name|void
name|testUpdateByQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
argument_list|(
name|updateByQuery
argument_list|()
operator|.
name|source
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|UpdateByQueryAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteByQuery
specifier|public
name|void
name|testDeleteByQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
argument_list|(
name|deleteByQuery
argument_list|()
operator|.
name|source
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|DeleteByQueryAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|testReindexWithWorkers
specifier|public
name|void
name|testReindexWithWorkers
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
argument_list|(
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"test"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
operator|.
name|setSlices
argument_list|(
name|between
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|ReindexAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdateByQueryWithWorkers
specifier|public
name|void
name|testUpdateByQueryWithWorkers
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
argument_list|(
name|updateByQuery
argument_list|()
operator|.
name|source
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSlices
argument_list|(
name|between
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|UpdateByQueryAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteByQueryWithWorkers
specifier|public
name|void
name|testDeleteByQueryWithWorkers
parameter_list|()
throws|throws
name|Exception
block|{
name|testCase
argument_list|(
name|deleteByQuery
argument_list|()
operator|.
name|source
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSlices
argument_list|(
name|between
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|DeleteByQueryAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|testCase
specifier|private
name|void
name|testCase
parameter_list|(
name|AbstractBulkByScrollRequestBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|request
parameter_list|,
name|String
name|actionName
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Starting test for [{}] with [{}] slices"
argument_list|,
name|actionName
argument_list|,
name|request
operator|.
name|request
argument_list|()
operator|.
name|getSlices
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Add ten documents per slice so most slices will have many documents to process, having to go to multiple batches.          * we can't rely on all of them doing so, but           */
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|request
argument_list|()
operator|.
name|getSlices
argument_list|()
operator|*
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
comment|// Start a request that will never finish unless we rethrottle it
name|request
operator|.
name|setRequestsPerSecond
argument_list|(
literal|.000001f
argument_list|)
expr_stmt|;
comment|// Throttle "forever"
name|request
operator|.
name|source
argument_list|()
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Make sure we use multiple batches
name|ListenableActionFuture
argument_list|<
name|?
extends|extends
name|BulkByScrollResponse
argument_list|>
name|responseListener
init|=
name|request
operator|.
name|execute
argument_list|()
decl_stmt|;
name|TaskGroup
name|taskGroupToRethrottle
init|=
name|findTaskToRethrottle
argument_list|(
name|actionName
argument_list|,
name|request
operator|.
name|request
argument_list|()
operator|.
name|getSlices
argument_list|()
argument_list|)
decl_stmt|;
name|TaskId
name|taskToRethrottle
init|=
name|taskGroupToRethrottle
operator|.
name|getTaskInfo
argument_list|()
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|request
argument_list|()
operator|.
name|getSlices
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|taskGroupToRethrottle
operator|.
name|getChildTasks
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// There should be a sane number of child tasks running
name|assertThat
argument_list|(
name|taskGroupToRethrottle
operator|.
name|getChildTasks
argument_list|()
argument_list|,
name|hasSize
argument_list|(
name|allOf
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|request
operator|.
name|request
argument_list|()
operator|.
name|getSlices
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for all of the sub tasks to start (or finish, some might finish early, all that matters is that not all do)
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|BulkByScrollTask
operator|.
name|Status
name|parent
init|=
operator|(
name|BulkByScrollTask
operator|.
name|Status
operator|)
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
name|taskToRethrottle
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTask
argument_list|()
operator|.
name|getTask
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|long
name|finishedSubTasks
init|=
name|parent
operator|.
name|getSliceStatuses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|!=
literal|null
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|ListTasksResponse
name|list
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setParentTaskId
argument_list|(
name|taskToRethrottle
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|list
operator|.
name|rethrowFailures
argument_list|(
literal|"subtasks"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|finishedSubTasks
operator|+
name|list
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|long
operator|)
name|request
operator|.
name|request
argument_list|()
operator|.
name|getSlices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Now rethrottle it so it'll finish
name|float
name|newRequestsPerSecond
init|=
name|randomBoolean
argument_list|()
condition|?
name|Float
operator|.
name|POSITIVE_INFINITY
else|:
name|between
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
operator|*
literal|100000
decl_stmt|;
comment|// No throttle or "very fast"
name|ListTasksResponse
name|rethrottleResponse
init|=
name|rethrottle
argument_list|()
operator|.
name|setTaskId
argument_list|(
name|taskToRethrottle
argument_list|)
operator|.
name|setRequestsPerSecond
argument_list|(
name|newRequestsPerSecond
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|rethrottleResponse
operator|.
name|rethrowFailures
argument_list|(
literal|"Rethrottle"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rethrottleResponse
operator|.
name|getTasks
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|BulkByScrollTask
operator|.
name|Status
name|status
init|=
operator|(
name|BulkByScrollTask
operator|.
name|Status
operator|)
name|rethrottleResponse
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
comment|// Now check the resulting requests per second.
if|if
condition|(
name|request
operator|.
name|request
argument_list|()
operator|.
name|getSlices
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// If there is a single slice it should match perfectly
name|assertEquals
argument_list|(
name|newRequestsPerSecond
argument_list|,
name|status
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|Float
operator|.
name|MIN_NORMAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* Check that at least one slice was rethrottled. We won't always rethrottle all of them because they might have completed.              * With multiple slices these numbers might not add up perfectly, thus the 0.0001f. */
name|float
name|expectedSliceRequestsPerSecond
init|=
name|newRequestsPerSecond
operator|==
name|Float
operator|.
name|POSITIVE_INFINITY
condition|?
name|Float
operator|.
name|POSITIVE_INFINITY
else|:
name|newRequestsPerSecond
operator|/
name|request
operator|.
name|request
argument_list|()
operator|.
name|getSlices
argument_list|()
decl_stmt|;
name|boolean
name|oneSliceRethrottled
init|=
literal|false
decl_stmt|;
name|float
name|totalRequestsPerSecond
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BulkByScrollTask
operator|.
name|StatusOrException
name|statusOrException
range|:
name|status
operator|.
name|getSliceStatuses
argument_list|()
control|)
block|{
if|if
condition|(
name|statusOrException
operator|==
literal|null
condition|)
block|{
comment|/* The slice can be null here because it was completed but hadn't reported its success back to the task when the                      * rethrottle request came through. */
continue|continue;
block|}
name|assertNull
argument_list|(
name|statusOrException
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|BulkByScrollTask
operator|.
name|Status
name|slice
init|=
name|statusOrException
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|slice
operator|.
name|getTotal
argument_list|()
operator|>
name|slice
operator|.
name|getSuccessfullyProcessed
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedSliceRequestsPerSecond
argument_list|,
name|slice
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|expectedSliceRequestsPerSecond
operator|*
literal|0.0001f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|expectedSliceRequestsPerSecond
operator|-
name|slice
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|)
operator|<=
name|expectedSliceRequestsPerSecond
operator|*
literal|0.0001f
operator|||
name|expectedSliceRequestsPerSecond
operator|==
name|slice
operator|.
name|getRequestsPerSecond
argument_list|()
condition|)
block|{
name|oneSliceRethrottled
operator|=
literal|true
expr_stmt|;
block|}
name|totalRequestsPerSecond
operator|+=
name|slice
operator|.
name|getRequestsPerSecond
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"At least one slice must be rethrottled"
argument_list|,
name|oneSliceRethrottled
argument_list|)
expr_stmt|;
comment|/* Now assert that the parent request has the total requests per second. This is a much weaker assertion than that the parent              * actually has the newRequestsPerSecond. For the most part it will. Sometimes it'll be greater because only unfinished requests              * are rethrottled, the finished ones just keep whatever requests per second they had while they were running. But it might              * also be less than newRequestsPerSecond because the newRequestsPerSecond is divided among running sub-requests and then the              * requests are rethrottled. If one request finishes in between the division and the application of the new throttle then it              * won't be rethrottled, thus only contributing its lower total. */
name|assertEquals
argument_list|(
name|totalRequestsPerSecond
argument_list|,
name|status
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|totalRequestsPerSecond
operator|*
literal|0.0001f
argument_list|)
expr_stmt|;
block|}
comment|// Now the response should come back quickly because we've rethrottled the request
name|BulkByScrollResponse
name|response
init|=
name|responseListener
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Entire request completed in a single batch. This may invalidate the test as throttling is done between batches."
argument_list|,
name|response
operator|.
name|getBatches
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|request
operator|.
name|request
argument_list|()
operator|.
name|getSlices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|findTaskToRethrottle
specifier|private
name|TaskGroup
name|findTaskToRethrottle
parameter_list|(
name|String
name|actionName
parameter_list|,
name|int
name|sliceCount
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
do|do
block|{
name|ListTasksResponse
name|tasks
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|actionName
argument_list|)
operator|.
name|setDetailed
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|tasks
operator|.
name|rethrowFailures
argument_list|(
literal|"Finding tasks to rethrottle"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tasks
operator|.
name|getTaskGroups
argument_list|()
argument_list|,
name|hasSize
argument_list|(
name|lessThan
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|tasks
operator|.
name|getTaskGroups
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|TaskGroup
name|taskGroup
init|=
name|tasks
operator|.
name|getTaskGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sliceCount
operator|!=
literal|1
operator|&&
name|taskGroup
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// If there are child tasks wait for at least one to start
continue|continue;
block|}
return|return
name|taskGroup
return|;
block|}
do|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|<
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toNanos
argument_list|(
literal|10
argument_list|)
condition|)
do|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Couldn't find tasks to rethrottle. Here are the running tasks "
operator|+
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

