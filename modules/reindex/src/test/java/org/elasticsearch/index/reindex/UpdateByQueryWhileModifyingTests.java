begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
operator|.
name|randomSimpleString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|either
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Mutates a document while update-by-query-ing it and asserts that the mutation  * always sticks. Update-by-query should never revert documents.  */
end_comment

begin_class
DECL|class|UpdateByQueryWhileModifyingTests
specifier|public
class|class
name|UpdateByQueryWhileModifyingTests
extends|extends
name|UpdateByQueryTestCase
block|{
DECL|field|MAX_MUTATIONS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_MUTATIONS
init|=
literal|50
decl_stmt|;
DECL|field|MAX_ATTEMPTS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ATTEMPTS
init|=
literal|10
decl_stmt|;
DECL|method|testUpdateWhileReindexing
specifier|public
name|void
name|testUpdateWhileReindexing
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|value
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"test"
argument_list|,
name|value
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|failure
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|keepUpdating
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Thread
name|updater
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
while|while
condition|(
name|keepUpdating
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|assertThat
argument_list|(
name|request
argument_list|()
operator|.
name|source
argument_list|(
literal|"test"
argument_list|)
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
operator|.
name|abortOnVersionConflict
argument_list|(
literal|false
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|responseMatcher
argument_list|()
operator|.
name|updated
argument_list|(
name|either
argument_list|(
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
operator|.
name|versionConflicts
argument_list|(
name|either
argument_list|(
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|updater
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_MUTATIONS
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|get
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|,
name|get
operator|.
name|getSource
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
name|index
init|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"test"
argument_list|,
name|value
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/*                  * Update by query increments the version number so concurrent                  * indexes might get version conflict exceptions so we just                  * blindly retry.                  */
name|int
name|attempts
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|attempts
operator|++
expr_stmt|;
try|try
block|{
name|index
operator|.
name|setVersion
argument_list|(
name|get
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
if|if
condition|(
name|attempts
operator|>=
name|MAX_ATTEMPTS
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to index after ["
operator|+
name|MAX_ATTEMPTS
operator|+
literal|"] attempts. Too many version conflicts!"
argument_list|)
throw|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Caught expected version conflict trying to perform mutation number {} with version {}. Retrying."
argument_list|,
name|i
argument_list|,
name|get
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|keepUpdating
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updater
operator|.
name|join
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|failure
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

