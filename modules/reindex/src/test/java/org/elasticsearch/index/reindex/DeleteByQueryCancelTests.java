begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ListenableActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|cancel
operator|.
name|CancelTasksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|ListTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexingOperationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_comment
comment|/**  * Tests that you can actually cancel a delete-by-query request and all the plumbing works. Doesn't test all of the different cancellation  * places - that is the responsibility of {@link AsyncBulkByScrollActionTests} which have more precise control to simulate failures but do  * not exercise important portion of the stack like transport and task management.  */
end_comment

begin_class
DECL|class|DeleteByQueryCancelTests
specifier|public
class|class
name|DeleteByQueryCancelTests
extends|extends
name|ReindexTestCase
block|{
DECL|field|INDEX
specifier|private
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"test-delete-by-query"
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"test"
decl_stmt|;
DECL|field|MAX_DELETIONS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_DELETIONS
init|=
literal|10
decl_stmt|;
DECL|field|barrier
specifier|private
specifier|static
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|numberOfShards
specifier|protected
name|int
name|numberOfShards
parameter_list|()
block|{
comment|// Only 1 shard and no replica so that test execution
comment|// can be easily controlled within a {@link IndexingOperationListener#preDelete}
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|numberOfReplicas
specifier|protected
name|int
name|numberOfReplicas
parameter_list|()
block|{
comment|// Only 1 shard and no replica so that test execution
comment|// can be easily controlled within a {@link IndexingOperationListener#preDelete}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|plugins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|super
operator|.
name|nodePlugins
argument_list|()
argument_list|)
decl_stmt|;
name|plugins
operator|.
name|add
argument_list|(
name|DeleteByQueryCancellationPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|plugins
return|;
block|}
DECL|method|testCancel
specifier|public
name|void
name|testCancel
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|int
name|totalNumShards
init|=
name|getNumShards
argument_list|(
name|INDEX
argument_list|)
operator|.
name|totalNumShards
decl_stmt|;
comment|// Number of documents to be deleted in this test
specifier|final
name|int
name|nbDocsToDelete
init|=
name|totalNumShards
operator|*
name|MAX_DELETIONS
decl_stmt|;
comment|// Total number of documents that will be created in this test
specifier|final
name|int
name|nbDocs
init|=
name|nbDocsToDelete
operator|*
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbDocs
condition|;
name|i
operator|++
control|)
block|{
name|indexRandom
argument_list|(
literal|false
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"n"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|nbDocs
argument_list|)
expr_stmt|;
comment|// Executes the delete by query; each shard will block after MAX_DELETIONS
name|DeleteByQueryRequestBuilder
name|deleteByQuery
init|=
name|deleteByQuery
argument_list|()
operator|.
name|source
argument_list|(
literal|"_all"
argument_list|)
decl_stmt|;
name|deleteByQuery
operator|.
name|source
argument_list|()
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ListenableActionFuture
argument_list|<
name|BulkIndexByScrollResponse
argument_list|>
name|future
init|=
name|deleteByQuery
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|// Waits for the indexing operation listener to block
name|barrier
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Status should show running
name|ListTasksResponse
name|tasksList
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|DeleteByQueryAction
operator|.
name|NAME
argument_list|)
operator|.
name|setDetailed
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tasksList
operator|.
name|getNodeFailures
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tasksList
operator|.
name|getTaskFailures
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tasksList
operator|.
name|getTasks
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|BulkByScrollTask
operator|.
name|Status
name|status
init|=
operator|(
name|BulkByScrollTask
operator|.
name|Status
operator|)
name|tasksList
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|status
operator|.
name|getReasonCancelled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cancel the request while the deletions are blocked. This will prevent further deletions requests from being sent.
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|cancelledTasks
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCancelTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|DeleteByQueryAction
operator|.
name|NAME
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cancelledTasks
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// The status should now show canceled. The request will still be in the list because the script is still blocked.
name|tasksList
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|DeleteByQueryAction
operator|.
name|NAME
argument_list|)
operator|.
name|setDetailed
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tasksList
operator|.
name|getNodeFailures
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tasksList
operator|.
name|getTaskFailures
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tasksList
operator|.
name|getTasks
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
operator|(
name|BulkByScrollTask
operator|.
name|Status
operator|)
name|tasksList
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|CancelTasksRequest
operator|.
name|DEFAULT_REASON
argument_list|,
name|status
operator|.
name|getReasonCancelled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now unblock the listener so that it can proceed
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// And check the status of the response
name|BulkIndexByScrollResponse
name|response
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|matcher
argument_list|()
operator|.
name|deleted
argument_list|(
name|lessThanOrEqualTo
argument_list|(
operator|(
name|long
operator|)
name|MAX_DELETIONS
argument_list|)
argument_list|)
operator|.
name|batches
argument_list|(
name|MAX_DELETIONS
argument_list|)
operator|.
name|reasonCancelled
argument_list|(
name|equalTo
argument_list|(
literal|"by user request"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|DeleteByQueryCancellationPlugin
specifier|public
specifier|static
class|class
name|DeleteByQueryCancellationPlugin
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"delete-by-query-cancellation"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"See "
operator|+
name|DeleteByQueryCancellationPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onIndexModule
specifier|public
name|void
name|onIndexModule
parameter_list|(
name|IndexModule
name|indexModule
parameter_list|)
block|{
name|indexModule
operator|.
name|addIndexOperationListener
argument_list|(
operator|new
name|BlockingDeleteListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A {@link IndexingOperationListener} that allows a given number of documents to be deleted      * and then blocks until it is notified to proceed.      */
DECL|class|BlockingDeleteListener
specifier|public
specifier|static
class|class
name|BlockingDeleteListener
implements|implements
name|IndexingOperationListener
block|{
DECL|field|blockAfter
specifier|private
specifier|final
name|CountDown
name|blockAfter
init|=
operator|new
name|CountDown
argument_list|(
name|MAX_DELETIONS
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|preDelete
specifier|public
name|Engine
operator|.
name|Delete
name|preDelete
parameter_list|(
name|Engine
operator|.
name|Delete
name|delete
parameter_list|)
block|{
if|if
condition|(
name|blockAfter
operator|.
name|isCountedDown
argument_list|()
operator|||
operator|(
name|TYPE
operator|.
name|equals
argument_list|(
name|delete
operator|.
name|type
argument_list|()
argument_list|)
operator|==
literal|false
operator|)
condition|)
block|{
return|return
name|delete
return|;
block|}
if|if
condition|(
name|blockAfter
operator|.
name|countDown
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Tell the test we've deleted enough documents.
name|barrier
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Wait for the test to tell us to proceed.
name|barrier
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
decl||
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|delete
return|;
block|}
block|}
block|}
end_class

end_unit

