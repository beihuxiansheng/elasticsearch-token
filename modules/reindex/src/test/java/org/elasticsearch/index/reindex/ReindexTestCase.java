begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|SUITE
argument_list|,
name|transportClientRatio
operator|=
literal|0
argument_list|)
DECL|class|ReindexTestCase
specifier|public
specifier|abstract
class|class
name|ReindexTestCase
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|ReindexPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|reindex
specifier|protected
name|ReindexRequestBuilder
name|reindex
parameter_list|()
block|{
return|return
name|ReindexAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
return|;
block|}
DECL|method|responseMatcher
specifier|public
name|IndexBySearchResponseMatcher
name|responseMatcher
parameter_list|()
block|{
return|return
operator|new
name|IndexBySearchResponseMatcher
argument_list|()
return|;
block|}
DECL|class|IndexBySearchResponseMatcher
specifier|public
specifier|static
class|class
name|IndexBySearchResponseMatcher
extends|extends
name|AbstractBulkIndexByScrollResponseMatcher
argument_list|<
name|ReindexResponse
argument_list|,
name|IndexBySearchResponseMatcher
argument_list|>
block|{
DECL|field|createdMatcher
specifier|private
name|Matcher
argument_list|<
name|Long
argument_list|>
name|createdMatcher
init|=
name|equalTo
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
DECL|method|created
specifier|public
name|IndexBySearchResponseMatcher
name|created
parameter_list|(
name|Matcher
argument_list|<
name|Long
argument_list|>
name|updatedMatcher
parameter_list|)
block|{
name|this
operator|.
name|createdMatcher
operator|=
name|updatedMatcher
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|created
specifier|public
name|IndexBySearchResponseMatcher
name|created
parameter_list|(
name|long
name|created
parameter_list|)
block|{
return|return
name|created
argument_list|(
name|equalTo
argument_list|(
name|created
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|matchesSafely
specifier|protected
name|boolean
name|matchesSafely
parameter_list|(
name|ReindexResponse
name|item
parameter_list|)
block|{
return|return
name|super
operator|.
name|matchesSafely
argument_list|(
name|item
argument_list|)
operator|&&
name|createdMatcher
operator|.
name|matches
argument_list|(
name|item
operator|.
name|getCreated
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|describeTo
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|super
operator|.
name|describeTo
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|description
operator|.
name|appendText
argument_list|(
literal|" and created matches "
argument_list|)
operator|.
name|appendDescriptionOf
argument_list|(
name|createdMatcher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|self
specifier|protected
name|IndexBySearchResponseMatcher
name|self
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

