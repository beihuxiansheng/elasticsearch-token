begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|ScrollableHitSource
operator|.
name|SearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
operator|.
name|RemoteInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|abs
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
operator|.
name|randomSimpleString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|parseTimeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_comment
comment|/**  * Round trip tests for all Streamable things declared in this plugin.  */
end_comment

begin_class
DECL|class|RoundTripTests
specifier|public
class|class
name|RoundTripTests
extends|extends
name|ESTestCase
block|{
DECL|method|testReindexRequest
specifier|public
name|void
name|testReindexRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|ReindexRequest
name|reindex
init|=
operator|new
name|ReindexRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|()
argument_list|,
operator|new
name|IndexRequest
argument_list|()
argument_list|)
decl_stmt|;
name|randomRequest
argument_list|(
name|reindex
argument_list|)
expr_stmt|;
name|reindex
operator|.
name|getDestination
argument_list|()
operator|.
name|version
argument_list|(
name|randomFrom
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
literal|12L
argument_list|,
literal|1L
argument_list|,
literal|123124L
argument_list|,
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
name|reindex
operator|.
name|getDestination
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|port
init|=
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|BytesReference
name|query
init|=
operator|new
name|BytesArray
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|randomBoolean
argument_list|()
condition|?
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|password
init|=
name|username
operator|!=
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|?
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
else|:
literal|null
decl_stmt|;
name|int
name|headersCount
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|headersCount
argument_list|)
decl_stmt|;
while|while
condition|(
name|headers
operator|.
name|size
argument_list|()
operator|<
name|headersCount
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reindex
operator|.
name|setRemoteInfo
argument_list|(
operator|new
name|RemoteInfo
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|port
argument_list|,
name|query
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|headers
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ReindexRequest
name|tripped
init|=
operator|new
name|ReindexRequest
argument_list|()
decl_stmt|;
name|roundTrip
argument_list|(
name|reindex
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
name|assertRequestEquals
argument_list|(
name|reindex
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reindex
operator|.
name|getDestination
argument_list|()
operator|.
name|version
argument_list|()
argument_list|,
name|tripped
operator|.
name|getDestination
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reindex
operator|.
name|getDestination
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
name|tripped
operator|.
name|getDestination
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reindex
operator|.
name|getRemoteInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|tripped
operator|.
name|getRemoteInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|tripped
operator|.
name|getRemoteInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reindex
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|tripped
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reindex
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|tripped
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reindex
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getQuery
argument_list|()
argument_list|,
name|tripped
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reindex
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|,
name|tripped
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reindex
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|,
name|tripped
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reindex
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|tripped
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUpdateByQueryRequest
specifier|public
name|void
name|testUpdateByQueryRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|UpdateByQueryRequest
name|update
init|=
operator|new
name|UpdateByQueryRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|()
argument_list|)
decl_stmt|;
name|randomRequest
argument_list|(
name|update
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|update
operator|.
name|setPipeline
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|UpdateByQueryRequest
name|tripped
init|=
operator|new
name|UpdateByQueryRequest
argument_list|()
decl_stmt|;
name|roundTrip
argument_list|(
name|update
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
name|assertRequestEquals
argument_list|(
name|update
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|update
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|tripped
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|randomRequest
specifier|private
name|void
name|randomRequest
parameter_list|(
name|AbstractBulkIndexByScrollRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|)
block|{
name|request
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|size
argument_list|(
name|between
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSize
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAbortOnVersionConflict
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRefresh
argument_list|(
name|rarely
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTimeout
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|randomTimeValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setWaitForActiveShards
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setScript
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomScript
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRequestsPerSecond
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRequestEquals
specifier|private
name|void
name|assertRequestEquals
parameter_list|(
name|AbstractBulkIndexByScrollRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|AbstractBulkIndexByScrollRequest
argument_list|<
name|?
argument_list|>
name|tripped
parameter_list|)
block|{
name|assertArrayEquals
argument_list|(
name|request
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|indices
argument_list|()
argument_list|,
name|tripped
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|indices
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|tripped
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|isAbortOnVersionConflict
argument_list|()
argument_list|,
name|tripped
operator|.
name|isAbortOnVersionConflict
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|isRefresh
argument_list|()
argument_list|,
name|tripped
operator|.
name|isRefresh
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|tripped
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getWaitForActiveShards
argument_list|()
argument_list|,
name|tripped
operator|.
name|getWaitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getScript
argument_list|()
argument_list|,
name|tripped
operator|.
name|getScript
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getRetryBackoffInitialTime
argument_list|()
argument_list|,
name|tripped
operator|.
name|getRetryBackoffInitialTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getMaxRetries
argument_list|()
argument_list|,
name|tripped
operator|.
name|getMaxRetries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|tripped
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkByTaskStatus
specifier|public
name|void
name|testBulkByTaskStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|BulkByScrollTask
operator|.
name|Status
name|status
init|=
name|randomStatus
argument_list|()
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|status
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|BulkByScrollTask
operator|.
name|Status
name|tripped
init|=
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|assertTaskStatusEquals
argument_list|(
name|status
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
block|}
DECL|method|testReindexResponse
specifier|public
name|void
name|testReindexResponse
parameter_list|()
throws|throws
name|IOException
block|{
name|BulkIndexByScrollResponse
name|response
init|=
operator|new
name|BulkIndexByScrollResponse
argument_list|(
name|timeValueMillis
argument_list|(
name|randomPositiveLong
argument_list|()
argument_list|)
argument_list|,
name|randomStatus
argument_list|()
argument_list|,
name|randomIndexingFailures
argument_list|()
argument_list|,
name|randomSearchFailures
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|BulkIndexByScrollResponse
name|tripped
init|=
operator|new
name|BulkIndexByScrollResponse
argument_list|()
decl_stmt|;
name|roundTrip
argument_list|(
name|response
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
name|assertResponseEquals
argument_list|(
name|response
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkIndexByScrollResponse
specifier|public
name|void
name|testBulkIndexByScrollResponse
parameter_list|()
throws|throws
name|IOException
block|{
name|BulkIndexByScrollResponse
name|response
init|=
operator|new
name|BulkIndexByScrollResponse
argument_list|(
name|timeValueMillis
argument_list|(
name|randomPositiveLong
argument_list|()
argument_list|)
argument_list|,
name|randomStatus
argument_list|()
argument_list|,
name|randomIndexingFailures
argument_list|()
argument_list|,
name|randomSearchFailures
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|BulkIndexByScrollResponse
name|tripped
init|=
operator|new
name|BulkIndexByScrollResponse
argument_list|()
decl_stmt|;
name|roundTrip
argument_list|(
name|response
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
name|assertResponseEquals
argument_list|(
name|response
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
block|}
DECL|method|testRethrottleRequest
specifier|public
name|void
name|testRethrottleRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|RethrottleRequest
name|request
init|=
operator|new
name|RethrottleRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRequestsPerSecond
argument_list|(
operator|(
name|float
operator|)
name|randomDoubleBetween
argument_list|(
literal|0
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|request
operator|.
name|setActions
argument_list|(
name|randomFrom
argument_list|(
name|UpdateByQueryAction
operator|.
name|NAME
argument_list|,
name|ReindexAction
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setTaskId
argument_list|(
operator|new
name|TaskId
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RethrottleRequest
name|tripped
init|=
operator|new
name|RethrottleRequest
argument_list|()
decl_stmt|;
name|roundTrip
argument_list|(
name|request
argument_list|,
name|tripped
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|tripped
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|request
operator|.
name|getActions
argument_list|()
argument_list|,
name|tripped
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getTaskId
argument_list|()
argument_list|,
name|tripped
operator|.
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|randomStatus
specifier|private
name|BulkByScrollTask
operator|.
name|Status
name|randomStatus
parameter_list|()
block|{
return|return
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
name|randomPositiveLong
argument_list|()
argument_list|,
name|randomPositiveLong
argument_list|()
argument_list|,
name|randomPositiveLong
argument_list|()
argument_list|,
name|randomPositiveLong
argument_list|()
argument_list|,
name|randomInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|randomPositiveLong
argument_list|()
argument_list|,
name|randomPositiveLong
argument_list|()
argument_list|,
name|randomPositiveLong
argument_list|()
argument_list|,
name|randomPositiveLong
argument_list|()
argument_list|,
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|abs
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|randomIndexingFailures
specifier|private
name|List
argument_list|<
name|Failure
argument_list|>
name|randomIndexingFailures
parameter_list|()
block|{
return|return
name|usually
argument_list|()
condition|?
name|emptyList
argument_list|()
else|:
name|singletonList
argument_list|(
operator|new
name|Failure
argument_list|(
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|randomSearchFailures
specifier|private
name|List
argument_list|<
name|SearchFailure
argument_list|>
name|randomSearchFailures
parameter_list|()
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
name|String
name|index
init|=
literal|null
decl_stmt|;
name|Integer
name|shardId
init|=
literal|null
decl_stmt|;
name|String
name|nodeId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|index
operator|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|randomInt
argument_list|()
expr_stmt|;
name|nodeId
operator|=
name|usually
argument_list|()
condition|?
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
return|return
name|singletonList
argument_list|(
operator|new
name|SearchFailure
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|index
argument_list|,
name|shardId
argument_list|,
name|nodeId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|roundTrip
specifier|private
name|void
name|roundTrip
parameter_list|(
name|Streamable
name|example
parameter_list|,
name|Streamable
name|empty
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|example
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|empty
operator|.
name|readFrom
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|randomScript
specifier|private
name|Script
name|randomScript
parameter_list|()
block|{
return|return
operator|new
name|Script
argument_list|(
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
comment|// Name
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
comment|// Type
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
comment|// Language
name|emptyMap
argument_list|()
argument_list|)
return|;
comment|// Params
block|}
DECL|method|assertResponseEquals
specifier|private
name|void
name|assertResponseEquals
parameter_list|(
name|BulkIndexByScrollResponse
name|expected
parameter_list|,
name|BulkIndexByScrollResponse
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getTook
argument_list|()
argument_list|,
name|actual
operator|.
name|getTook
argument_list|()
argument_list|)
expr_stmt|;
name|assertTaskStatusEquals
argument_list|(
name|expected
operator|.
name|getStatus
argument_list|()
argument_list|,
name|actual
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBulkFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|getBulkFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getBulkFailures
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Failure
name|expectedFailure
init|=
name|expected
operator|.
name|getBulkFailures
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Failure
name|actualFailure
init|=
name|actual
operator|.
name|getBulkFailures
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getIndex
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getType
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getId
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getMessage
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getStatus
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|getSearchFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|getSearchFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getSearchFailures
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SearchFailure
name|expectedFailure
init|=
name|expected
operator|.
name|getSearchFailures
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SearchFailure
name|actualFailure
init|=
name|actual
operator|.
name|getSearchFailures
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getIndex
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getShardId
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getReason
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getReason
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getReason
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getReason
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertTaskStatusEquals
specifier|private
name|void
name|assertTaskStatusEquals
parameter_list|(
name|BulkByScrollTask
operator|.
name|Status
name|expected
parameter_list|,
name|BulkByScrollTask
operator|.
name|Status
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getUpdated
argument_list|()
argument_list|,
name|actual
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getCreated
argument_list|()
argument_list|,
name|actual
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getDeleted
argument_list|()
argument_list|,
name|actual
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBatches
argument_list|()
argument_list|,
name|actual
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getVersionConflicts
argument_list|()
argument_list|,
name|actual
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getNoops
argument_list|()
argument_list|,
name|actual
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBulkRetries
argument_list|()
argument_list|,
name|actual
operator|.
name|getBulkRetries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getSearchRetries
argument_list|()
argument_list|,
name|actual
operator|.
name|getSearchRetries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getThrottled
argument_list|()
argument_list|,
name|actual
operator|.
name|getThrottled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|actual
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getReasonCancelled
argument_list|()
argument_list|,
name|actual
operator|.
name|getReasonCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getThrottledUntil
argument_list|()
argument_list|,
name|actual
operator|.
name|getThrottledUntil
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

