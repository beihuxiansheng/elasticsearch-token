begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex.remote
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
operator|.
name|RemoteRequestBuilders
operator|.
name|initialSearchEntity
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
operator|.
name|RemoteRequestBuilders
operator|.
name|initialSearchParams
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
operator|.
name|RemoteRequestBuilders
operator|.
name|initialSearchPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
operator|.
name|RemoteRequestBuilders
operator|.
name|scrollEntity
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
operator|.
name|RemoteRequestBuilders
operator|.
name|scrollParams
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|either
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|RemoteRequestBuildersTests
specifier|public
class|class
name|RemoteRequestBuildersTests
extends|extends
name|ESTestCase
block|{
DECL|method|testIntialSearchPath
specifier|public
name|void
name|testIntialSearchPath
parameter_list|()
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/_search"
argument_list|,
name|initialSearchPath
argument_list|(
name|searchRequest
argument_list|)
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/_search"
argument_list|,
name|initialSearchPath
argument_list|(
name|searchRequest
argument_list|)
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a,b/c,d/_search"
argument_list|,
name|initialSearchPath
argument_list|(
name|searchRequest
argument_list|)
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"cat,"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Index"
argument_list|,
literal|","
argument_list|,
literal|"cat,"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"cat,"
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Index"
argument_list|,
literal|","
argument_list|,
literal|"cat,"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"dog"
argument_list|,
literal|"cat,"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Index"
argument_list|,
literal|","
argument_list|,
literal|"cat,"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"cat/"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Index"
argument_list|,
literal|"/"
argument_list|,
literal|"cat/"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"cat/"
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Index"
argument_list|,
literal|"/"
argument_list|,
literal|"cat/"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"dog"
argument_list|,
literal|"cat/"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Index"
argument_list|,
literal|"/"
argument_list|,
literal|"cat/"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
literal|"cat,"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Type"
argument_list|,
literal|","
argument_list|,
literal|"cat,"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
literal|"cat,"
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Type"
argument_list|,
literal|","
argument_list|,
literal|"cat,"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
literal|"dog"
argument_list|,
literal|"cat,"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Type"
argument_list|,
literal|","
argument_list|,
literal|"cat,"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
literal|"cat/"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Type"
argument_list|,
literal|"/"
argument_list|,
literal|"cat/"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
literal|"cat/"
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Type"
argument_list|,
literal|"/"
argument_list|,
literal|"cat/"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
literal|"dog"
argument_list|,
literal|"cat/"
argument_list|)
expr_stmt|;
name|expectBadStartRequest
argument_list|(
name|searchRequest
argument_list|,
literal|"Type"
argument_list|,
literal|"/"
argument_list|,
literal|"cat/"
argument_list|)
expr_stmt|;
block|}
DECL|method|expectBadStartRequest
specifier|private
name|void
name|expectBadStartRequest
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|bad
parameter_list|,
name|String
name|failed
parameter_list|)
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|initialSearchPath
argument_list|(
name|searchRequest
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|type
operator|+
literal|" containing ["
operator|+
name|bad
operator|+
literal|"] not supported but got ["
operator|+
name|failed
operator|+
literal|"]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitialSearchParamsSort
specifier|public
name|void
name|testInitialSearchParamsSort
parameter_list|()
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
argument_list|)
decl_stmt|;
comment|// Test sort:_doc for versions that support it.
name|Version
name|remoteVersion
init|=
name|Version
operator|.
name|fromId
argument_list|(
name|between
argument_list|(
name|Version
operator|.
name|V_2_1_0_ID
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|sort
argument_list|(
literal|"_doc"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initialSearchParams
argument_list|(
name|searchRequest
argument_list|,
name|remoteVersion
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"sort"
argument_list|,
literal|"_doc:asc"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test search_type scan for versions that don't support sort:_doc.
name|remoteVersion
operator|=
name|Version
operator|.
name|fromId
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|Version
operator|.
name|V_2_1_0_ID
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initialSearchParams
argument_list|(
name|searchRequest
argument_list|,
name|remoteVersion
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"search_type"
argument_list|,
literal|"scan"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test sorting by some field. Version doesn't matter.
name|remoteVersion
operator|=
name|Version
operator|.
name|fromId
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|sorts
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|sort
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initialSearchParams
argument_list|(
name|searchRequest
argument_list|,
name|remoteVersion
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"sort"
argument_list|,
literal|"foo:asc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitialSearchParamsFields
specifier|public
name|void
name|testInitialSearchParamsFields
parameter_list|()
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
argument_list|)
decl_stmt|;
comment|// Test request without any fields
name|Version
name|remoteVersion
init|=
name|Version
operator|.
name|fromId
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|initialSearchParams
argument_list|(
name|searchRequest
argument_list|,
name|remoteVersion
argument_list|)
argument_list|,
name|not
argument_list|(
name|either
argument_list|(
name|hasKey
argument_list|(
literal|"stored_fields"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|hasKey
argument_list|(
literal|"fields"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup some fields for the next two tests
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|storedField
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|storedField
argument_list|(
literal|"_id"
argument_list|)
expr_stmt|;
comment|// Test stored_fields for versions that support it
name|remoteVersion
operator|=
name|Version
operator|.
name|fromId
argument_list|(
name|between
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha4_ID
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initialSearchParams
argument_list|(
name|searchRequest
argument_list|,
name|remoteVersion
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"stored_fields"
argument_list|,
literal|"_source,_id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test fields for versions that support it
name|remoteVersion
operator|=
name|Version
operator|.
name|fromId
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|Version
operator|.
name|V_5_0_0_alpha4_ID
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initialSearchParams
argument_list|(
name|searchRequest
argument_list|,
name|remoteVersion
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"fields"
argument_list|,
literal|"_source,_id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitialSearchParamsMisc
specifier|public
name|void
name|testInitialSearchParamsMisc
parameter_list|()
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|Version
name|remoteVersion
init|=
name|Version
operator|.
name|fromId
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|TimeValue
name|scroll
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|scroll
operator|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|scroll
argument_list|(
name|scroll
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|size
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|Boolean
name|fetchVersion
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fetchVersion
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|version
argument_list|(
name|fetchVersion
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|initialSearchParams
argument_list|(
name|searchRequest
argument_list|,
name|remoteVersion
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|,
name|scroll
operator|==
literal|null
condition|?
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"scroll"
argument_list|)
argument_list|)
else|:
name|hasEntry
argument_list|(
literal|"scroll"
argument_list|,
name|scroll
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|,
name|hasEntry
argument_list|(
literal|"size"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|,
name|fetchVersion
operator|==
literal|null
operator|||
name|fetchVersion
operator|==
literal|true
condition|?
name|hasEntry
argument_list|(
literal|"version"
argument_list|,
literal|null
argument_list|)
else|:
name|not
argument_list|(
name|hasEntry
argument_list|(
literal|"version"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitialSearchEntity
specifier|public
name|void
name|testInitialSearchEntity
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|query
init|=
literal|"{\"match_all\":{}}"
decl_stmt|;
name|HttpEntity
name|entity
init|=
name|initialSearchEntity
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ContentType
operator|.
name|APPLICATION_JSON
operator|.
name|toString
argument_list|()
argument_list|,
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"query\":"
operator|+
name|query
operator|+
literal|"}"
argument_list|,
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|entity
operator|.
name|getContent
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Invalid XContent fails
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|initialSearchEntity
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{}, \"trailing\": {}"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Unexpected character (',' (code 44))"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|initialSearchEntity
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Unexpected end-of-input"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScrollParams
specifier|public
name|void
name|testScrollParams
parameter_list|()
block|{
name|TimeValue
name|scroll
init|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|scrollParams
argument_list|(
name|scroll
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"scroll"
argument_list|,
name|scroll
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScrollEntity
specifier|public
name|void
name|testScrollEntity
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|scroll
init|=
name|randomAsciiOfLength
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|HttpEntity
name|entity
init|=
name|scrollEntity
argument_list|(
name|scroll
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ContentType
operator|.
name|TEXT_PLAIN
operator|.
name|toString
argument_list|()
argument_list|,
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|scroll
argument_list|,
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|entity
operator|.
name|getContent
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

