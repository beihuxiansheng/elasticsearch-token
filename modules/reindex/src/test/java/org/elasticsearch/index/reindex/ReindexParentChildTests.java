begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
operator|.
name|BulkByScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|hasParentQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|idsQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchHits
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_comment
comment|/**  * Index-by-search tests for parent/child.  */
end_comment

begin_class
DECL|class|ReindexParentChildTests
specifier|public
class|class
name|ReindexParentChildTests
extends|extends
name|ReindexTestCase
block|{
DECL|field|findsCountry
name|QueryBuilder
name|findsCountry
decl_stmt|;
DECL|field|findsCity
name|QueryBuilder
name|findsCity
decl_stmt|;
DECL|field|findsNeighborhood
name|QueryBuilder
name|findsNeighborhood
decl_stmt|;
DECL|method|testParentChild
specifier|public
name|void
name|testParentChild
parameter_list|()
throws|throws
name|Exception
block|{
name|createParentChildIndex
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|createParentChildIndex
argument_list|(
literal|"dest"
argument_list|)
expr_stmt|;
name|createParentChildDocs
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
comment|// Copy parent to the new index
name|ReindexRequestBuilder
name|copy
init|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
operator|.
name|filter
argument_list|(
name|findsCountry
argument_list|)
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|get
argument_list|()
argument_list|,
name|matcher
argument_list|()
operator|.
name|created
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Copy the child to a new index
name|copy
operator|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
operator|.
name|filter
argument_list|(
name|findsCity
argument_list|)
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|get
argument_list|()
argument_list|,
name|matcher
argument_list|()
operator|.
name|created
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure parent/child is intact on that index
name|assertSearchHits
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"dest"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|findsCity
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|"pittsburgh"
argument_list|)
expr_stmt|;
comment|// Copy the grandchild to a new index
name|copy
operator|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
operator|.
name|filter
argument_list|(
name|findsNeighborhood
argument_list|)
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|get
argument_list|()
argument_list|,
name|matcher
argument_list|()
operator|.
name|created
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure parent/child is intact on that index
name|assertSearchHits
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"dest"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|findsNeighborhood
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|"make-believe"
argument_list|)
expr_stmt|;
comment|// Copy the parent/child/grandchild structure all at once to a third index
name|createParentChildIndex
argument_list|(
literal|"dest_all_at_once"
argument_list|)
expr_stmt|;
name|copy
operator|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest_all_at_once"
argument_list|)
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|get
argument_list|()
argument_list|,
name|matcher
argument_list|()
operator|.
name|created
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure parent/child/grandchild is intact there too
name|assertSearchHits
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"dest_all_at_once"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|findsNeighborhood
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|"make-believe"
argument_list|)
expr_stmt|;
block|}
DECL|method|testErrorMessageWhenBadParentChild
specifier|public
name|void
name|testErrorMessageWhenBadParentChild
parameter_list|()
throws|throws
name|Exception
block|{
name|createParentChildIndex
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|createParentChildDocs
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|ReindexRequestBuilder
name|copy
init|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
operator|.
name|filter
argument_list|(
name|findsCity
argument_list|)
decl_stmt|;
specifier|final
name|BulkByScrollResponse
name|response
init|=
name|copy
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getBulkFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Exception
name|cause
init|=
name|response
operator|.
name|getBulkFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cause
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"can't specify parent if no parent field has been configured"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Setup a parent/child index and return a query that should find the child      * using the parent.      */
DECL|method|createParentChildIndex
specifier|private
name|void
name|createParentChildIndex
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|Exception
block|{
name|CreateIndexRequestBuilder
name|create
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|create
operator|.
name|addMapping
argument_list|(
literal|"city"
argument_list|,
literal|"{\"_parent\": {\"type\": \"country\"}}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
expr_stmt|;
name|create
operator|.
name|addMapping
argument_list|(
literal|"neighborhood"
argument_list|,
literal|"{\"_parent\": {\"type\": \"city\"}}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
block|}
DECL|method|createParentChildDocs
specifier|private
name|void
name|createParentChildDocs
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|Exception
block|{
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
literal|"country"
argument_list|,
literal|"united states"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
literal|"city"
argument_list|,
literal|"pittsburgh"
argument_list|)
operator|.
name|setParent
argument_list|(
literal|"united states"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
literal|"neighborhood"
argument_list|,
literal|"make-believe"
argument_list|)
operator|.
name|setParent
argument_list|(
literal|"pittsburgh"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"united states"
argument_list|)
argument_list|)
expr_stmt|;
name|findsCountry
operator|=
name|idsQuery
argument_list|(
literal|"country"
argument_list|)
operator|.
name|addIds
argument_list|(
literal|"united states"
argument_list|)
expr_stmt|;
name|findsCity
operator|=
name|hasParentQuery
argument_list|(
literal|"country"
argument_list|,
name|findsCountry
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|findsNeighborhood
operator|=
name|hasParentQuery
argument_list|(
literal|"city"
argument_list|,
name|findsCity
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure we built the parent/child relationship
name|assertSearchHits
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|findsCity
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|"pittsburgh"
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|findsNeighborhood
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|"make-believe"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

