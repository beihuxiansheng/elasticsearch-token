begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
operator|.
name|AbstractBulkByScrollRequestTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
operator|.
name|RemoteInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|slice
operator|.
name|SliceBuilder
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|parseTimeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_comment
comment|/**  * Tests some of the validation of {@linkplain ReindexRequest}. See reindex's rest tests for much more.  */
end_comment

begin_class
DECL|class|ReindexRequestTests
specifier|public
class|class
name|ReindexRequestTests
extends|extends
name|AbstractBulkByScrollRequestTestCase
argument_list|<
name|ReindexRequest
argument_list|>
block|{
DECL|method|testReindexFromRemoteDoesNotSupportSearchQuery
specifier|public
name|void
name|testReindexFromRemoteDoesNotSupportSearchQuery
parameter_list|()
block|{
name|ReindexRequest
name|reindex
init|=
name|newRequest
argument_list|()
decl_stmt|;
name|reindex
operator|.
name|setRemoteInfo
argument_list|(
operator|new
name|RemoteInfo
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"real_query"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|RemoteInfo
operator|.
name|DEFAULT_SOCKET_TIMEOUT
argument_list|,
name|RemoteInfo
operator|.
name|DEFAULT_CONNECT_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|reindex
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|query
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
expr_stmt|;
comment|// Unsupported place to put query
name|ActionRequestValidationException
name|e
init|=
name|reindex
operator|.
name|validate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Validation Failed: 1: reindex from remote sources should use RemoteInfo's query instead of source's query;"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReindexFromRemoteDoesNotSupportWorkers
specifier|public
name|void
name|testReindexFromRemoteDoesNotSupportWorkers
parameter_list|()
block|{
name|ReindexRequest
name|reindex
init|=
name|newRequest
argument_list|()
decl_stmt|;
name|reindex
operator|.
name|setRemoteInfo
argument_list|(
operator|new
name|RemoteInfo
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"real_query"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|RemoteInfo
operator|.
name|DEFAULT_SOCKET_TIMEOUT
argument_list|,
name|RemoteInfo
operator|.
name|DEFAULT_CONNECT_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|reindex
operator|.
name|setSlices
argument_list|(
name|between
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|ActionRequestValidationException
name|e
init|=
name|reindex
operator|.
name|validate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Validation Failed: 1: reindex from remote sources doesn't support workers> 1 but was ["
operator|+
name|reindex
operator|.
name|getSlices
argument_list|()
operator|+
literal|"];"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoSliceWithWorkers
specifier|public
name|void
name|testNoSliceWithWorkers
parameter_list|()
block|{
name|ReindexRequest
name|reindex
init|=
name|newRequest
argument_list|()
decl_stmt|;
name|reindex
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|slice
argument_list|(
operator|new
name|SliceBuilder
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|reindex
operator|.
name|setSlices
argument_list|(
name|between
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|ActionRequestValidationException
name|e
init|=
name|reindex
operator|.
name|validate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Validation Failed: 1: can't specify both slice and workers;"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extraRandomizationForSlice
specifier|protected
name|void
name|extraRandomizationForSlice
parameter_list|(
name|ReindexRequest
name|original
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|original
operator|.
name|setScript
argument_list|(
operator|new
name|Script
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|original
operator|.
name|setRemoteInfo
argument_list|(
operator|new
name|RemoteInfo
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
literal|10000
argument_list|)
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"socket_timeout"
argument_list|)
argument_list|,
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"connect_timeout"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|extraForSliceAssertions
specifier|protected
name|void
name|extraForSliceAssertions
parameter_list|(
name|ReindexRequest
name|original
parameter_list|,
name|ReindexRequest
name|forSliced
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|original
operator|.
name|getScript
argument_list|()
argument_list|,
name|forSliced
operator|.
name|getScript
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
operator|.
name|getDestination
argument_list|()
argument_list|,
name|forSliced
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
operator|.
name|getRemoteInfo
argument_list|()
argument_list|,
name|forSliced
operator|.
name|getRemoteInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newRequest
specifier|protected
name|ReindexRequest
name|newRequest
parameter_list|()
block|{
name|ReindexRequest
name|reindex
init|=
operator|new
name|ReindexRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|()
argument_list|,
operator|new
name|IndexRequest
argument_list|()
argument_list|)
decl_stmt|;
name|reindex
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|reindex
operator|.
name|getDestination
argument_list|()
operator|.
name|index
argument_list|(
literal|"dest"
argument_list|)
expr_stmt|;
return|return
name|reindex
return|;
block|}
block|}
end_class

end_unit

