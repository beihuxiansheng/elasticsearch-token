begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex.remote
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ContentTooLongException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|protocol
operator|.
name|HttpClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|InputStreamEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|CloseableHttpAsyncClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|HttpAsyncClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicStatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|HttpAsyncRequestProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|HttpAsyncResponseConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchStatusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BackoffPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
operator|.
name|ScrollableHitSource
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|HeapBufferedAsyncResponseConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMinutes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|RemoteScrollableHitSourceTests
specifier|public
class|class
name|RemoteScrollableHitSourceTests
extends|extends
name|ESTestCase
block|{
DECL|field|FAKE_SCROLL_ID
specifier|private
specifier|static
specifier|final
name|String
name|FAKE_SCROLL_ID
init|=
literal|"DnF1ZXJ5VGhlbkZldGNoBQAAAfakescroll"
decl_stmt|;
DECL|field|retries
specifier|private
name|int
name|retries
decl_stmt|;
DECL|field|threadPool
specifier|private
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|searchRequest
specifier|private
name|SearchRequest
name|searchRequest
decl_stmt|;
DECL|field|retriesAllowed
specifier|private
name|int
name|retriesAllowed
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|ExecutorService
name|directExecutor
init|=
name|EsExecutors
operator|.
name|newDirectExecutorService
argument_list|()
decl_stmt|;
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ExecutorService
name|executor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|directExecutor
return|;
block|}
annotation|@
name|Override
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|schedule
parameter_list|(
name|TimeValue
name|delay
parameter_list|,
name|String
name|name
parameter_list|,
name|Runnable
name|command
parameter_list|)
block|{
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
name|retries
operator|=
literal|0
expr_stmt|;
name|searchRequest
operator|=
operator|new
name|SearchRequest
argument_list|()
expr_stmt|;
name|searchRequest
operator|.
name|scroll
argument_list|(
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|version
argument_list|(
literal|true
argument_list|)
operator|.
name|sort
argument_list|(
literal|"_doc"
argument_list|)
operator|.
name|size
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|retriesAllowed
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|testLookupRemoteVersion
specifier|public
name|void
name|testLookupRemoteVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|false
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|,
literal|"main/0_20_5.json"
argument_list|)
operator|.
name|lookupRemoteVersion
argument_list|(
name|v
lambda|->
block|{
name|assertEquals
argument_list|(
name|Version
operator|.
name|fromString
argument_list|(
literal|"0.20.5"
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|false
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|,
literal|"main/0_90_13.json"
argument_list|)
operator|.
name|lookupRemoteVersion
argument_list|(
name|v
lambda|->
block|{
name|assertEquals
argument_list|(
name|Version
operator|.
name|fromString
argument_list|(
literal|"0.90.13"
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|false
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|,
literal|"main/1_7_5.json"
argument_list|)
operator|.
name|lookupRemoteVersion
argument_list|(
name|v
lambda|->
block|{
name|assertEquals
argument_list|(
name|Version
operator|.
name|fromString
argument_list|(
literal|"1.7.5"
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|false
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|,
literal|"main/2_3_3.json"
argument_list|)
operator|.
name|lookupRemoteVersion
argument_list|(
name|v
lambda|->
block|{
name|assertEquals
argument_list|(
name|Version
operator|.
name|V_2_3_3
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|false
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|,
literal|"main/5_0_0_alpha_3.json"
argument_list|)
operator|.
name|lookupRemoteVersion
argument_list|(
name|v
lambda|->
block|{
name|assertEquals
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha3
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|false
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|,
literal|"main/with_unknown_fields.json"
argument_list|)
operator|.
name|lookupRemoteVersion
argument_list|(
name|v
lambda|->
block|{
name|assertEquals
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha3
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseStartOk
specifier|public
name|void
name|testParseStartOk
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"start_ok.json"
argument_list|)
operator|.
name|doStart
argument_list|(
name|r
lambda|->
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FAKE_SCROLL_ID
argument_list|,
name|r
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getHits
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AVToMiC250DjIiBO3yJ_"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"test\":\"test2\"}"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRouting
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseScrollOk
specifier|public
name|void
name|testParseScrollOk
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"scroll_ok.json"
argument_list|)
operator|.
name|doStartNextScroll
argument_list|(
literal|""
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|r
lambda|->
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FAKE_SCROLL_ID
argument_list|,
name|r
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getHits
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AVToMiDL50DjIiBO3yKA"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"test\":\"test3\"}"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRouting
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for parsing _ttl, _timestamp, _routing, and _parent.      */
DECL|method|testParseScrollFullyLoaded
specifier|public
name|void
name|testParseScrollFullyLoaded
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"scroll_fully_loaded.json"
argument_list|)
operator|.
name|doStartNextScroll
argument_list|(
literal|""
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|r
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"AVToMiDL50DjIiBO3yKA"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"test\":\"test3\"}"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testrouting"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRouting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testparent"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for parsing _ttl, _routing, and _parent. _timestamp isn't available.      */
DECL|method|testParseScrollFullyLoadedFrom1_7
specifier|public
name|void
name|testParseScrollFullyLoadedFrom1_7
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"scroll_fully_loaded_1_7.json"
argument_list|)
operator|.
name|doStartNextScroll
argument_list|(
literal|""
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|r
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"AVToMiDL50DjIiBO3yKA"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"test\":\"test3\"}"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testrouting"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRouting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testparent"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Versions of Elasticsearch before 2.1.0 don't support sort:_doc and instead need to use search_type=scan. Scan doesn't return      * documents the first iteration but reindex doesn't like that. So we jump start strait to the next iteration.      */
DECL|method|testScanJumpStart
specifier|public
name|void
name|testScanJumpStart
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"start_scan.json"
argument_list|,
literal|"scroll_ok.json"
argument_list|)
operator|.
name|doStart
argument_list|(
name|r
lambda|->
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FAKE_SCROLL_ID
argument_list|,
name|r
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getHits
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AVToMiDL50DjIiBO3yKA"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"test\":\"test3\"}"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRouting
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRejection
specifier|public
name|void
name|testParseRejection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The rejection comes through in the handler because the mocked http response isn't marked as an error
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// Handling a scroll rejection is the same as handling a search rejection so we reuse the verification code
name|Consumer
argument_list|<
name|Response
argument_list|>
name|checkResponse
init|=
name|r
lambda|->
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FAKE_SCROLL_ID
argument_list|,
name|r
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|0
argument_list|,
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"87A7NvevQxSrEwMbtRCecg"
argument_list|,
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EsRejectedExecutionException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rejected execution of org.elasticsearch.transport.TransportService$5@52d06af2 on "
operator|+
literal|"EsThreadPoolExecutor[search, queue capacity = 1000, org.elasticsearch.common.util.concurrent."
operator|+
literal|"EsThreadPoolExecutor@778ea553[Running, pool size = 7, active threads = 7, queued tasks = 1000, "
operator|+
literal|"completed tasks = 4182]]"
argument_list|,
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getHits
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AVToMiC250DjIiBO3yJ_"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"test\":\"test1\"}"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"rejection.json"
argument_list|)
operator|.
name|doStart
argument_list|(
name|checkResponse
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"rejection.json"
argument_list|)
operator|.
name|doStartNextScroll
argument_list|(
literal|"scroll"
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|checkResponse
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseFailureWithStatus
specifier|public
name|void
name|testParseFailureWithStatus
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The rejection comes through in the handler because the mocked http response isn't marked as an error
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// Handling a scroll rejection is the same as handling a search rejection so we reuse the verification code
name|Consumer
argument_list|<
name|Response
argument_list|>
name|checkResponse
init|=
name|r
lambda|->
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FAKE_SCROLL_ID
argument_list|,
name|r
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|r
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown remote exception with reason=[SearchContextMissingException[No search context found for id [82]]]"
argument_list|,
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getHits
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10000"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"test\":\"test10000\"}"
argument_list|,
name|r
operator|.
name|getHits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"failure_with_status.json"
argument_list|)
operator|.
name|doStart
argument_list|(
name|checkResponse
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"failure_with_status.json"
argument_list|)
operator|.
name|doStartNextScroll
argument_list|(
literal|"scroll"
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|checkResponse
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRequestFailure
specifier|public
name|void
name|testParseRequestFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Consumer
argument_list|<
name|Response
argument_list|>
name|checkResponse
init|=
name|r
lambda|->
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ParsingException
name|failure
init|=
operator|(
name|ParsingException
operator|)
name|r
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown key for a VALUE_STRING in [invalid]."
argument_list|,
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|failure
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|failure
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"request_failure.json"
argument_list|)
operator|.
name|doStart
argument_list|(
name|checkResponse
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"request_failure.json"
argument_list|)
operator|.
name|doStartNextScroll
argument_list|(
literal|"scroll"
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|checkResponse
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetryAndSucceed
specifier|public
name|void
name|testRetryAndSucceed
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Consumer
argument_list|<
name|Response
argument_list|>
name|checkResponse
init|=
name|r
lambda|->
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|getFailures
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|retriesAllowed
operator|=
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"fail:rejection.json"
argument_list|,
literal|"start_ok.json"
argument_list|)
operator|.
name|doStart
argument_list|(
name|checkResponse
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retries
argument_list|)
expr_stmt|;
name|retries
operator|=
literal|0
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"fail:rejection.json"
argument_list|,
literal|"scroll_ok.json"
argument_list|)
operator|.
name|doStartNextScroll
argument_list|(
literal|"scroll"
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|checkResponse
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retries
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetryUntilYouRunOutOfTries
specifier|public
name|void
name|testRetryUntilYouRunOutOfTries
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Consumer
argument_list|<
name|Response
argument_list|>
name|checkResponse
init|=
name|r
lambda|->
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|retriesAllowed
operator|=
name|between
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|String
index|[]
name|paths
init|=
operator|new
name|String
index|[
name|retriesAllowed
operator|+
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retriesAllowed
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
literal|"fail:rejection.json"
expr_stmt|;
block|}
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|sourceWithMockedRemoteCall
argument_list|(
name|paths
argument_list|)
operator|.
name|doStart
argument_list|(
name|checkResponse
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"failed"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|retriesAllowed
argument_list|,
name|retries
argument_list|)
expr_stmt|;
name|retries
operator|=
literal|0
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|sourceWithMockedRemoteCall
argument_list|(
name|paths
argument_list|)
operator|.
name|doStartNextScroll
argument_list|(
literal|"scroll"
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|checkResponse
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failed"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|retriesAllowed
argument_list|,
name|retries
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadContextRestored
specifier|public
name|void
name|testThreadContextRestored
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|header
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|putHeader
argument_list|(
literal|"test"
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|sourceWithMockedRemoteCall
argument_list|(
literal|"start_ok.json"
argument_list|)
operator|.
name|doStart
argument_list|(
name|r
lambda|->
block|{
name|assertEquals
argument_list|(
name|header
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWrapExceptionToPreserveStatus
specifier|public
name|void
name|testWrapExceptionToPreserveStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
comment|// Successfully get the status without a body
name|RestStatus
name|status
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|ElasticsearchStatusException
name|wrapped
init|=
name|RemoteScrollableHitSource
operator|.
name|wrapExceptionToPreserveStatus
argument_list|(
name|status
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|null
argument_list|,
name|cause
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|status
argument_list|,
name|wrapped
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|wrapped
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No error body."
argument_list|,
name|wrapped
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Successfully get the status without a body
name|HttpEntity
name|okEntity
init|=
operator|new
name|StringEntity
argument_list|(
literal|"test body"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|wrapped
operator|=
name|RemoteScrollableHitSource
operator|.
name|wrapExceptionToPreserveStatus
argument_list|(
name|status
operator|.
name|getStatus
argument_list|()
argument_list|,
name|okEntity
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
argument_list|,
name|wrapped
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|wrapped
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"body=test body"
argument_list|,
name|wrapped
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Successfully get the status with a broken body
name|IOException
name|badEntityException
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|HttpEntity
name|badEntity
init|=
name|mock
argument_list|(
name|HttpEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|badEntity
operator|.
name|getContent
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|badEntityException
argument_list|)
expr_stmt|;
name|wrapped
operator|=
name|RemoteScrollableHitSource
operator|.
name|wrapExceptionToPreserveStatus
argument_list|(
name|status
operator|.
name|getStatus
argument_list|()
argument_list|,
name|badEntity
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
argument_list|,
name|wrapped
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|wrapped
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to extract body."
argument_list|,
name|wrapped
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|badEntityException
argument_list|,
name|wrapped
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Fail to get the status without a body
name|int
name|notAnHttpStatus
init|=
operator|-
literal|1
decl_stmt|;
name|assertNull
argument_list|(
name|RestStatus
operator|.
name|fromCode
argument_list|(
name|notAnHttpStatus
argument_list|)
argument_list|)
expr_stmt|;
name|wrapped
operator|=
name|RemoteScrollableHitSource
operator|.
name|wrapExceptionToPreserveStatus
argument_list|(
name|notAnHttpStatus
argument_list|,
literal|null
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|wrapped
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|wrapped
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Couldn't extract status ["
operator|+
name|notAnHttpStatus
operator|+
literal|"]. No error body."
argument_list|,
name|wrapped
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fail to get the status without a body
name|wrapped
operator|=
name|RemoteScrollableHitSource
operator|.
name|wrapExceptionToPreserveStatus
argument_list|(
name|notAnHttpStatus
argument_list|,
name|okEntity
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|wrapped
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|wrapped
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Couldn't extract status ["
operator|+
name|notAnHttpStatus
operator|+
literal|"]. body=test body"
argument_list|,
name|wrapped
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fail to get the status with a broken body
name|wrapped
operator|=
name|RemoteScrollableHitSource
operator|.
name|wrapExceptionToPreserveStatus
argument_list|(
name|notAnHttpStatus
argument_list|,
name|badEntity
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|wrapped
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|wrapped
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Couldn't extract status ["
operator|+
name|notAnHttpStatus
operator|+
literal|"]. Failed to extract body."
argument_list|,
name|wrapped
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|badEntityException
argument_list|,
name|wrapped
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|testTooLargeResponse
specifier|public
name|void
name|testTooLargeResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentTooLongException
name|tooLong
init|=
operator|new
name|ContentTooLongException
argument_list|(
literal|"too long!"
argument_list|)
decl_stmt|;
name|CloseableHttpAsyncClient
name|httpClient
init|=
name|mock
argument_list|(
name|CloseableHttpAsyncClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|httpClient
operator|.
expr|<
name|HttpResponse
operator|>
name|execute
argument_list|(
name|any
argument_list|(
name|HttpAsyncRequestProducer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HttpAsyncResponseConsumer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HttpClientContext
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|FutureCallback
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
operator|new
name|Answer
argument_list|<
name|Future
argument_list|<
name|HttpResponse
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|HttpResponse
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|HeapBufferedAsyncResponseConsumer
name|consumer
init|=
operator|(
name|HeapBufferedAsyncResponseConsumer
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|FutureCallback
name|callback
init|=
operator|(
name|FutureCallback
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|3
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
literal|100
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
argument_list|,
name|consumer
operator|.
name|getBufferLimit
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|failed
argument_list|(
name|tooLong
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RemoteScrollableHitSource
name|source
init|=
name|sourceWithMockedClient
argument_list|(
literal|true
argument_list|,
name|httpClient
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Consumer
argument_list|<
name|Response
argument_list|>
name|checkResponse
init|=
name|r
lambda|->
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Throwable
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|source
operator|.
name|doStartNextScroll
argument_list|(
name|FAKE_SCROLL_ID
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|checkResponse
argument_list|)
argument_list|)
decl_stmt|;
comment|// Unwrap the some artifacts from the test
while|while
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"failed"
argument_list|)
condition|)
block|{
name|e
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
comment|// This next exception is what the user sees
name|assertEquals
argument_list|(
literal|"Remote responded with a chunk that was too large. Use a smaller batch size."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// And that exception is reported as being caused by the underlying exception returned by the client
name|assertSame
argument_list|(
name|tooLong
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoContentTypeIsError
specifier|public
name|void
name|testNoContentTypeIsError
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|sourceWithMockedRemoteCall
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|"main/0_20_5.json"
argument_list|)
operator|.
name|lookupRemoteVersion
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Response didn't include Content-Type: body={"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidJsonThinksRemoveIsNotES
specifier|public
name|void
name|testInvalidJsonThinksRemoveIsNotES
parameter_list|()
throws|throws
name|IOException
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|sourceWithMockedRemoteCall
argument_list|(
literal|"some_text.txt"
argument_list|)
operator|.
name|doStart
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Error parsing the response, remote is likely not an Elasticsearch instance"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnexpectedJsonThinksRemoveIsNotES
specifier|public
name|void
name|testUnexpectedJsonThinksRemoveIsNotES
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Use the response from a main action instead of a proper start response to generate a parse error
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|sourceWithMockedRemoteCall
argument_list|(
literal|"main/2_3_3.json"
argument_list|)
operator|.
name|doStart
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Error parsing the response, remote is likely not an Elasticsearch instance"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sourceWithMockedRemoteCall
specifier|private
name|RemoteScrollableHitSource
name|sourceWithMockedRemoteCall
parameter_list|(
name|String
modifier|...
name|paths
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sourceWithMockedRemoteCall
argument_list|(
literal|true
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|,
name|paths
argument_list|)
return|;
block|}
comment|/**      * Creates a hit source that doesn't make the remote request and instead returns data from some files. Also requests are always returned      * synchronously rather than asynchronously.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|sourceWithMockedRemoteCall
specifier|private
name|RemoteScrollableHitSource
name|sourceWithMockedRemoteCall
parameter_list|(
name|boolean
name|mockRemoteVersion
parameter_list|,
name|ContentType
name|contentType
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
index|[]
name|resources
init|=
operator|new
name|URL
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|resources
index|[
name|i
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"responses/"
operator|+
name|paths
index|[
name|i
index|]
operator|.
name|replace
argument_list|(
literal|"fail:"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resources
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Couldn't find ["
operator|+
name|paths
index|[
name|i
index|]
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|CloseableHttpAsyncClient
name|httpClient
init|=
name|mock
argument_list|(
name|CloseableHttpAsyncClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|httpClient
operator|.
expr|<
name|HttpResponse
operator|>
name|execute
argument_list|(
name|any
argument_list|(
name|HttpAsyncRequestProducer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HttpAsyncResponseConsumer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HttpClientContext
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|FutureCallback
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Future
argument_list|<
name|HttpResponse
argument_list|>
argument_list|>
argument_list|()
block|{
name|int
name|responseCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|HttpResponse
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Throw away the current thread context to simulate running async httpclient's thread pool
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|stashContext
argument_list|()
expr_stmt|;
name|HttpAsyncRequestProducer
name|requestProducer
init|=
operator|(
name|HttpAsyncRequestProducer
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|FutureCallback
argument_list|<
name|HttpResponse
argument_list|>
name|futureCallback
init|=
operator|(
name|FutureCallback
argument_list|<
name|HttpResponse
argument_list|>
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|3
index|]
decl_stmt|;
name|HttpEntityEnclosingRequest
name|request
init|=
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|requestProducer
operator|.
name|generateRequest
argument_list|()
decl_stmt|;
name|URL
name|resource
init|=
name|resources
index|[
name|responseCount
index|]
decl_stmt|;
name|String
name|path
init|=
name|paths
index|[
name|responseCount
operator|++
index|]
decl_stmt|;
name|ProtocolVersion
name|protocolVersion
init|=
operator|new
name|ProtocolVersion
argument_list|(
literal|"http"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"fail:"
argument_list|)
condition|)
block|{
name|String
name|body
init|=
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|request
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"fail:rejection.json"
argument_list|)
condition|)
block|{
name|StatusLine
name|statusLine
init|=
operator|new
name|BasicStatusLine
argument_list|(
name|protocolVersion
argument_list|,
name|RestStatus
operator|.
name|TOO_MANY_REQUESTS
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|BasicHttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|statusLine
argument_list|)
decl_stmt|;
name|futureCallback
operator|.
name|completed
argument_list|(
name|httpResponse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|futureCallback
operator|.
name|failed
argument_list|(
operator|new
name|RuntimeException
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|StatusLine
name|statusLine
init|=
operator|new
name|BasicStatusLine
argument_list|(
name|protocolVersion
argument_list|,
literal|200
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|statusLine
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
name|resource
operator|.
name|openStream
argument_list|()
argument_list|,
name|contentType
argument_list|)
argument_list|)
expr_stmt|;
name|futureCallback
operator|.
name|completed
argument_list|(
name|httpResponse
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|sourceWithMockedClient
argument_list|(
name|mockRemoteVersion
argument_list|,
name|httpClient
argument_list|)
return|;
block|}
DECL|method|sourceWithMockedClient
specifier|private
name|RemoteScrollableHitSource
name|sourceWithMockedClient
parameter_list|(
name|boolean
name|mockRemoteVersion
parameter_list|,
name|CloseableHttpAsyncClient
name|httpClient
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpAsyncClientBuilder
name|clientBuilder
init|=
name|mock
argument_list|(
name|HttpAsyncClientBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|clientBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
name|RestClient
name|restClient
init|=
name|RestClient
operator|.
name|builder
argument_list|(
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|)
operator|.
name|setHttpClientConfigCallback
argument_list|(
name|httpClientBuilder
lambda|->
name|clientBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestRemoteScrollableHitSource
name|hitSource
init|=
operator|new
name|TestRemoteScrollableHitSource
argument_list|(
name|restClient
argument_list|)
block|{
annotation|@
name|Override
name|void
name|lookupRemoteVersion
parameter_list|(
name|Consumer
argument_list|<
name|Version
argument_list|>
name|onVersion
parameter_list|)
block|{
if|if
condition|(
name|mockRemoteVersion
condition|)
block|{
name|onVersion
operator|.
name|accept
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|lookupRemoteVersion
argument_list|(
name|onVersion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
if|if
condition|(
name|mockRemoteVersion
condition|)
block|{
name|hitSource
operator|.
name|remoteVersion
operator|=
name|Version
operator|.
name|CURRENT
expr_stmt|;
block|}
return|return
name|hitSource
return|;
block|}
DECL|method|backoff
specifier|private
name|BackoffPolicy
name|backoff
parameter_list|()
block|{
return|return
name|BackoffPolicy
operator|.
name|constantBackoff
argument_list|(
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|retriesAllowed
argument_list|)
return|;
block|}
DECL|method|countRetry
specifier|private
name|void
name|countRetry
parameter_list|()
block|{
name|retries
operator|+=
literal|1
expr_stmt|;
block|}
DECL|method|failRequest
specifier|private
name|void
name|failRequest
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed"
argument_list|,
name|t
argument_list|)
throw|;
block|}
DECL|class|TestRemoteScrollableHitSource
specifier|private
class|class
name|TestRemoteScrollableHitSource
extends|extends
name|RemoteScrollableHitSource
block|{
DECL|method|TestRemoteScrollableHitSource
name|TestRemoteScrollableHitSource
parameter_list|(
name|RestClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|RemoteScrollableHitSourceTests
operator|.
name|this
operator|.
name|logger
argument_list|,
name|backoff
argument_list|()
argument_list|,
name|RemoteScrollableHitSourceTests
operator|.
name|this
operator|.
name|threadPool
argument_list|,
name|RemoteScrollableHitSourceTests
operator|.
name|this
operator|::
name|countRetry
argument_list|,
name|RemoteScrollableHitSourceTests
operator|.
name|this
operator|::
name|failRequest
argument_list|,
name|client
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
name|RemoteScrollableHitSourceTests
operator|.
name|this
operator|.
name|searchRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

