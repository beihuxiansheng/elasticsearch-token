begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
operator|.
name|ScrollableHitSource
operator|.
name|SearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_class
DECL|class|BulkIndexByScrollResponseTests
specifier|public
class|class
name|BulkIndexByScrollResponseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testMergeConstructor
specifier|public
name|void
name|testMergeConstructor
parameter_list|()
block|{
name|int
name|mergeCount
init|=
name|between
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BulkIndexByScrollResponse
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mergeCount
argument_list|)
decl_stmt|;
name|int
name|took
init|=
name|between
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|int
name|tookIndex
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|mergeCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BulkItemResponse
operator|.
name|Failure
argument_list|>
name|allBulkFailures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SearchFailure
argument_list|>
name|allSearchFailures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|timedOut
init|=
literal|false
decl_stmt|;
name|String
name|reasonCancelled
init|=
name|rarely
argument_list|()
condition|?
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
else|:
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mergeCount
condition|;
name|i
operator|++
control|)
block|{
comment|// One of the merged responses gets the expected value for took, the others get a smaller value
name|TimeValue
name|thisTook
init|=
name|timeValueMillis
argument_list|(
name|i
operator|==
name|tookIndex
condition|?
name|took
else|:
name|between
argument_list|(
literal|0
argument_list|,
name|took
argument_list|)
argument_list|)
decl_stmt|;
comment|// The actual status doesn't matter too much - we test merging those elsewhere
name|String
name|thisReasonCancelled
init|=
name|rarely
argument_list|()
condition|?
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
else|:
literal|null
decl_stmt|;
name|BulkByScrollTask
operator|.
name|Status
name|status
init|=
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0f
argument_list|,
name|thisReasonCancelled
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BulkItemResponse
operator|.
name|Failure
argument_list|>
name|bulkFailures
init|=
name|frequently
argument_list|()
condition|?
name|emptyList
argument_list|()
else|:
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|j
lambda|->
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|allBulkFailures
operator|.
name|addAll
argument_list|(
name|bulkFailures
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SearchFailure
argument_list|>
name|searchFailures
init|=
name|frequently
argument_list|()
condition|?
name|emptyList
argument_list|()
else|:
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|j
lambda|->
operator|new
name|SearchFailure
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|allSearchFailures
operator|.
name|addAll
argument_list|(
name|searchFailures
argument_list|)
expr_stmt|;
name|boolean
name|thisTimedOut
init|=
name|rarely
argument_list|()
decl_stmt|;
name|timedOut
operator||=
name|thisTimedOut
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|BulkIndexByScrollResponse
argument_list|(
name|thisTook
argument_list|,
name|status
argument_list|,
name|bulkFailures
argument_list|,
name|searchFailures
argument_list|,
name|thisTimedOut
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BulkIndexByScrollResponse
name|merged
init|=
operator|new
name|BulkIndexByScrollResponse
argument_list|(
name|responses
argument_list|,
name|reasonCancelled
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|timeValueMillis
argument_list|(
name|took
argument_list|)
argument_list|,
name|merged
operator|.
name|getTook
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allBulkFailures
argument_list|,
name|merged
operator|.
name|getBulkFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allSearchFailures
argument_list|,
name|merged
operator|.
name|getSearchFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|timedOut
argument_list|,
name|merged
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reasonCancelled
argument_list|,
name|merged
operator|.
name|getReasonCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

