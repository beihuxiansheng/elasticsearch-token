begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocumentRequest
operator|.
name|OpType
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|both
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|either
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_comment
comment|/**  * Tests failure capturing and abort-on-failure behavior of reindex.  */
end_comment

begin_class
DECL|class|ReindexFailureTests
specifier|public
class|class
name|ReindexFailureTests
extends|extends
name|ReindexTestCase
block|{
DECL|method|testFailuresCauseAbortDefault
specifier|public
name|void
name|testFailuresCauseAbortDefault
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          * Create the destination index such that the copy will cause a mapping          * conflict on every request.          */
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"dest"
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"test"
argument_list|,
literal|10
argument_list|)
comment|/* Its a string in the source! */
argument_list|)
expr_stmt|;
name|indexDocs
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ReindexRequestBuilder
name|copy
init|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
comment|/*          * Set the search size to something very small to cause there to be          * multiple batches for this request so we can assert that we abort on          * the first batch.          */
name|copy
operator|.
name|source
argument_list|()
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BulkIndexByScrollResponse
name|response
init|=
name|copy
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|matcher
argument_list|()
operator|.
name|batches
argument_list|(
literal|1
argument_list|)
operator|.
name|failures
argument_list|(
name|both
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|lessThanOrEqualTo
argument_list|(
name|maximumNumberOfShards
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Failure
name|failure
range|:
name|response
operator|.
name|getBulkFailures
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"NumberFormatException[For input string: \"words words\"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAbortOnVersionConflict
specifier|public
name|void
name|testAbortOnVersionConflict
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Just put something in the way of the copy.
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"dest"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDocs
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ReindexRequestBuilder
name|copy
init|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
operator|.
name|abortOnVersionConflict
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// CREATE will cause the conflict to prevent the write.
name|copy
operator|.
name|destination
argument_list|()
operator|.
name|setOpType
argument_list|(
name|CREATE
argument_list|)
expr_stmt|;
name|BulkIndexByScrollResponse
name|response
init|=
name|copy
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|matcher
argument_list|()
operator|.
name|batches
argument_list|(
literal|1
argument_list|)
operator|.
name|versionConflicts
argument_list|(
literal|1
argument_list|)
operator|.
name|failures
argument_list|(
literal|1
argument_list|)
operator|.
name|created
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Failure
name|failure
range|:
name|response
operator|.
name|getBulkFailures
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"VersionConflictEngineException[[test]["
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Make sure that search failures get pushed back to the user as failures of      * the whole process. We do lose some information about how far along the      * process got, but its important that they see these failures.      */
DECL|method|testResponseOnSearchFailure
specifier|public
name|void
name|testResponseOnSearchFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          * Attempt to trigger a reindex failure by deleting the source index out          * from under it.          */
name|int
name|attempt
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|attempt
operator|<
literal|5
condition|)
block|{
name|indexDocs
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ReindexRequestBuilder
name|copy
init|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
name|copy
operator|.
name|source
argument_list|()
operator|.
name|setSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|BulkIndexByScrollResponse
argument_list|>
name|response
init|=
name|copy
operator|.
name|execute
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"source"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|response
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Didn't trigger a reindex failure on the {} attempt"
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|attempt
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Triggered a reindex failure on the {} attempt"
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|either
argument_list|(
name|containsString
argument_list|(
literal|"all shards failed"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|containsString
argument_list|(
literal|"No search context found"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|containsString
argument_list|(
literal|"no such index"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|assumeFalse
argument_list|(
literal|"Wasn't able to trigger a reindex failure in "
operator|+
name|attempt
operator|+
literal|" attempts."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testSettingTtlIsValidationFailure
specifier|public
name|void
name|testSettingTtlIsValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|indexDocs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ReindexRequestBuilder
name|copy
init|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
name|copy
operator|.
name|destination
argument_list|()
operator|.
name|setTTL
argument_list|(
literal|123
argument_list|)
expr_stmt|;
try|try
block|{
name|copy
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ActionRequestValidationException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"setting ttl on destination isn't supported. use scripts instead."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSettingTimestampIsValidationFailure
specifier|public
name|void
name|testSettingTimestampIsValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|indexDocs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ReindexRequestBuilder
name|copy
init|=
name|reindex
argument_list|()
operator|.
name|source
argument_list|(
literal|"source"
argument_list|)
operator|.
name|destination
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
name|copy
operator|.
name|destination
argument_list|()
operator|.
name|setTimestamp
argument_list|(
literal|"now"
argument_list|)
expr_stmt|;
try|try
block|{
name|copy
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ActionRequestValidationException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"setting timestamp on destination isn't supported. use scripts instead."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexDocs
specifier|private
name|void
name|indexDocs
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexRequestBuilder
argument_list|>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"source"
argument_list|,
literal|"test"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"test"
argument_list|,
literal|"words words"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

