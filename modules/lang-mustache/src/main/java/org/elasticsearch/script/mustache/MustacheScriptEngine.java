begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script.mustache
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|mustachejava
operator|.
name|Mustache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|mustachejava
operator|.
name|MustacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastStringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|GeneralScriptException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|TemplateScript
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Main entry point handling template registration, compilation and  * execution.  *  * Template handling is based on Mustache. Template handling is a two step  * process: First compile the string representing the template, the resulting  * {@link Mustache} object can then be re-used for subsequent executions.  */
end_comment

begin_class
DECL|class|MustacheScriptEngine
specifier|public
specifier|final
class|class
name|MustacheScriptEngine
implements|implements
name|ScriptEngine
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|MustacheScriptEngine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"mustache"
decl_stmt|;
comment|/**      * Compile a template string to (in this case) a Mustache object than can      * later be re-used for execution to fill in missing parameter values.      *      * @param templateSource a string representing the template to compile.      * @return a compiled template object for later execution.      * */
annotation|@
name|Override
DECL|method|compile
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|compile
parameter_list|(
name|String
name|templateName
parameter_list|,
name|String
name|templateSource
parameter_list|,
name|ScriptContext
argument_list|<
name|T
argument_list|>
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|instanceClazz
operator|.
name|equals
argument_list|(
name|TemplateScript
operator|.
name|class
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mustache engine does not know how to handle context ["
operator|+
name|context
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|MustacheFactory
name|factory
init|=
name|createMustacheFactory
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|FastStringReader
argument_list|(
name|templateSource
argument_list|)
decl_stmt|;
name|Mustache
name|template
init|=
name|factory
operator|.
name|compile
argument_list|(
name|reader
argument_list|,
literal|"query-template"
argument_list|)
decl_stmt|;
name|TemplateScript
operator|.
name|Factory
name|compiled
init|=
name|params
lambda|->
operator|new
name|MustacheExecutableScript
argument_list|(
name|template
argument_list|,
name|params
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|factoryClazz
operator|.
name|cast
argument_list|(
name|compiled
argument_list|)
return|;
block|}
DECL|method|createMustacheFactory
specifier|private
name|CustomMustacheFactory
name|createMustacheFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
if|if
condition|(
name|options
operator|==
literal|null
operator|||
name|options
operator|.
name|isEmpty
argument_list|()
operator|||
name|options
operator|.
name|containsKey
argument_list|(
name|Script
operator|.
name|CONTENT_TYPE_OPTION
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
operator|new
name|CustomMustacheFactory
argument_list|()
return|;
block|}
return|return
operator|new
name|CustomMustacheFactory
argument_list|(
name|options
operator|.
name|get
argument_list|(
name|Script
operator|.
name|CONTENT_TYPE_OPTION
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
comment|/**      * Used at query execution time by script service in order to execute a query template.      * */
DECL|class|MustacheExecutableScript
specifier|private
class|class
name|MustacheExecutableScript
implements|implements
name|TemplateScript
block|{
comment|/** Factory template. */
DECL|field|template
specifier|private
name|Mustache
name|template
decl_stmt|;
DECL|field|params
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
comment|/**          * @param template the compiled template object wrapper          **/
DECL|method|MustacheExecutableScript
name|MustacheExecutableScript
parameter_list|(
name|Mustache
name|template
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|String
name|execute
parameter_list|()
block|{
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
comment|// crazy reflection here
name|SpecialPermission
operator|.
name|check
argument_list|()
expr_stmt|;
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|template
operator|.
name|execute
argument_list|(
name|writer
argument_list|,
name|params
argument_list|)
block|;
return|return
literal|null
return|;
block|}
block|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Error running {}"
argument_list|,
name|template
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|GeneralScriptException
argument_list|(
literal|"Error running "
operator|+
name|template
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

unit|}
end_unit

