begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script.mustache
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|mustachejava
operator|.
name|DefaultMustacheFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|mustachejava
operator|.
name|Mustache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastStringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|UTF8StreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|CompiledScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|GeneralScriptException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Main entry point handling template registration, compilation and  * execution.  *  * Template handling is based on Mustache. Template handling is a two step  * process: First compile the string representing the template, the resulting  * {@link Mustache} object can then be re-used for subsequent executions.  */
end_comment

begin_class
DECL|class|MustacheScriptEngineService
specifier|public
specifier|final
class|class
name|MustacheScriptEngineService
extends|extends
name|AbstractComponent
implements|implements
name|ScriptEngineService
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"mustache"
decl_stmt|;
DECL|field|CONTENT_TYPE_PARAM
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_PARAM
init|=
literal|"content_type"
decl_stmt|;
DECL|field|JSON_CONTENT_TYPE
specifier|static
specifier|final
name|String
name|JSON_CONTENT_TYPE
init|=
literal|"application/json"
decl_stmt|;
DECL|field|PLAIN_TEXT_CONTENT_TYPE
specifier|static
specifier|final
name|String
name|PLAIN_TEXT_CONTENT_TYPE
init|=
literal|"text/plain"
decl_stmt|;
comment|/** Thread local UTF8StreamWriter to store template execution results in, thread local to save object creation.*/
DECL|field|utf8StreamWriter
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|SoftReference
argument_list|<
name|UTF8StreamWriter
argument_list|>
argument_list|>
name|utf8StreamWriter
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** If exists, reset and return, otherwise create, reset and return a writer.*/
DECL|method|utf8StreamWriter
specifier|private
specifier|static
name|UTF8StreamWriter
name|utf8StreamWriter
parameter_list|()
block|{
name|SoftReference
argument_list|<
name|UTF8StreamWriter
argument_list|>
name|ref
init|=
name|utf8StreamWriter
operator|.
name|get
argument_list|()
decl_stmt|;
name|UTF8StreamWriter
name|writer
init|=
operator|(
name|ref
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
operator|new
name|UTF8StreamWriter
argument_list|(
literal|1024
operator|*
literal|4
argument_list|)
expr_stmt|;
name|utf8StreamWriter
operator|.
name|set
argument_list|(
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|writer
return|;
block|}
comment|/**      * @param settings automatically wired by Guice.      * */
annotation|@
name|Inject
DECL|method|MustacheScriptEngineService
specifier|public
name|MustacheScriptEngineService
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Compile a template string to (in this case) a Mustache object than can      * later be re-used for execution to fill in missing parameter values.      *      * @param templateSource      *            a string representing the template to compile.      * @return a compiled template object for later execution.      * */
annotation|@
name|Override
DECL|method|compile
specifier|public
name|Object
name|compile
parameter_list|(
name|String
name|templateName
parameter_list|,
name|String
name|templateSource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|String
name|contentType
init|=
name|params
operator|.
name|getOrDefault
argument_list|(
name|CONTENT_TYPE_PARAM
argument_list|,
name|JSON_CONTENT_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|DefaultMustacheFactory
name|mustacheFactory
decl_stmt|;
switch|switch
condition|(
name|contentType
condition|)
block|{
case|case
name|PLAIN_TEXT_CONTENT_TYPE
case|:
name|mustacheFactory
operator|=
operator|new
name|NoneEscapingMustacheFactory
argument_list|()
expr_stmt|;
break|break;
case|case
name|JSON_CONTENT_TYPE
case|:
default|default:
comment|// assume that the default is json encoding:
name|mustacheFactory
operator|=
operator|new
name|JsonEscapingMustacheFactory
argument_list|()
expr_stmt|;
break|break;
block|}
name|mustacheFactory
operator|.
name|setObjectHandler
argument_list|(
operator|new
name|CustomReflectionObjectHandler
argument_list|()
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|FastStringReader
argument_list|(
name|templateSource
argument_list|)
decl_stmt|;
return|return
name|mustacheFactory
operator|.
name|compile
argument_list|(
name|reader
argument_list|,
literal|"query-template"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getExtension
specifier|public
name|String
name|getExtension
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
name|CompiledScript
name|compiledScript
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
operator|new
name|MustacheExecutableScript
argument_list|(
name|compiledScript
argument_list|,
name|vars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|CompiledScript
name|compiledScript
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Nothing to do here
block|}
annotation|@
name|Override
DECL|method|scriptRemoved
specifier|public
name|void
name|scriptRemoved
parameter_list|(
name|CompiledScript
name|script
parameter_list|)
block|{
comment|// Nothing to do here
block|}
comment|// permission checked before doing crazy reflection
DECL|field|SPECIAL_PERMISSION
specifier|static
specifier|final
name|SpecialPermission
name|SPECIAL_PERMISSION
init|=
operator|new
name|SpecialPermission
argument_list|()
decl_stmt|;
comment|/**      * Used at query execution time by script service in order to execute a query template.      * */
DECL|class|MustacheExecutableScript
specifier|private
class|class
name|MustacheExecutableScript
implements|implements
name|ExecutableScript
block|{
comment|/** Compiled template object wrapper. */
DECL|field|template
specifier|private
name|CompiledScript
name|template
decl_stmt|;
comment|/** Parameters to fill above object with. */
DECL|field|vars
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
decl_stmt|;
comment|/**          * @param template the compiled template object wrapper          * @param vars the parameters to fill above object with          **/
DECL|method|MustacheExecutableScript
specifier|public
name|MustacheExecutableScript
parameter_list|(
name|CompiledScript
name|template
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
name|this
operator|.
name|vars
operator|=
name|vars
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|emptyMap
argument_list|()
operator|:
name|vars
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextVar
specifier|public
name|void
name|setNextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|vars
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|Object
name|run
parameter_list|()
block|{
specifier|final
name|BytesStreamOutput
name|result
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
try|try
init|(
name|UTF8StreamWriter
name|writer
init|=
name|utf8StreamWriter
argument_list|()
operator|.
name|setOutput
argument_list|(
name|result
argument_list|)
init|)
block|{
comment|// crazy reflection here
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
name|sm
operator|.
name|checkPermission
argument_list|(
name|SPECIAL_PERMISSION
argument_list|)
expr_stmt|;
block|}
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
operator|(
operator|(
name|Mustache
operator|)
name|template
operator|.
name|compiled
argument_list|()
operator|)
operator|.
name|execute
argument_list|(
name|writer
argument_list|,
name|vars
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error running {}"
argument_list|,
name|e
argument_list|,
name|template
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|GeneralScriptException
argument_list|(
literal|"Error running "
operator|+
name|template
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
operator|.
name|bytes
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

