begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script.mustache
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|CompositeIndicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|IndicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
operator|.
name|addValidationError
import|;
end_import

begin_comment
comment|/**  * A request to execute a search based on a search template.  */
end_comment

begin_class
DECL|class|SearchTemplateRequest
specifier|public
class|class
name|SearchTemplateRequest
extends|extends
name|ActionRequest
implements|implements
name|CompositeIndicesRequest
block|{
DECL|field|request
specifier|private
name|SearchRequest
name|request
decl_stmt|;
DECL|field|simulate
specifier|private
name|boolean
name|simulate
init|=
literal|false
decl_stmt|;
DECL|field|explain
specifier|private
name|boolean
name|explain
init|=
literal|false
decl_stmt|;
DECL|field|profile
specifier|private
name|boolean
name|profile
init|=
literal|false
decl_stmt|;
DECL|field|scriptType
specifier|private
name|ScriptType
name|scriptType
decl_stmt|;
DECL|field|script
specifier|private
name|String
name|script
decl_stmt|;
DECL|field|scriptParams
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
decl_stmt|;
DECL|method|SearchTemplateRequest
specifier|public
name|SearchTemplateRequest
parameter_list|()
block|{     }
DECL|method|SearchTemplateRequest
specifier|public
name|SearchTemplateRequest
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|searchRequest
expr_stmt|;
block|}
DECL|method|setRequest
specifier|public
name|void
name|setRequest
parameter_list|(
name|SearchRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
DECL|method|getRequest
specifier|public
name|SearchRequest
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
DECL|method|isSimulate
specifier|public
name|boolean
name|isSimulate
parameter_list|()
block|{
return|return
name|simulate
return|;
block|}
DECL|method|setSimulate
specifier|public
name|void
name|setSimulate
parameter_list|(
name|boolean
name|simulate
parameter_list|)
block|{
name|this
operator|.
name|simulate
operator|=
name|simulate
expr_stmt|;
block|}
DECL|method|isExplain
specifier|public
name|boolean
name|isExplain
parameter_list|()
block|{
return|return
name|explain
return|;
block|}
DECL|method|setExplain
specifier|public
name|void
name|setExplain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
block|}
DECL|method|isProfile
specifier|public
name|boolean
name|isProfile
parameter_list|()
block|{
return|return
name|profile
return|;
block|}
DECL|method|setProfile
specifier|public
name|void
name|setProfile
parameter_list|(
name|boolean
name|profile
parameter_list|)
block|{
name|this
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
block|}
DECL|method|getScriptType
specifier|public
name|ScriptType
name|getScriptType
parameter_list|()
block|{
return|return
name|scriptType
return|;
block|}
DECL|method|setScriptType
specifier|public
name|void
name|setScriptType
parameter_list|(
name|ScriptType
name|scriptType
parameter_list|)
block|{
name|this
operator|.
name|scriptType
operator|=
name|scriptType
expr_stmt|;
block|}
DECL|method|getScript
specifier|public
name|String
name|getScript
parameter_list|()
block|{
return|return
name|script
return|;
block|}
DECL|method|setScript
specifier|public
name|void
name|setScript
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
DECL|method|getScriptParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getScriptParams
parameter_list|()
block|{
return|return
name|scriptParams
return|;
block|}
DECL|method|setScriptParams
specifier|public
name|void
name|setScriptParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
parameter_list|)
block|{
name|this
operator|.
name|scriptParams
operator|=
name|scriptParams
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
operator|||
name|script
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"template is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scriptType
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"template's script type is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|simulate
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"search request is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ActionRequestValidationException
name|ex
init|=
name|request
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|validationException
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
operator|new
name|ActionRequestValidationException
argument_list|()
expr_stmt|;
block|}
name|validationException
operator|.
name|addValidationErrors
argument_list|(
name|ex
operator|.
name|validationErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|validationException
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|request
operator|=
name|in
operator|.
name|readOptionalStreamable
argument_list|(
name|SearchRequest
operator|::
operator|new
argument_list|)
expr_stmt|;
name|simulate
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|explain
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|profile
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|scriptType
operator|=
name|ScriptType
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|script
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|scriptParams
operator|=
name|in
operator|.
name|readMap
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStreamable
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|simulate
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|profile
argument_list|)
expr_stmt|;
name|scriptType
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|boolean
name|hasParams
init|=
name|scriptParams
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasParams
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasParams
condition|)
block|{
name|out
operator|.
name|writeMap
argument_list|(
name|scriptParams
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|subRequests
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|IndicesRequest
argument_list|>
name|subRequests
parameter_list|()
block|{
comment|//if we are simulating no index is involved in the request
if|if
condition|(
name|simulate
condition|)
block|{
assert|assert
name|request
operator|==
literal|null
assert|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|//composite request as it delegates to search, but it holds one single action (search itself)
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
end_class

end_unit

