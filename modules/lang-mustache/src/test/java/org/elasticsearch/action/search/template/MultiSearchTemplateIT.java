begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search.template
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|template
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
operator|.
name|MustachePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_class
DECL|class|MultiSearchTemplateIT
specifier|public
class|class
name|MultiSearchTemplateIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|MustachePlugin
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|transportClientPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|transportClientPlugins
parameter_list|()
block|{
return|return
name|nodePlugins
argument_list|()
return|;
block|}
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"msearch"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"msearch"
argument_list|,
literal|"test"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"odd"
argument_list|,
operator|(
name|i
operator|%
literal|2
operator|==
literal|0
operator|)
argument_list|,
literal|"group"
argument_list|,
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
specifier|final
name|String
name|template
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"{{query_type}}"
argument_list|)
operator|.
name|field
argument_list|(
literal|"{{field_name}}"
argument_list|,
literal|"{{field_value}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|MultiSearchTemplateRequest
name|multiRequest
init|=
operator|new
name|MultiSearchTemplateRequest
argument_list|()
decl_stmt|;
comment|// Search #1
name|SearchTemplateRequest
name|search1
init|=
operator|new
name|SearchTemplateRequest
argument_list|()
decl_stmt|;
name|search1
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"msearch"
argument_list|)
argument_list|)
expr_stmt|;
name|search1
operator|.
name|setScriptType
argument_list|(
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|search1
operator|.
name|setScript
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params1
operator|.
name|put
argument_list|(
literal|"query_type"
argument_list|,
literal|"match"
argument_list|)
expr_stmt|;
name|params1
operator|.
name|put
argument_list|(
literal|"field_name"
argument_list|,
literal|"odd"
argument_list|)
expr_stmt|;
name|params1
operator|.
name|put
argument_list|(
literal|"field_value"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|search1
operator|.
name|setScriptParams
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|multiRequest
operator|.
name|add
argument_list|(
name|search1
argument_list|)
expr_stmt|;
comment|// Search #2 (Simulate is true)
name|SearchTemplateRequest
name|search2
init|=
operator|new
name|SearchTemplateRequest
argument_list|()
decl_stmt|;
name|search2
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"msearch"
argument_list|)
argument_list|)
expr_stmt|;
name|search2
operator|.
name|setScriptType
argument_list|(
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|search2
operator|.
name|setScript
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|search2
operator|.
name|setSimulate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params2
operator|.
name|put
argument_list|(
literal|"query_type"
argument_list|,
literal|"match_phrase_prefix"
argument_list|)
expr_stmt|;
name|params2
operator|.
name|put
argument_list|(
literal|"field_name"
argument_list|,
literal|"message"
argument_list|)
expr_stmt|;
name|params2
operator|.
name|put
argument_list|(
literal|"field_value"
argument_list|,
literal|"quick brown f"
argument_list|)
expr_stmt|;
name|search2
operator|.
name|setScriptParams
argument_list|(
name|params2
argument_list|)
expr_stmt|;
name|multiRequest
operator|.
name|add
argument_list|(
name|search2
argument_list|)
expr_stmt|;
comment|// Search #3
name|SearchTemplateRequest
name|search3
init|=
operator|new
name|SearchTemplateRequest
argument_list|()
decl_stmt|;
name|search3
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"msearch"
argument_list|)
argument_list|)
expr_stmt|;
name|search3
operator|.
name|setScriptType
argument_list|(
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|search3
operator|.
name|setScript
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|search3
operator|.
name|setSimulate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params3
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params3
operator|.
name|put
argument_list|(
literal|"query_type"
argument_list|,
literal|"term"
argument_list|)
expr_stmt|;
name|params3
operator|.
name|put
argument_list|(
literal|"field_name"
argument_list|,
literal|"odd"
argument_list|)
expr_stmt|;
name|params3
operator|.
name|put
argument_list|(
literal|"field_value"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|search3
operator|.
name|setScriptParams
argument_list|(
name|params3
argument_list|)
expr_stmt|;
name|multiRequest
operator|.
name|add
argument_list|(
name|search3
argument_list|)
expr_stmt|;
comment|// Search #4 (Fail because of unknown index)
name|SearchTemplateRequest
name|search4
init|=
operator|new
name|SearchTemplateRequest
argument_list|()
decl_stmt|;
name|search4
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
name|search4
operator|.
name|setScriptType
argument_list|(
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|search4
operator|.
name|setScript
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params4
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params4
operator|.
name|put
argument_list|(
literal|"query_type"
argument_list|,
literal|"match"
argument_list|)
expr_stmt|;
name|params4
operator|.
name|put
argument_list|(
literal|"field_name"
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
name|params4
operator|.
name|put
argument_list|(
literal|"field_value"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|search4
operator|.
name|setScriptParams
argument_list|(
name|params4
argument_list|)
expr_stmt|;
name|multiRequest
operator|.
name|add
argument_list|(
name|search4
argument_list|)
expr_stmt|;
comment|// Search #5 (Simulate is true)
name|SearchTemplateRequest
name|search5
init|=
operator|new
name|SearchTemplateRequest
argument_list|()
decl_stmt|;
name|search5
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"msearch"
argument_list|)
argument_list|)
expr_stmt|;
name|search5
operator|.
name|setScriptType
argument_list|(
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|search5
operator|.
name|setScript
argument_list|(
literal|"{{! ignore me }}{\"query\":{\"terms\":{\"group\":[{{#groups}}{{.}},{{/groups}}]}}}"
argument_list|)
expr_stmt|;
name|search5
operator|.
name|setSimulate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params5
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params5
operator|.
name|put
argument_list|(
literal|"groups"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|search5
operator|.
name|setScriptParams
argument_list|(
name|params5
argument_list|)
expr_stmt|;
name|multiRequest
operator|.
name|add
argument_list|(
name|search5
argument_list|)
expr_stmt|;
name|MultiSearchTemplateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|execute
argument_list|(
name|MultiSearchTemplateAction
operator|.
name|INSTANCE
argument_list|,
name|multiRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getResponses
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|MultiSearchTemplateResponse
operator|.
name|Item
name|response1
init|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|response1
operator|.
name|isFailure
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchTemplateResponse1
init|=
name|response1
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchTemplateResponse1
operator|.
name|hasResponse
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchTemplateResponse1
operator|.
name|getResponse
argument_list|()
argument_list|,
operator|(
name|numDocs
operator|/
literal|2
operator|)
operator|+
operator|(
name|numDocs
operator|%
literal|2
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchTemplateResponse1
operator|.
name|getSource
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"query\":{\"match\":{\"odd\":\"true\"}}}"
argument_list|)
argument_list|)
expr_stmt|;
name|MultiSearchTemplateResponse
operator|.
name|Item
name|response2
init|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|response2
operator|.
name|isFailure
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchTemplateResponse2
init|=
name|response2
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchTemplateResponse2
operator|.
name|hasResponse
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchTemplateResponse2
operator|.
name|getSource
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"query\":{\"match_phrase_prefix\":{\"message\":\"quick brown f\"}}}"
argument_list|)
argument_list|)
expr_stmt|;
name|MultiSearchTemplateResponse
operator|.
name|Item
name|response3
init|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|response3
operator|.
name|isFailure
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchTemplateResponse3
init|=
name|response3
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchTemplateResponse3
operator|.
name|hasResponse
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchTemplateResponse3
operator|.
name|getResponse
argument_list|()
argument_list|,
operator|(
name|numDocs
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchTemplateResponse3
operator|.
name|getSource
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"query\":{\"term\":{\"odd\":\"false\"}}}"
argument_list|)
argument_list|)
expr_stmt|;
name|MultiSearchTemplateResponse
operator|.
name|Item
name|response4
init|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|3
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|response4
operator|.
name|isFailure
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response4
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IndexNotFoundException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response4
operator|.
name|getFailure
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"no such index"
argument_list|)
argument_list|)
expr_stmt|;
name|MultiSearchTemplateResponse
operator|.
name|Item
name|response5
init|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|4
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|response5
operator|.
name|isFailure
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchTemplateResponse5
init|=
name|response5
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchTemplateResponse5
operator|.
name|hasResponse
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchTemplateResponse5
operator|.
name|getSource
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"query\":{\"terms\":{\"group\":[1,2,3,]}}}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

