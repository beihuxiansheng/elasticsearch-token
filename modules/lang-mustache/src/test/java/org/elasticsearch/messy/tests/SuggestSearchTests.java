begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.messy.tests
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|messy
operator|.
name|tests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
operator|.
name|MustachePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|DirectCandidateGeneratorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilders
operator|.
name|phraseSuggestion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSuggestionPhraseCollateMatchExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSuggestionSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Integration tests for term and phrase suggestions.  Many of these tests many requests that vary only slightly from one another.  Where  * possible these tests should declare for the first request, make the request, modify the configuration for the next request, make that  * request, modify again, request again, etc.  This makes it very obvious what changes between requests.  */
end_comment

begin_class
DECL|class|SuggestSearchTests
specifier|public
class|class
name|SuggestSearchTests
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|MustachePlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testPhraseSuggesterCollate
specifier|public
name|void
name|testPhraseSuggesterCollate
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
comment|// A single shard will help to keep the tests repeatable.
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.text.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.text.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"my_shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|titles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"United States House of Representatives Elections in Washington 2006"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"United States House of Representatives Elections in Washington 2005"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"State"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Houses of Parliament"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Representative Government"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Election"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|title
range|:
name|titles
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
comment|// suggest without collate
name|PhraseSuggestionBuilder
name|suggest
init|=
name|phraseSuggestion
argument_list|(
literal|"title"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
operator|new
name|DirectCandidateGeneratorBuilder
argument_list|(
literal|"title"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|.99f
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|maxInspections
argument_list|(
literal|200
argument_list|)
argument_list|)
operator|.
name|confidence
argument_list|(
literal|0f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|2f
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|30000
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|suggest
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
comment|// suggest with collate
name|String
name|filterString
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"match_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"{{field}}"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|filteredQuerySuggest
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|filterString
argument_list|)
decl_stmt|;
name|filteredQuerySuggest
operator|.
name|collateParams
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|filteredQuerySuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
comment|// collate suggest with no result (boundary case)
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Elections of Representatives Parliament"
argument_list|,
literal|"title"
argument_list|,
name|filteredQuerySuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|NumShards
name|numShards
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// collate suggest with bad query
name|String
name|incorrectFilterString
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|incorrectFilteredSuggest
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|incorrectFilterString
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|namedSuggestion
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|namedSuggestion
operator|.
name|put
argument_list|(
literal|"my_title_suggestion"
argument_list|,
name|incorrectFilteredSuggest
argument_list|)
expr_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
name|numShards
operator|.
name|numPrimaries
argument_list|,
name|namedSuggestion
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Post query error has been swallowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// suggest with collation
name|String
name|filterStringAsFilter
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"match_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|filteredFilterSuggest
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|filterStringAsFilter
argument_list|)
decl_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|filteredFilterSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
comment|// collate suggest with bad query
name|String
name|filterStr
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"pprefix"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|in
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|filterStr
argument_list|)
decl_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
name|numShards
operator|.
name|numPrimaries
argument_list|,
name|namedSuggestion
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Post filter error has been swallowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|//expected
block|}
comment|// collate script failure due to no additional params
name|String
name|collateWithParams
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"{{query_type}}"
argument_list|)
operator|.
name|field
argument_list|(
literal|"{{query_field}}"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestWithNoParams
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|collateWithParams
argument_list|)
decl_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
name|numShards
operator|.
name|numPrimaries
argument_list|,
name|namedSuggestion
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Malformed query (lack of additional params) should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// collate script with additional params
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"query_type"
argument_list|,
literal|"match_phrase"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"query_field"
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestWithParams
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|collateWithParams
argument_list|)
operator|.
name|collateParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|phraseSuggestWithParams
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
comment|// collate query request with prune set to true
name|PhraseSuggestionBuilder
name|phraseSuggestWithParamsAndReturn
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|collateWithParams
argument_list|)
operator|.
name|collateParams
argument_list|(
name|params
argument_list|)
operator|.
name|collatePrune
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|phraseSuggestWithParamsAndReturn
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|assertSuggestionPhraseCollateMatchExists
argument_list|(
name|searchSuggest
argument_list|,
literal|"title"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|searchSuggest
specifier|protected
name|Suggest
name|searchSuggest
parameter_list|(
name|String
name|name
parameter_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
parameter_list|)
block|{
return|return
name|searchSuggest
argument_list|(
literal|null
argument_list|,
name|name
argument_list|,
name|suggestion
argument_list|)
return|;
block|}
DECL|method|searchSuggest
specifier|protected
name|Suggest
name|searchSuggest
parameter_list|(
name|String
name|suggestText
parameter_list|,
name|String
name|name
parameter_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
return|return
name|searchSuggest
argument_list|(
name|suggestText
argument_list|,
literal|0
argument_list|,
name|map
argument_list|)
return|;
block|}
DECL|method|searchSuggest
specifier|protected
name|Suggest
name|searchSuggest
parameter_list|(
name|String
name|suggestText
parameter_list|,
name|int
name|expectShardsFailed
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|suggestions
parameter_list|)
block|{
name|SearchRequestBuilder
name|builder
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SuggestBuilder
name|suggestBuilder
init|=
operator|new
name|SuggestBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|suggestText
operator|!=
literal|null
condition|)
block|{
name|suggestBuilder
operator|.
name|setGlobalText
argument_list|(
name|suggestText
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|suggestion
range|:
name|suggestions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|suggestBuilder
operator|.
name|addSuggestion
argument_list|(
name|suggestion
operator|.
name|getKey
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|suggest
argument_list|(
name|suggestBuilder
argument_list|)
expr_stmt|;
name|SearchResponse
name|actionGet
init|=
name|builder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|actionGet
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|,
name|actionGet
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectShardsFailed
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|actionGet
operator|.
name|getSuggest
argument_list|()
return|;
block|}
block|}
end_class

end_unit

