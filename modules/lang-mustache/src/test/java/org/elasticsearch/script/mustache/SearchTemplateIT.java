begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script.mustache
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|GetStoredScriptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Full integration test of the template query plugin.  */
end_comment

begin_class
DECL|class|SearchTemplateIT
specifier|public
class|class
name|SearchTemplateIT
extends|extends
name|ESSingleNodeTestCase
block|{
annotation|@
name|Override
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|MustachePlugin
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Relates to #6318
DECL|method|testSearchRequestFail
specifier|public
name|void
name|testSearchRequestFail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"{ \"query\": {\"match_all\": {}}, \"size\" : \"{{my_size}}\"  }"
decl_stmt|;
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|setScript
argument_list|(
name|query
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchResponse
init|=
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|setScript
argument_list|(
name|query
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"my_size"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that template can be expressed as a single escaped string.      */
DECL|method|testTemplateQueryAsEscapedString
specifier|public
name|void
name|testTemplateQueryAsEscapedString
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{"
operator|+
literal|"  \"inline\" : \"{ \\\"size\\\": \\\"{{size}}\\\", \\\"query\\\":{\\\"match_all\\\":{}}}\","
operator|+
literal|"  \"params\":{"
operator|+
literal|"    \"size\": 1"
operator|+
literal|"  }"
operator|+
literal|"}"
decl_stmt|;
name|SearchTemplateRequest
name|request
init|=
name|RestSearchTemplateAction
operator|.
name|parse
argument_list|(
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRequest
argument_list|(
name|searchRequest
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|execute
argument_list|(
name|SearchTemplateAction
operator|.
name|INSTANCE
argument_list|,
name|request
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that template can contain conditional clause. In this case it is at      * the beginning of the string.      */
DECL|method|testTemplateQueryAsEscapedStringStartingWithConditionalClause
specifier|public
name|void
name|testTemplateQueryAsEscapedStringStartingWithConditionalClause
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|String
name|templateString
init|=
literal|"{"
operator|+
literal|"  \"inline\" : \"{ {{#use_size}} \\\"size\\\": \\\"{{size}}\\\", {{/use_size}} \\\"query\\\":{\\\"match_all\\\":{}}}\","
operator|+
literal|"  \"params\":{"
operator|+
literal|"    \"size\": 1,"
operator|+
literal|"    \"use_size\": true"
operator|+
literal|"  }"
operator|+
literal|"}"
decl_stmt|;
name|SearchTemplateRequest
name|request
init|=
name|RestSearchTemplateAction
operator|.
name|parse
argument_list|(
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|templateString
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRequest
argument_list|(
name|searchRequest
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|execute
argument_list|(
name|SearchTemplateAction
operator|.
name|INSTANCE
argument_list|,
name|request
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that template can contain conditional clause. In this case it is at      * the end of the string.      */
DECL|method|testTemplateQueryAsEscapedStringWithConditionalClauseAtEnd
specifier|public
name|void
name|testTemplateQueryAsEscapedStringWithConditionalClauseAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|String
name|templateString
init|=
literal|"{"
operator|+
literal|"  \"inline\" : \"{ \\\"query\\\":{\\\"match_all\\\":{}} {{#use_size}}, \\\"size\\\": \\\"{{size}}\\\" {{/use_size}} }\","
operator|+
literal|"  \"params\":{"
operator|+
literal|"    \"size\": 1,"
operator|+
literal|"    \"use_size\": true"
operator|+
literal|"  }"
operator|+
literal|"}"
decl_stmt|;
name|SearchTemplateRequest
name|request
init|=
name|RestSearchTemplateAction
operator|.
name|parse
argument_list|(
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|templateString
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRequest
argument_list|(
name|searchRequest
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|execute
argument_list|(
name|SearchTemplateAction
operator|.
name|INSTANCE
argument_list|,
name|request
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexedTemplateClient
specifier|public
name|void
name|testIndexedTemplateClient
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"testTemplate"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"                \"query\":{"
operator|+
literal|"                   \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
operator|+
literal|"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"testTemplate"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"                \"query\":{"
operator|+
literal|"                   \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
operator|+
literal|"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|GetStoredScriptResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetStoredScript
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|,
literal|"testTemplate"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|getResponse
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|BulkRequestBuilder
name|bulkRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 2\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 3\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 4\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"bar\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchResponse
init|=
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|types
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"testTemplate"
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|templateParams
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareDeleteStoredScript
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|,
literal|"testTemplate"
argument_list|)
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetStoredScript
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|,
literal|"testTemplate"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|getResponse
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|types
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"/template_index/mustache/1000"
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|templateParams
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"illegal stored script format [/template_index/mustache/1000] use only<id>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexedTemplate
specifier|public
name|void
name|testIndexedTemplate
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"1a"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"                \"query\":{"
operator|+
literal|"                   \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
operator|+
literal|"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"2"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"                \"query\":{"
operator|+
literal|"                   \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
operator|+
literal|"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"3"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"             \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|BulkRequestBuilder
name|bulkRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 2\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 3\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 4\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"bar\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchResponse
init|=
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|types
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"1a"
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|templateParams
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|types
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"/template_index/mustache/1000"
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|templateParams
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|types
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"/myindex/mustache/1"
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|templateParams
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|types
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"/mustache/2"
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|templateParams
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertWarnings
argument_list|(
literal|"use of</lang/id> [/mustache/2] for looking up"
operator|+
literal|" stored scripts/templates has been deprecated, use only<id> [2] instead"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|TemplateQueryBuilder
name|builder
init|=
operator|new
name|TemplateQueryBuilder
argument_list|(
literal|"3"
argument_list|,
name|ScriptType
operator|.
name|STORED
argument_list|,
name|vars
argument_list|)
decl_stmt|;
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertWarnings
argument_list|(
literal|"[template] query is deprecated, use search template api instead"
argument_list|)
expr_stmt|;
block|}
comment|// Relates to #10397
DECL|method|testIndexedTemplateOverwrite
specifier|public
name|void
name|testIndexedTemplateOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"testindex"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"testindex"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"testindex"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"searchtext"
argument_list|,
literal|"dev1"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|int
name|iterations
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|11
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"git01"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"template\":{\"query\": {\"match\": {\"searchtext\": {\"query\": \"{{P_Keyword1}}\","
operator|+
literal|"\"type\": \"ooophrase_prefix\"}}}}}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|GetStoredScriptResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetStoredScript
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|,
literal|"git01"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|getResponse
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"P_Keyword1"
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"testindex"
argument_list|)
operator|.
name|types
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"git01"
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|templateParams
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"[match] query does not support type ooophrase_prefix"
argument_list|)
argument_list|)
expr_stmt|;
name|assertWarnings
argument_list|(
literal|"Deprecated field [type] used, replaced by [match_phrase and match_phrase_prefix query]"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"git01"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"query\": {\"match\": {\"searchtext\": {\"query\": \"{{P_Keyword1}}\","
operator|+
literal|"\"type\": \"phrase_prefix\"}}}}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchResponse
init|=
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"testindex"
argument_list|)
operator|.
name|types
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"git01"
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|templateParams
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertWarnings
argument_list|(
literal|"Deprecated field [type] used, replaced by [match_phrase and match_phrase_prefix query]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexedTemplateWithArray
specifier|public
name|void
name|testIndexedTemplateWithArray
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|multiQuery
init|=
literal|"{\"query\":{\"terms\":{\"theField\":[\"{{#fieldParam}}\",\"{{.}}\",\"{{/fieldParam}}\"]}}}"
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|MustacheScriptEngine
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"4"
argument_list|)
operator|.
name|setContent
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"template"
argument_list|,
name|multiQuery
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|BulkRequestBuilder
name|bulkRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 2\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 3\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 4\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"bar\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arrayTemplateParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|fieldParams
init|=
block|{
literal|"foo"
block|,
literal|"bar"
block|}
decl_stmt|;
name|arrayTemplateParams
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
name|fieldParams
argument_list|)
expr_stmt|;
name|SearchTemplateResponse
name|searchResponse
init|=
operator|new
name|SearchTemplateRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|types
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"4"
argument_list|)
operator|.
name|setScriptType
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|arrayTemplateParams
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

