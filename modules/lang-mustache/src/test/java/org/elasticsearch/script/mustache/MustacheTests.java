begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script.mustache
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|mustachejava
operator|.
name|Mustache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|mustachejava
operator|.
name|MustacheException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|CompiledScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
operator|.
name|MustacheScriptEngineService
operator|.
name|CONTENT_TYPE_PARAM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
operator|.
name|MustacheScriptEngineService
operator|.
name|PLAIN_TEXT_CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|both
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|isEmptyOrNullString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|MustacheTests
specifier|public
class|class
name|MustacheTests
extends|extends
name|ESTestCase
block|{
DECL|field|engine
specifier|private
name|ScriptEngineService
name|engine
init|=
operator|new
name|MustacheScriptEngineService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
name|String
name|template
init|=
literal|"GET _search {\"query\": "
operator|+
literal|"{\"boosting\": {"
operator|+
literal|"\"positive\": {\"match\": {\"body\": \"gift\"}},"
operator|+
literal|"\"negative\": {\"term\": {\"body\": {\"value\": \"solr\"}"
operator|+
literal|"}}, \"negative_boost\": {{boost_val}} } }}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"boost_val"
argument_list|,
literal|"0.2"
argument_list|)
decl_stmt|;
name|Mustache
name|mustache
init|=
operator|(
name|Mustache
operator|)
name|engine
operator|.
name|compile
argument_list|(
literal|null
argument_list|,
name|template
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|CompiledScript
name|compiledScript
init|=
operator|new
name|CompiledScript
argument_list|(
name|INLINE
argument_list|,
literal|"my-name"
argument_list|,
literal|"mustache"
argument_list|,
name|mustache
argument_list|)
decl_stmt|;
name|ExecutableScript
name|result
init|=
name|engine
operator|.
name|executable
argument_list|(
name|compiledScript
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mustache templating broken"
argument_list|,
literal|"GET _search {\"query\": {\"boosting\": {\"positive\": {\"match\": {\"body\": \"gift\"}},"
operator|+
literal|"\"negative\": {\"term\": {\"body\": {\"value\": \"solr\"}}}, \"negative_boost\": 0.2 } }}"
argument_list|,
operator|(
operator|(
name|BytesReference
operator|)
name|result
operator|.
name|run
argument_list|()
operator|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testArrayAccess
specifier|public
name|void
name|testArrayAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"{{data.0}} {{data.1}}"
decl_stmt|;
name|CompiledScript
name|mustache
init|=
operator|new
name|CompiledScript
argument_list|(
name|INLINE
argument_list|,
literal|"inline"
argument_list|,
literal|"mustache"
argument_list|,
name|engine
operator|.
name|compile
argument_list|(
literal|null
argument_list|,
name|template
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|data
init|=
name|randomFrom
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Object
name|output
init|=
name|engine
operator|.
name|executable
argument_list|(
name|mustache
argument_list|,
name|vars
argument_list|)
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|instanceOf
argument_list|(
name|BytesReference
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BytesReference
name|bytes
init|=
operator|(
name|BytesReference
operator|)
name|output
decl_stmt|;
name|assertThat
argument_list|(
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sets can come out in any order
name|Set
argument_list|<
name|String
argument_list|>
name|setData
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|setData
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|setData
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|setData
argument_list|)
expr_stmt|;
name|output
operator|=
name|engine
operator|.
name|executable
argument_list|(
name|mustache
argument_list|,
name|vars
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|instanceOf
argument_list|(
name|BytesReference
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bytes
operator|=
operator|(
name|BytesReference
operator|)
name|output
expr_stmt|;
name|assertThat
argument_list|(
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|both
argument_list|(
name|containsString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|containsString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testArrayInArrayAccess
specifier|public
name|void
name|testArrayInArrayAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"{{data.0.0}} {{data.0.1}}"
decl_stmt|;
name|CompiledScript
name|mustache
init|=
operator|new
name|CompiledScript
argument_list|(
name|INLINE
argument_list|,
literal|"inline"
argument_list|,
literal|"mustache"
argument_list|,
name|engine
operator|.
name|compile
argument_list|(
literal|null
argument_list|,
name|template
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|data
init|=
name|randomFrom
argument_list|(
operator|new
name|String
index|[]
index|[]
block|{
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
block|}
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
argument_list|)
argument_list|,
name|singleton
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Object
name|output
init|=
name|engine
operator|.
name|executable
argument_list|(
name|mustache
argument_list|,
name|vars
argument_list|)
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|instanceOf
argument_list|(
name|BytesReference
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BytesReference
name|bytes
init|=
operator|(
name|BytesReference
operator|)
name|output
decl_stmt|;
name|assertThat
argument_list|(
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapInArrayAccess
specifier|public
name|void
name|testMapInArrayAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"{{data.0.key}} {{data.1.key}}"
decl_stmt|;
name|CompiledScript
name|mustache
init|=
operator|new
name|CompiledScript
argument_list|(
name|INLINE
argument_list|,
literal|"inline"
argument_list|,
literal|"mustache"
argument_list|,
name|engine
operator|.
name|compile
argument_list|(
literal|null
argument_list|,
name|template
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|data
init|=
name|randomFrom
argument_list|(
operator|new
name|Object
index|[]
block|{
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"foo"
argument_list|)
block|,
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"bar"
argument_list|)
block|}
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Object
name|output
init|=
name|engine
operator|.
name|executable
argument_list|(
name|mustache
argument_list|,
name|vars
argument_list|)
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|instanceOf
argument_list|(
name|BytesReference
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BytesReference
name|bytes
init|=
operator|(
name|BytesReference
operator|)
name|output
decl_stmt|;
name|assertThat
argument_list|(
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// HashSet iteration order isn't fixed
name|Set
argument_list|<
name|Object
argument_list|>
name|setData
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|setData
operator|.
name|add
argument_list|(
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|setData
operator|.
name|add
argument_list|(
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|setData
argument_list|)
expr_stmt|;
name|output
operator|=
name|engine
operator|.
name|executable
argument_list|(
name|mustache
argument_list|,
name|vars
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|instanceOf
argument_list|(
name|BytesReference
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bytes
operator|=
operator|(
name|BytesReference
operator|)
name|output
expr_stmt|;
name|assertThat
argument_list|(
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|both
argument_list|(
name|containsString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|containsString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEscaping
specifier|public
name|void
name|testEscaping
parameter_list|()
block|{
comment|// json string escaping enabled:
name|Mustache
name|mustache
init|=
operator|(
name|Mustache
operator|)
name|engine
operator|.
name|compile
argument_list|(
literal|null
argument_list|,
literal|"{ \"field1\": \"{{value}}\"}"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|CompiledScript
name|compiledScript
init|=
operator|new
name|CompiledScript
argument_list|(
name|INLINE
argument_list|,
literal|"name"
argument_list|,
literal|"mustache"
argument_list|,
name|mustache
argument_list|)
decl_stmt|;
name|ExecutableScript
name|executableScript
init|=
name|engine
operator|.
name|executable
argument_list|(
name|compiledScript
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"value"
argument_list|,
literal|"a \"value\""
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|rawResult
init|=
operator|(
name|BytesReference
operator|)
name|executableScript
operator|.
name|run
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|rawResult
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|equalTo
argument_list|(
literal|"{ \"field1\": \"a \\\"value\\\"\"}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// json string escaping disabled:
name|mustache
operator|=
operator|(
name|Mustache
operator|)
name|engine
operator|.
name|compile
argument_list|(
literal|null
argument_list|,
literal|"{ \"field1\": \"{{value}}\"}"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|CONTENT_TYPE_PARAM
argument_list|,
name|PLAIN_TEXT_CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|compiledScript
operator|=
operator|new
name|CompiledScript
argument_list|(
name|INLINE
argument_list|,
literal|"name"
argument_list|,
literal|"mustache"
argument_list|,
name|mustache
argument_list|)
expr_stmt|;
name|executableScript
operator|=
name|engine
operator|.
name|executable
argument_list|(
name|compiledScript
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"value"
argument_list|,
literal|"a \"value\""
argument_list|)
argument_list|)
expr_stmt|;
name|rawResult
operator|=
operator|(
name|BytesReference
operator|)
name|executableScript
operator|.
name|run
argument_list|()
expr_stmt|;
name|result
operator|=
name|rawResult
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|equalTo
argument_list|(
literal|"{ \"field1\": \"a \"value\"\"}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSizeAccessForCollectionsAndArrays
specifier|public
name|void
name|testSizeAccessForCollectionsAndArrays
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|randomArrayValues
init|=
name|generateRandomStringArray
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|randomList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|generateRandomStringArray
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"{{data.array.size}} {{data.list.size}}"
decl_stmt|;
name|CompiledScript
name|mustache
init|=
operator|new
name|CompiledScript
argument_list|(
name|INLINE
argument_list|,
literal|"inline"
argument_list|,
literal|"mustache"
argument_list|,
name|engine
operator|.
name|compile
argument_list|(
literal|null
argument_list|,
name|template
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"array"
argument_list|,
name|randomArrayValues
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"list"
argument_list|,
name|randomList
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Object
name|output
init|=
name|engine
operator|.
name|executable
argument_list|(
name|mustache
argument_list|,
name|vars
argument_list|)
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|instanceOf
argument_list|(
name|BytesReference
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BytesReference
name|bytes
init|=
operator|(
name|BytesReference
operator|)
name|output
decl_stmt|;
name|String
name|expectedString
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s %s"
argument_list|,
name|randomArrayValues
operator|.
name|length
argument_list|,
name|randomList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedString
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrimitiveToJSON
specifier|public
name|void
name|testPrimitiveToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"{{#toJson}}ctx{{/toJson}}"
decl_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|42
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|42L
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|42.5f
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"42.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|=
literal|"{{#toJson}}.{{/toJson}}"
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":\"value\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":\"\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":true}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|42
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":42}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|42L
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":42}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|42.5f
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":42.5}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":null}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleMapToJSON
specifier|public
name|void
name|testSimpleMapToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|human0
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|human0
operator|.
name|put
argument_list|(
literal|"age"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|human0
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"John Smith"
argument_list|)
expr_stmt|;
name|human0
operator|.
name|put
argument_list|(
literal|"height"
argument_list|,
literal|1.84
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
name|human0
argument_list|)
decl_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}.{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":{\"name\":\"John Smith\",\"age\":42,\"height\":1.84}}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"{\"name\":\"John Smith\",\"age\":42,\"height\":1.84}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx.name{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"John Smith"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleMapsToJSON
specifier|public
name|void
name|testMultipleMapsToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|human0
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|human0
operator|.
name|put
argument_list|(
literal|"age"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|human0
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"John Smith"
argument_list|)
expr_stmt|;
name|human0
operator|.
name|put
argument_list|(
literal|"height"
argument_list|,
literal|1.84
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|human1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|human1
operator|.
name|put
argument_list|(
literal|"age"
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|human1
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Dave Smith"
argument_list|)
expr_stmt|;
name|human1
operator|.
name|put
argument_list|(
literal|"height"
argument_list|,
literal|1.71
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|humans
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|humans
operator|.
name|put
argument_list|(
literal|"first"
argument_list|,
name|human0
argument_list|)
expr_stmt|;
name|humans
operator|.
name|put
argument_list|(
literal|"second"
argument_list|,
name|human1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
name|humans
argument_list|)
decl_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}.{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":{\"first\":{\"name\":\"John Smith\",\"age\":42,\"height\":1.84},\"second\":"
operator|+
literal|"{\"name\":\"Dave Smith\",\"age\":27,\"height\":1.71}}}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"{\"first\":{\"name\":\"John Smith\",\"age\":42,\"height\":1.84},\"second\":"
operator|+
literal|"{\"name\":\"Dave Smith\",\"age\":27,\"height\":1.71}}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx.first{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"{\"name\":\"John Smith\",\"age\":42,\"height\":1.84}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx.second{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"{\"name\":\"Dave Smith\",\"age\":27,\"height\":1.71}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleArrayToJSON
specifier|public
name|void
name|testSimpleArrayToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"array"
argument_list|,
name|array
argument_list|)
decl_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}.{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"{\"array\":[\"one\",\"two\",\"three\"]}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}array{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"[\"one\",\"two\",\"three\"]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}array.0{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}array.1{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}array.2{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}array.size{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleListToJSON
specifier|public
name|void
name|testSimpleListToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}.{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"{\"ctx\":[\"one\",\"two\",\"three\"]}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"[\"one\",\"two\",\"three\"]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx.0{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx.1{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx.2{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#toJson}}ctx.size{{/toJson}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testsUnsupportedTagsToJson
specifier|public
name|void
name|testsUnsupportedTagsToJson
parameter_list|()
block|{
name|MustacheException
name|e
init|=
name|expectThrows
argument_list|(
name|MustacheException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|compile
argument_list|(
literal|"{{#toJson}}{{foo}}{{bar}}{{/toJson}}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Mustache function [toJson] must contain one and only one identifier"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|MustacheException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|compile
argument_list|(
literal|"{{#toJson}}{{/toJson}}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Mustache function [toJson] must contain one and only one identifier"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmbeddedToJSON
specifier|public
name|void
name|testEmbeddedToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"bulks"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"index-1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"type-1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"index-2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"type-2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|v2
argument_list|()
argument_list|)
decl_stmt|;
name|assertScript
argument_list|(
literal|"{{#ctx.bulks}}{{#toJson}}.{{/toJson}}{{/ctx.bulks}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"{\"index\":\"index-1\",\"id\":1,\"type\":\"type-1\"}{\"index\":\"index-2\",\"id\":2,\"type\":\"type-2\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#ctx.bulks}}<{{#toJson}}id{{/toJson}}>{{/ctx.bulks}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"<1><2>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleArrayJoin
specifier|public
name|void
name|testSimpleArrayJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"{{#join}}array{{/join}}"
decl_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"array"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|}
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"one,two,three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"array"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1,2,3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"array"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|2L
block|,
literal|3L
block|}
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1,2,3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"array"
argument_list|,
operator|new
name|double
index|[]
block|{
literal|1.5
block|,
literal|2.5
block|,
literal|3.5
block|}
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.5,2.5,3.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"array"
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|}
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"true,false,true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"array"
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|}
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"true,false,true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmbeddedArrayJoin
specifier|public
name|void
name|testEmbeddedArrayJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"people"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"John Smith"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"emails"
argument_list|)
operator|.
name|value
argument_list|(
literal|"john@smith.com"
argument_list|)
operator|.
name|value
argument_list|(
literal|"john.smith@email.com"
argument_list|)
operator|.
name|value
argument_list|(
literal|"jsmith@email.com"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"John Doe"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"emails"
argument_list|)
operator|.
name|value
argument_list|(
literal|"john@doe.com"
argument_list|)
operator|.
name|value
argument_list|(
literal|"john.doe@email.com"
argument_list|)
operator|.
name|value
argument_list|(
literal|"jdoe@email.com"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ctx"
argument_list|,
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|v2
argument_list|()
argument_list|)
decl_stmt|;
name|assertScript
argument_list|(
literal|"{{#join}}ctx.people.0.emails{{/join}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"john@smith.com,john.smith@email.com,jsmith@email.com"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#join}}ctx.people.1.emails{{/join}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"john@doe.com,john.doe@email.com,jdoe@email.com"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#ctx.people}}to: {{#join}}emails{{/join}};{{/ctx.people}}"
argument_list|,
name|ctx
argument_list|,
name|equalTo
argument_list|(
literal|"to: john@smith.com,john.smith@email.com,jsmith@email.com;to: john@doe.com,john.doe@email.com,jdoe@email.com;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJoinWithToJson
specifier|public
name|void
name|testJoinWithToJson
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"terms"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|singletonMap
argument_list|(
literal|"term"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|singletonMap
argument_list|(
literal|"term"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertScript
argument_list|(
literal|"{{#join}}{{#toJson}}terms{{/toJson}}{{/join}}"
argument_list|,
name|params
argument_list|,
name|equalTo
argument_list|(
literal|"[{\"term\":\"foo\"},{\"term\":\"bar\"}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testsUnsupportedTagsJoin
specifier|public
name|void
name|testsUnsupportedTagsJoin
parameter_list|()
block|{
name|MustacheException
name|e
init|=
name|expectThrows
argument_list|(
name|MustacheException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|compile
argument_list|(
literal|"{{#join}}{{/join}}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Mustache function [join] must contain one and only one identifier"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|MustacheException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|compile
argument_list|(
literal|"{{#join delimiter='a'}}{{/join delimiter='b'}}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Mismatched start/end tags"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJoinWithCustomDelimiter
specifier|public
name|void
name|testJoinWithCustomDelimiter
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"params"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|assertScript
argument_list|(
literal|"{{#join delimiter=''}}params{{/join delimiter=''}}"
argument_list|,
name|params
argument_list|,
name|equalTo
argument_list|(
literal|"1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#join delimiter=','}}params{{/join delimiter=','}}"
argument_list|,
name|params
argument_list|,
name|equalTo
argument_list|(
literal|"1,2,3,4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#join delimiter='/'}}params{{/join delimiter='/'}}"
argument_list|,
name|params
argument_list|,
name|equalTo
argument_list|(
literal|"1/2/3/4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertScript
argument_list|(
literal|"{{#join delimiter=' and '}}params{{/join delimiter=' and '}}"
argument_list|,
name|params
argument_list|,
name|equalTo
argument_list|(
literal|"1 and 2 and 3 and 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertScript
specifier|private
name|void
name|assertScript
parameter_list|(
name|String
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|,
name|Matcher
argument_list|<
name|Object
argument_list|>
name|matcher
parameter_list|)
block|{
name|Object
name|result
init|=
name|engine
operator|.
name|executable
argument_list|(
operator|new
name|CompiledScript
argument_list|(
name|INLINE
argument_list|,
literal|"inline"
argument_list|,
literal|"mustache"
argument_list|,
name|compile
argument_list|(
name|script
argument_list|)
argument_list|)
argument_list|,
name|vars
argument_list|)
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|instanceOf
argument_list|(
name|BytesReference
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|BytesReference
operator|)
name|result
operator|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|compile
specifier|private
name|Object
name|compile
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"cannot compile null or empty script"
argument_list|,
name|script
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|engine
operator|.
name|compile
argument_list|(
literal|null
argument_list|,
name|script
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

