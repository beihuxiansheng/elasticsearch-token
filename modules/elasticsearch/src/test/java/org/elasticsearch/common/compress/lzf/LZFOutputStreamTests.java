begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress.lzf
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|LZFOutputStreamTests
specifier|public
class|class
name|LZFOutputStreamTests
block|{
DECL|field|BUFFER_SIZE
specifier|private
specifier|static
name|int
name|BUFFER_SIZE
init|=
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
operator|*
literal|64
decl_stmt|;
DECL|field|nonEncodableBytesToWrite
specifier|private
name|byte
index|[]
name|nonEncodableBytesToWrite
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
DECL|field|bytesToWrite
specifier|private
name|byte
index|[]
name|bytesToWrite
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
annotation|@
name|BeforeTest
argument_list|(
name|alwaysRun
operator|=
literal|true
argument_list|)
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|SecureRandom
operator|.
name|getInstance
argument_list|(
literal|"SHA1PRNG"
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|nonEncodableBytesToWrite
argument_list|)
expr_stmt|;
name|String
name|phrase
init|=
literal|"all work and no play make Jack a dull boy"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|phrase
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|cursor
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cursor
operator|<=
name|bytesToWrite
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytesToWrite
argument_list|,
name|cursor
argument_list|,
operator|(
name|bytes
operator|.
name|length
operator|+
name|cursor
operator|<
name|bytesToWrite
operator|.
name|length
operator|)
condition|?
name|bytes
operator|.
name|length
else|:
name|bytesToWrite
operator|.
name|length
operator|-
name|cursor
argument_list|)
expr_stmt|;
name|cursor
operator|+=
name|bytes
operator|.
name|length
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUnencodable
specifier|public
name|void
name|testUnencodable
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|LZFOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|nonEncodableBytesToWrite
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|>
name|nonEncodableBytesToWrite
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStreaming
specifier|public
name|void
name|testStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|LZFOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytesToWrite
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|>
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|<
name|bytesToWrite
operator|.
name|length
operator|*
literal|.5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleByte
specifier|public
name|void
name|testSingleByte
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|LZFOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|BUFFER_SIZE
condition|;
name|idx
operator|++
control|)
block|{
name|os
operator|.
name|write
argument_list|(
name|bytesToWrite
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|%
literal|1023
operator|==
literal|0
condition|)
block|{
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|>
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|<
name|bytesToWrite
operator|.
name|length
operator|*
literal|.5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialBuffer
specifier|public
name|void
name|testPartialBuffer
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|offset
init|=
literal|255
decl_stmt|;
name|int
name|len
init|=
literal|1
operator|<<
literal|17
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|LZFOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytesToWrite
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|>
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|<
name|bytesToWrite
operator|.
name|length
operator|*
literal|.5
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

