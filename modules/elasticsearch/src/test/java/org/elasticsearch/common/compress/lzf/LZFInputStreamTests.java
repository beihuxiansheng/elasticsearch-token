begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress.lzf
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|LZFInputStreamTests
specifier|public
class|class
name|LZFInputStreamTests
block|{
DECL|field|BUFFER_SIZE
specifier|private
specifier|static
name|int
name|BUFFER_SIZE
init|=
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
operator|*
literal|64
decl_stmt|;
DECL|field|nonEncodableBytesToWrite
specifier|private
name|byte
index|[]
name|nonEncodableBytesToWrite
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
DECL|field|bytesToWrite
specifier|private
name|byte
index|[]
name|bytesToWrite
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
DECL|field|nonCompressed
specifier|private
name|ByteArrayOutputStream
name|nonCompressed
decl_stmt|;
DECL|field|compressed
specifier|private
name|ByteArrayOutputStream
name|compressed
decl_stmt|;
annotation|@
name|BeforeTest
argument_list|(
name|alwaysRun
operator|=
literal|true
argument_list|)
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|SecureRandom
operator|.
name|getInstance
argument_list|(
literal|"SHA1PRNG"
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|nonEncodableBytesToWrite
argument_list|)
expr_stmt|;
name|String
name|phrase
init|=
literal|"all work and no play make Jack a dull boy"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|phrase
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|cursor
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cursor
operator|<=
name|bytesToWrite
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytesToWrite
argument_list|,
name|cursor
argument_list|,
operator|(
name|bytes
operator|.
name|length
operator|+
name|cursor
operator|<
name|bytesToWrite
operator|.
name|length
operator|)
condition|?
name|bytes
operator|.
name|length
else|:
name|bytesToWrite
operator|.
name|length
operator|-
name|cursor
argument_list|)
expr_stmt|;
name|cursor
operator|+=
name|bytes
operator|.
name|length
expr_stmt|;
block|}
name|nonCompressed
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|LZFOutputStream
argument_list|(
name|nonCompressed
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|nonEncodableBytesToWrite
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressed
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|os
operator|=
operator|new
name|LZFOutputStream
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytesToWrite
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecompressNonEncodableReadByte
specifier|public
name|void
name|testDecompressNonEncodableReadByte
parameter_list|()
throws|throws
name|IOException
block|{
name|doDecompressReadBlock
argument_list|(
name|nonCompressed
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|nonEncodableBytesToWrite
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecompressNonEncodableReadBlock
specifier|public
name|void
name|testDecompressNonEncodableReadBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|doDecompressReadBlock
argument_list|(
name|nonCompressed
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|nonEncodableBytesToWrite
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecompressEncodableReadByte
specifier|public
name|void
name|testDecompressEncodableReadByte
parameter_list|()
throws|throws
name|IOException
block|{
name|doDecompressReadBlock
argument_list|(
name|compressed
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|bytesToWrite
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecompressEncodableReadBlock
specifier|public
name|void
name|testDecompressEncodableReadBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|doDecompressReadBlock
argument_list|(
name|compressed
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|bytesToWrite
argument_list|)
expr_stmt|;
block|}
DECL|method|doDecompressNonEncodableReadByte
specifier|public
name|void
name|doDecompressNonEncodableReadByte
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
name|reference
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|int
name|outputBytes
init|=
literal|0
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|LZFInputStream
argument_list|(
name|bis
argument_list|)
decl_stmt|;
name|int
name|val
decl_stmt|;
while|while
condition|(
operator|(
name|val
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|byte
name|testVal
init|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|&
literal|255
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testVal
operator|==
name|reference
index|[
name|outputBytes
index|]
argument_list|)
expr_stmt|;
name|outputBytes
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outputBytes
operator|==
name|reference
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testIncremental
annotation|@
name|Test
name|void
name|testIncremental
parameter_list|()
throws|throws
name|IOException
block|{
comment|// first need to compress something...
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[]
block|{
literal|"what"
block|,
literal|"ever"
block|,
literal|"some"
block|,
literal|"other"
block|,
literal|"words"
block|,
literal|"too"
block|}
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|258000
argument_list|)
decl_stmt|;
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
literal|123
argument_list|)
decl_stmt|;
while|while
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|<
literal|256000
condition|)
block|{
name|int
name|i
init|=
operator|(
name|rnd
operator|.
name|nextInt
argument_list|()
operator|&
literal|31
operator|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|words
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|words
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|uncomp
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|LZFOutputStream
name|lzOut
init|=
operator|new
name|LZFOutputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|lzOut
operator|.
name|write
argument_list|(
name|uncomp
argument_list|)
expr_stmt|;
name|lzOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|comp
init|=
name|bytes
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// read back, in chunks
name|bytes
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|uncomp
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|64
index|]
decl_stmt|;
name|LZFInputStream
name|lzIn
init|=
operator|new
name|LZFInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|comp
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|len
init|=
literal|1
operator|+
operator|(
operator|(
name|rnd
operator|.
name|nextInt
argument_list|()
operator|&
literal|0x7FFFFFFF
operator|)
operator|%
name|buffer
operator|.
name|length
operator|)
decl_stmt|;
name|int
name|offset
init|=
name|buffer
operator|.
name|length
operator|-
name|len
decl_stmt|;
name|int
name|count
init|=
name|lzIn
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|count
operator|>
name|len
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Requested "
operator|+
name|len
operator|+
literal|" bytes (offset "
operator|+
name|offset
operator|+
literal|", array length "
operator|+
name|buffer
operator|.
name|length
operator|+
literal|"), got "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
name|bytes
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|result
init|=
name|bytes
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|length
argument_list|,
name|uncomp
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
name|uncomp
argument_list|)
expr_stmt|;
block|}
DECL|method|doDecompressReadBlock
specifier|private
name|void
name|doDecompressReadBlock
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
name|reference
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|int
name|outputBytes
init|=
literal|0
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|LZFInputStream
argument_list|(
name|bis
argument_list|)
decl_stmt|;
name|int
name|val
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|65536
operator|+
literal|23
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|val
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|testVal
init|=
name|buffer
index|[
name|i
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testVal
operator|==
name|reference
index|[
name|outputBytes
index|]
argument_list|)
expr_stmt|;
name|outputBytes
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outputBytes
operator|==
name|reference
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

