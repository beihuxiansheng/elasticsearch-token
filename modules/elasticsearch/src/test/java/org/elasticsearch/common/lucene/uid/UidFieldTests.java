begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.uid
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|UidFieldTests
specifier|public
class|class
name|UidFieldTests
block|{
DECL|method|testUidField
annotation|@
name|Test
specifier|public
name|void
name|testUidField
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
operator|new
name|RAMDirectory
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|UNLIMITED
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|UidField
operator|.
name|loadVersion
argument_list|(
name|reader
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|UidField
operator|.
name|loadVersion
argument_list|(
name|reader
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|UidField
operator|.
name|loadDocIdAndVersion
argument_list|(
name|reader
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|UidField
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|UidField
operator|.
name|loadVersion
argument_list|(
name|reader
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|UidField
operator|.
name|loadDocIdAndVersion
argument_list|(
name|reader
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|UidField
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|UidField
operator|.
name|loadVersion
argument_list|(
name|reader
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|UidField
operator|.
name|loadDocIdAndVersion
argument_list|(
name|reader
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

