begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|AbstractSimpleTransportTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Test
DECL|class|SimpleNettyTransportTests
specifier|public
class|class
name|SimpleNettyTransportTests
extends|extends
name|AbstractSimpleTransportTests
block|{
DECL|method|build
annotation|@
name|Override
specifier|protected
name|void
name|build
parameter_list|()
block|{
name|serviceA
operator|=
operator|new
name|TransportService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"A"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|NettyTransport
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"A"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|threadPool
argument_list|)
argument_list|,
name|threadPool
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|serviceANode
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"A"
argument_list|,
name|serviceA
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|)
expr_stmt|;
name|serviceB
operator|=
operator|new
name|TransportService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"B"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|NettyTransport
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"B"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|threadPool
argument_list|)
argument_list|,
name|threadPool
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|serviceBNode
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"B"
argument_list|,
name|serviceB
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testVoidMessageCompressed
annotation|@
name|Override
specifier|public
name|void
name|testVoidMessageCompressed
parameter_list|()
block|{
name|super
operator|.
name|testVoidMessageCompressed
argument_list|()
expr_stmt|;
comment|//To change body of overridden methods use File | Settings | File Templates.
block|}
DECL|method|testConnectException
annotation|@
name|Test
specifier|public
name|void
name|testConnectException
parameter_list|()
block|{
try|try
block|{
name|serviceA
operator|.
name|connectToNode
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"C"
argument_list|,
operator|new
name|InetSocketTransportAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|9876
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
name|e
parameter_list|)
block|{
comment|//            e.printStackTrace();
comment|// all is well
block|}
block|}
block|}
end_class

end_unit

