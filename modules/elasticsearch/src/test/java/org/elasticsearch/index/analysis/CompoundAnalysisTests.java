begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|all
operator|.
name|AllEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|all
operator|.
name|AllTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModulesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNameModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|compound
operator|.
name|DictionaryCompoundWordTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author Edward Dale (scompt@scompt.com)  */
end_comment

begin_class
DECL|class|CompoundAnalysisTests
specifier|public
class|class
name|CompoundAnalysisTests
block|{
DECL|method|generateWordList
specifier|private
name|File
name|generateWordList
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|wordListFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"wordlist"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|wordListFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|BufferedWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|wordListFile
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"donau\ndampf\nschiff\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"spargel\ncreme\nsuppe"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|wordListFile
return|;
block|}
DECL|method|generateSettings
specifier|private
name|Settings
name|generateSettings
parameter_list|(
name|File
name|wordListFile
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|settingsStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"index : \n"
argument_list|)
expr_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"  analysis :\n"
argument_list|)
expr_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"    analyzer :\n"
argument_list|)
expr_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"      myAnalyzer2 :\n"
argument_list|)
expr_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"        tokenizer : standard\n"
argument_list|)
expr_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"        filter : [dict_dec, standard, lowercase, stop]\n"
argument_list|)
expr_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"    filter :\n"
argument_list|)
expr_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"      dict_dec :\n"
argument_list|)
expr_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"        type : dictionary_decompounder\n"
argument_list|)
expr_stmt|;
name|settingsStr
operator|.
name|append
argument_list|(
literal|"        word_list_path : "
argument_list|)
operator|.
name|append
argument_list|(
name|wordListFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
return|return
name|settingsBuilder
argument_list|()
operator|.
name|loadFromSource
argument_list|(
name|settingsStr
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testDefaultsCompoundAnalysis
annotation|@
name|Test
specifier|public
name|void
name|testDefaultsCompoundAnalysis
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|generateSettings
argument_list|(
name|generateWordList
argument_list|()
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
operator|new
name|ModulesBuilder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|IndexSettingsModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|IndexNameModule
argument_list|(
name|index
argument_list|)
argument_list|,
operator|new
name|AnalysisModule
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|createInjector
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|AnalysisService
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"dict_dec"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|filterFactory
argument_list|,
name|instanceOf
argument_list|(
name|DictionaryCompoundWordTokenFilterFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDictionaryDecompounder
annotation|@
name|Test
specifier|public
name|void
name|testDictionaryDecompounder
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|generateSettings
argument_list|(
name|generateWordList
argument_list|()
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
operator|new
name|ModulesBuilder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|IndexSettingsModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|IndexNameModule
argument_list|(
name|index
argument_list|)
argument_list|,
operator|new
name|AnalysisModule
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|createInjector
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|AnalysisService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|analysisService
operator|.
name|analyzer
argument_list|(
literal|"myAnalyzer2"
argument_list|)
operator|.
name|analyzer
argument_list|()
decl_stmt|;
name|AllEntries
name|allEntries
init|=
operator|new
name|AllEntries
argument_list|()
decl_stmt|;
name|allEntries
operator|.
name|addText
argument_list|(
literal|"field1"
argument_list|,
literal|"donaudampfschiff"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|allEntries
operator|.
name|addText
argument_list|(
literal|"field2"
argument_list|,
literal|"spargelcremesuppe"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|allEntries
operator|.
name|reset
argument_list|()
expr_stmt|;
name|TokenStream
name|stream
init|=
name|AllTokenStream
operator|.
name|allTokenStream
argument_list|(
literal|"_all"
argument_list|,
name|allEntries
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|TermAttribute
name|termAtt
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|tokText
init|=
name|termAtt
operator|.
name|term
argument_list|()
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
name|tokText
argument_list|)
expr_stmt|;
block|}
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|terms
argument_list|,
name|hasItems
argument_list|(
literal|"donau"
argument_list|,
literal|"dampf"
argument_list|,
literal|"schiff"
argument_list|,
literal|"donaudampfschiff"
argument_list|,
literal|"spargel"
argument_list|,
literal|"creme"
argument_list|,
literal|"suppe"
argument_list|,
literal|"spargelcremesuppe"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

