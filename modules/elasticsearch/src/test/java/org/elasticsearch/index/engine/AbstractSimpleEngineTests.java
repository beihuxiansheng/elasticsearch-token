begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|KeepOnlyLastDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|LogByteSizeMergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|SerialMergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|ram
operator|.
name|RamStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|memory
operator|.
name|MemoryTranslog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommitExistsMatcher
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineSearcherTotalHitsMatcher
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogSizeMatcher
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lucene
operator|.
name|DocumentBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|AbstractSimpleEngineTests
specifier|public
specifier|abstract
class|class
name|AbstractSimpleEngineTests
block|{
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|store
specifier|private
name|Store
name|store
decl_stmt|;
DECL|field|engine
specifier|private
name|Engine
name|engine
decl_stmt|;
DECL|method|setUp
annotation|@
name|BeforeMethod
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|=
name|createStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|deleteContent
argument_list|()
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|engine
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
annotation|@
name|AfterMethod
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createStore
specifier|protected
name|Store
name|createStore
parameter_list|()
block|{
return|return
operator|new
name|RamStore
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
return|;
block|}
DECL|method|createTranslog
specifier|protected
name|Translog
name|createTranslog
parameter_list|()
block|{
return|return
operator|new
name|MemoryTranslog
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
return|;
block|}
DECL|method|createIndexDeletionPolicy
specifier|protected
name|IndexDeletionPolicy
name|createIndexDeletionPolicy
parameter_list|()
block|{
return|return
operator|new
name|KeepOnlyLastDeletionPolicy
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
return|;
block|}
DECL|method|createSnapshotDeletionPolicy
specifier|protected
name|SnapshotDeletionPolicy
name|createSnapshotDeletionPolicy
parameter_list|()
block|{
return|return
operator|new
name|SnapshotDeletionPolicy
argument_list|(
name|createIndexDeletionPolicy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createMergePolicy
specifier|protected
name|MergePolicyProvider
name|createMergePolicy
parameter_list|()
block|{
return|return
operator|new
name|LogByteSizeMergePolicyProvider
argument_list|(
name|store
argument_list|)
return|;
block|}
DECL|method|createMergeScheduler
specifier|protected
name|MergeSchedulerProvider
name|createMergeScheduler
parameter_list|()
block|{
return|return
operator|new
name|SerialMergeSchedulerProvider
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
return|;
block|}
DECL|method|createEngine
specifier|protected
specifier|abstract
name|Engine
name|createEngine
parameter_list|(
name|Store
name|store
parameter_list|)
function_decl|;
DECL|method|testSimpleOperations
annotation|@
name|Test
specifier|public
name|void
name|testSimpleOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Searcher
name|searchResult
init|=
name|engine
operator|.
name|searcher
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// create a document
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// now do an update
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not updated yet...
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be updated
name|engine
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// now delete
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not deleted yet
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be deleted
name|engine
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// add it back
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// now flush
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// make sure we can still work with the engine
comment|// now do an update
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not updated yet...
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be updated
name|engine
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// TODO check that operations on engine will throw an EngineAlreadyClosed exception (and while you are at it, create the exception as well)
comment|// now create a new engine, it should see the flushed changes
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|engine
operator|.
name|start
argument_list|()
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testSearchResultRelease
annotation|@
name|Test
specifier|public
name|void
name|testSearchResultRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Searcher
name|searchResult
init|=
name|engine
operator|.
name|searcher
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// create a document
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't release the search result yet...
comment|// delete, refresh and do a new search, it should not be there
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|updateSearchResult
init|=
name|engine
operator|.
name|searcher
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updateSearchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|updateSearchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// the non release search result should not see the deleted yet...
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleSnapshot
annotation|@
name|Test
specifier|public
name|void
name|testSimpleSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a document
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|engine
operator|.
name|snapshot
argument_list|(
operator|new
name|Engine
operator|.
name|SnapshotHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
specifier|final
name|SnapshotIndexCommit
name|snapshotIndexCommit1
parameter_list|,
specifier|final
name|Translog
operator|.
name|Snapshot
name|translogSnapshot1
parameter_list|)
block|{
name|assertThat
argument_list|(
name|snapshotIndexCommit1
argument_list|,
name|snapshotIndexCommitExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translogSnapshot1
argument_list|,
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create1
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|translogSnapshot1
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create1
operator|.
name|source
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|,
literal|"{2}"
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"3"
argument_list|,
literal|"{3}"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|snapshotIndexCommit1
argument_list|,
name|snapshotIndexCommitExists
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|snapshot
argument_list|(
operator|new
name|Engine
operator|.
name|SnapshotHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
name|SnapshotIndexCommit
name|snapshotIndexCommit2
parameter_list|,
name|Translog
operator|.
name|Snapshot
name|translogSnapshot2
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshotIndexCommit1
argument_list|,
name|snapshotIndexCommitExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshotIndexCommit2
argument_list|,
name|snapshotIndexCommitExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshotIndexCommit2
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|snapshotIndexCommit1
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translogSnapshot2
argument_list|,
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create3
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|translogSnapshot2
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create3
operator|.
name|source
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{3}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleRecover
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRecover
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|engine
operator|.
name|recover
argument_list|(
operator|new
name|Engine
operator|.
name|RecoveryHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|phase1
parameter_list|(
name|SnapshotIndexCommit
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
block|{
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"flush is not allowed in phase 3"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FlushNotAllowedEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase2
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"flush is not allowed in phase 3"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FlushNotAllowedEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase3
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// we can do this here since we are on the same thread
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"flush is not allowed in phase 3"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FlushNotAllowedEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRecoverWithOperationsBetweenPhase1AndPhase2
annotation|@
name|Test
specifier|public
name|void
name|testRecoverWithOperationsBetweenPhase1AndPhase2
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|,
literal|"{2}"
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recover
argument_list|(
operator|new
name|Engine
operator|.
name|RecoveryHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|phase1
parameter_list|(
name|SnapshotIndexCommit
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|phase2
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|snapshot
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|source
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{2}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase3
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRecoverWithOperationsBetweenPhase1AndPhase2AndPhase3
annotation|@
name|Test
specifier|public
name|void
name|testRecoverWithOperationsBetweenPhase1AndPhase2AndPhase3
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{1}"
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|,
literal|"{2}"
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recover
argument_list|(
operator|new
name|Engine
operator|.
name|RecoveryHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|phase1
parameter_list|(
name|SnapshotIndexCommit
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|phase2
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|snapshot
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|source
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{2}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add for phase3
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"_uid"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
literal|"test"
argument_list|,
literal|"3"
argument_list|,
literal|"{3}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase3
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|snapshot
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|source
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{3}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|newUid
specifier|private
name|Term
name|newUid
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
end_class

end_unit

