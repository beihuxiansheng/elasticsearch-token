begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|query
operator|.
name|parser
operator|.
name|QueryParserCacheModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModulesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|BoostScoreFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNameModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|IndexCacheModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|IndexEngineModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperServiceModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParserModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParserService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|ParsedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|GeoBoundingBoxFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|GeoDistanceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|GeoPolygonFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|xcontent
operator|.
name|FilterBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|xcontent
operator|.
name|QueryBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
annotation|@
name|Test
DECL|class|SimpleIndexQueryParserTests
specifier|public
class|class
name|SimpleIndexQueryParserTests
block|{
DECL|field|queryParser
specifier|private
name|IndexQueryParserService
name|queryParser
decl_stmt|;
DECL|method|setupQueryParser
annotation|@
name|BeforeClass
specifier|public
name|void
name|setupQueryParser
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.cache.filter.type"
argument_list|,
literal|"none"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
operator|new
name|ModulesBuilder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SettingsModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|QueryParserCacheModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|ScriptModule
argument_list|()
argument_list|,
operator|new
name|MapperServiceModule
argument_list|()
argument_list|,
operator|new
name|IndexSettingsModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|IndexCacheModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|AnalysisModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|IndexEngineModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|SimilarityModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|IndexQueryParserModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|IndexNameModule
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|createInjector
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/mapping.json"
argument_list|)
decl_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|MapperService
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"person"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|MapperService
operator|.
name|class
argument_list|)
operator|.
name|type
argument_list|(
literal|"person"
argument_list|)
operator|.
name|parse
argument_list|(
name|copyToBytesFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/data.json"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryParser
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|IndexQueryParserService
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|queryParser
specifier|private
name|XContentIndexQueryParser
name|queryParser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|XContentIndexQueryParser
operator|)
name|this
operator|.
name|queryParser
operator|.
name|defaultIndexQueryParser
argument_list|()
return|;
block|}
DECL|method|testQueryStringBuilder
annotation|@
name|Test
specifier|public
name|void
name|testQueryStringBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|(
literal|"test"
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"content"
argument_list|)
operator|.
name|phraseSlop
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery
init|=
operator|(
name|TermQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryString
annotation|@
name|Test
specifier|public
name|void
name|testQueryString
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery
init|=
operator|(
name|TermQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryStringFields1Builder
annotation|@
name|Test
specifier|public
name|void
name|testQueryStringFields1Builder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryStringFields1
annotation|@
name|Test
specifier|public
name|void
name|testQueryStringFields1
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/query-fields1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryStringFields2Builder
annotation|@
name|Test
specifier|public
name|void
name|testQueryStringFields2Builder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|Queries
operator|.
name|disMaxClauses
argument_list|(
name|disMaxQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryStringFields2
annotation|@
name|Test
specifier|public
name|void
name|testQueryStringFields2
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/query-fields2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|Queries
operator|.
name|disMaxClauses
argument_list|(
name|disMaxQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryStringFields3Builder
annotation|@
name|Test
specifier|public
name|void
name|testQueryStringFields3Builder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|,
literal|2.2f
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|Queries
operator|.
name|disMaxClauses
argument_list|(
name|disMaxQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryStringFields3
annotation|@
name|Test
specifier|public
name|void
name|testQueryStringFields3
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/query-fields3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|Queries
operator|.
name|disMaxClauses
argument_list|(
name|disMaxQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchAllBuilder
annotation|@
name|Test
specifier|public
name|void
name|testMatchAllBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|matchAllQuery
argument_list|()
operator|.
name|boost
argument_list|(
literal|1.2f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MatchAllDocsQuery
name|matchAllDocsQuery
init|=
operator|(
name|MatchAllDocsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|matchAllDocsQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchAll
annotation|@
name|Test
specifier|public
name|void
name|testMatchAll
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/matchAll.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MatchAllDocsQuery
name|matchAllDocsQuery
init|=
operator|(
name|MatchAllDocsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|matchAllDocsQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisMaxBuilder
annotation|@
name|Test
specifier|public
name|void
name|testDisMaxBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|disMaxQuery
argument_list|()
operator|.
name|boost
argument_list|(
literal|1.2f
argument_list|)
operator|.
name|tieBreaker
argument_list|(
literal|0.7f
argument_list|)
operator|.
name|add
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjunctionMaxQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|Queries
operator|.
name|disMaxClauses
argument_list|(
name|disjunctionMaxQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|disjuncts
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|firstQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|firstQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|firstQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|secondsQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondsQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|secondsQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisMax
annotation|@
name|Test
specifier|public
name|void
name|testDisMax
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/disMax.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjunctionMaxQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|Queries
operator|.
name|disMaxClauses
argument_list|(
name|disjunctionMaxQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|disjuncts
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|firstQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|firstQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|firstQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|secondsQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondsQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|secondsQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testTermQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermQuery
annotation|@
name|Test
specifier|public
name|void
name|testTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/term.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFuzzyQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testFuzzyQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFuzzyQuery
annotation|@
name|Test
specifier|public
name|void
name|testFuzzyQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/fuzzy.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFuzzyQueryWithFieldsBuilder
annotation|@
name|Test
specifier|public
name|void
name|testFuzzyQueryWithFieldsBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
operator|.
name|minSimilarity
argument_list|(
literal|0.1f
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|1
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMinSimilarity
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getPrefixLength
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFuzzyQueryWithFields
annotation|@
name|Test
specifier|public
name|void
name|testFuzzyQueryWithFields
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/fuzzy-with-fields.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMinSimilarity
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getPrefixLength
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldQueryBuilder1
annotation|@
name|Test
specifier|public
name|void
name|testFieldQueryBuilder1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fieldQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldQuery1
annotation|@
name|Test
specifier|public
name|void
name|testFieldQuery1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/field1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldQuery2
annotation|@
name|Test
specifier|public
name|void
name|testFieldQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/field2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|bQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|bQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"12-54-23"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|bQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|bQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"else"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldQuery3
annotation|@
name|Test
specifier|public
name|void
name|testFieldQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/field3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermWithBoostQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testTermWithBoostQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|fieldQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermWithBoostQuery
annotation|@
name|Test
specifier|public
name|void
name|testTermWithBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/term-with-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|fieldQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testPrefixQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|prefixQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixQuery
annotation|@
name|Test
specifier|public
name|void
name|testPrefixQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/prefix.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixFilteredQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testPrefixFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filtered
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|prefixFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testPrefixFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/prefix-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixNamedFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testPrefixNamedFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/prefix-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixQueryBoostQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testPrefixQueryBoostQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|prefixQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|prefixQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixQueryBoostQuery
annotation|@
name|Test
specifier|public
name|void
name|testPrefixQueryBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/prefix-with-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|prefixQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWildcardQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testWildcardQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|wildcardQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWildcardQuery
annotation|@
name|Test
specifier|public
name|void
name|testWildcardQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/wildcard.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testRangeQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|rangeQuery
argument_list|(
literal|"age"
argument_list|)
operator|.
name|from
argument_list|(
literal|23
argument_list|)
operator|.
name|to
argument_list|(
literal|54
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|includeUpper
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|rangeQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQuery
annotation|@
name|Test
specifier|public
name|void
name|testRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/range.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|rangeQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRange2Query
annotation|@
name|Test
specifier|public
name|void
name|testRange2Query
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/range2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|rangeQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeFilteredQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testRangeFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filtered
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|rangeFilter
argument_list|(
literal|"age"
argument_list|)
operator|.
name|from
argument_list|(
literal|23
argument_list|)
operator|.
name|to
argument_list|(
literal|54
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|includeUpper
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeFilter
name|rangeFilter
init|=
operator|(
name|NumericRangeFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testRangeFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/range-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeFilter
name|rangeFilter
init|=
operator|(
name|NumericRangeFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeNamedFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testRangeNamedFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/range-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeFilter
name|rangeFilter
init|=
operator|(
name|NumericRangeFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoolFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testBoolFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/bool-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|XBooleanFilter
name|booleanFilter
init|=
operator|(
name|XBooleanFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
comment|// TODO get the content and test
block|}
DECL|method|testAndFilteredQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testAndFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filtered
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|andFilter
argument_list|(
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|,
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|AndFilter
name|andFilter
init|=
operator|(
name|AndFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAndFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testAndFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/and-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|AndFilter
name|andFilter
init|=
operator|(
name|AndFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAndNamedFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testAndNamedFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/and-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|AndFilter
name|andFilter
init|=
operator|(
name|AndFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAndFilteredQuery2
annotation|@
name|Test
specifier|public
name|void
name|testAndFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/and-filter2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|AndFilter
name|andFilter
init|=
operator|(
name|AndFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrFilteredQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testOrFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filtered
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|orFilter
argument_list|(
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|,
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|OrFilter
name|andFilter
init|=
operator|(
name|OrFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testOrFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/or-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|OrFilter
name|orFilter
init|=
operator|(
name|OrFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrFilteredQuery2
annotation|@
name|Test
specifier|public
name|void
name|testOrFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/or-filter2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|OrFilter
name|orFilter
init|=
operator|(
name|OrFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotFilteredQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testNotFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filtered
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|notFilter
argument_list|(
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|NotFilter
name|notFilter
init|=
operator|(
name|NotFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|notFilter
operator|.
name|filter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testNotFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/not-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|NotFilter
name|notFilter
init|=
operator|(
name|NotFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|notFilter
operator|.
name|filter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoolQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testBoolQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test4"
argument_list|)
argument_list|)
operator|.
name|mustNot
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|2
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|2
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|3
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|3
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoolQuery
annotation|@
name|Test
specifier|public
name|void
name|testBoolQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/bool.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|2
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|2
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|3
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|3
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilteredQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filtered
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|termFilter
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilteredQuery
annotation|@
name|Test
specifier|public
name|void
name|testFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/filtered-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilteredQuery2
annotation|@
name|Test
specifier|public
name|void
name|testFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/filtered-query2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilteredQuery3
annotation|@
name|Test
specifier|public
name|void
name|testFilteredQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/filtered-query3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeFilter
name|rangeFilter
init|=
operator|(
name|NumericRangeFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilteredQuery4
annotation|@
name|Test
specifier|public
name|void
name|testFilteredQuery4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/filtered-query4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|wildcardQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.1
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermFilterQuery
annotation|@
name|Test
specifier|public
name|void
name|testTermFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/term-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermFilter
name|termFilter
init|=
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termFilter
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.last"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termFilter
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"banon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermNamedFilterQuery
annotation|@
name|Test
specifier|public
name|void
name|testTermNamedFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/term-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermFilter
name|termFilter
init|=
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termFilter
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.last"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termFilter
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"banon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermsFilterQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testTermsFilterQueryBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filtered
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|termsFilter
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|,
literal|"kimchy"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermsFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermsFilter
name|termsFilter
init|=
operator|(
name|TermsFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|TermsFilter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|(
name|Set
argument_list|<
name|Term
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|termsFilter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"banon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermsFilterQuery
annotation|@
name|Test
specifier|public
name|void
name|testTermsFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/terms-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermsFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermsFilter
name|termsFilter
init|=
operator|(
name|TermsFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|TermsFilter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|(
name|Set
argument_list|<
name|Term
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|termsFilter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"banon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermsWithNameFilterQuery
annotation|@
name|Test
specifier|public
name|void
name|testTermsWithNameFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/terms-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermsFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermsFilter
name|termsFilter
init|=
operator|(
name|TermsFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|TermsFilter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|(
name|Set
argument_list|<
name|Term
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|termsFilter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"banon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstantScoreQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testConstantScoreQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|constantScoreQuery
argument_list|(
name|termFilter
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstantScoreQuery
annotation|@
name|Test
specifier|public
name|void
name|testConstantScoreQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/constantScore-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Disabled since we need a current context to execute it...
comment|//    @Test public void testCustomScoreQuery1() throws IOException {
comment|//        IndexQueryParser queryParser = queryParser();
comment|//        String query = copyToStringFromClasspath("/org/elasticsearch/index/query/xcontent/custom_score1.json");
comment|//        Query parsedQuery = queryParser.parse(query).query();
comment|//        assertThat(parsedQuery, instanceOf(FunctionScoreQuery.class));
comment|//        FunctionScoreQuery functionScoreQuery = (FunctionScoreQuery) parsedQuery;
comment|//        assertThat(((TermQuery) functionScoreQuery.getSubQuery()).getTerm(), equalTo(new Term("name.last", "banon")));
comment|//        assertThat(functionScoreQuery.getFunction(), instanceOf(CustomScoreQueryParser.ScriptScoreFunction.class));
comment|//    }
DECL|method|testCustomBoostFactorQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testCustomBoostFactorQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|customBoostFactorQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
operator|.
name|boostFactor
argument_list|(
literal|1.3f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|functionScoreQuery
operator|.
name|getSubQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
operator|(
name|BoostScoreFunction
operator|)
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.3
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCustomBoostFactorQuery
annotation|@
name|Test
specifier|public
name|void
name|testCustomBoostFactorQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/custom-boost-factor-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|functionScoreQuery
operator|.
name|getSubQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
operator|(
name|BoostScoreFunction
operator|)
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.3
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanTermQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testSpanTermQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanTermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanTermQuery
name|termQuery
init|=
operator|(
name|SpanTermQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanTermQuery
annotation|@
name|Test
specifier|public
name|void
name|testSpanTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/spanTerm.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanTermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanTermQuery
name|termQuery
init|=
operator|(
name|SpanTermQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNotQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testSpanNotQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanNotQuery
argument_list|()
operator|.
name|include
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNotQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNotQuery
name|spanNotQuery
init|=
operator|(
name|SpanNotQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getInclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getExclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNotQuery
annotation|@
name|Test
specifier|public
name|void
name|testSpanNotQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/spanNot.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNotQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNotQuery
name|spanNotQuery
init|=
operator|(
name|SpanNotQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getInclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getExclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanFirstQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testSpanFirstQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanFirstQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|,
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanFirstQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanFirstQuery
name|spanFirstQuery
init|=
operator|(
name|SpanFirstQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanFirstQuery
operator|.
name|getMatch
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanFirstQuery
operator|.
name|getEnd
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanFirstQuery
annotation|@
name|Test
specifier|public
name|void
name|testSpanFirstQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/spanFirst.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanFirstQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanFirstQuery
name|spanFirstQuery
init|=
operator|(
name|SpanFirstQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanFirstQuery
operator|.
name|getMatch
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanFirstQuery
operator|.
name|getEnd
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testSpanNearQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanNearQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|36
argument_list|)
argument_list|)
operator|.
name|slop
argument_list|(
literal|12
argument_list|)
operator|.
name|inOrder
argument_list|(
literal|false
argument_list|)
operator|.
name|collectPayloads
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNearQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|(
name|SpanNearQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|isInOrder
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearQuery
annotation|@
name|Test
specifier|public
name|void
name|testSpanNearQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/spanNear.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNearQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|(
name|SpanNearQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|isInOrder
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanOrQueryBuilder
annotation|@
name|Test
specifier|public
name|void
name|testSpanOrQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanOrQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|36
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanOrQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|(
name|SpanOrQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanOrQuery
annotation|@
name|Test
specifier|public
name|void
name|testSpanOrQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/spanOr.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanOrQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|(
name|SpanOrQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryFilterBuilder
annotation|@
name|Test
specifier|public
name|void
name|testQueryFilterBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filtered
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|queryFilter
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|QueryWrapperFilter
name|queryWrapperFilter
init|=
operator|(
name|QueryWrapperFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|QueryWrapperFilter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Query
name|wrappedQuery
init|=
operator|(
name|Query
operator|)
name|field
operator|.
name|get
argument_list|(
name|queryWrapperFilter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|wrappedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|wrappedQuery
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryFilter
annotation|@
name|Test
specifier|public
name|void
name|testQueryFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/query-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|QueryWrapperFilter
name|queryWrapperFilter
init|=
operator|(
name|QueryWrapperFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|QueryWrapperFilter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Query
name|wrappedQuery
init|=
operator|(
name|Query
operator|)
name|field
operator|.
name|get
argument_list|(
name|queryWrapperFilter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|wrappedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|wrappedQuery
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFQueryFilter
annotation|@
name|Test
specifier|public
name|void
name|testFQueryFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/fquery-filter.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|QueryWrapperFilter
name|queryWrapperFilter
init|=
operator|(
name|QueryWrapperFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|QueryWrapperFilter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Query
name|wrappedQuery
init|=
operator|(
name|Query
operator|)
name|field
operator|.
name|get
argument_list|(
name|queryWrapperFilter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|wrappedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|wrappedQuery
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMoreLikeThisBuilder
annotation|@
name|Test
specifier|public
name|void
name|testMoreLikeThisBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|moreLikeThisQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"name.last"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|minTermFreq
argument_list|(
literal|1
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMoreLikeThis
annotation|@
name|Test
specifier|public
name|void
name|testMoreLikeThis
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/mlt.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.last"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFuzzyLikeThisBuilder
annotation|@
name|Test
specifier|public
name|void
name|testFuzzyLikeThisBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyLikeThisQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"name.last"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        FuzzyLikeThisQuery fuzzyLikeThisQuery = (FuzzyLikeThisQuery) parsedQuery;
block|}
DECL|method|testFuzzyLikeThis
annotation|@
name|Test
specifier|public
name|void
name|testFuzzyLikeThis
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/fuzzyLikeThis.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        FuzzyLikeThisQuery fuzzyLikeThisQuery = (FuzzyLikeThisQuery) parsedQuery;
block|}
DECL|method|testFuzzyLikeFieldThisBuilder
annotation|@
name|Test
specifier|public
name|void
name|testFuzzyLikeFieldThisBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyLikeThisFieldQuery
argument_list|(
literal|"name.first"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        FuzzyLikeThisQuery fuzzyLikeThisQuery = (FuzzyLikeThisQuery) parsedQuery;
block|}
DECL|method|testFuzzyLikeThisField
annotation|@
name|Test
specifier|public
name|void
name|testFuzzyLikeThisField
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/fuzzyLikeThisField.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        FuzzyLikeThisQuery fuzzyLikeThisQuery = (FuzzyLikeThisQuery) parsedQuery;
block|}
DECL|method|testMoreLikeThisFieldBuilder
annotation|@
name|Test
specifier|public
name|void
name|testMoreLikeThisFieldBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|moreLikeThisFieldQuery
argument_list|(
literal|"name.first"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|minTermFreq
argument_list|(
literal|1
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMoreLikeThisField
annotation|@
name|Test
specifier|public
name|void
name|testMoreLikeThisField
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/mltField.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoDistanceFilterNamed
annotation|@
name|Test
specifier|public
name|void
name|testGeoDistanceFilterNamed
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_distance-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|12
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoDistanceFilter1
annotation|@
name|Test
specifier|public
name|void
name|testGeoDistanceFilter1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_distance1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|12
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoDistanceFilter2
annotation|@
name|Test
specifier|public
name|void
name|testGeoDistanceFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_distance2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|12
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoDistanceFilter3
annotation|@
name|Test
specifier|public
name|void
name|testGeoDistanceFilter3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_distance3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|12
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoDistanceFilter4
annotation|@
name|Test
specifier|public
name|void
name|testGeoDistanceFilter4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_distance4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|12
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoBoundingBoxFilterNamed
annotation|@
name|Test
specifier|public
name|void
name|testGeoBoundingBoxFilterNamed
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_boundingbox-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|GeoBoundingBoxFilter
name|filter
init|=
operator|(
name|GeoBoundingBoxFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoBoundingBoxFilter1
annotation|@
name|Test
specifier|public
name|void
name|testGeoBoundingBoxFilter1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_boundingbox1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoBoundingBoxFilter
name|filter
init|=
operator|(
name|GeoBoundingBoxFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoBoundingBoxFilter2
annotation|@
name|Test
specifier|public
name|void
name|testGeoBoundingBoxFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_boundingbox2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoBoundingBoxFilter
name|filter
init|=
operator|(
name|GeoBoundingBoxFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoBoundingBoxFilter3
annotation|@
name|Test
specifier|public
name|void
name|testGeoBoundingBoxFilter3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_boundingbox3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoBoundingBoxFilter
name|filter
init|=
operator|(
name|GeoBoundingBoxFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoBoundingBoxFilter4
annotation|@
name|Test
specifier|public
name|void
name|testGeoBoundingBoxFilter4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_boundingbox4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoBoundingBoxFilter
name|filter
init|=
operator|(
name|GeoBoundingBoxFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoPolygonNamedFilter
annotation|@
name|Test
specifier|public
name|void
name|testGeoPolygonNamedFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_polygon-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoPolygonFilter1
annotation|@
name|Test
specifier|public
name|void
name|testGeoPolygonFilter1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_polygon1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoPolygonFilter2
annotation|@
name|Test
specifier|public
name|void
name|testGeoPolygonFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_polygon2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoPolygonFilter3
annotation|@
name|Test
specifier|public
name|void
name|testGeoPolygonFilter3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_polygon3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoPolygonFilter4
annotation|@
name|Test
specifier|public
name|void
name|testGeoPolygonFilter4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/xcontent/geo_polygon4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filteredQuery
init|=
operator|(
name|FilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

