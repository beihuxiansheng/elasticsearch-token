begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|Streams
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Streams}.  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|StreamsTests
specifier|public
class|class
name|StreamsTests
block|{
DECL|method|testCopyFromInputStream
annotation|@
name|Test
specifier|public
name|void
name|testCopyFromInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|content
init|=
literal|"content"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|content
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|equalTo
argument_list|(
name|content
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|content
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyFromByteArray
annotation|@
name|Test
specifier|public
name|void
name|testCopyFromByteArray
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|content
init|=
literal|"content"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|content
operator|.
name|length
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|content
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|content
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyToByteArray
annotation|@
name|Test
specifier|public
name|void
name|testCopyToByteArray
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|content
init|=
literal|"content"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
name|copyToByteArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|content
argument_list|,
name|result
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyFromReader
annotation|@
name|Test
specifier|public
name|void
name|testCopyFromReader
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|content
init|=
literal|"content"
decl_stmt|;
name|StringReader
name|in
init|=
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|content
operator|.
name|length
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyFromString
annotation|@
name|Test
specifier|public
name|void
name|testCopyFromString
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|content
init|=
literal|"content"
decl_stmt|;
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|content
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyToString
annotation|@
name|Test
specifier|public
name|void
name|testCopyToString
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|content
init|=
literal|"content"
decl_stmt|;
name|StringReader
name|in
init|=
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|copyToString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|equalTo
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

