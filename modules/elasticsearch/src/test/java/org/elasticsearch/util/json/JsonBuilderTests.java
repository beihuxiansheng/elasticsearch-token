begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.json
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|FastCharArrayWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|Jackson
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
annotation|@
name|Test
DECL|class|JsonBuilderTests
specifier|public
class|class
name|JsonBuilderTests
block|{
DECL|method|verifyReuseJsonGenerator
annotation|@
name|Test
specifier|public
name|void
name|verifyReuseJsonGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|FastCharArrayWriter
name|writer
init|=
operator|new
name|FastCharArrayWriter
argument_list|()
decl_stmt|;
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerator
name|generator
init|=
name|Jackson
operator|.
name|defaultJsonFactory
argument_list|()
operator|.
name|createJsonGenerator
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|writer
operator|.
name|toStringTrim
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"test\":\"value\"}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try again...
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// we get a space at the start here since it thinks we are not in the root object (fine, we will ignore it in the real code we use)
name|assertThat
argument_list|(
name|writer
operator|.
name|toStringTrim
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"test\":\"value\"}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleJacksonGenerator
annotation|@
name|Test
specifier|public
name|void
name|testSimpleJacksonGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|StringJsonBuilder
name|builder
init|=
name|JsonBuilder
operator|.
name|stringJsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"test\":\"value\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|reset
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"test\":\"value\"}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWritingBinaryToStream
annotation|@
name|Test
specifier|public
name|void
name|testWritingBinaryToStream
parameter_list|()
throws|throws
name|Exception
block|{
name|FastByteArrayOutputStream
name|bos
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|()
decl_stmt|;
name|JsonGenerator
name|gen
init|=
name|Jackson
operator|.
name|defaultJsonFactory
argument_list|()
operator|.
name|createJsonGenerator
argument_list|(
name|bos
argument_list|,
name|JsonEncoding
operator|.
name|UTF8
argument_list|)
decl_stmt|;
name|gen
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|gen
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
literal|"something"
argument_list|)
expr_stmt|;
name|gen
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|", source : { test : \"value\" }"
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|writeStringField
argument_list|(
literal|"name2"
argument_list|,
literal|"something2"
argument_list|)
expr_stmt|;
name|gen
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|gen
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|bos
operator|.
name|copiedByteArray
argument_list|()
decl_stmt|;
name|String
name|sData
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|"UTF8"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DATA: "
operator|+
name|sData
argument_list|)
expr_stmt|;
name|JsonNode
name|node
init|=
name|Jackson
operator|.
name|newObjectMapper
argument_list|()
operator|.
name|readValue
argument_list|(
operator|new
name|FastByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|get
argument_list|(
literal|"source"
argument_list|)
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getTextValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDatesObjectMapper
annotation|@
name|Test
specifier|public
name|void
name|testDatesObjectMapper
parameter_list|()
throws|throws
name|Exception
block|{
name|Date
name|date
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|DateTime
name|dateTime
init|=
operator|new
name|DateTime
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|MapBuilder
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|newMapBuilder
argument_list|()
decl|.
name|put
argument_list|(
literal|"date"
argument_list|,
name|date
argument_list|)
decl|.
name|put
argument_list|(
literal|"dateTime"
argument_list|,
name|dateTime
argument_list|)
decl|.
name|map
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Data: "
operator|+
name|defaultObjectMapper
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

