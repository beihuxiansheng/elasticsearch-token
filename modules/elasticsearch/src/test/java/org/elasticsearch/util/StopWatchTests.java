begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test for {@link StopWatch}.  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|StopWatchTests
specifier|public
class|class
name|StopWatchTests
block|{
comment|/**      * Are timings off in JUnit?      */
DECL|method|testValidUsage
annotation|@
name|Test
specifier|public
name|void
name|testValidUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|long
name|int1
init|=
literal|166L
decl_stmt|;
name|long
name|int2
init|=
literal|45L
decl_stmt|;
name|String
name|name1
init|=
literal|"Task 1"
decl_stmt|;
name|String
name|name2
init|=
literal|"Task 2"
decl_stmt|;
name|long
name|fudgeFactor
init|=
literal|5L
decl_stmt|;
name|assertThat
argument_list|(
name|sw
operator|.
name|isRunning
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|sw
operator|.
name|start
argument_list|(
name|name1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|int1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sw
operator|.
name|isRunning
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// TODO are timings off in JUnit? Why do these assertions sometimes fail
comment|// under both Ant and Eclipse?
comment|//assertTrue("Unexpected timing " + sw.getTotalTime(), sw.getTotalTime()>= int1);
comment|//assertTrue("Unexpected timing " + sw.getTotalTime(), sw.getTotalTime()<= int1 + fudgeFactor);
name|sw
operator|.
name|start
argument_list|(
name|name2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|int2
argument_list|)
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//assertTrue("Unexpected timing " + sw.getTotalTime(), sw.getTotalTime()>= int1 + int2);
comment|//assertTrue("Unexpected timing " + sw.getTotalTime(), sw.getTotalTime()<= int1 + int2 + fudgeFactor);
name|assertThat
argument_list|(
name|sw
operator|.
name|taskCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pp
init|=
name|sw
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|pp
operator|.
name|indexOf
argument_list|(
name|name1
argument_list|)
operator|!=
operator|-
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pp
operator|.
name|indexOf
argument_list|(
name|name2
argument_list|)
operator|!=
operator|-
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|StopWatch
operator|.
name|TaskInfo
index|[]
name|tasks
init|=
name|sw
operator|.
name|taskInfo
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tasks
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tasks
index|[
literal|0
index|]
operator|.
name|getTaskName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tasks
index|[
literal|1
index|]
operator|.
name|getTaskName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|sw
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|testValidUsageNotKeepingTaskList
annotation|@
name|Test
specifier|public
name|void
name|testValidUsageNotKeepingTaskList
parameter_list|()
throws|throws
name|Exception
block|{
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|keepTaskList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|long
name|int1
init|=
literal|166L
decl_stmt|;
name|long
name|int2
init|=
literal|45L
decl_stmt|;
name|String
name|name1
init|=
literal|"Task 1"
decl_stmt|;
name|String
name|name2
init|=
literal|"Task 2"
decl_stmt|;
name|long
name|fudgeFactor
init|=
literal|5L
decl_stmt|;
name|assertThat
argument_list|(
name|sw
operator|.
name|isRunning
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|sw
operator|.
name|start
argument_list|(
name|name1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|int1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sw
operator|.
name|isRunning
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// TODO are timings off in JUnit? Why do these assertions sometimes fail
comment|// under both Ant and Eclipse?
comment|//assertTrue("Unexpected timing " + sw.getTotalTime(), sw.getTotalTime()>= int1);
comment|//assertTrue("Unexpected timing " + sw.getTotalTime(), sw.getTotalTime()<= int1 + fudgeFactor);
name|sw
operator|.
name|start
argument_list|(
name|name2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|int2
argument_list|)
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//assertTrue("Unexpected timing " + sw.getTotalTime(), sw.getTotalTime()>= int1 + int2);
comment|//assertTrue("Unexpected timing " + sw.getTotalTime(), sw.getTotalTime()<= int1 + int2 + fudgeFactor);
name|assertThat
argument_list|(
name|sw
operator|.
name|taskCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pp
init|=
name|sw
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|pp
operator|.
name|indexOf
argument_list|(
literal|"kept"
argument_list|)
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sw
operator|.
name|toString
argument_list|()
expr_stmt|;
try|try
block|{
name|sw
operator|.
name|taskInfo
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{
comment|// Ok
block|}
block|}
DECL|method|testFailureToStartBeforeGettingTimings
annotation|@
name|Test
specifier|public
name|void
name|testFailureToStartBeforeGettingTimings
parameter_list|()
block|{
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
try|try
block|{
name|sw
operator|.
name|lastTaskTime
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"Can't get last interval if no tests run"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// Ok
block|}
block|}
DECL|method|testFailureToStartBeforeStop
annotation|@
name|Test
specifier|public
name|void
name|testFailureToStartBeforeStop
parameter_list|()
block|{
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
try|try
block|{
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"Can't stop without starting"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// Ok
block|}
block|}
DECL|method|testRejectsStartTwice
annotation|@
name|Test
specifier|public
name|void
name|testRejectsStartTwice
parameter_list|()
block|{
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
try|try
block|{
name|sw
operator|.
name|start
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|sw
operator|.
name|start
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sw
operator|.
name|isRunning
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sw
operator|.
name|start
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Can't start twice"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// Ok
block|}
block|}
block|}
end_class

end_unit

