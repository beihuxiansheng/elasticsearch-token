begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.concurrent.resource
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy  */
end_comment

begin_class
DECL|class|AbstractAcquirableResourceTests
specifier|public
specifier|abstract
class|class
name|AbstractAcquirableResourceTests
block|{
DECL|method|createInstance
specifier|protected
specifier|abstract
parameter_list|<
name|T
extends|extends
name|Releasable
parameter_list|>
name|AcquirableResource
argument_list|<
name|T
argument_list|>
name|createInstance
parameter_list|(
name|T
name|resource
parameter_list|)
function_decl|;
DECL|method|testSimple
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
specifier|final
name|AcquirableResource
argument_list|<
name|Resource
argument_list|>
name|acquirableResource
init|=
name|createInstance
argument_list|(
operator|new
name|Resource
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|cycles
init|=
literal|50
decl_stmt|;
specifier|final
name|int
name|operationsWithinCycle
init|=
literal|100000
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier1
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|cycles
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier2
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|cycles
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cycles
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|barrier1
operator|.
name|await
argument_list|()
expr_stmt|;
name|barrier2
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|operationsWithinCycle
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|acquirableResource
operator|.
name|acquire
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|barrier1
operator|.
name|await
argument_list|()
expr_stmt|;
name|barrier2
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|operationsWithinCycle
condition|;
name|j
operator|++
control|)
block|{
name|acquirableResource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|barrier1
operator|.
name|await
argument_list|()
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|(
literal|"Acquirable"
argument_list|)
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrier2
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|Future
name|f
range|:
name|results
control|)
block|{
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|acquirableResource
operator|.
name|resource
argument_list|()
operator|.
name|isReleased
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|acquirableResource
operator|.
name|markForClose
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|acquirableResource
operator|.
name|resource
argument_list|()
operator|.
name|isReleased
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Took: "
operator|+
name|stopWatch
operator|.
name|shortSummary
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|Resource
specifier|private
specifier|static
class|class
name|Resource
implements|implements
name|Releasable
block|{
DECL|field|released
specifier|private
specifier|volatile
name|boolean
name|released
init|=
literal|false
decl_stmt|;
DECL|method|release
annotation|@
name|Override
specifier|public
name|boolean
name|release
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|released
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|isReleased
specifier|public
name|boolean
name|isReleased
parameter_list|()
block|{
return|return
name|released
return|;
block|}
block|}
block|}
end_class

end_unit

