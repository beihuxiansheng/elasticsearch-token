begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queryParser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|QueryParserSettings
specifier|public
class|class
name|QueryParserSettings
block|{
DECL|field|queryString
specifier|private
name|String
name|queryString
decl_stmt|;
DECL|field|defaultField
specifier|private
name|String
name|defaultField
decl_stmt|;
DECL|field|boost
specifier|private
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
DECL|field|defaultOperator
specifier|private
name|MapperQueryParser
operator|.
name|Operator
name|defaultOperator
init|=
name|QueryParser
operator|.
name|Operator
operator|.
name|OR
decl_stmt|;
DECL|field|allowLeadingWildcard
specifier|private
name|boolean
name|allowLeadingWildcard
init|=
literal|true
decl_stmt|;
DECL|field|lowercaseExpandedTerms
specifier|private
name|boolean
name|lowercaseExpandedTerms
init|=
literal|true
decl_stmt|;
DECL|field|enablePositionIncrements
specifier|private
name|boolean
name|enablePositionIncrements
init|=
literal|true
decl_stmt|;
DECL|field|phraseSlop
specifier|private
name|int
name|phraseSlop
init|=
literal|0
decl_stmt|;
DECL|field|fuzzyMinSim
specifier|private
name|float
name|fuzzyMinSim
init|=
name|FuzzyQuery
operator|.
name|defaultMinSimilarity
decl_stmt|;
DECL|field|fuzzyPrefixLength
specifier|private
name|int
name|fuzzyPrefixLength
init|=
name|FuzzyQuery
operator|.
name|defaultPrefixLength
decl_stmt|;
DECL|field|analyzeWildcard
specifier|private
name|boolean
name|analyzeWildcard
init|=
literal|false
decl_stmt|;
DECL|field|escape
specifier|private
name|boolean
name|escape
init|=
literal|false
decl_stmt|;
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
init|=
literal|null
decl_stmt|;
DECL|method|queryString
specifier|public
name|String
name|queryString
parameter_list|()
block|{
return|return
name|queryString
return|;
block|}
DECL|method|queryString
specifier|public
name|void
name|queryString
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
name|this
operator|.
name|queryString
operator|=
name|queryString
expr_stmt|;
block|}
DECL|method|defaultField
specifier|public
name|String
name|defaultField
parameter_list|()
block|{
return|return
name|defaultField
return|;
block|}
DECL|method|defaultField
specifier|public
name|void
name|defaultField
parameter_list|(
name|String
name|defaultField
parameter_list|)
block|{
name|this
operator|.
name|defaultField
operator|=
name|defaultField
expr_stmt|;
block|}
DECL|method|boost
specifier|public
name|float
name|boost
parameter_list|()
block|{
return|return
name|boost
return|;
block|}
DECL|method|boost
specifier|public
name|void
name|boost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
DECL|method|defaultOperator
specifier|public
name|QueryParser
operator|.
name|Operator
name|defaultOperator
parameter_list|()
block|{
return|return
name|defaultOperator
return|;
block|}
DECL|method|defaultOperator
specifier|public
name|void
name|defaultOperator
parameter_list|(
name|QueryParser
operator|.
name|Operator
name|defaultOperator
parameter_list|)
block|{
name|this
operator|.
name|defaultOperator
operator|=
name|defaultOperator
expr_stmt|;
block|}
DECL|method|allowLeadingWildcard
specifier|public
name|boolean
name|allowLeadingWildcard
parameter_list|()
block|{
return|return
name|allowLeadingWildcard
return|;
block|}
DECL|method|allowLeadingWildcard
specifier|public
name|void
name|allowLeadingWildcard
parameter_list|(
name|boolean
name|allowLeadingWildcard
parameter_list|)
block|{
name|this
operator|.
name|allowLeadingWildcard
operator|=
name|allowLeadingWildcard
expr_stmt|;
block|}
DECL|method|lowercaseExpandedTerms
specifier|public
name|boolean
name|lowercaseExpandedTerms
parameter_list|()
block|{
return|return
name|lowercaseExpandedTerms
return|;
block|}
DECL|method|lowercaseExpandedTerms
specifier|public
name|void
name|lowercaseExpandedTerms
parameter_list|(
name|boolean
name|lowercaseExpandedTerms
parameter_list|)
block|{
name|this
operator|.
name|lowercaseExpandedTerms
operator|=
name|lowercaseExpandedTerms
expr_stmt|;
block|}
DECL|method|enablePositionIncrements
specifier|public
name|boolean
name|enablePositionIncrements
parameter_list|()
block|{
return|return
name|enablePositionIncrements
return|;
block|}
DECL|method|enablePositionIncrements
specifier|public
name|void
name|enablePositionIncrements
parameter_list|(
name|boolean
name|enablePositionIncrements
parameter_list|)
block|{
name|this
operator|.
name|enablePositionIncrements
operator|=
name|enablePositionIncrements
expr_stmt|;
block|}
DECL|method|phraseSlop
specifier|public
name|int
name|phraseSlop
parameter_list|()
block|{
return|return
name|phraseSlop
return|;
block|}
DECL|method|phraseSlop
specifier|public
name|void
name|phraseSlop
parameter_list|(
name|int
name|phraseSlop
parameter_list|)
block|{
name|this
operator|.
name|phraseSlop
operator|=
name|phraseSlop
expr_stmt|;
block|}
DECL|method|fuzzyMinSim
specifier|public
name|float
name|fuzzyMinSim
parameter_list|()
block|{
return|return
name|fuzzyMinSim
return|;
block|}
DECL|method|fuzzyMinSim
specifier|public
name|void
name|fuzzyMinSim
parameter_list|(
name|float
name|fuzzyMinSim
parameter_list|)
block|{
name|this
operator|.
name|fuzzyMinSim
operator|=
name|fuzzyMinSim
expr_stmt|;
block|}
DECL|method|fuzzyPrefixLength
specifier|public
name|int
name|fuzzyPrefixLength
parameter_list|()
block|{
return|return
name|fuzzyPrefixLength
return|;
block|}
DECL|method|fuzzyPrefixLength
specifier|public
name|void
name|fuzzyPrefixLength
parameter_list|(
name|int
name|fuzzyPrefixLength
parameter_list|)
block|{
name|this
operator|.
name|fuzzyPrefixLength
operator|=
name|fuzzyPrefixLength
expr_stmt|;
block|}
DECL|method|escape
specifier|public
name|boolean
name|escape
parameter_list|()
block|{
return|return
name|escape
return|;
block|}
DECL|method|escape
specifier|public
name|void
name|escape
parameter_list|(
name|boolean
name|escape
parameter_list|)
block|{
name|this
operator|.
name|escape
operator|=
name|escape
expr_stmt|;
block|}
DECL|method|analyzer
specifier|public
name|Analyzer
name|analyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
DECL|method|analyzer
specifier|public
name|void
name|analyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
block|}
DECL|method|analyzeWildcard
specifier|public
name|boolean
name|analyzeWildcard
parameter_list|()
block|{
return|return
name|this
operator|.
name|analyzeWildcard
return|;
block|}
DECL|method|analyzeWildcard
specifier|public
name|void
name|analyzeWildcard
parameter_list|(
name|boolean
name|analyzeWildcard
parameter_list|)
block|{
name|this
operator|.
name|analyzeWildcard
operator|=
name|analyzeWildcard
expr_stmt|;
block|}
DECL|method|equals
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|QueryParserSettings
name|that
init|=
operator|(
name|QueryParserSettings
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|allowLeadingWildcard
operator|!=
name|that
operator|.
name|allowLeadingWildcard
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|that
operator|.
name|boost
argument_list|,
name|boost
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|enablePositionIncrements
operator|!=
name|that
operator|.
name|enablePositionIncrements
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|escape
operator|!=
name|that
operator|.
name|escape
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|analyzeWildcard
operator|!=
name|that
operator|.
name|analyzeWildcard
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|that
operator|.
name|fuzzyMinSim
argument_list|,
name|fuzzyMinSim
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fuzzyPrefixLength
operator|!=
name|that
operator|.
name|fuzzyPrefixLength
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|lowercaseExpandedTerms
operator|!=
name|that
operator|.
name|lowercaseExpandedTerms
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|phraseSlop
operator|!=
name|that
operator|.
name|phraseSlop
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|?
operator|!
name|analyzer
operator|.
name|equals
argument_list|(
name|that
operator|.
name|analyzer
argument_list|)
else|:
name|that
operator|.
name|analyzer
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|defaultField
operator|!=
literal|null
condition|?
operator|!
name|defaultField
operator|.
name|equals
argument_list|(
name|that
operator|.
name|defaultField
argument_list|)
else|:
name|that
operator|.
name|defaultField
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|defaultOperator
operator|!=
name|that
operator|.
name|defaultOperator
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|queryString
operator|!=
literal|null
condition|?
operator|!
name|queryString
operator|.
name|equals
argument_list|(
name|that
operator|.
name|queryString
argument_list|)
else|:
name|that
operator|.
name|queryString
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|hashCode
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|queryString
operator|!=
literal|null
condition|?
name|queryString
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|defaultField
operator|!=
literal|null
condition|?
name|defaultField
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|boost
operator|!=
operator|+
literal|0.0f
condition|?
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|boost
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|defaultOperator
operator|!=
literal|null
condition|?
name|defaultOperator
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|allowLeadingWildcard
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|lowercaseExpandedTerms
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|enablePositionIncrements
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|phraseSlop
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|fuzzyMinSim
operator|!=
operator|+
literal|0.0f
condition|?
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|fuzzyMinSim
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|fuzzyPrefixLength
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|escape
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|analyzer
operator|!=
literal|null
condition|?
name|analyzer
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|analyzeWildcard
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

