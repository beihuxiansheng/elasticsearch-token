begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.lucene.search.vectorhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Copy from lucene trunk:  * http://svn.apache.org/viewvc/lucene/dev/trunk/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java  * This class in not available in 3.0.2 release yet.  */
end_comment

begin_class
DECL|class|SingleFragListBuilder
specifier|public
class|class
name|SingleFragListBuilder
implements|implements
name|FragListBuilder
block|{
DECL|method|createFieldFragList
annotation|@
name|Override
specifier|public
name|FieldFragList
name|createFieldFragList
parameter_list|(
name|FieldPhraseList
name|fieldPhraseList
parameter_list|,
name|int
name|fragCharSize
parameter_list|)
block|{
name|FieldFragList
name|ffl
init|=
operator|new
name|FieldFragList
argument_list|(
name|fragCharSize
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldPhraseList
operator|.
name|WeightedPhraseInfo
argument_list|>
name|wpil
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldPhraseList
operator|.
name|WeightedPhraseInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FieldPhraseList
operator|.
name|WeightedPhraseInfo
argument_list|>
name|ite
init|=
name|fieldPhraseList
operator|.
name|phraseList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|FieldPhraseList
operator|.
name|WeightedPhraseInfo
name|phraseInfo
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|ite
operator|.
name|hasNext
argument_list|()
condition|)
break|break;
name|phraseInfo
operator|=
name|ite
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|phraseInfo
operator|==
literal|null
condition|)
break|break;
name|wpil
operator|.
name|add
argument_list|(
name|phraseInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wpil
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|ffl
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|wpil
argument_list|)
expr_stmt|;
return|return
name|ffl
return|;
block|}
block|}
end_class

end_unit

