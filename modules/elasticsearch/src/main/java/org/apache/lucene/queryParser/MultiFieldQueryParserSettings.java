begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queryParser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|ExtTObjectFloatHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|MultiFieldQueryParserSettings
specifier|public
class|class
name|MultiFieldQueryParserSettings
extends|extends
name|QueryParserSettings
block|{
DECL|field|fields
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
DECL|field|boosts
name|ExtTObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|boosts
init|=
literal|null
decl_stmt|;
DECL|field|tieBreaker
name|float
name|tieBreaker
init|=
literal|0.0f
decl_stmt|;
DECL|field|useDisMax
name|boolean
name|useDisMax
init|=
literal|true
decl_stmt|;
DECL|method|fields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
DECL|method|fields
specifier|public
name|void
name|fields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
DECL|method|boosts
specifier|public
name|ExtTObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|boosts
parameter_list|()
block|{
return|return
name|boosts
return|;
block|}
DECL|method|boosts
specifier|public
name|void
name|boosts
parameter_list|(
name|ExtTObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|boosts
parameter_list|)
block|{
name|this
operator|.
name|boosts
operator|=
name|boosts
expr_stmt|;
block|}
DECL|method|tieBreaker
specifier|public
name|float
name|tieBreaker
parameter_list|()
block|{
return|return
name|tieBreaker
return|;
block|}
DECL|method|tieBreaker
specifier|public
name|void
name|tieBreaker
parameter_list|(
name|float
name|tieBreaker
parameter_list|)
block|{
name|this
operator|.
name|tieBreaker
operator|=
name|tieBreaker
expr_stmt|;
block|}
DECL|method|useDisMax
specifier|public
name|boolean
name|useDisMax
parameter_list|()
block|{
return|return
name|useDisMax
return|;
block|}
DECL|method|useDisMax
specifier|public
name|void
name|useDisMax
parameter_list|(
name|boolean
name|useDisMax
parameter_list|)
block|{
name|this
operator|.
name|useDisMax
operator|=
name|useDisMax
expr_stmt|;
block|}
DECL|method|equals
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// if there is a single field, its the same as single mapper parser / settings
comment|// we take for that also in the code
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|MultiFieldQueryParserSettings
name|that
init|=
operator|(
name|MultiFieldQueryParserSettings
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|that
operator|.
name|tieBreaker
argument_list|,
name|tieBreaker
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|useDisMax
operator|!=
name|that
operator|.
name|useDisMax
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|boosts
operator|!=
literal|null
condition|?
operator|!
name|boosts
operator|.
name|equals
argument_list|(
name|that
operator|.
name|boosts
argument_list|)
else|:
name|that
operator|.
name|boosts
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|?
operator|!
name|fields
operator|.
name|equals
argument_list|(
name|that
operator|.
name|fields
argument_list|)
else|:
name|that
operator|.
name|fields
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|hashCode
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|fields
operator|!=
literal|null
condition|?
name|fields
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|boosts
operator|!=
literal|null
condition|?
name|boosts
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|tieBreaker
operator|!=
operator|+
literal|0.0f
condition|?
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|tieBreaker
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|useDisMax
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

