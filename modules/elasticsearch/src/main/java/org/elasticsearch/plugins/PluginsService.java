begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|component
operator|.
name|CloseableIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|component
operator|.
name|LifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|FileSystemUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|PluginsService
specifier|public
class|class
name|PluginsService
extends|extends
name|AbstractComponent
block|{
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|plugins
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Plugin
argument_list|>
name|plugins
decl_stmt|;
DECL|method|PluginsService
annotation|@
name|Inject
specifier|public
name|PluginsService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|environment
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|loadPluginsIntoClassLoader
argument_list|()
expr_stmt|;
comment|// first, find all the ones that are in the classpath
name|Map
argument_list|<
name|String
argument_list|,
name|Plugin
argument_list|>
name|plugins
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|plugins
operator|.
name|putAll
argument_list|(
name|loadPluginsFromClasspath
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Loaded {}"
argument_list|,
name|plugins
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|plugins
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|plugins
argument_list|)
expr_stmt|;
block|}
DECL|method|updatedSettings
specifier|public
name|Settings
name|updatedSettings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
DECL|method|modules
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|modules
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|plugins
operator|.
name|values
argument_list|()
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|modules
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|services
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LifecycleComponent
argument_list|>
argument_list|>
name|services
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LifecycleComponent
argument_list|>
argument_list|>
name|services
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|plugins
operator|.
name|values
argument_list|()
control|)
block|{
name|services
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|services
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
DECL|method|indexModules
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|indexModules
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|plugins
operator|.
name|values
argument_list|()
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|indexModules
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|indexServices
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CloseableIndexComponent
argument_list|>
argument_list|>
name|indexServices
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CloseableIndexComponent
argument_list|>
argument_list|>
name|services
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|plugins
operator|.
name|values
argument_list|()
control|)
block|{
name|services
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|indexServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
DECL|method|shardModules
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|shardModules
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|plugins
operator|.
name|values
argument_list|()
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|shardModules
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|shardServices
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CloseableIndexComponent
argument_list|>
argument_list|>
name|shardServices
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CloseableIndexComponent
argument_list|>
argument_list|>
name|services
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|plugins
operator|.
name|values
argument_list|()
control|)
block|{
name|services
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|shardServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
DECL|method|loadPluginsIntoClassLoader
specifier|private
name|void
name|loadPluginsIntoClassLoader
parameter_list|()
block|{
name|File
name|pluginsFile
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pluginsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|pluginsFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return;
block|}
name|ClassLoader
name|classLoader
init|=
name|settings
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Class
name|classLoaderClass
init|=
name|classLoader
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Method
name|addURL
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|classLoaderClass
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|addURL
operator|=
name|classLoaderClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"addURL"
argument_list|,
name|URL
operator|.
name|class
argument_list|)
expr_stmt|;
name|addURL
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// no method, try the parent
name|classLoaderClass
operator|=
name|classLoaderClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|addURL
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Failed to find addURL method on classLoader ["
operator|+
name|classLoader
operator|+
literal|"] to add methods"
argument_list|)
expr_stmt|;
return|return;
block|}
name|File
index|[]
name|pluginsFiles
init|=
name|pluginsFile
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|pluginFile
range|:
name|pluginsFiles
control|)
block|{
if|if
condition|(
operator|!
name|pluginFile
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Processing [{}]"
argument_list|,
name|pluginFile
argument_list|)
expr_stmt|;
block|}
name|String
name|pluginNameNoExtension
init|=
name|pluginFile
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pluginFile
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|extractedPluginDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|environment
operator|.
name|workFile
argument_list|()
argument_list|,
literal|"plugins"
argument_list|)
argument_list|,
name|pluginNameNoExtension
argument_list|)
decl_stmt|;
name|extractedPluginDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|stampsDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|environment
operator|.
name|workFile
argument_list|()
argument_list|,
literal|"plugins"
argument_list|)
argument_list|,
literal|"_stamps"
argument_list|)
decl_stmt|;
name|stampsDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|boolean
name|extractPlugin
init|=
literal|true
decl_stmt|;
name|File
name|stampFile
init|=
operator|new
name|File
argument_list|(
name|stampsDir
argument_list|,
name|pluginNameNoExtension
operator|+
literal|".stamp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stampFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// read it, and check if its the same size as the pluginFile
name|RandomAccessFile
name|raf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|raf
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|stampFile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|raf
operator|.
name|readLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
name|pluginFile
operator|.
name|length
argument_list|()
condition|)
block|{
name|extractPlugin
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"--- No need to extract plugin, same size ["
operator|+
name|size
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore and extract the plugin
block|}
finally|finally
block|{
if|if
condition|(
name|raf
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
if|if
condition|(
name|extractPlugin
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"--- Extracting plugin to ["
operator|+
name|extractedPluginDir
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|deleteRecursively
argument_list|(
name|extractedPluginDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ZipFile
name|zipFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|zipFile
operator|=
operator|new
name|ZipFile
argument_list|(
name|pluginFile
argument_list|)
expr_stmt|;
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|zipEntries
init|=
name|zipFile
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|zipEntries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|zipEntry
init|=
name|zipEntries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|zipEntry
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|||
name|zipEntry
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|zipEntry
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|extractedPluginDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
name|zipFile
operator|.
name|getInputStream
argument_list|(
name|zipEntry
argument_list|)
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to extract plugin ["
operator|+
name|pluginFile
operator|+
literal|"], ignoring..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
if|if
condition|(
name|zipFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|zipFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
try|try
block|{
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|stampFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|raf
operator|.
name|writeLong
argument_list|(
name|pluginFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
try|try
block|{
for|for
control|(
name|File
name|jarToAdd
range|:
name|extractedPluginDir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|jarToAdd
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|||
name|jarToAdd
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
name|addURL
operator|.
name|invoke
argument_list|(
name|classLoader
argument_list|,
name|jarToAdd
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to add plugin ["
operator|+
name|pluginFile
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadPluginsFromClasspath
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Plugin
argument_list|>
name|loadPluginsFromClasspath
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Plugin
argument_list|>
name|plugins
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|pluginUrls
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pluginUrls
operator|=
name|settings
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResources
argument_list|(
literal|"es-plugin.properties"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to find plugins from classpath"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|pluginUrls
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|pluginUrl
init|=
name|pluginUrls
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Properties
name|pluginProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|pluginUrl
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|pluginProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|sPluginClass
init|=
name|pluginProps
operator|.
name|getProperty
argument_list|(
literal|"plugin"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
name|pluginClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
operator|)
name|settings
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|sPluginClass
argument_list|)
decl_stmt|;
name|Plugin
name|plugin
decl_stmt|;
try|try
block|{
name|plugin
operator|=
name|pluginClass
operator|.
name|getConstructor
argument_list|(
name|Settings
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
try|try
block|{
name|plugin
operator|=
name|pluginClass
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"No constructor for ["
operator|+
name|pluginClass
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|plugins
operator|.
name|put
argument_list|(
name|plugin
operator|.
name|name
argument_list|()
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to load plugin from ["
operator|+
name|pluginUrl
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
return|return
name|plugins
return|;
block|}
block|}
end_class

end_unit

