begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  * Thread Pool Info.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ThreadPoolInfo
specifier|public
class|class
name|ThreadPoolInfo
implements|implements
name|Streamable
implements|,
name|Serializable
implements|,
name|ToXContent
block|{
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|minThreads
specifier|private
name|int
name|minThreads
decl_stmt|;
DECL|field|maxThreads
specifier|private
name|int
name|maxThreads
decl_stmt|;
DECL|field|schedulerThreads
specifier|private
name|int
name|schedulerThreads
decl_stmt|;
DECL|method|ThreadPoolInfo
name|ThreadPoolInfo
parameter_list|()
block|{     }
DECL|method|ThreadPoolInfo
specifier|public
name|ThreadPoolInfo
parameter_list|(
name|String
name|type
parameter_list|,
name|int
name|minThreads
parameter_list|,
name|int
name|maxThreads
parameter_list|,
name|int
name|schedulerThreads
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|minThreads
operator|=
name|minThreads
expr_stmt|;
name|this
operator|.
name|maxThreads
operator|=
name|maxThreads
expr_stmt|;
name|this
operator|.
name|schedulerThreads
operator|=
name|schedulerThreads
expr_stmt|;
block|}
DECL|method|readThreadPoolInfo
specifier|public
specifier|static
name|ThreadPoolInfo
name|readThreadPoolInfo
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ThreadPoolInfo
name|info
init|=
operator|new
name|ThreadPoolInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|type
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|minThreads
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|maxThreads
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|schedulerThreads
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|minThreads
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|maxThreads
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|schedulerThreads
argument_list|)
expr_stmt|;
block|}
DECL|method|toXContent
annotation|@
name|Override
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"thread_pool"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"min_threads"
argument_list|,
name|minThreads
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"max_threads"
argument_list|,
name|maxThreads
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"scheduler_threads"
argument_list|,
name|schedulerThreads
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * The type of the thread pool.      */
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * The type of the thread pool.      */
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
argument_list|()
return|;
block|}
comment|/**      * The minimum number of threads in the thread pool.      */
DECL|method|minThreads
specifier|public
name|int
name|minThreads
parameter_list|()
block|{
return|return
name|minThreads
return|;
block|}
comment|/**      * The minimum number of threads in the thread pool.      */
DECL|method|getMinThreads
specifier|public
name|int
name|getMinThreads
parameter_list|()
block|{
return|return
name|minThreads
argument_list|()
return|;
block|}
comment|/**      * The maximum number of threads in the thread pool.      */
DECL|method|maxThreads
specifier|public
name|int
name|maxThreads
parameter_list|()
block|{
return|return
name|maxThreads
return|;
block|}
comment|/**      * The maximum number of threads in the thread pool.      */
DECL|method|getMaxThreads
specifier|public
name|int
name|getMaxThreads
parameter_list|()
block|{
return|return
name|maxThreads
argument_list|()
return|;
block|}
comment|/**      * The size of scheduler threads.      */
DECL|method|schedulerThreads
specifier|public
name|int
name|schedulerThreads
parameter_list|()
block|{
return|return
name|schedulerThreads
return|;
block|}
comment|/**      * The size of scheduler threads.      */
DECL|method|getSchedulerThreads
specifier|public
name|int
name|getSchedulerThreads
parameter_list|()
block|{
return|return
name|schedulerThreads
argument_list|()
return|;
block|}
block|}
end_class

end_unit

