begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool.cached
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|cached
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DynamicExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|support
operator|.
name|AbstractThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A thread pool that will create an unbounded number of threads.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|CachedThreadPool
specifier|public
class|class
name|CachedThreadPool
extends|extends
name|AbstractThreadPool
block|{
DECL|field|keepAlive
specifier|final
name|TimeValue
name|keepAlive
decl_stmt|;
DECL|field|scheduledSize
specifier|final
name|int
name|scheduledSize
decl_stmt|;
DECL|method|CachedThreadPool
specifier|public
name|CachedThreadPool
parameter_list|()
block|{
name|this
argument_list|(
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
block|}
DECL|method|CachedThreadPool
annotation|@
name|Inject
specifier|public
name|CachedThreadPool
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduledSize
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"scheduled_size"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|this
operator|.
name|keepAlive
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|timeValueSeconds
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Initializing {} thread pool with keep_alive[{}], scheduled_size[{}]"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getType
argument_list|()
block|,
name|keepAlive
block|,
name|scheduledSize
block|}
argument_list|)
expr_stmt|;
name|executorService
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|keepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|DynamicExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"[tp]"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduledExecutorService
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|scheduledSize
argument_list|,
name|DynamicExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"[sc]"
argument_list|)
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getType
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"cached"
return|;
block|}
DECL|method|getMinThreads
annotation|@
name|Override
specifier|public
name|int
name|getMinThreads
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|getMaxThreads
annotation|@
name|Override
specifier|public
name|int
name|getMaxThreads
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getSchedulerThreads
annotation|@
name|Override
specifier|public
name|int
name|getSchedulerThreads
parameter_list|()
block|{
return|return
name|scheduledSize
return|;
block|}
DECL|method|getPoolSize
annotation|@
name|Override
specifier|public
name|int
name|getPoolSize
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executorService
operator|)
operator|.
name|getPoolSize
argument_list|()
return|;
block|}
DECL|method|getActiveCount
annotation|@
name|Override
specifier|public
name|int
name|getActiveCount
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executorService
operator|)
operator|.
name|getActiveCount
argument_list|()
return|;
block|}
DECL|method|getSchedulerPoolSize
annotation|@
name|Override
specifier|public
name|int
name|getSchedulerPoolSize
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|scheduledExecutorService
operator|)
operator|.
name|getPoolSize
argument_list|()
return|;
block|}
DECL|method|getSchedulerActiveCount
annotation|@
name|Override
specifier|public
name|int
name|getSchedulerActiveCount
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|scheduledExecutorService
operator|)
operator|.
name|getActiveCount
argument_list|()
return|;
block|}
block|}
end_class

end_unit

