begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.memory.alpha
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|memory
operator|.
name|alpha
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesMemoryCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|memory
operator|.
name|MemoryMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|SizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|ThreadLocals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|TimeValue
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|AlphaMemoryMonitor
specifier|public
class|class
name|AlphaMemoryMonitor
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|MemoryMonitor
argument_list|>
implements|implements
name|MemoryMonitor
block|{
DECL|field|upperMemoryThreshold
specifier|private
specifier|final
name|double
name|upperMemoryThreshold
decl_stmt|;
DECL|field|lowerMemoryThreshold
specifier|private
specifier|final
name|double
name|lowerMemoryThreshold
decl_stmt|;
DECL|field|interval
specifier|private
specifier|final
name|TimeValue
name|interval
decl_stmt|;
DECL|field|fullThreshold
specifier|private
specifier|final
name|int
name|fullThreshold
decl_stmt|;
DECL|field|cleanThreshold
specifier|private
specifier|final
name|int
name|cleanThreshold
decl_stmt|;
DECL|field|minimumFlushableSizeToClean
specifier|private
specifier|final
name|SizeValue
name|minimumFlushableSizeToClean
decl_stmt|;
DECL|field|translogNumberOfOperationsThreshold
specifier|private
specifier|final
name|int
name|translogNumberOfOperationsThreshold
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|indicesMemoryCleaner
specifier|private
specifier|final
name|IndicesMemoryCleaner
name|indicesMemoryCleaner
decl_stmt|;
DECL|field|runtime
specifier|private
specifier|final
name|Runtime
name|runtime
decl_stmt|;
DECL|field|maxMemory
specifier|private
specifier|final
name|SizeValue
name|maxMemory
decl_stmt|;
DECL|field|totalMemory
specifier|private
specifier|final
name|SizeValue
name|totalMemory
decl_stmt|;
DECL|field|scheduledFuture
specifier|private
specifier|volatile
name|ScheduledFuture
name|scheduledFuture
decl_stmt|;
DECL|field|totalCleans
specifier|private
name|AtomicLong
name|totalCleans
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|totalFull
specifier|private
name|AtomicLong
name|totalFull
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|AlphaMemoryMonitor
annotation|@
name|Inject
specifier|public
name|AlphaMemoryMonitor
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|IndicesMemoryCleaner
name|indicesMemoryCleaner
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|indicesMemoryCleaner
operator|=
name|indicesMemoryCleaner
expr_stmt|;
name|this
operator|.
name|upperMemoryThreshold
operator|=
name|componentSettings
operator|.
name|getAsDouble
argument_list|(
literal|"upper_memory_threshold"
argument_list|,
literal|0.8
argument_list|)
expr_stmt|;
name|this
operator|.
name|lowerMemoryThreshold
operator|=
name|componentSettings
operator|.
name|getAsDouble
argument_list|(
literal|"lower_memory_threshold"
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"interval"
argument_list|,
name|timeValueMillis
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fullThreshold
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"full_threshold"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanThreshold
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"clean_threshold"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|minimumFlushableSizeToClean
operator|=
name|componentSettings
operator|.
name|getAsSize
argument_list|(
literal|"minimum_flushable_size_to_clean"
argument_list|,
operator|new
name|SizeValue
argument_list|(
literal|5
argument_list|,
name|SizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|translogNumberOfOperationsThreshold
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"translog_number_of_operations_threshold"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"interval ["
operator|+
name|interval
operator|+
literal|"], upper_memory_threshold ["
operator|+
name|upperMemoryThreshold
operator|+
literal|"], lower_memory_threshold ["
operator|+
name|lowerMemoryThreshold
operator|+
literal|"], translog_number_of_operations_threshold ["
operator|+
name|translogNumberOfOperationsThreshold
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|this
operator|.
name|runtime
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxMemory
operator|=
operator|new
name|SizeValue
argument_list|(
name|runtime
operator|.
name|maxMemory
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalMemory
operator|=
name|maxMemory
operator|.
name|bytes
argument_list|()
operator|==
name|runtime
operator|.
name|totalMemory
argument_list|()
condition|?
operator|new
name|SizeValue
argument_list|(
name|runtime
operator|.
name|totalMemory
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
comment|// Xmx==Xms when the JVM was started.
block|}
DECL|method|doStart
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|scheduledFuture
operator|=
name|threadPool
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|MemoryCleaner
argument_list|()
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|scheduledFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|doClose
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
DECL|method|freeMemory
specifier|private
name|long
name|freeMemory
parameter_list|()
block|{
return|return
name|runtime
operator|.
name|freeMemory
argument_list|()
return|;
block|}
DECL|method|totalMemory
specifier|private
name|long
name|totalMemory
parameter_list|()
block|{
return|return
name|totalMemory
operator|==
literal|null
condition|?
name|runtime
operator|.
name|totalMemory
argument_list|()
else|:
name|totalMemory
operator|.
name|bytes
argument_list|()
return|;
block|}
DECL|class|MemoryCleaner
specifier|private
class|class
name|MemoryCleaner
implements|implements
name|Runnable
block|{
DECL|field|fullCounter
specifier|private
name|int
name|fullCounter
decl_stmt|;
DECL|field|performedClean
specifier|private
name|boolean
name|performedClean
decl_stmt|;
DECL|field|cleanCounter
specifier|private
name|int
name|cleanCounter
decl_stmt|;
DECL|method|run
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// clear unreferenced in the cache
name|indicesMemoryCleaner
operator|.
name|cacheClearUnreferenced
argument_list|()
expr_stmt|;
comment|// try and clean translog based on a threshold, since we don't want to get a very large transaction log
comment|// which means recovery it will take a long time (since the target re-index all this data)
name|IndicesMemoryCleaner
operator|.
name|TranslogCleanResult
name|translogCleanResult
init|=
name|indicesMemoryCleaner
operator|.
name|cleanTranslog
argument_list|(
name|translogNumberOfOperationsThreshold
argument_list|)
decl_stmt|;
if|if
condition|(
name|translogCleanResult
operator|.
name|cleanedShards
argument_list|()
operator|>
literal|0
condition|)
block|{
name|long
name|totalClean
init|=
name|totalCleans
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|totalClean
operator|+
literal|"] [Translog] "
operator|+
name|translogCleanResult
argument_list|)
expr_stmt|;
block|}
comment|// the logic is simple, if the used memory is above the upper threshold, we need to clean
comment|// we clean down as much as we can to down to the lower threshold
comment|// in order not to get trashing, we only perform a clean after another clean if a the clean counter
comment|// has expired.
comment|// we also do the same for GC invocations
name|long
name|upperMemory
init|=
name|maxMemory
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|long
name|totalMemory
init|=
name|totalMemory
argument_list|()
decl_stmt|;
name|long
name|usedMemory
init|=
name|totalMemory
operator|-
name|freeMemory
argument_list|()
decl_stmt|;
name|long
name|upperThresholdMemory
init|=
call|(
name|long
call|)
argument_list|(
name|upperMemory
operator|*
name|upperMemoryThreshold
argument_list|)
decl_stmt|;
if|if
condition|(
name|usedMemory
operator|-
name|upperThresholdMemory
operator|<=
literal|0
condition|)
block|{
name|fullCounter
operator|=
literal|0
expr_stmt|;
name|performedClean
operator|=
literal|false
expr_stmt|;
name|cleanCounter
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|performedClean
condition|)
block|{
if|if
condition|(
operator|++
name|cleanCounter
operator|<
name|cleanThreshold
condition|)
block|{
return|return;
block|}
block|}
name|long
name|lowerThresholdMemory
init|=
call|(
name|long
call|)
argument_list|(
name|upperMemory
operator|*
name|lowerMemoryThreshold
argument_list|)
decl_stmt|;
name|long
name|memoryToClean
init|=
name|usedMemory
operator|-
name|lowerThresholdMemory
decl_stmt|;
if|if
condition|(
name|fullCounter
operator|++
operator|>=
name|fullThreshold
condition|)
block|{
name|long
name|total
init|=
name|totalFull
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|total
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[Full    ] Ran after ["
argument_list|)
operator|.
name|append
argument_list|(
name|fullThreshold
argument_list|)
operator|.
name|append
argument_list|(
literal|"] consecutive clean swipes"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", memory_to_clean ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|memoryToClean
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", lower_memory_threshold ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|lowerThresholdMemory
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", upper_memory_threshold ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|upperThresholdMemory
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", used_memory ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|usedMemory
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", total_memory["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|totalMemory
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", max_memory["
argument_list|)
operator|.
name|append
argument_list|(
name|maxMemory
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indicesMemoryCleaner
operator|.
name|cacheClear
argument_list|()
expr_stmt|;
name|indicesMemoryCleaner
operator|.
name|fullMemoryClean
argument_list|()
expr_stmt|;
name|ThreadLocals
operator|.
name|clearReferencesThreadLocals
argument_list|()
expr_stmt|;
name|fullCounter
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|long
name|totalClean
init|=
name|totalCleans
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|totalClean
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[Cleaning] memory_to_clean ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|memoryToClean
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", lower_memory_threshold ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|lowerThresholdMemory
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", upper_memory_threshold ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|upperThresholdMemory
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", used_memory ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|usedMemory
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", total_memory["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|totalMemory
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", max_memory["
argument_list|)
operator|.
name|append
argument_list|(
name|maxMemory
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IndicesMemoryCleaner
operator|.
name|MemoryCleanResult
name|memoryCleanResult
init|=
name|indicesMemoryCleaner
operator|.
name|cleanMemory
argument_list|(
name|memoryToClean
argument_list|,
name|minimumFlushableSizeToClean
argument_list|)
decl_stmt|;
name|boolean
name|forceClean
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|memoryCleanResult
operator|.
name|cleaned
argument_list|()
operator|.
name|bytes
argument_list|()
operator|<
name|memoryToClean
operator|&&
operator|(
name|fullCounter
operator|>
operator|(
name|fullThreshold
operator|/
literal|2
operator|)
operator|)
condition|)
block|{
name|forceClean
operator|=
literal|true
expr_stmt|;
name|indicesMemoryCleaner
operator|.
name|forceCleanMemory
argument_list|(
name|memoryCleanResult
operator|.
name|shardsCleaned
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|totalClean
operator|+
literal|"] [Cleaned ] force_clean ["
operator|+
name|forceClean
operator|+
literal|"], "
operator|+
name|memoryCleanResult
argument_list|)
expr_stmt|;
block|}
block|}
name|performedClean
operator|=
literal|true
expr_stmt|;
name|cleanCounter
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Failed to run memory monitor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

