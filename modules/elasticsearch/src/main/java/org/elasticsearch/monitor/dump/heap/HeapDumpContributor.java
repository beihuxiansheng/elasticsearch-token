begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.dump.heap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|heap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|Dump
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|DumpContributionFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|DumpContributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|HeapDumpContributor
specifier|public
class|class
name|HeapDumpContributor
implements|implements
name|DumpContributor
block|{
DECL|field|HEAP_DUMP
specifier|public
specifier|static
specifier|final
name|String
name|HEAP_DUMP
init|=
literal|"heap"
decl_stmt|;
DECL|field|heapDumpMethod
specifier|private
specifier|final
name|Method
name|heapDumpMethod
decl_stmt|;
DECL|field|diagnosticMBean
specifier|private
specifier|final
name|Object
name|diagnosticMBean
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|HeapDumpContributor
annotation|@
name|Inject
specifier|public
name|HeapDumpContributor
parameter_list|(
annotation|@
name|Assisted
name|String
name|name
parameter_list|,
annotation|@
name|Assisted
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|Method
name|heapDumpMethod
decl_stmt|;
name|Object
name|diagnosticMBean
decl_stmt|;
try|try
block|{
name|Class
name|managementFactoryClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.management.ManagementFactory"
argument_list|,
literal|true
argument_list|,
name|HeapDumpContributor
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
name|managementFactoryClass
operator|.
name|getMethod
argument_list|(
literal|"getDiagnosticMXBean"
argument_list|)
decl_stmt|;
name|diagnosticMBean
operator|=
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|heapDumpMethod
operator|=
name|diagnosticMBean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"dumpHeap"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|_ex
parameter_list|)
block|{
name|heapDumpMethod
operator|=
literal|null
expr_stmt|;
name|diagnosticMBean
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|heapDumpMethod
operator|=
name|heapDumpMethod
expr_stmt|;
name|this
operator|.
name|diagnosticMBean
operator|=
name|diagnosticMBean
expr_stmt|;
block|}
DECL|method|getName
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|contribute
annotation|@
name|Override
specifier|public
name|void
name|contribute
parameter_list|(
name|Dump
name|dump
parameter_list|)
throws|throws
name|DumpContributionFailedException
block|{
if|if
condition|(
name|heapDumpMethod
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DumpContributionFailedException
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|"Heap dump not enalbed on this JVM"
argument_list|)
throw|;
block|}
try|try
block|{
name|heapDumpMethod
operator|.
name|invoke
argument_list|(
name|diagnosticMBean
argument_list|,
name|dump
operator|.
name|createFile
argument_list|(
literal|"heap.hprof"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DumpContributionFailedException
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|"Failed to generate heap dump"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

