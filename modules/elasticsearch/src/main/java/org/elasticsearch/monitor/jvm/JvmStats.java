begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.jvm
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|builder
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|JvmStats
specifier|public
class|class
name|JvmStats
implements|implements
name|Streamable
implements|,
name|Serializable
implements|,
name|ToXContent
block|{
DECL|field|runtimeMXBean
specifier|private
specifier|static
name|RuntimeMXBean
name|runtimeMXBean
decl_stmt|;
DECL|field|memoryMXBean
specifier|private
specifier|static
name|MemoryMXBean
name|memoryMXBean
decl_stmt|;
DECL|field|threadMXBean
specifier|private
specifier|static
name|ThreadMXBean
name|threadMXBean
decl_stmt|;
static|static
block|{
name|runtimeMXBean
operator|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
expr_stmt|;
name|memoryMXBean
operator|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
expr_stmt|;
name|threadMXBean
operator|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
expr_stmt|;
block|}
DECL|method|jvmStats
specifier|public
specifier|static
name|JvmStats
name|jvmStats
parameter_list|()
block|{
name|JvmStats
name|stats
init|=
operator|new
name|JvmStats
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|runtimeMXBean
operator|.
name|getUptime
argument_list|()
argument_list|)
decl_stmt|;
name|stats
operator|.
name|mem
operator|=
operator|new
name|Mem
argument_list|()
expr_stmt|;
name|MemoryUsage
name|memUsage
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
decl_stmt|;
name|stats
operator|.
name|mem
operator|.
name|heapUsed
operator|=
name|memUsage
operator|.
name|getUsed
argument_list|()
expr_stmt|;
name|stats
operator|.
name|mem
operator|.
name|heapCommitted
operator|=
name|memUsage
operator|.
name|getCommitted
argument_list|()
expr_stmt|;
name|memUsage
operator|=
name|memoryMXBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
expr_stmt|;
name|stats
operator|.
name|mem
operator|.
name|nonHeapUsed
operator|=
name|memUsage
operator|.
name|getUsed
argument_list|()
expr_stmt|;
name|stats
operator|.
name|mem
operator|.
name|nonHeapCommitted
operator|=
name|memUsage
operator|.
name|getCommitted
argument_list|()
expr_stmt|;
name|stats
operator|.
name|threads
operator|=
operator|new
name|Threads
argument_list|()
expr_stmt|;
name|stats
operator|.
name|threads
operator|.
name|count
operator|=
name|threadMXBean
operator|.
name|getThreadCount
argument_list|()
expr_stmt|;
name|stats
operator|.
name|threads
operator|.
name|peakCount
operator|=
name|threadMXBean
operator|.
name|getPeakThreadCount
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|GarbageCollectorMXBean
argument_list|>
name|gcMxBeans
init|=
name|ManagementFactory
operator|.
name|getGarbageCollectorMXBeans
argument_list|()
decl_stmt|;
name|stats
operator|.
name|gc
operator|=
operator|new
name|GarbageCollectors
argument_list|()
expr_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
operator|=
operator|new
name|GarbageCollector
index|[
name|gcMxBeans
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|gc
operator|.
name|collectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GarbageCollectorMXBean
name|gcMxBean
init|=
name|gcMxBeans
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
index|[
name|i
index|]
operator|=
operator|new
name|GarbageCollector
argument_list|()
expr_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
index|[
name|i
index|]
operator|.
name|name
operator|=
name|gcMxBean
operator|.
name|getName
argument_list|()
expr_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
index|[
name|i
index|]
operator|.
name|collectionCount
operator|=
name|gcMxBean
operator|.
name|getCollectionCount
argument_list|()
expr_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
index|[
name|i
index|]
operator|.
name|collectionTime
operator|=
name|gcMxBean
operator|.
name|getCollectionTime
argument_list|()
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
DECL|field|timestamp
name|long
name|timestamp
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|uptime
name|long
name|uptime
decl_stmt|;
DECL|field|mem
name|Mem
name|mem
decl_stmt|;
DECL|field|threads
name|Threads
name|threads
decl_stmt|;
DECL|field|gc
name|GarbageCollectors
name|gc
decl_stmt|;
DECL|method|JvmStats
specifier|private
name|JvmStats
parameter_list|()
block|{     }
DECL|method|JvmStats
specifier|public
name|JvmStats
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|long
name|uptime
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|uptime
operator|=
name|uptime
expr_stmt|;
block|}
DECL|method|timestamp
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|getTimestamp
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|uptime
specifier|public
name|TimeValue
name|uptime
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|uptime
argument_list|)
return|;
block|}
DECL|method|getUptime
specifier|public
name|TimeValue
name|getUptime
parameter_list|()
block|{
return|return
name|uptime
argument_list|()
return|;
block|}
DECL|method|mem
specifier|public
name|Mem
name|mem
parameter_list|()
block|{
return|return
name|this
operator|.
name|mem
return|;
block|}
DECL|method|getMem
specifier|public
name|Mem
name|getMem
parameter_list|()
block|{
return|return
name|mem
argument_list|()
return|;
block|}
DECL|method|threads
specifier|public
name|Threads
name|threads
parameter_list|()
block|{
return|return
name|threads
return|;
block|}
DECL|method|getThreads
specifier|public
name|Threads
name|getThreads
parameter_list|()
block|{
return|return
name|threads
argument_list|()
return|;
block|}
DECL|method|gc
specifier|public
name|GarbageCollectors
name|gc
parameter_list|()
block|{
return|return
name|gc
return|;
block|}
DECL|method|getGc
specifier|public
name|GarbageCollectors
name|getGc
parameter_list|()
block|{
return|return
name|gc
argument_list|()
return|;
block|}
DECL|method|toXContent
annotation|@
name|Override
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"jvm"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"timestamp"
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"uptime"
argument_list|,
name|uptime
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"uptime_in_millis"
argument_list|,
name|uptime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mem
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"mem"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"heap_used"
argument_list|,
name|mem
operator|.
name|heapUsed
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"heap_used_in_bytes"
argument_list|,
name|mem
operator|.
name|heapUsed
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"heap_committed"
argument_list|,
name|mem
operator|.
name|heapCommitted
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"heap_committed_in_bytes"
argument_list|,
name|mem
operator|.
name|heapCommitted
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"non_heap_used"
argument_list|,
name|mem
operator|.
name|nonHeapUsed
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"non_heap_used_in_bytes"
argument_list|,
name|mem
operator|.
name|nonHeapUsed
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"non_heap_committed"
argument_list|,
name|mem
operator|.
name|nonHeapCommitted
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"non_heap_committed_in_bytes"
argument_list|,
name|mem
operator|.
name|nonHeapCommitted
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|threads
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"threads"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"count"
argument_list|,
name|threads
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"peak_count"
argument_list|,
name|threads
operator|.
name|peakCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|gc
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"gc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"collection_count"
argument_list|,
name|gc
operator|.
name|collectionCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"collection_time"
argument_list|,
name|gc
operator|.
name|collectionTime
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"collection_time_in_millis"
argument_list|,
name|gc
operator|.
name|collectionTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"collectors"
argument_list|)
expr_stmt|;
for|for
control|(
name|GarbageCollector
name|collector
range|:
name|gc
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|collector
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"collection_count"
argument_list|,
name|collector
operator|.
name|collectionCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"collection_time"
argument_list|,
name|collector
operator|.
name|collectionTime
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"collection_time_in_millis"
argument_list|,
name|collector
operator|.
name|collectionTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|readJvmStats
specifier|public
specifier|static
name|JvmStats
name|readJvmStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|JvmStats
name|jvmStats
init|=
operator|new
name|JvmStats
argument_list|()
decl_stmt|;
name|jvmStats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|jvmStats
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|timestamp
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|uptime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|mem
operator|=
name|Mem
operator|.
name|readMem
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|threads
operator|=
name|Threads
operator|.
name|readThreads
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|gc
operator|=
name|GarbageCollectors
operator|.
name|readGarbageCollectors
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|uptime
argument_list|)
expr_stmt|;
name|mem
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|threads
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|gc
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|class|GarbageCollectors
specifier|public
specifier|static
class|class
name|GarbageCollectors
implements|implements
name|Streamable
implements|,
name|Serializable
implements|,
name|Iterable
argument_list|<
name|GarbageCollector
argument_list|>
block|{
DECL|field|collectors
specifier|private
name|GarbageCollector
index|[]
name|collectors
decl_stmt|;
DECL|method|GarbageCollectors
name|GarbageCollectors
parameter_list|()
block|{         }
DECL|method|readGarbageCollectors
specifier|public
specifier|static
name|GarbageCollectors
name|readGarbageCollectors
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|GarbageCollectors
name|collectors
init|=
operator|new
name|GarbageCollectors
argument_list|()
decl_stmt|;
name|collectors
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|collectors
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|collectors
operator|=
operator|new
name|GarbageCollector
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|collectors
index|[
name|i
index|]
operator|=
name|GarbageCollector
operator|.
name|readGarbageCollector
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|collectors
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|GarbageCollector
name|gc
range|:
name|collectors
control|)
block|{
name|gc
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|iterator
annotation|@
name|Override
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|forArray
argument_list|(
name|collectors
argument_list|)
return|;
block|}
DECL|method|collectionCount
specifier|public
name|long
name|collectionCount
parameter_list|()
block|{
name|long
name|collectionCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|GarbageCollector
name|gc
range|:
name|collectors
control|)
block|{
name|collectionCount
operator|+=
name|gc
operator|.
name|collectionCount
argument_list|()
expr_stmt|;
block|}
return|return
name|collectionCount
return|;
block|}
DECL|method|collectionTime
specifier|public
name|TimeValue
name|collectionTime
parameter_list|()
block|{
name|long
name|collectionTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|GarbageCollector
name|gc
range|:
name|collectors
control|)
block|{
name|collectionTime
operator|+=
name|gc
operator|.
name|collectionTime
expr_stmt|;
block|}
return|return
operator|new
name|TimeValue
argument_list|(
name|collectionTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
DECL|class|GarbageCollector
specifier|public
specifier|static
class|class
name|GarbageCollector
implements|implements
name|Streamable
implements|,
name|Serializable
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|collectionCount
name|long
name|collectionCount
decl_stmt|;
DECL|field|collectionTime
name|long
name|collectionTime
decl_stmt|;
DECL|method|GarbageCollector
name|GarbageCollector
parameter_list|()
block|{         }
DECL|method|readGarbageCollector
specifier|public
specifier|static
name|GarbageCollector
name|readGarbageCollector
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|GarbageCollector
name|gc
init|=
operator|new
name|GarbageCollector
argument_list|()
decl_stmt|;
name|gc
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|gc
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|collectionCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|collectionTime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|collectionCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|collectionTime
argument_list|)
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
argument_list|()
return|;
block|}
DECL|method|collectionCount
specifier|public
name|long
name|collectionCount
parameter_list|()
block|{
return|return
name|collectionCount
return|;
block|}
DECL|method|getCollectionCount
specifier|public
name|long
name|getCollectionCount
parameter_list|()
block|{
return|return
name|collectionCount
argument_list|()
return|;
block|}
DECL|method|collectionTime
specifier|public
name|TimeValue
name|collectionTime
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|collectionTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
DECL|method|getCollectionTime
specifier|public
name|TimeValue
name|getCollectionTime
parameter_list|()
block|{
return|return
name|collectionTime
argument_list|()
return|;
block|}
block|}
DECL|class|Threads
specifier|public
specifier|static
class|class
name|Threads
implements|implements
name|Streamable
implements|,
name|Serializable
block|{
DECL|field|count
name|int
name|count
decl_stmt|;
DECL|field|peakCount
name|int
name|peakCount
decl_stmt|;
DECL|method|Threads
name|Threads
parameter_list|()
block|{         }
DECL|method|count
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|getCount
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
argument_list|()
return|;
block|}
DECL|method|peakCount
specifier|public
name|int
name|peakCount
parameter_list|()
block|{
return|return
name|peakCount
return|;
block|}
DECL|method|getPeakCount
specifier|public
name|int
name|getPeakCount
parameter_list|()
block|{
return|return
name|peakCount
argument_list|()
return|;
block|}
DECL|method|readThreads
specifier|public
specifier|static
name|Threads
name|readThreads
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
name|threads
init|=
operator|new
name|Threads
argument_list|()
decl_stmt|;
name|threads
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|threads
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|count
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|peakCount
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|peakCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Mem
specifier|public
specifier|static
class|class
name|Mem
implements|implements
name|Streamable
implements|,
name|Serializable
block|{
DECL|field|heapCommitted
name|long
name|heapCommitted
decl_stmt|;
DECL|field|heapUsed
name|long
name|heapUsed
decl_stmt|;
DECL|field|nonHeapCommitted
name|long
name|nonHeapCommitted
decl_stmt|;
DECL|field|nonHeapUsed
name|long
name|nonHeapUsed
decl_stmt|;
DECL|method|Mem
name|Mem
parameter_list|()
block|{         }
DECL|method|readMem
specifier|public
specifier|static
name|Mem
name|readMem
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Mem
name|mem
init|=
operator|new
name|Mem
argument_list|()
decl_stmt|;
name|mem
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|mem
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|heapCommitted
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|heapUsed
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|nonHeapCommitted
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|nonHeapUsed
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|heapCommitted
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|heapUsed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|nonHeapCommitted
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|nonHeapUsed
argument_list|)
expr_stmt|;
block|}
DECL|method|heapCommitted
specifier|public
name|SizeValue
name|heapCommitted
parameter_list|()
block|{
return|return
operator|new
name|SizeValue
argument_list|(
name|heapCommitted
argument_list|)
return|;
block|}
DECL|method|getHeapCommitted
specifier|public
name|SizeValue
name|getHeapCommitted
parameter_list|()
block|{
return|return
name|heapCommitted
argument_list|()
return|;
block|}
DECL|method|heapUsed
specifier|public
name|SizeValue
name|heapUsed
parameter_list|()
block|{
return|return
operator|new
name|SizeValue
argument_list|(
name|heapUsed
argument_list|)
return|;
block|}
DECL|method|getHeapUsed
specifier|public
name|SizeValue
name|getHeapUsed
parameter_list|()
block|{
return|return
name|heapUsed
argument_list|()
return|;
block|}
DECL|method|nonHeapCommitted
specifier|public
name|SizeValue
name|nonHeapCommitted
parameter_list|()
block|{
return|return
operator|new
name|SizeValue
argument_list|(
name|nonHeapCommitted
argument_list|)
return|;
block|}
DECL|method|getNonHeapCommitted
specifier|public
name|SizeValue
name|getNonHeapCommitted
parameter_list|()
block|{
return|return
name|nonHeapCommitted
argument_list|()
return|;
block|}
DECL|method|nonHeapUsed
specifier|public
name|SizeValue
name|nonHeapUsed
parameter_list|()
block|{
return|return
operator|new
name|SizeValue
argument_list|(
name|nonHeapUsed
argument_list|)
return|;
block|}
DECL|method|getNonHeapUsed
specifier|public
name|SizeValue
name|getNonHeapUsed
parameter_list|()
block|{
return|return
name|nonHeapUsed
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

