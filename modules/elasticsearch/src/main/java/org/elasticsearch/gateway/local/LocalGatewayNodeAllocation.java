begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway.local
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|local
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|NodeAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|NodeAllocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|ExtTObjectIntHasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|TObjectIntHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|TObjectIntIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|InternalIndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|IndexStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
operator|.
name|TransportNodesListShardStoreMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|LocalGatewayNodeAllocation
specifier|public
class|class
name|LocalGatewayNodeAllocation
extends|extends
name|NodeAllocation
block|{
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|listGatewayStartedShards
specifier|private
specifier|final
name|TransportNodesListGatewayStartedShards
name|listGatewayStartedShards
decl_stmt|;
DECL|field|listShardStoreMetaData
specifier|private
specifier|final
name|TransportNodesListShardStoreMetaData
name|listShardStoreMetaData
decl_stmt|;
DECL|field|cachedStores
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ShardId
argument_list|,
name|ConcurrentMap
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndexStore
operator|.
name|StoreFilesMetaData
argument_list|>
argument_list|>
name|cachedStores
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|listTimeout
specifier|private
specifier|final
name|TimeValue
name|listTimeout
decl_stmt|;
DECL|field|initialShards
specifier|private
specifier|final
name|String
name|initialShards
decl_stmt|;
DECL|method|LocalGatewayNodeAllocation
annotation|@
name|Inject
specifier|public
name|LocalGatewayNodeAllocation
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|TransportNodesListGatewayStartedShards
name|listGatewayStartedShards
parameter_list|,
name|TransportNodesListShardStoreMetaData
name|listShardStoreMetaData
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|listGatewayStartedShards
operator|=
name|listGatewayStartedShards
expr_stmt|;
name|this
operator|.
name|listShardStoreMetaData
operator|=
name|listShardStoreMetaData
expr_stmt|;
name|this
operator|.
name|listTimeout
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"list_timeout"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialShards
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"initial_shards"
argument_list|,
literal|"quorum"
argument_list|)
expr_stmt|;
block|}
DECL|method|applyStartedShards
annotation|@
name|Override
specifier|public
name|void
name|applyStartedShards
parameter_list|(
name|NodeAllocations
name|nodeAllocations
parameter_list|,
name|RoutingNodes
name|routingNodes
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ShardRouting
argument_list|>
name|startedShards
parameter_list|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|startedShards
control|)
block|{
name|cachedStores
operator|.
name|remove
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|applyFailedShards
annotation|@
name|Override
specifier|public
name|void
name|applyFailedShards
parameter_list|(
name|NodeAllocations
name|nodeAllocations
parameter_list|,
name|RoutingNodes
name|routingNodes
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ShardRouting
argument_list|>
name|failedShards
parameter_list|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|failedShards
control|)
block|{
name|cachedStores
operator|.
name|remove
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ShardRouting
name|failedShard
range|:
name|failedShards
control|)
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|routingNodes
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|failedShard
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|routingNodes
operator|.
name|blocks
argument_list|()
operator|.
name|hasIndexBlock
argument_list|(
name|indexRoutingTable
operator|.
name|index
argument_list|()
argument_list|,
name|LocalGateway
operator|.
name|INDEX_NOT_RECOVERED_BLOCK
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// we are still in the initial allocation, find another node with existing shards
comment|// all primary are unassigned for the index, see if we can allocate it on existing nodes, if not, don't assign
name|Set
argument_list|<
name|String
argument_list|>
name|nodesIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|nodesIds
operator|.
name|addAll
argument_list|(
name|nodes
operator|.
name|dataNodes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|TransportNodesListGatewayStartedShards
operator|.
name|NodesLocalGatewayStartedShards
name|nodesState
init|=
name|listGatewayStartedShards
operator|.
name|list
argument_list|(
name|nodesIds
argument_list|,
literal|null
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
comment|// make a list of ShardId to Node, each one from the latest version
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Long
argument_list|>
name|t
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeLocalGatewayStartedShards
name|nodeState
range|:
name|nodesState
control|)
block|{
if|if
condition|(
name|nodeState
operator|.
name|state
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// we don't want to reallocate to the node we failed on
if|if
condition|(
name|nodeState
operator|.
name|node
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|equals
argument_list|(
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// go and find
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|nodeState
operator|.
name|state
argument_list|()
operator|.
name|shards
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|>
name|t
operator|.
name|v2
argument_list|()
operator|.
name|longValue
argument_list|()
condition|)
block|{
name|t
operator|=
operator|new
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Long
argument_list|>
argument_list|(
name|nodeState
operator|.
name|node
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
comment|// we found a node to allocate to, do it
name|RoutingNode
name|currentRoutingNode
init|=
name|routingNodes
operator|.
name|nodesToShards
argument_list|()
operator|.
name|get
argument_list|(
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentRoutingNode
operator|==
literal|null
condition|)
block|{
comment|// already failed (might be called several times for the same shard)
continue|continue;
block|}
comment|// find the shard and cancel relocation
name|Iterator
argument_list|<
name|MutableShardRouting
argument_list|>
name|shards
init|=
name|currentRoutingNode
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|shards
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|shard
init|=
name|shards
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|)
condition|)
block|{
name|shard
operator|.
name|deassignNode
argument_list|()
expr_stmt|;
name|shards
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|RoutingNode
name|targetNode
init|=
name|routingNodes
operator|.
name|nodesToShards
argument_list|()
operator|.
name|get
argument_list|(
name|t
operator|.
name|v1
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|targetNode
operator|.
name|add
argument_list|(
operator|new
name|MutableShardRouting
argument_list|(
name|failedShard
operator|.
name|index
argument_list|()
argument_list|,
name|failedShard
operator|.
name|id
argument_list|()
argument_list|,
name|targetNode
operator|.
name|nodeId
argument_list|()
argument_list|,
name|failedShard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|failedShard
operator|.
name|primary
argument_list|()
argument_list|,
name|INITIALIZING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|allocateUnassigned
annotation|@
name|Override
specifier|public
name|boolean
name|allocateUnassigned
parameter_list|(
name|NodeAllocations
name|nodeAllocations
parameter_list|,
name|RoutingNodes
name|routingNodes
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|IndexRoutingTable
name|indexRoutingTable
range|:
name|routingNodes
operator|.
name|routingTable
argument_list|()
control|)
block|{
comment|// only do the allocation if there is a local "INDEX NOT RECOVERED" block
if|if
condition|(
operator|!
name|routingNodes
operator|.
name|blocks
argument_list|()
operator|.
name|hasIndexBlock
argument_list|(
name|indexRoutingTable
operator|.
name|index
argument_list|()
argument_list|,
name|LocalGateway
operator|.
name|INDEX_NOT_RECOVERED_BLOCK
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|indexRoutingTable
operator|.
name|allPrimaryShardsUnassigned
argument_list|()
condition|)
block|{
comment|// all primary are unassigned for the index, see if we can allocate it on existing nodes, if not, don't assign
name|Set
argument_list|<
name|String
argument_list|>
name|nodesIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|nodesIds
operator|.
name|addAll
argument_list|(
name|nodes
operator|.
name|dataNodes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|TransportNodesListGatewayStartedShards
operator|.
name|NodesLocalGatewayStartedShards
name|nodesState
init|=
name|listGatewayStartedShards
operator|.
name|list
argument_list|(
name|nodesIds
argument_list|,
literal|null
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodesState
operator|.
name|failures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|FailedNodeException
name|failedNodeException
range|:
name|nodesState
operator|.
name|failures
argument_list|()
control|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to fetch shards state from node"
argument_list|,
name|failedNodeException
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make a list of ShardId to Node, each one from the latest version
name|Map
argument_list|<
name|ShardId
argument_list|,
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Long
argument_list|>
argument_list|>
name|shards
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// and a list of the number of shard instances
name|TObjectIntHashMap
argument_list|<
name|ShardId
argument_list|>
name|shardsCounts
init|=
operator|new
name|ExtTObjectIntHasMap
argument_list|<
name|ShardId
argument_list|>
argument_list|()
operator|.
name|defaultReturnValue
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeLocalGatewayStartedShards
name|nodeState
range|:
name|nodesState
control|)
block|{
if|if
condition|(
name|nodeState
operator|.
name|state
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|nodeState
operator|.
name|state
argument_list|()
operator|.
name|shards
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ShardId
name|shardId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|indexRoutingTable
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|shardsCounts
operator|.
name|adjustOrPutValue
argument_list|(
name|shardId
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Long
argument_list|>
name|t
init|=
name|shards
operator|.
name|get
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|>
name|t
operator|.
name|v2
argument_list|()
operator|.
name|longValue
argument_list|()
condition|)
block|{
name|t
operator|=
operator|new
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Long
argument_list|>
argument_list|(
name|nodeState
operator|.
name|node
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// check if we managed to allocate to all of them, if not, move all relevant shards to ignored
if|if
condition|(
name|shards
operator|.
name|size
argument_list|()
operator|<
name|indexRoutingTable
operator|.
name|shards
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|moveIndexToIgnoreUnassigned
argument_list|(
name|routingNodes
argument_list|,
name|indexRoutingTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// check if the counts meets the minimum set
name|int
name|requiredNumber
init|=
literal|1
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|routingNodes
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexRoutingTable
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"quorum"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|>
literal|1
condition|)
block|{
name|requiredNumber
operator|=
operator|(
operator|(
literal|1
operator|+
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|)
operator|/
literal|2
operator|)
operator|+
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"full"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
name|requiredNumber
operator|=
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"full-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|>
literal|1
condition|)
block|{
name|requiredNumber
operator|=
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|requiredNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|initialShards
argument_list|)
expr_stmt|;
block|}
name|boolean
name|allocate
init|=
literal|true
decl_stmt|;
for|for
control|(
name|TObjectIntIterator
argument_list|<
name|ShardId
argument_list|>
name|it
init|=
name|shardsCounts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|advance
argument_list|()
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|<
name|requiredNumber
condition|)
block|{
name|allocate
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocate
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
comment|// we found all nodes to allocate to, do the allocation
for|for
control|(
name|Iterator
argument_list|<
name|MutableShardRouting
argument_list|>
name|it
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MutableShardRouting
name|shardRouting
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
name|DiscoveryNode
name|node
init|=
name|shards
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|v1
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}] initial allocation to [{}]"
argument_list|,
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|RoutingNode
name|routingNode
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|routingNode
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|moveIndexToIgnoreUnassigned
argument_list|(
name|routingNodes
argument_list|,
name|indexRoutingTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|routingNodes
operator|.
name|hasUnassigned
argument_list|()
condition|)
block|{
return|return
name|changed
return|;
block|}
name|Iterator
argument_list|<
name|MutableShardRouting
argument_list|>
name|unassignedIterator
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|unassignedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|shard
init|=
name|unassignedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|InternalIndexService
name|indexService
init|=
operator|(
name|InternalIndexService
operator|)
name|indicesService
operator|.
name|indexService
argument_list|(
name|shard
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// if the store is not persistent, it makes no sense to test for special allocation
if|if
condition|(
operator|!
name|indexService
operator|.
name|store
argument_list|()
operator|.
name|persistent
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// pre-check if it can be allocated to any node that currently exists, so we won't list the store for it for nothing
name|boolean
name|canBeAllocatedToAtLeastOneNode
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|discoNode
range|:
name|nodes
operator|.
name|dataNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|RoutingNode
name|node
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|discoNode
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// if its THROTTLING, we are not going to allocate it to this node, so ignore it as well
if|if
condition|(
name|nodeAllocations
operator|.
name|canAllocate
argument_list|(
name|shard
argument_list|,
name|node
argument_list|,
name|routingNodes
argument_list|)
operator|.
name|allocate
argument_list|()
condition|)
block|{
name|canBeAllocatedToAtLeastOneNode
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|canBeAllocatedToAtLeastOneNode
condition|)
block|{
continue|continue;
block|}
name|ConcurrentMap
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndexStore
operator|.
name|StoreFilesMetaData
argument_list|>
name|shardStores
init|=
name|buildShardStores
argument_list|(
name|nodes
argument_list|,
name|shard
argument_list|)
decl_stmt|;
name|long
name|lastSizeMatched
init|=
literal|0
decl_stmt|;
name|DiscoveryNode
name|lastDiscoNodeMatched
init|=
literal|null
decl_stmt|;
name|RoutingNode
name|lastNodeMatched
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndexStore
operator|.
name|StoreFilesMetaData
argument_list|>
name|nodeStoreEntry
range|:
name|shardStores
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DiscoveryNode
name|discoNode
init|=
name|nodeStoreEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|IndexStore
operator|.
name|StoreFilesMetaData
name|storeFilesMetaData
init|=
name|nodeStoreEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{}: checking node [{}]"
argument_list|,
name|shard
argument_list|,
name|discoNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|storeFilesMetaData
operator|==
literal|null
condition|)
block|{
comment|// already allocated on that node...
continue|continue;
block|}
name|RoutingNode
name|node
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|discoNode
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// check if we can allocate on that node...
comment|// we only check for NO, since if this node is THROTTLING and it has enough "same data"
comment|// then we will try and assign it next time
if|if
condition|(
name|nodeAllocations
operator|.
name|canAllocate
argument_list|(
name|shard
argument_list|,
name|node
argument_list|,
name|routingNodes
argument_list|)
operator|==
name|Decision
operator|.
name|NO
condition|)
block|{
continue|continue;
block|}
comment|// if it is already allocated, we can't assign to it...
if|if
condition|(
name|storeFilesMetaData
operator|.
name|allocated
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|shard
operator|.
name|primary
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|primaryShard
init|=
name|routingNodes
operator|.
name|findPrimaryForReplica
argument_list|(
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryShard
operator|!=
literal|null
operator|&&
name|primaryShard
operator|.
name|active
argument_list|()
condition|)
block|{
name|DiscoveryNode
name|primaryNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|primaryShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryNode
operator|!=
literal|null
condition|)
block|{
name|IndexStore
operator|.
name|StoreFilesMetaData
name|primaryNodeStore
init|=
name|shardStores
operator|.
name|get
argument_list|(
name|primaryNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryNodeStore
operator|!=
literal|null
operator|&&
name|primaryNodeStore
operator|.
name|allocated
argument_list|()
condition|)
block|{
name|long
name|sizeMatched
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|storeFileMetaData
range|:
name|storeFilesMetaData
control|)
block|{
if|if
condition|(
name|primaryNodeStore
operator|.
name|fileExists
argument_list|(
name|storeFileMetaData
operator|.
name|name
argument_list|()
argument_list|)
operator|&&
name|primaryNodeStore
operator|.
name|file
argument_list|(
name|storeFileMetaData
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
operator|==
name|storeFileMetaData
operator|.
name|length
argument_list|()
condition|)
block|{
name|sizeMatched
operator|+=
name|storeFileMetaData
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sizeMatched
operator|>
name|lastSizeMatched
condition|)
block|{
name|lastSizeMatched
operator|=
name|sizeMatched
expr_stmt|;
name|lastDiscoNodeMatched
operator|=
name|discoNode
expr_stmt|;
name|lastNodeMatched
operator|=
name|node
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|lastNodeMatched
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nodeAllocations
operator|.
name|canAllocate
argument_list|(
name|shard
argument_list|,
name|lastNodeMatched
argument_list|,
name|routingNodes
argument_list|)
operator|==
name|NodeAllocation
operator|.
name|Decision
operator|.
name|THROTTLE
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: throttling allocation [{}] to [{}] in order to reuse its unallocated persistent store with total_size [{}]"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|lastDiscoNodeMatched
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|lastSizeMatched
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we are throttling this, but we have enough to allocate to this node, ignore it for now
name|unassignedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|routingNodes
operator|.
name|ignoredUnassigned
argument_list|()
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: allocating [{}] to [{}] in order to reuse its unallocated persistent store with total_size [{}]"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|lastDiscoNodeMatched
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|lastSizeMatched
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we found a match
name|changed
operator|=
literal|true
expr_stmt|;
name|lastNodeMatched
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|moveIndexToIgnoreUnassigned
specifier|private
name|void
name|moveIndexToIgnoreUnassigned
parameter_list|(
name|RoutingNodes
name|routingNodes
parameter_list|,
name|IndexRoutingTable
name|indexRoutingTable
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|MutableShardRouting
argument_list|>
name|it
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MutableShardRouting
name|shardRouting
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|index
argument_list|()
operator|.
name|equals
argument_list|(
name|indexRoutingTable
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|routingNodes
operator|.
name|ignoredUnassigned
argument_list|()
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|buildShardStores
specifier|private
name|ConcurrentMap
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndexStore
operator|.
name|StoreFilesMetaData
argument_list|>
name|buildShardStores
parameter_list|(
name|DiscoveryNodes
name|nodes
parameter_list|,
name|MutableShardRouting
name|shard
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndexStore
operator|.
name|StoreFilesMetaData
argument_list|>
name|shardStores
init|=
name|cachedStores
operator|.
name|get
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardStores
operator|==
literal|null
condition|)
block|{
name|shardStores
operator|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|TransportNodesListShardStoreMetaData
operator|.
name|NodesStoreFilesMetaData
name|nodesStoreFilesMetaData
init|=
name|listShardStoreMetaData
operator|.
name|list
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|nodes
operator|.
name|dataNodes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|listTimeout
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|nodesStoreFilesMetaData
operator|.
name|failures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|shard
operator|+
literal|": failures when trying to list stores on nodes:"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesStoreFilesMetaData
operator|.
name|failures
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|nodesStoreFilesMetaData
operator|.
name|failures
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|ConnectTransportException
condition|)
block|{
continue|continue;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n    -> "
argument_list|)
operator|.
name|append
argument_list|(
name|nodesStoreFilesMetaData
operator|.
name|failures
argument_list|()
index|[
name|i
index|]
operator|.
name|getDetailedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TransportNodesListShardStoreMetaData
operator|.
name|NodeStoreFilesMetaData
name|nodeStoreFilesMetaData
range|:
name|nodesStoreFilesMetaData
control|)
block|{
name|shardStores
operator|.
name|put
argument_list|(
name|nodeStoreFilesMetaData
operator|.
name|node
argument_list|()
argument_list|,
name|nodeStoreFilesMetaData
operator|.
name|storeFilesMetaData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cachedStores
operator|.
name|put
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|shardStores
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// clean nodes that have failed
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|shardStores
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|nodes
operator|.
name|nodeExists
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|shardStores
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we have stored cached from before, see if the nodes changed, if they have, go fetch again
name|Set
argument_list|<
name|String
argument_list|>
name|fetchedNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
operator|.
name|dataNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shardStores
operator|.
name|containsKey
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|fetchedNodes
operator|.
name|add
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|fetchedNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TransportNodesListShardStoreMetaData
operator|.
name|NodesStoreFilesMetaData
name|nodesStoreFilesMetaData
init|=
name|listShardStoreMetaData
operator|.
name|list
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|fetchedNodes
argument_list|,
name|listTimeout
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|nodesStoreFilesMetaData
operator|.
name|failures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|shard
operator|+
literal|": failures when trying to list stores on nodes:"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesStoreFilesMetaData
operator|.
name|failures
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|nodesStoreFilesMetaData
operator|.
name|failures
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|ConnectTransportException
condition|)
block|{
continue|continue;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n    -> "
argument_list|)
operator|.
name|append
argument_list|(
name|nodesStoreFilesMetaData
operator|.
name|failures
argument_list|()
index|[
name|i
index|]
operator|.
name|getDetailedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|trace
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TransportNodesListShardStoreMetaData
operator|.
name|NodeStoreFilesMetaData
name|nodeStoreFilesMetaData
range|:
name|nodesStoreFilesMetaData
control|)
block|{
name|shardStores
operator|.
name|put
argument_list|(
name|nodeStoreFilesMetaData
operator|.
name|node
argument_list|()
argument_list|,
name|nodeStoreFilesMetaData
operator|.
name|storeFilesMetaData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|shardStores
return|;
block|}
block|}
end_class

end_unit

