begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway.local
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|local
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataCreateIndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|MutableShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|builder
operator|.
name|BinaryXContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|Gateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|local
operator|.
name|LocalIndexGatewayModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|LocalGateway
specifier|public
class|class
name|LocalGateway
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|Gateway
argument_list|>
implements|implements
name|Gateway
implements|,
name|ClusterStateListener
block|{
DECL|field|INDEX_NOT_RECOVERED_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|INDEX_NOT_RECOVERED_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|3
argument_list|,
literal|"index not recovered (not enough nodes with shards allocated found)"
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
decl_stmt|;
DECL|field|location
specifier|private
name|File
name|location
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|nodeEnv
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnv
decl_stmt|;
DECL|field|createIndexService
specifier|private
specifier|final
name|MetaDataCreateIndexService
name|createIndexService
decl_stmt|;
DECL|field|listGatewayState
specifier|private
specifier|final
name|TransportNodesListGatewayState
name|listGatewayState
decl_stmt|;
DECL|field|currentState
specifier|private
specifier|volatile
name|LocalGatewayState
name|currentState
decl_stmt|;
DECL|method|LocalGateway
annotation|@
name|Inject
specifier|public
name|LocalGateway
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|MetaDataCreateIndexService
name|createIndexService
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportNodesListGatewayState
name|listGatewayState
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|createIndexService
operator|=
name|createIndexService
expr_stmt|;
name|this
operator|.
name|nodeEnv
operator|=
name|nodeEnv
expr_stmt|;
name|this
operator|.
name|listGatewayState
operator|=
name|listGatewayState
operator|.
name|initGateway
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|type
annotation|@
name|Override
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
literal|"local"
return|;
block|}
DECL|method|currentState
specifier|public
name|LocalGatewayState
name|currentState
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentState
return|;
block|}
DECL|method|doStart
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
comment|// if this is not a possible master node or data node, bail, we won't save anything here...
if|if
condition|(
operator|!
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|||
operator|!
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|dataNode
argument_list|()
condition|)
block|{
name|location
operator|=
literal|null
expr_stmt|;
return|return;
block|}
comment|// create the location where the state will be stored
name|this
operator|.
name|location
operator|=
operator|new
name|File
argument_list|(
name|nodeEnv
operator|.
name|nodeFile
argument_list|()
argument_list|,
literal|"_state"
argument_list|)
expr_stmt|;
name|this
operator|.
name|location
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|version
init|=
name|findLatestStateVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|currentState
operator|=
name|readState
argument_list|(
name|Streams
operator|.
name|copyToByteArray
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"state-"
operator|+
name|version
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read local state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|clusterService
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|clusterService
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|doClose
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
DECL|method|performStateRecovery
annotation|@
name|Override
specifier|public
name|void
name|performStateRecovery
parameter_list|(
specifier|final
name|GatewayStateRecoveredListener
name|listener
parameter_list|)
throws|throws
name|GatewayException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodesIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|nodesIds
operator|.
name|addAll
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|dataNodes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|nodesIds
operator|.
name|addAll
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|TransportNodesListGatewayState
operator|.
name|NodesLocalGatewayState
name|nodesState
init|=
name|listGatewayState
operator|.
name|list
argument_list|(
name|nodesIds
argument_list|,
literal|null
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|TransportNodesListGatewayState
operator|.
name|NodeLocalGatewayState
name|electedState
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TransportNodesListGatewayState
operator|.
name|NodeLocalGatewayState
name|nodeState
range|:
name|nodesState
control|)
block|{
if|if
condition|(
name|nodeState
operator|.
name|state
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|electedState
operator|==
literal|null
condition|)
block|{
name|electedState
operator|=
name|nodeState
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodeState
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
operator|>
name|electedState
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
condition|)
block|{
name|electedState
operator|=
name|nodeState
expr_stmt|;
block|}
block|}
if|if
condition|(
name|electedState
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"no state elected"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"elected state from [{}]"
argument_list|,
name|electedState
operator|.
name|node
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LocalGatewayState
name|state
init|=
name|electedState
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|indicesCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"local-gateway-elected-state"
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|newMetaDataBuilder
argument_list|()
operator|.
name|metaData
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
comment|// mark the metadata as read from gateway
name|metaDataBuilder
operator|.
name|markAsRecoveredFromGateway
argument_list|()
expr_stmt|;
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|version
argument_list|(
name|state
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaDataBuilder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
comment|// go over the meta data and create indices, we don't really need to copy over
comment|// the meta data per index, since we create the index and it will be added automatically
for|for
control|(
specifier|final
name|IndexMetaData
name|indexMetaData
range|:
name|state
operator|.
name|metaData
argument_list|()
control|)
block|{
try|try
block|{
name|createIndexService
operator|.
name|createIndex
argument_list|(
operator|new
name|MetaDataCreateIndexService
operator|.
name|Request
argument_list|(
literal|"gateway"
argument_list|,
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|indexMetaData
operator|.
name|settings
argument_list|()
argument_list|)
operator|.
name|mappingsCompressed
argument_list|(
name|indexMetaData
operator|.
name|mappings
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|INDEX_NOT_RECOVERED_BLOCK
argument_list|)
argument_list|)
operator|.
name|timeout
argument_list|(
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MetaDataCreateIndexService
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MetaDataCreateIndexService
operator|.
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|indicesCounter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to create index [{}]"
argument_list|,
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to create index [{}]"
argument_list|,
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|suggestIndexGateway
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|suggestIndexGateway
parameter_list|()
block|{
return|return
name|LocalIndexGatewayModule
operator|.
name|class
return|;
block|}
DECL|method|reset
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|Exception
block|{     }
DECL|method|clusterChanged
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
specifier|final
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
comment|// nothing to do until we actually recover from hte gateway
if|if
condition|(
operator|!
name|event
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|recoveredFromGateway
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// go over the indices, if they are blocked, and all are allocated, update the cluster state that it is no longer blocked
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|entry
range|:
name|event
operator|.
name|state
argument_list|()
operator|.
name|blocks
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|index
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|indexBlocks
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexBlocks
operator|.
name|contains
argument_list|(
name|INDEX_NOT_RECOVERED_BLOCK
argument_list|)
condition|)
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|!=
literal|null
operator|&&
name|indexRoutingTable
operator|.
name|allPrimaryShardsActive
argument_list|()
condition|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"remove-index-block (all primary shards active for ["
operator|+
name|index
operator|+
literal|"])"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|ClusterBlocks
operator|.
name|Builder
name|blocks
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
decl_stmt|;
name|blocks
operator|.
name|removeIndexBlock
argument_list|(
name|index
argument_list|,
name|INDEX_NOT_RECOVERED_BLOCK
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|blocks
argument_list|(
name|blocks
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|event
operator|.
name|routingTableChanged
argument_list|()
operator|&&
operator|!
name|event
operator|.
name|metaDataChanged
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// builder the current state
name|LocalGatewayState
operator|.
name|Builder
name|builder
init|=
name|LocalGatewayState
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentState
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|version
argument_list|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|metaData
argument_list|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove from the current state all the shards that are primary and started, we won't need them anymore
for|for
control|(
name|IndexRoutingTable
name|indexRoutingTable
range|:
name|event
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
control|)
block|{
for|for
control|(
name|IndexShardRoutingTable
name|indexShardRoutingTable
range|:
name|indexRoutingTable
control|)
block|{
if|if
condition|(
name|indexShardRoutingTable
operator|.
name|primaryShard
argument_list|()
operator|.
name|active
argument_list|()
condition|)
block|{
name|builder
operator|.
name|remove
argument_list|(
name|indexShardRoutingTable
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now, add all the ones that are active and on this node
name|RoutingNode
name|routingNode
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routingNode
operator|!=
literal|null
condition|)
block|{
comment|// out node is not in play yet...
for|for
control|(
name|MutableShardRouting
name|shardRouting
range|:
name|routingNode
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|active
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|event
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|LocalGatewayState
name|stateToWrite
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|BinaryXContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|contentBinaryBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|xContentBuilder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|xContentBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|LocalGatewayState
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|stateToWrite
argument_list|,
name|xContentBuilder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|xContentBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|File
name|stateFile
init|=
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"state-"
operator|+
name|event
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|stateFile
argument_list|)
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|xContentBuilder
operator|.
name|unsafeBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|xContentBuilder
operator|.
name|unsafeBytesLength
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystemUtils
operator|.
name|syncFile
argument_list|(
name|stateFile
argument_list|)
expr_stmt|;
name|currentState
operator|=
name|stateToWrite
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to write updated state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// delete all the other files
name|File
index|[]
name|files
init|=
name|location
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|"state-"
operator|+
name|event
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|findLatestStateVersion
specifier|private
name|long
name|findLatestStateVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|index
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|File
name|stateFile
range|:
name|location
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[findLatestState]: Processing ["
operator|+
name|stateFile
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|stateFile
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"state-"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|fileIndex
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileIndex
operator|>=
name|index
condition|)
block|{
comment|// try and read the meta data
try|try
block|{
name|readState
argument_list|(
name|Streams
operator|.
name|copyToByteArray
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|stateFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
name|fileIndex
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[findLatestState]: Failed to read state from ["
operator|+
name|name
operator|+
literal|"], ignoring..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|index
return|;
block|}
DECL|method|readState
specifier|private
name|LocalGatewayState
name|readState
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|LocalGatewayState
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
name|settings
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

