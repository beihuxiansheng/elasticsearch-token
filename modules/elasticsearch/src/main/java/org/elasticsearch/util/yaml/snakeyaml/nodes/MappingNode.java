begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.nodes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|Mark
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a map.  *<p>  * A map is a collection of unsorted key-value pairs.  *</p>  */
end_comment

begin_class
DECL|class|MappingNode
specifier|public
class|class
name|MappingNode
extends|extends
name|CollectionNode
block|{
DECL|field|keyType
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|keyType
decl_stmt|;
DECL|field|valueType
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|valueType
decl_stmt|;
DECL|field|value
specifier|private
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|value
decl_stmt|;
DECL|method|MappingNode
specifier|public
name|MappingNode
parameter_list|(
name|Tag
name|tag
parameter_list|,
name|boolean
name|resolved
parameter_list|,
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|value
parameter_list|,
name|Mark
name|startMark
parameter_list|,
name|Mark
name|endMark
parameter_list|,
name|Boolean
name|flowStyle
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|,
name|startMark
argument_list|,
name|endMark
argument_list|,
name|flowStyle
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"value in a Node is required."
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|keyType
operator|=
name|Object
operator|.
name|class
expr_stmt|;
name|valueType
operator|=
name|Object
operator|.
name|class
expr_stmt|;
name|this
operator|.
name|resolved
operator|=
name|resolved
expr_stmt|;
block|}
DECL|method|MappingNode
specifier|public
name|MappingNode
parameter_list|(
name|Tag
name|tag
parameter_list|,
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|value
parameter_list|,
name|Boolean
name|flowStyle
parameter_list|)
block|{
name|this
argument_list|(
name|tag
argument_list|,
literal|true
argument_list|,
name|value
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|flowStyle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodeId
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|NodeId
operator|.
name|mapping
return|;
block|}
comment|/**      * Returns the entries of this map.      *      * @return List of entries.      */
DECL|method|getValue
specifier|public
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|getValue
parameter_list|()
block|{
for|for
control|(
name|NodeTuple
name|nodes
range|:
name|value
control|)
block|{
name|nodes
operator|.
name|getKeyNode
argument_list|()
operator|.
name|setType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|getValueNode
argument_list|()
operator|.
name|setType
argument_list|(
name|valueType
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|setValue
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|merge
parameter_list|)
block|{
name|value
operator|=
name|merge
expr_stmt|;
block|}
DECL|method|setKeyType
specifier|public
name|void
name|setKeyType
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|keyType
parameter_list|)
block|{
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
block|}
DECL|method|setValueType
specifier|public
name|void
name|setValueType
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|valueType
parameter_list|)
block|{
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|values
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeTuple
name|node
range|:
name|getValue
argument_list|()
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"{ key="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|node
operator|.
name|getKeyNode
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"; value=Node<"
argument_list|)
expr_stmt|;
comment|// to avoid overflow in case of recursive structures
name|buf
operator|.
name|append
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|node
operator|.
name|getValueNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"> }"
argument_list|)
expr_stmt|;
block|}
name|values
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
literal|"<"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" (tag="
operator|+
name|getTag
argument_list|()
operator|+
literal|", values="
operator|+
name|values
operator|+
literal|")>"
return|;
block|}
block|}
end_class

end_unit

