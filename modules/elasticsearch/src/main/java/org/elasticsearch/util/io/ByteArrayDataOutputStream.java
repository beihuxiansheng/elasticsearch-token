begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
DECL|class|ByteArrayDataOutputStream
specifier|public
class|class
name|ByteArrayDataOutputStream
extends|extends
name|DataOutputStream
block|{
comment|/**      * A thread local based cache of {@link ByteArrayDataOutputStream}.      */
DECL|class|Cached
specifier|public
specifier|static
class|class
name|Cached
block|{
DECL|field|cache
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|ByteArrayDataOutputStream
argument_list|>
name|cache
init|=
operator|new
name|ThreadLocal
argument_list|<
name|ByteArrayDataOutputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ByteArrayDataOutputStream
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayDataOutputStream
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**          * Returns the cached thread local byte strean, with its internal stream cleared.          */
DECL|method|cached
specifier|public
specifier|static
name|ByteArrayDataOutputStream
name|cached
parameter_list|()
block|{
name|ByteArrayDataOutputStream
name|os
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
operator|(
operator|(
name|FastByteArrayOutputStream
operator|)
name|os
operator|.
name|out
operator|)
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|os
return|;
block|}
block|}
DECL|method|ByteArrayDataOutputStream
specifier|public
name|ByteArrayDataOutputStream
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|FastByteArrayOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|copiedByteArray
specifier|public
name|byte
index|[]
name|copiedByteArray
parameter_list|()
block|{
return|return
name|outputStream
argument_list|()
operator|.
name|copiedByteArray
argument_list|()
return|;
block|}
DECL|method|unsafeByteArray
specifier|public
name|byte
index|[]
name|unsafeByteArray
parameter_list|()
block|{
return|return
name|outputStream
argument_list|()
operator|.
name|unsafeByteArray
argument_list|()
return|;
block|}
DECL|method|outputStream
specifier|private
name|FastByteArrayOutputStream
name|outputStream
parameter_list|()
block|{
return|return
operator|(
name|FastByteArrayOutputStream
operator|)
name|out
return|;
block|}
block|}
end_class

end_unit

