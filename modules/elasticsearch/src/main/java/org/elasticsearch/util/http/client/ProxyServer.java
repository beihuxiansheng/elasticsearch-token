begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_comment
comment|/**  * Represents a proxy server.  */
end_comment

begin_class
DECL|class|ProxyServer
specifier|public
class|class
name|ProxyServer
block|{
DECL|enum|Protocol
specifier|public
enum|enum
name|Protocol
block|{
DECL|enum constant|HTTP
DECL|enum constant|HTTPS
name|HTTP
argument_list|(
literal|"http"
argument_list|)
block|,
name|HTTPS
argument_list|(
literal|"https"
argument_list|)
block|;
DECL|field|protocol
specifier|private
specifier|final
name|String
name|protocol
decl_stmt|;
DECL|method|Protocol
specifier|private
name|Protocol
parameter_list|(
specifier|final
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
DECL|method|getProtocol
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getProtocol
argument_list|()
return|;
block|}
block|}
DECL|field|protocol
specifier|private
specifier|final
name|Protocol
name|protocol
decl_stmt|;
DECL|field|host
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|method|ProxyServer
specifier|public
name|ProxyServer
parameter_list|(
specifier|final
name|Protocol
name|protocol
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|ProxyServer
specifier|public
name|ProxyServer
parameter_list|(
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|)
block|{
name|this
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
DECL|method|getProtocol
specifier|public
name|Protocol
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
DECL|method|getProtocolAsString
specifier|public
name|String
name|getProtocolAsString
parameter_list|()
block|{
return|return
name|protocol
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getHost
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|getPort
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * Convert from Java java.net.Proxy object.      *      * @param proxy      * @return A ProxyServer object or null if the proxy object can not converted.      */
DECL|method|fromProxy
specifier|public
specifier|static
specifier|final
name|ProxyServer
name|fromProxy
parameter_list|(
specifier|final
name|Proxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|==
literal|null
operator|||
name|proxy
operator|.
name|type
argument_list|()
operator|==
name|Proxy
operator|.
name|Type
operator|.
name|DIRECT
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|proxy
operator|.
name|type
argument_list|()
operator|!=
name|Proxy
operator|.
name|Type
operator|.
name|HTTP
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only DIRECT and HTTP Proxies are supported!"
argument_list|)
throw|;
block|}
specifier|final
name|SocketAddress
name|sa
init|=
name|proxy
operator|.
name|address
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sa
operator|instanceof
name|InetSocketAddress
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only Internet Address sockets are supported!"
argument_list|)
throw|;
block|}
name|InetSocketAddress
name|isa
init|=
operator|(
name|InetSocketAddress
operator|)
name|sa
decl_stmt|;
if|if
condition|(
name|isa
operator|.
name|isUnresolved
argument_list|()
condition|)
block|{
return|return
operator|new
name|ProxyServer
argument_list|(
name|isa
operator|.
name|getHostName
argument_list|()
argument_list|,
name|isa
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ProxyServer
argument_list|(
name|isa
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|isa
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s://%s:%d"
argument_list|,
name|protocol
operator|.
name|toString
argument_list|()
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
return|;
block|}
block|}
end_class

end_unit

