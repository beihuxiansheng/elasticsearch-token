begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_comment
comment|/**  * The base class for hashtables of primitive values.  Since there is  * no notion of object equality for primitives, it isn't possible to  * use a `REMOVED' object to track deletions in an open-addressed table.  * So, we have to resort to using a parallel `bookkeeping' array of bytes,  * in which flags can be set to indicate that a particular slot in the  * hash table is FREE, FULL, or REMOVED.  *<p/>  * Created: Fri Jan 11 18:55:16 2002  *  * @author Eric D. Friedman  * @version $Id: TPrimitiveHash.java,v 1.5 2008/10/08 16:39:10 robeden Exp $  */
end_comment

begin_class
DECL|class|TPrimitiveHash
specifier|abstract
specifier|public
class|class
name|TPrimitiveHash
extends|extends
name|THash
block|{
comment|/**      * flags indicating whether each position in the hash is      * FREE, FULL, or REMOVED      */
DECL|field|_states
specifier|protected
specifier|transient
name|byte
index|[]
name|_states
decl_stmt|;
comment|/* constants used for state flags */
comment|/**      * flag indicating that a slot in the hashtable is available      */
DECL|field|FREE
specifier|protected
specifier|static
specifier|final
name|byte
name|FREE
init|=
literal|0
decl_stmt|;
comment|/**      * flag indicating that a slot in the hashtable is occupied      */
DECL|field|FULL
specifier|protected
specifier|static
specifier|final
name|byte
name|FULL
init|=
literal|1
decl_stmt|;
comment|/**      * flag indicating that the value of a slot in the hashtable      * was deleted      */
DECL|field|REMOVED
specifier|protected
specifier|static
specifier|final
name|byte
name|REMOVED
init|=
literal|2
decl_stmt|;
comment|/**      * Creates a new<code>THash</code> instance with the default      * capacity and load factor.      */
DECL|method|TPrimitiveHash
specifier|public
name|TPrimitiveHash
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TPrimitiveHash</code> instance with a prime      * capacity at or near the specified capacity and with the default      * load factor.      *      * @param initialCapacity an<code>int</code> value      */
DECL|method|TPrimitiveHash
specifier|public
name|TPrimitiveHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|this
argument_list|(
name|initialCapacity
argument_list|,
name|DEFAULT_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TPrimitiveHash</code> instance with a prime      * capacity at or near the minimum needed to hold      *<tt>initialCapacity<tt> elements with load factor      *<tt>loadFactor</tt> without triggering a rehash.      *      * @param initialCapacity an<code>int</code> value      * @param loadFactor      a<code>float</code> value      */
DECL|method|TPrimitiveHash
specifier|public
name|TPrimitiveHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|_loadFactor
operator|=
name|loadFactor
expr_stmt|;
name|setUp
argument_list|(
name|HashFunctions
operator|.
name|fastCeil
argument_list|(
name|initialCapacity
operator|/
name|loadFactor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|TPrimitiveHash
name|h
init|=
operator|(
name|TPrimitiveHash
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|h
operator|.
name|_states
operator|=
operator|(
name|byte
index|[]
operator|)
name|this
operator|.
name|_states
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
comment|/**      * Returns the capacity of the hash table.  This is the true      * physical capacity, without adjusting for the load factor.      *      * @return the physical capacity of the hash table.      */
DECL|method|capacity
specifier|protected
name|int
name|capacity
parameter_list|()
block|{
return|return
name|_states
operator|.
name|length
return|;
block|}
comment|/**      * Delete the record at<tt>index</tt>.      *      * @param index an<code>int</code> value      */
DECL|method|removeAt
specifier|protected
name|void
name|removeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|_states
index|[
name|index
index|]
operator|=
name|REMOVED
expr_stmt|;
name|super
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
comment|/**      * initializes the hashtable to a prime capacity which is at least      *<tt>initialCapacity + 1</tt>.      *      * @param initialCapacity an<code>int</code> value      * @return the actual capacity chosen      */
DECL|method|setUp
specifier|protected
name|int
name|setUp
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|int
name|capacity
decl_stmt|;
name|capacity
operator|=
name|super
operator|.
name|setUp
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
name|_states
operator|=
operator|new
name|byte
index|[
name|capacity
index|]
expr_stmt|;
return|return
name|capacity
return|;
block|}
block|}
end_class

begin_comment
comment|// TPrimitiveHash
end_comment

end_unit

