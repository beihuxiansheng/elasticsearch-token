begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
operator|.
name|decorator
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This is a static utility class that provides functions for simplifying creation of  * decorators.  *  * @author Robert D. Eden  * @since Trove 2.1  */
end_comment

begin_class
DECL|class|Decorators
specifier|public
class|class
name|Decorators
block|{
comment|// Hide the constructor
DECL|method|Decorators
specifier|private
name|Decorators
parameter_list|()
block|{     }
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|wrap
parameter_list|(
name|TDoubleDoubleHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TDoubleDoubleHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Double
argument_list|,
name|Float
argument_list|>
name|wrap
parameter_list|(
name|TDoubleFloatHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TDoubleFloatHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Double
argument_list|,
name|Integer
argument_list|>
name|wrap
parameter_list|(
name|TDoubleIntHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TDoubleIntHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Double
argument_list|,
name|Long
argument_list|>
name|wrap
parameter_list|(
name|TDoubleLongHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TDoubleLongHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Double
argument_list|,
name|Byte
argument_list|>
name|wrap
parameter_list|(
name|TDoubleByteHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TDoubleByteHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Double
argument_list|,
name|Short
argument_list|>
name|wrap
parameter_list|(
name|TDoubleShortHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TDoubleShortHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Float
argument_list|,
name|Double
argument_list|>
name|wrap
parameter_list|(
name|TFloatDoubleHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TFloatDoubleHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Float
argument_list|,
name|Float
argument_list|>
name|wrap
parameter_list|(
name|TFloatFloatHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TFloatFloatHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Float
argument_list|,
name|Integer
argument_list|>
name|wrap
parameter_list|(
name|TFloatIntHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TFloatIntHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Float
argument_list|,
name|Long
argument_list|>
name|wrap
parameter_list|(
name|TFloatLongHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TFloatLongHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Float
argument_list|,
name|Byte
argument_list|>
name|wrap
parameter_list|(
name|TFloatByteHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TFloatByteHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Float
argument_list|,
name|Short
argument_list|>
name|wrap
parameter_list|(
name|TFloatShortHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TFloatShortHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|wrap
parameter_list|(
name|TIntDoubleHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TIntDoubleHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Float
argument_list|>
name|wrap
parameter_list|(
name|TIntFloatHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TIntFloatHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|wrap
parameter_list|(
name|TIntIntHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TIntIntHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|wrap
parameter_list|(
name|TIntLongHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TIntLongHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Byte
argument_list|>
name|wrap
parameter_list|(
name|TIntByteHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TIntByteHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Short
argument_list|>
name|wrap
parameter_list|(
name|TIntShortHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TIntShortHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|wrap
parameter_list|(
name|TLongDoubleHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TLongDoubleHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|Float
argument_list|>
name|wrap
parameter_list|(
name|TLongFloatHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TLongFloatHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|wrap
parameter_list|(
name|TLongIntHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TLongIntHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|wrap
parameter_list|(
name|TLongLongHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TLongLongHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|Byte
argument_list|>
name|wrap
parameter_list|(
name|TLongByteHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TLongByteHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|Short
argument_list|>
name|wrap
parameter_list|(
name|TLongShortHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TLongShortHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Byte
argument_list|,
name|Double
argument_list|>
name|wrap
parameter_list|(
name|TByteDoubleHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TByteDoubleHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Byte
argument_list|,
name|Float
argument_list|>
name|wrap
parameter_list|(
name|TByteFloatHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TByteFloatHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Byte
argument_list|,
name|Integer
argument_list|>
name|wrap
parameter_list|(
name|TByteIntHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TByteIntHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Byte
argument_list|,
name|Long
argument_list|>
name|wrap
parameter_list|(
name|TByteLongHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TByteLongHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Byte
argument_list|,
name|Byte
argument_list|>
name|wrap
parameter_list|(
name|TByteByteHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TByteByteHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Byte
argument_list|,
name|Short
argument_list|>
name|wrap
parameter_list|(
name|TByteShortHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TByteShortHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Short
argument_list|,
name|Double
argument_list|>
name|wrap
parameter_list|(
name|TShortDoubleHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TShortDoubleHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Short
argument_list|,
name|Float
argument_list|>
name|wrap
parameter_list|(
name|TShortFloatHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TShortFloatHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Short
argument_list|,
name|Integer
argument_list|>
name|wrap
parameter_list|(
name|TShortIntHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TShortIntHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Short
argument_list|,
name|Long
argument_list|>
name|wrap
parameter_list|(
name|TShortLongHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TShortLongHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Short
argument_list|,
name|Byte
argument_list|>
name|wrap
parameter_list|(
name|TShortByteHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TShortByteHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Map
argument_list|<
name|Short
argument_list|,
name|Short
argument_list|>
name|wrap
parameter_list|(
name|TShortShortHashMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|TShortShortHashMapDecorator
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|T
argument_list|,
name|Double
argument_list|>
name|wrap
parameter_list|(
name|TObjectDoubleHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TObjectDoubleHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|T
argument_list|,
name|Float
argument_list|>
name|wrap
parameter_list|(
name|TObjectFloatHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TObjectFloatHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
name|wrap
parameter_list|(
name|TObjectIntHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TObjectIntHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|T
argument_list|,
name|Long
argument_list|>
name|wrap
parameter_list|(
name|TObjectLongHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TObjectLongHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|T
argument_list|,
name|Byte
argument_list|>
name|wrap
parameter_list|(
name|TObjectByteHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TObjectByteHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|T
argument_list|,
name|Short
argument_list|>
name|wrap
parameter_list|(
name|TObjectShortHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TObjectShortHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|Double
argument_list|,
name|T
argument_list|>
name|wrap
parameter_list|(
name|TDoubleObjectHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TDoubleObjectHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|Float
argument_list|,
name|T
argument_list|>
name|wrap
parameter_list|(
name|TFloatObjectHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TFloatObjectHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
name|wrap
parameter_list|(
name|TIntObjectHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TIntObjectHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|wrap
parameter_list|(
name|TLongObjectHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TLongObjectHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|Byte
argument_list|,
name|T
argument_list|>
name|wrap
parameter_list|(
name|TByteObjectHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TByteObjectHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given map in a decorator that uses the standard {@link java.util.Map Map}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|Short
argument_list|,
name|T
argument_list|>
name|wrap
parameter_list|(
name|TShortObjectHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|TShortObjectHashMapDecorator
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Wrap the given set in a decorator that uses the standard {@link java.util.Set Set}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Set
argument_list|<
name|Double
argument_list|>
name|wrap
parameter_list|(
name|TDoubleHashSet
name|set
parameter_list|)
block|{
return|return
operator|new
name|TDoubleHashSetDecorator
argument_list|(
name|set
argument_list|)
return|;
block|}
comment|/**      * Wrap the given set in a decorator that uses the standard {@link java.util.Set Set}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Set
argument_list|<
name|Float
argument_list|>
name|wrap
parameter_list|(
name|TFloatHashSet
name|set
parameter_list|)
block|{
return|return
operator|new
name|TFloatHashSetDecorator
argument_list|(
name|set
argument_list|)
return|;
block|}
comment|/**      * Wrap the given set in a decorator that uses the standard {@link java.util.Set Set}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Set
argument_list|<
name|Integer
argument_list|>
name|wrap
parameter_list|(
name|TIntHashSet
name|set
parameter_list|)
block|{
return|return
operator|new
name|TIntHashSetDecorator
argument_list|(
name|set
argument_list|)
return|;
block|}
comment|/**      * Wrap the given set in a decorator that uses the standard {@link java.util.Set Set}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Set
argument_list|<
name|Long
argument_list|>
name|wrap
parameter_list|(
name|TLongHashSet
name|set
parameter_list|)
block|{
return|return
operator|new
name|TLongHashSetDecorator
argument_list|(
name|set
argument_list|)
return|;
block|}
comment|/**      * Wrap the given set in a decorator that uses the standard {@link java.util.Set Set}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Set
argument_list|<
name|Byte
argument_list|>
name|wrap
parameter_list|(
name|TByteHashSet
name|set
parameter_list|)
block|{
return|return
operator|new
name|TByteHashSetDecorator
argument_list|(
name|set
argument_list|)
return|;
block|}
comment|/**      * Wrap the given set in a decorator that uses the standard {@link java.util.Set Set}      * interface.      */
DECL|method|wrap
specifier|public
specifier|static
name|Set
argument_list|<
name|Short
argument_list|>
name|wrap
parameter_list|(
name|TShortHashSet
name|set
parameter_list|)
block|{
return|return
operator|new
name|TShortHashSetDecorator
argument_list|(
name|set
argument_list|)
return|;
block|}
block|}
end_class

end_unit

