begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Provides additional runtime information necessary to create a custom Java  * instance.  */
end_comment

begin_class
DECL|class|TypeDescription
specifier|public
specifier|final
class|class
name|TypeDescription
block|{
DECL|field|type
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|type
decl_stmt|;
DECL|field|tag
specifier|private
name|Tag
name|tag
decl_stmt|;
DECL|field|root
specifier|private
name|boolean
name|root
decl_stmt|;
DECL|field|listProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|listProperties
decl_stmt|;
DECL|field|keyProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|keyProperties
decl_stmt|;
DECL|field|valueProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|valueProperties
decl_stmt|;
DECL|method|TypeDescription
specifier|public
name|TypeDescription
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|clazz
parameter_list|,
name|Tag
name|tag
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
name|listProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|keyProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|valueProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|TypeDescription
specifier|public
name|TypeDescription
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|clazz
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
operator|new
name|Tag
argument_list|(
name|tag
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|TypeDescription
specifier|public
name|TypeDescription
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
operator|(
name|Tag
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get tag which shall be used to load or dump the type (class).      *      * @return tag to be used. It may be a tag for Language-Independent Types      *         (http://www.yaml.org/type/)      */
DECL|method|getTag
specifier|public
name|Tag
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
comment|/**      * Set tag to be used to load or dump the type (class).      *      * @param tag local or global tag      */
DECL|method|setTag
specifier|public
name|void
name|setTag
parameter_list|(
name|Tag
name|tag
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
DECL|method|setTag
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|setTag
argument_list|(
operator|new
name|Tag
argument_list|(
name|tag
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get represented type (class)      *      * @return type (class) to be described.      */
DECL|method|getType
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Defines whether this type (class) is the root of the YAML document      *      * @return true if this type shall be used as a root of object hierarchy.      */
DECL|method|isRoot
specifier|public
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
comment|/**      * Specify whether this type (class) should be serve as the root of the YAML      * document      *      * @param root true if this type shall be used as a root of object hierarchy.      */
DECL|method|setRoot
specifier|public
name|void
name|setRoot
parameter_list|(
name|boolean
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|/**      * Specify that the property is a type-safe<code>List</code>.      *      * @param property name of the JavaBean property      * @param type     class of List values      */
DECL|method|putListPropertyType
specifier|public
name|void
name|putListPropertyType
parameter_list|(
name|String
name|property
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|type
parameter_list|)
block|{
name|listProperties
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get class of List values for provided JavaBean property.      *      * @param property property name      * @return class of List values      */
DECL|method|getListPropertyType
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|getListPropertyType
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|listProperties
operator|.
name|get
argument_list|(
name|property
argument_list|)
return|;
block|}
comment|/**      * Specify that the property is a type-safe<code>Map</code>.      *      * @param property property name of this JavaBean      * @param key      class of keys in Map      * @param value    class of values in Map      */
DECL|method|putMapPropertyType
specifier|public
name|void
name|putMapPropertyType
parameter_list|(
name|String
name|property
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|key
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|value
parameter_list|)
block|{
name|keyProperties
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|valueProperties
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get keys type info for this JavaBean      *      * @param property property name of this JavaBean      * @return class of keys in the Map      */
DECL|method|getMapKeyType
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|getMapKeyType
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|keyProperties
operator|.
name|get
argument_list|(
name|property
argument_list|)
return|;
block|}
comment|/**      * Get values type info for this JavaBean      *      * @param property property name of this JavaBean      * @return class of values in the Map      */
DECL|method|getMapValueType
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|getMapValueType
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|valueProperties
operator|.
name|get
argument_list|(
name|property
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TypeDescription for "
operator|+
name|getType
argument_list|()
operator|+
literal|" (tag='"
operator|+
name|getTag
argument_list|()
operator|+
literal|"')"
return|;
block|}
block|}
end_class

end_unit

