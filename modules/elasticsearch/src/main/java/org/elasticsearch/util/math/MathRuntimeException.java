begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.math
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|math
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Base class for commons-math unchecked exceptions.  *  * @version $Revision: 822850 $ $Date: 2009-10-07 14:56:42 -0400 (Wed, 07 Oct 2009) $  * @since 2.0  */
end_comment

begin_class
DECL|class|MathRuntimeException
specifier|public
class|class
name|MathRuntimeException
extends|extends
name|RuntimeException
block|{
comment|/**      * Serializable version identifier.      */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5128983364075381060L
decl_stmt|;
comment|/**      * Pattern used to build the message.      */
DECL|field|pattern
specifier|private
specifier|final
name|String
name|pattern
decl_stmt|;
comment|/**      * Arguments used to build the message.      */
DECL|field|arguments
specifier|private
specifier|final
name|Object
index|[]
name|arguments
decl_stmt|;
comment|/**      * Constructs a new<code>MathRuntimeException</code> with specified      * formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param pattern   format specifier      * @param arguments format arguments      */
DECL|method|MathRuntimeException
specifier|public
name|MathRuntimeException
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
operator|(
name|arguments
operator|==
literal|null
operator|)
condition|?
operator|new
name|Object
index|[
literal|0
index|]
else|:
name|arguments
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructs a new<code>MathRuntimeException</code> with specified      * nested<code>Throwable</code> root cause.      *      * @param rootCause the exception or error that caused this exception      *                  to be thrown.      */
DECL|method|MathRuntimeException
specifier|public
name|MathRuntimeException
parameter_list|(
specifier|final
name|Throwable
name|rootCause
parameter_list|)
block|{
name|super
argument_list|(
name|rootCause
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|getMessage
argument_list|()
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
operator|new
name|Object
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|/**      * Constructs a new<code>MathRuntimeException</code> with specified      * formatted detail message and nested<code>Throwable</code> root cause.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param rootCause the exception or error that caused this exception      *                  to be thrown.      * @param pattern   format specifier      * @param arguments format arguments      */
DECL|method|MathRuntimeException
specifier|public
name|MathRuntimeException
parameter_list|(
specifier|final
name|Throwable
name|rootCause
parameter_list|,
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|super
argument_list|(
name|rootCause
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
operator|(
name|arguments
operator|==
literal|null
operator|)
condition|?
operator|new
name|Object
index|[
literal|0
index|]
else|:
name|arguments
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
comment|/**      * Translate a string to a given locale.      *      * @param s      string to translate      * @param locale locale into which to translate the string      * @return translated string or original string      *         for unsupported locales or unknown strings      */
DECL|method|translate
specifier|private
specifier|static
name|String
name|translate
parameter_list|(
specifier|final
name|String
name|s
parameter_list|,
specifier|final
name|Locale
name|locale
parameter_list|)
block|{
try|try
block|{
name|ResourceBundle
name|bundle
init|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
literal|"org.apache.commons.math.MessagesResources"
argument_list|,
name|locale
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|.
name|getLocale
argument_list|()
operator|.
name|getLanguage
argument_list|()
operator|.
name|equals
argument_list|(
name|locale
operator|.
name|getLanguage
argument_list|()
argument_list|)
condition|)
block|{
comment|// the value of the resource is the translated string
return|return
name|bundle
operator|.
name|getString
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|mre
parameter_list|)
block|{
comment|// do nothing here
block|}
comment|// the locale is not supported or the resource is unknown
comment|// don't translate and fall back to using the string as is
return|return
name|s
return|;
block|}
comment|/**      * Builds a message string by from a pattern and its arguments.      *      * @param locale    Locale in which the message should be translated      * @param pattern   format specifier      * @param arguments format arguments      * @return a message string      */
DECL|method|buildMessage
specifier|private
specifier|static
name|String
name|buildMessage
parameter_list|(
specifier|final
name|Locale
name|locale
parameter_list|,
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|(
name|pattern
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
operator|new
name|MessageFormat
argument_list|(
name|translate
argument_list|(
name|pattern
argument_list|,
name|locale
argument_list|)
argument_list|,
name|locale
argument_list|)
operator|.
name|format
argument_list|(
name|arguments
argument_list|)
return|;
block|}
comment|/**      * Gets the pattern used to build the message of this throwable.      *      * @return the pattern used to build the message of this throwable      */
DECL|method|getPattern
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
comment|/**      * Gets the arguments used to build the message of this throwable.      *      * @return the arguments used to build the message of this throwable      */
DECL|method|getArguments
specifier|public
name|Object
index|[]
name|getArguments
parameter_list|()
block|{
return|return
name|arguments
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/**      * Gets the message in a specified locale.      *      * @param locale Locale in which the message should be translated      * @return localized message      */
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|(
specifier|final
name|Locale
name|locale
parameter_list|)
block|{
return|return
name|buildMessage
argument_list|(
name|locale
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|getMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|getLocalizedMessage
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|getMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Prints the stack trace of this exception to the standard error stream.      */
annotation|@
name|Override
DECL|method|printStackTrace
specifier|public
name|void
name|printStackTrace
parameter_list|()
block|{
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints the stack trace of this exception to the specified stream.      *      * @param out the<code>PrintStream</code> to use for output      */
annotation|@
name|Override
DECL|method|printStackTrace
specifier|public
name|void
name|printStackTrace
parameter_list|(
specifier|final
name|PrintStream
name|out
parameter_list|)
block|{
synchronized|synchronized
init|(
name|out
init|)
block|{
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
comment|// Flush the PrintWriter before it's GC'ed.
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Constructs a new<code>ArithmeticException</code> with specified formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param pattern   format specifier      * @param arguments format arguments      * @return built exception      */
DECL|method|createArithmeticException
specifier|public
specifier|static
name|ArithmeticException
name|createArithmeticException
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|ArithmeticException
argument_list|()
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7705628723242533939L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Constructs a new<code>ArrayIndexOutOfBoundsException</code> with specified formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param pattern   format specifier      * @param arguments format arguments      * @return built exception      */
DECL|method|createArrayIndexOutOfBoundsException
specifier|public
specifier|static
name|ArrayIndexOutOfBoundsException
name|createArrayIndexOutOfBoundsException
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3394748305449283486L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Constructs a new<code>EOFException</code> with specified formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param pattern   format specifier      * @param arguments format arguments      * @return built exception      */
DECL|method|createEOFException
specifier|public
specifier|static
name|EOFException
name|createEOFException
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|EOFException
argument_list|()
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|279461544586092584L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Constructs a new<code>IOException</code> with specified nested      *<code>Throwable</code> root cause.      *<p>This factory method allows chaining of other exceptions within an      *<code>IOException</code> even for Java 5. The constructor for      *<code>IOException</code> with a cause parameter was introduced only      * with Java 6.</p>      *      * @param rootCause the exception or error that caused this exception      *                  to be thrown.      * @return built exception      */
DECL|method|createIOException
specifier|public
specifier|static
name|IOException
name|createIOException
parameter_list|(
specifier|final
name|Throwable
name|rootCause
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|rootCause
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|rootCause
argument_list|)
expr_stmt|;
return|return
name|ioe
return|;
block|}
comment|/**      * Constructs a new<code>IllegalArgumentException</code> with specified formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param pattern   format specifier      * @param arguments format arguments      * @return built exception      */
DECL|method|createIllegalArgumentException
specifier|public
specifier|static
name|IllegalArgumentException
name|createIllegalArgumentException
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|IllegalArgumentException
argument_list|()
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6555453980658317913L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Constructs a new<code>IllegalArgumentException</code> with specified nested      *<code>Throwable</code> root cause.      *      * @param rootCause the exception or error that caused this exception      *                  to be thrown.      * @return built exception      */
DECL|method|createIllegalArgumentException
specifier|public
specifier|static
name|IllegalArgumentException
name|createIllegalArgumentException
parameter_list|(
specifier|final
name|Throwable
name|rootCause
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
name|rootCause
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|rootCause
argument_list|)
expr_stmt|;
return|return
name|iae
return|;
block|}
comment|/**      * Constructs a new<code>IllegalStateException</code> with specified formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param pattern   format specifier      * @param arguments format arguments      * @return built exception      */
DECL|method|createIllegalStateException
specifier|public
specifier|static
name|IllegalStateException
name|createIllegalStateException
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|IllegalStateException
argument_list|()
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|95247648156277208L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Constructs a new<code>ConcurrentModificationException</code> with specified formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param pattern   format specifier      * @param arguments format arguments      * @return built exception      */
DECL|method|createConcurrentModificationException
specifier|public
specifier|static
name|ConcurrentModificationException
name|createConcurrentModificationException
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|ConcurrentModificationException
argument_list|()
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6134247282754009421L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Constructs a new<code>NoSuchElementException</code> with specified formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param pattern   format specifier      * @param arguments format arguments      * @return built exception      */
DECL|method|createNoSuchElementException
specifier|public
specifier|static
name|NoSuchElementException
name|createNoSuchElementException
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|NoSuchElementException
argument_list|()
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7304273322489425799L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Constructs a new<code>NullPointerException</code> with specified formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param pattern   format specifier      * @param arguments format arguments      * @return built exception      */
DECL|method|createNullPointerException
specifier|public
specifier|static
name|NullPointerException
name|createNullPointerException
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|NullPointerException
argument_list|()
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3075660477939965216L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Constructs a new<code>ParseException</code> with specified      * formatted detail message.      * Message formatting is delegated to {@link java.text.MessageFormat}.      *      * @param offset    offset at which error occurred      * @param pattern   format specifier      * @param arguments format arguments      * @return built exception      */
DECL|method|createParseException
specifier|public
specifier|static
name|ParseException
name|createParseException
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
return|return
operator|new
name|ParseException
argument_list|(
literal|null
argument_list|,
name|offset
argument_list|)
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1103502177342465975L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create an {@link java.lang.RuntimeException} for an internal error.      *      * @param cause underlying cause      * @return an {@link java.lang.RuntimeException} for an internal error      */
DECL|method|createInternalError
specifier|public
specifier|static
name|RuntimeException
name|createInternalError
parameter_list|(
specifier|final
name|Throwable
name|cause
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
literal|"internal error, please fill a bug report at {0}"
decl_stmt|;
specifier|final
name|String
name|argument
init|=
literal|"https://issues.apache.org/jira/browse/MATH"
decl_stmt|;
return|return
operator|new
name|RuntimeException
argument_list|()
block|{
comment|/** Serializable version identifier. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|201865440834027016L
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|pattern
argument_list|,
name|argument
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|buildMessage
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|argument
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

