begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Implements all iterator functions for the hashed object set.  * Subclasses may override objectAtIndex to vary the object  * returned by calls to next() (e.g. for values, and Map.Entry  * objects).  *<p/>  *<p> Note that iteration is fastest if you forego the calls to  *<tt>hasNext</tt> in favor of checking the size of the structure  * yourself and then call next() that many times:  *<p/>  *<pre>  * Iterator i = collection.iterator();  * for (int size = collection.size(); size--> 0;) {  *   Object o = i.next();  * }  *</pre>  *<p/>  *<p>You may, of course, use the hasNext(), next() idiom too if  * you aren't in a performance critical spot.</p>  */
end_comment

begin_class
DECL|class|THashIterator
specifier|abstract
class|class
name|THashIterator
parameter_list|<
name|V
parameter_list|>
extends|extends
name|TIterator
implements|implements
name|Iterator
argument_list|<
name|V
argument_list|>
block|{
DECL|field|_object_hash
specifier|private
specifier|final
name|TObjectHash
name|_object_hash
decl_stmt|;
comment|/**      * Create an instance of THashIterator over the values of the TObjectHash      */
DECL|method|THashIterator
specifier|public
name|THashIterator
parameter_list|(
name|TObjectHash
name|hash
parameter_list|)
block|{
name|super
argument_list|(
name|hash
argument_list|)
expr_stmt|;
name|_object_hash
operator|=
name|hash
expr_stmt|;
block|}
comment|/**      * Moves the iterator to the next Object and returns it.      *      * @return an<code>Object</code> value      * @throws ConcurrentModificationException      *                                if the structure      *                                was changed using a method that isn't on this iterator.      * @throws NoSuchElementException if this is called on an      *                                exhausted iterator.      */
DECL|method|next
specifier|public
name|V
name|next
parameter_list|()
block|{
name|moveToNextIndex
argument_list|()
expr_stmt|;
return|return
name|objectAtIndex
argument_list|(
name|_index
argument_list|)
return|;
block|}
comment|/**      * Returns the index of the next value in the data structure      * or a negative value if the iterator is exhausted.      *      * @return an<code>int</code> value      * @throws ConcurrentModificationException      *          if the underlying      *          collection's size has been modified since the iterator was      *          created.      */
DECL|method|nextIndex
specifier|protected
specifier|final
name|int
name|nextIndex
parameter_list|()
block|{
if|if
condition|(
name|_expectedSize
operator|!=
name|_hash
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
name|Object
index|[]
name|set
init|=
name|_object_hash
operator|.
name|_set
decl_stmt|;
name|int
name|i
init|=
name|_index
decl_stmt|;
while|while
condition|(
name|i
operator|--
operator|>
literal|0
operator|&&
operator|(
name|set
index|[
name|i
index|]
operator|==
name|TObjectHash
operator|.
name|FREE
operator|||
name|set
index|[
name|i
index|]
operator|==
name|TObjectHash
operator|.
name|REMOVED
operator|)
condition|)
empty_stmt|;
return|return
name|i
return|;
block|}
comment|/**      * Returns the object at the specified index.  Subclasses should      * implement this to return the appropriate object for the given      * index.      *      * @param index the index of the value to return.      * @return an<code>Object</code> value      */
DECL|method|objectAtIndex
specifier|abstract
specifier|protected
name|V
name|objectAtIndex
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
block|}
end_class

begin_comment
comment|// THashIterator
end_comment

end_unit

