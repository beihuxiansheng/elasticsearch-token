begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.multipart
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class is an adaptation of the Apache HttpClient implementation  *  * @link http://hc.apache.org/httpclient-3.x/  */
end_comment

begin_class
DECL|class|FilePartSource
specifier|public
class|class
name|FilePartSource
implements|implements
name|PartSource
block|{
comment|/**      * File part file.      */
DECL|field|file
specifier|private
name|File
name|file
init|=
literal|null
decl_stmt|;
comment|/**      * File part file name.      */
DECL|field|fileName
specifier|private
name|String
name|fileName
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor for FilePartSource.      *      * @param file the FilePart source File.      * @throws java.io.FileNotFoundException if the file does not exist or      *                                       cannot be read      */
DECL|method|FilePartSource
specifier|public
name|FilePartSource
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File is not a normal file."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File is not readable."
argument_list|)
throw|;
block|}
name|this
operator|.
name|fileName
operator|=
name|file
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Constructor for FilePartSource.      *      * @param fileName the file name of the FilePart      * @param file     the source File for the FilePart      * @throws FileNotFoundException if the file does not exist or      *                               cannot be read      */
DECL|method|FilePartSource
specifier|public
name|FilePartSource
parameter_list|(
name|String
name|fileName
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
block|}
comment|/**      * Return the length of the file      *      * @return the length of the file.      * @see PartSource#getLength()      */
DECL|method|getLength
specifier|public
name|long
name|getLength
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|file
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|file
operator|.
name|length
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**      * Return the current filename      *      * @return the filename.      * @see PartSource#getFileName()      */
DECL|method|getFileName
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
operator|(
name|fileName
operator|==
literal|null
operator|)
condition|?
literal|"noname"
else|:
name|fileName
return|;
block|}
comment|/**      * Return a new {@link java.io.FileInputStream} for the current filename.      *      * @return the new input stream.      * @throws java.io.IOException If an IO problem occurs.      * @see PartSource#createInputStream()      */
DECL|method|createInputStream
specifier|public
name|InputStream
name|createInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|file
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|this
operator|.
name|file
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

