begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * A {@link Runnable} that changes the current thread name and reverts it back  * when its execution ends.  To change the default thread names set by Netty,  * use {@link #setThreadNameDeterminer(ThreadNameDeterminer)}.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ThreadRenamingRunnable
specifier|public
class|class
name|ThreadRenamingRunnable
implements|implements
name|Runnable
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ThreadRenamingRunnable
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|threadNameDeterminer
specifier|private
specifier|static
specifier|volatile
name|ThreadNameDeterminer
name|threadNameDeterminer
init|=
name|ThreadNameDeterminer
operator|.
name|PROPOSED
decl_stmt|;
comment|/**      * Returns the {@link ThreadNameDeterminer} which overrides the proposed      * new thread name.      */
DECL|method|getThreadNameDeterminer
specifier|public
specifier|static
name|ThreadNameDeterminer
name|getThreadNameDeterminer
parameter_list|()
block|{
return|return
name|threadNameDeterminer
return|;
block|}
comment|/**      * Sets the {@link ThreadNameDeterminer} which overrides the proposed new      * thread name.  Please note that the specified {@link ThreadNameDeterminer}      * affects only new {@link ThreadRenamingRunnable}s; the existing instances      * are not affected at all.  Therefore, you should make sure to call this      * method at the earliest possible point (i.e. before any Netty worker      * thread starts) for consistent thread naming.  Otherwise, you might see      * the default thread names and the new names appear at the same time in      * the full thread dump.      */
DECL|method|setThreadNameDeterminer
specifier|public
specifier|static
name|void
name|setThreadNameDeterminer
parameter_list|(
name|ThreadNameDeterminer
name|threadNameDeterminer
parameter_list|)
block|{
if|if
condition|(
name|threadNameDeterminer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"threadNameDeterminer"
argument_list|)
throw|;
block|}
name|ThreadRenamingRunnable
operator|.
name|threadNameDeterminer
operator|=
name|threadNameDeterminer
expr_stmt|;
block|}
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|field|proposedThreadName
specifier|private
specifier|final
name|String
name|proposedThreadName
decl_stmt|;
comment|/**      * Creates a new instance which wraps the specified {@code runnable}      * and changes the thread name to the specified thread name when the      * specified {@code runnable} is running.      */
DECL|method|ThreadRenamingRunnable
specifier|public
name|ThreadRenamingRunnable
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|proposedThreadName
parameter_list|)
block|{
if|if
condition|(
name|runnable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"runnable"
argument_list|)
throw|;
block|}
if|if
condition|(
name|proposedThreadName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"proposedThreadName"
argument_list|)
throw|;
block|}
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|proposedThreadName
operator|=
name|proposedThreadName
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
specifier|final
name|String
name|oldThreadName
init|=
name|currentThread
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|newThreadName
init|=
name|getNewThreadName
argument_list|(
name|oldThreadName
argument_list|)
decl_stmt|;
comment|// Change the thread name before starting the actual runnable.
name|boolean
name|renamed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|oldThreadName
operator|.
name|equals
argument_list|(
name|newThreadName
argument_list|)
condition|)
block|{
try|try
block|{
name|currentThread
operator|.
name|setName
argument_list|(
name|newThreadName
argument_list|)
expr_stmt|;
name|renamed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Failed to rename a thread due to security restriction."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Run the actual runnable and revert the name back when it ends.
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|renamed
condition|)
block|{
comment|// Revert the name back if the current thread was renamed.
comment|// We do not check the exception here because we know it works.
name|currentThread
operator|.
name|setName
argument_list|(
name|oldThreadName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getNewThreadName
specifier|private
name|String
name|getNewThreadName
parameter_list|(
name|String
name|currentThreadName
parameter_list|)
block|{
name|String
name|newThreadName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newThreadName
operator|=
name|getThreadNameDeterminer
argument_list|()
operator|.
name|determineThreadName
argument_list|(
name|currentThreadName
argument_list|,
name|proposedThreadName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to determine the thread name"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|newThreadName
operator|==
literal|null
condition|?
name|currentThreadName
else|:
name|newThreadName
return|;
block|}
block|}
end_class

end_unit

