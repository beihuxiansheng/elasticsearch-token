begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_comment
comment|/**  * Implementation of the variously typed procedure interfaces that supports  * writing the arguments to the procedure out on an ObjectOutputStream.  * In the case of two-argument procedures, the arguments are written out  * in the order received.  *<p/>  *<p>  * Any IOException is trapped here so that it can be rethrown in a writeObject  * method.  *</p>  *<p/>  * Created: Sun Jul  7 00:14:18 2002  *  * @author Eric D. Friedman  * @version $Id: SerializationProcedure.java,v 1.5 2006/11/10 23:27:54 robeden Exp $  */
end_comment

begin_class
DECL|class|SerializationProcedure
class|class
name|SerializationProcedure
implements|implements
name|TDoubleDoubleProcedure
implements|,
name|TDoubleFloatProcedure
implements|,
name|TDoubleIntProcedure
implements|,
name|TDoubleLongProcedure
implements|,
name|TDoubleShortProcedure
implements|,
name|TDoubleByteProcedure
implements|,
name|TDoubleObjectProcedure
implements|,
name|TDoubleProcedure
implements|,
name|TFloatDoubleProcedure
implements|,
name|TFloatFloatProcedure
implements|,
name|TFloatIntProcedure
implements|,
name|TFloatLongProcedure
implements|,
name|TFloatShortProcedure
implements|,
name|TFloatByteProcedure
implements|,
name|TFloatObjectProcedure
implements|,
name|TFloatProcedure
implements|,
name|TIntDoubleProcedure
implements|,
name|TIntFloatProcedure
implements|,
name|TIntIntProcedure
implements|,
name|TIntLongProcedure
implements|,
name|TIntShortProcedure
implements|,
name|TIntByteProcedure
implements|,
name|TIntObjectProcedure
implements|,
name|TIntProcedure
implements|,
name|TLongDoubleProcedure
implements|,
name|TLongFloatProcedure
implements|,
name|TLongIntProcedure
implements|,
name|TLongLongProcedure
implements|,
name|TLongShortProcedure
implements|,
name|TLongByteProcedure
implements|,
name|TLongObjectProcedure
implements|,
name|TLongProcedure
implements|,
name|TShortDoubleProcedure
implements|,
name|TShortFloatProcedure
implements|,
name|TShortIntProcedure
implements|,
name|TShortLongProcedure
implements|,
name|TShortShortProcedure
implements|,
name|TShortByteProcedure
implements|,
name|TShortObjectProcedure
implements|,
name|TShortProcedure
implements|,
name|TByteDoubleProcedure
implements|,
name|TByteFloatProcedure
implements|,
name|TByteIntProcedure
implements|,
name|TByteLongProcedure
implements|,
name|TByteShortProcedure
implements|,
name|TByteByteProcedure
implements|,
name|TByteObjectProcedure
implements|,
name|TByteProcedure
implements|,
name|TObjectDoubleProcedure
implements|,
name|TObjectFloatProcedure
implements|,
name|TObjectIntProcedure
implements|,
name|TObjectLongProcedure
implements|,
name|TObjectShortProcedure
implements|,
name|TObjectByteProcedure
implements|,
name|TObjectObjectProcedure
implements|,
name|TObjectProcedure
block|{
DECL|field|stream
specifier|private
specifier|final
name|ObjectOutput
name|stream
decl_stmt|;
DECL|field|exception
name|IOException
name|exception
decl_stmt|;
DECL|method|SerializationProcedure
name|SerializationProcedure
parameter_list|(
name|ObjectOutput
name|stream
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|byte
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|short
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeShort
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|double
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|long
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|float
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeFloat
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|key
parameter_list|,
name|byte
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|key
parameter_list|,
name|short
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeShort
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|key
parameter_list|,
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|key
parameter_list|,
name|double
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|key
parameter_list|,
name|float
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeFloat
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|int
name|key
parameter_list|,
name|byte
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeInt
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|int
name|key
parameter_list|,
name|short
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeInt
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeShort
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|int
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeInt
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeInt
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|int
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeInt
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|int
name|key
parameter_list|,
name|double
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeInt
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|int
name|key
parameter_list|,
name|float
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeInt
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeFloat
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|long
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeLong
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|long
name|key
parameter_list|,
name|byte
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeLong
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|long
name|key
parameter_list|,
name|short
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeLong
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeShort
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|long
name|key
parameter_list|,
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeLong
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|long
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeLong
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|long
name|key
parameter_list|,
name|double
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeLong
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|long
name|key
parameter_list|,
name|float
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeLong
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeFloat
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|double
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeDouble
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|double
name|key
parameter_list|,
name|byte
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeDouble
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|double
name|key
parameter_list|,
name|short
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeDouble
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeShort
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|double
name|key
parameter_list|,
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeDouble
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|double
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeDouble
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|double
name|key
parameter_list|,
name|double
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeDouble
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|double
name|key
parameter_list|,
name|float
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeDouble
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeFloat
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|float
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeFloat
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|float
name|key
parameter_list|,
name|byte
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeFloat
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|float
name|key
parameter_list|,
name|short
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeFloat
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeShort
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|float
name|key
parameter_list|,
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeFloat
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|float
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeFloat
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|float
name|key
parameter_list|,
name|double
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeFloat
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|float
name|key
parameter_list|,
name|float
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeFloat
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeFloat
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|byte
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeByte
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|byte
name|key
parameter_list|,
name|byte
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeByte
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|byte
name|key
parameter_list|,
name|short
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeByte
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeShort
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|byte
name|key
parameter_list|,
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeByte
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|byte
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeByte
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|byte
name|key
parameter_list|,
name|double
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeByte
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|byte
name|key
parameter_list|,
name|float
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeByte
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeFloat
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|short
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeShort
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|short
name|key
parameter_list|,
name|byte
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeShort
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|short
name|key
parameter_list|,
name|short
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeShort
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeShort
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|short
name|key
parameter_list|,
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeShort
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|short
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeShort
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|short
name|key
parameter_list|,
name|double
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeShort
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|short
name|key
parameter_list|,
name|float
name|val
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|writeShort
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeFloat
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

begin_comment
comment|// SerializationProcedure
end_comment

end_unit

