begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * An {@link ExecutorService} that executes each submitted task using one of  * possibly several pooled threads, normally configured using  * {@link DynamicExecutors} factory methods.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|DynamicThreadPoolExecutor
specifier|public
class|class
name|DynamicThreadPoolExecutor
extends|extends
name|ThreadPoolExecutor
block|{
comment|/**      * number of threads that are actively executing tasks      */
DECL|field|activeCount
specifier|private
specifier|final
name|AtomicInteger
name|activeCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|DynamicThreadPoolExecutor
specifier|public
name|DynamicThreadPoolExecutor
parameter_list|(
name|int
name|corePoolSize
parameter_list|,
name|int
name|maximumPoolSize
parameter_list|,
name|long
name|keepAliveTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|workQueue
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|)
block|{
name|super
argument_list|(
name|corePoolSize
argument_list|,
name|maximumPoolSize
argument_list|,
name|keepAliveTime
argument_list|,
name|unit
argument_list|,
name|workQueue
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|getActiveCount
annotation|@
name|Override
specifier|public
name|int
name|getActiveCount
parameter_list|()
block|{
return|return
name|activeCount
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|beforeExecute
annotation|@
name|Override
specifier|protected
name|void
name|beforeExecute
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Runnable
name|r
parameter_list|)
block|{
name|activeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|afterExecute
annotation|@
name|Override
specifier|protected
name|void
name|afterExecute
parameter_list|(
name|Runnable
name|r
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|activeCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**      * Much like a {@link SynchronousQueue} which acts as a rendezvous channel. It      * is well suited for handoff designs, in which a tasks is only queued if there      * is an available thread to pick it up.      *<p/>      * This queue is correlated with a thread-pool, and allows insertions to the      * queue only if there is a free thread that can poll this task. Otherwise, the      * task is rejected and the decision is left up to one of the      * {@link RejectedExecutionHandler} policies:      *<ol>      *<li> {@link ForceQueuePolicy} - forces the queue to accept the rejected task.</li>      *<li> {@link TimedBlockingPolicy} - waits for a given time for the task to be      * executed.</li>      *</ol>      *      * @author kimchy (Shay Banon)      */
DECL|class|DynamicQueue
specifier|public
specifier|static
class|class
name|DynamicQueue
parameter_list|<
name|E
parameter_list|>
extends|extends
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**          * The executor this Queue belongs to          */
DECL|field|executor
specifier|private
specifier|transient
name|ThreadPoolExecutor
name|executor
decl_stmt|;
comment|/**          * Creates a<tt>DynamicQueue</tt> with a capacity of          * {@link Integer#MAX_VALUE}.          */
DECL|method|DynamicQueue
specifier|public
name|DynamicQueue
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**          * Creates a<tt>DynamicQueue</tt> with the given (fixed) capacity.          *          * @param capacity the capacity of this queue.          */
DECL|method|DynamicQueue
specifier|public
name|DynamicQueue
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|super
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
comment|/**          * Sets the executor this queue belongs to.          */
DECL|method|setThreadPoolExecutor
specifier|public
name|void
name|setThreadPoolExecutor
parameter_list|(
name|ThreadPoolExecutor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
comment|/**          * Inserts the specified element at the tail of this queue if there is at          * least one available thread to run the current task. If all pool threads          * are actively busy, it rejects the offer.          *          * @param o the element to add.          * @return<tt>true</tt> if it was possible to add the element to this          *         queue, else<tt>false</tt>          * @see ThreadPoolExecutor#execute(Runnable)          */
annotation|@
name|Override
DECL|method|offer
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|o
parameter_list|)
block|{
name|int
name|allWorkingThreads
init|=
name|executor
operator|.
name|getActiveCount
argument_list|()
operator|+
name|super
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|allWorkingThreads
operator|<
name|executor
operator|.
name|getPoolSize
argument_list|()
operator|&&
name|super
operator|.
name|offer
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
comment|/**      * A handler for rejected tasks that adds the specified element to this queue,      * waiting if necessary for space to become available.      */
DECL|class|ForceQueuePolicy
specifier|public
specifier|static
class|class
name|ForceQueuePolicy
implements|implements
name|RejectedExecutionHandler
block|{
DECL|method|rejectedExecution
specifier|public
name|void
name|rejectedExecution
parameter_list|(
name|Runnable
name|r
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|)
block|{
try|try
block|{
name|executor
operator|.
name|getQueue
argument_list|()
operator|.
name|put
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//should never happen since we never wait
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * A handler for rejected tasks that inserts the specified element into this      * queue, waiting if necessary up to the specified wait time for space to become      * available.      */
DECL|class|TimedBlockingPolicy
specifier|public
specifier|static
class|class
name|TimedBlockingPolicy
implements|implements
name|RejectedExecutionHandler
block|{
DECL|field|waitTime
specifier|private
specifier|final
name|long
name|waitTime
decl_stmt|;
comment|/**          * @param waitTime wait time in milliseconds for space to become available.          */
DECL|method|TimedBlockingPolicy
specifier|public
name|TimedBlockingPolicy
parameter_list|(
name|long
name|waitTime
parameter_list|)
block|{
name|this
operator|.
name|waitTime
operator|=
name|waitTime
expr_stmt|;
block|}
DECL|method|rejectedExecution
specifier|public
name|void
name|rejectedExecution
parameter_list|(
name|Runnable
name|r
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|)
block|{
try|try
block|{
name|boolean
name|successful
init|=
name|executor
operator|.
name|getQueue
argument_list|()
operator|.
name|offer
argument_list|(
name|r
argument_list|,
name|waitTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|successful
condition|)
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Rejected execution after waiting "
operator|+
name|waitTime
operator|+
literal|" ms for task ["
operator|+
name|r
operator|.
name|getClass
argument_list|()
operator|+
literal|"] to be executed."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

