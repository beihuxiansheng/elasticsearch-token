begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.xcontent.xson
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|xson
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|ThreadLocals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Unicode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|support
operator|.
name|AbstractXContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|XsonXContentParser
specifier|public
class|class
name|XsonXContentParser
extends|extends
name|AbstractXContentParser
block|{
DECL|field|cachedBytes
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|cachedBytes
init|=
operator|new
name|ThreadLocal
argument_list|<
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|byte
index|[]
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
operator|new
name|byte
index|[
literal|256
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|is
specifier|private
specifier|final
name|InputStream
name|is
decl_stmt|;
DECL|field|currentToken
specifier|private
name|Token
name|currentToken
decl_stmt|;
DECL|field|xsonType
specifier|private
name|XsonType
name|xsonType
decl_stmt|;
DECL|field|currentNumberType
specifier|private
name|NumberType
name|currentNumberType
decl_stmt|;
DECL|field|currentName
specifier|private
name|String
name|currentName
decl_stmt|;
DECL|field|utf16Result
specifier|private
name|Unicode
operator|.
name|UTF16Result
name|utf16Result
decl_stmt|;
DECL|field|valueInt
specifier|private
name|int
name|valueInt
decl_stmt|;
DECL|field|valueLong
specifier|private
name|long
name|valueLong
decl_stmt|;
DECL|field|valueFloat
specifier|private
name|float
name|valueFloat
decl_stmt|;
DECL|field|valueDouble
specifier|private
name|double
name|valueDouble
decl_stmt|;
DECL|field|valueBoolean
specifier|private
name|boolean
name|valueBoolean
decl_stmt|;
DECL|field|valueBytes
specifier|private
name|byte
index|[]
name|valueBytes
decl_stmt|;
DECL|method|XsonXContentParser
specifier|public
name|XsonXContentParser
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
name|int
name|header
init|=
name|inInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|!=
name|XsonType
operator|.
name|HEADER
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not xson type header"
argument_list|)
throw|;
block|}
block|}
DECL|method|contentType
annotation|@
name|Override
specifier|public
name|XContentType
name|contentType
parameter_list|()
block|{
return|return
name|XContentType
operator|.
name|XSON
return|;
block|}
DECL|method|nextToken
annotation|@
name|Override
specifier|public
name|Token
name|nextToken
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|tokenType
init|=
operator|(
name|byte
operator|)
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
operator|-
literal|1
condition|)
block|{
name|xsonType
operator|=
literal|null
expr_stmt|;
name|currentToken
operator|=
literal|null
expr_stmt|;
name|currentNumberType
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|START_ARRAY
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|START_ARRAY
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|START_ARRAY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|END_ARRAY
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|END_ARRAY
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|END_ARRAY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|START_OBJECT
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|START_OBJECT
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|START_OBJECT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|END_OBJECT
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|END_OBJECT
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|END_OBJECT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|FIELD_NAME
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|FIELD_NAME
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|FIELD_NAME
expr_stmt|;
comment|// read the field name (interned)
name|currentName
operator|=
name|StringHelper
operator|.
name|intern
argument_list|(
name|inUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|VALUE_STRING
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|VALUE_STRING
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|VALUE_STRING
expr_stmt|;
name|inUtf16
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|VALUE_BINARY
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|VALUE_BINARY
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|VALUE_STRING
expr_stmt|;
name|int
name|length
init|=
name|inVInt
argument_list|()
decl_stmt|;
name|valueBytes
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|inBytes
argument_list|(
name|valueBytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|VALUE_INTEGER
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|VALUE_INTEGER
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|VALUE_NUMBER
expr_stmt|;
name|currentNumberType
operator|=
name|NumberType
operator|.
name|INT
expr_stmt|;
name|valueInt
operator|=
name|inInt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|VALUE_LONG
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|VALUE_LONG
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|VALUE_NUMBER
expr_stmt|;
name|currentNumberType
operator|=
name|NumberType
operator|.
name|LONG
expr_stmt|;
name|valueLong
operator|=
name|inLong
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|VALUE_FLOAT
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|VALUE_FLOAT
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|VALUE_NUMBER
expr_stmt|;
name|currentNumberType
operator|=
name|NumberType
operator|.
name|FLOAT
expr_stmt|;
name|valueFloat
operator|=
name|inFloat
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|VALUE_DOUBLE
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|VALUE_DOUBLE
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|VALUE_NUMBER
expr_stmt|;
name|currentNumberType
operator|=
name|NumberType
operator|.
name|DOUBLE
expr_stmt|;
name|valueDouble
operator|=
name|inDouble
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|VALUE_BOOLEAN
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|VALUE_BOOLEAN
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|VALUE_BOOLEAN
expr_stmt|;
name|valueBoolean
operator|=
name|inBoolean
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|XsonType
operator|.
name|VALUE_NULL
operator|.
name|code
argument_list|()
condition|)
block|{
name|xsonType
operator|=
name|XsonType
operator|.
name|VALUE_NULL
expr_stmt|;
name|currentToken
operator|=
name|Token
operator|.
name|VALUE_NULL
expr_stmt|;
block|}
return|return
name|currentToken
return|;
block|}
DECL|method|skipChildren
annotation|@
name|Override
specifier|public
name|void
name|skipChildren
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xsonType
operator|!=
name|XsonType
operator|.
name|START_OBJECT
operator|&&
name|xsonType
operator|!=
name|XsonType
operator|.
name|START_ARRAY
condition|)
block|{
return|return;
block|}
name|int
name|open
init|=
literal|1
decl_stmt|;
comment|/* Since proper matching of start/end markers is handled          * by nextToken(), we'll just count nesting levels here          */
while|while
condition|(
literal|true
condition|)
block|{
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|xsonType
operator|==
literal|null
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|xsonType
condition|)
block|{
case|case
name|START_OBJECT
case|:
case|case
name|START_ARRAY
case|:
operator|++
name|open
expr_stmt|;
break|break;
case|case
name|END_OBJECT
case|:
case|case
name|END_ARRAY
case|:
if|if
condition|(
operator|--
name|open
operator|==
literal|0
condition|)
block|{
return|return;
block|}
break|break;
block|}
block|}
block|}
DECL|method|currentToken
annotation|@
name|Override
specifier|public
name|Token
name|currentToken
parameter_list|()
block|{
return|return
name|currentToken
return|;
block|}
DECL|method|currentName
annotation|@
name|Override
specifier|public
name|String
name|currentName
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentName
return|;
block|}
DECL|method|text
annotation|@
name|Override
specifier|public
name|String
name|text
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
argument_list|(
name|utf16Result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|utf16Result
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|textCharacters
annotation|@
name|Override
specifier|public
name|char
index|[]
name|textCharacters
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|utf16Result
operator|.
name|result
return|;
block|}
DECL|method|textLength
annotation|@
name|Override
specifier|public
name|int
name|textLength
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|utf16Result
operator|.
name|length
return|;
block|}
DECL|method|textOffset
annotation|@
name|Override
specifier|public
name|int
name|textOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
DECL|method|numberValue
annotation|@
name|Override
specifier|public
name|Number
name|numberValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|INT
condition|)
block|{
return|return
name|valueInt
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|LONG
condition|)
block|{
return|return
name|valueLong
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|FLOAT
condition|)
block|{
return|return
name|valueFloat
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|DOUBLE
condition|)
block|{
return|return
name|valueDouble
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No number type"
argument_list|)
throw|;
block|}
DECL|method|numberType
annotation|@
name|Override
specifier|public
name|NumberType
name|numberType
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentNumberType
return|;
block|}
DECL|method|estimatedNumberType
annotation|@
name|Override
specifier|public
name|boolean
name|estimatedNumberType
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|binaryValue
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|binaryValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|valueBytes
return|;
block|}
DECL|method|doBooleanValue
annotation|@
name|Override
specifier|protected
name|boolean
name|doBooleanValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|valueBoolean
return|;
block|}
DECL|method|doShortValue
annotation|@
name|Override
specifier|protected
name|short
name|doShortValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|INT
condition|)
block|{
return|return
operator|(
name|short
operator|)
name|valueInt
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|LONG
condition|)
block|{
return|return
operator|(
name|short
operator|)
name|valueLong
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|FLOAT
condition|)
block|{
return|return
operator|(
name|short
operator|)
name|valueFloat
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|DOUBLE
condition|)
block|{
return|return
operator|(
name|short
operator|)
name|valueDouble
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No number type"
argument_list|)
throw|;
block|}
DECL|method|doIntValue
annotation|@
name|Override
specifier|protected
name|int
name|doIntValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|INT
condition|)
block|{
return|return
name|valueInt
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|LONG
condition|)
block|{
return|return
operator|(
name|int
operator|)
name|valueLong
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|FLOAT
condition|)
block|{
return|return
operator|(
name|int
operator|)
name|valueFloat
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|DOUBLE
condition|)
block|{
return|return
operator|(
name|int
operator|)
name|valueDouble
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No number type"
argument_list|)
throw|;
block|}
DECL|method|doLongValue
annotation|@
name|Override
specifier|protected
name|long
name|doLongValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|LONG
condition|)
block|{
return|return
name|valueLong
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|INT
condition|)
block|{
return|return
operator|(
name|long
operator|)
name|valueInt
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|FLOAT
condition|)
block|{
return|return
operator|(
name|long
operator|)
name|valueFloat
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|DOUBLE
condition|)
block|{
return|return
operator|(
name|long
operator|)
name|valueDouble
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No number type"
argument_list|)
throw|;
block|}
DECL|method|doFloatValue
annotation|@
name|Override
specifier|protected
name|float
name|doFloatValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|FLOAT
condition|)
block|{
return|return
name|valueFloat
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|INT
condition|)
block|{
return|return
operator|(
name|float
operator|)
name|valueInt
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|LONG
condition|)
block|{
return|return
operator|(
name|float
operator|)
name|valueLong
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|DOUBLE
condition|)
block|{
return|return
operator|(
name|float
operator|)
name|valueDouble
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No number type"
argument_list|)
throw|;
block|}
DECL|method|doDoubleValue
annotation|@
name|Override
specifier|protected
name|double
name|doDoubleValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|DOUBLE
condition|)
block|{
return|return
name|valueDouble
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|INT
condition|)
block|{
return|return
operator|(
name|double
operator|)
name|valueInt
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|FLOAT
condition|)
block|{
return|return
operator|(
name|double
operator|)
name|valueFloat
return|;
block|}
elseif|else
if|if
condition|(
name|currentNumberType
operator|==
name|NumberType
operator|.
name|LONG
condition|)
block|{
return|return
operator|(
name|double
operator|)
name|valueLong
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No number type"
argument_list|)
throw|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
DECL|method|inShort
specifier|private
name|short
name|inShort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
call|(
name|short
call|)
argument_list|(
operator|(
operator|(
name|is
operator|.
name|read
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|is
operator|.
name|read
argument_list|()
operator|&
literal|0xFF
operator|)
argument_list|)
return|;
block|}
comment|/**      * Reads four bytes and returns an int.      */
DECL|method|inInt
specifier|private
name|int
name|inInt
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|is
operator|.
name|read
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|is
operator|.
name|read
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|is
operator|.
name|read
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|is
operator|.
name|read
argument_list|()
operator|&
literal|0xFF
operator|)
return|;
block|}
comment|/**      * Reads an int stored in variable-length format.  Reads between one and      * five bytes.  Smaller values take fewer bytes.  Negative numbers are not      * supported.      */
DECL|method|inVInt
specifier|private
name|int
name|inVInt
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|b
operator|&
literal|0x7F
decl_stmt|;
for|for
control|(
name|int
name|shift
init|=
literal|7
init|;
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|;
name|shift
operator|+=
literal|7
control|)
block|{
name|b
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
name|shift
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
comment|/**      * Reads eight bytes and returns a long.      */
DECL|method|inLong
specifier|private
name|long
name|inLong
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|inInt
argument_list|()
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
name|inInt
argument_list|()
operator|&
literal|0xFFFFFFFFL
operator|)
return|;
block|}
comment|/**      * Reads a long stored in variable-length format.  Reads between one and      * nine bytes.  Smaller values take fewer bytes.  Negative numbers are not      * supported.      */
DECL|method|readVLong
specifier|private
name|long
name|readVLong
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
name|long
name|i
init|=
name|b
operator|&
literal|0x7F
decl_stmt|;
for|for
control|(
name|int
name|shift
init|=
literal|7
init|;
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|;
name|shift
operator|+=
literal|7
control|)
block|{
name|b
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
name|shift
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
DECL|method|inUTF
specifier|private
name|String
name|inUTF
parameter_list|()
throws|throws
name|IOException
block|{
name|inUtf16
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|utf16Result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|utf16Result
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Reads a string.      */
DECL|method|inUtf16
specifier|private
name|void
name|inUtf16
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|inVInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|cachedBytes
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|length
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
name|bytes
operator|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
name|length
operator|*
literal|1.25
argument_list|)
index|]
expr_stmt|;
name|cachedBytes
operator|.
name|get
argument_list|()
operator|.
name|set
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
name|inBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|utf16Result
operator|=
name|Unicode
operator|.
name|fromBytesAsUtf16
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|inFloat
specifier|private
name|float
name|inFloat
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|inInt
argument_list|()
argument_list|)
return|;
block|}
DECL|method|inDouble
specifier|private
name|double
name|inDouble
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|inLong
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Reads a boolean.      */
DECL|method|inBoolean
specifier|private
name|boolean
name|inBoolean
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|ch
init|=
operator|(
name|byte
operator|)
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|<
literal|0
condition|)
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
return|return
operator|(
name|ch
operator|!=
literal|0
operator|)
return|;
block|}
DECL|method|inBytes
specifier|private
name|void
name|inBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|len
condition|)
block|{
name|int
name|count
init|=
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|offset
operator|+
name|n
argument_list|,
name|len
operator|-
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
name|n
operator|+=
name|count
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

