begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.nodes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
package|;
end_package

begin_comment
comment|/**  * Stores one key value pair used in a map.  */
end_comment

begin_class
DECL|class|NodeTuple
specifier|public
class|class
name|NodeTuple
block|{
DECL|field|keyNode
specifier|private
specifier|final
name|Node
name|keyNode
decl_stmt|;
DECL|field|valueNode
specifier|private
specifier|final
name|Node
name|valueNode
decl_stmt|;
DECL|method|NodeTuple
specifier|public
name|NodeTuple
parameter_list|(
name|Node
name|keyNode
parameter_list|,
name|Node
name|valueNode
parameter_list|)
block|{
if|if
condition|(
name|keyNode
operator|==
literal|null
operator|||
name|valueNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Nodes must be provided."
argument_list|)
throw|;
block|}
name|this
operator|.
name|keyNode
operator|=
name|keyNode
expr_stmt|;
name|this
operator|.
name|valueNode
operator|=
name|valueNode
expr_stmt|;
block|}
comment|/**      * Key node.      */
DECL|method|getKeyNode
specifier|public
name|Node
name|getKeyNode
parameter_list|()
block|{
return|return
name|keyNode
return|;
block|}
comment|/**      * Value node.      *      * @return value      */
DECL|method|getValueNode
specifier|public
name|Node
name|getValueNode
parameter_list|()
block|{
return|return
name|valueNode
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<NodeTuple keyNode="
operator|+
name|keyNode
operator|.
name|toString
argument_list|()
operator|+
literal|"; valueNode="
operator|+
name|valueNode
operator|.
name|toString
argument_list|()
operator|+
literal|">"
return|;
block|}
block|}
end_class

end_unit

