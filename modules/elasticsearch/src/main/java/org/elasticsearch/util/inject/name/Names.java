begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2006 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.inject.name
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|name
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Utility methods for use with {@code @}{@link Named}.  *  * @author crazybob@google.com (Bob Lee)  */
end_comment

begin_class
DECL|class|Names
specifier|public
class|class
name|Names
block|{
DECL|method|Names
specifier|private
name|Names
parameter_list|()
block|{}
comment|/**    * Creates a {@link Named} annotation with {@code name} as the value.    */
DECL|method|named
specifier|public
specifier|static
name|Named
name|named
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|NamedImpl
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Creates a constant binding to {@code @Named(key)} for each entry in    * {@code properties}.    */
DECL|method|bindProperties
specifier|public
specifier|static
name|void
name|bindProperties
parameter_list|(
name|Binder
name|binder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|binder
operator|=
name|binder
operator|.
name|skipSources
argument_list|(
name|Names
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|NamedImpl
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toInstance
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a constant binding to {@code @Named(key)} for each property. This    * method binds all properties including those inherited from     * {@link Properties#defaults defaults}.    */
DECL|method|bindProperties
specifier|public
specifier|static
name|void
name|bindProperties
parameter_list|(
name|Binder
name|binder
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
name|binder
operator|=
name|binder
operator|.
name|skipSources
argument_list|(
name|Names
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// use enumeration to include the default properties
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|properties
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|propertyName
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|NamedImpl
argument_list|(
name|propertyName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toInstance
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

