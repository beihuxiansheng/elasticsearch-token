begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.reader
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|Mark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|YAMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|scanner
operator|.
name|Constant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Reader: checks if characters are in allowed range, adds '\0' to the end.  *  * @see<a href="http://pyyaml.org/wiki/PyYAML">PyYAML</a> for more information  */
end_comment

begin_class
DECL|class|StreamReader
specifier|public
class|class
name|StreamReader
block|{
comment|// NON_PRINTABLE changed from PyYAML: \uFFFD excluded because Java returns
comment|// it in case of data corruption
DECL|field|NON_PRINTABLE
specifier|final
specifier|static
name|Pattern
name|NON_PRINTABLE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^\t\n\r\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFC]"
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|stream
specifier|private
specifier|final
name|Reader
name|stream
decl_stmt|;
DECL|field|pointer
specifier|private
name|int
name|pointer
init|=
literal|0
decl_stmt|;
DECL|field|eof
specifier|private
name|boolean
name|eof
init|=
literal|true
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|StringBuilder
name|buffer
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|field|line
specifier|private
name|int
name|line
init|=
literal|0
decl_stmt|;
DECL|field|column
specifier|private
name|int
name|column
init|=
literal|0
decl_stmt|;
DECL|method|StreamReader
specifier|public
name|StreamReader
parameter_list|(
name|String
name|stream
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
literal|"<string>"
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|checkPrintable
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|append
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|this
operator|.
name|stream
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|eof
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|StreamReader
specifier|public
name|StreamReader
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
literal|"<reader>"
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|eof
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|checkPrintable
name|void
name|checkPrintable
parameter_list|(
name|CharSequence
name|data
parameter_list|)
block|{
name|Matcher
name|em
init|=
name|NON_PRINTABLE
operator|.
name|matcher
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|em
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|position
init|=
name|this
operator|.
name|index
operator|+
name|this
operator|.
name|buffer
operator|.
name|length
argument_list|()
operator|-
name|this
operator|.
name|pointer
operator|+
name|em
operator|.
name|start
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|ReaderException
argument_list|(
name|name
argument_list|,
name|position
argument_list|,
name|em
operator|.
name|group
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|" special characters are not allowed"
argument_list|)
throw|;
block|}
block|}
DECL|method|getMark
specifier|public
name|Mark
name|getMark
parameter_list|()
block|{
return|return
operator|new
name|Mark
argument_list|(
name|name
argument_list|,
name|this
operator|.
name|index
argument_list|,
name|this
operator|.
name|line
argument_list|,
name|this
operator|.
name|column
argument_list|,
name|this
operator|.
name|buffer
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|pointer
argument_list|)
return|;
block|}
DECL|method|forward
specifier|public
name|void
name|forward
parameter_list|()
block|{
name|forward
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * read the next length characters and move the pointer.      *      * @param length      */
DECL|method|forward
specifier|public
name|void
name|forward
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|pointer
operator|+
name|length
operator|+
literal|1
operator|>=
name|this
operator|.
name|buffer
operator|.
name|length
argument_list|()
condition|)
block|{
name|update
argument_list|(
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|char
name|ch
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|this
operator|.
name|buffer
operator|.
name|charAt
argument_list|(
name|this
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|this
operator|.
name|pointer
operator|++
expr_stmt|;
name|this
operator|.
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|Constant
operator|.
name|LINEBR
operator|.
name|has
argument_list|(
name|ch
argument_list|)
operator|||
operator|(
name|ch
operator|==
literal|'\r'
operator|&&
name|buffer
operator|.
name|charAt
argument_list|(
name|pointer
argument_list|)
operator|!=
literal|'\n'
operator|)
condition|)
block|{
name|this
operator|.
name|line
operator|++
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|!=
literal|'\uFEFF'
condition|)
block|{
name|this
operator|.
name|column
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|peek
specifier|public
name|char
name|peek
parameter_list|()
block|{
return|return
name|peek
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * Peek the next index-th character      *      * @param index      * @return      */
DECL|method|peek
specifier|public
name|char
name|peek
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|pointer
operator|+
name|index
operator|+
literal|1
operator|>
name|this
operator|.
name|buffer
operator|.
name|length
argument_list|()
condition|)
block|{
name|update
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|buffer
operator|.
name|charAt
argument_list|(
name|this
operator|.
name|pointer
operator|+
name|index
argument_list|)
return|;
block|}
comment|/**      * peek the next length characters      *      * @param length      * @return      */
DECL|method|prefix
specifier|public
name|String
name|prefix
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|pointer
operator|+
name|length
operator|>=
name|this
operator|.
name|buffer
operator|.
name|length
argument_list|()
condition|)
block|{
name|update
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|pointer
operator|+
name|length
operator|>
name|this
operator|.
name|buffer
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|buffer
operator|.
name|substring
argument_list|(
name|this
operator|.
name|pointer
argument_list|,
name|this
operator|.
name|buffer
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|buffer
operator|.
name|substring
argument_list|(
name|this
operator|.
name|pointer
argument_list|,
name|this
operator|.
name|pointer
operator|+
name|length
argument_list|)
return|;
block|}
block|}
DECL|method|update
specifier|private
name|void
name|update
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|this
operator|.
name|pointer
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|this
operator|.
name|buffer
operator|.
name|length
argument_list|()
operator|<
name|length
condition|)
block|{
name|String
name|rawData
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|eof
condition|)
block|{
name|char
index|[]
name|data
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|converted
init|=
operator|-
literal|2
decl_stmt|;
try|try
block|{
name|converted
operator|=
name|this
operator|.
name|stream
operator|.
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|YAMLException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
name|converted
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|eof
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|rawData
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|converted
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rawData
operator|!=
literal|null
condition|)
block|{
name|checkPrintable
argument_list|(
name|rawData
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|append
argument_list|(
name|rawData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|eof
condition|)
block|{
name|this
operator|.
name|buffer
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|getColumn
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
DECL|method|getEncoding
specifier|public
name|Charset
name|getEncoding
parameter_list|()
block|{
return|return
name|Charset
operator|.
name|forName
argument_list|(
operator|(
operator|(
name|UnicodeReader
operator|)
name|this
operator|.
name|stream
operator|)
operator|.
name|getEncoding
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getIndex
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|getLine
specifier|public
name|int
name|getLine
parameter_list|()
block|{
return|return
name|line
return|;
block|}
block|}
end_class

end_unit

