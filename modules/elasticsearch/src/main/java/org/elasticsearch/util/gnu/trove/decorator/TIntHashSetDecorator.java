begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove.decorator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
operator|.
name|decorator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
operator|.
name|TIntHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
operator|.
name|TIntIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|//////////////////////////////////////////////////
end_comment

begin_comment
comment|// THIS IS A GENERATED CLASS. DO NOT HAND EDIT! //
end_comment

begin_comment
comment|//////////////////////////////////////////////////
end_comment

begin_comment
comment|/**  * Wrapper class to make a TIntHashSet conform to the<tt>java.util.Set</tt> API.  * This class simply decorates an underlying TIntHashSet and translates the Object-based  * APIs into their Trove primitive analogs.  *<p/>  *<p/>  * Note that wrapping and unwrapping primitive values is extremely inefficient.  If  * possible, users of this class should override the appropriate methods in this class  * and use a table of canonical values.  *</p>  *<p/>  * Created: Tue Sep 24 22:08:17 PDT 2002  *  * @author Eric D. Friedman  */
end_comment

begin_class
DECL|class|TIntHashSetDecorator
specifier|public
class|class
name|TIntHashSetDecorator
extends|extends
name|AbstractSet
argument_list|<
name|Integer
argument_list|>
implements|implements
name|Set
argument_list|<
name|Integer
argument_list|>
implements|,
name|Externalizable
block|{
comment|/**      * the wrapped primitive set      */
DECL|field|_set
specifier|protected
name|TIntHashSet
name|_set
decl_stmt|;
comment|/**      * FOR EXTERNALIZATION ONLY!!      */
DECL|method|TIntHashSetDecorator
specifier|public
name|TIntHashSetDecorator
parameter_list|()
block|{     }
comment|/**      * Creates a wrapper that decorates the specified primitive set.      */
DECL|method|TIntHashSetDecorator
specifier|public
name|TIntHashSetDecorator
parameter_list|(
name|TIntHashSet
name|set
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|_set
operator|=
name|set
expr_stmt|;
block|}
comment|/**      * Returns a reference to the set wrapped by this decorator.      */
DECL|method|getSet
specifier|public
name|TIntHashSet
name|getSet
parameter_list|()
block|{
return|return
name|_set
return|;
block|}
comment|/**      * Clones the underlying trove collection and returns the clone wrapped in a new      * decorator instance.  This is a shallow clone except where primitives are      * concerned.      *      * @return a copy of the receiver      */
DECL|method|clone
specifier|public
name|TIntHashSetDecorator
name|clone
parameter_list|()
block|{
try|try
block|{
name|TIntHashSetDecorator
name|copy
init|=
operator|(
name|TIntHashSetDecorator
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|copy
operator|.
name|_set
operator|=
operator|(
name|TIntHashSet
operator|)
name|_set
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|copy
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// assert(false);
throw|throw
operator|new
name|InternalError
argument_list|()
throw|;
comment|// we are cloneable
block|}
block|}
comment|/**      * Inserts a value into the set.      *      * @param value true if the set was modified by the insertion      */
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
return|return
name|_set
operator|.
name|add
argument_list|(
name|unwrap
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Compares this set with another set for equality of their stored      * entries.      *      * @param other an<code>Object</code> value      * @return true if the sets are identical      */
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|_set
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// comparing two trove sets
block|}
elseif|else
if|if
condition|(
name|other
operator|instanceof
name|Set
condition|)
block|{
name|Set
name|that
init|=
operator|(
name|Set
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|that
operator|.
name|size
argument_list|()
operator|!=
name|_set
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|// different sizes, no need to compare
block|}
else|else
block|{
comment|// now we have to do it the hard way
name|Iterator
name|it
init|=
name|that
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|that
operator|.
name|size
argument_list|()
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
name|Object
name|val
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Integer
condition|)
block|{
name|int
name|v
init|=
name|unwrap
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|_set
operator|.
name|contains
argument_list|(
name|v
argument_list|)
condition|)
block|{
comment|// match, ok to continue
block|}
else|else
block|{
return|return
literal|false
return|;
comment|// no match: we're done
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
comment|// different type in other set
block|}
block|}
return|return
literal|true
return|;
comment|// all entries match
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Empties the set.      */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|_set
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Deletes a value from the set.      *      * @param value an<code>Object</code> value      * @return true if the set was modified      */
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|_set
operator|.
name|remove
argument_list|(
name|unwrap
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Creates an iterator over the values of the set.      *      * @return an iterator with support for removals in the underlying set      */
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|TIntIterator
name|it
init|=
name|_set
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|public
name|Integer
name|next
parameter_list|()
block|{
return|return
name|wrap
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the number of entries in the set.      *      * @return the set's size.      */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|_set
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Indicates whether set has any entries.      *      * @return true if the set is empty      */
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/**      * Wraps a value      *      * @param k value in the underlying set      * @return an Object representation of the value      */
DECL|method|wrap
specifier|protected
name|Integer
name|wrap
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|k
argument_list|)
return|;
block|}
comment|/**      * Unwraps a value      *      * @param value wrapped value      * @return an unwrapped representation of the value      */
DECL|method|unwrap
specifier|protected
name|int
name|unwrap
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|// Implements Externalizable
DECL|method|readExternal
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// VERSION
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// SET
name|_set
operator|=
operator|(
name|TIntHashSet
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
comment|// Implements Externalizable
DECL|method|writeExternal
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// VERSION
name|out
operator|.
name|writeByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SET
name|out
operator|.
name|writeObject
argument_list|(
name|_set
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// TIntHashSetDecorator
end_comment

end_unit

