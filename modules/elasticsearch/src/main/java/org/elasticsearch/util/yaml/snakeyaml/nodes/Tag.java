begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.nodes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|YAMLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|Tag
specifier|public
specifier|final
class|class
name|Tag
implements|implements
name|Comparable
argument_list|<
name|Tag
argument_list|>
block|{
DECL|field|PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"tag:yaml.org,2002:"
decl_stmt|;
DECL|field|YAML
specifier|public
specifier|static
specifier|final
name|Tag
name|YAML
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"yaml"
argument_list|)
decl_stmt|;
DECL|field|VALUE
specifier|public
specifier|static
specifier|final
name|Tag
name|VALUE
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"value"
argument_list|)
decl_stmt|;
DECL|field|MERGE
specifier|public
specifier|static
specifier|final
name|Tag
name|MERGE
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"merge"
argument_list|)
decl_stmt|;
DECL|field|SET
specifier|public
specifier|static
specifier|final
name|Tag
name|SET
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"set"
argument_list|)
decl_stmt|;
DECL|field|PAIRS
specifier|public
specifier|static
specifier|final
name|Tag
name|PAIRS
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"pairs"
argument_list|)
decl_stmt|;
DECL|field|OMAP
specifier|public
specifier|static
specifier|final
name|Tag
name|OMAP
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"omap"
argument_list|)
decl_stmt|;
DECL|field|BINARY
specifier|public
specifier|static
specifier|final
name|Tag
name|BINARY
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"binary"
argument_list|)
decl_stmt|;
DECL|field|INT
specifier|public
specifier|static
specifier|final
name|Tag
name|INT
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"int"
argument_list|)
decl_stmt|;
DECL|field|FLOAT
specifier|public
specifier|static
specifier|final
name|Tag
name|FLOAT
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"float"
argument_list|)
decl_stmt|;
DECL|field|TIMESTAMP
specifier|public
specifier|static
specifier|final
name|Tag
name|TIMESTAMP
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"timestamp"
argument_list|)
decl_stmt|;
DECL|field|BOOL
specifier|public
specifier|static
specifier|final
name|Tag
name|BOOL
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"bool"
argument_list|)
decl_stmt|;
DECL|field|NULL
specifier|public
specifier|static
specifier|final
name|Tag
name|NULL
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"null"
argument_list|)
decl_stmt|;
DECL|field|STR
specifier|public
specifier|static
specifier|final
name|Tag
name|STR
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"str"
argument_list|)
decl_stmt|;
DECL|field|SEQ
specifier|public
specifier|static
specifier|final
name|Tag
name|SEQ
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"seq"
argument_list|)
decl_stmt|;
DECL|field|MAP
specifier|public
specifier|static
specifier|final
name|Tag
name|MAP
init|=
operator|new
name|Tag
argument_list|(
name|PREFIX
operator|+
literal|"map"
argument_list|)
decl_stmt|;
DECL|field|COMPATIBILITY_MAP
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Tag
argument_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|COMPATIBILITY_MAP
decl_stmt|;
static|static
block|{
name|COMPATIBILITY_MAP
operator|=
operator|new
name|HashMap
argument_list|<
name|Tag
argument_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|floatSet
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|floatSet
operator|.
name|add
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|floatSet
operator|.
name|add
argument_list|(
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|floatSet
operator|.
name|add
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
expr_stmt|;
name|COMPATIBILITY_MAP
operator|.
name|put
argument_list|(
name|FLOAT
argument_list|,
name|floatSet
argument_list|)
expr_stmt|;
comment|//
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|intSet
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|intSet
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|intSet
operator|.
name|add
argument_list|(
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|intSet
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|)
expr_stmt|;
name|COMPATIBILITY_MAP
operator|.
name|put
argument_list|(
name|INT
argument_list|,
name|intSet
argument_list|)
expr_stmt|;
comment|//
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|timestampSet
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|timestampSet
operator|.
name|add
argument_list|(
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|timestampSet
operator|.
name|add
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|timestampSet
operator|.
name|add
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|)
expr_stmt|;
name|COMPATIBILITY_MAP
operator|.
name|put
argument_list|(
name|TIMESTAMP
argument_list|,
name|timestampSet
argument_list|)
expr_stmt|;
block|}
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|Tag
specifier|public
name|Tag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Tag must be provided."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tag must not be empty."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
name|tag
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tag must not contain leading or trailing spaces."
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|tag
expr_stmt|;
block|}
DECL|method|Tag
specifier|public
name|Tag
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Class for tag must be provided."
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|Tag
operator|.
name|PREFIX
operator|+
name|clazz
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|startsWith
specifier|public
name|boolean
name|startsWith
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|value
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
return|;
block|}
DECL|method|getClassName
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|startsWith
argument_list|(
name|Tag
operator|.
name|PREFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YAMLException
argument_list|(
literal|"Unknown tag: "
operator|+
name|value
argument_list|)
throw|;
block|}
return|return
name|value
operator|.
name|substring
argument_list|(
name|Tag
operator|.
name|PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLength
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|value
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|Tag
condition|)
block|{
return|return
name|value
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Tag
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO to be removed later (version 2.0?)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Comparing Tag and String is deprecated."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Java has more then 1 class compatible with a language-independent tag      * (!!int, !!float, !!timestamp etc)      *      * @param clazz - Class to check compatibility      * @return true when the Class can be represented by this      *         language-independent tag      */
DECL|method|isCompatible
specifier|public
name|boolean
name|isCompatible
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|set
init|=
name|COMPATIBILITY_MAP
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
return|return
name|set
operator|.
name|contains
argument_list|(
name|clazz
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Check whether this tag matches the global tag for the Class      *      * @param clazz - Class to check      * @return true when the this tag can be used as a global tag for the Class      */
DECL|method|matches
specifier|public
name|boolean
name|matches
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|value
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|PREFIX
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Tag
name|o
parameter_list|)
block|{
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

