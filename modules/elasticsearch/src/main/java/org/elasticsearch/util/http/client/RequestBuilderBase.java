begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|Request
operator|.
name|EntityWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|collection
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|url
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Builder for {@link Request}  *  * @param<T>  */
end_comment

begin_class
DECL|class|RequestBuilderBase
specifier|abstract
class|class
name|RequestBuilderBase
parameter_list|<
name|T
extends|extends
name|RequestBuilderBase
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
DECL|class|RequestImpl
specifier|private
specifier|static
specifier|final
class|class
name|RequestImpl
implements|implements
name|Request
block|{
DECL|field|type
specifier|private
name|RequestType
name|type
decl_stmt|;
DECL|field|url
specifier|private
name|String
name|url
decl_stmt|;
DECL|field|headers
specifier|private
name|Headers
name|headers
init|=
operator|new
name|Headers
argument_list|()
decl_stmt|;
DECL|field|cookies
specifier|private
name|Collection
argument_list|<
name|Cookie
argument_list|>
name|cookies
init|=
operator|new
name|ArrayList
argument_list|<
name|Cookie
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|byteData
specifier|private
name|byte
index|[]
name|byteData
decl_stmt|;
DECL|field|stringData
specifier|private
name|String
name|stringData
decl_stmt|;
DECL|field|streamData
specifier|private
name|InputStream
name|streamData
decl_stmt|;
DECL|field|entityWriter
specifier|private
name|EntityWriter
name|entityWriter
decl_stmt|;
DECL|field|params
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
DECL|field|parts
specifier|private
name|List
argument_list|<
name|Part
argument_list|>
name|parts
decl_stmt|;
DECL|field|virtualHost
specifier|private
name|String
name|virtualHost
decl_stmt|;
DECL|field|length
specifier|private
name|long
name|length
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|queryParams
specifier|public
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
decl_stmt|;
DECL|method|RequestImpl
specifier|public
name|RequestImpl
parameter_list|()
block|{         }
DECL|method|RequestImpl
specifier|public
name|RequestImpl
parameter_list|(
name|Request
name|prototype
parameter_list|)
block|{
if|if
condition|(
name|prototype
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|prototype
operator|.
name|getType
argument_list|()
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|prototype
operator|.
name|getUrl
argument_list|()
expr_stmt|;
name|this
operator|.
name|headers
operator|=
operator|new
name|Headers
argument_list|(
name|prototype
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cookies
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cookie
argument_list|>
argument_list|(
name|prototype
operator|.
name|getCookies
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|byteData
operator|=
name|prototype
operator|.
name|getByteData
argument_list|()
expr_stmt|;
name|this
operator|.
name|stringData
operator|=
name|prototype
operator|.
name|getStringData
argument_list|()
expr_stmt|;
name|this
operator|.
name|streamData
operator|=
name|prototype
operator|.
name|getStreamData
argument_list|()
expr_stmt|;
name|this
operator|.
name|entityWriter
operator|=
name|prototype
operator|.
name|getEntityWriter
argument_list|()
expr_stmt|;
name|this
operator|.
name|params
operator|=
operator|(
name|prototype
operator|.
name|getParams
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|LinkedListMultimap
operator|.
name|create
argument_list|(
name|prototype
operator|.
name|getParams
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|this
operator|.
name|queryParams
operator|=
operator|(
name|prototype
operator|.
name|getQueryParams
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|LinkedListMultimap
operator|.
name|create
argument_list|(
name|prototype
operator|.
name|getQueryParams
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|this
operator|.
name|parts
operator|=
operator|(
name|prototype
operator|.
name|getParts
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|Part
argument_list|>
argument_list|(
name|prototype
operator|.
name|getParts
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|this
operator|.
name|virtualHost
operator|=
name|prototype
operator|.
name|getVirtualHost
argument_list|()
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|prototype
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* @Override */
DECL|method|getType
specifier|public
name|RequestType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/* @Override */
DECL|method|getUrl
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
try|try
block|{
name|Url
name|url
init|=
name|Url
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryParams
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|queryParams
operator|.
name|entries
argument_list|()
control|)
block|{
name|url
operator|.
name|addParameter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal URL"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/* @Override */
DECL|method|getHeaders
specifier|public
name|Headers
name|getHeaders
parameter_list|()
block|{
return|return
name|Headers
operator|.
name|unmodifiableHeaders
argument_list|(
name|headers
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|getCookies
specifier|public
name|Collection
argument_list|<
name|Cookie
argument_list|>
name|getCookies
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|cookies
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|getByteData
specifier|public
name|byte
index|[]
name|getByteData
parameter_list|()
block|{
return|return
name|byteData
return|;
block|}
comment|/* @Override */
DECL|method|getStringData
specifier|public
name|String
name|getStringData
parameter_list|()
block|{
return|return
name|stringData
return|;
block|}
comment|/* @Override */
DECL|method|getStreamData
specifier|public
name|InputStream
name|getStreamData
parameter_list|()
block|{
return|return
name|streamData
return|;
block|}
comment|/* @Override */
DECL|method|getEntityWriter
specifier|public
name|EntityWriter
name|getEntityWriter
parameter_list|()
block|{
return|return
name|entityWriter
return|;
block|}
comment|/* @Override */
DECL|method|getLength
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/* @Override */
DECL|method|getParams
specifier|public
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
operator|==
literal|null
condition|?
literal|null
else|:
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
name|params
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|getParts
specifier|public
name|List
argument_list|<
name|Part
argument_list|>
name|getParts
parameter_list|()
block|{
return|return
name|parts
operator|==
literal|null
condition|?
literal|null
else|:
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|parts
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|getVirtualHost
specifier|public
name|String
name|getVirtualHost
parameter_list|()
block|{
return|return
name|virtualHost
return|;
block|}
DECL|method|getQueryParams
specifier|public
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getQueryParams
parameter_list|()
block|{
return|return
name|queryParams
operator|==
literal|null
condition|?
literal|null
else|:
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
name|queryParams
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|header
range|:
name|headers
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|header
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|header
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|field|derived
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|derived
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|RequestImpl
name|request
decl_stmt|;
DECL|method|RequestBuilderBase
name|RequestBuilderBase
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|derived
parameter_list|,
name|RequestType
name|type
parameter_list|)
block|{
name|this
operator|.
name|derived
operator|=
name|derived
expr_stmt|;
name|request
operator|=
operator|new
name|RequestImpl
argument_list|()
expr_stmt|;
name|request
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|RequestBuilderBase
name|RequestBuilderBase
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|derived
parameter_list|,
name|Request
name|prototype
parameter_list|)
block|{
name|this
operator|.
name|derived
operator|=
name|derived
expr_stmt|;
name|request
operator|=
operator|new
name|RequestImpl
argument_list|(
name|prototype
argument_list|)
expr_stmt|;
block|}
DECL|method|setUrl
specifier|public
name|T
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|request
operator|.
name|url
operator|=
name|url
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setVirtualHost
specifier|public
name|T
name|setVirtualHost
parameter_list|(
name|String
name|virtualHost
parameter_list|)
block|{
name|request
operator|.
name|virtualHost
operator|=
name|virtualHost
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setHeader
specifier|public
name|T
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|request
operator|.
name|headers
operator|.
name|replace
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|addHeader
specifier|public
name|T
name|addHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|request
operator|.
name|headers
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setHeaders
specifier|public
name|T
name|setHeaders
parameter_list|(
name|Headers
name|headers
parameter_list|)
block|{
name|request
operator|.
name|headers
operator|=
operator|(
name|headers
operator|==
literal|null
condition|?
operator|new
name|Headers
argument_list|()
else|:
operator|new
name|Headers
argument_list|(
name|headers
argument_list|)
operator|)
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|addCookie
specifier|public
name|T
name|addCookie
parameter_list|(
name|Cookie
name|cookie
parameter_list|)
block|{
name|request
operator|.
name|cookies
operator|.
name|add
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|resetParameters
specifier|private
name|void
name|resetParameters
parameter_list|()
block|{
name|request
operator|.
name|params
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|resetNonMultipartData
specifier|private
name|void
name|resetNonMultipartData
parameter_list|()
block|{
name|request
operator|.
name|byteData
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|stringData
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|streamData
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|entityWriter
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|length
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|resetMultipartData
specifier|private
name|void
name|resetMultipartData
parameter_list|()
block|{
name|request
operator|.
name|parts
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|setBody
specifier|public
name|T
name|setBody
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|POST
operator|)
operator|&&
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|PUT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Request type has to POST or PUT for content"
argument_list|)
throw|;
block|}
name|resetParameters
argument_list|()
expr_stmt|;
name|resetNonMultipartData
argument_list|()
expr_stmt|;
name|resetMultipartData
argument_list|()
expr_stmt|;
name|request
operator|.
name|byteData
operator|=
name|data
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setBody
specifier|public
name|T
name|setBody
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|POST
operator|)
operator|&&
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|PUT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Request type has to POST or PUT for content"
argument_list|)
throw|;
block|}
name|resetParameters
argument_list|()
expr_stmt|;
name|resetNonMultipartData
argument_list|()
expr_stmt|;
name|resetMultipartData
argument_list|()
expr_stmt|;
name|request
operator|.
name|stringData
operator|=
name|data
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setBody
specifier|public
name|T
name|setBody
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|POST
operator|)
operator|&&
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|PUT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Request type has to POST or PUT for content"
argument_list|)
throw|;
block|}
name|resetParameters
argument_list|()
expr_stmt|;
name|resetNonMultipartData
argument_list|()
expr_stmt|;
name|resetMultipartData
argument_list|()
expr_stmt|;
name|request
operator|.
name|streamData
operator|=
name|stream
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setBody
specifier|public
name|T
name|setBody
parameter_list|(
name|EntityWriter
name|dataWriter
parameter_list|)
block|{
return|return
name|setBody
argument_list|(
name|dataWriter
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|setBody
specifier|public
name|T
name|setBody
parameter_list|(
name|EntityWriter
name|dataWriter
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|POST
operator|)
operator|&&
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|PUT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Request type has to POST or PUT for content"
argument_list|)
throw|;
block|}
name|resetParameters
argument_list|()
expr_stmt|;
name|resetNonMultipartData
argument_list|()
expr_stmt|;
name|resetMultipartData
argument_list|()
expr_stmt|;
name|request
operator|.
name|entityWriter
operator|=
name|dataWriter
expr_stmt|;
name|request
operator|.
name|length
operator|=
name|length
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|addQueryParameter
specifier|public
name|T
name|addQueryParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|queryParams
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|queryParams
operator|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|request
operator|.
name|queryParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|addParameter
specifier|public
name|T
name|addParameter
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|POST
operator|)
operator|&&
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|PUT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Request type has to POST or PUT for form parameters"
argument_list|)
throw|;
block|}
name|resetNonMultipartData
argument_list|()
expr_stmt|;
name|resetMultipartData
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|params
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|params
operator|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|request
operator|.
name|params
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setParameters
specifier|public
name|T
name|setParameters
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|POST
operator|)
operator|&&
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|PUT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Request type has to POST or PUT for form parameters"
argument_list|)
throw|;
block|}
name|resetNonMultipartData
argument_list|()
expr_stmt|;
name|resetMultipartData
argument_list|()
expr_stmt|;
name|request
operator|.
name|params
operator|=
name|LinkedListMultimap
operator|.
name|create
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setParameters
specifier|public
name|T
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|POST
operator|)
operator|&&
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|PUT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Request type has to POST or PUT for form parameters"
argument_list|)
throw|;
block|}
name|resetNonMultipartData
argument_list|()
expr_stmt|;
name|resetMultipartData
argument_list|()
expr_stmt|;
name|request
operator|.
name|params
operator|=
name|LinkedListMultimap
operator|.
name|create
argument_list|(
name|Multimaps
operator|.
name|forMap
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|addBodyPart
specifier|public
name|T
name|addBodyPart
parameter_list|(
name|Part
name|part
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|POST
operator|)
operator|&&
operator|(
name|request
operator|.
name|type
operator|!=
name|RequestType
operator|.
name|PUT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Request type has to POST or PUT for parts"
argument_list|)
throw|;
block|}
name|resetParameters
argument_list|()
expr_stmt|;
name|resetNonMultipartData
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|parts
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|parts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Part
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|request
operator|.
name|parts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return
name|derived
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|build
specifier|public
name|Request
name|build
parameter_list|()
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|length
operator|<
literal|0
operator|)
operator|&&
operator|(
name|request
operator|.
name|streamData
operator|==
literal|null
operator|)
operator|&&
operator|(
operator|(
name|request
operator|.
name|type
operator|==
name|RequestType
operator|.
name|POST
operator|)
operator|||
operator|(
name|request
operator|.
name|type
operator|==
name|RequestType
operator|.
name|PUT
operator|)
operator|)
condition|)
block|{
name|String
name|contentLength
init|=
name|request
operator|.
name|headers
operator|.
name|getHeaderValue
argument_list|(
literal|"Content-Length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentLength
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|request
operator|.
name|length
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|contentLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// NoOp -- we wdn't specify length so it will be chunked?
block|}
block|}
block|}
return|return
name|request
return|;
block|}
block|}
end_class

end_unit

