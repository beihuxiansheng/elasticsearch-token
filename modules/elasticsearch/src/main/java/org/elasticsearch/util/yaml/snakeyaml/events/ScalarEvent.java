begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.events
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|Mark
import|;
end_import

begin_comment
comment|/**  * Marks a scalar value.  */
end_comment

begin_class
DECL|class|ScalarEvent
specifier|public
specifier|final
class|class
name|ScalarEvent
extends|extends
name|NodeEvent
block|{
DECL|field|tag
specifier|private
specifier|final
name|String
name|tag
decl_stmt|;
comment|// style flag of a scalar event indicates the style of the scalar. Possible
comment|// values are None, '', '\'', '"', '|', '>'
DECL|field|style
specifier|private
specifier|final
name|Character
name|style
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
comment|// The implicit flag of a scalar event is a pair of boolean values that
comment|// indicate if the tag may be omitted when the scalar is emitted in a plain
comment|// and non-plain style correspondingly.
DECL|field|implicit
specifier|private
specifier|final
name|ImplicitTuple
name|implicit
decl_stmt|;
DECL|method|ScalarEvent
specifier|public
name|ScalarEvent
parameter_list|(
name|String
name|anchor
parameter_list|,
name|String
name|tag
parameter_list|,
name|ImplicitTuple
name|implicit
parameter_list|,
name|String
name|value
parameter_list|,
name|Mark
name|startMark
parameter_list|,
name|Mark
name|endMark
parameter_list|,
name|Character
name|style
parameter_list|)
block|{
name|super
argument_list|(
name|anchor
argument_list|,
name|startMark
argument_list|,
name|endMark
argument_list|)
expr_stmt|;
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
name|this
operator|.
name|implicit
operator|=
name|implicit
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|style
operator|=
name|style
expr_stmt|;
block|}
comment|/**      * Tag of this scalar.      *      * @return The tag of this scalar, or<code>null</code> if no explicit tag      *         is available.      */
DECL|method|getTag
specifier|public
name|String
name|getTag
parameter_list|()
block|{
return|return
name|this
operator|.
name|tag
return|;
block|}
comment|/**      * Style of the scalar.      *<dl>      *<dt>''</dt>      *<dd>Flow Style - Plain</dd>      *<dt>'\''</dt>      *<dd>Flow Style - Single-Quoted</dd>      *<dt>'"'</dt>      *<dd>Flow Style - Double-Quoted</dd>      *<dt>'|'</dt>      *<dd>Block Style - Literal</dd>      *<dt>'>'</dt>      *<dd>Block Style - Folded</dd>      *</dl>      *      * @return Style of the scalar.      * @see http://yaml.org/spec/1.1/#id864487      */
DECL|method|getStyle
specifier|public
name|Character
name|getStyle
parameter_list|()
block|{
return|return
name|this
operator|.
name|style
return|;
block|}
comment|/**      * String representation of the value.      *<p>      * Without quotes and escaping.      *</p>      *      * @return Value as Unicode string.      */
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
DECL|method|getImplicit
specifier|public
name|ImplicitTuple
name|getImplicit
parameter_list|()
block|{
return|return
name|this
operator|.
name|implicit
return|;
block|}
annotation|@
name|Override
DECL|method|getArguments
specifier|protected
name|String
name|getArguments
parameter_list|()
block|{
return|return
name|super
operator|.
name|getArguments
argument_list|()
operator|+
literal|", tag="
operator|+
name|tag
operator|+
literal|", "
operator|+
name|implicit
operator|+
literal|", value="
operator|+
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|is
specifier|public
name|boolean
name|is
parameter_list|(
name|ID
name|id
parameter_list|)
block|{
return|return
name|ID
operator|.
name|Scalar
operator|==
name|id
return|;
block|}
block|}
end_class

end_unit

