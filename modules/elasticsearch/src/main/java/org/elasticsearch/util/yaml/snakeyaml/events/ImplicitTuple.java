begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.events
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|events
package|;
end_package

begin_comment
comment|/**  * The implicit flag of a scalar event is a pair of boolean values that indicate  * if the tag may be omitted when the scalar is emitted in a plain and non-plain  * style correspondingly.  *  * @see http://pyyaml.org/wiki/PyYAMLDocumentation#Events  * @see<a href="http://pyyaml.org/wiki/PyYAML">PyYAML</a> for more information  */
end_comment

begin_class
DECL|class|ImplicitTuple
specifier|public
class|class
name|ImplicitTuple
block|{
DECL|field|plain
specifier|private
specifier|final
name|boolean
name|plain
decl_stmt|;
DECL|field|nonPlain
specifier|private
specifier|final
name|boolean
name|nonPlain
decl_stmt|;
DECL|method|ImplicitTuple
specifier|public
name|ImplicitTuple
parameter_list|(
name|boolean
name|plain
parameter_list|,
name|boolean
name|nonplain
parameter_list|)
block|{
name|this
operator|.
name|plain
operator|=
name|plain
expr_stmt|;
name|this
operator|.
name|nonPlain
operator|=
name|nonplain
expr_stmt|;
block|}
comment|/**      * @return true when tag may be omitted when the scalar is emitted in a      *         plain style.      */
DECL|method|isFirst
specifier|public
name|boolean
name|isFirst
parameter_list|()
block|{
return|return
name|plain
return|;
block|}
comment|/**      * @return true when tag may be omitted when the scalar is emitted in a      *         non-plain style.      */
DECL|method|isSecond
specifier|public
name|boolean
name|isSecond
parameter_list|()
block|{
return|return
name|nonPlain
return|;
block|}
DECL|method|bothFalse
specifier|public
name|boolean
name|bothFalse
parameter_list|()
block|{
return|return
operator|!
name|plain
operator|&&
operator|!
name|nonPlain
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"implicit=["
operator|+
name|plain
operator|+
literal|", "
operator|+
name|nonPlain
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

