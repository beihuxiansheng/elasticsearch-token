begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.client.providers
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|FutureImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|url
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * A {@link Future} that can be used to track when an asynchronous HTTP request has been fully processed.  *  * @param<V>  */
end_comment

begin_class
DECL|class|NettyResponseFuture
specifier|public
specifier|final
class|class
name|NettyResponseFuture
parameter_list|<
name|V
parameter_list|>
implements|implements
name|FutureImpl
argument_list|<
name|V
argument_list|>
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|isDone
specifier|private
specifier|final
name|AtomicBoolean
name|isDone
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|isCancelled
specifier|private
specifier|final
name|AtomicBoolean
name|isCancelled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|asyncHandler
specifier|private
specifier|final
name|AsyncHandler
argument_list|<
name|V
argument_list|>
name|asyncHandler
decl_stmt|;
DECL|field|responseTimeoutInMs
specifier|private
specifier|final
name|int
name|responseTimeoutInMs
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|Request
name|request
decl_stmt|;
DECL|field|nettyRequest
specifier|private
specifier|final
name|HttpRequest
name|nettyRequest
decl_stmt|;
DECL|field|content
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|V
argument_list|>
name|content
init|=
operator|new
name|AtomicReference
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|url
specifier|private
name|Url
name|url
decl_stmt|;
DECL|field|keepAlive
specifier|private
name|boolean
name|keepAlive
init|=
literal|true
decl_stmt|;
DECL|field|httpResponse
specifier|private
name|HttpResponse
name|httpResponse
decl_stmt|;
DECL|field|exEx
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|ExecutionException
argument_list|>
name|exEx
init|=
operator|new
name|AtomicReference
argument_list|<
name|ExecutionException
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|redirectCount
specifier|private
specifier|final
name|AtomicInteger
name|redirectCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|reaperFuture
specifier|private
name|Future
argument_list|<
name|Object
argument_list|>
name|reaperFuture
decl_stmt|;
DECL|method|NettyResponseFuture
specifier|public
name|NettyResponseFuture
parameter_list|(
name|Url
name|url
parameter_list|,
name|Request
name|request
parameter_list|,
name|AsyncHandler
argument_list|<
name|V
argument_list|>
name|asyncHandler
parameter_list|,
name|HttpRequest
name|nettyRequest
parameter_list|,
name|int
name|responseTimeoutInMs
parameter_list|)
block|{
name|this
operator|.
name|asyncHandler
operator|=
name|asyncHandler
expr_stmt|;
name|this
operator|.
name|responseTimeoutInMs
operator|=
name|responseTimeoutInMs
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|nettyRequest
operator|=
name|nettyRequest
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
DECL|method|getUrl
specifier|public
name|Url
name|getUrl
parameter_list|()
throws|throws
name|MalformedURLException
block|{
return|return
name|url
return|;
block|}
DECL|method|setUrl
specifier|public
name|void
name|setUrl
parameter_list|(
name|Url
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
comment|/* @Override */
DECL|method|isDone
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|isDone
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
comment|/* @Override */
DECL|method|isCancelled
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|isCancelled
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
comment|/* @Override */
DECL|method|cancel
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|isCancelled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * {@inheritDoc}      */
comment|/* @Override */
DECL|method|get
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
try|try
block|{
return|return
name|get
argument_list|(
name|responseTimeoutInMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
comment|/* @Override */
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|long
name|l
parameter_list|,
name|TimeUnit
name|tu
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|ExecutionException
block|{
if|if
condition|(
operator|!
name|isDone
argument_list|()
operator|&&
operator|!
name|isCancelled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|latch
operator|.
name|await
argument_list|(
name|l
argument_list|,
name|tu
argument_list|)
condition|)
block|{
name|isCancelled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TimeoutException
name|te
init|=
operator|new
name|TimeoutException
argument_list|(
literal|"No response received"
argument_list|)
decl_stmt|;
name|onThrowable
argument_list|(
name|te
argument_list|)
expr_stmt|;
throw|throw
name|te
throw|;
block|}
name|isDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|exEx
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exEx
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|V
operator|)
name|getContent
argument_list|()
return|;
block|}
DECL|method|onThrowable
specifier|private
name|void
name|onThrowable
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|asyncHandler
operator|.
name|onThrowable
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|getContent
name|V
name|getContent
parameter_list|()
block|{
if|if
condition|(
name|content
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|content
operator|.
name|set
argument_list|(
name|asyncHandler
operator|.
name|onCompleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|onThrowable
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|content
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|done
specifier|public
specifier|final
name|void
name|done
parameter_list|()
block|{
if|if
condition|(
name|exEx
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|reaperFuture
operator|!=
literal|null
condition|)
name|reaperFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|isDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getContent
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|abort
specifier|public
specifier|final
name|void
name|abort
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|isDone
operator|.
name|get
argument_list|()
operator|||
name|isCancelled
operator|.
name|get
argument_list|()
condition|)
return|return;
if|if
condition|(
name|reaperFuture
operator|!=
literal|null
condition|)
name|reaperFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|exEx
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exEx
operator|.
name|set
argument_list|(
operator|new
name|ExecutionException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|asyncHandler
operator|.
name|onThrowable
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|isDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|getRequest
specifier|public
specifier|final
name|Request
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
DECL|method|getNettyRequest
specifier|public
specifier|final
name|HttpRequest
name|getNettyRequest
parameter_list|()
block|{
return|return
name|nettyRequest
return|;
block|}
DECL|method|getAsyncHandler
specifier|public
specifier|final
name|AsyncHandler
argument_list|<
name|V
argument_list|>
name|getAsyncHandler
parameter_list|()
block|{
return|return
name|asyncHandler
return|;
block|}
DECL|method|getKeepAlive
specifier|public
specifier|final
name|boolean
name|getKeepAlive
parameter_list|()
block|{
return|return
name|keepAlive
return|;
block|}
DECL|method|setKeepAlive
specifier|public
specifier|final
name|void
name|setKeepAlive
parameter_list|(
specifier|final
name|boolean
name|keepAlive
parameter_list|)
block|{
name|this
operator|.
name|keepAlive
operator|=
name|keepAlive
expr_stmt|;
block|}
DECL|method|getHttpResponse
specifier|public
specifier|final
name|HttpResponse
name|getHttpResponse
parameter_list|()
block|{
return|return
name|httpResponse
return|;
block|}
DECL|method|setHttpResponse
specifier|public
specifier|final
name|void
name|setHttpResponse
parameter_list|(
specifier|final
name|HttpResponse
name|httpResponse
parameter_list|)
block|{
name|this
operator|.
name|httpResponse
operator|=
name|httpResponse
expr_stmt|;
block|}
DECL|method|incrementAndGetCurrentRedirectCount
specifier|public
name|int
name|incrementAndGetCurrentRedirectCount
parameter_list|()
block|{
return|return
name|redirectCount
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|setReaperFuture
specifier|public
name|void
name|setReaperFuture
parameter_list|(
name|Future
argument_list|<
name|Object
argument_list|>
name|reaperFuture
parameter_list|)
block|{
name|this
operator|.
name|reaperFuture
operator|=
name|reaperFuture
expr_stmt|;
block|}
block|}
end_class

end_unit

