begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * An implementation of the<tt>Set</tt> interface that uses an  * open-addressed hash table to store its contents.  *<p/>  * Created: Sat Nov  3 10:38:17 2001  *  * @author Eric D. Friedman  * @version $Id: THashSet.java,v 1.21 2008/10/07 20:33:56 robeden Exp $  */
end_comment

begin_class
DECL|class|THashSet
specifier|public
class|class
name|THashSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|TObjectHash
argument_list|<
name|E
argument_list|>
implements|implements
name|Set
argument_list|<
name|E
argument_list|>
implements|,
name|Iterable
argument_list|<
name|E
argument_list|>
implements|,
name|Externalizable
block|{
DECL|field|serialVersionUID
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * Creates a new<code>THashSet</code> instance with the default      * capacity and load factor.      */
DECL|method|THashSet
specifier|public
name|THashSet
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashSet</code> instance with the default      * capacity and load factor.      *      * @param strategy used to compute hash codes and to compare objects.      */
DECL|method|THashSet
specifier|public
name|THashSet
parameter_list|(
name|TObjectHashingStrategy
argument_list|<
name|E
argument_list|>
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashSet</code> instance with a prime      * capacity equal to or greater than<tt>initialCapacity</tt> and      * with the default load factor.      *      * @param initialCapacity an<code>int</code> value      */
DECL|method|THashSet
specifier|public
name|THashSet
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashSet</code> instance with a prime      * capacity equal to or greater than<tt>initialCapacity</tt> and      * with the default load factor.      *      * @param initialCapacity an<code>int</code> value      * @param strategy        used to compute hash codes and to compare objects.      */
DECL|method|THashSet
specifier|public
name|THashSet
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|TObjectHashingStrategy
argument_list|<
name|E
argument_list|>
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashSet</code> instance with a prime      * capacity equal to or greater than<tt>initialCapacity</tt> and      * with the specified load factor.      *      * @param initialCapacity an<code>int</code> value      * @param loadFactor      a<code>float</code> value      */
DECL|method|THashSet
specifier|public
name|THashSet
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashSet</code> instance with a prime      * capacity equal to or greater than<tt>initialCapacity</tt> and      * with the specified load factor.      *      * @param initialCapacity an<code>int</code> value      * @param loadFactor      a<code>float</code> value      * @param strategy        used to compute hash codes and to compare objects.      */
DECL|method|THashSet
specifier|public
name|THashSet
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|,
name|TObjectHashingStrategy
argument_list|<
name|E
argument_list|>
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashSet</code> instance containing the      * elements of<tt>collection</tt>.      *      * @param collection a<code>Collection</code> value      */
DECL|method|THashSet
specifier|public
name|THashSet
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
parameter_list|)
block|{
name|this
argument_list|(
name|collection
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashSet</code> instance containing the      * elements of<tt>collection</tt>.      *      * @param collection a<code>Collection</code> value      * @param strategy   used to compute hash codes and to compare objects.      */
DECL|method|THashSet
specifier|public
name|THashSet
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
parameter_list|,
name|TObjectHashingStrategy
argument_list|<
name|E
argument_list|>
name|strategy
parameter_list|)
block|{
name|this
argument_list|(
name|collection
operator|.
name|size
argument_list|()
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
comment|/**      * Inserts a value into the set.      *      * @param obj an<code>Object</code> value      * @return true if the set was modified by the add operation      */
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|obj
parameter_list|)
block|{
name|int
name|index
init|=
name|insertionIndex
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
comment|// already present in set, nothing to add
block|}
name|Object
name|old
init|=
name|_set
index|[
name|index
index|]
decl_stmt|;
name|_set
index|[
name|index
index|]
operator|=
name|obj
expr_stmt|;
name|postInsertHook
argument_list|(
name|old
operator|==
name|FREE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// yes, we added something
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|Set
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
name|that
init|=
operator|(
name|Set
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|that
operator|.
name|size
argument_list|()
operator|!=
name|this
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|containsAll
argument_list|(
name|that
argument_list|)
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashProcedure
name|p
init|=
operator|new
name|HashProcedure
argument_list|()
decl_stmt|;
name|forEach
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|p
operator|.
name|getHashCode
argument_list|()
return|;
block|}
DECL|class|HashProcedure
specifier|private
specifier|final
class|class
name|HashProcedure
implements|implements
name|TObjectProcedure
argument_list|<
name|E
argument_list|>
block|{
DECL|field|h
specifier|private
name|int
name|h
init|=
literal|0
decl_stmt|;
DECL|method|getHashCode
specifier|public
name|int
name|getHashCode
parameter_list|()
block|{
return|return
name|h
return|;
block|}
DECL|method|execute
specifier|public
specifier|final
name|boolean
name|execute
parameter_list|(
name|E
name|key
parameter_list|)
block|{
name|h
operator|+=
name|_hashingStrategy
operator|.
name|computeHashCode
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Expands the set to accommodate new values.      *      * @param newCapacity an<code>int</code> value      */
DECL|method|rehash
specifier|protected
name|void
name|rehash
parameter_list|(
name|int
name|newCapacity
parameter_list|)
block|{
name|int
name|oldCapacity
init|=
name|_set
operator|.
name|length
decl_stmt|;
name|Object
name|oldSet
index|[]
init|=
name|_set
decl_stmt|;
name|_set
operator|=
operator|new
name|Object
index|[
name|newCapacity
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|_set
argument_list|,
name|FREE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|oldCapacity
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|oldSet
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|oldSet
index|[
name|i
index|]
operator|!=
name|REMOVED
condition|)
block|{
name|E
name|o
init|=
operator|(
name|E
operator|)
name|oldSet
index|[
name|i
index|]
decl_stmt|;
name|int
name|index
init|=
name|insertionIndex
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
comment|// everyone pays for this because some people can't RTFM
name|throwObjectContractViolation
argument_list|(
name|_set
index|[
operator|(
operator|-
name|index
operator|-
literal|1
operator|)
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|_set
index|[
name|index
index|]
operator|=
name|o
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns a new array containing the objects in the set.      *      * @return an<code>Object[]</code> value      */
DECL|method|toArray
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
name|Object
index|[]
name|result
init|=
operator|new
name|Object
index|[
name|size
argument_list|()
index|]
decl_stmt|;
name|forEach
argument_list|(
operator|new
name|ToObjectArrayProcedure
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Returns a typed array of the objects in the set.      *      * @param a an<code>Object[]</code> value      * @return an<code>Object[]</code> value      */
DECL|method|toArray
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|length
operator|<
name|size
condition|)
name|a
operator|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|forEach
argument_list|(
operator|new
name|ToObjectArrayProcedure
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// If this collection fits in the specified array with room to
comment|// spare (i.e., the array has more elements than this
comment|// collection), the element in the array immediately following
comment|// the end of the collection is set to null. This is useful in
comment|// determining the length of this collection only if the
comment|// caller knows that this collection does not contain any null
comment|// elements.)
if|if
condition|(
name|a
operator|.
name|length
operator|>
name|size
condition|)
block|{
name|a
index|[
name|size
index|]
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
comment|/**      * Empties the set.      */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|_set
argument_list|,
literal|0
argument_list|,
name|_set
operator|.
name|length
argument_list|,
name|FREE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes<tt>obj</tt> from the set.      *      * @param obj an<code>Object</code> value      * @return true if the set was modified by the remove operation.      */
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|int
name|index
init|=
name|index
argument_list|(
operator|(
name|E
operator|)
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Creates an iterator over the values of the set.  The iterator      * supports element deletion.      *      * @return an<code>Iterator</code> value      */
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|TObjectHashIterator
argument_list|<
name|E
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Tests the set to determine if all of the elements in      *<tt>collection</tt> are present.      *      * @param collection a<code>Collection</code> value      * @return true if all elements were present in the set.      */
DECL|method|containsAll
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Adds all of the elements in<tt>collection</tt> to the set.      *      * @param collection a<code>Collection</code> value      * @return true if the set was modified by the add all operation.      */
DECL|method|addAll
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|int
name|size
init|=
name|collection
operator|.
name|size
argument_list|()
decl_stmt|;
name|ensureCapacity
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|it
init|=
name|collection
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|size
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
comment|/**      * Removes all of the elements in<tt>collection</tt> from the set.      *      * @param collection a<code>Collection</code> value      * @return true if the set was modified by the remove all operation.      */
DECL|method|removeAll
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|int
name|size
init|=
name|collection
operator|.
name|size
argument_list|()
decl_stmt|;
name|Iterator
name|it
decl_stmt|;
name|it
operator|=
name|collection
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|size
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|remove
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
comment|/**      * Removes any values in the set which are not contained in      *<tt>collection</tt>.      *      * @param collection a<code>Collection</code> value      * @return true if the set was modified by the retain all operation      */
DECL|method|retainAll
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
name|Iterator
name|it
decl_stmt|;
name|it
operator|=
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|size
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|contains
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|forEach
argument_list|(
operator|new
name|TObjectProcedure
argument_list|()
block|{
specifier|private
name|boolean
name|first
init|=
literal|true
decl_stmt|;
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|first
condition|)
name|first
operator|=
literal|false
expr_stmt|;
else|else
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|writeExternal
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// VERSION
name|out
operator|.
name|writeByte
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// NOTE: Super was not written in version 0
name|super
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// NUMBER OF ENTRIES
name|out
operator|.
name|writeInt
argument_list|(
name|_size
argument_list|)
expr_stmt|;
comment|// ENTRIES
name|SerializationProcedure
name|writeProcedure
init|=
operator|new
name|SerializationProcedure
argument_list|(
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|forEach
argument_list|(
name|writeProcedure
argument_list|)
condition|)
block|{
throw|throw
name|writeProcedure
operator|.
name|exception
throw|;
block|}
block|}
DECL|method|readExternal
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// VERSION
name|byte
name|version
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// NOTE: super was not written in version 0
if|if
condition|(
name|version
operator|!=
literal|0
condition|)
name|super
operator|.
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// NUMBER OF ENTRIES
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|setUp
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// ENTRIES
while|while
condition|(
name|size
operator|--
operator|>
literal|0
condition|)
block|{
name|E
name|val
init|=
operator|(
name|E
operator|)
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// THashSet
end_comment

end_unit

