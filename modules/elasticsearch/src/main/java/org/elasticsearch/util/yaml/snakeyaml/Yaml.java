begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
operator|.
name|YamlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|reader
operator|.
name|UnicodeReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_comment
comment|/**  * Public YAML interface. Each Thread must have its own instance.  */
end_comment

begin_class
DECL|class|Yaml
specifier|public
class|class
name|Yaml
block|{
DECL|field|loader
specifier|private
specifier|final
name|Loader
name|loader
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|final
name|Resolver
name|resolver
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**      * Create Yaml instance. It is safe to create a few instances and use them      * in different Threads.      *      * @param loader   Loader to parse incoming documents      * @param resolver Resolver to detect implicit type      */
DECL|method|Yaml
specifier|public
name|Yaml
parameter_list|(
name|Loader
name|loader
parameter_list|,
name|Resolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
name|loader
operator|.
name|setAttached
argument_list|()
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|loader
operator|.
name|setResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|"Yaml:"
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|Yaml
specifier|public
name|Yaml
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Loader
argument_list|()
argument_list|,
operator|new
name|Resolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parse the first YAML document in a String and produce the corresponding      * Java object. (Because the encoding in known BOM is not respected.)      *      * @param yaml YAML data to load from (BOM must not be present)      * @return parsed object      */
DECL|method|load
specifier|public
name|Object
name|load
parameter_list|(
name|String
name|yaml
parameter_list|)
block|{
return|return
name|loader
operator|.
name|load
argument_list|(
operator|new
name|StringReader
argument_list|(
name|yaml
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Parse the first YAML document in a stream and produce the corresponding      * Java object.      *      * @param io data to load from (BOM is respected and removed)      * @return parsed object      */
DECL|method|load
specifier|public
name|Object
name|load
parameter_list|(
name|InputStream
name|io
parameter_list|)
block|{
return|return
name|loader
operator|.
name|load
argument_list|(
operator|new
name|UnicodeReader
argument_list|(
name|io
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Parse the first YAML document in a stream and produce the corresponding      * Java object.      *      * @param io data to load from (BOM must not be present)      * @return parsed object      */
DECL|method|load
specifier|public
name|Object
name|load
parameter_list|(
name|Reader
name|io
parameter_list|)
block|{
return|return
name|loader
operator|.
name|load
argument_list|(
name|io
argument_list|)
return|;
block|}
comment|/**      * Parse all YAML documents in a String and produce corresponding Java      * objects.      *      * @param yaml YAML data to load from (BOM must not be present)      * @return an iterator over the parsed Java objects in this String in proper      *         sequence      */
DECL|method|loadAll
specifier|public
name|Iterable
argument_list|<
name|Object
argument_list|>
name|loadAll
parameter_list|(
name|Reader
name|yaml
parameter_list|)
block|{
return|return
name|loader
operator|.
name|loadAll
argument_list|(
name|yaml
argument_list|)
return|;
block|}
comment|/**      * Parse all YAML documents in a String and produce corresponding Java      * objects. (Because the encoding in known BOM is not respected.)      *      * @param yaml YAML data to load from (BOM must not be present)      * @return an iterator over the parsed Java objects in this String in proper      *         sequence      */
DECL|method|loadAll
specifier|public
name|Iterable
argument_list|<
name|Object
argument_list|>
name|loadAll
parameter_list|(
name|String
name|yaml
parameter_list|)
block|{
return|return
name|loadAll
argument_list|(
operator|new
name|StringReader
argument_list|(
name|yaml
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Parse all YAML documents in a stream and produce corresponding Java      * objects.      *      * @param yaml YAML data to load from (BOM is respected and ignored)      * @return an iterator over the parsed Java objects in this stream in proper      *         sequence      */
DECL|method|loadAll
specifier|public
name|Iterable
argument_list|<
name|Object
argument_list|>
name|loadAll
parameter_list|(
name|InputStream
name|yaml
parameter_list|)
block|{
return|return
name|loadAll
argument_list|(
operator|new
name|UnicodeReader
argument_list|(
name|yaml
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Parse the first YAML document in a stream and produce the corresponding      * representation tree.      *      * @param io stream of a YAML document      * @return parsed root Node for the specified YAML document      */
DECL|method|compose
specifier|public
name|YamlNode
name|compose
parameter_list|(
name|Reader
name|io
parameter_list|)
block|{
return|return
name|loader
operator|.
name|compose
argument_list|(
name|io
argument_list|)
return|;
block|}
comment|/**      * Parse all YAML documents in a stream and produce corresponding      * representation trees.      *      * @param io stream of YAML documents      * @return parsed root Nodes for all the specified YAML documents      */
DECL|method|composeAll
specifier|public
name|Iterable
argument_list|<
name|YamlNode
argument_list|>
name|composeAll
parameter_list|(
name|Reader
name|io
parameter_list|)
block|{
return|return
name|loader
operator|.
name|composeAll
argument_list|(
name|io
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Get a meaningful name. It simplifies debugging in a multi-threaded      * environment. If nothing is set explicitly the address of the instance is      * returned.      *      * @return human readable name      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Set a meaningful name to be shown in toString()      *      * @param name human readable name      */
DECL|method|setName
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Parse a YAML stream and produce parsing events.      *      * @param yaml YAML document(s)      * @return parsed events      */
DECL|method|parse
specifier|public
name|Iterable
argument_list|<
name|Event
argument_list|>
name|parse
parameter_list|(
name|Reader
name|yaml
parameter_list|)
block|{
return|return
name|loader
operator|.
name|parse
argument_list|(
name|yaml
argument_list|)
return|;
block|}
block|}
end_class

end_unit

