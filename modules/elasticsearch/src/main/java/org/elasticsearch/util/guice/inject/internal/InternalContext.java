begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2006 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.guice.inject.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|guice
operator|.
name|inject
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|guice
operator|.
name|inject
operator|.
name|spi
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Internal context. Used to coordinate injections and support circular  * dependencies.  *  * @author crazybob@google.com (Bob Lee)  */
end_comment

begin_class
DECL|class|InternalContext
specifier|public
specifier|final
class|class
name|InternalContext
block|{
DECL|field|constructionContexts
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|ConstructionContext
argument_list|<
name|?
argument_list|>
argument_list|>
name|constructionContexts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|dependency
specifier|private
name|Dependency
name|dependency
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getConstructionContext
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ConstructionContext
argument_list|<
name|T
argument_list|>
name|getConstructionContext
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|ConstructionContext
argument_list|<
name|T
argument_list|>
name|constructionContext
init|=
operator|(
name|ConstructionContext
argument_list|<
name|T
argument_list|>
operator|)
name|constructionContexts
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructionContext
operator|==
literal|null
condition|)
block|{
name|constructionContext
operator|=
operator|new
name|ConstructionContext
argument_list|<
name|T
argument_list|>
argument_list|()
expr_stmt|;
name|constructionContexts
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|constructionContext
argument_list|)
expr_stmt|;
block|}
return|return
name|constructionContext
return|;
block|}
DECL|method|getDependency
specifier|public
name|Dependency
name|getDependency
parameter_list|()
block|{
return|return
name|dependency
return|;
block|}
DECL|method|setDependency
specifier|public
name|void
name|setDependency
parameter_list|(
name|Dependency
name|dependency
parameter_list|)
block|{
name|this
operator|.
name|dependency
operator|=
name|dependency
expr_stmt|;
block|}
block|}
end_class

end_unit

