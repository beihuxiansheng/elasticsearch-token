begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.logging
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|helpers
operator|.
name|FormattingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|helpers
operator|.
name|PatternConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|helpers
operator|.
name|PatternParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|jline
operator|.
name|ANSI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import static
name|jline
operator|.
name|ANSIBuffer
operator|.
name|ANSICodes
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|jline
operator|.
name|ANSI
operator|.
name|Code
operator|.
name|FG_BLUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|jline
operator|.
name|ANSI
operator|.
name|Code
operator|.
name|FG_CYAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|jline
operator|.
name|ANSI
operator|.
name|Code
operator|.
name|FG_GREEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|jline
operator|.
name|ANSI
operator|.
name|Code
operator|.
name|FG_RED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|jline
operator|.
name|ANSI
operator|.
name|Code
operator|.
name|FG_YELLOW
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|jline
operator|.
name|ANSI
operator|.
name|Code
operator|.
name|OFF
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|JLinePatternLayout
specifier|public
class|class
name|JLinePatternLayout
extends|extends
name|PatternLayout
block|{
DECL|method|createPatternParser
annotation|@
name|Override
specifier|protected
name|PatternParser
name|createPatternParser
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|JLinePatternParser
argument_list|(
name|pattern
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|super
operator|.
name|createPatternParser
argument_list|(
name|pattern
argument_list|)
return|;
block|}
block|}
DECL|class|JLinePatternParser
specifier|private
specifier|final
specifier|static
class|class
name|JLinePatternParser
extends|extends
name|PatternParser
block|{
DECL|method|JLinePatternParser
specifier|private
name|JLinePatternParser
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|super
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
DECL|method|addConverter
annotation|@
name|Override
specifier|protected
name|void
name|addConverter
parameter_list|(
name|PatternConverter
name|pc
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|ANSI
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|pc
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"BasicPatternConverter"
argument_list|)
condition|)
block|{
name|Field
name|typeField
init|=
name|pc
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|typeField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Integer
name|type
init|=
operator|(
name|Integer
operator|)
name|typeField
operator|.
name|get
argument_list|(
name|pc
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|2002
condition|)
block|{
name|pc
operator|=
operator|new
name|ColoredLevelPatternConverter
argument_list|(
name|formattingInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
name|super
operator|.
name|addConverter
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
DECL|class|ColoredLevelPatternConverter
specifier|private
specifier|static
class|class
name|ColoredLevelPatternConverter
extends|extends
name|PatternConverter
block|{
DECL|method|ColoredLevelPatternConverter
name|ColoredLevelPatternConverter
parameter_list|(
name|FormattingInfo
name|formattingInfo
parameter_list|)
block|{
name|super
argument_list|(
name|formattingInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|convert
specifier|public
name|String
name|convert
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ANSI
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
return|return
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|FATAL
condition|)
block|{
return|return
name|attrib
argument_list|(
name|FG_RED
argument_list|)
operator|+
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|attrib
argument_list|(
name|OFF
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|ERROR
condition|)
block|{
return|return
name|attrib
argument_list|(
name|FG_RED
argument_list|)
operator|+
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|attrib
argument_list|(
name|OFF
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|WARN
condition|)
block|{
return|return
name|attrib
argument_list|(
name|FG_YELLOW
argument_list|)
operator|+
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|' '
operator|+
name|attrib
argument_list|(
name|OFF
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|INFO
condition|)
block|{
return|return
name|attrib
argument_list|(
name|FG_GREEN
argument_list|)
operator|+
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|' '
operator|+
name|attrib
argument_list|(
name|OFF
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|DEBUG
condition|)
block|{
return|return
name|attrib
argument_list|(
name|FG_CYAN
argument_list|)
operator|+
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|attrib
argument_list|(
name|OFF
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|TRACE
condition|)
block|{
return|return
name|attrib
argument_list|(
name|FG_BLUE
argument_list|)
operator|+
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|attrib
argument_list|(
name|OFF
argument_list|)
return|;
block|}
return|return
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

