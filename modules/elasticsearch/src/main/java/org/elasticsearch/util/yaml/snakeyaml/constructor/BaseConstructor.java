begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.constructor
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|constructor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|composer
operator|.
name|Composer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|composer
operator|.
name|ComposerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|YAMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @see<a href="http://pyyaml.org/wiki/PyYAML">PyYAML</a> for more information  */
end_comment

begin_class
DECL|class|BaseConstructor
specifier|public
specifier|abstract
class|class
name|BaseConstructor
block|{
comment|/**      * It maps the node kind to the the Construct implementation. When the      * runtime class is known then the implicit tag is ignored.      */
DECL|field|yamlClassConstructors
specifier|protected
specifier|final
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Construct
argument_list|>
name|yamlClassConstructors
init|=
operator|new
name|EnumMap
argument_list|<
name|NodeId
argument_list|,
name|Construct
argument_list|>
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * It maps the (explicit or implicit) tag to the Construct implementation.      * It is used:<br/>      * 1) explicit tag - if present.<br/>      * 2) implicit tag - when the runtime class of the instance is unknown (the      * node has the Object.class)      */
DECL|field|yamlConstructors
specifier|protected
specifier|final
name|Map
argument_list|<
name|Tag
argument_list|,
name|Construct
argument_list|>
name|yamlConstructors
init|=
operator|new
name|HashMap
argument_list|<
name|Tag
argument_list|,
name|Construct
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * It maps the (explicit or implicit) tag to the Construct implementation.      * It is used when no exact match found.      */
DECL|field|yamlMultiConstructors
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Construct
argument_list|>
name|yamlMultiConstructors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Construct
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|composer
specifier|private
name|Composer
name|composer
decl_stmt|;
DECL|field|constructedObjects
specifier|private
specifier|final
name|Map
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|constructedObjects
decl_stmt|;
DECL|field|recursiveObjects
specifier|private
specifier|final
name|Set
argument_list|<
name|Node
argument_list|>
name|recursiveObjects
decl_stmt|;
DECL|field|maps2fill
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|RecursiveTuple
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|,
name|RecursiveTuple
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|maps2fill
decl_stmt|;
DECL|field|sets2fill
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|RecursiveTuple
argument_list|<
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sets2fill
decl_stmt|;
DECL|field|rootTag
specifier|protected
name|Tag
name|rootTag
decl_stmt|;
DECL|method|BaseConstructor
specifier|public
name|BaseConstructor
parameter_list|()
block|{
name|constructedObjects
operator|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|recursiveObjects
operator|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
name|maps2fill
operator|=
operator|new
name|ArrayList
argument_list|<
name|RecursiveTuple
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|,
name|RecursiveTuple
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|sets2fill
operator|=
operator|new
name|ArrayList
argument_list|<
name|RecursiveTuple
argument_list|<
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|rootTag
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|setComposer
specifier|public
name|void
name|setComposer
parameter_list|(
name|Composer
name|composer
parameter_list|)
block|{
name|this
operator|.
name|composer
operator|=
name|composer
expr_stmt|;
block|}
comment|/**      * Check if more documents available      *      * @return true when there are more YAML documents in the stream      */
DECL|method|checkData
specifier|public
name|boolean
name|checkData
parameter_list|()
block|{
comment|// If there are more documents available?
return|return
name|composer
operator|.
name|checkNode
argument_list|()
return|;
block|}
comment|/**      * Construct and return the next document      *      * @return constructed instance      */
DECL|method|getData
specifier|public
name|Object
name|getData
parameter_list|()
block|{
comment|// Construct and return the next document.
name|composer
operator|.
name|checkNode
argument_list|()
expr_stmt|;
name|Node
name|node
init|=
name|composer
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootTag
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setTag
argument_list|(
name|rootTag
argument_list|)
expr_stmt|;
block|}
return|return
name|constructDocument
argument_list|(
name|node
argument_list|)
return|;
block|}
comment|/**      * Ensure that the stream contains a single document and construct it      *      * @return constructed instance      * @throws ComposerException in case there are more documents in the stream      */
DECL|method|getSingleData
specifier|public
name|Object
name|getSingleData
parameter_list|()
block|{
comment|// Ensure that the stream contains a single document and construct it
name|Node
name|node
init|=
name|composer
operator|.
name|getSingleNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rootTag
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setTag
argument_list|(
name|rootTag
argument_list|)
expr_stmt|;
block|}
return|return
name|constructDocument
argument_list|(
name|node
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Construct complete YAML document. Call the second step in case of      * recursive structures. At the end cleans all the state.      *      * @param node root Node      * @return Java instance      */
DECL|method|constructDocument
specifier|private
name|Object
name|constructDocument
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|Object
name|data
init|=
name|constructObject
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|fillRecursive
argument_list|()
expr_stmt|;
name|constructedObjects
operator|.
name|clear
argument_list|()
expr_stmt|;
name|recursiveObjects
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|fillRecursive
specifier|private
name|void
name|fillRecursive
parameter_list|()
block|{
if|if
condition|(
operator|!
name|maps2fill
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RecursiveTuple
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|,
name|RecursiveTuple
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|maps2fill
control|)
block|{
name|RecursiveTuple
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|key_value
init|=
name|entry
operator|.
name|_2
argument_list|()
decl_stmt|;
name|entry
operator|.
name|_1
argument_list|()
operator|.
name|put
argument_list|(
name|key_value
operator|.
name|_1
argument_list|()
argument_list|,
name|key_value
operator|.
name|_2
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|maps2fill
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sets2fill
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RecursiveTuple
argument_list|<
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|value
range|:
name|sets2fill
control|)
block|{
name|value
operator|.
name|_1
argument_list|()
operator|.
name|add
argument_list|(
name|value
operator|.
name|_2
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sets2fill
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Construct object from the specified Node. Return existing instance if the      * node is already constructed.      *      * @param node Node to be constructed      * @return Java instance      */
DECL|method|constructObject
specifier|protected
name|Object
name|constructObject
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|constructedObjects
operator|.
name|containsKey
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
name|constructedObjects
operator|.
name|get
argument_list|(
name|node
argument_list|)
return|;
block|}
if|if
condition|(
name|recursiveObjects
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"found unconstructable recursive node"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
name|recursiveObjects
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|Construct
name|constructor
init|=
name|getConstructor
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|Object
name|data
init|=
name|constructor
operator|.
name|construct
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|constructedObjects
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|recursiveObjects
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|isTwoStepsConstruction
argument_list|()
condition|)
block|{
name|constructor
operator|.
name|construct2ndStep
argument_list|(
name|node
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
comment|/**      * Get the constructor to construct the Node. For implicit tags if the      * runtime class is known a dedicated Construct implementation is used.      * Otherwise the constructor is chosen by the tag.      *      * @param node Node to be constructed      * @return Construct implementation for the specified node      */
DECL|method|getConstructor
specifier|protected
name|Construct
name|getConstructor
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|useClassConstructor
argument_list|()
condition|)
block|{
return|return
name|yamlClassConstructors
operator|.
name|get
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|Construct
name|constructor
init|=
name|yamlConstructors
operator|.
name|get
argument_list|(
name|node
operator|.
name|getTag
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructor
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|String
name|prefix
range|:
name|yamlMultiConstructors
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getTag
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|yamlMultiConstructors
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
return|return
name|yamlConstructors
operator|.
name|get
argument_list|(
literal|null
argument_list|)
return|;
block|}
return|return
name|constructor
return|;
block|}
block|}
DECL|method|constructScalar
specifier|protected
name|Object
name|constructScalar
parameter_list|(
name|ScalarNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|createDefaultList
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|createDefaultList
parameter_list|(
name|int
name|initSize
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|initSize
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|constructSequence
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|constructSequence
parameter_list|(
name|SequenceNode
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|node
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
operator|!
name|node
operator|.
name|getType
argument_list|()
operator|.
name|isInterface
argument_list|()
condition|)
block|{
comment|// the root class may be defined (Vector for instance)
try|try
block|{
name|result
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|node
operator|.
name|getType
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YAMLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|createDefaultList
argument_list|(
name|node
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|constructSequenceStep2
argument_list|(
name|node
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|constructSequenceStep2
specifier|protected
name|void
name|constructSequenceStep2
parameter_list|(
name|SequenceNode
name|node
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|)
block|{
for|for
control|(
name|Node
name|child
range|:
name|node
operator|.
name|getValue
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|constructObject
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDefaultMap
specifier|protected
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|createDefaultMap
parameter_list|()
block|{
comment|// respect order from YAML document
return|return
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
return|;
block|}
DECL|method|createDefaultSet
specifier|protected
name|Set
argument_list|<
name|Object
argument_list|>
name|createDefaultSet
parameter_list|()
block|{
comment|// respect order from YAML document
return|return
operator|new
name|LinkedHashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
return|;
block|}
DECL|method|constructSet
specifier|protected
name|Set
argument_list|<
name|Object
argument_list|>
name|constructSet
parameter_list|(
name|MappingNode
name|node
parameter_list|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|set
init|=
name|createDefaultSet
argument_list|()
decl_stmt|;
name|constructSet2ndStep
argument_list|(
name|node
argument_list|,
name|set
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
DECL|method|constructMapping
specifier|protected
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|constructMapping
parameter_list|(
name|MappingNode
name|node
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|createDefaultMap
argument_list|()
decl_stmt|;
name|constructMapping2ndStep
argument_list|(
name|node
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
return|return
name|mapping
return|;
block|}
DECL|method|constructMapping2ndStep
specifier|protected
name|void
name|constructMapping2ndStep
parameter_list|(
name|MappingNode
name|node
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mapping
parameter_list|)
block|{
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|nodeValue
init|=
operator|(
name|List
argument_list|<
name|NodeTuple
argument_list|>
operator|)
name|node
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeTuple
name|tuple
range|:
name|nodeValue
control|)
block|{
name|Node
name|keyNode
init|=
name|tuple
operator|.
name|getKeyNode
argument_list|()
decl_stmt|;
name|Node
name|valueNode
init|=
name|tuple
operator|.
name|getValueNode
argument_list|()
decl_stmt|;
name|Object
name|key
init|=
name|constructObject
argument_list|(
name|keyNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|key
operator|.
name|hashCode
argument_list|()
expr_stmt|;
comment|// check circular dependencies
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructing a mapping"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"found unacceptable key "
operator|+
name|key
argument_list|,
name|tuple
operator|.
name|getKeyNode
argument_list|()
operator|.
name|getStartMark
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|Object
name|value
init|=
name|constructObject
argument_list|(
name|valueNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyNode
operator|.
name|isTwoStepsConstruction
argument_list|()
condition|)
block|{
comment|/*                  * if keyObject is created it 2 steps we should postpone putting                  * it in map because it may have different hash after                  * initialization compared to clean just created one. And map of                  * course does not observe key hashCode changes.                  */
name|maps2fill
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|RecursiveTuple
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|,
name|RecursiveTuple
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|mapping
argument_list|,
operator|new
name|RecursiveTuple
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapping
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|constructSet2ndStep
specifier|protected
name|void
name|constructSet2ndStep
parameter_list|(
name|MappingNode
name|node
parameter_list|,
name|Set
argument_list|<
name|Object
argument_list|>
name|set
parameter_list|)
block|{
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|nodeValue
init|=
operator|(
name|List
argument_list|<
name|NodeTuple
argument_list|>
operator|)
name|node
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeTuple
name|tuple
range|:
name|nodeValue
control|)
block|{
name|Node
name|keyNode
init|=
name|tuple
operator|.
name|getKeyNode
argument_list|()
decl_stmt|;
name|Object
name|key
init|=
name|constructObject
argument_list|(
name|keyNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|key
operator|.
name|hashCode
argument_list|()
expr_stmt|;
comment|// check circular dependencies
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructing a Set"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"found unacceptable key "
operator|+
name|key
argument_list|,
name|tuple
operator|.
name|getKeyNode
argument_list|()
operator|.
name|getStartMark
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|keyNode
operator|.
name|isTwoStepsConstruction
argument_list|()
condition|)
block|{
comment|/*                  * if keyObject is created it 2 steps we should postpone putting                  * it into the set because it may have different hash after                  * initialization compared to clean just created one. And set of                  * course does not observe value hashCode changes.                  */
name|sets2fill
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|RecursiveTuple
argument_list|<
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|(
name|set
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// TODO protected List<Object[]> constructPairs(MappingNode node) {
comment|// List<Object[]> pairs = new LinkedList<Object[]>();
comment|// List<Node[]> nodeValue = (List<Node[]>) node.getValue();
comment|// for (Iterator<Node[]> iter = nodeValue.iterator(); iter.hasNext();) {
comment|// Node[] tuple = iter.next();
comment|// Object key = constructObject(Object.class, tuple[0]);
comment|// Object value = constructObject(Object.class, tuple[1]);
comment|// pairs.add(new Object[] { key, value });
comment|// }
comment|// return pairs;
comment|// }
DECL|class|RecursiveTuple
specifier|private
specifier|static
class|class
name|RecursiveTuple
parameter_list|<
name|T
parameter_list|,
name|K
parameter_list|>
block|{
DECL|field|_1
specifier|private
specifier|final
name|T
name|_1
decl_stmt|;
DECL|field|_2
specifier|private
specifier|final
name|K
name|_2
decl_stmt|;
DECL|method|RecursiveTuple
specifier|public
name|RecursiveTuple
parameter_list|(
name|T
name|_1
parameter_list|,
name|K
name|_2
parameter_list|)
block|{
name|this
operator|.
name|_1
operator|=
name|_1
expr_stmt|;
name|this
operator|.
name|_2
operator|=
name|_2
expr_stmt|;
block|}
DECL|method|_2
specifier|public
name|K
name|_2
parameter_list|()
block|{
return|return
name|_2
return|;
block|}
DECL|method|_1
specifier|public
name|T
name|_1
parameter_list|()
block|{
return|return
name|_1
return|;
block|}
block|}
block|}
end_class

end_unit

