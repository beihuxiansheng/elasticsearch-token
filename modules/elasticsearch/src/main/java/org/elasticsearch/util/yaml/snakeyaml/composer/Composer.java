begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.composer
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|composer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|events
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Creates a node graph from parser events.  *<p>  * Corresponds to the 'Compose' step as described in chapter 3.1 of the<a  * href="http://yaml.org/spec/1.1/">YAML Specification</a>.  *</p>  */
end_comment

begin_class
DECL|class|Composer
specifier|public
class|class
name|Composer
block|{
DECL|field|parser
specifier|private
specifier|final
name|Parser
name|parser
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|final
name|Resolver
name|resolver
decl_stmt|;
DECL|field|anchors
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|YamlNode
argument_list|>
name|anchors
decl_stmt|;
DECL|field|recursiveNodes
specifier|private
specifier|final
name|Set
argument_list|<
name|YamlNode
argument_list|>
name|recursiveNodes
decl_stmt|;
DECL|method|Composer
specifier|public
name|Composer
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|Resolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|anchors
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|YamlNode
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|recursiveNodes
operator|=
operator|new
name|HashSet
argument_list|<
name|YamlNode
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks if further documents are available.      *      * @return<code>true</code> if there is at least one more document.      */
DECL|method|checkNode
specifier|public
name|boolean
name|checkNode
parameter_list|()
block|{
comment|// Drop the STREAM-START event.
if|if
condition|(
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|StreamStart
argument_list|)
condition|)
block|{
name|parser
operator|.
name|getEvent
argument_list|()
expr_stmt|;
block|}
comment|// If there are more documents available?
return|return
operator|!
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|StreamEnd
argument_list|)
return|;
block|}
comment|/**      * Reads and composes the next document.      *      * @return The root node of the document or<code>null</code> if no more      *         documents are available.      */
DECL|method|getNode
specifier|public
name|YamlNode
name|getNode
parameter_list|()
block|{
comment|// Get the root node of the next document.
if|if
condition|(
operator|!
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|StreamEnd
argument_list|)
condition|)
block|{
return|return
name|composeDocument
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|YamlNode
operator|)
literal|null
return|;
block|}
block|}
comment|/**      * Reads a document from a source that contains only one document.      *<p>      * If the stream contains more than one document an exception is thrown.      *</p>      *      * @return The root node of the document or<code>null</code> if no document      *         is available.      */
DECL|method|getSingleNode
specifier|public
name|YamlNode
name|getSingleNode
parameter_list|()
block|{
comment|// Drop the STREAM-START event.
name|parser
operator|.
name|getEvent
argument_list|()
expr_stmt|;
comment|// Compose a document if the stream is not empty.
name|YamlNode
name|document
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|StreamEnd
argument_list|)
condition|)
block|{
name|document
operator|=
name|composeDocument
argument_list|()
expr_stmt|;
block|}
comment|// Ensure that the stream contains no more documents.
if|if
condition|(
operator|!
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|StreamEnd
argument_list|)
condition|)
block|{
name|Event
name|event
init|=
name|parser
operator|.
name|getEvent
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|ComposerException
argument_list|(
literal|"expected a single document in the stream"
argument_list|,
name|document
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"but found another document"
argument_list|,
name|event
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
comment|// Drop the STREAM-END event.
name|parser
operator|.
name|getEvent
argument_list|()
expr_stmt|;
return|return
name|document
return|;
block|}
DECL|method|composeDocument
specifier|private
name|YamlNode
name|composeDocument
parameter_list|()
block|{
comment|// Drop the DOCUMENT-START event.
name|parser
operator|.
name|getEvent
argument_list|()
expr_stmt|;
comment|// Compose the root node.
name|YamlNode
name|node
init|=
name|composeNode
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Drop the DOCUMENT-END event.
name|parser
operator|.
name|getEvent
argument_list|()
expr_stmt|;
name|this
operator|.
name|anchors
operator|.
name|clear
argument_list|()
expr_stmt|;
name|recursiveNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|composeNode
specifier|private
name|YamlNode
name|composeNode
parameter_list|(
name|YamlNode
name|parent
parameter_list|,
name|Object
name|index
parameter_list|)
block|{
name|recursiveNodes
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|Alias
argument_list|)
condition|)
block|{
name|AliasEvent
name|event
init|=
operator|(
name|AliasEvent
operator|)
name|parser
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|String
name|anchor
init|=
name|event
operator|.
name|getAnchor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|anchors
operator|.
name|containsKey
argument_list|(
name|anchor
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ComposerException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"found undefined alias "
operator|+
name|anchor
argument_list|,
name|event
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
name|YamlNode
name|result
init|=
operator|(
name|YamlNode
operator|)
name|anchors
operator|.
name|get
argument_list|(
name|anchor
argument_list|)
decl_stmt|;
if|if
condition|(
name|recursiveNodes
operator|.
name|remove
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|.
name|setTwoStepsConstruction
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|NodeEvent
name|event
init|=
operator|(
name|NodeEvent
operator|)
name|parser
operator|.
name|peekEvent
argument_list|()
decl_stmt|;
name|String
name|anchor
init|=
literal|null
decl_stmt|;
name|anchor
operator|=
name|event
operator|.
name|getAnchor
argument_list|()
expr_stmt|;
if|if
condition|(
name|anchor
operator|!=
literal|null
operator|&&
name|anchors
operator|.
name|containsKey
argument_list|(
name|anchor
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ComposerException
argument_list|(
literal|"found duplicate anchor "
operator|+
name|anchor
operator|+
literal|"; first occurence"
argument_list|,
name|this
operator|.
name|anchors
operator|.
name|get
argument_list|(
name|anchor
argument_list|)
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"second occurence"
argument_list|,
name|event
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
comment|// resolver.descendResolver(parent, index);
name|YamlNode
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|Scalar
argument_list|)
condition|)
block|{
name|node
operator|=
name|composeScalarNode
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|SequenceStart
argument_list|)
condition|)
block|{
name|node
operator|=
name|composeSequenceNode
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
name|composeMappingNode
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
block|}
comment|// resolver.ascendResolver();
name|recursiveNodes
operator|.
name|remove
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|composeScalarNode
specifier|private
name|YamlNode
name|composeScalarNode
parameter_list|(
name|String
name|anchor
parameter_list|)
block|{
name|ScalarEvent
name|ev
init|=
operator|(
name|ScalarEvent
operator|)
name|parser
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|String
name|tag
init|=
name|ev
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|boolean
name|resolved
init|=
literal|false
decl_stmt|;
name|Tag
name|nodeTag
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|null
operator|||
name|tag
operator|.
name|equals
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|nodeTag
operator|=
name|resolver
operator|.
name|resolve
argument_list|(
name|NodeId
operator|.
name|scalar
argument_list|,
name|ev
operator|.
name|getValue
argument_list|()
argument_list|,
name|ev
operator|.
name|getImplicit
argument_list|()
operator|.
name|isFirst
argument_list|()
argument_list|)
expr_stmt|;
name|resolved
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|nodeTag
operator|=
operator|new
name|Tag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
name|YamlNode
name|node
init|=
operator|new
name|ScalarNode
argument_list|(
name|nodeTag
argument_list|,
name|resolved
argument_list|,
name|ev
operator|.
name|getValue
argument_list|()
argument_list|,
name|ev
operator|.
name|getStartMark
argument_list|()
argument_list|,
name|ev
operator|.
name|getEndMark
argument_list|()
argument_list|,
name|ev
operator|.
name|getStyle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|anchor
operator|!=
literal|null
condition|)
block|{
name|anchors
operator|.
name|put
argument_list|(
name|anchor
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
DECL|method|composeSequenceNode
specifier|private
name|YamlNode
name|composeSequenceNode
parameter_list|(
name|String
name|anchor
parameter_list|)
block|{
name|SequenceStartEvent
name|startEvent
init|=
operator|(
name|SequenceStartEvent
operator|)
name|parser
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|String
name|tag
init|=
name|startEvent
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|Tag
name|nodeTag
decl_stmt|;
name|boolean
name|resolved
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|null
operator|||
name|tag
operator|.
name|equals
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|nodeTag
operator|=
name|resolver
operator|.
name|resolve
argument_list|(
name|NodeId
operator|.
name|sequence
argument_list|,
literal|null
argument_list|,
name|startEvent
operator|.
name|getImplicit
argument_list|()
argument_list|)
expr_stmt|;
name|resolved
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|nodeTag
operator|=
operator|new
name|Tag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
name|SequenceNode
name|node
init|=
operator|new
name|SequenceNode
argument_list|(
name|nodeTag
argument_list|,
name|resolved
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|YamlNode
argument_list|>
argument_list|()
argument_list|,
name|startEvent
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|null
argument_list|,
name|startEvent
operator|.
name|getFlowStyle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|anchor
operator|!=
literal|null
condition|)
block|{
name|anchors
operator|.
name|put
argument_list|(
name|anchor
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|SequenceEnd
argument_list|)
condition|)
block|{
operator|(
name|node
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|add
argument_list|(
name|composeNode
argument_list|(
name|node
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|Event
name|endEvent
init|=
name|parser
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|node
operator|.
name|setEndMark
argument_list|(
name|endEvent
operator|.
name|getEndMark
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|composeMappingNode
specifier|private
name|YamlNode
name|composeMappingNode
parameter_list|(
name|String
name|anchor
parameter_list|)
block|{
name|MappingStartEvent
name|startEvent
init|=
operator|(
name|MappingStartEvent
operator|)
name|parser
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|String
name|tag
init|=
name|startEvent
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|Tag
name|nodeTag
decl_stmt|;
name|boolean
name|resolved
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|null
operator|||
name|tag
operator|.
name|equals
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|nodeTag
operator|=
name|resolver
operator|.
name|resolve
argument_list|(
name|NodeId
operator|.
name|mapping
argument_list|,
literal|null
argument_list|,
name|startEvent
operator|.
name|getImplicit
argument_list|()
argument_list|)
expr_stmt|;
name|resolved
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|nodeTag
operator|=
operator|new
name|Tag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
name|MappingNode
name|node
init|=
operator|new
name|MappingNode
argument_list|(
name|nodeTag
argument_list|,
name|resolved
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|NodeTuple
argument_list|>
argument_list|()
argument_list|,
name|startEvent
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|null
argument_list|,
name|startEvent
operator|.
name|getFlowStyle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|anchor
operator|!=
literal|null
condition|)
block|{
name|anchors
operator|.
name|put
argument_list|(
name|anchor
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|parser
operator|.
name|checkEvent
argument_list|(
name|Event
operator|.
name|ID
operator|.
name|MappingEnd
argument_list|)
condition|)
block|{
name|YamlNode
name|itemKey
init|=
name|composeNode
argument_list|(
name|node
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|YamlNode
name|itemValue
init|=
name|composeNode
argument_list|(
name|node
argument_list|,
name|itemKey
argument_list|)
decl_stmt|;
name|node
operator|.
name|getValue
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|NodeTuple
argument_list|(
name|itemKey
argument_list|,
name|itemValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Event
name|endEvent
init|=
name|parser
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|node
operator|.
name|setEndMark
argument_list|(
name|endEvent
operator|.
name|getEndMark
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
end_class

end_unit

