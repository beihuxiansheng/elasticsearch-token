begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|builder
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|XContentFactory
specifier|public
class|class
name|XContentFactory
block|{
DECL|field|GUESS_HEADER_LENGTH
specifier|private
specifier|static
name|int
name|GUESS_HEADER_LENGTH
init|=
literal|20
decl_stmt|;
DECL|field|contents
specifier|private
specifier|static
specifier|final
name|XContent
index|[]
name|contents
decl_stmt|;
static|static
block|{
name|contents
operator|=
operator|new
name|XContent
index|[
literal|1
index|]
expr_stmt|;
name|contents
index|[
literal|0
index|]
operator|=
operator|new
name|JsonXContent
argument_list|()
expr_stmt|;
block|}
DECL|method|contentBuilder
specifier|public
specifier|static
name|XContentBuilder
name|contentBuilder
parameter_list|(
name|XContentType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|==
name|XContentType
operator|.
name|JSON
condition|)
block|{
return|return
name|JsonXContent
operator|.
name|contentBinaryBuilder
argument_list|()
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No matching content type for "
operator|+
name|type
argument_list|)
throw|;
block|}
DECL|method|contentBinaryBuilder
specifier|public
specifier|static
name|XContentBuilder
name|contentBinaryBuilder
parameter_list|(
name|XContentType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|==
name|XContentType
operator|.
name|JSON
condition|)
block|{
return|return
name|JsonXContent
operator|.
name|contentBinaryBuilder
argument_list|()
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No matching content type for "
operator|+
name|type
argument_list|)
throw|;
block|}
DECL|method|contentTextBuilder
specifier|public
specifier|static
name|XContentBuilder
name|contentTextBuilder
parameter_list|(
name|XContentType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|==
name|XContentType
operator|.
name|JSON
condition|)
block|{
return|return
name|JsonXContent
operator|.
name|contentTextBuilder
argument_list|()
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No matching content type for "
operator|+
name|type
argument_list|)
throw|;
block|}
DECL|method|xContent
specifier|public
specifier|static
name|XContent
name|xContent
parameter_list|(
name|XContentType
name|type
parameter_list|)
block|{
return|return
name|contents
index|[
name|type
operator|.
name|index
argument_list|()
index|]
return|;
block|}
DECL|method|xContentType
specifier|public
specifier|static
name|XContentType
name|xContentType
parameter_list|(
name|CharSequence
name|content
parameter_list|)
block|{
name|int
name|length
init|=
name|content
operator|.
name|length
argument_list|()
operator|<
name|GUESS_HEADER_LENGTH
condition|?
name|content
operator|.
name|length
argument_list|()
else|:
name|GUESS_HEADER_LENGTH
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|content
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
return|return
name|XContentType
operator|.
name|JSON
return|;
block|}
block|}
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Failed to derive xContent from byte stream"
argument_list|)
throw|;
block|}
DECL|method|xContent
specifier|public
specifier|static
name|XContent
name|xContent
parameter_list|(
name|CharSequence
name|content
parameter_list|)
block|{
return|return
name|xContent
argument_list|(
name|xContentType
argument_list|(
name|content
argument_list|)
argument_list|)
return|;
block|}
DECL|method|xContent
specifier|public
specifier|static
name|XContent
name|xContent
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|xContent
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|xContent
specifier|public
specifier|static
name|XContent
name|xContent
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|xContent
argument_list|(
name|xContentType
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
DECL|method|xContentType
specifier|public
specifier|static
name|XContentType
name|xContentType
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|xContentType
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|xContentType
specifier|public
specifier|static
name|XContentType
name|xContentType
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|length
operator|=
name|length
operator|<
name|GUESS_HEADER_LENGTH
condition|?
name|length
else|:
name|GUESS_HEADER_LENGTH
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|i
index|]
operator|==
literal|'{'
condition|)
block|{
return|return
name|XContentType
operator|.
name|JSON
return|;
block|}
block|}
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Failed to derive xContent from byte stream"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

