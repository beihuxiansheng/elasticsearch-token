begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * An open addressed hashing implementation for Object types.  *<p/>  * Created: Sun Nov  4 08:56:06 2001  *  * @author Eric D. Friedman  * @version $Id: TObjectHash.java,v 1.27 2009/06/01 22:14:44 robeden Exp $  */
end_comment

begin_class
DECL|class|TObjectHash
specifier|abstract
specifier|public
class|class
name|TObjectHash
parameter_list|<
name|T
parameter_list|>
extends|extends
name|THash
implements|implements
name|TObjectHashingStrategy
argument_list|<
name|T
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3461112548087185871L
decl_stmt|;
comment|/**      * the set of Objects      */
DECL|field|_set
specifier|protected
specifier|transient
name|Object
index|[]
name|_set
decl_stmt|;
comment|/**      * the strategy used to hash objects in this collection.      */
DECL|field|_hashingStrategy
specifier|protected
name|TObjectHashingStrategy
argument_list|<
name|T
argument_list|>
name|_hashingStrategy
decl_stmt|;
DECL|field|REMOVED
DECL|field|FREE
specifier|protected
specifier|static
specifier|final
name|Object
name|REMOVED
init|=
operator|new
name|Object
argument_list|()
decl_stmt|,
name|FREE
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**      * Creates a new<code>TObjectHash</code> instance with the      * default capacity and load factor.      */
DECL|method|TObjectHash
specifier|public
name|TObjectHash
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|this
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TObjectHash</code> instance with the      * default capacity and load factor and a custom hashing strategy.      *      * @param strategy used to compute hash codes and to compare objects.      */
DECL|method|TObjectHash
specifier|public
name|TObjectHash
parameter_list|(
name|TObjectHashingStrategy
argument_list|<
name|T
argument_list|>
name|strategy
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|strategy
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TObjectHash</code> instance whose capacity      * is the next highest prime above<tt>initialCapacity + 1</tt>      * unless that value is already prime.      *      * @param initialCapacity an<code>int</code> value      */
DECL|method|TObjectHash
specifier|public
name|TObjectHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|this
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TObjectHash</code> instance whose capacity      * is the next highest prime above<tt>initialCapacity + 1</tt>      * unless that value is already prime.  Uses the specified custom      * hashing strategy.      *      * @param initialCapacity an<code>int</code> value      * @param strategy        used to compute hash codes and to compare objects.      */
DECL|method|TObjectHash
specifier|public
name|TObjectHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|TObjectHashingStrategy
argument_list|<
name|T
argument_list|>
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|strategy
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TObjectHash</code> instance with a prime      * value at or near the specified capacity and load factor.      *      * @param initialCapacity used to find a prime capacity for the table.      * @param loadFactor      used to calculate the threshold over which      *                        rehashing takes place.      */
DECL|method|TObjectHash
specifier|public
name|TObjectHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|this
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TObjectHash</code> instance with a prime      * value at or near the specified capacity and load factor.  Uses      * the specified custom hashing strategy.      *      * @param initialCapacity used to find a prime capacity for the table.      * @param loadFactor      used to calculate the threshold over which      *                        rehashing takes place.      * @param strategy        used to compute hash codes and to compare objects.      */
DECL|method|TObjectHash
specifier|public
name|TObjectHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|,
name|TObjectHashingStrategy
argument_list|<
name|T
argument_list|>
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|strategy
expr_stmt|;
block|}
comment|/**      * @return a shallow clone of this collection      */
DECL|method|clone
specifier|public
name|TObjectHash
argument_list|<
name|T
argument_list|>
name|clone
parameter_list|()
block|{
name|TObjectHash
argument_list|<
name|T
argument_list|>
name|h
init|=
operator|(
name|TObjectHash
argument_list|<
name|T
argument_list|>
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|h
operator|.
name|_set
operator|=
operator|(
name|Object
index|[]
operator|)
name|this
operator|.
name|_set
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
DECL|method|capacity
specifier|protected
name|int
name|capacity
parameter_list|()
block|{
return|return
name|_set
operator|.
name|length
return|;
block|}
DECL|method|removeAt
specifier|protected
name|void
name|removeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|_set
index|[
name|index
index|]
operator|=
name|REMOVED
expr_stmt|;
name|super
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
comment|/**      * initializes the Object set of this hash table.      *      * @param initialCapacity an<code>int</code> value      * @return an<code>int</code> value      */
DECL|method|setUp
specifier|protected
name|int
name|setUp
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|int
name|capacity
decl_stmt|;
name|capacity
operator|=
name|super
operator|.
name|setUp
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
name|_set
operator|=
operator|new
name|Object
index|[
name|capacity
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|_set
argument_list|,
name|FREE
argument_list|)
expr_stmt|;
return|return
name|capacity
return|;
block|}
comment|/**      * Executes<tt>procedure</tt> for each element in the set.      *      * @param procedure a<code>TObjectProcedure</code> value      * @return false if the loop over the set terminated because      *         the procedure returned false for some value.      */
DECL|method|forEach
specifier|public
name|boolean
name|forEach
parameter_list|(
name|TObjectProcedure
argument_list|<
name|T
argument_list|>
name|procedure
parameter_list|)
block|{
name|Object
index|[]
name|set
init|=
name|_set
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|set
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|set
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|set
index|[
name|i
index|]
operator|!=
name|REMOVED
operator|&&
operator|!
name|procedure
operator|.
name|execute
argument_list|(
operator|(
name|T
operator|)
name|set
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Searches the set for<tt>obj</tt>      *      * @param obj an<code>Object</code> value      * @return a<code>boolean</code> value      */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|index
argument_list|(
operator|(
name|T
operator|)
name|obj
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**      * Locates the index of<tt>obj</tt>.      *      * @param obj an<code>Object</code> value      * @return the index of<tt>obj</tt> or -1 if it isn't in the set.      */
DECL|method|index
specifier|protected
name|int
name|index
parameter_list|(
name|T
name|obj
parameter_list|)
block|{
specifier|final
name|TObjectHashingStrategy
argument_list|<
name|T
argument_list|>
name|hashing_strategy
init|=
name|_hashingStrategy
decl_stmt|;
specifier|final
name|Object
index|[]
name|set
init|=
name|_set
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|set
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|hash
init|=
name|hashing_strategy
operator|.
name|computeHashCode
argument_list|(
name|obj
argument_list|)
operator|&
literal|0x7fffffff
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|%
name|length
decl_stmt|;
name|Object
name|cur
init|=
name|set
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|cur
operator|==
name|FREE
condition|)
return|return
operator|-
literal|1
return|;
comment|// NOTE: here it has to be REMOVED or FULL (some user-given value)
if|if
condition|(
name|cur
operator|==
name|REMOVED
operator|||
operator|!
name|hashing_strategy
operator|.
name|equals
argument_list|(
operator|(
name|T
operator|)
name|cur
argument_list|,
name|obj
argument_list|)
condition|)
block|{
comment|// see Knuth, p. 529
specifier|final
name|int
name|probe
init|=
literal|1
operator|+
operator|(
name|hash
operator|%
operator|(
name|length
operator|-
literal|2
operator|)
operator|)
decl_stmt|;
do|do
block|{
name|index
operator|-=
name|probe
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|+=
name|length
expr_stmt|;
block|}
name|cur
operator|=
name|set
index|[
name|index
index|]
expr_stmt|;
block|}
do|while
condition|(
name|cur
operator|!=
name|FREE
operator|&&
operator|(
name|cur
operator|==
name|REMOVED
operator|||
operator|!
name|_hashingStrategy
operator|.
name|equals
argument_list|(
operator|(
name|T
operator|)
name|cur
argument_list|,
name|obj
argument_list|)
operator|)
condition|)
do|;
block|}
return|return
name|cur
operator|==
name|FREE
condition|?
operator|-
literal|1
else|:
name|index
return|;
block|}
comment|/**      * Locates the index at which<tt>obj</tt> can be inserted.  if      * there is already a value equal()ing<tt>obj</tt> in the set,      * returns that value's index as<tt>-index - 1</tt>.      *      * @param obj an<code>Object</code> value      * @return the index of a FREE slot at which obj can be inserted      *         or, if obj is already stored in the hash, the negative value of      *         that index, minus 1: -index -1.      */
DECL|method|insertionIndex
specifier|protected
name|int
name|insertionIndex
parameter_list|(
name|T
name|obj
parameter_list|)
block|{
specifier|final
name|TObjectHashingStrategy
argument_list|<
name|T
argument_list|>
name|hashing_strategy
init|=
name|_hashingStrategy
decl_stmt|;
specifier|final
name|Object
index|[]
name|set
init|=
name|_set
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|set
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|hash
init|=
name|hashing_strategy
operator|.
name|computeHashCode
argument_list|(
name|obj
argument_list|)
operator|&
literal|0x7fffffff
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|%
name|length
decl_stmt|;
name|Object
name|cur
init|=
name|set
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|cur
operator|==
name|FREE
condition|)
block|{
return|return
name|index
return|;
comment|// empty, all done
block|}
elseif|else
if|if
condition|(
name|cur
operator|!=
name|REMOVED
operator|&&
name|hashing_strategy
operator|.
name|equals
argument_list|(
operator|(
name|T
operator|)
name|cur
argument_list|,
name|obj
argument_list|)
condition|)
block|{
return|return
operator|-
name|index
operator|-
literal|1
return|;
comment|// already stored
block|}
else|else
block|{
comment|// already FULL or REMOVED, must probe
comment|// compute the double hash
specifier|final
name|int
name|probe
init|=
literal|1
operator|+
operator|(
name|hash
operator|%
operator|(
name|length
operator|-
literal|2
operator|)
operator|)
decl_stmt|;
comment|// if the slot we landed on is FULL (but not removed), probe
comment|// until we find an empty slot, a REMOVED slot, or an element
comment|// equal to the one we are trying to insert.
comment|// finding an empty slot means that the value is not present
comment|// and that we should use that slot as the insertion point;
comment|// finding a REMOVED slot means that we need to keep searching,
comment|// however we want to remember the offset of that REMOVED slot
comment|// so we can reuse it in case a "new" insertion (i.e. not an update)
comment|// is possible.
comment|// finding a matching value means that we've found that our desired
comment|// key is already in the table
if|if
condition|(
name|cur
operator|!=
name|REMOVED
condition|)
block|{
comment|// starting at the natural offset, probe until we find an
comment|// offset that isn't full.
do|do
block|{
name|index
operator|-=
name|probe
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|+=
name|length
expr_stmt|;
block|}
name|cur
operator|=
name|set
index|[
name|index
index|]
expr_stmt|;
block|}
do|while
condition|(
name|cur
operator|!=
name|FREE
operator|&&
name|cur
operator|!=
name|REMOVED
operator|&&
operator|!
name|hashing_strategy
operator|.
name|equals
argument_list|(
operator|(
name|T
operator|)
name|cur
argument_list|,
name|obj
argument_list|)
condition|)
do|;
block|}
comment|// if the index we found was removed: continue probing until we
comment|// locate a free location or an element which equal()s the
comment|// one we have.
if|if
condition|(
name|cur
operator|==
name|REMOVED
condition|)
block|{
name|int
name|firstRemoved
init|=
name|index
decl_stmt|;
while|while
condition|(
name|cur
operator|!=
name|FREE
operator|&&
operator|(
name|cur
operator|==
name|REMOVED
operator|||
operator|!
name|hashing_strategy
operator|.
name|equals
argument_list|(
operator|(
name|T
operator|)
name|cur
argument_list|,
name|obj
argument_list|)
operator|)
condition|)
block|{
name|index
operator|-=
name|probe
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|+=
name|length
expr_stmt|;
block|}
name|cur
operator|=
name|set
index|[
name|index
index|]
expr_stmt|;
block|}
comment|// NOTE: cur cannot == REMOVED in this block
return|return
operator|(
name|cur
operator|!=
name|FREE
operator|)
condition|?
operator|-
name|index
operator|-
literal|1
else|:
name|firstRemoved
return|;
block|}
comment|// if it's full, the key is already stored
comment|// NOTE: cur cannot equal REMOVE here (would have retuned already (see above)
return|return
operator|(
name|cur
operator|!=
name|FREE
operator|)
condition|?
operator|-
name|index
operator|-
literal|1
else|:
name|index
return|;
block|}
block|}
comment|/**      * This is the default implementation of TObjectHashingStrategy:      * it delegates hashing to the Object's hashCode method.      *      * @param o for which the hashcode is to be computed      * @return the hashCode      * @see Object#hashCode()      */
DECL|method|computeHashCode
specifier|public
specifier|final
name|int
name|computeHashCode
parameter_list|(
name|T
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * This is the default implementation of TObjectHashingStrategy:      * it delegates equality comparisons to the first parameter's      * equals() method.      *      * @param o1 an<code>Object</code> value      * @param o2 an<code>Object</code> value      * @return true if the objects are equal      * @see Object#equals(Object)      */
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|T
name|o1
parameter_list|,
name|T
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|==
literal|null
condition|?
name|o2
operator|==
literal|null
else|:
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
return|;
block|}
comment|/**      * Convenience methods for subclasses to use in throwing exceptions about      * badly behaved user objects employed as keys.  We have to throw an      * IllegalArgumentException with a rather verbose message telling the      * user that they need to fix their object implementation to conform      * to the general contract for java.lang.Object.      *      * @param o1 the first of the equal elements with unequal hash codes.      * @param o2 the second of the equal elements with unequal hash codes.      * @throws IllegalArgumentException the whole point of this method.      */
DECL|method|throwObjectContractViolation
specifier|protected
specifier|final
name|void
name|throwObjectContractViolation
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Equal objects must have equal hashcodes. "
operator|+
literal|"During rehashing, Trove discovered that "
operator|+
literal|"the following two objects claim to be "
operator|+
literal|"equal (as in java.lang.Object.equals()) "
operator|+
literal|"but their hashCodes (or those calculated by "
operator|+
literal|"your TObjectHashingStrategy) are not equal."
operator|+
literal|"This violates the general contract of "
operator|+
literal|"java.lang.Object.hashCode().  See bullet point two "
operator|+
literal|"in that method's documentation. "
operator|+
literal|"object #1 ="
operator|+
name|o1
operator|+
literal|"; object #2 ="
operator|+
name|o2
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|writeExternal
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// VERSION
name|out
operator|.
name|writeByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// HASHING STRATEGY
if|if
condition|(
name|_hashingStrategy
operator|==
name|this
condition|)
name|out
operator|.
name|writeObject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|writeObject
argument_list|(
name|_hashingStrategy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readExternal
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
operator|.
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// VERSION
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// HASHING STRATEGY
comment|//noinspection unchecked
name|_hashingStrategy
operator|=
operator|(
name|TObjectHashingStrategy
argument_list|<
name|T
argument_list|>
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|_hashingStrategy
operator|==
literal|null
condition|)
name|_hashingStrategy
operator|=
name|this
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// TObjectHash
end_comment

end_unit

