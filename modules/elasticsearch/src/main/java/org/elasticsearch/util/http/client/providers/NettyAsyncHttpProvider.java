begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.client.providers
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|AsyncHandler
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|collection
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
operator|.
name|ByteArrayPartSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
operator|.
name|MultipartRequestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
operator|.
name|PartSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|url
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|url
operator|.
name|Url
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|util
operator|.
name|SslUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ClientBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBufferOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|DefaultChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioClientSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|internal
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
operator|.
name|*
import|;
end_import

begin_class
DECL|class|NettyAsyncHttpProvider
specifier|public
class|class
name|NettyAsyncHttpProvider
extends|extends
name|SimpleChannelUpstreamHandler
implements|implements
name|AsyncHttpProvider
argument_list|<
name|HttpResponse
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|final
specifier|static
name|ESLogger
name|log
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|NettyAsyncHttpProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bootstrap
specifier|private
specifier|final
name|ClientBootstrap
name|bootstrap
decl_stmt|;
DECL|field|MAX_BUFFERRED_BYTES
specifier|private
specifier|final
specifier|static
name|int
name|MAX_BUFFERRED_BYTES
init|=
literal|8192
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|AsyncHttpClientConfig
name|config
decl_stmt|;
DECL|field|connectionsPool
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Channel
argument_list|>
name|connectionsPool
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Channel
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|maxConnectionsPerHost
specifier|private
specifier|volatile
name|int
name|maxConnectionsPerHost
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|HashedWheelTimer
name|timer
init|=
operator|new
name|HashedWheelTimer
argument_list|()
decl_stmt|;
DECL|field|isClose
specifier|private
specifier|final
name|AtomicBoolean
name|isClose
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|socketChannelFactory
specifier|private
specifier|final
name|NioClientSocketChannelFactory
name|socketChannelFactory
decl_stmt|;
DECL|field|openChannels
specifier|private
specifier|final
name|ChannelGroup
name|openChannels
init|=
operator|new
name|DefaultChannelGroup
argument_list|(
literal|"asyncHttpClient"
argument_list|)
decl_stmt|;
DECL|method|NettyAsyncHttpProvider
specifier|public
name|NettyAsyncHttpProvider
parameter_list|(
name|AsyncHttpClientConfig
name|config
parameter_list|)
block|{
name|socketChannelFactory
operator|=
operator|new
name|NioClientSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|config
operator|.
name|executorService
argument_list|()
argument_list|)
expr_stmt|;
name|bootstrap
operator|=
operator|new
name|ClientBootstrap
argument_list|(
name|socketChannelFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|configure
name|void
name|configure
parameter_list|(
specifier|final
name|boolean
name|useSSL
parameter_list|,
specifier|final
name|ConnectListener
argument_list|<
name|?
argument_list|>
name|cl
parameter_list|)
block|{
name|bootstrap
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
comment|/* @Override */
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|pipeline
argument_list|()
decl_stmt|;
if|if
condition|(
name|useSSL
condition|)
block|{
try|try
block|{
name|SSLEngine
name|sslEngine
init|=
name|config
operator|.
name|getSSLEngine
argument_list|()
decl_stmt|;
if|if
condition|(
name|sslEngine
operator|==
literal|null
condition|)
block|{
name|sslEngine
operator|=
name|SslUtils
operator|.
name|getSSLEngine
argument_list|()
expr_stmt|;
block|}
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"ssl"
argument_list|,
operator|new
name|SslHandler
argument_list|(
name|sslEngine
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|cl
operator|.
name|future
argument_list|()
operator|.
name|abort
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"codec"
argument_list|,
operator|new
name|HttpClientCodec
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|isCompressionEnabled
argument_list|()
condition|)
block|{
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"inflater"
argument_list|,
operator|new
name|HttpContentDecompressor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IdleStateHandler
name|h
init|=
operator|new
name|IdleStateHandler
argument_list|(
name|timer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|config
operator|.
name|getIdleConnectionTimeoutInMs
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|channelIdle
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|IdleStateEvent
name|e
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|removeFromCache
argument_list|(
name|ctx
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"timeout"
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"httpProcessor"
argument_list|,
name|NettyAsyncHttpProvider
operator|.
name|this
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|lookupInCache
specifier|private
name|Channel
name|lookupInCache
parameter_list|(
name|Url
name|url
parameter_list|)
block|{
name|Channel
name|channel
init|=
name|connectionsPool
operator|.
name|get
argument_list|(
name|url
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
comment|/**              * The Channel will eventually be closed by Netty and will becomes invalid.              * We might suffer a memory leak if we don't scan for closed channel. The              * AsyncHttpClientConfig.reaper() will always make sure those are cleared.              */
if|if
condition|(
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|channel
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectionsPool
operator|.
name|remove
argument_list|(
name|url
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|channel
return|;
block|}
comment|/**      * Non Blocking connect.      */
DECL|class|ConnectListener
specifier|private
specifier|final
specifier|static
class|class
name|ConnectListener
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ChannelFutureListener
block|{
DECL|field|config
specifier|private
specifier|final
name|AsyncHttpClientConfig
name|config
decl_stmt|;
DECL|field|asyncHandler
specifier|private
specifier|final
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|asyncHandler
decl_stmt|;
DECL|field|future
specifier|private
specifier|final
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
name|future
decl_stmt|;
DECL|field|nettyRequest
specifier|private
specifier|final
name|HttpRequest
name|nettyRequest
decl_stmt|;
DECL|method|ConnectListener
specifier|private
name|ConnectListener
parameter_list|(
name|AsyncHttpClientConfig
name|config
parameter_list|,
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|asyncHandler
parameter_list|,
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
name|HttpRequest
name|nettyRequest
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|asyncHandler
operator|=
name|asyncHandler
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
name|this
operator|.
name|nettyRequest
operator|=
name|nettyRequest
expr_stmt|;
block|}
DECL|method|future
specifier|public
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|()
block|{
return|return
name|future
return|;
block|}
DECL|method|operationComplete
specifier|public
specifier|final
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|f
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|executeRequest
argument_list|(
name|f
operator|.
name|getChannel
argument_list|()
argument_list|,
name|asyncHandler
argument_list|,
name|config
argument_list|,
name|future
argument_list|,
name|nettyRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|ex
parameter_list|)
block|{
name|future
operator|.
name|abort
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|config
specifier|private
specifier|final
name|AsyncHttpClientConfig
name|config
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|Request
name|request
decl_stmt|;
DECL|field|asyncHandler
specifier|private
specifier|final
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|asyncHandler
decl_stmt|;
DECL|field|future
specifier|private
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
name|future
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|AsyncHttpClientConfig
name|config
parameter_list|,
name|Request
name|request
parameter_list|,
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|asyncHandler
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|asyncHandler
operator|=
name|asyncHandler
expr_stmt|;
name|this
operator|.
name|future
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|AsyncHttpClientConfig
name|config
parameter_list|,
name|Request
name|request
parameter_list|,
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|asyncHandler
parameter_list|,
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|asyncHandler
operator|=
name|asyncHandler
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
block|}
DECL|method|build
specifier|public
name|ConnectListener
argument_list|<
name|T
argument_list|>
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|Url
name|url
init|=
name|createUrl
argument_list|(
name|request
operator|.
name|getUrl
argument_list|()
argument_list|)
decl_stmt|;
name|HttpRequest
name|nettyRequest
init|=
name|buildRequest
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Executing the doConnect operation: "
operator|+
name|asyncHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|future
operator|==
literal|null
condition|)
block|{
name|future
operator|=
operator|new
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
argument_list|(
name|url
argument_list|,
name|request
argument_list|,
name|asyncHandler
argument_list|,
name|nettyRequest
argument_list|,
name|config
operator|.
name|getRequestTimeoutInMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ConnectListener
argument_list|<
name|T
argument_list|>
argument_list|(
name|config
argument_list|,
name|asyncHandler
argument_list|,
name|future
argument_list|,
name|nettyRequest
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|executeRequest
specifier|private
specifier|final
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|executeRequest
parameter_list|(
specifier|final
name|Channel
name|channel
parameter_list|,
specifier|final
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|asyncHandler
parameter_list|,
specifier|final
name|AsyncHttpClientConfig
name|config
parameter_list|,
specifier|final
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
specifier|final
name|HttpRequest
name|nettyRequest
parameter_list|)
throws|throws
name|ConnectException
block|{
if|if
condition|(
operator|!
name|channel
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectException
argument_list|(
literal|"Connection refused to "
operator|+
name|channel
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
throw|;
block|}
name|channel
operator|.
name|getPipeline
argument_list|()
operator|.
name|getContext
argument_list|(
name|NettyAsyncHttpProvider
operator|.
name|class
argument_list|)
operator|.
name|setAttachment
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|nettyRequest
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|setReaperFuture
argument_list|(
name|config
operator|.
name|reaper
argument_list|()
operator|.
name|schedule
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
block|{
if|if
condition|(
operator|!
name|future
operator|.
name|isDone
argument_list|()
operator|&&
operator|!
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|future
operator|.
name|abort
argument_list|(
operator|new
name|TimeoutException
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|getPipeline
argument_list|()
operator|.
name|getContext
argument_list|(
name|NettyAsyncHttpProvider
operator|.
name|class
argument_list|)
operator|.
name|setAttachment
argument_list|(
name|ClosedEvent
operator|.
name|class
argument_list|)
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|config
operator|.
name|getRequestTimeoutInMs
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
name|future
operator|.
name|abort
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildRequest
specifier|private
specifier|final
specifier|static
name|HttpRequest
name|buildRequest
parameter_list|(
name|AsyncHttpClientConfig
name|config
parameter_list|,
name|Request
name|request
parameter_list|,
name|Url
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpRequest
name|nettyRequest
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|GET
case|:
name|nettyRequest
operator|=
name|construct
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|url
argument_list|)
expr_stmt|;
break|break;
case|case
name|POST
case|:
name|nettyRequest
operator|=
name|construct
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|HttpMethod
operator|.
name|POST
argument_list|,
name|url
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|nettyRequest
operator|=
name|construct
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|HttpMethod
operator|.
name|DELETE
argument_list|,
name|url
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|nettyRequest
operator|=
name|construct
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|HttpMethod
operator|.
name|PUT
argument_list|,
name|url
argument_list|)
expr_stmt|;
break|break;
case|case
name|HEAD
case|:
name|nettyRequest
operator|=
name|construct
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|HttpMethod
operator|.
name|HEAD
argument_list|,
name|url
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|nettyRequest
return|;
block|}
DECL|method|createUrl
specifier|private
specifier|final
specifier|static
name|Url
name|createUrl
parameter_list|(
name|String
name|u
parameter_list|)
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|u
argument_list|)
decl_stmt|;
specifier|final
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
operator|||
operator|!
name|scheme
operator|.
name|equals
argument_list|(
literal|"http"
argument_list|)
operator|&&
operator|!
name|scheme
operator|.
name|equals
argument_list|(
literal|"https"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The URI scheme, of the URI "
operator|+
name|u
operator|+
literal|", must be equal (ignoring case) to 'http'"
argument_list|)
throw|;
block|}
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The URI path, of the URI "
operator|+
name|uri
operator|+
literal|", must be non-null"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The URI path, of the URI "
operator|+
name|uri
operator|+
literal|". must start with a '/'"
argument_list|)
throw|;
block|}
name|int
name|port
init|=
name|uri
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
name|port
operator|=
name|scheme
operator|.
name|equals
argument_list|(
literal|"http"
argument_list|)
condition|?
literal|80
else|:
literal|443
expr_stmt|;
return|return
operator|new
name|Url
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|port
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|construct
specifier|private
specifier|static
name|HttpRequest
name|construct
parameter_list|(
name|AsyncHttpClientConfig
name|config
parameter_list|,
name|Request
name|request
parameter_list|,
name|HttpMethod
name|m
parameter_list|,
name|Url
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|host
init|=
name|url
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getVirtualHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|request
operator|.
name|getVirtualHost
argument_list|()
expr_stmt|;
block|}
name|HttpRequest
name|nettyRequest
decl_stmt|;
name|String
name|queryString
init|=
name|url
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
comment|// does this request have a query string
if|if
condition|(
name|queryString
operator|!=
literal|null
condition|)
block|{
name|nettyRequest
operator|=
operator|new
name|DefaultHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|m
argument_list|,
name|url
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nettyRequest
operator|=
operator|new
name|DefaultHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|m
argument_list|,
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|HOST
argument_list|,
name|host
operator|+
literal|":"
operator|+
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Headers
name|h
init|=
name|request
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|i
init|=
name|h
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|p
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"host"
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|p
operator|.
name|getFirst
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|p
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|p
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|p
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|ka
init|=
name|config
operator|.
name|getKeepAlive
argument_list|()
condition|?
literal|"keep-alive"
else|:
literal|"close"
decl_stmt|;
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
argument_list|,
name|ka
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getProxyServer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nettyRequest
operator|.
name|setHeader
argument_list|(
literal|"Proxy-Connection"
argument_list|,
name|ka
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getUserAgent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nettyRequest
operator|.
name|setHeader
argument_list|(
literal|"User-Agent"
argument_list|,
name|config
operator|.
name|getUserAgent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getCookies
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getCookies
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CookieEncoder
name|httpCookieEncoder
init|=
operator|new
name|CookieEncoder
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Cookie
argument_list|>
name|ic
init|=
name|request
operator|.
name|getCookies
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Cookie
name|c
decl_stmt|;
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|Cookie
name|cookie
decl_stmt|;
while|while
condition|(
name|ic
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|c
operator|=
name|ic
operator|.
name|next
argument_list|()
expr_stmt|;
name|cookie
operator|=
operator|new
name|DefaultCookie
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
name|c
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setMaxAge
argument_list|(
name|c
operator|.
name|getMaxAge
argument_list|()
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
name|c
operator|.
name|getDomain
argument_list|()
argument_list|)
expr_stmt|;
name|httpCookieEncoder
operator|.
name|addCookie
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|COOKIE
argument_list|,
name|httpCookieEncoder
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|isCompressionEnabled
argument_list|()
condition|)
block|{
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|ACCEPT_ENCODING
argument_list|,
name|HttpHeaders
operator|.
name|Values
operator|.
name|GZIP
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|request
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|POST
case|:
case|case
name|PUT
case|:
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getByteData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getByteData
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|nettyRequest
operator|.
name|setContent
argument_list|(
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|request
operator|.
name|getByteData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getStringData
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: Not sure we need to reconfigure that one.
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getStringData
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nettyRequest
operator|.
name|setContent
argument_list|(
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|request
operator|.
name|getStringData
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getStreamData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getStreamData
argument_list|()
operator|.
name|available
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|request
operator|.
name|getStreamData
argument_list|()
operator|.
name|available
argument_list|()
index|]
decl_stmt|;
name|request
operator|.
name|getStreamData
argument_list|()
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|nettyRequest
operator|.
name|setContent
argument_list|(
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getParams
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|param
range|:
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|entries
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|sb
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nettyRequest
operator|.
name|setContent
argument_list|(
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getHeaders
argument_list|()
operator|.
name|getHeaderValues
argument_list|(
name|Headers
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
operator|.
name|getHeaders
argument_list|()
operator|.
name|getHeaderValue
argument_list|(
name|Headers
operator|.
name|CONTENT_TYPE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/x-www-form-urlencoded"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|lenght
init|=
name|computeAndSetContentLength
argument_list|(
name|request
argument_list|,
name|nettyRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|lenght
operator|==
operator|-
literal|1
condition|)
block|{
name|lenght
operator|=
name|MAX_BUFFERRED_BYTES
expr_stmt|;
block|}
name|MultipartRequestEntity
name|mre
init|=
name|createMultipartRequestEntity
argument_list|(
name|request
operator|.
name|getParts
argument_list|()
argument_list|,
name|request
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
name|mre
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|mre
operator|.
name|getContentLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ChannelBuffer
name|b
init|=
name|ChannelBuffers
operator|.
name|dynamicBuffer
argument_list|(
operator|(
name|int
operator|)
name|lenght
argument_list|)
decl_stmt|;
name|mre
operator|.
name|writeRequest
argument_list|(
operator|new
name|ChannelBufferOutputStream
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|nettyRequest
operator|.
name|setContent
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getEntityWriter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|lenght
init|=
name|computeAndSetContentLength
argument_list|(
name|request
argument_list|,
name|nettyRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|lenght
operator|==
operator|-
literal|1
condition|)
block|{
name|lenght
operator|=
name|MAX_BUFFERRED_BYTES
expr_stmt|;
block|}
name|ChannelBuffer
name|b
init|=
name|ChannelBuffers
operator|.
name|dynamicBuffer
argument_list|(
operator|(
name|int
operator|)
name|lenght
argument_list|)
decl_stmt|;
name|request
operator|.
name|getEntityWriter
argument_list|()
operator|.
name|writeEntity
argument_list|(
operator|new
name|ChannelBufferOutputStream
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|b
operator|.
name|writerIndex
argument_list|()
argument_list|)
expr_stmt|;
name|nettyRequest
operator|.
name|setContent
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|nettyRequest
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|nettyRequest
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"txt/html; charset=utf-8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Constructed request: "
operator|+
name|nettyRequest
argument_list|)
expr_stmt|;
return|return
name|nettyRequest
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|isClose
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionsPool
operator|.
name|clear
argument_list|()
expr_stmt|;
name|openChannels
operator|.
name|close
argument_list|()
expr_stmt|;
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|config
operator|.
name|reaper
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|config
operator|.
name|executorService
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|socketChannelFactory
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|bootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
comment|/* @Override */
DECL|method|prepareResponse
specifier|public
name|Response
name|prepareResponse
parameter_list|(
specifier|final
name|HttpResponseStatus
argument_list|<
name|HttpResponse
argument_list|>
name|status
parameter_list|,
specifier|final
name|HttpResponseHeaders
argument_list|<
name|HttpResponse
argument_list|>
name|headers
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|HttpResponseBodyPart
argument_list|<
name|HttpResponse
argument_list|>
argument_list|>
name|bodyParts
parameter_list|)
block|{
return|return
operator|new
name|NettyAsyncResponse
argument_list|(
name|status
argument_list|,
name|headers
argument_list|,
name|bodyParts
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|execute
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|execute
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|asyncHandler
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doConnect
argument_list|(
name|request
argument_list|,
name|asyncHandler
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|execute
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|execute
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|doConnect
argument_list|(
name|request
argument_list|,
name|f
operator|.
name|getAsyncHandler
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return;
block|}
DECL|method|doConnect
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|doConnect
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|AsyncHandler
name|asyncHandler
parameter_list|,
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClose
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|connectionsPool
operator|.
name|size
argument_list|()
operator|>=
name|config
operator|.
name|getMaxTotalConnections
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Too many connections"
argument_list|)
throw|;
block|}
name|Url
name|url
init|=
name|createUrl
argument_list|(
name|request
operator|.
name|getUrl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Lookup cache: "
operator|+
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Channel
name|channel
init|=
name|lookupInCache
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|channel
operator|!=
literal|null
operator|&&
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|HttpRequest
name|nettyRequest
init|=
name|buildRequest
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|f
operator|=
operator|new
name|NettyResponseFuture
argument_list|<
name|T
argument_list|>
argument_list|(
name|url
argument_list|,
name|request
argument_list|,
name|asyncHandler
argument_list|,
name|nettyRequest
argument_list|,
name|config
operator|.
name|getRequestTimeoutInMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|executeRequest
argument_list|(
name|channel
argument_list|,
name|asyncHandler
argument_list|,
name|config
argument_list|,
name|f
argument_list|,
name|nettyRequest
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
name|ConnectListener
argument_list|<
name|T
argument_list|>
name|c
init|=
operator|new
name|ConnectListener
operator|.
name|Builder
argument_list|<
name|T
argument_list|>
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|asyncHandler
argument_list|,
name|f
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|configure
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|compareTo
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
operator|==
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|ChannelFuture
name|channelFuture
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|config
operator|.
name|getProxyServer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|channelFuture
operator|=
name|bootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|channelFuture
operator|=
name|bootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|config
operator|.
name|getProxyServer
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|config
operator|.
name|getProxyServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bootstrap
operator|.
name|setOption
argument_list|(
literal|"connectTimeout"
argument_list|,
operator|(
name|int
operator|)
name|config
operator|.
name|getConnectionTimeoutInMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|c
operator|.
name|future
argument_list|()
operator|.
name|abort
argument_list|(
name|t
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|future
argument_list|()
return|;
block|}
name|channelFuture
operator|.
name|addListener
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|openChannels
operator|.
name|add
argument_list|(
name|channelFuture
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|future
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|MessageEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
comment|/**          * Discard in memory bytes if the HttpContent.interrupt() has been invoked.          */
if|if
condition|(
name|ctx
operator|.
name|getAttachment
argument_list|()
operator|instanceof
name|DiscardEvent
condition|)
block|{
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
operator|(
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|getAttachment
argument_list|()
decl_stmt|;
name|HttpRequest
name|nettyRequest
init|=
name|future
operator|.
name|getNettyRequest
argument_list|()
decl_stmt|;
name|AsyncHandler
argument_list|<
name|?
argument_list|>
name|handler
init|=
name|future
operator|.
name|getAsyncHandler
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|instanceof
name|HttpResponse
condition|)
block|{
name|HttpResponse
name|response
init|=
operator|(
name|HttpResponse
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|// Required if there is some trailing headers.
name|future
operator|.
name|setHttpResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|String
name|ka
init|=
name|response
operator|.
name|getHeader
argument_list|(
literal|"Connection"
argument_list|)
decl_stmt|;
name|future
operator|.
name|setKeepAlive
argument_list|(
name|ka
operator|==
literal|null
operator|||
name|ka
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"keep-alive"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|isRedirectEnabled
argument_list|()
operator|&&
operator|(
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
operator|==
literal|302
operator|||
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
operator|==
literal|301
operator|)
condition|)
block|{
if|if
condition|(
name|future
operator|.
name|incrementAndGetCurrentRedirectCount
argument_list|()
operator|<
name|config
operator|.
name|getMaxRedirects
argument_list|()
condition|)
block|{
name|String
name|location
init|=
name|response
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|LOCATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|location
operator|=
name|future
operator|.
name|getUrl
argument_list|()
operator|.
name|getBaseUrl
argument_list|()
operator|+
name|location
expr_stmt|;
block|}
name|Url
name|url
init|=
name|createUrl
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|RequestBuilder
name|builder
init|=
operator|new
name|RequestBuilder
argument_list|(
name|future
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
name|future
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setAttachment
argument_list|(
operator|new
name|DiscardEvent
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|execute
argument_list|(
name|builder
operator|.
name|setUrl
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|future
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|MaxRedirectException
argument_list|(
literal|"Maximum redirect reached: "
operator|+
name|config
operator|.
name|getMaxRedirects
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Status: "
operator|+
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Version: "
operator|+
name|response
operator|.
name|getProtocolVersion
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|getHeaderNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|response
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Header: "
operator|+
name|name
operator|+
literal|" = "
operator|+
name|response
operator|.
name|getHeaders
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|updateStatusAndInterrupt
argument_list|(
name|handler
argument_list|,
operator|new
name|ResponseStatus
argument_list|(
name|future
operator|.
name|getUrl
argument_list|()
argument_list|,
name|response
argument_list|,
name|this
argument_list|)
argument_list|)
condition|)
block|{
name|finishUpdate
argument_list|(
name|future
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|updateHeadersAndInterrupt
argument_list|(
name|handler
argument_list|,
operator|new
name|ResponseHeaders
argument_list|(
name|future
operator|.
name|getUrl
argument_list|()
argument_list|,
name|response
argument_list|,
name|this
argument_list|)
argument_list|)
condition|)
block|{
name|finishUpdate
argument_list|(
name|future
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
operator|!
name|response
operator|.
name|isChunked
argument_list|()
condition|)
block|{
name|updateBodyAndInterrupt
argument_list|(
name|handler
argument_list|,
operator|new
name|ResponseBodyPart
argument_list|(
name|future
operator|.
name|getUrl
argument_list|()
argument_list|,
name|response
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|finishUpdate
argument_list|(
name|future
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
operator|!=
literal|200
operator|||
name|nettyRequest
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
name|HttpMethod
operator|.
name|HEAD
argument_list|)
condition|)
block|{
name|markAsDoneAndCacheConnection
argument_list|(
name|future
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|instanceof
name|HttpChunk
condition|)
block|{
name|HttpChunk
name|chunk
init|=
operator|(
name|HttpChunk
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|updateBodyAndInterrupt
argument_list|(
name|handler
argument_list|,
operator|new
name|ResponseBodyPart
argument_list|(
name|future
operator|.
name|getUrl
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
name|chunk
argument_list|)
argument_list|)
operator|||
name|chunk
operator|.
name|isLast
argument_list|()
condition|)
block|{
if|if
condition|(
name|chunk
operator|instanceof
name|HttpChunkTrailer
condition|)
block|{
name|updateHeadersAndInterrupt
argument_list|(
name|handler
argument_list|,
operator|new
name|ResponseHeaders
argument_list|(
name|future
operator|.
name|getUrl
argument_list|()
argument_list|,
name|future
operator|.
name|getHttpResponse
argument_list|()
argument_list|,
name|this
argument_list|,
operator|(
name|HttpChunkTrailer
operator|)
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|finishUpdate
argument_list|(
name|future
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|future
operator|.
name|abort
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|finishUpdate
argument_list|(
name|future
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
DECL|method|channelClosed
specifier|public
name|void
name|channelClosed
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ChannelStateEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Channel closed: "
operator|+
name|e
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isClose
operator|.
name|get
argument_list|()
operator|&&
name|ctx
operator|.
name|getAttachment
argument_list|()
operator|instanceof
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
operator|(
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|getAttachment
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
operator|&&
operator|!
name|future
operator|.
name|isDone
argument_list|()
operator|&&
operator|!
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|future
operator|.
name|getAsyncHandler
argument_list|()
operator|.
name|onThrowable
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"No response received. Connection timed out"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|removeFromCache
parameter_list|(
name|ctx
parameter_list|,
name|e
parameter_list|)
constructor_decl|;
name|ctx
operator|.
name|sendUpstream
parameter_list|(
name|e
parameter_list|)
constructor_decl|;
block|}
end_class

begin_function
DECL|method|removeFromCache
specifier|private
name|void
name|removeFromCache
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ChannelEvent
name|e
parameter_list|)
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|ctx
operator|.
name|getAttachment
argument_list|()
operator|instanceof
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
operator|(
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|getAttachment
argument_list|()
decl_stmt|;
name|connectionsPool
operator|.
name|remove
argument_list|(
name|future
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|markAsDoneAndCacheConnection
specifier|private
name|void
name|markAsDoneAndCacheConnection
parameter_list|(
specifier|final
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
name|future
parameter_list|,
specifier|final
name|Channel
name|channel
parameter_list|)
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|future
operator|.
name|getKeepAlive
argument_list|()
operator|&&
name|maxConnectionsPerHost
operator|++
operator|<
name|config
operator|.
name|getMaxConnectionPerHost
argument_list|()
condition|)
block|{
name|connectionsPool
operator|.
name|put
argument_list|(
name|future
operator|.
name|getUrl
argument_list|()
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectionsPool
operator|.
name|remove
argument_list|(
name|future
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|future
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|finishUpdate
specifier|private
name|void
name|finishUpdate
parameter_list|(
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
name|future
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|ctx
operator|.
name|setAttachment
argument_list|(
operator|new
name|DiscardEvent
argument_list|()
argument_list|)
expr_stmt|;
name|markAsDoneAndCacheConnection
argument_list|(
name|future
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Catch any unexpected exception when marking the channel.
try|try
block|{
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|updateStatusAndInterrupt
specifier|private
specifier|final
name|boolean
name|updateStatusAndInterrupt
parameter_list|(
name|AsyncHandler
name|handler
parameter_list|,
name|HttpResponseStatus
name|c
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|handler
operator|.
name|onStatusReceived
argument_list|(
name|c
argument_list|)
operator|==
name|STATE
operator|.
name|CONTINUE
condition|?
literal|false
else|:
literal|true
operator|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|updateHeadersAndInterrupt
specifier|private
specifier|final
name|boolean
name|updateHeadersAndInterrupt
parameter_list|(
name|AsyncHandler
name|handler
parameter_list|,
name|HttpResponseHeaders
name|c
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|handler
operator|.
name|onHeadersReceived
argument_list|(
name|c
argument_list|)
operator|==
name|STATE
operator|.
name|CONTINUE
condition|?
literal|false
else|:
literal|true
operator|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|updateBodyAndInterrupt
specifier|private
specifier|final
name|boolean
name|updateBodyAndInterrupt
parameter_list|(
name|AsyncHandler
name|handler
parameter_list|,
name|HttpResponseBodyPart
name|c
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|handler
operator|.
name|onBodyPartReceived
argument_list|(
name|c
argument_list|)
operator|==
name|STATE
operator|.
name|CONTINUE
condition|?
literal|false
else|:
literal|true
operator|)
return|;
block|}
end_function

begin_comment
comment|//Simple marker for stopping publishing bytes.
end_comment

begin_class
DECL|class|DiscardEvent
specifier|private
specifier|final
specifier|static
class|class
name|DiscardEvent
block|{     }
end_class

begin_comment
comment|//Simple marker for closed events
end_comment

begin_class
DECL|class|ClosedEvent
specifier|private
specifier|final
specifier|static
class|class
name|ClosedEvent
block|{     }
end_class

begin_function
annotation|@
name|Override
DECL|method|exceptionCaught
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|Channel
name|ch
init|=
name|e
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"I/O Exception during read or doConnect: "
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getAttachment
argument_list|()
operator|instanceof
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
operator|(
name|NettyResponseFuture
argument_list|<
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|getAttachment
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|getAsyncHandler
argument_list|()
operator|.
name|onThrowable
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_if
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|ch
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}      private
DECL|method|computeAndSetContentLength
specifier|final
specifier|static
name|int
name|computeAndSetContentLength
parameter_list|(
name|Request
name|request
parameter_list|,
name|HttpRequest
name|r
parameter_list|)
block|{
name|int
name|lenght
init|=
operator|(
name|int
operator|)
name|request
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|lenght
operator|==
operator|-
literal|1
operator|&&
name|r
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|lenght
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lenght
operator|!=
operator|-
literal|1
condition|)
block|{
name|r
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|lenght
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|lenght
return|;
block|}
end_function

begin_comment
comment|/**      * Map CommonsHttp Method to Netty Method.      *      * @param type      * @return      */
end_comment

begin_function
DECL|method|map
specifier|private
specifier|final
specifier|static
name|HttpMethod
name|map
parameter_list|(
name|RequestType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GET
case|:
return|return
name|HttpMethod
operator|.
name|GET
return|;
case|case
name|POST
case|:
return|return
name|HttpMethod
operator|.
name|POST
return|;
case|case
name|DELETE
case|:
return|return
name|HttpMethod
operator|.
name|DELETE
return|;
case|case
name|PUT
case|:
return|return
name|HttpMethod
operator|.
name|PUT
return|;
case|case
name|HEAD
case|:
return|return
name|HttpMethod
operator|.
name|HEAD
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
end_function

begin_comment
comment|/**      * This is quite ugly as our internal names are duplicated, but we build on top of HTTP Client implementation.      *      * @param params      * @param methodParams      * @return      * @throws java.io.FileNotFoundException      */
end_comment

begin_function
DECL|method|createMultipartRequestEntity
specifier|private
specifier|final
specifier|static
name|MultipartRequestEntity
name|createMultipartRequestEntity
parameter_list|(
name|List
argument_list|<
name|Part
argument_list|>
name|params
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|methodParams
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
operator|.
name|Part
index|[]
name|parts
init|=
operator|new
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
operator|.
name|Part
index|[
name|params
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Part
name|part
range|:
name|params
control|)
block|{
if|if
condition|(
name|part
operator|instanceof
name|StringPart
condition|)
block|{
name|parts
index|[
name|i
index|]
operator|=
operator|new
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
operator|.
name|StringPart
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
operator|(
name|StringPart
operator|)
name|part
operator|)
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|instanceof
name|FilePart
condition|)
block|{
name|parts
index|[
name|i
index|]
operator|=
operator|new
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
operator|.
name|FilePart
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
operator|(
name|FilePart
operator|)
name|part
operator|)
operator|.
name|getFile
argument_list|()
argument_list|,
operator|(
operator|(
name|FilePart
operator|)
name|part
operator|)
operator|.
name|getMimeType
argument_list|()
argument_list|,
operator|(
operator|(
name|FilePart
operator|)
name|part
operator|)
operator|.
name|getCharSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|instanceof
name|ByteArrayPart
condition|)
block|{
name|PartSource
name|source
init|=
operator|new
name|ByteArrayPartSource
argument_list|(
operator|(
operator|(
name|ByteArrayPart
operator|)
name|part
operator|)
operator|.
name|getFileName
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteArrayPart
operator|)
name|part
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|parts
index|[
name|i
index|]
operator|=
operator|new
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
operator|.
name|FilePart
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|source
argument_list|,
operator|(
operator|(
name|ByteArrayPart
operator|)
name|part
operator|)
operator|.
name|getMimeType
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteArrayPart
operator|)
name|part
operator|)
operator|.
name|getCharSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Part cannot be null"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported part type for multipart parameter %s"
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
operator|new
name|MultipartRequestEntity
argument_list|(
name|parts
argument_list|,
name|methodParams
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

