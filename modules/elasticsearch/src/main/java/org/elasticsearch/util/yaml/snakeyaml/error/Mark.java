begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.error
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|scanner
operator|.
name|Constant
import|;
end_import

begin_comment
comment|/**  * It's just a record and its only use is producing nice error messages. Parser  * does not use it for any other purposes.  *  * @see<a href="http://pyyaml.org/wiki/PyYAML">PyYAML</a> for more information  */
end_comment

begin_class
DECL|class|Mark
specifier|public
specifier|final
class|class
name|Mark
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|line
specifier|private
name|int
name|line
decl_stmt|;
DECL|field|column
specifier|private
name|int
name|column
decl_stmt|;
DECL|field|buffer
specifier|private
name|String
name|buffer
decl_stmt|;
DECL|field|pointer
specifier|private
name|int
name|pointer
decl_stmt|;
DECL|method|Mark
specifier|public
name|Mark
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|column
parameter_list|,
name|String
name|buffer
parameter_list|,
name|int
name|pointer
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|line
operator|=
name|line
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|pointer
operator|=
name|pointer
expr_stmt|;
block|}
DECL|method|isLineBreak
specifier|private
name|boolean
name|isLineBreak
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
name|Constant
operator|.
name|NULL_OR_LINEBR
operator|.
name|has
argument_list|(
name|ch
argument_list|)
return|;
block|}
DECL|method|get_snippet
specifier|public
name|String
name|get_snippet
parameter_list|(
name|int
name|indent
parameter_list|,
name|int
name|max_length
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|float
name|half
init|=
name|max_length
operator|/
literal|2
operator|-
literal|1
decl_stmt|;
name|int
name|start
init|=
name|pointer
decl_stmt|;
name|String
name|head
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|(
name|start
operator|>
literal|0
operator|)
operator|&&
operator|(
operator|!
name|isLineBreak
argument_list|(
name|buffer
operator|.
name|charAt
argument_list|(
name|start
operator|-
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|start
operator|-=
literal|1
expr_stmt|;
if|if
condition|(
name|pointer
operator|-
name|start
operator|>
name|half
condition|)
block|{
name|head
operator|=
literal|" ... "
expr_stmt|;
name|start
operator|+=
literal|5
expr_stmt|;
break|break;
block|}
block|}
name|String
name|tail
init|=
literal|""
decl_stmt|;
name|int
name|end
init|=
name|pointer
decl_stmt|;
while|while
condition|(
operator|(
name|end
operator|<
name|buffer
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|isLineBreak
argument_list|(
name|buffer
operator|.
name|charAt
argument_list|(
name|end
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|end
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|end
operator|-
name|pointer
operator|>
name|half
condition|)
block|{
name|tail
operator|=
literal|" ... "
expr_stmt|;
name|end
operator|-=
literal|5
expr_stmt|;
break|break;
block|}
block|}
name|String
name|snippet
init|=
name|buffer
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|snippet
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|tail
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
operator|+
name|pointer
operator|-
name|start
operator|+
name|head
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|"^"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|get_snippet
specifier|public
name|String
name|get_snippet
parameter_list|()
block|{
return|return
name|get_snippet
argument_list|(
literal|4
argument_list|,
literal|75
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|snippet
init|=
name|get_snippet
argument_list|()
decl_stmt|;
name|StringBuilder
name|where
init|=
operator|new
name|StringBuilder
argument_list|(
literal|" in \""
argument_list|)
decl_stmt|;
name|where
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|where
operator|.
name|append
argument_list|(
literal|"\", line "
argument_list|)
expr_stmt|;
name|where
operator|.
name|append
argument_list|(
name|line
operator|+
literal|1
argument_list|)
expr_stmt|;
name|where
operator|.
name|append
argument_list|(
literal|", column "
argument_list|)
expr_stmt|;
name|where
operator|.
name|append
argument_list|(
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|snippet
operator|!=
literal|null
condition|)
block|{
name|where
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
name|where
operator|.
name|append
argument_list|(
name|snippet
argument_list|)
expr_stmt|;
block|}
return|return
name|where
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * starts with 0      */
DECL|method|getLine
specifier|public
name|int
name|getLine
parameter_list|()
block|{
return|return
name|line
return|;
block|}
comment|/**      * starts with 0      */
DECL|method|getColumn
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
block|}
end_class

end_unit

