begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.nodes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|Mark
import|;
end_import

begin_comment
comment|/**  * Represents a scalar node.  *<p>  * Scalar nodes form the leaves in the node graph.  *</p>  */
end_comment

begin_class
DECL|class|ScalarNode
specifier|public
class|class
name|ScalarNode
extends|extends
name|YamlNode
block|{
DECL|field|style
specifier|private
name|Character
name|style
decl_stmt|;
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
DECL|method|ScalarNode
specifier|public
name|ScalarNode
parameter_list|(
name|Tag
name|tag
parameter_list|,
name|String
name|value
parameter_list|,
name|Mark
name|startMark
parameter_list|,
name|Mark
name|endMark
parameter_list|,
name|Character
name|style
parameter_list|)
block|{
name|this
argument_list|(
name|tag
argument_list|,
literal|true
argument_list|,
name|value
argument_list|,
name|startMark
argument_list|,
name|endMark
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
DECL|method|ScalarNode
specifier|public
name|ScalarNode
parameter_list|(
name|Tag
name|tag
parameter_list|,
name|boolean
name|resolved
parameter_list|,
name|String
name|value
parameter_list|,
name|Mark
name|startMark
parameter_list|,
name|Mark
name|endMark
parameter_list|,
name|Character
name|style
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|,
name|startMark
argument_list|,
name|endMark
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"value in a Node is required."
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|style
operator|=
name|style
expr_stmt|;
name|this
operator|.
name|resolved
operator|=
name|resolved
expr_stmt|;
block|}
comment|/**      * Get scalar style of this node.      *      * @return      * @see org.elasticsearch.util.yaml.snakeyaml.events.ScalarEvent      * @see http://yaml.org/spec/1.1/#id864487      */
DECL|method|getStyle
specifier|public
name|Character
name|getStyle
parameter_list|()
block|{
return|return
name|style
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeId
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|NodeId
operator|.
name|scalar
return|;
block|}
comment|/**      * Value of this scalar.      *      * @return Scalar's value.      */
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" (tag="
operator|+
name|getTag
argument_list|()
operator|+
literal|", value="
operator|+
name|getValue
argument_list|()
operator|+
literal|")>"
return|;
block|}
block|}
end_class

end_unit

