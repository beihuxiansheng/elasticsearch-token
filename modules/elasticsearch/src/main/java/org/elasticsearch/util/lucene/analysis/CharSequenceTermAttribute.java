begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.lucene.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_comment
comment|// LUCENE MONITOR: Once 3.1 is out, no need for this class anymore, use CharTermAttribute
end_comment

begin_class
DECL|class|CharSequenceTermAttribute
specifier|public
class|class
name|CharSequenceTermAttribute
implements|implements
name|CharSequence
block|{
DECL|field|termAtt
specifier|private
specifier|final
name|TermAttribute
name|termAtt
decl_stmt|;
DECL|method|CharSequenceTermAttribute
specifier|public
name|CharSequenceTermAttribute
parameter_list|(
name|TermAttribute
name|termAtt
parameter_list|)
block|{
name|this
operator|.
name|termAtt
operator|=
name|termAtt
expr_stmt|;
block|}
DECL|method|length
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|termAtt
operator|.
name|termLength
argument_list|()
return|;
block|}
DECL|method|charAt
annotation|@
name|Override
specifier|public
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|length
argument_list|()
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
return|return
name|termAtt
operator|.
name|termBuffer
argument_list|()
index|[
name|index
index|]
return|;
block|}
DECL|method|subSequence
annotation|@
name|Override
specifier|public
name|CharSequence
name|subSequence
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
if|if
condition|(
name|start
operator|>
name|length
argument_list|()
operator|||
name|end
operator|>
name|length
argument_list|()
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
return|return
operator|new
name|String
argument_list|(
name|termAtt
operator|.
name|termBuffer
argument_list|()
argument_list|,
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
return|;
block|}
block|}
end_class

end_unit

