begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.reader
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|reader
package|;
end_package

begin_comment
comment|/**  version: 1.1 / 2007-01-25  - changed BOM recognition ordering (longer boms first)   Original pseudocode   : Thomas Weidenfeller  Implementation tweaked: Aki Nieminen  Implementation changed: Andrey Somov   * UTF-32 removed because it is not supported by YAML  * no default encoding   http://www.unicode.org/unicode/faq/utf_bom.html  BOMs:  00 00 FE FF    = UTF-32, big-endian  FF FE 00 00    = UTF-32, little-endian  EF BB BF       = UTF-8,  FE FF          = UTF-16, big-endian  FF FE          = UTF-16, little-endian   Win2k Notepad:  Unicode format = UTF-16LE  ***/
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Generic unicode textreader, which will use BOM mark to identify the encoding  * to be used. If BOM is not found then use a given default or system encoding.  */
end_comment

begin_class
DECL|class|UnicodeReader
specifier|public
class|class
name|UnicodeReader
extends|extends
name|Reader
block|{
DECL|field|internalIn
name|PushbackInputStream
name|internalIn
decl_stmt|;
DECL|field|internalIn2
name|InputStreamReader
name|internalIn2
init|=
literal|null
decl_stmt|;
DECL|field|BOM_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BOM_SIZE
init|=
literal|3
decl_stmt|;
comment|/**      * @param in InputStream to be read      */
DECL|method|UnicodeReader
specifier|public
name|UnicodeReader
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|internalIn
operator|=
operator|new
name|PushbackInputStream
argument_list|(
name|in
argument_list|,
name|BOM_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get stream encoding or NULL if stream is uninitialized. Call init() or      * read() method to initialize it.      */
DECL|method|getEncoding
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|internalIn2
operator|.
name|getEncoding
argument_list|()
return|;
block|}
comment|/**      * Read-ahead four bytes and check for BOM marks. Extra bytes are unread      * back to the stream, only BOM bytes are skipped.      */
DECL|method|init
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|internalIn2
operator|!=
literal|null
condition|)
return|return;
name|String
name|encoding
decl_stmt|;
name|byte
name|bom
index|[]
init|=
operator|new
name|byte
index|[
name|BOM_SIZE
index|]
decl_stmt|;
name|int
name|n
decl_stmt|,
name|unread
decl_stmt|;
name|n
operator|=
name|internalIn
operator|.
name|read
argument_list|(
name|bom
argument_list|,
literal|0
argument_list|,
name|bom
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|bom
index|[
literal|0
index|]
operator|==
operator|(
name|byte
operator|)
literal|0xEF
operator|)
operator|&&
operator|(
name|bom
index|[
literal|1
index|]
operator|==
operator|(
name|byte
operator|)
literal|0xBB
operator|)
operator|&&
operator|(
name|bom
index|[
literal|2
index|]
operator|==
operator|(
name|byte
operator|)
literal|0xBF
operator|)
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
name|unread
operator|=
name|n
operator|-
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|bom
index|[
literal|0
index|]
operator|==
operator|(
name|byte
operator|)
literal|0xFE
operator|)
operator|&&
operator|(
name|bom
index|[
literal|1
index|]
operator|==
operator|(
name|byte
operator|)
literal|0xFF
operator|)
condition|)
block|{
name|encoding
operator|=
literal|"UTF-16BE"
expr_stmt|;
name|unread
operator|=
name|n
operator|-
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|bom
index|[
literal|0
index|]
operator|==
operator|(
name|byte
operator|)
literal|0xFF
operator|)
operator|&&
operator|(
name|bom
index|[
literal|1
index|]
operator|==
operator|(
name|byte
operator|)
literal|0xFE
operator|)
condition|)
block|{
name|encoding
operator|=
literal|"UTF-16LE"
expr_stmt|;
name|unread
operator|=
name|n
operator|-
literal|2
expr_stmt|;
block|}
else|else
block|{
comment|// Unicode BOM mark not found, unread all bytes
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
name|unread
operator|=
name|n
expr_stmt|;
block|}
if|if
condition|(
name|unread
operator|>
literal|0
condition|)
name|internalIn
operator|.
name|unread
argument_list|(
name|bom
argument_list|,
operator|(
name|n
operator|-
name|unread
operator|)
argument_list|,
name|unread
argument_list|)
expr_stmt|;
comment|// Use given encoding
name|internalIn2
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|internalIn
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|internalIn2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|internalIn2
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
end_class

end_unit

