begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.scanner
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|scanner
package|;
end_package

begin_class
DECL|class|Constant
specifier|public
specifier|final
class|class
name|Constant
block|{
DECL|field|LINEBR_S
specifier|private
specifier|final
specifier|static
name|String
name|LINEBR_S
init|=
literal|"\n\u0085\u2028\u2029"
decl_stmt|;
DECL|field|FULL_LINEBR_S
specifier|private
specifier|final
specifier|static
name|String
name|FULL_LINEBR_S
init|=
literal|"\r"
operator|+
name|LINEBR_S
decl_stmt|;
DECL|field|NULL_OR_LINEBR_S
specifier|private
specifier|final
specifier|static
name|String
name|NULL_OR_LINEBR_S
init|=
literal|"\0"
operator|+
name|FULL_LINEBR_S
decl_stmt|;
DECL|field|NULL_BL_LINEBR_S
specifier|private
specifier|final
specifier|static
name|String
name|NULL_BL_LINEBR_S
init|=
literal|" "
operator|+
name|NULL_OR_LINEBR_S
decl_stmt|;
DECL|field|NULL_BL_T_LINEBR_S
specifier|private
specifier|final
specifier|static
name|String
name|NULL_BL_T_LINEBR_S
init|=
literal|"\t"
operator|+
name|NULL_BL_LINEBR_S
decl_stmt|;
DECL|field|LINEBR
specifier|public
specifier|final
specifier|static
name|Constant
name|LINEBR
init|=
operator|new
name|Constant
argument_list|(
name|LINEBR_S
argument_list|)
decl_stmt|;
DECL|field|FULL_LINEBR
specifier|public
specifier|final
specifier|static
name|Constant
name|FULL_LINEBR
init|=
operator|new
name|Constant
argument_list|(
name|FULL_LINEBR_S
argument_list|)
decl_stmt|;
DECL|field|NULL_OR_LINEBR
specifier|public
specifier|final
specifier|static
name|Constant
name|NULL_OR_LINEBR
init|=
operator|new
name|Constant
argument_list|(
name|NULL_OR_LINEBR_S
argument_list|)
decl_stmt|;
DECL|field|NULL_BL_LINEBR
specifier|public
specifier|final
specifier|static
name|Constant
name|NULL_BL_LINEBR
init|=
operator|new
name|Constant
argument_list|(
name|NULL_BL_LINEBR_S
argument_list|)
decl_stmt|;
DECL|field|NULL_BL_T_LINEBR
specifier|public
specifier|final
specifier|static
name|Constant
name|NULL_BL_T_LINEBR
init|=
operator|new
name|Constant
argument_list|(
name|NULL_BL_T_LINEBR_S
argument_list|)
decl_stmt|;
DECL|field|content
specifier|private
name|String
name|content
decl_stmt|;
DECL|method|Constant
specifier|private
name|Constant
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
DECL|method|has
specifier|public
name|boolean
name|has
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
name|content
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
DECL|method|hasNo
specifier|public
name|boolean
name|hasNo
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
operator|!
name|has
argument_list|(
name|ch
argument_list|)
return|;
block|}
DECL|method|has
specifier|public
name|boolean
name|has
parameter_list|(
name|char
name|ch
parameter_list|,
name|String
name|additional
parameter_list|)
block|{
return|return
name|additional
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|!=
operator|-
literal|1
operator|||
name|content
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
DECL|method|hasNo
specifier|public
name|boolean
name|hasNo
parameter_list|(
name|char
name|ch
parameter_list|,
name|String
name|additional
parameter_list|)
block|{
return|return
operator|!
name|has
argument_list|(
name|ch
argument_list|,
name|additional
argument_list|)
return|;
block|}
block|}
end_class

end_unit

