begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2006 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.inject.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_comment
comment|/**  * Creates stack trace elements for members.  *  * @author crazybob@google.com (Bob Lee)  */
end_comment

begin_class
DECL|class|StackTraceElements
specifier|public
class|class
name|StackTraceElements
block|{
DECL|method|forMember
specifier|public
specifier|static
name|Object
name|forMember
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
if|if
condition|(
name|member
operator|==
literal|null
condition|)
block|{
return|return
name|SourceProvider
operator|.
name|UNKNOWN_SOURCE
return|;
block|}
name|Class
name|declaringClass
init|=
name|member
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
literal|null
decl_stmt|;
name|int
name|lineNumber
init|=
operator|-
literal|1
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Member
argument_list|>
name|memberType
init|=
name|MoreTypes
operator|.
name|memberType
argument_list|(
name|member
argument_list|)
decl_stmt|;
name|String
name|memberName
init|=
name|memberType
operator|==
name|Constructor
operator|.
name|class
condition|?
literal|"<init>"
else|:
name|member
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|new
name|StackTraceElement
argument_list|(
name|declaringClass
operator|.
name|getName
argument_list|()
argument_list|,
name|memberName
argument_list|,
name|fileName
argument_list|,
name|lineNumber
argument_list|)
return|;
block|}
DECL|method|forType
specifier|public
specifier|static
name|Object
name|forType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implementation
parameter_list|)
block|{
name|String
name|fileName
init|=
literal|null
decl_stmt|;
name|int
name|lineNumber
init|=
operator|-
literal|1
decl_stmt|;
return|return
operator|new
name|StackTraceElement
argument_list|(
name|implementation
operator|.
name|getName
argument_list|()
argument_list|,
literal|"class"
argument_list|,
name|fileName
argument_list|,
name|lineNumber
argument_list|)
return|;
block|}
block|}
end_class

end_unit

