begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|TimeValue
specifier|public
class|class
name|TimeValue
implements|implements
name|Serializable
implements|,
name|Streamable
block|{
DECL|field|UNKNOWN
specifier|public
specifier|static
specifier|final
name|TimeValue
name|UNKNOWN
init|=
operator|new
name|TimeValue
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|method|timeValueMillis
specifier|public
specifier|static
name|TimeValue
name|timeValueMillis
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|millis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
DECL|method|timeValueSeconds
specifier|public
specifier|static
name|TimeValue
name|timeValueSeconds
parameter_list|(
name|long
name|seconds
parameter_list|)
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|seconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|timeValueMinutes
specifier|public
specifier|static
name|TimeValue
name|timeValueMinutes
parameter_list|(
name|long
name|minutes
parameter_list|)
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|minutes
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
return|;
block|}
DECL|method|timeValueHours
specifier|public
specifier|static
name|TimeValue
name|timeValueHours
parameter_list|(
name|long
name|hours
parameter_list|)
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|hours
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
return|;
block|}
DECL|field|duration
specifier|private
name|long
name|duration
decl_stmt|;
DECL|field|timeUnit
specifier|private
name|TimeUnit
name|timeUnit
decl_stmt|;
DECL|method|TimeValue
specifier|private
name|TimeValue
parameter_list|()
block|{      }
DECL|method|TimeValue
specifier|public
name|TimeValue
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
name|this
argument_list|(
name|millis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|TimeValue
specifier|public
name|TimeValue
parameter_list|(
name|long
name|duration
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
block|}
DECL|method|nanos
specifier|public
name|long
name|nanos
parameter_list|()
block|{
return|return
name|timeUnit
operator|.
name|toNanos
argument_list|(
name|duration
argument_list|)
return|;
block|}
DECL|method|micros
specifier|public
name|long
name|micros
parameter_list|()
block|{
return|return
name|timeUnit
operator|.
name|toMicros
argument_list|(
name|duration
argument_list|)
return|;
block|}
DECL|method|millis
specifier|public
name|long
name|millis
parameter_list|()
block|{
return|return
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|duration
argument_list|)
return|;
block|}
DECL|method|seconds
specifier|public
name|long
name|seconds
parameter_list|()
block|{
return|return
name|timeUnit
operator|.
name|toSeconds
argument_list|(
name|duration
argument_list|)
return|;
block|}
DECL|method|minutes
specifier|public
name|long
name|minutes
parameter_list|()
block|{
return|return
name|timeUnit
operator|.
name|toMinutes
argument_list|(
name|duration
argument_list|)
return|;
block|}
DECL|method|hours
specifier|public
name|long
name|hours
parameter_list|()
block|{
return|return
name|timeUnit
operator|.
name|toHours
argument_list|(
name|duration
argument_list|)
return|;
block|}
DECL|method|days
specifier|public
name|long
name|days
parameter_list|()
block|{
return|return
name|timeUnit
operator|.
name|toDays
argument_list|(
name|duration
argument_list|)
return|;
block|}
DECL|method|microsFrac
specifier|public
name|double
name|microsFrac
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|nanos
argument_list|()
operator|)
operator|/
name|C1
return|;
block|}
DECL|method|millisFrac
specifier|public
name|double
name|millisFrac
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|nanos
argument_list|()
operator|)
operator|/
name|C2
return|;
block|}
DECL|method|secondsFrac
specifier|public
name|double
name|secondsFrac
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|nanos
argument_list|()
operator|)
operator|/
name|C3
return|;
block|}
DECL|method|minutesFrac
specifier|public
name|double
name|minutesFrac
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|nanos
argument_list|()
operator|)
operator|/
name|C4
return|;
block|}
DECL|method|hoursFrac
specifier|public
name|double
name|hoursFrac
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|nanos
argument_list|()
operator|)
operator|/
name|C5
return|;
block|}
DECL|method|daysFrac
specifier|public
name|double
name|daysFrac
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|nanos
argument_list|()
operator|)
operator|/
name|C6
return|;
block|}
DECL|method|toString
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|long
name|nanos
init|=
name|nanos
argument_list|()
decl_stmt|;
if|if
condition|(
name|nanos
operator|==
literal|0
condition|)
block|{
return|return
literal|"0s"
return|;
block|}
name|double
name|value
init|=
name|nanos
decl_stmt|;
name|String
name|suffix
init|=
literal|"nanos"
decl_stmt|;
if|if
condition|(
name|nanos
operator|>=
name|C6
condition|)
block|{
name|value
operator|=
name|daysFrac
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|"d"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nanos
operator|>=
name|C5
condition|)
block|{
name|value
operator|=
name|hoursFrac
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|"h"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nanos
operator|>=
name|C4
condition|)
block|{
name|value
operator|=
name|minutesFrac
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|"m"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nanos
operator|>=
name|C3
condition|)
block|{
name|value
operator|=
name|secondsFrac
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|"s"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nanos
operator|>=
name|C2
condition|)
block|{
name|value
operator|=
name|millisFrac
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|"ms"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nanos
operator|>=
name|C1
condition|)
block|{
name|value
operator|=
name|microsFrac
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|"micros"
expr_stmt|;
block|}
return|return
name|Strings
operator|.
name|format1Decimals
argument_list|(
name|value
argument_list|,
name|suffix
argument_list|)
return|;
block|}
DECL|method|parseTimeValue
specifier|public
specifier|static
name|TimeValue
name|parseTimeValue
parameter_list|(
name|String
name|sValue
parameter_list|,
name|TimeValue
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
name|long
name|millis
decl_stmt|;
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|millis
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"ms"
argument_list|)
condition|)
block|{
name|millis
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|"ms"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|millis
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|millis
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"H"
argument_list|)
condition|)
block|{
name|millis
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|millis
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sValue
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TimeValue
argument_list|(
name|millis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchParseException
argument_list|(
literal|"Failed to parse ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|C0
specifier|static
specifier|final
name|long
name|C0
init|=
literal|1L
decl_stmt|;
DECL|field|C1
specifier|static
specifier|final
name|long
name|C1
init|=
name|C0
operator|*
literal|1000L
decl_stmt|;
DECL|field|C2
specifier|static
specifier|final
name|long
name|C2
init|=
name|C1
operator|*
literal|1000L
decl_stmt|;
DECL|field|C3
specifier|static
specifier|final
name|long
name|C3
init|=
name|C2
operator|*
literal|1000L
decl_stmt|;
DECL|field|C4
specifier|static
specifier|final
name|long
name|C4
init|=
name|C3
operator|*
literal|60L
decl_stmt|;
DECL|field|C5
specifier|static
specifier|final
name|long
name|C5
init|=
name|C4
operator|*
literal|60L
decl_stmt|;
DECL|field|C6
specifier|static
specifier|final
name|long
name|C6
init|=
name|C5
operator|*
literal|24L
decl_stmt|;
DECL|method|readTimeValue
specifier|public
specifier|static
name|TimeValue
name|readTimeValue
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|TimeValue
name|timeValue
init|=
operator|new
name|TimeValue
argument_list|()
decl_stmt|;
name|timeValue
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|timeValue
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|duration
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|NANOSECONDS
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|nanos
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|equals
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TimeValue
name|timeValue
init|=
operator|(
name|TimeValue
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|duration
operator|!=
name|timeValue
operator|.
name|duration
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|timeUnit
operator|!=
name|timeValue
operator|.
name|timeUnit
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|hashCode
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
call|(
name|int
call|)
argument_list|(
name|duration
operator|^
operator|(
name|duration
operator|>>>
literal|32
operator|)
argument_list|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|timeUnit
operator|!=
literal|null
condition|?
name|timeUnit
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

