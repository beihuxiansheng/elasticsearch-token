begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.client.providers
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|collection
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|url
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBufferInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Wrapper around the {@link org.elasticsearch.util.http.client.Response} API.  */
end_comment

begin_class
DECL|class|NettyAsyncResponse
specifier|public
class|class
name|NettyAsyncResponse
implements|implements
name|Response
block|{
DECL|field|url
specifier|private
specifier|final
name|Url
name|url
decl_stmt|;
DECL|field|bodyParts
specifier|private
specifier|final
name|Collection
argument_list|<
name|HttpResponseBodyPart
argument_list|<
name|HttpResponse
argument_list|>
argument_list|>
name|bodyParts
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|HttpResponseHeaders
argument_list|<
name|HttpResponse
argument_list|>
name|headers
decl_stmt|;
DECL|field|status
specifier|private
specifier|final
name|HttpResponseStatus
argument_list|<
name|HttpResponse
argument_list|>
name|status
decl_stmt|;
DECL|field|cookies
specifier|private
specifier|final
name|List
argument_list|<
name|Cookie
argument_list|>
name|cookies
init|=
operator|new
name|ArrayList
argument_list|<
name|Cookie
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|NettyAsyncResponse
specifier|public
name|NettyAsyncResponse
parameter_list|(
name|HttpResponseStatus
argument_list|<
name|HttpResponse
argument_list|>
name|status
parameter_list|,
name|HttpResponseHeaders
argument_list|<
name|HttpResponse
argument_list|>
name|headers
parameter_list|,
name|Collection
argument_list|<
name|HttpResponseBodyPart
argument_list|<
name|HttpResponse
argument_list|>
argument_list|>
name|bodyParts
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
name|this
operator|.
name|bodyParts
operator|=
name|bodyParts
expr_stmt|;
name|url
operator|=
name|status
operator|.
name|getUrl
argument_list|()
expr_stmt|;
block|}
comment|/* @Override */
DECL|method|getStatusCode
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|status
operator|.
name|getStatusCode
argument_list|()
return|;
block|}
comment|/* @Override */
DECL|method|getStatusText
specifier|public
name|String
name|getStatusText
parameter_list|()
block|{
return|return
name|status
operator|.
name|getStatusText
argument_list|()
return|;
block|}
comment|/* @Override */
DECL|method|getResponseBody
specifier|public
name|String
name|getResponseBody
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|contentType
init|=
name|getContentType
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
literal|"UTF-8"
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|part
range|:
name|contentType
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
literal|"charset="
argument_list|)
condition|)
block|{
name|charset
operator|=
name|part
operator|.
name|substring
argument_list|(
literal|"charset="
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|contentToString
argument_list|(
name|charset
argument_list|)
return|;
block|}
DECL|method|contentToString
name|String
name|contentToString
parameter_list|(
name|String
name|charset
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HttpResponseBodyPart
argument_list|<
name|?
argument_list|>
name|bp
range|:
name|bodyParts
control|)
block|{
name|b
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|bp
operator|.
name|getBodyPartBytes
argument_list|()
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* @Override */
DECL|method|getResponseBodyAsStream
specifier|public
name|InputStream
name|getResponseBodyAsStream
parameter_list|()
throws|throws
name|IOException
block|{
name|ChannelBuffer
name|buf
init|=
name|ChannelBuffers
operator|.
name|dynamicBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|HttpResponseBodyPart
argument_list|<
name|?
argument_list|>
name|bp
range|:
name|bodyParts
control|)
block|{
comment|// Ugly. TODO
comment|// (1) We must remove the downcast,
comment|// (2) we need a CompositeByteArrayInputStream to avoid
comment|// copying the bytes.
if|if
condition|(
name|bp
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|ResponseBodyPart
operator|.
name|class
argument_list|)
condition|)
block|{
name|buf
operator|.
name|writeBytes
argument_list|(
name|bp
operator|.
name|getBodyPartBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ChannelBufferInputStream
argument_list|(
name|buf
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|getResponseBodyExcerpt
specifier|public
name|String
name|getResponseBodyExcerpt
parameter_list|(
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|contentType
init|=
name|getContentType
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
literal|"UTF-8"
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|part
range|:
name|contentType
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
literal|"charset="
argument_list|)
condition|)
block|{
name|charset
operator|=
name|part
operator|.
name|substring
argument_list|(
literal|"charset="
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|response
init|=
name|contentToString
argument_list|(
name|charset
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|length
argument_list|()
operator|<=
name|maxLength
condition|?
name|response
else|:
name|response
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|getUrl
specifier|public
name|Url
name|getUrl
parameter_list|()
throws|throws
name|MalformedURLException
block|{
return|return
name|url
return|;
block|}
comment|/* @Override */
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|headers
operator|.
name|getHeaders
argument_list|()
operator|.
name|getHeaderValue
argument_list|(
literal|"Content-Type"
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|getHeader
specifier|public
name|String
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|headers
operator|.
name|getHeaders
argument_list|()
operator|.
name|getHeaderValue
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|getHeaders
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getHeaders
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|headers
operator|.
name|getHeaders
argument_list|()
operator|.
name|getHeaderValues
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/* @Override */
DECL|method|getHeaders
specifier|public
name|Headers
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
operator|.
name|getHeaders
argument_list|()
return|;
block|}
comment|/* @Override */
DECL|method|isRedirected
specifier|public
name|boolean
name|isRedirected
parameter_list|()
block|{
return|return
operator|(
name|status
operator|.
name|getStatusCode
argument_list|()
operator|>=
literal|300
operator|)
operator|&&
operator|(
name|status
operator|.
name|getStatusCode
argument_list|()
operator|<=
literal|399
operator|)
return|;
block|}
comment|/* @Override */
DECL|method|getCookies
specifier|public
name|List
argument_list|<
name|Cookie
argument_list|>
name|getCookies
parameter_list|()
block|{
if|if
condition|(
name|cookies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|i
init|=
name|headers
operator|.
name|getHeaders
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|p
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getFirst
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Set-Cookie"
argument_list|)
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|p
operator|.
name|getSecond
argument_list|()
operator|.
name|split
argument_list|(
literal|";\\s*"
argument_list|)
decl_stmt|;
name|String
index|[]
name|cookieValue
init|=
name|fields
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|cookieValue
index|[
literal|0
index|]
decl_stmt|;
name|String
name|value
init|=
name|cookieValue
index|[
literal|1
index|]
decl_stmt|;
name|String
name|expires
init|=
literal|"-1"
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
name|String
name|domain
init|=
literal|null
decl_stmt|;
name|boolean
name|secure
init|=
literal|false
decl_stmt|;
comment|// Parse each field
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|fields
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
literal|"secure"
operator|.
name|equalsIgnoreCase
argument_list|(
name|fields
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|secure
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fields
index|[
name|j
index|]
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|f
init|=
name|fields
index|[
name|j
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"expires"
operator|.
name|equalsIgnoreCase
argument_list|(
name|f
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|expires
operator|=
name|f
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"domain"
operator|.
name|equalsIgnoreCase
argument_list|(
name|f
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|domain
operator|=
name|f
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"path"
operator|.
name|equalsIgnoreCase
argument_list|(
name|f
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|path
operator|=
name|f
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
name|cookies
operator|.
name|add
argument_list|(
operator|new
name|Cookie
argument_list|(
name|domain
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|path
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|expires
argument_list|)
argument_list|,
name|secure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|cookies
argument_list|)
return|;
block|}
block|}
end_class

end_unit

