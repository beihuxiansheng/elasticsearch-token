begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.constructor
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|constructor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|YAMLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|util
operator|.
name|Base64Coder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Construct standard Java classes  *  * @see<a href="http://pyyaml.org/wiki/PyYAML">PyYAML</a> for more information  */
end_comment

begin_class
DECL|class|SafeConstructor
specifier|public
class|class
name|SafeConstructor
extends|extends
name|BaseConstructor
block|{
DECL|field|undefinedConstructor
specifier|public
specifier|static
name|ConstructUndefined
name|undefinedConstructor
init|=
operator|new
name|ConstructUndefined
argument_list|()
decl_stmt|;
DECL|method|SafeConstructor
specifier|public
name|SafeConstructor
parameter_list|()
block|{
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|NULL
argument_list|,
operator|new
name|ConstructYamlNull
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|BOOL
argument_list|,
operator|new
name|ConstructYamlBool
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|INT
argument_list|,
operator|new
name|ConstructYamlInt
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|FLOAT
argument_list|,
operator|new
name|ConstructYamlFloat
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|BINARY
argument_list|,
operator|new
name|ConstructYamlBinary
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|ConstructYamlTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|OMAP
argument_list|,
operator|new
name|ConstructYamlOmap
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|PAIRS
argument_list|,
operator|new
name|ConstructYamlPairs
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|SET
argument_list|,
operator|new
name|ConstructYamlSet
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|STR
argument_list|,
operator|new
name|ConstructYamlStr
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|SEQ
argument_list|,
operator|new
name|ConstructYamlSeq
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
name|Tag
operator|.
name|MAP
argument_list|,
operator|new
name|ConstructYamlMap
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlConstructors
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|undefinedConstructor
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlClassConstructors
operator|.
name|put
argument_list|(
name|NodeId
operator|.
name|scalar
argument_list|,
name|undefinedConstructor
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlClassConstructors
operator|.
name|put
argument_list|(
name|NodeId
operator|.
name|sequence
argument_list|,
name|undefinedConstructor
argument_list|)
expr_stmt|;
name|this
operator|.
name|yamlClassConstructors
operator|.
name|put
argument_list|(
name|NodeId
operator|.
name|mapping
argument_list|,
name|undefinedConstructor
argument_list|)
expr_stmt|;
block|}
DECL|method|flattenMapping
specifier|private
name|void
name|flattenMapping
parameter_list|(
name|MappingNode
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|merge
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeTuple
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|nodeValue
init|=
operator|(
name|List
argument_list|<
name|NodeTuple
argument_list|>
operator|)
name|node
operator|.
name|getValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|nodeValue
operator|.
name|size
argument_list|()
condition|)
block|{
name|Node
name|keyNode
init|=
name|nodeValue
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getKeyNode
argument_list|()
decl_stmt|;
name|Node
name|valueNode
init|=
name|nodeValue
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getValueNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyNode
operator|.
name|getTag
argument_list|()
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|MERGE
argument_list|)
condition|)
block|{
name|nodeValue
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|valueNode
operator|.
name|getNodeId
argument_list|()
condition|)
block|{
case|case
name|mapping
case|:
name|MappingNode
name|mn
init|=
operator|(
name|MappingNode
operator|)
name|valueNode
decl_stmt|;
name|flattenMapping
argument_list|(
name|mn
argument_list|)
expr_stmt|;
name|merge
operator|.
name|addAll
argument_list|(
name|mn
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|sequence
case|:
name|List
argument_list|<
name|List
argument_list|<
name|NodeTuple
argument_list|>
argument_list|>
name|submerge
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|NodeTuple
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|SequenceNode
name|sn
init|=
operator|(
name|SequenceNode
operator|)
name|valueNode
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|vals
init|=
name|sn
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|subnode
range|:
name|vals
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|subnode
operator|instanceof
name|MappingNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructing a mapping"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"expected a mapping for merging, but found "
operator|+
name|subnode
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|subnode
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
name|MappingNode
name|mnode
init|=
operator|(
name|MappingNode
operator|)
name|subnode
decl_stmt|;
name|flattenMapping
argument_list|(
name|mnode
argument_list|)
expr_stmt|;
name|submerge
operator|.
name|add
argument_list|(
name|mnode
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|submerge
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|NodeTuple
argument_list|>
name|value
range|:
name|submerge
control|)
block|{
name|merge
operator|.
name|addAll
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructing a mapping"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"expected a mapping or list of mappings for merging, but found "
operator|+
name|valueNode
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|valueNode
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|keyNode
operator|.
name|getTag
argument_list|()
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|VALUE
argument_list|)
condition|)
block|{
name|keyNode
operator|.
name|setTag
argument_list|(
name|Tag
operator|.
name|STR
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
else|else
block|{
name|index
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|merge
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|merge
operator|.
name|addAll
argument_list|(
name|nodeValue
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MappingNode
operator|)
name|node
operator|)
operator|.
name|setValue
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|constructMapping2ndStep
specifier|protected
name|void
name|constructMapping2ndStep
parameter_list|(
name|MappingNode
name|node
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mapping
parameter_list|)
block|{
name|flattenMapping
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|super
operator|.
name|constructMapping2ndStep
argument_list|(
name|node
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|constructSet2ndStep
specifier|protected
name|void
name|constructSet2ndStep
parameter_list|(
name|MappingNode
name|node
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|Object
argument_list|>
name|set
parameter_list|)
block|{
name|flattenMapping
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|super
operator|.
name|constructSet2ndStep
argument_list|(
name|node
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|class|ConstructYamlNull
specifier|private
class|class
name|ConstructYamlNull
extends|extends
name|AbstractConstruct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|constructScalar
argument_list|(
operator|(
name|ScalarNode
operator|)
name|node
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|field|BOOL_VALUES
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|BOOL_VALUES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|BOOL_VALUES
operator|.
name|put
argument_list|(
literal|"yes"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|BOOL_VALUES
operator|.
name|put
argument_list|(
literal|"no"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|BOOL_VALUES
operator|.
name|put
argument_list|(
literal|"true"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|BOOL_VALUES
operator|.
name|put
argument_list|(
literal|"false"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|BOOL_VALUES
operator|.
name|put
argument_list|(
literal|"on"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|BOOL_VALUES
operator|.
name|put
argument_list|(
literal|"off"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
DECL|class|ConstructYamlBool
specifier|private
class|class
name|ConstructYamlBool
extends|extends
name|AbstractConstruct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|constructScalar
argument_list|(
operator|(
name|ScalarNode
operator|)
name|node
argument_list|)
decl_stmt|;
return|return
name|BOOL_VALUES
operator|.
name|get
argument_list|(
name|val
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|ConstructYamlInt
specifier|private
class|class
name|ConstructYamlInt
extends|extends
name|AbstractConstruct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|String
name|value
init|=
name|constructScalar
argument_list|(
operator|(
name|ScalarNode
operator|)
name|node
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|int
name|sign
init|=
operator|+
literal|1
decl_stmt|;
name|char
name|first
init|=
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|'-'
condition|)
block|{
name|sign
operator|=
operator|-
literal|1
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|first
operator|==
literal|'+'
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|base
init|=
literal|10
decl_stmt|;
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"0b"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|base
operator|=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"0x"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|base
operator|=
literal|16
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|base
operator|=
literal|8
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
index|[]
name|digits
init|=
name|value
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
name|bes
init|=
literal|1
decl_stmt|;
name|int
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|digits
operator|.
name|length
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|val
operator|+=
operator|(
name|Long
operator|.
name|parseLong
argument_list|(
name|digits
index|[
operator|(
name|j
operator|-
name|i
operator|)
operator|-
literal|1
index|]
argument_list|)
operator|*
name|bes
operator|)
expr_stmt|;
name|bes
operator|*=
literal|60
expr_stmt|;
block|}
return|return
name|createNumber
argument_list|(
name|sign
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|,
literal|10
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createNumber
argument_list|(
name|sign
argument_list|,
name|value
argument_list|,
literal|10
argument_list|)
return|;
block|}
return|return
name|createNumber
argument_list|(
name|sign
argument_list|,
name|value
argument_list|,
name|base
argument_list|)
return|;
block|}
block|}
DECL|method|createNumber
specifier|private
name|Number
name|createNumber
parameter_list|(
name|int
name|sign
parameter_list|,
name|String
name|number
parameter_list|,
name|int
name|radix
parameter_list|)
block|{
name|Number
name|result
decl_stmt|;
if|if
condition|(
name|sign
operator|<
literal|0
condition|)
block|{
name|number
operator|=
literal|"-"
operator|+
name|number
expr_stmt|;
block|}
try|try
block|{
name|result
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|number
argument_list|,
name|radix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
try|try
block|{
name|result
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|number
argument_list|,
name|radix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e1
parameter_list|)
block|{
name|result
operator|=
operator|new
name|BigInteger
argument_list|(
name|number
argument_list|,
name|radix
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|class|ConstructYamlFloat
specifier|private
class|class
name|ConstructYamlFloat
extends|extends
name|AbstractConstruct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|String
name|value
init|=
name|constructScalar
argument_list|(
operator|(
name|ScalarNode
operator|)
name|node
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|int
name|sign
init|=
operator|+
literal|1
decl_stmt|;
name|char
name|first
init|=
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|'-'
condition|)
block|{
name|sign
operator|=
operator|-
literal|1
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|first
operator|==
literal|'+'
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|valLower
init|=
name|value
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
literal|".inf"
operator|.
name|equals
argument_list|(
name|valLower
argument_list|)
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|sign
operator|==
operator|-
literal|1
condition|?
name|Double
operator|.
name|NEGATIVE_INFINITY
else|:
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|".nan"
operator|.
name|equals
argument_list|(
name|valLower
argument_list|)
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
index|[]
name|digits
init|=
name|value
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
name|bes
init|=
literal|1
decl_stmt|;
name|double
name|val
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|digits
operator|.
name|length
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|val
operator|+=
operator|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|digits
index|[
operator|(
name|j
operator|-
name|i
operator|)
operator|-
literal|1
index|]
argument_list|)
operator|*
name|bes
operator|)
expr_stmt|;
name|bes
operator|*=
literal|60
expr_stmt|;
block|}
return|return
operator|new
name|Double
argument_list|(
name|sign
operator|*
name|val
argument_list|)
return|;
block|}
else|else
block|{
name|Double
name|d
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|Double
argument_list|(
name|d
operator|.
name|doubleValue
argument_list|()
operator|*
name|sign
argument_list|)
return|;
block|}
block|}
block|}
DECL|class|ConstructYamlBinary
specifier|private
class|class
name|ConstructYamlBinary
extends|extends
name|AbstractConstruct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|byte
index|[]
name|decoded
init|=
name|Base64Coder
operator|.
name|decode
argument_list|(
name|constructScalar
argument_list|(
operator|(
name|ScalarNode
operator|)
name|node
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|decoded
return|;
block|}
block|}
DECL|field|TIMESTAMP_REGEXP
specifier|private
specifier|final
specifier|static
name|Pattern
name|TIMESTAMP_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:(?:[Tt]|[ \t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \t]*(?:Z|([-+][0-9][0-9]?)(?::([0-9][0-9])?)?))?)?$"
argument_list|)
decl_stmt|;
DECL|field|YMD_REGEXP
specifier|private
specifier|final
specifier|static
name|Pattern
name|YMD_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)$"
argument_list|)
decl_stmt|;
DECL|class|ConstructYamlTimestamp
specifier|protected
class|class
name|ConstructYamlTimestamp
extends|extends
name|AbstractConstruct
block|{
DECL|field|calendar
specifier|private
name|Calendar
name|calendar
decl_stmt|;
DECL|method|getCalendar
specifier|public
name|Calendar
name|getCalendar
parameter_list|()
block|{
return|return
name|calendar
return|;
block|}
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|ScalarNode
name|scalar
init|=
operator|(
name|ScalarNode
operator|)
name|node
decl_stmt|;
name|String
name|nodeValue
init|=
name|scalar
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Matcher
name|match
init|=
name|YMD_REGEXP
operator|.
name|matcher
argument_list|(
name|nodeValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|year_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|month_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|day_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|calendar
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|clear
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|year_s
argument_list|)
argument_list|)
expr_stmt|;
comment|// Java's months are zero-based...
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|month_s
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// x
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|day_s
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|calendar
operator|.
name|getTime
argument_list|()
return|;
block|}
else|else
block|{
name|match
operator|=
name|TIMESTAMP_REGEXP
operator|.
name|matcher
argument_list|(
name|nodeValue
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|match
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YAMLException
argument_list|(
literal|"Unexpected timestamp: "
operator|+
name|nodeValue
argument_list|)
throw|;
block|}
name|String
name|year_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|month_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|day_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|hour_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|min_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|sec_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|String
name|fract_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|String
name|timezoneh_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|String
name|timezonem_s
init|=
name|match
operator|.
name|group
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|int
name|usec
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fract_s
operator|!=
literal|null
condition|)
block|{
name|usec
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fract_s
argument_list|)
expr_stmt|;
if|if
condition|(
name|usec
operator|!=
literal|0
condition|)
block|{
while|while
condition|(
literal|10
operator|*
name|usec
operator|<
literal|1000
condition|)
block|{
name|usec
operator|*=
literal|10
expr_stmt|;
block|}
block|}
block|}
name|TimeZone
name|timeZone
decl_stmt|;
if|if
condition|(
name|timezoneh_s
operator|!=
literal|null
condition|)
block|{
name|String
name|time
init|=
name|timezonem_s
operator|!=
literal|null
condition|?
literal|":"
operator|+
name|timezonem_s
else|:
literal|"00"
decl_stmt|;
name|timeZone
operator|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
operator|+
name|timezoneh_s
operator|+
name|time
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no time zone provided
name|timeZone
operator|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
expr_stmt|;
block|}
name|calendar
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|year_s
argument_list|)
argument_list|)
expr_stmt|;
comment|// Java's months are zero-based...
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|month_s
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|day_s
argument_list|)
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|hour_s
argument_list|)
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|min_s
argument_list|)
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|sec_s
argument_list|)
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
name|usec
argument_list|)
expr_stmt|;
return|return
name|calendar
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|ConstructYamlOmap
specifier|private
class|class
name|ConstructYamlOmap
extends|extends
name|AbstractConstruct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
comment|// Note: we do not check for duplicate keys, because it's too
comment|// CPU-expensive.
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|omap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|SequenceNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructing an ordered map"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"expected a sequence, but found "
operator|+
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
name|SequenceNode
name|snode
init|=
operator|(
name|SequenceNode
operator|)
name|node
decl_stmt|;
for|for
control|(
name|Node
name|subnode
range|:
name|snode
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|subnode
operator|instanceof
name|MappingNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructing an ordered map"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"expected a mapping of length 1, but found "
operator|+
name|subnode
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|subnode
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
name|MappingNode
name|mnode
init|=
operator|(
name|MappingNode
operator|)
name|subnode
decl_stmt|;
if|if
condition|(
name|mnode
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructing an ordered map"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"expected a single mapping item, but found "
operator|+
name|mnode
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" items"
argument_list|,
name|mnode
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
name|Node
name|keyNode
init|=
name|mnode
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyNode
argument_list|()
decl_stmt|;
name|Node
name|valueNode
init|=
name|mnode
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValueNode
argument_list|()
decl_stmt|;
name|Object
name|key
init|=
name|constructObject
argument_list|(
name|keyNode
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|constructObject
argument_list|(
name|valueNode
argument_list|)
decl_stmt|;
name|omap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|omap
return|;
block|}
block|}
comment|// Note: the same code as `construct_yaml_omap`.
DECL|class|ConstructYamlPairs
specifier|private
class|class
name|ConstructYamlPairs
extends|extends
name|AbstractConstruct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
comment|// Note: we do not check for duplicate keys, because it's too
comment|// CPU-expensive.
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|SequenceNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructing pairs"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"expected a sequence, but found "
operator|+
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
name|SequenceNode
name|snode
init|=
operator|(
name|SequenceNode
operator|)
name|node
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|pairs
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|(
name|snode
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|subnode
range|:
name|snode
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|subnode
operator|instanceof
name|MappingNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructingpairs"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"expected a mapping of length 1, but found "
operator|+
name|subnode
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|subnode
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
name|MappingNode
name|mnode
init|=
operator|(
name|MappingNode
operator|)
name|subnode
decl_stmt|;
if|if
condition|(
name|mnode
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|"while constructing pairs"
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|,
literal|"expected a single mapping item, but found "
operator|+
name|mnode
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" items"
argument_list|,
name|mnode
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
name|Node
name|keyNode
init|=
name|mnode
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyNode
argument_list|()
decl_stmt|;
name|Node
name|valueNode
init|=
name|mnode
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValueNode
argument_list|()
decl_stmt|;
name|Object
name|key
init|=
name|constructObject
argument_list|(
name|keyNode
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|constructObject
argument_list|(
name|valueNode
argument_list|)
decl_stmt|;
name|pairs
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|key
block|,
name|value
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|pairs
return|;
block|}
block|}
DECL|class|ConstructYamlSet
specifier|private
class|class
name|ConstructYamlSet
implements|implements
name|Construct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isTwoStepsConstruction
argument_list|()
condition|)
block|{
return|return
name|createDefaultSet
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|constructSet
argument_list|(
operator|(
name|MappingNode
operator|)
name|node
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|construct2ndStep
specifier|public
name|void
name|construct2ndStep
parameter_list|(
name|Node
name|node
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isTwoStepsConstruction
argument_list|()
condition|)
block|{
name|constructSet2ndStep
argument_list|(
operator|(
name|MappingNode
operator|)
name|node
argument_list|,
operator|(
name|Set
argument_list|<
name|Object
argument_list|>
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YAMLException
argument_list|(
literal|"Unexpected recursive set structure. Node: "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|ConstructYamlStr
specifier|private
class|class
name|ConstructYamlStr
extends|extends
name|AbstractConstruct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|constructScalar
argument_list|(
operator|(
name|ScalarNode
operator|)
name|node
argument_list|)
return|;
block|}
block|}
DECL|class|ConstructYamlSeq
specifier|private
class|class
name|ConstructYamlSeq
implements|implements
name|Construct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|SequenceNode
name|seqNode
init|=
operator|(
name|SequenceNode
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isTwoStepsConstruction
argument_list|()
condition|)
block|{
return|return
name|createDefaultList
argument_list|(
operator|(
name|seqNode
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|constructSequence
argument_list|(
name|seqNode
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|construct2ndStep
specifier|public
name|void
name|construct2ndStep
parameter_list|(
name|Node
name|node
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isTwoStepsConstruction
argument_list|()
condition|)
block|{
name|constructSequenceStep2
argument_list|(
operator|(
name|SequenceNode
operator|)
name|node
argument_list|,
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YAMLException
argument_list|(
literal|"Unexpected recursive sequence structure. Node: "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|ConstructYamlMap
specifier|private
class|class
name|ConstructYamlMap
implements|implements
name|Construct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isTwoStepsConstruction
argument_list|()
condition|)
block|{
return|return
name|createDefaultMap
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|constructMapping
argument_list|(
operator|(
name|MappingNode
operator|)
name|node
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|construct2ndStep
specifier|public
name|void
name|construct2ndStep
parameter_list|(
name|Node
name|node
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isTwoStepsConstruction
argument_list|()
condition|)
block|{
name|constructMapping2ndStep
argument_list|(
operator|(
name|MappingNode
operator|)
name|node
argument_list|,
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YAMLException
argument_list|(
literal|"Unexpected recursive mapping structure. Node: "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|ConstructUndefined
specifier|private
specifier|static
specifier|final
class|class
name|ConstructUndefined
extends|extends
name|AbstractConstruct
block|{
DECL|method|construct
specifier|public
name|Object
name|construct
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|ConstructorException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"could not determine a constructor for the tag "
operator|+
name|node
operator|.
name|getTag
argument_list|()
argument_list|,
name|node
operator|.
name|getStartMark
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

