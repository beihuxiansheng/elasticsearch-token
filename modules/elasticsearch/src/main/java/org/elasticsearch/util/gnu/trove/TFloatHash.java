begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_comment
comment|//////////////////////////////////////////////////
end_comment

begin_comment
comment|// THIS IS A GENERATED CLASS. DO NOT HAND EDIT! //
end_comment

begin_comment
comment|//////////////////////////////////////////////////
end_comment

begin_comment
comment|/**  * An open addressed hashing implementation for float primitives.  *<p/>  * Created: Sun Nov  4 08:56:06 2001  *  * @author Eric D. Friedman  * @version $Id: PHash.template,v 1.2 2007/06/29 22:39:46 robeden Exp $  */
end_comment

begin_class
DECL|class|TFloatHash
specifier|abstract
specifier|public
class|class
name|TFloatHash
extends|extends
name|TPrimitiveHash
implements|implements
name|TFloatHashingStrategy
block|{
comment|/**      * the set of floats      */
DECL|field|_set
specifier|protected
specifier|transient
name|float
index|[]
name|_set
decl_stmt|;
comment|/**      * strategy used to hash values in this collection      */
DECL|field|_hashingStrategy
specifier|protected
name|TFloatHashingStrategy
name|_hashingStrategy
decl_stmt|;
comment|/**      * Creates a new<code>TFloatHash</code> instance with the default      * capacity and load factor.      */
DECL|method|TFloatHash
specifier|public
name|TFloatHash
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|this
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TFloatHash</code> instance whose capacity      * is the next highest prime above<tt>initialCapacity + 1</tt>      * unless that value is already prime.      *      * @param initialCapacity an<code>int</code> value      */
DECL|method|TFloatHash
specifier|public
name|TFloatHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|this
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TFloatHash</code> instance with a prime      * value at or near the specified capacity and load factor.      *      * @param initialCapacity used to find a prime capacity for the table.      * @param loadFactor      used to calculate the threshold over which      *                        rehashing takes place.      */
DECL|method|TFloatHash
specifier|public
name|TFloatHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|this
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TFloatHash</code> instance with the default      * capacity and load factor.      *      * @param strategy used to compute hash codes and to compare keys.      */
DECL|method|TFloatHash
specifier|public
name|TFloatHash
parameter_list|(
name|TFloatHashingStrategy
name|strategy
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|strategy
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TFloatHash</code> instance whose capacity      * is the next highest prime above<tt>initialCapacity + 1</tt>      * unless that value is already prime.      *      * @param initialCapacity an<code>int</code> value      * @param strategy        used to compute hash codes and to compare keys.      */
DECL|method|TFloatHash
specifier|public
name|TFloatHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|TFloatHashingStrategy
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|strategy
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TFloatHash</code> instance with a prime      * value at or near the specified capacity and load factor.      *      * @param initialCapacity used to find a prime capacity for the table.      * @param loadFactor      used to calculate the threshold over which      *                        rehashing takes place.      * @param strategy        used to compute hash codes and to compare keys.      */
DECL|method|TFloatHash
specifier|public
name|TFloatHash
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|,
name|TFloatHashingStrategy
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|_hashingStrategy
operator|=
name|strategy
expr_stmt|;
block|}
comment|/**      * @return a deep clone of this collection      */
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|TFloatHash
name|h
init|=
operator|(
name|TFloatHash
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|h
operator|.
name|_set
operator|=
operator|(
name|float
index|[]
operator|)
name|this
operator|.
name|_set
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
comment|/**      * initializes the hashtable to a prime capacity which is at least      *<tt>initialCapacity + 1</tt>.      *      * @param initialCapacity an<code>int</code> value      * @return the actual capacity chosen      */
DECL|method|setUp
specifier|protected
name|int
name|setUp
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|int
name|capacity
decl_stmt|;
name|capacity
operator|=
name|super
operator|.
name|setUp
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
name|_set
operator|=
operator|new
name|float
index|[
name|capacity
index|]
expr_stmt|;
return|return
name|capacity
return|;
block|}
comment|/**      * Searches the set for<tt>val</tt>      *      * @param val an<code>float</code> value      * @return a<code>boolean</code> value      */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|float
name|val
parameter_list|)
block|{
return|return
name|index
argument_list|(
name|val
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**      * Executes<tt>procedure</tt> for each element in the set.      *      * @param procedure a<code>TObjectProcedure</code> value      * @return false if the loop over the set terminated because      *         the procedure returned false for some value.      */
DECL|method|forEach
specifier|public
name|boolean
name|forEach
parameter_list|(
name|TFloatProcedure
name|procedure
parameter_list|)
block|{
name|byte
index|[]
name|states
init|=
name|_states
decl_stmt|;
name|float
index|[]
name|set
init|=
name|_set
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|set
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|states
index|[
name|i
index|]
operator|==
name|FULL
operator|&&
operator|!
name|procedure
operator|.
name|execute
argument_list|(
name|set
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Releases the element currently stored at<tt>index</tt>.      *      * @param index an<code>int</code> value      */
DECL|method|removeAt
specifier|protected
name|void
name|removeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|_set
index|[
name|index
index|]
operator|=
operator|(
name|float
operator|)
literal|0
expr_stmt|;
name|super
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
comment|/**      * Locates the index of<tt>val</tt>.      *      * @param val an<code>float</code> value      * @return the index of<tt>val</tt> or -1 if it isn't in the set.      */
DECL|method|index
specifier|protected
name|int
name|index
parameter_list|(
name|float
name|val
parameter_list|)
block|{
name|int
name|hash
decl_stmt|,
name|probe
decl_stmt|,
name|index
decl_stmt|,
name|length
decl_stmt|;
specifier|final
name|byte
index|[]
name|states
init|=
name|_states
decl_stmt|;
specifier|final
name|float
index|[]
name|set
init|=
name|_set
decl_stmt|;
name|length
operator|=
name|states
operator|.
name|length
expr_stmt|;
name|hash
operator|=
name|_hashingStrategy
operator|.
name|computeHashCode
argument_list|(
name|val
argument_list|)
operator|&
literal|0x7fffffff
expr_stmt|;
name|index
operator|=
name|hash
operator|%
name|length
expr_stmt|;
if|if
condition|(
name|states
index|[
name|index
index|]
operator|!=
name|FREE
operator|&&
operator|(
name|states
index|[
name|index
index|]
operator|==
name|REMOVED
operator|||
name|set
index|[
name|index
index|]
operator|!=
name|val
operator|)
condition|)
block|{
comment|// see Knuth, p. 529
name|probe
operator|=
literal|1
operator|+
operator|(
name|hash
operator|%
operator|(
name|length
operator|-
literal|2
operator|)
operator|)
expr_stmt|;
do|do
block|{
name|index
operator|-=
name|probe
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|+=
name|length
expr_stmt|;
block|}
block|}
do|while
condition|(
name|states
index|[
name|index
index|]
operator|!=
name|FREE
operator|&&
operator|(
name|states
index|[
name|index
index|]
operator|==
name|REMOVED
operator|||
name|set
index|[
name|index
index|]
operator|!=
name|val
operator|)
condition|)
do|;
block|}
return|return
name|states
index|[
name|index
index|]
operator|==
name|FREE
condition|?
operator|-
literal|1
else|:
name|index
return|;
block|}
comment|/**      * Locates the index at which<tt>val</tt> can be inserted.  if      * there is already a value equal()ing<tt>val</tt> in the set,      * returns that value as a negative integer.      *      * @param val an<code>float</code> value      * @return an<code>int</code> value      */
DECL|method|insertionIndex
specifier|protected
name|int
name|insertionIndex
parameter_list|(
name|float
name|val
parameter_list|)
block|{
name|int
name|hash
decl_stmt|,
name|probe
decl_stmt|,
name|index
decl_stmt|,
name|length
decl_stmt|;
specifier|final
name|byte
index|[]
name|states
init|=
name|_states
decl_stmt|;
specifier|final
name|float
index|[]
name|set
init|=
name|_set
decl_stmt|;
name|length
operator|=
name|states
operator|.
name|length
expr_stmt|;
name|hash
operator|=
name|_hashingStrategy
operator|.
name|computeHashCode
argument_list|(
name|val
argument_list|)
operator|&
literal|0x7fffffff
expr_stmt|;
name|index
operator|=
name|hash
operator|%
name|length
expr_stmt|;
if|if
condition|(
name|states
index|[
name|index
index|]
operator|==
name|FREE
condition|)
block|{
return|return
name|index
return|;
comment|// empty, all done
block|}
elseif|else
if|if
condition|(
name|states
index|[
name|index
index|]
operator|==
name|FULL
operator|&&
name|set
index|[
name|index
index|]
operator|==
name|val
condition|)
block|{
return|return
operator|-
name|index
operator|-
literal|1
return|;
comment|// already stored
block|}
else|else
block|{
comment|// already FULL or REMOVED, must probe
comment|// compute the double hash
name|probe
operator|=
literal|1
operator|+
operator|(
name|hash
operator|%
operator|(
name|length
operator|-
literal|2
operator|)
operator|)
expr_stmt|;
comment|// if the slot we landed on is FULL (but not removed), probe
comment|// until we find an empty slot, a REMOVED slot, or an element
comment|// equal to the one we are trying to insert.
comment|// finding an empty slot means that the value is not present
comment|// and that we should use that slot as the insertion point;
comment|// finding a REMOVED slot means that we need to keep searching,
comment|// however we want to remember the offset of that REMOVED slot
comment|// so we can reuse it in case a "new" insertion (i.e. not an update)
comment|// is possible.
comment|// finding a matching value means that we've found that our desired
comment|// key is already in the table
if|if
condition|(
name|states
index|[
name|index
index|]
operator|!=
name|REMOVED
condition|)
block|{
comment|// starting at the natural offset, probe until we find an
comment|// offset that isn't full.
do|do
block|{
name|index
operator|-=
name|probe
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|+=
name|length
expr_stmt|;
block|}
block|}
do|while
condition|(
name|states
index|[
name|index
index|]
operator|==
name|FULL
operator|&&
name|set
index|[
name|index
index|]
operator|!=
name|val
condition|)
do|;
block|}
comment|// if the index we found was removed: continue probing until we
comment|// locate a free location or an element which equal()s the
comment|// one we have.
if|if
condition|(
name|states
index|[
name|index
index|]
operator|==
name|REMOVED
condition|)
block|{
name|int
name|firstRemoved
init|=
name|index
decl_stmt|;
while|while
condition|(
name|states
index|[
name|index
index|]
operator|!=
name|FREE
operator|&&
operator|(
name|states
index|[
name|index
index|]
operator|==
name|REMOVED
operator|||
name|set
index|[
name|index
index|]
operator|!=
name|val
operator|)
condition|)
block|{
name|index
operator|-=
name|probe
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|+=
name|length
expr_stmt|;
block|}
block|}
return|return
name|states
index|[
name|index
index|]
operator|==
name|FULL
condition|?
operator|-
name|index
operator|-
literal|1
else|:
name|firstRemoved
return|;
block|}
comment|// if it's full, the key is already stored
return|return
name|states
index|[
name|index
index|]
operator|==
name|FULL
condition|?
operator|-
name|index
operator|-
literal|1
else|:
name|index
return|;
block|}
block|}
comment|/**      * Default implementation of TFloatHashingStrategy:      * delegates hashing to HashFunctions.hash(float).      *      * @param val the value to hash      * @return the hashcode.      */
DECL|method|computeHashCode
specifier|public
specifier|final
name|int
name|computeHashCode
parameter_list|(
name|float
name|val
parameter_list|)
block|{
return|return
name|HashFunctions
operator|.
name|hash
argument_list|(
name|val
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// TFloatHash
end_comment

end_unit

