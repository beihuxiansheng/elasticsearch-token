begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * An implementation of the Map interface which uses an open addressed  * hash table to store its contents.  *<p/>  * Created: Sun Nov  4 08:52:45 2001  *  * @author Eric D. Friedman  * @version $Id: THashMap.java,v 1.33 2008/05/08 17:42:55 robeden Exp $  */
end_comment

begin_class
DECL|class|THashMap
specifier|public
class|class
name|THashMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|TObjectHash
argument_list|<
name|K
argument_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Externalizable
block|{
DECL|field|serialVersionUID
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * the values of the  map      */
DECL|field|_values
specifier|protected
specifier|transient
name|V
index|[]
name|_values
decl_stmt|;
comment|/**      * Creates a new<code>THashMap</code> instance with the default      * capacity and load factor.      */
DECL|method|THashMap
specifier|public
name|THashMap
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashMap</code> instance with the default      * capacity and load factor.      *      * @param strategy used to compute hash codes and to compare objects.      */
DECL|method|THashMap
specifier|public
name|THashMap
parameter_list|(
name|TObjectHashingStrategy
argument_list|<
name|K
argument_list|>
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashMap</code> instance with a prime      * capacity equal to or greater than<tt>initialCapacity</tt> and      * with the default load factor.      *      * @param initialCapacity an<code>int</code> value      */
DECL|method|THashMap
specifier|public
name|THashMap
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashMap</code> instance with a prime      * capacity equal to or greater than<tt>initialCapacity</tt> and      * with the default load factor.      *      * @param initialCapacity an<code>int</code> value      * @param strategy        used to compute hash codes and to compare objects.      */
DECL|method|THashMap
specifier|public
name|THashMap
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|TObjectHashingStrategy
argument_list|<
name|K
argument_list|>
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashMap</code> instance with a prime      * capacity equal to or greater than<tt>initialCapacity</tt> and      * with the specified load factor.      *      * @param initialCapacity an<code>int</code> value      * @param loadFactor      a<code>float</code> value      */
DECL|method|THashMap
specifier|public
name|THashMap
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashMap</code> instance with a prime      * capacity equal to or greater than<tt>initialCapacity</tt> and      * with the specified load factor.      *      * @param initialCapacity an<code>int</code> value      * @param loadFactor      a<code>float</code> value      * @param strategy        used to compute hash codes and to compare objects.      */
DECL|method|THashMap
specifier|public
name|THashMap
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|,
name|TObjectHashingStrategy
argument_list|<
name|K
argument_list|>
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashMap</code> instance which contains the      * key/value pairs in<tt>map</tt>.      *      * @param map a<code>Map</code> value      */
DECL|method|THashMap
specifier|public
name|THashMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|this
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>THashMap</code> instance which contains the      * key/value pairs in<tt>map</tt>.      *      * @param map      a<code>Map</code> value      * @param strategy used to compute hash codes and to compare objects.      */
DECL|method|THashMap
specifier|public
name|THashMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|TObjectHashingStrategy
argument_list|<
name|K
argument_list|>
name|strategy
parameter_list|)
block|{
name|this
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return a shallow clone of this collection      */
DECL|method|clone
specifier|public
name|THashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|clone
parameter_list|()
block|{
name|THashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|m
init|=
operator|(
name|THashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|m
operator|.
name|_values
operator|=
name|this
operator|.
name|_values
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|m
return|;
block|}
comment|/**      * initialize the value array of the map.      *      * @param initialCapacity an<code>int</code> value      * @return an<code>int</code> value      */
DECL|method|setUp
specifier|protected
name|int
name|setUp
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|int
name|capacity
decl_stmt|;
name|capacity
operator|=
name|super
operator|.
name|setUp
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
name|_values
operator|=
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|capacity
index|]
expr_stmt|;
return|return
name|capacity
return|;
block|}
comment|/**      * Inserts a key/value pair into the map.      *      * @param key   an<code>Object</code> value      * @param value an<code>Object</code> value      * @return the previous value associated with<tt>key</tt>,      *         or {@code null} if none was found.      */
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|int
name|index
init|=
name|insertionIndex
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|doPut
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/**      * Inserts a key/value pair into the map if the specified key is not already      * associated with a value.      *      * @param key   an<code>Object</code> value      * @param value an<code>Object</code> value      * @return the previous value associated with<tt>key</tt>,      *         or {@code null} if none was found.      */
DECL|method|putIfAbsent
specifier|public
name|V
name|putIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|int
name|index
init|=
name|insertionIndex
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
return|return
name|_values
index|[
operator|-
name|index
operator|-
literal|1
index|]
return|;
return|return
name|doPut
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|index
argument_list|)
return|;
block|}
DECL|method|doPut
specifier|private
name|V
name|doPut
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|V
name|previous
init|=
literal|null
decl_stmt|;
name|Object
name|oldKey
decl_stmt|;
name|boolean
name|isNewMapping
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
operator|-
name|index
operator|-
literal|1
expr_stmt|;
name|previous
operator|=
name|_values
index|[
name|index
index|]
expr_stmt|;
name|isNewMapping
operator|=
literal|false
expr_stmt|;
block|}
name|oldKey
operator|=
name|_set
index|[
name|index
index|]
expr_stmt|;
name|_set
index|[
name|index
index|]
operator|=
name|key
expr_stmt|;
name|_values
index|[
name|index
index|]
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|isNewMapping
condition|)
block|{
name|postInsertHook
argument_list|(
name|oldKey
operator|==
name|FREE
argument_list|)
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
comment|/**      * Compares this map with another map for equality of their stored      * entries.      *      * @param other an<code>Object</code> value      * @return a<code>boolean</code> value      */
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|Map
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|that
init|=
operator|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|that
operator|.
name|size
argument_list|()
operator|!=
name|this
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|forEachEntry
argument_list|(
operator|new
name|EqProcedure
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|that
argument_list|)
argument_list|)
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashProcedure
name|p
init|=
operator|new
name|HashProcedure
argument_list|()
decl_stmt|;
name|forEachEntry
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|p
operator|.
name|getHashCode
argument_list|()
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|forEachEntry
argument_list|(
operator|new
name|TObjectObjectProcedure
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|private
name|boolean
name|first
init|=
literal|true
decl_stmt|;
specifier|public
name|boolean
name|execute
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|first
condition|)
name|first
operator|=
literal|false
expr_stmt|;
else|else
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|HashProcedure
specifier|private
specifier|final
class|class
name|HashProcedure
implements|implements
name|TObjectObjectProcedure
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|h
specifier|private
name|int
name|h
init|=
literal|0
decl_stmt|;
DECL|method|getHashCode
specifier|public
name|int
name|getHashCode
parameter_list|()
block|{
return|return
name|h
return|;
block|}
DECL|method|execute
specifier|public
specifier|final
name|boolean
name|execute
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|h
operator|+=
name|_hashingStrategy
operator|.
name|computeHashCode
argument_list|(
name|key
argument_list|)
operator|^
operator|(
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|value
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|EqProcedure
specifier|private
specifier|static
specifier|final
class|class
name|EqProcedure
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TObjectObjectProcedure
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|_otherMap
specifier|private
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|_otherMap
decl_stmt|;
DECL|method|EqProcedure
name|EqProcedure
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|otherMap
parameter_list|)
block|{
name|_otherMap
operator|=
name|otherMap
expr_stmt|;
block|}
DECL|method|execute
specifier|public
specifier|final
name|boolean
name|execute
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
comment|// Check to make sure the key is there. This avoids problems that come up with
comment|// null values. Since it is only caused in that cause, only do this when the
comment|// value is null (to avoid extra work).
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
operator|!
name|_otherMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
return|return
literal|false
return|;
name|V
name|oValue
init|=
name|_otherMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|oValue
operator|==
name|value
operator|||
operator|(
name|oValue
operator|!=
literal|null
operator|&&
name|oValue
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
return|;
block|}
block|}
comment|/**      * Executes<tt>procedure</tt> for each key in the map.      *      * @param procedure a<code>TObjectProcedure</code> value      * @return false if the loop over the keys terminated because      *         the procedure returned false for some key.      */
DECL|method|forEachKey
specifier|public
name|boolean
name|forEachKey
parameter_list|(
name|TObjectProcedure
argument_list|<
name|K
argument_list|>
name|procedure
parameter_list|)
block|{
return|return
name|forEach
argument_list|(
name|procedure
argument_list|)
return|;
block|}
comment|/**      * Executes<tt>procedure</tt> for each value in the map.      *      * @param procedure a<code>TObjectProcedure</code> value      * @return false if the loop over the values terminated because      *         the procedure returned false for some value.      */
DECL|method|forEachValue
specifier|public
name|boolean
name|forEachValue
parameter_list|(
name|TObjectProcedure
argument_list|<
name|V
argument_list|>
name|procedure
parameter_list|)
block|{
name|V
index|[]
name|values
init|=
name|_values
decl_stmt|;
name|Object
index|[]
name|set
init|=
name|_set
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|values
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|set
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|set
index|[
name|i
index|]
operator|!=
name|REMOVED
operator|&&
operator|!
name|procedure
operator|.
name|execute
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Executes<tt>procedure</tt> for each key/value entry in the      * map.      *      * @param procedure a<code>TObjectObjectProcedure</code> value      * @return false if the loop over the entries terminated because      *         the procedure returned false for some entry.      */
DECL|method|forEachEntry
specifier|public
name|boolean
name|forEachEntry
parameter_list|(
name|TObjectObjectProcedure
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|procedure
parameter_list|)
block|{
name|Object
index|[]
name|keys
init|=
name|_set
decl_stmt|;
name|V
index|[]
name|values
init|=
name|_values
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|keys
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|keys
index|[
name|i
index|]
operator|!=
name|REMOVED
operator|&&
operator|!
name|procedure
operator|.
name|execute
argument_list|(
operator|(
name|K
operator|)
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Retains only those entries in the map for which the procedure      * returns a true value.      *      * @param procedure determines which entries to keep      * @return true if the map was modified.      */
DECL|method|retainEntries
specifier|public
name|boolean
name|retainEntries
parameter_list|(
name|TObjectObjectProcedure
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|procedure
parameter_list|)
block|{
name|boolean
name|modified
init|=
literal|false
decl_stmt|;
name|Object
index|[]
name|keys
init|=
name|_set
decl_stmt|;
name|V
index|[]
name|values
init|=
name|_values
decl_stmt|;
comment|// Temporarily disable compaction. This is a fix for bug #1738760
name|tempDisableAutoCompaction
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
name|keys
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|keys
index|[
name|i
index|]
operator|!=
name|REMOVED
operator|&&
operator|!
name|procedure
operator|.
name|execute
argument_list|(
operator|(
name|K
operator|)
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|modified
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|reenableAutoCompaction
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|modified
return|;
block|}
comment|/**      * Transform the values in this map using<tt>function</tt>.      *      * @param function a<code>TObjectFunction</code> value      */
DECL|method|transformValues
specifier|public
name|void
name|transformValues
parameter_list|(
name|TObjectFunction
argument_list|<
name|V
argument_list|,
name|V
argument_list|>
name|function
parameter_list|)
block|{
name|V
index|[]
name|values
init|=
name|_values
decl_stmt|;
name|Object
index|[]
name|set
init|=
name|_set
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|values
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|set
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|set
index|[
name|i
index|]
operator|!=
name|REMOVED
condition|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|function
operator|.
name|execute
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * rehashes the map to the new capacity.      *      * @param newCapacity an<code>int</code> value      */
DECL|method|rehash
specifier|protected
name|void
name|rehash
parameter_list|(
name|int
name|newCapacity
parameter_list|)
block|{
name|int
name|oldCapacity
init|=
name|_set
operator|.
name|length
decl_stmt|;
name|Object
name|oldKeys
index|[]
init|=
name|_set
decl_stmt|;
name|V
name|oldVals
index|[]
init|=
name|_values
decl_stmt|;
name|_set
operator|=
operator|new
name|Object
index|[
name|newCapacity
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|_set
argument_list|,
name|FREE
argument_list|)
expr_stmt|;
name|_values
operator|=
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|newCapacity
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|oldCapacity
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|oldKeys
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|oldKeys
index|[
name|i
index|]
operator|!=
name|REMOVED
condition|)
block|{
name|Object
name|o
init|=
name|oldKeys
index|[
name|i
index|]
decl_stmt|;
name|int
name|index
init|=
name|insertionIndex
argument_list|(
operator|(
name|K
operator|)
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|throwObjectContractViolation
argument_list|(
name|_set
index|[
operator|(
operator|-
name|index
operator|-
literal|1
operator|)
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|_set
index|[
name|index
index|]
operator|=
name|o
expr_stmt|;
name|_values
index|[
name|index
index|]
operator|=
name|oldVals
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
comment|/**      * retrieves the value for<tt>key</tt>      *      * @param key an<code>Object</code> value      * @return the value of<tt>key</tt> or null if no such mapping exists.      */
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|int
name|index
init|=
name|index
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
return|return
name|index
operator|<
literal|0
condition|?
literal|null
else|:
name|_values
index|[
name|index
index|]
return|;
block|}
comment|/**      * Empties the map.      */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
comment|// optimization
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|_set
argument_list|,
literal|0
argument_list|,
name|_set
operator|.
name|length
argument_list|,
name|FREE
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|_values
argument_list|,
literal|0
argument_list|,
name|_values
operator|.
name|length
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes a key/value pair from the map.      *      * @param key an<code>Object</code> value      * @return an<code>Object</code> value      */
DECL|method|remove
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|V
name|prev
init|=
literal|null
decl_stmt|;
name|int
name|index
init|=
name|index
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|prev
operator|=
name|_values
index|[
name|index
index|]
expr_stmt|;
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// clear key,state; adjust size
block|}
return|return
name|prev
return|;
block|}
comment|/**      * removes the mapping at<tt>index</tt> from the map.      *      * @param index an<code>int</code> value      */
DECL|method|removeAt
specifier|protected
name|void
name|removeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|_values
index|[
name|index
index|]
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// clear key, state; adjust size
block|}
comment|/**      * Returns a view on the values of the map.      *      * @return a<code>Collection</code> value      */
DECL|method|values
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
operator|new
name|ValueView
argument_list|()
return|;
block|}
comment|/**      * returns a Set view on the keys of the map.      *      * @return a<code>Set</code> value      */
DECL|method|keySet
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
operator|new
name|KeyView
argument_list|()
return|;
block|}
comment|/**      * Returns a Set view on the entries of the map.      *      * @return a<code>Set</code> value      */
DECL|method|entrySet
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|EntryView
argument_list|()
return|;
block|}
comment|/**      * checks for the presence of<tt>val</tt> in the values of the map.      *      * @param val an<code>Object</code> value      * @return a<code>boolean</code> value      */
DECL|method|containsValue
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
name|Object
index|[]
name|set
init|=
name|_set
decl_stmt|;
name|V
index|[]
name|vals
init|=
name|_values
decl_stmt|;
comment|// special case null values so that we don't have to
comment|// perform null checks before every call to equals()
if|if
condition|(
literal|null
operator|==
name|val
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|vals
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
operator|(
name|set
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|set
index|[
name|i
index|]
operator|!=
name|REMOVED
operator|)
operator|&&
name|val
operator|==
name|vals
index|[
name|i
index|]
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|vals
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
operator|(
name|set
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|set
index|[
name|i
index|]
operator|!=
name|REMOVED
operator|)
operator|&&
operator|(
name|val
operator|==
name|vals
index|[
name|i
index|]
operator|||
name|val
operator|.
name|equals
argument_list|(
name|vals
index|[
name|i
index|]
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// end of else
return|return
literal|false
return|;
block|}
comment|/**      * checks for the present of<tt>key</tt> in the keys of the map.      *      * @param key an<code>Object</code> value      * @return a<code>boolean</code> value      */
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * copies the key/value mappings in<tt>map</tt> into this map.      *      * @param map a<code>Map</code> value      */
DECL|method|putAll
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// could optimize this for cases when map instanceof THashMap
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|i
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|e
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * a view onto the values of the map.      */
DECL|class|ValueView
specifier|protected
class|class
name|ValueView
extends|extends
name|MapBackedView
argument_list|<
name|V
argument_list|>
block|{
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|THashIterator
argument_list|<
name|V
argument_list|>
argument_list|(
name|THashMap
operator|.
name|this
argument_list|)
block|{
specifier|protected
name|V
name|objectAtIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|_values
index|[
name|index
index|]
return|;
block|}
block|}
return|;
block|}
DECL|method|containsElement
specifier|public
name|boolean
name|containsElement
parameter_list|(
name|V
name|value
parameter_list|)
block|{
return|return
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|removeElement
specifier|public
name|boolean
name|removeElement
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|Object
index|[]
name|values
init|=
name|_values
decl_stmt|;
name|Object
index|[]
name|set
init|=
name|_set
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|values
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
operator|(
name|set
index|[
name|i
index|]
operator|!=
name|FREE
operator|&&
name|set
index|[
name|i
index|]
operator|!=
name|REMOVED
operator|)
operator|&&
name|value
operator|==
name|values
index|[
name|i
index|]
operator|||
operator|(
literal|null
operator|!=
name|values
index|[
name|i
index|]
operator|&&
name|values
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
condition|)
block|{
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**      * a view onto the entries of the map.      */
DECL|class|EntryView
specifier|protected
class|class
name|EntryView
extends|extends
name|MapBackedView
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|class|EntryIterator
specifier|private
specifier|final
class|class
name|EntryIterator
extends|extends
name|THashIterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|EntryIterator
name|EntryIterator
parameter_list|(
name|THashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|super
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|objectAtIndex
specifier|public
name|Entry
name|objectAtIndex
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|Entry
argument_list|(
operator|(
name|K
operator|)
name|_set
index|[
name|index
index|]
argument_list|,
name|_values
index|[
name|index
index|]
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EntryIterator
argument_list|(
name|THashMap
operator|.
name|this
argument_list|)
return|;
block|}
DECL|method|removeElement
specifier|public
name|boolean
name|removeElement
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
comment|// have to effectively reimplement Map.remove here
comment|// because we need to return true/false depending on
comment|// whether the removal took place.  Since the Entry's
comment|// value can be null, this means that we can't rely
comment|// on the value of the object returned by Map.remove()
comment|// to determine whether a deletion actually happened.
comment|//
comment|// Note also that the deletion is only legal if
comment|// both the key and the value match.
name|Object
name|val
decl_stmt|;
name|int
name|index
decl_stmt|;
name|K
name|key
init|=
name|keyForEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|index
operator|=
name|index
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|val
operator|=
name|valueForEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|==
name|_values
index|[
name|index
index|]
operator|||
operator|(
literal|null
operator|!=
name|val
operator|&&
name|val
operator|.
name|equals
argument_list|(
name|_values
index|[
name|index
index|]
argument_list|)
operator|)
condition|)
block|{
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// clear key,state; adjust size
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|containsElement
specifier|public
name|boolean
name|containsElement
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
name|Object
name|val
init|=
name|get
argument_list|(
name|keyForEntry
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|entryValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|entryValue
operator|==
name|val
operator|||
operator|(
literal|null
operator|!=
name|val
operator|&&
name|val
operator|.
name|equals
argument_list|(
name|entryValue
argument_list|)
operator|)
return|;
block|}
DECL|method|valueForEntry
specifier|protected
name|V
name|valueForEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|keyForEntry
specifier|protected
name|K
name|keyForEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
DECL|class|MapBackedView
specifier|private
specifier|abstract
class|class
name|MapBackedView
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractSet
argument_list|<
name|E
argument_list|>
implements|implements
name|Set
argument_list|<
name|E
argument_list|>
implements|,
name|Iterable
argument_list|<
name|E
argument_list|>
block|{
DECL|method|iterator
specifier|public
specifier|abstract
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
function_decl|;
DECL|method|removeElement
specifier|public
specifier|abstract
name|boolean
name|removeElement
parameter_list|(
name|E
name|key
parameter_list|)
function_decl|;
DECL|method|containsElement
specifier|public
specifier|abstract
name|boolean
name|containsElement
parameter_list|(
name|E
name|key
parameter_list|)
function_decl|;
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsElement
argument_list|(
operator|(
name|E
operator|)
name|key
argument_list|)
return|;
block|}
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|removeElement
argument_list|(
operator|(
name|E
operator|)
name|o
argument_list|)
return|;
block|}
DECL|method|containsAll
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|THashMap
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|THashMap
operator|.
name|this
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|toArray
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
name|Object
index|[]
name|result
init|=
operator|new
name|Object
index|[
name|size
argument_list|()
index|]
decl_stmt|;
name|Iterator
name|e
init|=
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
name|result
index|[
name|i
index|]
operator|=
name|e
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|toArray
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|length
operator|<
name|size
condition|)
name|a
operator|=
operator|(
name|T
index|[]
operator|)
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|newInstance
argument_list|(
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|E
argument_list|>
name|it
init|=
name|iterator
argument_list|()
decl_stmt|;
name|Object
index|[]
name|result
init|=
name|a
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|length
operator|>
name|size
condition|)
block|{
name|a
index|[
name|size
index|]
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|THashMap
operator|.
name|this
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|addAll
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|retainAll
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
name|i
init|=
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|contains
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
block|}
comment|/**      * a view onto the keys of the map.      */
DECL|class|KeyView
specifier|protected
class|class
name|KeyView
extends|extends
name|MapBackedView
argument_list|<
name|K
argument_list|>
block|{
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|TObjectHashIterator
argument_list|<
name|K
argument_list|>
argument_list|(
name|THashMap
operator|.
name|this
argument_list|)
return|;
block|}
DECL|method|removeElement
specifier|public
name|boolean
name|removeElement
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
literal|null
operator|!=
name|THashMap
operator|.
name|this
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|containsElement
specifier|public
name|boolean
name|containsElement
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|THashMap
operator|.
name|this
operator|.
name|contains
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
DECL|class|Entry
specifier|final
class|class
name|Entry
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|key
specifier|private
name|K
name|key
decl_stmt|;
DECL|field|val
specifier|private
name|V
name|val
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
DECL|method|Entry
name|Entry
parameter_list|(
specifier|final
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|val
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|setKey
name|void
name|setKey
parameter_list|(
name|K
name|aKey
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|aKey
expr_stmt|;
block|}
DECL|method|setValue0
name|void
name|setValue0
parameter_list|(
name|V
name|aValue
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|aValue
expr_stmt|;
block|}
DECL|method|getKey
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getValue
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|val
return|;
block|}
DECL|method|setValue
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|o
parameter_list|)
block|{
if|if
condition|(
name|_values
index|[
name|index
index|]
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
name|_values
index|[
name|index
index|]
operator|=
name|o
expr_stmt|;
name|o
operator|=
name|val
expr_stmt|;
comment|// need to return previous value
name|val
operator|=
name|o
expr_stmt|;
comment|// update this entry's value, in case
comment|// setValue is called again
return|return
name|o
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Map
operator|.
name|Entry
condition|)
block|{
name|Map
operator|.
name|Entry
name|e1
init|=
name|this
decl_stmt|;
name|Map
operator|.
name|Entry
name|e2
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|e1
operator|.
name|getKey
argument_list|()
operator|==
literal|null
condition|?
name|e2
operator|.
name|getKey
argument_list|()
operator|==
literal|null
else|:
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|e1
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
name|e2
operator|.
name|getValue
argument_list|()
operator|==
literal|null
else|:
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|getKey
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getKey
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
operator|^
operator|(
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getValue
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
block|}
DECL|method|writeExternal
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// VERSION
name|out
operator|.
name|writeByte
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// NOTE: Super was not written in version 0
name|super
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// NUMBER OF ENTRIES
name|out
operator|.
name|writeInt
argument_list|(
name|_size
argument_list|)
expr_stmt|;
comment|// ENTRIES
name|SerializationProcedure
name|writeProcedure
init|=
operator|new
name|SerializationProcedure
argument_list|(
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|forEachEntry
argument_list|(
name|writeProcedure
argument_list|)
condition|)
block|{
throw|throw
name|writeProcedure
operator|.
name|exception
throw|;
block|}
block|}
DECL|method|readExternal
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// VERSION
name|byte
name|version
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// NOTE: super was not written in version 0
if|if
condition|(
name|version
operator|!=
literal|0
condition|)
name|super
operator|.
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// NUMBER OF ENTRIES
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|setUp
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// ENTRIES
while|while
condition|(
name|size
operator|--
operator|>
literal|0
condition|)
block|{
comment|//noinspection unchecked
name|K
name|key
init|=
operator|(
name|K
operator|)
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
comment|//noinspection unchecked
name|V
name|val
init|=
operator|(
name|V
operator|)
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// THashMap
end_comment

end_unit

