begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.multipart
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/**  * This class is an adaptation of the Apache HttpClient implementation  *  * @link http://hc.apache.org/httpclient-3.x/  */
end_comment

begin_class
DECL|class|MultipartEncodingUtil
specifier|public
class|class
name|MultipartEncodingUtil
block|{
comment|/**      * Log object for this class.      */
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|ESLogger
name|LOG
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|MultipartEncodingUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getAsciiBytes
specifier|public
specifier|static
name|byte
index|[]
name|getAsciiBytes
parameter_list|(
name|String
name|data
parameter_list|)
block|{
try|try
block|{
return|return
name|data
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getAsciiString
specifier|public
specifier|static
name|String
name|getAsciiString
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter may not be null"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|"US-ASCII"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getBytes
specifier|public
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
specifier|final
name|String
name|data
parameter_list|,
name|String
name|charset
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"data may not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|charset
operator|==
literal|null
operator|||
name|charset
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"charset may not be null or empty"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|data
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unsupported encoding: "
operator|+
name|charset
operator|+
literal|". System encoding used."
argument_list|)
expr_stmt|;
block|}
return|return
name|data
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

