begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|ArrayStack
specifier|public
class|class
name|ArrayStack
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|stack
specifier|private
name|ArrayList
argument_list|<
name|T
argument_list|>
name|stack
decl_stmt|;
DECL|method|ArrayStack
specifier|public
name|ArrayStack
parameter_list|(
name|int
name|initSize
parameter_list|)
block|{
name|stack
operator|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|initSize
argument_list|)
expr_stmt|;
block|}
DECL|method|push
specifier|public
name|void
name|push
parameter_list|(
name|T
name|obj
parameter_list|)
block|{
name|stack
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
DECL|method|pop
specifier|public
name|T
name|pop
parameter_list|()
block|{
return|return
name|stack
operator|.
name|remove
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|stack
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

