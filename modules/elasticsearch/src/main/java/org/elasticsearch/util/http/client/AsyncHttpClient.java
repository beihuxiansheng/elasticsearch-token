begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|Request
operator|.
name|EntityWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * This class support asynchronous and synchronous HTTP request.  *  * To execute synchronous HTTP request, you just need to do  * {@code  * AsyncHttpClient c = new AsyncHttpClient();  * Future<Response> f = c.prepareGet("http://www.ning.com/").execute();  * }  *  * The code above will block until the response is fully received. To execute asynchronous HTTP request, you  * create an {@link AsyncHandler} or its abstract implementation, {@link org.elasticsearch.util.http.client.AsyncCompletionHandler}  *  * {@code  * AsyncHttpClient c = new AsyncHttpClient();  * Future<Response> f = c.prepareGet("http://www.ning.com/").execute(new AsyncCompletionHandler<Response>()&#123;  *  *&#64;Override  * public Response onCompleted(Response response) throws IOException&#123;  * // Do something  * return response;  *&#125;  *  *&#64;Override  * public void onThrowable(Throwable t)&#123;  *&#125;  *&#125;);  * Response response = f.get();  *  * // We are just interested to retrieve the status code.  * Future<Integer> f = c.prepareGet("http://www.ning.com/").execute(new AsyncCompletionHandler<Integer>()&#123;  *  *&#64;Override  * public Integer onCompleted(Response response) throws IOException&#123;  * // Do something  * return response.getStatusCode();  *&#125;  *  *&#64;Override  * public void onThrowable(Throwable t)&#123;  *&#125;  *&#125;);  * Integer statusCode = f.get();  * }  * The {@link AsyncCompletionHandler#onCompleted(org.elasticsearch.util.http.client.Response)} will be invoked once the http response has been fully read, which include  * the http headers and the response body. Note that the entire response will be buffered in memory.  *  * You can also have more control about the how the response is asynchronously processed by using a {@link AsyncHandler}  * {@code  * AsyncHttpClient c = new AsyncHttpClient();  * Future<String> f = c.prepareGet("http://www.ning.com/").execute(new AsyncHandler<String>()&#123;  * private StringBuilder builder = new StringBuilder();  *  *&#64;Override  * public void onStatusReceived(HttpResponseStatus s) throws Exception&#123;  * // The Status have been read  * // If you don't want to read the headers,body, or stop processing the response  * throw new ResponseComplete();  * }  *  *&#64;Override  * public void onHeadersReceived(HttpResponseHeaders bodyPart) throws Exception&#123;  * // The headers have been read  * // If you don't want to read the body, or stop processing the response  * throw new ResponseComplete();  * }  *&#64;Override  *  * public void onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception&#123;  * builder.append(new String(bodyPart));  *&#125;  *  *&#64;Override  * public String onCompleted() throws Exception&#123;  * // Will be invoked once the response has been fully read or a ResponseComplete exception  * // has been thrown.  * return builder.toString();  *&#125;  *  *&#64;Override  * public void onThrowable(Throwable t)&#123;  *&#125;  *&#125;);  *  * String bodyResponse = f.get();  * }  * From any {@link HttpContent} sub classses, you can asynchronously process the response status,headers and body and decide when to  * stop the processing the response by throwing a new {link ResponseComplete} at any moment.  *  * This class can also be used without the need of {@link AsyncHandler}</p>  * {@code  * AsyncHttpClient c = new AsyncHttpClient();  * Future<Response> f = c.prepareGet(TARGET_URL).execute();  * Response r = f.get();  * }  *  * Finally, you can configure the AsyncHttpClient using an {@link AsyncHttpClientConfig} instance</p>  * {@code  * AsyncHttpClient c = new AsyncHttpClient(new AsyncHttpClientConfig.Builder().setRequestTimeoutInMs(...).build());  * Future<Response> f = c.prepareGet(TARGET_URL).execute();  * Response r = f.get();  * }  *  * An instance of this class will cache every HTTP 1.1 connections and close them when the {@link AsyncHttpClientConfig#getIdleConnectionTimeoutInMs()}  * expires. This object can hold many persistent connections to different host.  */
end_comment

begin_class
DECL|class|AsyncHttpClient
specifier|public
class|class
name|AsyncHttpClient
block|{
DECL|field|DEFAULT_PROVIDER
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_PROVIDER
init|=
literal|"org.elasticsearch.util.http.client.providers.NettyAsyncHttpProvider"
decl_stmt|;
DECL|field|httpProvider
specifier|private
specifier|final
name|AsyncHttpProvider
argument_list|<
name|?
argument_list|>
name|httpProvider
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|AsyncHttpClientConfig
name|config
decl_stmt|;
comment|/**      * Create a new HTTP Asynchronous Client using the default {@link AsyncHttpClientConfig} configuration. The      * default {@link AsyncHttpProvider} will be used ({@link org.elasticsearch.util.http.client.providers.NettyAsyncHttpProvider}      */
DECL|method|AsyncHttpClient
specifier|public
name|AsyncHttpClient
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|AsyncHttpClientConfig
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new HTTP Asynchronous Client using an implementation of {@link AsyncHttpProvider} and      * the default {@link AsyncHttpClientConfig} configuration.      *      * @param provider a {@link AsyncHttpProvider}      */
DECL|method|AsyncHttpClient
specifier|public
name|AsyncHttpClient
parameter_list|(
name|AsyncHttpProvider
argument_list|<
name|?
argument_list|>
name|provider
parameter_list|)
block|{
name|this
argument_list|(
name|provider
argument_list|,
operator|new
name|AsyncHttpClientConfig
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new HTTP Asynchronous Client using a {@link AsyncHttpClientConfig} configuration and the      * {@link #DEFAULT_PROVIDER}      *      * @param config a {@link AsyncHttpClientConfig}      */
DECL|method|AsyncHttpClient
specifier|public
name|AsyncHttpClient
parameter_list|(
name|AsyncHttpClientConfig
name|config
parameter_list|)
block|{
name|this
argument_list|(
name|loadDefaultProvider
argument_list|(
name|DEFAULT_PROVIDER
argument_list|,
name|config
argument_list|)
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new HTTP Asynchronous Client using a {@link AsyncHttpClientConfig} configuration and      * and a {@link AsyncHttpProvider}.      *      * @param config       a {@link AsyncHttpClientConfig}      * @param httpProvider a {@link AsyncHttpProvider}      */
DECL|method|AsyncHttpClient
specifier|public
name|AsyncHttpClient
parameter_list|(
name|AsyncHttpProvider
argument_list|<
name|?
argument_list|>
name|httpProvider
parameter_list|,
name|AsyncHttpClientConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|httpProvider
operator|=
name|httpProvider
expr_stmt|;
block|}
comment|/**      * Create a new HTTP Asynchronous Client using a {@link AsyncHttpClientConfig} configuration and      * and a AsyncHttpProvider class' name.      *      * @param config        a {@link AsyncHttpClientConfig}      * @param providerClass a {@link AsyncHttpProvider}      */
DECL|method|AsyncHttpClient
specifier|public
name|AsyncHttpClient
parameter_list|(
name|String
name|providerClass
parameter_list|,
name|AsyncHttpClientConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
operator|new
name|AsyncHttpClientConfig
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpProvider
operator|=
name|loadDefaultProvider
argument_list|(
name|providerClass
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
DECL|class|BoundRequestBuilder
specifier|public
class|class
name|BoundRequestBuilder
extends|extends
name|RequestBuilderBase
argument_list|<
name|BoundRequestBuilder
argument_list|>
block|{
DECL|method|BoundRequestBuilder
specifier|private
name|BoundRequestBuilder
parameter_list|(
name|RequestType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|BoundRequestBuilder
operator|.
name|class
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|BoundRequestBuilder
specifier|private
name|BoundRequestBuilder
parameter_list|(
name|Request
name|prototype
parameter_list|)
block|{
name|super
argument_list|(
name|BoundRequestBuilder
operator|.
name|class
argument_list|,
name|prototype
argument_list|)
expr_stmt|;
block|}
DECL|method|execute
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|execute
parameter_list|(
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|AsyncHttpClient
operator|.
name|this
operator|.
name|executeRequest
argument_list|(
name|build
argument_list|()
argument_list|,
name|handler
argument_list|)
return|;
block|}
DECL|method|execute
specifier|public
name|Future
argument_list|<
name|Response
argument_list|>
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|AsyncHttpClient
operator|.
name|this
operator|.
name|executeRequest
argument_list|(
name|build
argument_list|()
argument_list|,
operator|new
name|AsyncCompletionHandlerBase
argument_list|()
argument_list|)
return|;
block|}
comment|// Note: For now we keep the delegates in place even though they are not needed
comment|//       since otherwise Clojure (and maybe other languages) won't be able to
comment|//       access these methods - see Clojure tickets 126 and 259
annotation|@
name|Override
DECL|method|addBodyPart
specifier|public
name|BoundRequestBuilder
name|addBodyPart
parameter_list|(
name|Part
name|part
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|super
operator|.
name|addBodyPart
argument_list|(
name|part
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addCookie
specifier|public
name|BoundRequestBuilder
name|addCookie
parameter_list|(
name|Cookie
name|cookie
parameter_list|)
block|{
return|return
name|super
operator|.
name|addCookie
argument_list|(
name|cookie
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addHeader
specifier|public
name|BoundRequestBuilder
name|addHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|super
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addParameter
specifier|public
name|BoundRequestBuilder
name|addParameter
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|super
operator|.
name|addParameter
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addQueryParameter
specifier|public
name|BoundRequestBuilder
name|addQueryParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|super
operator|.
name|addQueryParameter
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|Request
name|build
parameter_list|()
block|{
return|return
name|super
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setBody
specifier|public
name|BoundRequestBuilder
name|setBody
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|super
operator|.
name|setBody
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setBody
specifier|public
name|BoundRequestBuilder
name|setBody
parameter_list|(
name|EntityWriter
name|dataWriter
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|super
operator|.
name|setBody
argument_list|(
name|dataWriter
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setBody
specifier|public
name|BoundRequestBuilder
name|setBody
parameter_list|(
name|EntityWriter
name|dataWriter
parameter_list|)
block|{
return|return
name|super
operator|.
name|setBody
argument_list|(
name|dataWriter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setBody
specifier|public
name|BoundRequestBuilder
name|setBody
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|super
operator|.
name|setBody
argument_list|(
name|stream
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setBody
specifier|public
name|BoundRequestBuilder
name|setBody
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|super
operator|.
name|setBody
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setHeader
specifier|public
name|BoundRequestBuilder
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|super
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setHeaders
specifier|public
name|BoundRequestBuilder
name|setHeaders
parameter_list|(
name|Headers
name|headers
parameter_list|)
block|{
return|return
name|super
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setParameters
specifier|public
name|BoundRequestBuilder
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|super
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setParameters
specifier|public
name|BoundRequestBuilder
name|setParameters
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|super
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setUrl
specifier|public
name|BoundRequestBuilder
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
name|super
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setVirtualHost
specifier|public
name|BoundRequestBuilder
name|setVirtualHost
parameter_list|(
name|String
name|virtualHost
parameter_list|)
block|{
return|return
name|super
operator|.
name|setVirtualHost
argument_list|(
name|virtualHost
argument_list|)
return|;
block|}
block|}
comment|/**      * Return the asynchronouys {@link org.elasticsearch.util.http.client.AsyncHttpProvider}      *      * @return an {@link org.elasticsearch.util.http.client.AsyncHttpProvider}      */
DECL|method|getProvider
specifier|public
name|AsyncHttpProvider
argument_list|<
name|?
argument_list|>
name|getProvider
parameter_list|()
block|{
return|return
name|httpProvider
return|;
block|}
comment|/**      * Close the underlying connections.      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|httpProvider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finalize
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
comment|/**      * Return the {@link org.elasticsearch.util.http.client.AsyncHttpClientConfig}      *      * @return {@link org.elasticsearch.util.http.client.AsyncHttpClientConfig}      */
DECL|method|getConfig
specifier|public
name|AsyncHttpClientConfig
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
comment|/**      * Prepare an HTTP client GET request.      *      * @param url A well formed URL.      * @return {@link RequestBuilder}      */
DECL|method|prepareGet
specifier|public
name|BoundRequestBuilder
name|prepareGet
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
operator|new
name|BoundRequestBuilder
argument_list|(
name|RequestType
operator|.
name|GET
argument_list|)
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
return|;
block|}
comment|/**      * Prepare an HTTP client HEAD request.      *      * @param url A well formed URL.      * @return {@link RequestBuilder}      */
DECL|method|prepareHead
specifier|public
name|BoundRequestBuilder
name|prepareHead
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
operator|new
name|BoundRequestBuilder
argument_list|(
name|RequestType
operator|.
name|HEAD
argument_list|)
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
return|;
block|}
comment|/**      * Prepare an HTTP client POST request.      *      * @param url A well formed URL.      * @return {@link RequestBuilder}      */
DECL|method|preparePost
specifier|public
name|BoundRequestBuilder
name|preparePost
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
operator|new
name|BoundRequestBuilder
argument_list|(
name|RequestType
operator|.
name|POST
argument_list|)
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
return|;
block|}
comment|/**      * Prepare an HTTP client PUT request.      *      * @param url A well formed URL.      * @return {@link RequestBuilder}      */
DECL|method|preparePut
specifier|public
name|BoundRequestBuilder
name|preparePut
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
operator|new
name|BoundRequestBuilder
argument_list|(
name|RequestType
operator|.
name|PUT
argument_list|)
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
return|;
block|}
comment|/**      * Prepare an HTTP client DELETE request.      *      * @param url A well formed URL.      * @return {@link RequestBuilder}      */
DECL|method|prepareDelete
specifier|public
name|BoundRequestBuilder
name|prepareDelete
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
operator|new
name|BoundRequestBuilder
argument_list|(
name|RequestType
operator|.
name|DELETE
argument_list|)
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
return|;
block|}
comment|/**      * Construct a {@link RequestBuilder} using a {@link Request}      *      * @param request a {@link Request}      * @return {@link RequestBuilder}      */
DECL|method|prepareRequest
specifier|public
name|BoundRequestBuilder
name|prepareRequest
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
return|return
operator|new
name|BoundRequestBuilder
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**      * Execute an HTTP request.      *      * @param request {@link Request}      * @param handler an instance of {@link AsyncHandler}      * @param<T>     Type of the value that will be returned by the associated {@link java.util.concurrent.Future}      * @return a {@link Future} of type T      * @throws IOException      */
DECL|method|executeRequest
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|executeRequest
parameter_list|(
name|Request
name|request
parameter_list|,
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|httpProvider
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|handler
argument_list|)
return|;
block|}
comment|/**      * Execute an HTTP request.      *      * @param request {@link Request}      * @return a {@link Future} of type Response      * @throws IOException      */
DECL|method|executeRequest
specifier|public
name|Future
argument_list|<
name|Response
argument_list|>
name|executeRequest
parameter_list|(
name|Request
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|httpProvider
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCompletionHandlerBase
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|loadDefaultProvider
specifier|private
specifier|final
specifier|static
name|AsyncHttpProvider
argument_list|<
name|?
argument_list|>
name|loadDefaultProvider
parameter_list|(
name|String
name|className
parameter_list|,
name|AsyncHttpClientConfig
name|config
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|AsyncHttpProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|providerClass
init|=
operator|(
name|Class
argument_list|<
name|AsyncHttpProvider
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
return|return
operator|(
name|AsyncHttpProvider
argument_list|<
name|?
argument_list|>
operator|)
name|providerClass
operator|.
name|getDeclaredConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|AsyncHttpClientConfig
operator|.
name|class
block|}
argument_list|)
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|config
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

