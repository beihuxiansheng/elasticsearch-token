begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_comment
comment|/**  * This class is a copy of http://github.com/sonatype/wagon-ning/raw/master/src/main/java/org/apache/maven/wagon/providers/http/SslUtils.java  */
end_comment

begin_class
DECL|class|SslUtils
specifier|public
class|class
name|SslUtils
block|{
DECL|method|getSSLEngine
specifier|public
specifier|static
name|SSLEngine
name|getSSLEngine
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|SSLEngine
name|engine
init|=
literal|null
decl_stmt|;
name|SSLContext
name|context
init|=
name|getSSLContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|engine
operator|=
name|context
operator|.
name|createSSLEngine
argument_list|()
expr_stmt|;
name|engine
operator|.
name|setUseClientMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|engine
return|;
block|}
DECL|method|getSSLContext
specifier|static
name|SSLContext
name|getSSLContext
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|SSLConfig
name|config
init|=
operator|new
name|SSLConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|keyStoreLocation
operator|==
literal|null
condition|)
block|{
return|return
name|getLooseSSLContext
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getStrictSSLContext
argument_list|(
name|config
argument_list|)
return|;
block|}
block|}
DECL|method|getStrictSSLContext
specifier|static
name|SSLContext
name|getStrictSSLContext
parameter_list|(
name|SSLConfig
name|config
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|KeyStore
name|keyStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|config
operator|.
name|keyStoreType
argument_list|)
decl_stmt|;
name|InputStream
name|keystoreInputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|config
operator|.
name|keyStoreLocation
argument_list|)
decl_stmt|;
try|try
block|{
name|keyStore
operator|.
name|load
argument_list|(
name|keystoreInputStream
argument_list|,
operator|(
name|config
operator|.
name|keyStorePassword
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|config
operator|.
name|keyStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|keystoreInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|KeyManagerFactory
name|keyManagerFactory
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|config
operator|.
name|keyManagerAlgorithm
argument_list|)
decl_stmt|;
name|keyManagerFactory
operator|.
name|init
argument_list|(
name|keyStore
argument_list|,
operator|(
name|config
operator|.
name|keyManagerPassword
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|config
operator|.
name|keyManagerPassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|KeyManager
index|[]
name|keyManagers
init|=
name|keyManagerFactory
operator|.
name|getKeyManagers
argument_list|()
decl_stmt|;
name|KeyStore
name|trustStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|config
operator|.
name|trustStoreType
argument_list|)
decl_stmt|;
name|InputStream
name|truststoreInputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|config
operator|.
name|trustStoreLocation
argument_list|)
decl_stmt|;
try|try
block|{
name|trustStore
operator|.
name|load
argument_list|(
name|truststoreInputStream
argument_list|,
operator|(
name|config
operator|.
name|trustStorePassword
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|config
operator|.
name|trustStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|truststoreInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|TrustManagerFactory
name|trustManagerFactory
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|config
operator|.
name|trustManagerAlgorithm
argument_list|)
decl_stmt|;
name|trustManagerFactory
operator|.
name|init
argument_list|(
name|trustStore
argument_list|)
expr_stmt|;
name|TrustManager
index|[]
name|trustManagers
init|=
name|trustManagerFactory
operator|.
name|getTrustManagers
argument_list|()
decl_stmt|;
name|SSLContext
name|context
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|context
operator|.
name|init
argument_list|(
name|keyManagers
argument_list|,
name|trustManagers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|getLooseSSLContext
specifier|static
name|SSLContext
name|getLooseSSLContext
parameter_list|()
throws|throws
name|GeneralSecurityException
block|{
name|SSLContext
name|sslContext
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|sslContext
operator|.
name|init
argument_list|(
literal|null
argument_list|,
operator|new
name|TrustManager
index|[]
block|{
name|LooseTrustManager
operator|.
name|INSTANCE
block|}
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sslContext
return|;
block|}
DECL|class|LooseTrustManager
specifier|static
class|class
name|LooseTrustManager
implements|implements
name|X509TrustManager
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|LooseTrustManager
name|INSTANCE
init|=
operator|new
name|LooseTrustManager
argument_list|()
decl_stmt|;
DECL|method|getAcceptedIssuers
specifier|public
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|checkClientTrusted
specifier|public
name|void
name|checkClientTrusted
parameter_list|(
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|authType
parameter_list|)
block|{         }
DECL|method|checkServerTrusted
specifier|public
name|void
name|checkServerTrusted
parameter_list|(
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|authType
parameter_list|)
block|{         }
block|}
DECL|class|SSLConfig
specifier|private
specifier|final
specifier|static
class|class
name|SSLConfig
block|{
DECL|field|keyStoreLocation
specifier|public
name|String
name|keyStoreLocation
decl_stmt|;
DECL|field|keyStoreType
specifier|public
name|String
name|keyStoreType
init|=
literal|"JKS"
decl_stmt|;
DECL|field|keyStorePassword
specifier|public
name|String
name|keyStorePassword
init|=
literal|"changeit"
decl_stmt|;
DECL|field|keyManagerAlgorithm
specifier|public
name|String
name|keyManagerAlgorithm
init|=
literal|"SunX509"
decl_stmt|;
DECL|field|keyManagerPassword
specifier|public
name|String
name|keyManagerPassword
init|=
literal|"changeit"
decl_stmt|;
DECL|field|trustStoreLocation
specifier|public
name|String
name|trustStoreLocation
decl_stmt|;
DECL|field|trustStoreType
specifier|public
name|String
name|trustStoreType
init|=
literal|"JKS"
decl_stmt|;
DECL|field|trustStorePassword
specifier|public
name|String
name|trustStorePassword
init|=
literal|"changeit"
decl_stmt|;
DECL|field|trustManagerAlgorithm
specifier|public
name|String
name|trustManagerAlgorithm
init|=
literal|"SunX509"
decl_stmt|;
DECL|method|SSLConfig
specifier|public
name|SSLConfig
parameter_list|()
block|{
name|keyStoreLocation
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStore"
argument_list|)
expr_stmt|;
name|keyStorePassword
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStorePassword"
argument_list|,
literal|"changeit"
argument_list|)
expr_stmt|;
name|keyStoreType
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStoreType"
argument_list|,
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
expr_stmt|;
name|keyManagerAlgorithm
operator|=
name|Security
operator|.
name|getProperty
argument_list|(
literal|"ssl.KeyManagerFactory.algorithm"
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyManagerAlgorithm
operator|==
literal|null
condition|)
block|{
name|keyManagerAlgorithm
operator|=
literal|"SunX509"
expr_stmt|;
block|}
name|keyManagerPassword
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStorePassword"
argument_list|,
literal|"changeit"
argument_list|)
expr_stmt|;
name|trustStoreLocation
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|)
expr_stmt|;
if|if
condition|(
name|trustStoreLocation
operator|==
literal|null
condition|)
block|{
name|trustStoreLocation
operator|=
name|keyStoreLocation
expr_stmt|;
name|trustStorePassword
operator|=
name|keyStorePassword
expr_stmt|;
name|trustStoreType
operator|=
name|keyStoreType
expr_stmt|;
block|}
else|else
block|{
name|trustStorePassword
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.trustStorePassword"
argument_list|,
literal|"changeit"
argument_list|)
expr_stmt|;
name|trustStoreType
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.trustStoreType"
argument_list|,
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|trustManagerAlgorithm
operator|=
name|Security
operator|.
name|getProperty
argument_list|(
literal|"ssl.TrustManagerFactory.algorithm"
argument_list|)
expr_stmt|;
if|if
condition|(
name|trustManagerAlgorithm
operator|==
literal|null
condition|)
block|{
name|trustManagerAlgorithm
operator|=
literal|"SunX509"
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

