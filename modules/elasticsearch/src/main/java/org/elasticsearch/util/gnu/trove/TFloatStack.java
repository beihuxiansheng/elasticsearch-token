begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_comment
comment|/**  * A stack of float primitives, backed by a TFloatArrayList.  *  * @author Eric D. Friedman, Rob Eden  * @version $Id: PStack.template,v 1.2 2007/02/28 23:03:57 robeden Exp $  */
end_comment

begin_class
DECL|class|TFloatStack
specifier|public
class|class
name|TFloatStack
block|{
comment|/**      * the list used to hold the stack values.      */
DECL|field|_list
specifier|protected
name|TFloatArrayList
name|_list
decl_stmt|;
DECL|field|DEFAULT_CAPACITY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CAPACITY
init|=
name|TFloatArrayList
operator|.
name|DEFAULT_CAPACITY
decl_stmt|;
comment|/**      * Creates a new<code>TFloatStack</code> instance with the default      * capacity.      */
DECL|method|TFloatStack
specifier|public
name|TFloatStack
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_CAPACITY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>TFloatStack</code> instance with the      * specified capacity.      *      * @param capacity the initial depth of the stack      */
DECL|method|TFloatStack
specifier|public
name|TFloatStack
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|_list
operator|=
operator|new
name|TFloatArrayList
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pushes the value onto the top of the stack.      *      * @param val an<code>float</code> value      */
DECL|method|push
specifier|public
name|void
name|push
parameter_list|(
name|float
name|val
parameter_list|)
block|{
name|_list
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes and returns the value at the top of the stack.      *      * @return an<code>float</code> value      */
DECL|method|pop
specifier|public
name|float
name|pop
parameter_list|()
block|{
return|return
name|_list
operator|.
name|remove
argument_list|(
name|_list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Returns the value at the top of the stack.      *      * @return an<code>float</code> value      */
DECL|method|peek
specifier|public
name|float
name|peek
parameter_list|()
block|{
return|return
name|_list
operator|.
name|get
argument_list|(
name|_list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Returns the current depth of the stack.      */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|_list
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Clears the stack, reseting its capacity to the default.      */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|_list
operator|.
name|clear
argument_list|(
name|DEFAULT_CAPACITY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clears the stack without releasing its internal capacity allocation.      */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|_list
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**      * Copies the contents of the stack into a native array. Note that this will NOT      * pop them out of the stack.      *      * @return an<code>float[]</code> value      */
DECL|method|toNativeArray
specifier|public
name|float
index|[]
name|toNativeArray
parameter_list|()
block|{
return|return
name|_list
operator|.
name|toNativeArray
argument_list|()
return|;
block|}
comment|/**      * Copies a slice of the list into a native array. Note that this will NOT      * pop them out of the stack.      *      * @param dest the array to copy into.      */
DECL|method|toNativeArray
specifier|public
name|void
name|toNativeArray
parameter_list|(
name|float
index|[]
name|dest
parameter_list|)
block|{
name|_list
operator|.
name|toNativeArray
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// TFloatStack
end_comment

end_unit

