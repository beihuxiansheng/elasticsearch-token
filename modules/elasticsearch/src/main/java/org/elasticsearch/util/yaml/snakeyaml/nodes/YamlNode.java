begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.nodes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|Mark
import|;
end_import

begin_comment
comment|/**  * Base class for all nodes.  *<p>  * The nodes form the node-graph described in the<a  * href="http://yaml.org/spec/1.1/">YAML Specification</a>.  *</p>  *<p>  * While loading, the node graph is usually created by the  * {@link org.elasticsearch.util.yaml.snakeyaml.composer.Composer}, and later transformed into  * application specific Java classes by the classes from the  * {@link org.elasticsearch.util.yaml.snakeyaml.constructor} package.  *</p>  */
end_comment

begin_class
DECL|class|YamlNode
specifier|public
specifier|abstract
class|class
name|YamlNode
block|{
DECL|field|tag
specifier|private
name|Tag
name|tag
decl_stmt|;
DECL|field|startMark
specifier|private
name|Mark
name|startMark
decl_stmt|;
DECL|field|endMark
specifier|protected
name|Mark
name|endMark
decl_stmt|;
DECL|field|type
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|type
decl_stmt|;
DECL|field|twoStepsConstruction
specifier|private
name|boolean
name|twoStepsConstruction
decl_stmt|;
comment|/**      * true when the tag is assigned by the resolver      */
DECL|field|resolved
specifier|protected
name|boolean
name|resolved
decl_stmt|;
DECL|field|useClassConstructor
specifier|protected
name|Boolean
name|useClassConstructor
decl_stmt|;
DECL|method|YamlNode
specifier|public
name|YamlNode
parameter_list|(
name|Tag
name|tag
parameter_list|,
name|Mark
name|startMark
parameter_list|,
name|Mark
name|endMark
parameter_list|)
block|{
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|this
operator|.
name|startMark
operator|=
name|startMark
expr_stmt|;
name|this
operator|.
name|endMark
operator|=
name|endMark
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Object
operator|.
name|class
expr_stmt|;
name|this
operator|.
name|twoStepsConstruction
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|resolved
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|useClassConstructor
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Tag of this node.      *<p>      * Every node has a tag assigned. The tag is either local or global.      *      * @return Tag of this node.      */
DECL|method|getTag
specifier|public
name|Tag
name|getTag
parameter_list|()
block|{
return|return
name|this
operator|.
name|tag
return|;
block|}
DECL|method|getEndMark
specifier|public
name|Mark
name|getEndMark
parameter_list|()
block|{
return|return
name|endMark
return|;
block|}
comment|/**      * For error reporting.      *      * @return scalar, sequence, mapping      * @see class variable 'id' in PyYAML      */
DECL|method|getNodeId
specifier|public
specifier|abstract
name|NodeId
name|getNodeId
parameter_list|()
function_decl|;
DECL|method|getStartMark
specifier|public
name|Mark
name|getStartMark
parameter_list|()
block|{
return|return
name|startMark
return|;
block|}
DECL|method|setTag
specifier|public
name|void
name|setTag
parameter_list|(
name|Tag
name|tag
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"tag in a Node is required."
argument_list|)
throw|;
block|}
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
comment|/*      * It is not allowed to overwrite this method. Two Nodes are never equal.      */
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
DECL|method|getType
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType
specifier|public
name|void
name|setType
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|setTwoStepsConstruction
specifier|public
name|void
name|setTwoStepsConstruction
parameter_list|(
name|boolean
name|twoStepsConstruction
parameter_list|)
block|{
name|this
operator|.
name|twoStepsConstruction
operator|=
name|twoStepsConstruction
expr_stmt|;
block|}
comment|/**      * Indicates if this node must be constructed in two steps.      *<p>      * Two-step construction is required whenever a node is a child (direct or      * indirect) of it self. That is, if a recursive structure is build using      * anchors and aliases.      *</p>      *<p>      * Set by {@link org.elasticsearch.util.yaml.snakeyaml.composer.Composer}, used during the      * construction process.      *</p>      *<p>      * Only relevant during loading.      *</p>      *      * @return<code>true</code> if the node is self referenced.      */
DECL|method|isTwoStepsConstruction
specifier|public
name|boolean
name|isTwoStepsConstruction
parameter_list|()
block|{
return|return
name|twoStepsConstruction
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|useClassConstructor
specifier|public
name|boolean
name|useClassConstructor
parameter_list|()
block|{
if|if
condition|(
name|useClassConstructor
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isResolved
argument_list|()
operator|&&
operator|!
name|Object
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|tag
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|NULL
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|isCompatible
argument_list|(
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// the tag is compatible with the runtime class
comment|// the tag will be ignored
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|useClassConstructor
operator|.
name|booleanValue
argument_list|()
return|;
block|}
DECL|method|setUseClassConstructor
specifier|public
name|void
name|setUseClassConstructor
parameter_list|(
name|Boolean
name|useClassConstructor
parameter_list|)
block|{
name|this
operator|.
name|useClassConstructor
operator|=
name|useClassConstructor
expr_stmt|;
block|}
comment|/**      * Indicates if the tag was added by      * {@link org.elasticsearch.util.yaml.snakeyaml.resolver.Resolver}.      *      * @return<code>true</code> if the tag of this node was resolved</code>      */
DECL|method|isResolved
specifier|public
name|boolean
name|isResolved
parameter_list|()
block|{
return|return
name|resolved
return|;
block|}
block|}
end_class

end_unit

