begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * Written by Cliff Click and released to the public domain, as explained at  * http://creativecommons.org/licenses/publicdomain  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.concurrent.highscalelib
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|highscalelib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A simple implementation of {@link java.util.Map.Entry}.  * Does not implement {@link java.util.Map.Entry.setValue}, that is done by users of the class.  *  * @author Cliff Click  * @param<TypeK> the type of keys maintained by this map  * @param<TypeV> the type of mapped values  * @since 1.5  */
end_comment

begin_class
DECL|class|AbstractEntry
specifier|abstract
class|class
name|AbstractEntry
parameter_list|<
name|TypeK
parameter_list|,
name|TypeV
parameter_list|>
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|TypeK
argument_list|,
name|TypeV
argument_list|>
block|{
comment|/**      * Strongly typed key      */
DECL|field|_key
specifier|protected
specifier|final
name|TypeK
name|_key
decl_stmt|;
comment|/**      * Strongly typed value      */
DECL|field|_val
specifier|protected
name|TypeV
name|_val
decl_stmt|;
DECL|method|AbstractEntry
specifier|public
name|AbstractEntry
parameter_list|(
specifier|final
name|TypeK
name|key
parameter_list|,
specifier|final
name|TypeV
name|val
parameter_list|)
block|{
name|_key
operator|=
name|key
expr_stmt|;
name|_val
operator|=
name|val
expr_stmt|;
block|}
DECL|method|AbstractEntry
specifier|public
name|AbstractEntry
parameter_list|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|TypeK
argument_list|,
name|TypeV
argument_list|>
name|e
parameter_list|)
block|{
name|_key
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|_val
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
comment|/**      * Return "key=val" string      */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|_key
operator|+
literal|"="
operator|+
name|_val
return|;
block|}
comment|/**      * Return key      */
DECL|method|getKey
specifier|public
name|TypeK
name|getKey
parameter_list|()
block|{
return|return
name|_key
return|;
block|}
comment|/**      * Return val      */
DECL|method|getValue
specifier|public
name|TypeV
name|getValue
parameter_list|()
block|{
return|return
name|_val
return|;
block|}
comment|/**      * Equal if the underlying key& value are equal      */
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Map
operator|.
name|Entry
operator|)
condition|)
return|return
literal|false
return|;
specifier|final
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
return|return
name|eq
argument_list|(
name|_key
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|eq
argument_list|(
name|_val
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Compute<code>"key.hashCode() ^ val.hashCode()"</code>      */
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
operator|(
name|_key
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|_key
operator|.
name|hashCode
argument_list|()
operator|)
operator|^
operator|(
operator|(
name|_val
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|_val
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
DECL|method|eq
specifier|private
specifier|static
name|boolean
name|eq
parameter_list|(
specifier|final
name|Object
name|o1
parameter_list|,
specifier|final
name|Object
name|o2
parameter_list|)
block|{
return|return
operator|(
name|o1
operator|==
literal|null
condition|?
name|o2
operator|==
literal|null
else|:
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

