begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.url
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|url
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|Url
specifier|public
class|class
name|Url
implements|implements
name|Cloneable
implements|,
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2187287725357847401L
decl_stmt|;
DECL|enum|Protocol
specifier|public
enum|enum
name|Protocol
block|{
DECL|enum constant|HTTP
name|HTTP
argument_list|(
literal|80
argument_list|)
block|,
DECL|enum constant|HTTPS
name|HTTPS
argument_list|(
literal|443
argument_list|)
block|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|method|Protocol
name|Protocol
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getPort
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
block|}
DECL|field|scheme
specifier|private
name|String
name|scheme
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|params
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|params
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Constructs a Url object from the given url string. The string is expected to be compliant with the URL RFC      * and all relevant parts need to be properly url-encoded      *      * @param value the string      * @return a url object      * @throws MalformedURLException      */
DECL|method|valueOf
specifier|public
specifier|static
name|Url
name|valueOf
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|Url
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
comment|// url.getPort() return -1 rather than default for the protocol/scheme if no port is specified.
name|url
operator|.
name|getPort
argument_list|()
operator|>
literal|0
condition|?
name|url
operator|.
name|getPort
argument_list|()
else|:
name|Protocol
operator|.
name|valueOf
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|,
name|URLDecoder
operator|.
name|decode
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
name|url
operator|.
name|getQuery
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Constructs a Url object from the given url string parts. The parts are expected to be compliant with the URL RFC      * and need to be properly url-encoded      */
DECL|method|valueOf
specifier|public
specifier|static
name|Url
name|valueOf
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
return|return
name|Url
operator|.
name|valueOf
argument_list|(
name|scheme
operator|+
literal|"://"
operator|+
name|host
operator|+
name|uri
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Resolves 'path' with respect to a given base url      */
DECL|method|valueOf
specifier|public
specifier|static
name|Url
name|valueOf
parameter_list|(
name|Url
name|base
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|MalformedURLException
block|{
specifier|final
name|Url
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|uri
operator|.
name|matches
argument_list|(
literal|"[\\p{Alpha}][\\p{Alnum}-.+_]+://.+"
argument_list|)
condition|)
block|{
comment|// relative url?
name|result
operator|=
name|base
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// relative to root?
name|result
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// relative to current dir
name|String
name|path
init|=
name|base
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
operator|+
literal|1
argument_list|)
operator|+
name|uri
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
literal|"/"
operator|+
name|uri
expr_stmt|;
block|}
name|result
operator|.
name|setUri
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// uri is absolute
name|result
operator|=
name|Url
operator|.
name|valueOf
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|Url
specifier|private
name|Url
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|params
parameter_list|)
block|{
name|setScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|params
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|Url
specifier|public
name|Url
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|query
parameter_list|)
block|{
name|setScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|setQueryString
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|getScheme
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
DECL|method|setScheme
specifier|public
name|void
name|setScheme
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|Protocol
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal scheme used ["
operator|+
name|s
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|scheme
operator|=
name|s
expr_stmt|;
block|}
DECL|method|getProtocol
specifier|public
name|Protocol
name|getProtocol
parameter_list|()
block|{
return|return
name|Protocol
operator|.
name|valueOf
argument_list|(
name|scheme
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Gets the path part of this url. The value is url-decoded.      *      * @return he path part of this url. The value is url-decoded.      */
DECL|method|getPath
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|setPath
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|getPort
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getHost
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
DECL|method|setBaseUrl
specifier|public
name|void
name|setBaseUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^:]+)://([^:]+)(:([0-9]+))?"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid url: "
operator|+
name|url
argument_list|)
throw|;
block|}
name|setScheme
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|setHost
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|port
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|port
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Protocol
name|protocol
init|=
name|getProtocol
argument_list|()
decl_stmt|;
name|this
operator|.
name|port
operator|=
name|protocol
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getBaseUrl
specifier|public
name|String
name|getBaseUrl
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getLocation
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|int
name|defaultPort
decl_stmt|;
try|try
block|{
name|Protocol
name|protocol
init|=
name|getProtocol
argument_list|()
decl_stmt|;
name|defaultPort
operator|=
name|protocol
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to fetch protocol"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|port
operator|!=
name|defaultPort
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|setUri
specifier|public
name|void
name|setUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|int
name|index
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|path
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|String
name|query
init|=
name|uri
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|setQueryString
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|uri
expr_stmt|;
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getUri
specifier|public
name|String
name|getUri
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Return the URL string, but without any parameters      *      * @return a string      */
DECL|method|toStringWithoutParams
specifier|public
name|String
name|toStringWithoutParams
parameter_list|()
block|{
return|return
operator|new
name|Url
argument_list|(
name|scheme
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|path
argument_list|,
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parseParameters
specifier|private
name|void
name|parseParameters
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|"&"
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
index|[]
name|param
init|=
name|token
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|name
init|=
name|param
index|[
literal|0
index|]
decl_stmt|;
name|String
name|value
init|=
name|param
operator|.
name|length
operator|>
literal|1
condition|?
name|urlDecode
argument_list|(
name|param
index|[
literal|1
index|]
argument_list|)
else|:
literal|null
decl_stmt|;
comment|// null case distinguishes between ?name= and ?name
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addParameter
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|urlDecode
specifier|private
name|String
name|urlDecode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// this should not be possible
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should never happen: UTF-8 encoding is unsupported."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|setParameter
specifier|public
name|void
name|setParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|removeParameter
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|addParameter
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * reset the parameters list.      */
DECL|method|clearParameters
specifier|public
name|void
name|clearParameters
parameter_list|()
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|setParameter
specifier|public
name|void
name|setParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|setParameter
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addParameter
specifier|public
name|void
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|//params.add(new Pair<String, String>(name, value));
block|}
DECL|method|getParameter
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getParameters
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParameters
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getParameters
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|params
return|;
block|}
DECL|method|removeParameter
specifier|public
name|void
name|removeParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|params
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|setQueryString
specifier|public
name|void
name|setQueryString
parameter_list|(
name|String
name|query
parameter_list|)
block|{
comment|// TODO: don't parse until addParameter/setParameter/removeParameter is called
name|parseParameters
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|getQueryString
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
comment|// TODO: cache query string
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|i
init|=
name|params
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|param
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|param
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|j
init|=
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|value
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|value
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|clone
specifier|public
name|Url
name|clone
parameter_list|()
block|{
return|return
operator|new
name|Url
argument_list|(
name|scheme
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|path
argument_list|,
name|params
argument_list|)
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|// TODO: we should compare piece by piece. Argument ordering shouldn't affect equality
return|return
name|obj
operator|instanceof
name|Url
operator|&&
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Is the given Url string in a valid format?      *      * @param url      * @return true if valid      */
DECL|method|isValidUrl
specifier|public
specifier|static
name|boolean
name|isValidUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
try|try
block|{
name|Url
operator|.
name|valueOf
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

