begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.collection
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|collection
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_class
DECL|class|Pair
specifier|public
class|class
name|Pair
parameter_list|<
name|FirstType
parameter_list|,
name|SecondType
parameter_list|>
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4403264592023348398L
decl_stmt|;
DECL|field|firstValue
specifier|private
specifier|final
name|FirstType
name|firstValue
decl_stmt|;
DECL|field|secondValue
specifier|private
specifier|final
name|SecondType
name|secondValue
decl_stmt|;
DECL|method|Pair
specifier|public
name|Pair
parameter_list|(
name|FirstType
name|v1
parameter_list|,
name|SecondType
name|v2
parameter_list|)
block|{
name|firstValue
operator|=
name|v1
expr_stmt|;
name|secondValue
operator|=
name|v2
expr_stmt|;
block|}
DECL|method|getFirst
specifier|public
name|FirstType
name|getFirst
parameter_list|()
block|{
return|return
name|firstValue
return|;
block|}
DECL|method|getSecond
specifier|public
name|SecondType
name|getSecond
parameter_list|()
block|{
return|return
name|secondValue
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Pair("
operator|+
name|firstValue
operator|+
literal|", "
operator|+
name|secondValue
operator|+
literal|")"
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|final
name|Pair
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|pair
init|=
operator|(
name|Pair
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|firstValue
operator|!=
literal|null
condition|?
name|firstValue
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|firstValue
argument_list|)
else|:
name|pair
operator|.
name|firstValue
operator|==
literal|null
operator|)
operator|&&
operator|(
name|secondValue
operator|!=
literal|null
condition|?
name|secondValue
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|secondValue
argument_list|)
else|:
name|pair
operator|.
name|secondValue
operator|==
literal|null
operator|)
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
decl_stmt|;
name|result
operator|=
operator|(
name|firstValue
operator|!=
literal|null
condition|?
name|firstValue
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|29
operator|*
name|result
operator|+
operator|(
name|secondValue
operator|!=
literal|null
condition|?
name|secondValue
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|of
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Pair
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
return|;
block|}
block|}
end_class

end_unit

