begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.gnu.trove
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/*  * Modified for Trove to use the java.util.Arrays sort/search  * algorithms instead of those provided with colt.  */
end_comment

begin_comment
comment|/**  * Used to keep hash table capacities prime numbers.  * Not of interest for users; only for implementors of hashtables.  *<p/>  *<p>Choosing prime numbers as hash table capacities is a good idea  * to keep them working fast, particularly under hash table  * expansions.  *<p/>  *<p>However, JDK 1.2, JGL 3.1 and many other toolkits do nothing to  * keep capacities prime.  This class provides efficient means to  * choose prime capacities.  *<p/>  *<p>Choosing a prime is<tt>O(log 300)</tt> (binary search in a list  * of 300 ints).  Memory requirements: 1 KB static memory.  *  * @author wolfgang.hoschek@cern.ch  * @version 1.0, 09/24/99  */
end_comment

begin_class
DECL|class|PrimeFinder
specifier|public
specifier|final
class|class
name|PrimeFinder
block|{
comment|/**      * The largest prime this class can generate; currently equal to      *<tt>Integer.MAX_VALUE</tt>.      */
DECL|field|largestPrime
specifier|public
specifier|static
specifier|final
name|int
name|largestPrime
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|//yes, it is prime.
comment|/**      * The prime number list consists of 11 chunks.      *<p/>      * Each chunk contains prime numbers.      *<p/>      * A chunk starts with a prime P1. The next element is a prime      * P2. P2 is the smallest prime for which holds: P2>= 2*P1.      *<p/>      * The next element is P3, for which the same holds with respect      * to P2, and so on.      *<p/>      * Chunks are chosen such that for any desired capacity>= 1000      * the list includes a prime number<= desired capacity * 1.11.      *<p/>      * Therefore, primes can be retrieved which are quite close to any      * desired capacity, which in turn avoids wasting memory.      *<p/>      * For example, the list includes      * 1039,1117,1201,1277,1361,1439,1523,1597,1759,1907,2081.      *<p/>      * So if you need a prime>= 1040, you will find a prime<=      * 1040*1.11=1154.      *<p/>      * Chunks are chosen such that they are optimized for a hashtable      * growthfactor of 2.0;      *<p/>      * If your hashtable has such a growthfactor then, after initially      * "rounding to a prime" upon hashtable construction, it will      * later expand to prime capacities such that there exist no      * better primes.      *<p/>      * In total these are about 32*10=320 numbers -> 1 KB of static      * memory needed.      *<p/>      * If you are stingy, then delete every second or fourth chunk.      */
DECL|field|primeCapacities
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|primeCapacities
init|=
block|{
comment|//chunk #0
name|largestPrime
block|,
comment|//chunk #1
literal|5
block|,
literal|11
block|,
literal|23
block|,
literal|47
block|,
literal|97
block|,
literal|197
block|,
literal|397
block|,
literal|797
block|,
literal|1597
block|,
literal|3203
block|,
literal|6421
block|,
literal|12853
block|,
literal|25717
block|,
literal|51437
block|,
literal|102877
block|,
literal|205759
block|,
literal|411527
block|,
literal|823117
block|,
literal|1646237
block|,
literal|3292489
block|,
literal|6584983
block|,
literal|13169977
block|,
literal|26339969
block|,
literal|52679969
block|,
literal|105359939
block|,
literal|210719881
block|,
literal|421439783
block|,
literal|842879579
block|,
literal|1685759167
block|,
comment|//chunk #2
literal|433
block|,
literal|877
block|,
literal|1759
block|,
literal|3527
block|,
literal|7057
block|,
literal|14143
block|,
literal|28289
block|,
literal|56591
block|,
literal|113189
block|,
literal|226379
block|,
literal|452759
block|,
literal|905551
block|,
literal|1811107
block|,
literal|3622219
block|,
literal|7244441
block|,
literal|14488931
block|,
literal|28977863
block|,
literal|57955739
block|,
literal|115911563
block|,
literal|231823147
block|,
literal|463646329
block|,
literal|927292699
block|,
literal|1854585413
block|,
comment|//chunk #3
literal|953
block|,
literal|1907
block|,
literal|3821
block|,
literal|7643
block|,
literal|15287
block|,
literal|30577
block|,
literal|61169
block|,
literal|122347
block|,
literal|244703
block|,
literal|489407
block|,
literal|978821
block|,
literal|1957651
block|,
literal|3915341
block|,
literal|7830701
block|,
literal|15661423
block|,
literal|31322867
block|,
literal|62645741
block|,
literal|125291483
block|,
literal|250582987
block|,
literal|501165979
block|,
literal|1002331963
block|,
literal|2004663929
block|,
comment|//chunk #4
literal|1039
block|,
literal|2081
block|,
literal|4177
block|,
literal|8363
block|,
literal|16729
block|,
literal|33461
block|,
literal|66923
block|,
literal|133853
block|,
literal|267713
block|,
literal|535481
block|,
literal|1070981
block|,
literal|2141977
block|,
literal|4283963
block|,
literal|8567929
block|,
literal|17135863
block|,
literal|34271747
block|,
literal|68543509
block|,
literal|137087021
block|,
literal|274174111
block|,
literal|548348231
block|,
literal|1096696463
block|,
comment|//chunk #5
literal|31
block|,
literal|67
block|,
literal|137
block|,
literal|277
block|,
literal|557
block|,
literal|1117
block|,
literal|2237
block|,
literal|4481
block|,
literal|8963
block|,
literal|17929
block|,
literal|35863
block|,
literal|71741
block|,
literal|143483
block|,
literal|286973
block|,
literal|573953
block|,
literal|1147921
block|,
literal|2295859
block|,
literal|4591721
block|,
literal|9183457
block|,
literal|18366923
block|,
literal|36733847
block|,
literal|73467739
block|,
literal|146935499
block|,
literal|293871013
block|,
literal|587742049
block|,
literal|1175484103
block|,
comment|//chunk #6
literal|599
block|,
literal|1201
block|,
literal|2411
block|,
literal|4831
block|,
literal|9677
block|,
literal|19373
block|,
literal|38747
block|,
literal|77509
block|,
literal|155027
block|,
literal|310081
block|,
literal|620171
block|,
literal|1240361
block|,
literal|2480729
block|,
literal|4961459
block|,
literal|9922933
block|,
literal|19845871
block|,
literal|39691759
block|,
literal|79383533
block|,
literal|158767069
block|,
literal|317534141
block|,
literal|635068283
block|,
literal|1270136683
block|,
comment|//chunk #7
literal|311
block|,
literal|631
block|,
literal|1277
block|,
literal|2557
block|,
literal|5119
block|,
literal|10243
block|,
literal|20507
block|,
literal|41017
block|,
literal|82037
block|,
literal|164089
block|,
literal|328213
block|,
literal|656429
block|,
literal|1312867
block|,
literal|2625761
block|,
literal|5251529
block|,
literal|10503061
block|,
literal|21006137
block|,
literal|42012281
block|,
literal|84024581
block|,
literal|168049163
block|,
literal|336098327
block|,
literal|672196673
block|,
literal|1344393353
block|,
comment|//chunk #8
literal|3
block|,
literal|7
block|,
literal|17
block|,
literal|37
block|,
literal|79
block|,
literal|163
block|,
literal|331
block|,
literal|673
block|,
literal|1361
block|,
literal|2729
block|,
literal|5471
block|,
literal|10949
block|,
literal|21911
block|,
literal|43853
block|,
literal|87719
block|,
literal|175447
block|,
literal|350899
block|,
literal|701819
block|,
literal|1403641
block|,
literal|2807303
block|,
literal|5614657
block|,
literal|11229331
block|,
literal|22458671
block|,
literal|44917381
block|,
literal|89834777
block|,
literal|179669557
block|,
literal|359339171
block|,
literal|718678369
block|,
literal|1437356741
block|,
comment|//chunk #9
literal|43
block|,
literal|89
block|,
literal|179
block|,
literal|359
block|,
literal|719
block|,
literal|1439
block|,
literal|2879
block|,
literal|5779
block|,
literal|11579
block|,
literal|23159
block|,
literal|46327
block|,
literal|92657
block|,
literal|185323
block|,
literal|370661
block|,
literal|741337
block|,
literal|1482707
block|,
literal|2965421
block|,
literal|5930887
block|,
literal|11861791
block|,
literal|23723597
block|,
literal|47447201
block|,
literal|94894427
block|,
literal|189788857
block|,
literal|379577741
block|,
literal|759155483
block|,
literal|1518310967
block|,
comment|//chunk #10
literal|379
block|,
literal|761
block|,
literal|1523
block|,
literal|3049
block|,
literal|6101
block|,
literal|12203
block|,
literal|24407
block|,
literal|48817
block|,
literal|97649
block|,
literal|195311
block|,
literal|390647
block|,
literal|781301
block|,
literal|1562611
block|,
literal|3125257
block|,
literal|6250537
block|,
literal|12501169
block|,
literal|25002389
block|,
literal|50004791
block|,
literal|100009607
block|,
literal|200019221
block|,
literal|400038451
block|,
literal|800076929
block|,
literal|1600153859
block|}
decl_stmt|;
static|static
block|{
comment|//initializer
comment|// The above prime numbers are formatted for human readability.
comment|// To find numbers fast, we sort them once and for all.
name|Arrays
operator|.
name|sort
argument_list|(
name|primeCapacities
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a prime number which is<code>&gt;= desiredCapacity</code>      * and very close to<code>desiredCapacity</code> (within 11% if      *<code>desiredCapacity&gt;= 1000</code>).      *      * @param desiredCapacity the capacity desired by the user.      * @return the capacity which should be used for a hashtable.      */
DECL|method|nextPrime
specifier|public
specifier|static
specifier|final
name|int
name|nextPrime
parameter_list|(
name|int
name|desiredCapacity
parameter_list|)
block|{
name|int
name|i
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|primeCapacities
argument_list|,
name|desiredCapacity
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
comment|// desired capacity not found, choose next prime greater
comment|// than desired capacity
name|i
operator|=
operator|-
name|i
operator|-
literal|1
expr_stmt|;
comment|// remember the semantics of binarySearch...
block|}
return|return
name|primeCapacities
index|[
name|i
index|]
return|;
block|}
block|}
end_class

end_unit

