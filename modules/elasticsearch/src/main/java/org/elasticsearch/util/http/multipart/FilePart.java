begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.multipart
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class is an adaptation of the Apache HttpClient implementation  *  * @link http://hc.apache.org/httpclient-3.x/  */
end_comment

begin_class
DECL|class|FilePart
specifier|public
class|class
name|FilePart
extends|extends
name|PartBase
block|{
comment|/**      * Default content encoding of file attachments.      */
DECL|field|DEFAULT_CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONTENT_TYPE
init|=
literal|"application/octet-stream"
decl_stmt|;
comment|/**      * Default charset of file attachments.      */
DECL|field|DEFAULT_CHARSET
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CHARSET
init|=
literal|"ISO-8859-1"
decl_stmt|;
comment|/**      * Default transfer encoding of file attachments.      */
DECL|field|DEFAULT_TRANSFER_ENCODING
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TRANSFER_ENCODING
init|=
literal|"binary"
decl_stmt|;
comment|/**      * Log object for this class.      */
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|ESLogger
name|LOG
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|FilePart
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Attachment's file name      */
DECL|field|FILE_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|FILE_NAME
init|=
literal|"; filename="
decl_stmt|;
comment|/**      * Attachment's file name as a byte array      */
DECL|field|FILE_NAME_BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FILE_NAME_BYTES
init|=
name|MultipartEncodingUtil
operator|.
name|getAsciiBytes
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
comment|/**      * Source of the file part.      */
DECL|field|source
specifier|private
name|PartSource
name|source
decl_stmt|;
comment|/**      * FilePart Constructor.      *      * @param name        the name for this part      * @param partSource  the source for this part      * @param contentType the content type for this part, if<code>null</code> the      *                    {@link #DEFAULT_CONTENT_TYPE default} is used      * @param charset     the charset encoding for this part, if<code>null</code> the      *                    {@link #DEFAULT_CHARSET default} is used      */
DECL|method|FilePart
specifier|public
name|FilePart
parameter_list|(
name|String
name|name
parameter_list|,
name|PartSource
name|partSource
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|charset
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|contentType
operator|==
literal|null
condition|?
name|DEFAULT_CONTENT_TYPE
else|:
name|contentType
argument_list|,
name|charset
operator|==
literal|null
condition|?
literal|"ISO-8859-1"
else|:
name|charset
argument_list|,
name|DEFAULT_TRANSFER_ENCODING
argument_list|)
expr_stmt|;
if|if
condition|(
name|partSource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Source may not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|source
operator|=
name|partSource
expr_stmt|;
block|}
comment|/**      * FilePart Constructor.      *      * @param name       the name for this part      * @param partSource the source for this part      */
DECL|method|FilePart
specifier|public
name|FilePart
parameter_list|(
name|String
name|name
parameter_list|,
name|PartSource
name|partSource
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|partSource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * FilePart Constructor.      *      * @param name the name of the file part      * @param file the file to post      * @throws java.io.FileNotFoundException if the<i>file</i> is not a normal      *                                       file or if it is not readable.      */
DECL|method|FilePart
specifier|public
name|FilePart
parameter_list|(
name|String
name|name
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|FilePartSource
argument_list|(
name|file
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * FilePart Constructor.      *      * @param name        the name of the file part      * @param file        the file to post      * @param contentType the content type for this part, if<code>null</code> the      *                    {@link #DEFAULT_CONTENT_TYPE default} is used      * @param charset     the charset encoding for this part, if<code>null</code> the      *                    {@link #DEFAULT_CHARSET default} is used      * @throws FileNotFoundException if the<i>file</i> is not a normal      *                               file or if it is not readable.      */
DECL|method|FilePart
specifier|public
name|FilePart
parameter_list|(
name|String
name|name
parameter_list|,
name|File
name|file
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|FilePartSource
argument_list|(
name|file
argument_list|)
argument_list|,
name|contentType
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
comment|/**      * FilePart Constructor.      *      * @param name     the name of the file part      * @param fileName the file name      * @param file     the file to post      * @throws FileNotFoundException if the<i>file</i> is not a normal      *                               file or if it is not readable.      */
DECL|method|FilePart
specifier|public
name|FilePart
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fileName
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|FilePartSource
argument_list|(
name|fileName
argument_list|,
name|file
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * FilePart Constructor.      *      * @param name        the name of the file part      * @param fileName    the file name      * @param file        the file to post      * @param contentType the content type for this part, if<code>null</code> the      *                    {@link #DEFAULT_CONTENT_TYPE default} is used      * @param charset     the charset encoding for this part, if<code>null</code> the      *                    {@link #DEFAULT_CHARSET default} is used      * @throws FileNotFoundException if the<i>file</i> is not a normal      *                               file or if it is not readable.      */
DECL|method|FilePart
specifier|public
name|FilePart
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fileName
parameter_list|,
name|File
name|file
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|FilePartSource
argument_list|(
name|fileName
argument_list|,
name|file
argument_list|)
argument_list|,
name|contentType
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write the disposition header to the output stream      *      * @param out The output stream      * @throws java.io.IOException If an IO problem occurs      */
DECL|method|sendDispositionHeader
specifier|protected
name|void
name|sendDispositionHeader
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"enter sendDispositionHeader(OutputStream out)"
argument_list|)
expr_stmt|;
name|super
operator|.
name|sendDispositionHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
name|this
operator|.
name|source
operator|.
name|getFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|FILE_NAME_BYTES
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|QUOTE_BYTES
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|MultipartEncodingUtil
operator|.
name|getAsciiBytes
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|QUOTE_BYTES
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Write the data in "source" to the specified stream.      *      * @param out The output stream.      * @throws IOException if an IO problem occurs.      */
DECL|method|sendData
specifier|protected
name|void
name|sendData
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"enter sendData(OutputStream out)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|lengthOfData
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// this file contains no data, so there is nothing to send.
comment|// we don't want to create a zero length buffer as this will
comment|// cause an infinite loop when reading.
name|LOG
operator|.
name|debug
argument_list|(
literal|"No data to send."
argument_list|)
expr_stmt|;
return|return;
block|}
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|InputStream
name|instream
init|=
name|source
operator|.
name|createInputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|instream
operator|.
name|read
argument_list|(
name|tmp
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// we're done with the stream, close it
name|instream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the source of the file part.      *      * @return The source.      */
DECL|method|getSource
specifier|protected
name|PartSource
name|getSource
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"enter getSource()"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|source
return|;
block|}
comment|/**      * Return the length of the data.      *      * @return The length.      * @throws IOException if an IO problem occurs      */
DECL|method|lengthOfData
specifier|protected
name|long
name|lengthOfData
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"enter lengthOfData()"
argument_list|)
expr_stmt|;
return|return
name|source
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
end_class

end_unit

