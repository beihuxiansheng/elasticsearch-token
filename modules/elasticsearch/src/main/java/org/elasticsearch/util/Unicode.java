begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|Unicode
specifier|public
class|class
name|Unicode
block|{
DECL|field|cachedUtf8Result
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|>
name|cachedUtf8Result
init|=
operator|new
name|ThreadLocal
argument_list|<
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|UnicodeUtil
operator|.
name|UTF8Result
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|cachedUtf16Result
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|>
name|cachedUtf16Result
init|=
operator|new
name|ThreadLocal
argument_list|<
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|UnicodeUtil
operator|.
name|UTF16Result
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|method|fromStringAsBytes
specifier|public
specifier|static
name|byte
index|[]
name|fromStringAsBytes
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF8Result
name|result
init|=
name|unsafeFromStringAsUtf8
argument_list|(
name|source
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|fromStringAsUtf8
specifier|public
specifier|static
name|UnicodeUtil
operator|.
name|UTF8Result
name|fromStringAsUtf8
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF8Result
name|result
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|()
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|unsafeFromStringAsUtf8
specifier|public
specifier|static
name|UnicodeUtil
operator|.
name|UTF8Result
name|unsafeFromStringAsUtf8
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF8Result
name|result
init|=
name|cachedUtf8Result
operator|.
name|get
argument_list|()
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|fromBytes
specifier|public
specifier|static
name|String
name|fromBytes
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
return|return
name|fromBytes
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|fromBytes
specifier|public
specifier|static
name|String
name|fromBytes
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF16Result
name|result
init|=
name|unsafeFromBytesAsUtf16
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|fromBytesAsUtf16
specifier|public
specifier|static
name|UnicodeUtil
operator|.
name|UTF16Result
name|fromBytesAsUtf16
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF16Result
name|result
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|unsafeFromBytesAsUtf16
specifier|public
specifier|static
name|UnicodeUtil
operator|.
name|UTF16Result
name|unsafeFromBytesAsUtf16
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
return|return
name|unsafeFromBytesAsUtf16
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|unsafeFromBytesAsUtf16
specifier|public
specifier|static
name|UnicodeUtil
operator|.
name|UTF16Result
name|unsafeFromBytesAsUtf16
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF16Result
name|result
init|=
name|cachedUtf16Result
operator|.
name|get
argument_list|()
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

