begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|Unicode
specifier|public
class|class
name|Unicode
block|{
DECL|field|cachedUtf8Result
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|>
name|cachedUtf8Result
init|=
operator|new
name|ThreadLocal
argument_list|<
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|UnicodeUtil
operator|.
name|UTF8Result
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|cachedUtf16Result
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|UTF16Result
argument_list|>
name|cachedUtf16Result
init|=
operator|new
name|ThreadLocal
argument_list|<
name|UTF16Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|UTF16Result
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|UTF16Result
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|method|fromStringAsBytes
specifier|public
specifier|static
name|byte
index|[]
name|fromStringAsBytes
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF8Result
name|result
init|=
name|unsafeFromStringAsUtf8
argument_list|(
name|source
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|fromStringAsUtf8
specifier|public
specifier|static
name|UnicodeUtil
operator|.
name|UTF8Result
name|fromStringAsUtf8
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF8Result
name|result
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|()
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|unsafeFromStringAsUtf8
specifier|public
specifier|static
name|UnicodeUtil
operator|.
name|UTF8Result
name|unsafeFromStringAsUtf8
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF8Result
name|result
init|=
name|cachedUtf8Result
operator|.
name|get
argument_list|()
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|fromBytes
specifier|public
specifier|static
name|String
name|fromBytes
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
return|return
name|fromBytes
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|fromBytes
specifier|public
specifier|static
name|String
name|fromBytes
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UTF16Result
name|result
init|=
name|unsafeFromBytesAsUtf16
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|fromBytesAsUtf16
specifier|public
specifier|static
name|UTF16Result
name|fromBytesAsUtf16
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
return|return
name|fromBytesAsUtf16
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|fromBytesAsUtf16
specifier|public
specifier|static
name|UTF16Result
name|fromBytesAsUtf16
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UTF16Result
name|result
init|=
operator|new
name|UTF16Result
argument_list|()
decl_stmt|;
name|UTF8toUTF16
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|unsafeFromBytesAsUtf16
specifier|public
specifier|static
name|UTF16Result
name|unsafeFromBytesAsUtf16
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
return|return
name|unsafeFromBytesAsUtf16
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|unsafeFromBytesAsUtf16
specifier|public
specifier|static
name|UTF16Result
name|unsafeFromBytesAsUtf16
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UTF16Result
name|result
init|=
name|cachedUtf16Result
operator|.
name|get
argument_list|()
decl_stmt|;
name|UTF8toUTF16
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// LUCENE MONITOR
comment|// an optimized version of UTF16Result that does not hold the offsets since we don't need them
comment|// they are only used with continuous writing to the same utf16 (without "clearing it")
DECL|class|UTF16Result
specifier|public
specifier|static
specifier|final
class|class
name|UTF16Result
block|{
DECL|field|result
specifier|public
name|char
index|[]
name|result
init|=
operator|new
name|char
index|[
literal|10
index|]
decl_stmt|;
comment|//        public int[] offsets = new int[10];
DECL|field|length
specifier|public
name|int
name|length
decl_stmt|;
DECL|method|setLength
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|newLength
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|length
operator|<
name|newLength
condition|)
block|{
name|char
index|[]
name|newArray
init|=
operator|new
name|char
index|[
call|(
name|int
call|)
argument_list|(
literal|1.5
operator|*
name|newLength
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|newArray
expr_stmt|;
block|}
name|length
operator|=
name|newLength
expr_stmt|;
block|}
DECL|method|copyText
specifier|public
name|void
name|copyText
parameter_list|(
name|UTF16Result
name|other
parameter_list|)
block|{
name|setLength
argument_list|(
name|other
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|other
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert UTF8 bytes into UTF16 characters.  If offset      * is non-zero, conversion starts at that starting point      * in utf8, re-using the results from the previous call      * up until offset.      */
DECL|method|UTF8toUTF16
specifier|public
specifier|static
name|void
name|UTF8toUTF16
parameter_list|(
specifier|final
name|byte
index|[]
name|utf8
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|UTF16Result
name|result
parameter_list|)
block|{
specifier|final
name|int
name|end
init|=
name|offset
operator|+
name|length
decl_stmt|;
name|char
index|[]
name|out
init|=
name|result
operator|.
name|result
decl_stmt|;
comment|//        if (result.offsets.length<= end) {
comment|//            int[] newOffsets = new int[2 * end];
comment|//            System.arraycopy(result.offsets, 0, newOffsets, 0, result.offsets.length);
comment|//            result.offsets = newOffsets;
comment|//        }
comment|//        final int[] offsets = result.offsets;
comment|// If incremental decoding fell in the middle of a
comment|// single unicode character, rollback to its start:
name|int
name|upto
init|=
name|offset
decl_stmt|;
comment|//        while (offsets[upto] == -1)
comment|//            upto--;
name|int
name|outUpto
init|=
literal|0
decl_stmt|;
comment|// offsets[upto];
comment|// Pre-allocate for worst case 1-for-1
if|if
condition|(
name|outUpto
operator|+
name|length
operator|>=
name|out
operator|.
name|length
condition|)
block|{
name|char
index|[]
name|newOut
init|=
operator|new
name|char
index|[
literal|2
operator|*
operator|(
name|outUpto
operator|+
name|length
operator|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
name|newOut
argument_list|,
literal|0
argument_list|,
name|outUpto
argument_list|)
expr_stmt|;
name|result
operator|.
name|result
operator|=
name|out
operator|=
name|newOut
expr_stmt|;
block|}
while|while
condition|(
name|upto
operator|<
name|end
condition|)
block|{
specifier|final
name|int
name|b
init|=
name|utf8
index|[
name|upto
index|]
operator|&
literal|0xff
decl_stmt|;
specifier|final
name|int
name|ch
decl_stmt|;
name|upto
operator|+=
literal|1
expr_stmt|;
comment|// CHANGE
comment|//            offsets[upto++] = outUpto;
if|if
condition|(
name|b
operator|<
literal|0xc0
condition|)
block|{
assert|assert
name|b
operator|<
literal|0x80
assert|;
name|ch
operator|=
name|b
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|<
literal|0xe0
condition|)
block|{
name|ch
operator|=
operator|(
operator|(
name|b
operator|&
literal|0x1f
operator|)
operator|<<
literal|6
operator|)
operator|+
operator|(
name|utf8
index|[
name|upto
index|]
operator|&
literal|0x3f
operator|)
expr_stmt|;
name|upto
operator|+=
literal|1
expr_stmt|;
comment|// CHANGE
comment|//                offsets[upto++] = -1;
block|}
elseif|else
if|if
condition|(
name|b
operator|<
literal|0xf0
condition|)
block|{
name|ch
operator|=
operator|(
operator|(
name|b
operator|&
literal|0xf
operator|)
operator|<<
literal|12
operator|)
operator|+
operator|(
operator|(
name|utf8
index|[
name|upto
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|6
operator|)
operator|+
operator|(
name|utf8
index|[
name|upto
operator|+
literal|1
index|]
operator|&
literal|0x3f
operator|)
expr_stmt|;
name|upto
operator|+=
literal|2
expr_stmt|;
comment|// CHANGE
comment|//                offsets[upto++] = -1;
comment|//                offsets[upto++] = -1;
block|}
else|else
block|{
assert|assert
name|b
operator|<
literal|0xf8
assert|;
name|ch
operator|=
operator|(
operator|(
name|b
operator|&
literal|0x7
operator|)
operator|<<
literal|18
operator|)
operator|+
operator|(
operator|(
name|utf8
index|[
name|upto
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|12
operator|)
operator|+
operator|(
operator|(
name|utf8
index|[
name|upto
operator|+
literal|1
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|6
operator|)
operator|+
operator|(
name|utf8
index|[
name|upto
operator|+
literal|2
index|]
operator|&
literal|0x3f
operator|)
expr_stmt|;
name|upto
operator|+=
literal|3
expr_stmt|;
comment|// CHANGE
comment|//                offsets[upto++] = -1;
comment|//                offsets[upto++] = -1;
comment|//                offsets[upto++] = -1;
block|}
if|if
condition|(
name|ch
operator|<=
name|UNI_MAX_BMP
condition|)
block|{
comment|// target is a character<= 0xFFFF
name|out
index|[
name|outUpto
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|ch
expr_stmt|;
block|}
else|else
block|{
comment|// target is a character in range 0xFFFF - 0x10FFFF
specifier|final
name|int
name|chHalf
init|=
name|ch
operator|-
name|HALF_BASE
decl_stmt|;
name|out
index|[
name|outUpto
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|chHalf
operator|>>
name|HALF_SHIFT
operator|)
operator|+
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_START
argument_list|)
expr_stmt|;
name|out
index|[
name|outUpto
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|chHalf
operator|&
name|HALF_MASK
operator|)
operator|+
name|UnicodeUtil
operator|.
name|UNI_SUR_LOW_START
argument_list|)
expr_stmt|;
block|}
block|}
comment|//        offsets[upto] = outUpto;
name|result
operator|.
name|length
operator|=
name|outUpto
expr_stmt|;
block|}
DECL|field|UNI_MAX_BMP
specifier|private
specifier|static
specifier|final
name|long
name|UNI_MAX_BMP
init|=
literal|0x0000FFFF
decl_stmt|;
DECL|field|HALF_BASE
specifier|private
specifier|static
specifier|final
name|int
name|HALF_BASE
init|=
literal|0x0010000
decl_stmt|;
DECL|field|HALF_SHIFT
specifier|private
specifier|static
specifier|final
name|long
name|HALF_SHIFT
init|=
literal|10
decl_stmt|;
DECL|field|HALF_MASK
specifier|private
specifier|static
specifier|final
name|long
name|HALF_MASK
init|=
literal|0x3FFL
decl_stmt|;
block|}
end_class

end_unit

