begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.xcontent.xson
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|xson
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Unicode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|XContentGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|support
operator|.
name|AbstractXContentGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|XsonXContentGenerator
specifier|public
class|class
name|XsonXContentGenerator
extends|extends
name|AbstractXContentGenerator
implements|implements
name|XContentGenerator
block|{
DECL|field|out
specifier|private
specifier|final
name|OutputStream
name|out
decl_stmt|;
DECL|method|XsonXContentGenerator
specifier|public
name|XsonXContentGenerator
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|outInt
argument_list|(
name|XsonType
operator|.
name|HEADER
argument_list|)
expr_stmt|;
block|}
DECL|method|contentType
annotation|@
name|Override
specifier|public
name|XContentType
name|contentType
parameter_list|()
block|{
return|return
name|XContentType
operator|.
name|XSON
return|;
block|}
DECL|method|usePrettyPrint
annotation|@
name|Override
specifier|public
name|void
name|usePrettyPrint
parameter_list|()
block|{
comment|// irrelevant
block|}
DECL|method|writeStartArray
annotation|@
name|Override
specifier|public
name|void
name|writeStartArray
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|START_ARRAY
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeEndArray
annotation|@
name|Override
specifier|public
name|void
name|writeEndArray
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|END_ARRAY
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeStartObject
annotation|@
name|Override
specifier|public
name|void
name|writeStartObject
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|START_OBJECT
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeEndObject
annotation|@
name|Override
specifier|public
name|void
name|writeEndObject
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|END_OBJECT
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFieldName
annotation|@
name|Override
specifier|public
name|void
name|writeFieldName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|FIELD_NAME
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|outUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|writeString
annotation|@
name|Override
specifier|public
name|void
name|writeString
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|VALUE_STRING
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|outUTF
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|writeString
annotation|@
name|Override
specifier|public
name|void
name|writeString
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|writeString
argument_list|(
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBinary
annotation|@
name|Override
specifier|public
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|VALUE_BINARY
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|outVInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBinary
annotation|@
name|Override
specifier|public
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|VALUE_BINARY
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|outVInt
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|writeNumber
annotation|@
name|Override
specifier|public
name|void
name|writeNumber
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|VALUE_INTEGER
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|outInt
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
DECL|method|writeNumber
annotation|@
name|Override
specifier|public
name|void
name|writeNumber
parameter_list|(
name|long
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|VALUE_LONG
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|outLong
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
DECL|method|writeNumber
annotation|@
name|Override
specifier|public
name|void
name|writeNumber
parameter_list|(
name|double
name|d
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|VALUE_DOUBLE
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|outDouble
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|writeNumber
annotation|@
name|Override
specifier|public
name|void
name|writeNumber
parameter_list|(
name|float
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|VALUE_FLOAT
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|outFloat
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBoolean
annotation|@
name|Override
specifier|public
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|VALUE_BOOLEAN
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|outBoolean
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|writeNull
annotation|@
name|Override
specifier|public
name|void
name|writeNull
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|XsonType
operator|.
name|VALUE_NULL
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeRawFieldStart
annotation|@
name|Override
specifier|public
name|void
name|writeRawFieldStart
parameter_list|(
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFieldName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
DECL|method|flush
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|outShort
specifier|private
name|void
name|outShort
parameter_list|(
name|short
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes an int as four bytes.      */
DECL|method|outInt
specifier|private
name|void
name|outInt
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes an int in a variable-length format.  Writes between one and      * five bytes.  Smaller values take fewer bytes.  Negative numbers are not      * supported.      */
DECL|method|outVInt
specifier|private
name|void
name|outVInt
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|(
name|i
operator|&
operator|~
literal|0x7F
operator|)
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x7f
operator|)
operator||
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a long as eight bytes.      */
DECL|method|outLong
specifier|private
name|void
name|outLong
parameter_list|(
name|long
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|outInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|i
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|outInt
argument_list|(
operator|(
name|int
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes an long in a variable-length format.  Writes between one and five      * bytes.  Smaller values take fewer bytes.  Negative numbers are not      * supported.      */
DECL|method|outVLong
specifier|private
name|void
name|outVLong
parameter_list|(
name|long
name|i
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|(
name|i
operator|&
operator|~
literal|0x7F
operator|)
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x7f
operator|)
operator||
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a string.      */
DECL|method|outUTF
specifier|private
name|void
name|outUTF
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|UnicodeUtil
operator|.
name|UTF8Result
name|utf8Result
init|=
name|Unicode
operator|.
name|unsafeFromStringAsUtf8
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|outVInt
argument_list|(
name|utf8Result
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|utf8Result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|utf8Result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|outFloat
specifier|private
name|void
name|outFloat
parameter_list|(
name|float
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|outInt
argument_list|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|outDouble
specifier|private
name|void
name|outDouble
parameter_list|(
name|double
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|outLong
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|ZERO
specifier|private
specifier|static
name|byte
name|ZERO
init|=
literal|0
decl_stmt|;
DECL|field|ONE
specifier|private
specifier|static
name|byte
name|ONE
init|=
literal|1
decl_stmt|;
comment|/**      * Writes a boolean.      */
DECL|method|outBoolean
specifier|private
name|void
name|outBoolean
parameter_list|(
name|boolean
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
condition|?
name|ONE
else|:
name|ZERO
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

