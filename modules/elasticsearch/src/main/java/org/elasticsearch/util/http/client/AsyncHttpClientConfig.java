begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_comment
comment|/**  * Configuration class to use with a {@link AsyncHttpClient}. System property can be also used to configure this  * object default behavior by doing:  *<p/>  * -Dcom.ning.http.client.AsyncHttpClientConfig.nameOfTheProperty  * ex:  *<p/>  * -Dcom.ning.http.client.AsyncHttpClientConfig.defaultMaxTotalConnections  * -Dcom.ning.http.client.AsyncHttpClientConfig.defaultMaxTotalConnections  * -Dcom.ning.http.client.AsyncHttpClientConfig.defaultMaxConnectionsPerHost  * -Dcom.ning.http.client.AsyncHttpClientConfig.defaultConnectionTimeoutInMS  * -Dcom.ning.http.client.AsyncHttpClientConfig.defaultIdleConnectionTimeoutInMS  * -Dcom.ning.http.client.AsyncHttpClientConfig.defaultRequestTimeoutInMS  * -Dcom.ning.http.client.AsyncHttpClientConfig.defaultRedirectsEnabled  * -Dcom.ning.http.client.AsyncHttpClientConfig.defaultMaxRedirects  */
end_comment

begin_class
DECL|class|AsyncHttpClientConfig
specifier|public
class|class
name|AsyncHttpClientConfig
block|{
DECL|field|ASYNC_CLIENT
specifier|private
specifier|final
specifier|static
name|String
name|ASYNC_CLIENT
init|=
name|AsyncHttpClient
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
decl_stmt|;
DECL|field|maxTotalConnections
specifier|private
specifier|final
name|int
name|maxTotalConnections
decl_stmt|;
DECL|field|maxConnectionPerHost
specifier|private
specifier|final
name|int
name|maxConnectionPerHost
decl_stmt|;
DECL|field|connectionTimeOutInMs
specifier|private
specifier|final
name|int
name|connectionTimeOutInMs
decl_stmt|;
DECL|field|idleConnectionTimeoutInMs
specifier|private
specifier|final
name|int
name|idleConnectionTimeoutInMs
decl_stmt|;
DECL|field|requestTimeoutInMs
specifier|private
specifier|final
name|int
name|requestTimeoutInMs
decl_stmt|;
DECL|field|redirectEnabled
specifier|private
specifier|final
name|boolean
name|redirectEnabled
decl_stmt|;
DECL|field|maxDefaultRedirects
specifier|private
specifier|final
name|int
name|maxDefaultRedirects
decl_stmt|;
DECL|field|compressionEnabled
specifier|private
specifier|final
name|boolean
name|compressionEnabled
decl_stmt|;
DECL|field|userAgent
specifier|private
specifier|final
name|String
name|userAgent
decl_stmt|;
DECL|field|keepAlive
specifier|private
specifier|final
name|boolean
name|keepAlive
decl_stmt|;
DECL|field|reaper
specifier|private
specifier|final
name|ScheduledExecutorService
name|reaper
decl_stmt|;
DECL|field|applicationThreadPool
specifier|private
specifier|final
name|ExecutorService
name|applicationThreadPool
decl_stmt|;
DECL|field|proxyServer
specifier|private
specifier|final
name|ProxyServer
name|proxyServer
decl_stmt|;
DECL|field|sslEngine
specifier|private
specifier|final
name|SSLEngine
name|sslEngine
decl_stmt|;
DECL|method|AsyncHttpClientConfig
specifier|private
name|AsyncHttpClientConfig
parameter_list|(
name|int
name|maxTotalConnections
parameter_list|,
name|int
name|maxConnectionPerHost
parameter_list|,
name|int
name|connectionTimeOutInMs
parameter_list|,
name|int
name|idleConnectionTimeoutInMs
parameter_list|,
name|int
name|requestTimeoutInMs
parameter_list|,
name|boolean
name|redirectEnabled
parameter_list|,
name|int
name|maxDefaultRedirects
parameter_list|,
name|boolean
name|compressionEnabled
parameter_list|,
name|String
name|userAgent
parameter_list|,
name|boolean
name|keepAlive
parameter_list|,
name|ScheduledExecutorService
name|reaper
parameter_list|,
name|ExecutorService
name|applicationThreadPool
parameter_list|,
name|ProxyServer
name|proxyServer
parameter_list|,
name|SSLEngine
name|sslEngine
parameter_list|)
block|{
name|this
operator|.
name|maxTotalConnections
operator|=
name|maxTotalConnections
expr_stmt|;
name|this
operator|.
name|maxConnectionPerHost
operator|=
name|maxConnectionPerHost
expr_stmt|;
name|this
operator|.
name|connectionTimeOutInMs
operator|=
name|connectionTimeOutInMs
expr_stmt|;
name|this
operator|.
name|idleConnectionTimeoutInMs
operator|=
name|idleConnectionTimeoutInMs
expr_stmt|;
name|this
operator|.
name|requestTimeoutInMs
operator|=
name|requestTimeoutInMs
expr_stmt|;
name|this
operator|.
name|redirectEnabled
operator|=
name|redirectEnabled
expr_stmt|;
name|this
operator|.
name|maxDefaultRedirects
operator|=
name|maxDefaultRedirects
expr_stmt|;
name|this
operator|.
name|compressionEnabled
operator|=
name|compressionEnabled
expr_stmt|;
name|this
operator|.
name|userAgent
operator|=
name|userAgent
expr_stmt|;
name|this
operator|.
name|keepAlive
operator|=
name|keepAlive
expr_stmt|;
name|this
operator|.
name|sslEngine
operator|=
name|sslEngine
expr_stmt|;
if|if
condition|(
name|reaper
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|reaper
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"AsyncHttpClient-Reaper"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|reaper
operator|=
name|reaper
expr_stmt|;
block|}
if|if
condition|(
name|applicationThreadPool
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|applicationThreadPool
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|applicationThreadPool
operator|=
name|applicationThreadPool
expr_stmt|;
block|}
name|this
operator|.
name|proxyServer
operator|=
name|proxyServer
expr_stmt|;
block|}
comment|/**      * A {@link ScheduledExecutorService} used to expire idle connections.      *      * @return {@link ScheduledExecutorService}      */
DECL|method|reaper
specifier|public
name|ScheduledExecutorService
name|reaper
parameter_list|()
block|{
return|return
name|reaper
return|;
block|}
comment|/**      * Return the maximum number of connections an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can handle.      *      * @return the maximum number of connections an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can handle.      */
DECL|method|getMaxTotalConnections
specifier|public
name|int
name|getMaxTotalConnections
parameter_list|()
block|{
return|return
name|maxTotalConnections
return|;
block|}
comment|/**      * Return the maximum number of connections per hosts an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can handle.      *      * @return the maximum number of connections per host an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can handle.      */
DECL|method|getMaxConnectionPerHost
specifier|public
name|int
name|getMaxConnectionPerHost
parameter_list|()
block|{
return|return
name|maxConnectionPerHost
return|;
block|}
comment|/**      * Return the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can wait when connecting to a remote host      *      * @return the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can wait when connecting to a remote host      */
DECL|method|getConnectionTimeoutInMs
specifier|public
name|int
name|getConnectionTimeoutInMs
parameter_list|()
block|{
return|return
name|connectionTimeOutInMs
return|;
block|}
comment|/**      * Return the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can stay idle.      *      * @return the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can stay idle.      */
DECL|method|getIdleConnectionTimeoutInMs
specifier|public
name|int
name|getIdleConnectionTimeoutInMs
parameter_list|()
block|{
return|return
name|idleConnectionTimeoutInMs
return|;
block|}
comment|/**      * Return the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} wait for a response      *      * @return the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} wait for a response      */
DECL|method|getRequestTimeoutInMs
specifier|public
name|int
name|getRequestTimeoutInMs
parameter_list|()
block|{
return|return
name|requestTimeoutInMs
return|;
block|}
comment|/**      * Is HTTP redirect enabled      *      * @return true if enabled.      */
DECL|method|isRedirectEnabled
specifier|public
name|boolean
name|isRedirectEnabled
parameter_list|()
block|{
return|return
name|redirectEnabled
return|;
block|}
comment|/**      * Get the maximum number of HTTP redirect      *      * @return the maximum number of HTTP redirect      */
DECL|method|getMaxRedirects
specifier|public
name|int
name|getMaxRedirects
parameter_list|()
block|{
return|return
name|maxDefaultRedirects
return|;
block|}
comment|/**      * Is HTTP keep-alive enabled.      *      * @return true if keep-alive is enabled      */
DECL|method|getKeepAlive
specifier|public
name|boolean
name|getKeepAlive
parameter_list|()
block|{
return|return
name|keepAlive
return|;
block|}
comment|/**      * Return the USER_AGENT header value      *      * @return the USER_AGENT header value      */
DECL|method|getUserAgent
specifier|public
name|String
name|getUserAgent
parameter_list|()
block|{
return|return
name|userAgent
return|;
block|}
comment|/**      * Is HTTP compression enabled.      *      * @return true if compression is enabled      */
DECL|method|isCompressionEnabled
specifier|public
name|boolean
name|isCompressionEnabled
parameter_list|()
block|{
return|return
name|compressionEnabled
return|;
block|}
comment|/**      * Return the {@link java.util.concurrent.ExecutorService} an {@link AsyncHttpClient} use for handling      * asynchronous response.      *      * @return the {@link java.util.concurrent.ExecutorService} an {@link AsyncHttpClient} use for handling      *         asynchronous response.      */
DECL|method|executorService
specifier|public
name|ExecutorService
name|executorService
parameter_list|()
block|{
return|return
name|applicationThreadPool
return|;
block|}
comment|/**      * An instance of {@link org.elasticsearch.util.http.client.ProxyServer} used by an {@link AsyncHttpClient}      *      * @return instance of {@link org.elasticsearch.util.http.client.ProxyServer}      */
DECL|method|getProxyServer
specifier|public
name|ProxyServer
name|getProxyServer
parameter_list|()
block|{
return|return
name|proxyServer
return|;
block|}
comment|/**      * Return an instance of {@link SSLEngine} used for SSL connection.      *      * @return an instance of {@link SSLEngine} used for SSL connection.      */
DECL|method|getSSLEngine
specifier|public
name|SSLEngine
name|getSSLEngine
parameter_list|()
block|{
return|return
name|sslEngine
return|;
block|}
comment|/**      * Builder for an {@link AsyncHttpClient}      */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|defaultMaxTotalConnections
specifier|private
name|int
name|defaultMaxTotalConnections
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|ASYNC_CLIENT
operator|+
literal|"defaultMaxTotalConnections"
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
DECL|field|defaultMaxConnectionPerHost
specifier|private
name|int
name|defaultMaxConnectionPerHost
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|ASYNC_CLIENT
operator|+
literal|"defaultMaxConnectionsPerHost"
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
DECL|field|defaultConnectionTimeOutInMs
specifier|private
name|int
name|defaultConnectionTimeOutInMs
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|ASYNC_CLIENT
operator|+
literal|"defaultConnectionTimeoutInMS"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
DECL|field|defaultIdleConnectionTimeoutInMs
specifier|private
name|int
name|defaultIdleConnectionTimeoutInMs
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|ASYNC_CLIENT
operator|+
literal|"defaultIdleConnectionTimeoutInMS"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
DECL|field|defaultRequestTimeoutInMs
specifier|private
name|int
name|defaultRequestTimeoutInMs
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|ASYNC_CLIENT
operator|+
literal|"defaultRequestTimeoutInMS"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
DECL|field|redirectEnabled
specifier|private
name|boolean
name|redirectEnabled
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|ASYNC_CLIENT
operator|+
literal|"defaultRedirectsEnabled"
argument_list|)
decl_stmt|;
DECL|field|maxDefaultRedirects
specifier|private
name|int
name|maxDefaultRedirects
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|ASYNC_CLIENT
operator|+
literal|"defaultMaxRedirects"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
DECL|field|compressionEnabled
specifier|private
name|boolean
name|compressionEnabled
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|ASYNC_CLIENT
operator|+
literal|"compressionEnabled"
argument_list|)
decl_stmt|;
DECL|field|userAgent
specifier|private
name|String
name|userAgent
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ASYNC_CLIENT
operator|+
literal|"userAgent"
argument_list|,
literal|"ES/1.0"
argument_list|)
decl_stmt|;
DECL|field|keepAlive
specifier|private
name|boolean
name|keepAlive
init|=
literal|true
decl_stmt|;
DECL|field|reaper
specifier|private
name|ScheduledExecutorService
name|reaper
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|applicationThreadPool
specifier|private
name|ExecutorService
name|applicationThreadPool
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
DECL|field|proxyServer
specifier|private
name|ProxyServer
name|proxyServer
init|=
literal|null
decl_stmt|;
DECL|field|sslEngine
specifier|private
name|SSLEngine
name|sslEngine
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|()
block|{         }
comment|/**          * Set the maximum number of connections an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can handle.          *          * @param defaultMaxTotalConnections the maximum number of connections an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can handle.          * @return a {@link Builder}          */
DECL|method|setMaximumConnectionsTotal
specifier|public
name|Builder
name|setMaximumConnectionsTotal
parameter_list|(
name|int
name|defaultMaxTotalConnections
parameter_list|)
block|{
name|this
operator|.
name|defaultMaxTotalConnections
operator|=
name|defaultMaxTotalConnections
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of connections per hosts an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can handle.          *          * @param defaultMaxConnectionPerHost the maximum number of connections per host an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can handle.          * @return a {@link Builder}          */
DECL|method|setMaximumConnectionsPerHost
specifier|public
name|Builder
name|setMaximumConnectionsPerHost
parameter_list|(
name|int
name|defaultMaxConnectionPerHost
parameter_list|)
block|{
name|this
operator|.
name|defaultMaxConnectionPerHost
operator|=
name|defaultMaxConnectionPerHost
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can wait when connecting to a remote host          *          * @param defaultConnectionTimeOutInMs the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can wait when connecting to a remote host          * @return a {@link Builder}          */
DECL|method|setConnectionTimeoutInMs
specifier|public
name|Builder
name|setConnectionTimeoutInMs
parameter_list|(
name|int
name|defaultConnectionTimeOutInMs
parameter_list|)
block|{
name|this
operator|.
name|defaultConnectionTimeOutInMs
operator|=
name|defaultConnectionTimeOutInMs
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can stay idle.          *          * @param defaultIdleConnectionTimeoutInMs          *         the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} can stay idle.          * @return a {@link Builder}          */
DECL|method|setIdleConnectionTimeoutInMs
specifier|public
name|Builder
name|setIdleConnectionTimeoutInMs
parameter_list|(
name|int
name|defaultIdleConnectionTimeoutInMs
parameter_list|)
block|{
name|this
operator|.
name|defaultIdleConnectionTimeoutInMs
operator|=
name|defaultIdleConnectionTimeoutInMs
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} wait for a response          *          * @param defaultRequestTimeoutInMs the maximum time in millisecond an {@link org.elasticsearch.util.http.client.AsyncHttpClient} wait for a response          * @return a {@link Builder}          */
DECL|method|setRequestTimeoutInMs
specifier|public
name|Builder
name|setRequestTimeoutInMs
parameter_list|(
name|int
name|defaultRequestTimeoutInMs
parameter_list|)
block|{
name|this
operator|.
name|defaultRequestTimeoutInMs
operator|=
name|defaultRequestTimeoutInMs
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true to enable HTTP redirect          *          * @param redirectEnabled true if enabled.          * @return a {@link Builder}          */
DECL|method|setFollowRedirects
specifier|public
name|Builder
name|setFollowRedirects
parameter_list|(
name|boolean
name|redirectEnabled
parameter_list|)
block|{
name|this
operator|.
name|redirectEnabled
operator|=
name|redirectEnabled
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of HTTP redirect          *          * @param maxDefaultRedirects the maximum number of HTTP redirect          * @return a {@link Builder}          */
DECL|method|setMaximumNumberOfRedirects
specifier|public
name|Builder
name|setMaximumNumberOfRedirects
parameter_list|(
name|int
name|maxDefaultRedirects
parameter_list|)
block|{
name|this
operator|.
name|maxDefaultRedirects
operator|=
name|maxDefaultRedirects
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable HTTP compression.          *          * @param compressionEnabled true if compression is enabled          * @return a {@link Builder}          */
DECL|method|setCompressionEnabled
specifier|public
name|Builder
name|setCompressionEnabled
parameter_list|(
name|boolean
name|compressionEnabled
parameter_list|)
block|{
name|this
operator|.
name|compressionEnabled
operator|=
name|compressionEnabled
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the USER_AGENT header value          *          * @param userAgent the USER_AGENT header value          * @return a {@link Builder}          */
DECL|method|setUserAgent
specifier|public
name|Builder
name|setUserAgent
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
name|this
operator|.
name|userAgent
operator|=
name|userAgent
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set HTTP keep-alive value.          *          * @param keepAlive true if keep-alive is enabled          * @return a {@link Builder}          */
DECL|method|setKeepAlive
specifier|public
name|Builder
name|setKeepAlive
parameter_list|(
name|boolean
name|keepAlive
parameter_list|)
block|{
name|this
operator|.
name|keepAlive
operator|=
name|keepAlive
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the{@link ScheduledExecutorService} used to expire idle connections.          *          * @param reaper the{@link ScheduledExecutorService} used to expire idle connections.          * @return a {@link Builder}          */
DECL|method|setScheduledExecutorService
specifier|public
name|Builder
name|setScheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|reaper
parameter_list|)
block|{
name|this
operator|.
name|reaper
operator|=
name|reaper
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the {@link java.util.concurrent.ExecutorService} an {@link AsyncHttpClient} use for handling          * asynchronous response.          *          * @param applicationThreadPool the {@link java.util.concurrent.ExecutorService} an {@link AsyncHttpClient} use for handling          *                              asynchronous response.          * @return a {@link Builder}          */
DECL|method|setExecutorService
specifier|public
name|Builder
name|setExecutorService
parameter_list|(
name|ExecutorService
name|applicationThreadPool
parameter_list|)
block|{
name|this
operator|.
name|applicationThreadPool
operator|=
name|applicationThreadPool
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set an instance of {@link org.elasticsearch.util.http.client.ProxyServer} used by an {@link AsyncHttpClient}          *          * @param proxyServer instance of {@link org.elasticsearch.util.http.client.ProxyServer}          * @return a {@link Builder}          */
DECL|method|setProxyServer
specifier|public
name|Builder
name|setProxyServer
parameter_list|(
name|ProxyServer
name|proxyServer
parameter_list|)
block|{
name|this
operator|.
name|proxyServer
operator|=
name|proxyServer
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the {@link SSLEngine} for secure connection.          *          * @param sslEngine the {@link SSLEngine} for secure connection          * @return a {@link Builder}          */
DECL|method|setSSLEngine
specifier|public
name|Builder
name|setSSLEngine
parameter_list|(
name|SSLEngine
name|sslEngine
parameter_list|)
block|{
name|this
operator|.
name|sslEngine
operator|=
name|sslEngine
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Build an {@link AsyncHttpClientConfig}          *          * @return an {@link AsyncHttpClientConfig}          */
DECL|method|build
specifier|public
name|AsyncHttpClientConfig
name|build
parameter_list|()
block|{
return|return
operator|new
name|AsyncHttpClientConfig
argument_list|(
name|defaultMaxTotalConnections
argument_list|,
name|defaultMaxConnectionPerHost
argument_list|,
name|defaultConnectionTimeOutInMs
argument_list|,
name|defaultIdleConnectionTimeoutInMs
argument_list|,
name|defaultRequestTimeoutInMs
argument_list|,
name|redirectEnabled
argument_list|,
name|maxDefaultRedirects
argument_list|,
name|compressionEnabled
argument_list|,
name|userAgent
argument_list|,
name|keepAlive
argument_list|,
name|reaper
argument_list|,
name|applicationThreadPool
argument_list|,
name|proxyServer
argument_list|,
name|sslEngine
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

