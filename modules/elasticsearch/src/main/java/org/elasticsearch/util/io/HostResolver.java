begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|HostResolver
specifier|public
specifier|abstract
class|class
name|HostResolver
block|{
DECL|field|GLOBAL_NETWORK_BINDHOST_SETTING
specifier|public
specifier|static
specifier|final
name|String
name|GLOBAL_NETWORK_BINDHOST_SETTING
init|=
literal|"network.bindHost"
decl_stmt|;
DECL|field|GLOBAL_NETWORK_PUBLISHHOST_SETTING
specifier|public
specifier|static
specifier|final
name|String
name|GLOBAL_NETWORK_PUBLISHHOST_SETTING
init|=
literal|"network.publishHost"
decl_stmt|;
DECL|field|LOCAL_IP
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_IP
init|=
literal|"#local:ip#"
decl_stmt|;
DECL|field|LOCAL_HOST
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_HOST
init|=
literal|"#local:host#"
decl_stmt|;
DECL|field|LOCAL_CANONICALHOST
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_CANONICALHOST
init|=
literal|"#local:canonicalhost#"
decl_stmt|;
DECL|method|isIPv4
specifier|public
specifier|static
name|boolean
name|isIPv4
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.net.preferIPv4Stack"
argument_list|)
operator|!=
literal|null
operator|&&
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.net.preferIPv4Stack"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
return|;
block|}
DECL|method|resultBindHostAddress
specifier|public
specifier|static
name|InetAddress
name|resultBindHostAddress
parameter_list|(
name|String
name|bindHost
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|resultBindHostAddress
argument_list|(
name|bindHost
argument_list|,
name|settings
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|resultBindHostAddress
specifier|public
specifier|static
name|InetAddress
name|resultBindHostAddress
parameter_list|(
name|String
name|bindHost
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|String
name|defaultValue2
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|resolveInetAddress
argument_list|(
name|bindHost
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|GLOBAL_NETWORK_BINDHOST_SETTING
argument_list|)
argument_list|,
name|defaultValue2
argument_list|)
return|;
block|}
DECL|method|resultPublishHostAddress
specifier|public
specifier|static
name|InetAddress
name|resultPublishHostAddress
parameter_list|(
name|String
name|publishHost
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|resultPublishHostAddress
argument_list|(
name|publishHost
argument_list|,
name|settings
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|resultPublishHostAddress
specifier|public
specifier|static
name|InetAddress
name|resultPublishHostAddress
parameter_list|(
name|String
name|publishHost
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|String
name|defaultValue2
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|resolveInetAddress
argument_list|(
name|publishHost
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|GLOBAL_NETWORK_PUBLISHHOST_SETTING
argument_list|)
argument_list|,
name|defaultValue2
argument_list|)
return|;
block|}
DECL|method|resolveInetAddress
specifier|public
specifier|static
name|InetAddress
name|resolveInetAddress
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|defaultValue1
parameter_list|,
name|String
name|defaultValue2
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|String
name|resolvedHost
init|=
name|resolveHost
argument_list|(
name|host
argument_list|,
name|defaultValue1
argument_list|,
name|defaultValue2
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedHost
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|InetAddress
operator|.
name|getByName
argument_list|(
name|resolvedHost
argument_list|)
return|;
block|}
DECL|method|resolveHost
specifier|public
specifier|static
name|String
name|resolveHost
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|defaultValue1
parameter_list|,
name|String
name|defaultValue2
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
name|defaultValue1
expr_stmt|;
block|}
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
name|defaultValue2
expr_stmt|;
block|}
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|host
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|&&
name|host
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|host
operator|=
name|host
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|host
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
literal|"local:ip"
argument_list|)
condition|)
block|{
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|host
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"local:host"
argument_list|)
condition|)
block|{
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|host
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"local:canonicalhost"
argument_list|)
condition|)
block|{
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
return|;
block|}
else|else
block|{
name|String
name|name
init|=
name|host
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|host
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|host
operator|.
name|substring
argument_list|(
name|host
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|niEnum
decl_stmt|;
try|try
block|{
name|niEnum
operator|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get network interfaces"
argument_list|,
name|e
argument_list|)
throw|;
block|}
while|while
condition|(
name|niEnum
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|ni
init|=
name|niEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ni
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|ni
operator|.
name|getDisplayName
argument_list|()
argument_list|)
condition|)
block|{
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|inetEnum
init|=
name|ni
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
while|while
condition|(
name|inetEnum
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|addr
init|=
name|inetEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|getHostAddress
argument_list|()
operator|.
name|equals
argument_list|(
literal|"127.0.0.1"
argument_list|)
condition|)
block|{
comment|// ignore local host
continue|continue;
block|}
if|if
condition|(
name|addr
operator|.
name|getHostAddress
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// ignore address like 0:0:0:0:0:0:0:1
continue|continue;
block|}
if|if
condition|(
literal|"host"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|addr
operator|.
name|getHostName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"canonicalhost"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|addr
operator|.
name|getCanonicalHostName
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|addr
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to find network interface for ["
operator|+
name|host
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|InetAddress
name|inetAddress
init|=
name|java
operator|.
name|net
operator|.
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|hostAddress
init|=
name|inetAddress
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
name|String
name|hostName
init|=
name|inetAddress
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|String
name|canonicalHostName
init|=
name|inetAddress
operator|.
name|getCanonicalHostName
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|.
name|equalsIgnoreCase
argument_list|(
name|hostAddress
argument_list|)
condition|)
block|{
return|return
name|hostAddress
return|;
block|}
elseif|else
if|if
condition|(
name|host
operator|.
name|equalsIgnoreCase
argument_list|(
name|canonicalHostName
argument_list|)
condition|)
block|{
return|return
name|canonicalHostName
return|;
block|}
else|else
block|{
return|return
name|hostName
return|;
comment|//resolve property into actual lower/upper case
block|}
block|}
DECL|method|HostResolver
specifier|private
name|HostResolver
parameter_list|()
block|{      }
block|}
end_class

end_unit

