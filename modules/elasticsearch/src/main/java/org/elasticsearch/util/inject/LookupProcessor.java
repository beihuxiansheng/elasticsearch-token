begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.inject
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|internal
operator|.
name|Errors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|internal
operator|.
name|ErrorsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|spi
operator|.
name|MembersInjectorLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProviderLookup
import|;
end_import

begin_comment
comment|/**  * Handles {@link Binder#getProvider} and {@link Binder#getMembersInjector(TypeLiteral)} commands.  *  * @author crazybob@google.com (Bob Lee)  * @author jessewilson@google.com (Jesse Wilson)  */
end_comment

begin_class
DECL|class|LookupProcessor
class|class
name|LookupProcessor
extends|extends
name|AbstractProcessor
block|{
DECL|method|LookupProcessor
name|LookupProcessor
parameter_list|(
name|Errors
name|errors
parameter_list|)
block|{
name|super
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
DECL|method|visit
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Boolean
name|visit
parameter_list|(
name|MembersInjectorLookup
argument_list|<
name|T
argument_list|>
name|lookup
parameter_list|)
block|{
try|try
block|{
name|MembersInjector
argument_list|<
name|T
argument_list|>
name|membersInjector
init|=
name|injector
operator|.
name|membersInjectorStore
operator|.
name|get
argument_list|(
name|lookup
operator|.
name|getType
argument_list|()
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|lookup
operator|.
name|initializeDelegate
argument_list|(
name|membersInjector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|merge
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: source
block|}
return|return
literal|true
return|;
block|}
DECL|method|visit
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Boolean
name|visit
parameter_list|(
name|ProviderLookup
argument_list|<
name|T
argument_list|>
name|lookup
parameter_list|)
block|{
comment|// ensure the provider can be created
try|try
block|{
name|Provider
argument_list|<
name|T
argument_list|>
name|provider
init|=
name|injector
operator|.
name|getProviderOrThrow
argument_list|(
name|lookup
operator|.
name|getKey
argument_list|()
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|lookup
operator|.
name|initializeDelegate
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|merge
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: source
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

