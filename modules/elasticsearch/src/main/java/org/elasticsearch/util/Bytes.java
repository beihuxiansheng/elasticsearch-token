begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|Bytes
specifier|public
class|class
name|Bytes
block|{
DECL|field|cachedBytes
specifier|public
specifier|static
name|ThreadLocal
argument_list|<
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|cachedBytes
init|=
operator|new
name|ThreadLocal
argument_list|<
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|byte
index|[]
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
operator|new
name|byte
index|[
literal|256
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|EMPTY_ARRAY
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
DECL|field|sizeTable
specifier|final
specifier|static
name|int
index|[]
name|sizeTable
init|=
block|{
literal|9
block|,
literal|99
block|,
literal|999
block|,
literal|9999
block|,
literal|99999
block|,
literal|999999
block|,
literal|9999999
block|,
literal|99999999
block|,
literal|999999999
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
DECL|field|LONG_MIN_VALUE_BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|LONG_MIN_VALUE_BYTES
init|=
literal|"-9223372036854775808"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// Requires positive x
DECL|method|stringSize
specifier|static
name|int
name|stringSize
parameter_list|(
name|int
name|x
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|x
operator|<=
name|sizeTable
index|[
name|i
index|]
condition|)
return|return
name|i
operator|+
literal|1
return|;
block|}
comment|/**      * Blatant copy of Integer.toString, but returning a byte array instead of a String, as      * string charset decoding/encoding was killing us on performance.      *      * @param i integer to convert      * @return byte[] array containing literal ASCII char representation      */
DECL|method|itoa
specifier|public
specifier|static
name|byte
index|[]
name|itoa
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
name|size
init|=
operator|(
name|i
operator|<
literal|0
operator|)
condition|?
name|stringSize
argument_list|(
operator|-
name|i
argument_list|)
operator|+
literal|1
else|:
name|stringSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|getChars
argument_list|(
name|i
argument_list|,
name|size
argument_list|,
name|buf
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
DECL|field|digits
specifier|final
specifier|static
name|byte
index|[]
name|digits
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'i'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'l'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'o'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|}
decl_stmt|;
DECL|field|DigitTens
specifier|final
specifier|static
name|byte
index|[]
name|DigitTens
init|=
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'1'
block|,
literal|'1'
block|,
literal|'1'
block|,
literal|'1'
block|,
literal|'1'
block|,
literal|'1'
block|,
literal|'1'
block|,
literal|'1'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'4'
block|,
literal|'4'
block|,
literal|'4'
block|,
literal|'4'
block|,
literal|'4'
block|,
literal|'4'
block|,
literal|'4'
block|,
literal|'4'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'5'
block|,
literal|'5'
block|,
literal|'5'
block|,
literal|'5'
block|,
literal|'5'
block|,
literal|'5'
block|,
literal|'5'
block|,
literal|'5'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'6'
block|,
literal|'6'
block|,
literal|'6'
block|,
literal|'6'
block|,
literal|'6'
block|,
literal|'6'
block|,
literal|'6'
block|,
literal|'6'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'8'
block|,
literal|'8'
block|,
literal|'8'
block|,
literal|'8'
block|,
literal|'8'
block|,
literal|'8'
block|,
literal|'8'
block|,
literal|'8'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'9'
block|,
literal|'9'
block|,
literal|'9'
block|,
literal|'9'
block|,
literal|'9'
block|,
literal|'9'
block|,
literal|'9'
block|,
literal|'9'
block|,
literal|'9'
block|,     }
decl_stmt|;
DECL|field|DigitOnes
specifier|final
specifier|static
name|byte
index|[]
name|DigitOnes
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,     }
decl_stmt|;
DECL|method|getChars
specifier|static
name|void
name|getChars
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|index
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|int
name|q
decl_stmt|,
name|r
decl_stmt|;
name|int
name|charPos
init|=
name|index
decl_stmt|;
name|byte
name|sign
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|sign
operator|=
literal|'-'
expr_stmt|;
name|i
operator|=
operator|-
name|i
expr_stmt|;
block|}
comment|// Generate two digits per iteration
while|while
condition|(
name|i
operator|>=
literal|65536
condition|)
block|{
name|q
operator|=
name|i
operator|/
literal|100
expr_stmt|;
comment|// really: r = i - (q * 100);
name|r
operator|=
name|i
operator|-
operator|(
operator|(
name|q
operator|<<
literal|6
operator|)
operator|+
operator|(
name|q
operator|<<
literal|5
operator|)
operator|+
operator|(
name|q
operator|<<
literal|2
operator|)
operator|)
expr_stmt|;
name|i
operator|=
name|q
expr_stmt|;
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|DigitOnes
index|[
name|r
index|]
expr_stmt|;
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|DigitTens
index|[
name|r
index|]
expr_stmt|;
block|}
comment|// Fall thru to fast mode for smaller numbers
comment|// assert(i<= 65536, i);
for|for
control|(
init|;
condition|;
control|)
block|{
name|q
operator|=
operator|(
name|i
operator|*
literal|52429
operator|)
operator|>>>
operator|(
literal|16
operator|+
literal|3
operator|)
expr_stmt|;
name|r
operator|=
name|i
operator|-
operator|(
operator|(
name|q
operator|<<
literal|3
operator|)
operator|+
operator|(
name|q
operator|<<
literal|1
operator|)
operator|)
expr_stmt|;
comment|// r = i-(q*10) ...
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|digits
index|[
name|r
index|]
expr_stmt|;
name|i
operator|=
name|q
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
break|break;
block|}
if|if
condition|(
name|sign
operator|!=
literal|0
condition|)
block|{
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|sign
expr_stmt|;
block|}
block|}
DECL|method|atoi
specifier|public
specifier|static
name|int
name|atoi
parameter_list|(
name|byte
index|[]
name|s
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|boolean
name|negative
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|len
init|=
name|s
operator|.
name|length
decl_stmt|;
name|int
name|limit
init|=
operator|-
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|multmin
decl_stmt|;
name|int
name|digit
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|byte
name|firstChar
init|=
name|s
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|firstChar
operator|<
literal|'0'
condition|)
block|{
comment|// Possible leading "-"
if|if
condition|(
name|firstChar
operator|==
literal|'-'
condition|)
block|{
name|negative
operator|=
literal|true
expr_stmt|;
name|limit
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
if|if
condition|(
name|len
operator|==
literal|1
condition|)
comment|// Cannot have lone "-"
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
name|i
operator|++
expr_stmt|;
block|}
name|multmin
operator|=
name|limit
operator|/
literal|10
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|len
condition|)
block|{
comment|// Accumulating negatively avoids surprises near MAX_VALUE
name|digit
operator|=
name|Character
operator|.
name|digit
argument_list|(
name|s
index|[
name|i
operator|++
index|]
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|digit
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
if|if
condition|(
name|result
operator|<
name|multmin
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
name|result
operator|*=
literal|10
expr_stmt|;
if|if
condition|(
name|result
operator|<
name|limit
operator|+
name|digit
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
name|result
operator|-=
name|digit
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
return|return
name|negative
condition|?
name|result
else|:
operator|-
name|result
return|;
block|}
DECL|method|ltoa
specifier|public
specifier|static
name|byte
index|[]
name|ltoa
parameter_list|(
name|long
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
return|return
name|LONG_MIN_VALUE_BYTES
return|;
name|int
name|size
init|=
operator|(
name|i
operator|<
literal|0
operator|)
condition|?
name|stringSize
argument_list|(
operator|-
name|i
argument_list|)
operator|+
literal|1
else|:
name|stringSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|getChars
argument_list|(
name|i
argument_list|,
name|size
argument_list|,
name|buf
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/**      * Places characters representing the integer i into the      * character array buf. The characters are placed into      * the buffer backwards starting with the least significant      * digit at the specified index (exclusive), and working      * backwards from there.      *      * Will fail if i == Long.MIN_VALUE      */
DECL|method|getChars
specifier|static
name|void
name|getChars
parameter_list|(
name|long
name|i
parameter_list|,
name|int
name|index
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|long
name|q
decl_stmt|;
name|int
name|r
decl_stmt|;
name|int
name|charPos
init|=
name|index
decl_stmt|;
name|byte
name|sign
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|sign
operator|=
literal|'-'
expr_stmt|;
name|i
operator|=
operator|-
name|i
expr_stmt|;
block|}
comment|// Get 2 digits/iteration using longs until quotient fits into an int
while|while
condition|(
name|i
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|q
operator|=
name|i
operator|/
literal|100
expr_stmt|;
comment|// really: r = i - (q * 100);
name|r
operator|=
call|(
name|int
call|)
argument_list|(
name|i
operator|-
operator|(
operator|(
name|q
operator|<<
literal|6
operator|)
operator|+
operator|(
name|q
operator|<<
literal|5
operator|)
operator|+
operator|(
name|q
operator|<<
literal|2
operator|)
operator|)
argument_list|)
expr_stmt|;
name|i
operator|=
name|q
expr_stmt|;
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|DigitOnes
index|[
name|r
index|]
expr_stmt|;
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|DigitTens
index|[
name|r
index|]
expr_stmt|;
block|}
comment|// Get 2 digits/iteration using ints
name|int
name|q2
decl_stmt|;
name|int
name|i2
init|=
operator|(
name|int
operator|)
name|i
decl_stmt|;
while|while
condition|(
name|i2
operator|>=
literal|65536
condition|)
block|{
name|q2
operator|=
name|i2
operator|/
literal|100
expr_stmt|;
comment|// really: r = i2 - (q * 100);
name|r
operator|=
name|i2
operator|-
operator|(
operator|(
name|q2
operator|<<
literal|6
operator|)
operator|+
operator|(
name|q2
operator|<<
literal|5
operator|)
operator|+
operator|(
name|q2
operator|<<
literal|2
operator|)
operator|)
expr_stmt|;
name|i2
operator|=
name|q2
expr_stmt|;
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|DigitOnes
index|[
name|r
index|]
expr_stmt|;
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|DigitTens
index|[
name|r
index|]
expr_stmt|;
block|}
comment|// Fall thru to fast mode for smaller numbers
comment|// assert(i2<= 65536, i2);
for|for
control|(
init|;
condition|;
control|)
block|{
name|q2
operator|=
operator|(
name|i2
operator|*
literal|52429
operator|)
operator|>>>
operator|(
literal|16
operator|+
literal|3
operator|)
expr_stmt|;
name|r
operator|=
name|i2
operator|-
operator|(
operator|(
name|q2
operator|<<
literal|3
operator|)
operator|+
operator|(
name|q2
operator|<<
literal|1
operator|)
operator|)
expr_stmt|;
comment|// r = i2-(q2*10) ...
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|digits
index|[
name|r
index|]
expr_stmt|;
name|i2
operator|=
name|q2
expr_stmt|;
if|if
condition|(
name|i2
operator|==
literal|0
condition|)
break|break;
block|}
if|if
condition|(
name|sign
operator|!=
literal|0
condition|)
block|{
name|buf
index|[
operator|--
name|charPos
index|]
operator|=
name|sign
expr_stmt|;
block|}
block|}
comment|// Requires positive x
DECL|method|stringSize
specifier|static
name|int
name|stringSize
parameter_list|(
name|long
name|x
parameter_list|)
block|{
name|long
name|p
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|x
operator|<
name|p
condition|)
return|return
name|i
return|;
name|p
operator|=
literal|10
operator|*
name|p
expr_stmt|;
block|}
return|return
literal|19
return|;
block|}
DECL|method|atol
specifier|public
specifier|static
name|long
name|atol
parameter_list|(
name|byte
index|[]
name|s
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
name|boolean
name|negative
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|len
init|=
name|s
operator|.
name|length
decl_stmt|;
name|long
name|limit
init|=
operator|-
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|multmin
decl_stmt|;
name|int
name|digit
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|byte
name|firstChar
init|=
name|s
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|firstChar
operator|<
literal|'0'
condition|)
block|{
comment|// Possible leading "-"
if|if
condition|(
name|firstChar
operator|==
literal|'-'
condition|)
block|{
name|negative
operator|=
literal|true
expr_stmt|;
name|limit
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
if|if
condition|(
name|len
operator|==
literal|1
condition|)
comment|// Cannot have lone "-"
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
name|i
operator|++
expr_stmt|;
block|}
name|multmin
operator|=
name|limit
operator|/
literal|10
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|len
condition|)
block|{
comment|// Accumulating negatively avoids surprises near MAX_VALUE
name|digit
operator|=
name|Character
operator|.
name|digit
argument_list|(
name|s
index|[
name|i
operator|++
index|]
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|digit
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
if|if
condition|(
name|result
operator|<
name|multmin
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
name|result
operator|*=
literal|10
expr_stmt|;
if|if
condition|(
name|result
operator|<
name|limit
operator|+
name|digit
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
name|result
operator|-=
name|digit
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
return|return
name|negative
condition|?
name|result
else|:
operator|-
name|result
return|;
block|}
block|}
end_class

end_unit

