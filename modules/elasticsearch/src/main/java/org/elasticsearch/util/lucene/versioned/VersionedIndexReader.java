begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.lucene.versioned
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lucene
operator|.
name|versioned
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
annotation|@
name|ThreadSafe
DECL|class|VersionedIndexReader
specifier|public
class|class
name|VersionedIndexReader
extends|extends
name|FilterIndexReader
block|{
DECL|field|version
specifier|protected
specifier|final
name|int
name|version
decl_stmt|;
DECL|field|versionedMap
specifier|protected
specifier|final
name|VersionedMap
name|versionedMap
decl_stmt|;
DECL|method|VersionedIndexReader
specifier|public
name|VersionedIndexReader
parameter_list|(
name|IndexReader
name|in
parameter_list|,
name|int
name|version
parameter_list|,
name|VersionedMap
name|versionedMap
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|versionedMap
operator|=
name|versionedMap
expr_stmt|;
block|}
DECL|method|termDocs
annotation|@
name|Override
specifier|public
name|TermDocs
name|termDocs
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|VersionedTermDocs
argument_list|(
name|in
operator|.
name|termDocs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|termDocs
annotation|@
name|Override
specifier|public
name|TermDocs
name|termDocs
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|VersionedTermDocs
argument_list|(
name|in
operator|.
name|termDocs
argument_list|(
name|term
argument_list|)
argument_list|)
return|;
block|}
DECL|method|termPositions
annotation|@
name|Override
specifier|public
name|TermPositions
name|termPositions
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|VersionedTermPositions
argument_list|(
name|in
operator|.
name|termPositions
argument_list|()
argument_list|)
return|;
block|}
DECL|method|termPositions
annotation|@
name|Override
specifier|public
name|TermPositions
name|termPositions
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|VersionedTermPositions
argument_list|(
name|in
operator|.
name|termPositions
argument_list|(
name|term
argument_list|)
argument_list|)
return|;
block|}
DECL|class|VersionedTermDocs
specifier|private
class|class
name|VersionedTermDocs
extends|extends
name|FilterTermDocs
block|{
DECL|method|VersionedTermDocs
specifier|public
name|VersionedTermDocs
parameter_list|(
name|TermDocs
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|in
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|versionedMap
operator|.
name|beforeVersion
argument_list|(
name|in
operator|.
name|doc
argument_list|()
argument_list|,
name|version
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|int
index|[]
name|docs
parameter_list|,
specifier|final
name|int
index|[]
name|freqs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|docs
operator|.
name|length
condition|)
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|next
argument_list|()
condition|)
return|return
name|i
return|;
name|int
name|doc
init|=
name|in
operator|.
name|doc
argument_list|()
decl_stmt|;
if|if
condition|(
name|versionedMap
operator|.
name|beforeVersion
argument_list|(
name|doc
argument_list|,
name|version
argument_list|)
condition|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|doc
expr_stmt|;
name|freqs
index|[
name|i
index|]
operator|=
name|in
operator|.
name|freq
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|skipTo
argument_list|(
name|i
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|versionedMap
operator|.
name|beforeVersion
argument_list|(
name|in
operator|.
name|doc
argument_list|()
argument_list|,
name|version
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|next
argument_list|()
return|;
block|}
block|}
DECL|class|VersionedTermPositions
specifier|private
class|class
name|VersionedTermPositions
extends|extends
name|VersionedTermDocs
implements|implements
name|TermPositions
block|{
DECL|field|_tp
specifier|final
name|TermPositions
name|_tp
decl_stmt|;
DECL|method|VersionedTermPositions
specifier|public
name|VersionedTermPositions
parameter_list|(
name|TermPositions
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|_tp
operator|=
name|in
expr_stmt|;
block|}
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|_tp
operator|.
name|nextPosition
argument_list|()
return|;
block|}
DECL|method|getPayloadLength
specifier|public
name|int
name|getPayloadLength
parameter_list|()
block|{
return|return
name|_tp
operator|.
name|getPayloadLength
argument_list|()
return|;
block|}
DECL|method|getPayload
specifier|public
name|byte
index|[]
name|getPayload
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|_tp
operator|.
name|getPayload
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
return|;
block|}
DECL|method|isPayloadAvailable
specifier|public
name|boolean
name|isPayloadAvailable
parameter_list|()
block|{
return|return
name|_tp
operator|.
name|isPayloadAvailable
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

