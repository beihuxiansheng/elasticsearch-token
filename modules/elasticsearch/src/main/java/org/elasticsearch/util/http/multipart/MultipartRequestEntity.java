begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.multipart
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * This class is an adaptation of the Apache HttpClient implementation  *  * @link http://hc.apache.org/httpclient-3.x/  */
end_comment

begin_class
DECL|class|MultipartRequestEntity
specifier|public
class|class
name|MultipartRequestEntity
implements|implements
name|RequestEntity
block|{
DECL|field|log
specifier|private
specifier|final
specifier|static
name|ESLogger
name|log
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|MultipartRequestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The Content-Type for multipart/form-data.      */
DECL|field|MULTIPART_FORM_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|MULTIPART_FORM_CONTENT_TYPE
init|=
literal|"multipart/form-data"
decl_stmt|;
comment|/**      * The pool of ASCII chars to be used for generating a multipart boundary.      */
DECL|field|MULTIPART_CHARS
specifier|private
specifier|static
name|byte
index|[]
name|MULTIPART_CHARS
init|=
name|MultipartEncodingUtil
operator|.
name|getAsciiBytes
argument_list|(
literal|"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
argument_list|)
decl_stmt|;
comment|/**      * Generates a random multipart boundary string.      *      * @return      */
DECL|method|generateMultipartBoundary
specifier|private
specifier|static
name|byte
index|[]
name|generateMultipartBoundary
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|rand
operator|.
name|nextInt
argument_list|(
literal|11
argument_list|)
operator|+
literal|30
index|]
decl_stmt|;
comment|// a random size from 30 to 40
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
name|MULTIPART_CHARS
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|MULTIPART_CHARS
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
comment|/**      * The MIME parts as set by the constructor      */
DECL|field|parts
specifier|protected
name|Part
index|[]
name|parts
decl_stmt|;
DECL|field|multipartBoundary
specifier|private
name|byte
index|[]
name|multipartBoundary
decl_stmt|;
DECL|field|methodParams
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|methodParams
decl_stmt|;
comment|/**      * Creates a new multipart entity containing the given parts.      *      * @param parts        The parts to include.      * @param methodParams The params of the HttpMethod using this entity.      */
DECL|method|MultipartRequestEntity
specifier|public
name|MultipartRequestEntity
parameter_list|(
name|Part
index|[]
name|parts
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|methodParams
parameter_list|)
block|{
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parts cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|methodParams
operator|==
literal|null
condition|)
block|{
name|methodParams
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|parts
operator|=
name|parts
expr_stmt|;
name|this
operator|.
name|methodParams
operator|=
name|methodParams
expr_stmt|;
block|}
comment|/**      * Returns the MIME boundary string that is used to demarcate boundaries of      * this part. The first call to this method will implicitly create a new      * boundary string. To create a boundary string first the      * HttpMethodParams.MULTIPART_BOUNDARY parameter is considered. Otherwise      * a random one is generated.      *      * @return The boundary string of this entity in ASCII encoding.      */
DECL|method|getMultipartBoundary
specifier|protected
name|byte
index|[]
name|getMultipartBoundary
parameter_list|()
block|{
if|if
condition|(
name|multipartBoundary
operator|==
literal|null
condition|)
block|{
name|String
name|temp
init|=
name|methodParams
operator|.
name|get
argument_list|(
literal|""
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|methodParams
operator|.
name|get
argument_list|(
literal|""
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
name|multipartBoundary
operator|=
name|MultipartEncodingUtil
operator|.
name|getAsciiBytes
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multipartBoundary
operator|=
name|generateMultipartBoundary
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|multipartBoundary
return|;
block|}
comment|/**      * Returns<code>true</code> if all parts are repeatable,<code>false</code> otherwise.      */
DECL|method|isRepeatable
specifier|public
name|boolean
name|isRepeatable
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|parts
index|[
name|i
index|]
operator|.
name|isRepeatable
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.commons.httpclient.methods.RequestEntity#writeRequest(java.io.OutputStream)      */
DECL|method|writeRequest
specifier|public
name|void
name|writeRequest
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Part
operator|.
name|sendParts
argument_list|(
name|out
argument_list|,
name|parts
argument_list|,
name|getMultipartBoundary
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.commons.httpclient.methods.RequestEntity#getContentLength()      */
DECL|method|getContentLength
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
try|try
block|{
return|return
name|Part
operator|.
name|getLengthOfParts
argument_list|(
name|parts
argument_list|,
name|getMultipartBoundary
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"An exception occurred while getting the length of the parts"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.apache.commons.httpclient.methods.RequestEntity#getContentType()      */
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
name|MULTIPART_FORM_CONTENT_TYPE
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; boundary="
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|MultipartEncodingUtil
operator|.
name|getAsciiString
argument_list|(
name|getMultipartBoundary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

