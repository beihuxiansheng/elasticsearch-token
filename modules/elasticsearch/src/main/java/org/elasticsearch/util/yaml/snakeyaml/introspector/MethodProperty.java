begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.yaml.snakeyaml.introspector
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|introspector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|error
operator|.
name|YAMLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|MethodProperty
specifier|public
class|class
name|MethodProperty
extends|extends
name|Property
block|{
DECL|field|property
specifier|private
specifier|final
name|PropertyDescriptor
name|property
decl_stmt|;
DECL|method|MethodProperty
specifier|public
name|MethodProperty
parameter_list|(
name|PropertyDescriptor
name|property
parameter_list|)
block|{
name|super
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|property
operator|.
name|getPropertyType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|property
operator|.
name|getWriteMethod
argument_list|()
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getActualTypeArguments
specifier|public
name|Type
index|[]
name|getActualTypeArguments
parameter_list|()
block|{
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|property
operator|.
name|getPropertyType
argument_list|()
argument_list|)
operator|||
name|Set
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|property
operator|.
name|getPropertyType
argument_list|()
argument_list|)
operator|||
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|property
operator|.
name|getPropertyType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|property
operator|.
name|getReadMethod
argument_list|()
operator|.
name|getGenericReturnType
argument_list|()
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|grt
init|=
operator|(
name|ParameterizedType
operator|)
name|property
operator|.
name|getReadMethod
argument_list|()
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
return|return
name|grt
operator|.
name|getActualTypeArguments
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
try|try
block|{
return|return
name|property
operator|.
name|getReadMethod
argument_list|()
operator|.
name|invoke
argument_list|(
name|object
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YAMLException
argument_list|(
literal|"Unable to find getter for property '"
operator|+
name|property
operator|.
name|getName
argument_list|()
operator|+
literal|"' on object "
operator|+
name|object
operator|+
literal|":"
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

