begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 Ning, Inc.  *  * Ning licenses this file to you under the Apache License, version 2.0  * (the "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at:  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.http.client.providers
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|AsyncHttpProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|client
operator|.
name|HttpResponseHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|http
operator|.
name|url
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpChunkTrailer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_comment
comment|/**  * A class that represent the HTTP headers.  */
end_comment

begin_class
DECL|class|ResponseHeaders
specifier|public
class|class
name|ResponseHeaders
extends|extends
name|HttpResponseHeaders
argument_list|<
name|HttpResponse
argument_list|>
block|{
DECL|field|trailingHeaders
specifier|private
specifier|final
name|HttpChunkTrailer
name|trailingHeaders
decl_stmt|;
DECL|method|ResponseHeaders
specifier|public
name|ResponseHeaders
parameter_list|(
name|Url
name|url
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|AsyncHttpProvider
argument_list|<
name|HttpResponse
argument_list|>
name|provider
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|,
name|response
argument_list|,
name|provider
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|trailingHeaders
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|ResponseHeaders
specifier|public
name|ResponseHeaders
parameter_list|(
name|Url
name|url
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|AsyncHttpProvider
argument_list|<
name|HttpResponse
argument_list|>
name|provider
parameter_list|,
name|HttpChunkTrailer
name|traillingHeaders
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|,
name|response
argument_list|,
name|provider
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|trailingHeaders
operator|=
name|traillingHeaders
expr_stmt|;
block|}
comment|/**      * Return the HTTP header      *      * @return an {@link org.elasticsearch.util.http.client.Headers}      */
DECL|method|getHeaders
specifier|public
name|Headers
name|getHeaders
parameter_list|()
block|{
name|Headers
name|h
init|=
operator|new
name|Headers
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|response
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|header
range|:
name|response
operator|.
name|getHeaders
argument_list|(
name|s
argument_list|)
control|)
block|{
name|h
operator|.
name|add
argument_list|(
name|s
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|trailingHeaders
operator|!=
literal|null
operator|&&
name|trailingHeaders
operator|.
name|getHeaderNames
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|s
range|:
name|trailingHeaders
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|header
range|:
name|response
operator|.
name|getHeaders
argument_list|(
name|s
argument_list|)
control|)
block|{
name|h
operator|.
name|add
argument_list|(
name|s
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Headers
operator|.
name|unmodifiableHeaders
argument_list|(
name|h
argument_list|)
return|;
block|}
block|}
end_class

end_unit

