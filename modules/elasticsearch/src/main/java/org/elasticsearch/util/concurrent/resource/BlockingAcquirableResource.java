begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.concurrent.resource
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_comment
comment|/**  * A wrapper around a resource that can be released. Note, release should not be  * called directly on the resource itself.  *<p/>  *<p>Yea, I now, the fact that the resouce itself is releasable basically means that  * users of this class should take care... .  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|BlockingAcquirableResource
specifier|public
class|class
name|BlockingAcquirableResource
parameter_list|<
name|T
extends|extends
name|Releasable
parameter_list|>
implements|implements
name|AcquirableResource
argument_list|<
name|T
argument_list|>
block|{
DECL|field|resource
specifier|private
specifier|final
name|T
name|resource
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|field|markForClose
specifier|private
name|boolean
name|markForClose
init|=
literal|false
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|method|BlockingAcquirableResource
specifier|public
name|BlockingAcquirableResource
parameter_list|(
name|T
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
DECL|method|resource
annotation|@
name|Override
specifier|public
name|T
name|resource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
comment|/**      * Acquires the resource, returning<tt>true</tt> if it was acquired.      */
DECL|method|acquire
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|acquire
parameter_list|()
block|{
if|if
condition|(
name|markForClose
condition|)
block|{
return|return
literal|false
return|;
block|}
name|count
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Releases the resource, will close it if there are no more acquirers.      */
DECL|method|release
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|release
parameter_list|()
block|{
name|count
operator|--
expr_stmt|;
name|checkIfCanClose
argument_list|()
expr_stmt|;
block|}
comment|/**      * Marks the resource to be closed. Will close it if there are no current      * acquires.      */
DECL|method|markForClose
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|markForClose
parameter_list|()
block|{
name|markForClose
operator|=
literal|true
expr_stmt|;
name|checkIfCanClose
argument_list|()
expr_stmt|;
block|}
DECL|method|forceClose
annotation|@
name|Override
specifier|public
name|void
name|forceClose
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|markForClose
argument_list|()
expr_stmt|;
block|}
DECL|method|checkIfCanClose
specifier|private
name|void
name|checkIfCanClose
parameter_list|()
block|{
if|if
condition|(
name|markForClose
operator|&&
name|count
operator|<=
literal|0
operator|&&
operator|!
name|closed
condition|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

