begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.util.guice.inject
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|guice
operator|.
name|inject
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|guice
operator|.
name|inject
operator|.
name|internal
operator|.
name|Errors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|guice
operator|.
name|inject
operator|.
name|internal
operator|.
name|ErrorsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|guice
operator|.
name|inject
operator|.
name|internal
operator|.
name|InternalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|guice
operator|.
name|inject
operator|.
name|internal
operator|.
name|InternalFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|guice
operator|.
name|inject
operator|.
name|spi
operator|.
name|Dependency
import|;
end_import

begin_comment
comment|/**  * Resolves a single parameter, to be used in a constructor or method invocation.  */
end_comment

begin_class
DECL|class|SingleParameterInjector
class|class
name|SingleParameterInjector
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|NO_ARGUMENTS
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|NO_ARGUMENTS
init|=
block|{}
decl_stmt|;
DECL|field|dependency
specifier|private
specifier|final
name|Dependency
argument_list|<
name|T
argument_list|>
name|dependency
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|InternalFactory
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|factory
decl_stmt|;
DECL|method|SingleParameterInjector
name|SingleParameterInjector
parameter_list|(
name|Dependency
argument_list|<
name|T
argument_list|>
name|dependency
parameter_list|,
name|InternalFactory
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|this
operator|.
name|dependency
operator|=
name|dependency
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
DECL|method|inject
specifier|private
name|T
name|inject
parameter_list|(
name|Errors
name|errors
parameter_list|,
name|InternalContext
name|context
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|context
operator|.
name|setDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|get
argument_list|(
name|errors
operator|.
name|withSource
argument_list|(
name|dependency
argument_list|)
argument_list|,
name|context
argument_list|,
name|dependency
argument_list|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|setDependency
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns an array of parameter values.    */
DECL|method|getAll
specifier|static
name|Object
index|[]
name|getAll
parameter_list|(
name|Errors
name|errors
parameter_list|,
name|InternalContext
name|context
parameter_list|,
name|SingleParameterInjector
argument_list|<
name|?
argument_list|>
index|[]
name|parameterInjectors
parameter_list|)
throws|throws
name|ErrorsException
block|{
if|if
condition|(
name|parameterInjectors
operator|==
literal|null
condition|)
block|{
return|return
name|NO_ARGUMENTS
return|;
block|}
name|int
name|numErrorsBefore
init|=
name|errors
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|parameterInjectors
operator|.
name|length
decl_stmt|;
name|Object
index|[]
name|parameters
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
comment|// optimization: use manual for/each to save allocating an iterator here
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|SingleParameterInjector
argument_list|<
name|?
argument_list|>
name|parameterInjector
init|=
name|parameterInjectors
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|parameters
index|[
name|i
index|]
operator|=
name|parameterInjector
operator|.
name|inject
argument_list|(
name|errors
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|merge
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|errors
operator|.
name|throwIfNewErrors
argument_list|(
name|numErrorsBefore
argument_list|)
expr_stmt|;
return|return
name|parameters
return|;
block|}
block|}
end_class

end_unit

