begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.json
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ArrayNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapperParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|FastStringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|compression
operator|.
name|GZIPCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|compression
operator|.
name|LzfCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|compression
operator|.
name|ZipCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|Jackson
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|json
operator|.
name|JsonMapperBuilders
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|JsonDocumentMapperParser
specifier|public
class|class
name|JsonDocumentMapperParser
implements|implements
name|DocumentMapperParser
block|{
DECL|field|objectMapper
specifier|private
specifier|final
name|ObjectMapper
name|objectMapper
init|=
name|Jackson
operator|.
name|newObjectMapper
argument_list|()
decl_stmt|;
DECL|field|analysisService
specifier|private
specifier|final
name|AnalysisService
name|analysisService
decl_stmt|;
DECL|method|JsonDocumentMapperParser
specifier|public
name|JsonDocumentMapperParser
parameter_list|(
name|AnalysisService
name|analysisService
parameter_list|)
block|{
name|this
operator|.
name|analysisService
operator|=
name|analysisService
expr_stmt|;
block|}
DECL|method|parse
annotation|@
name|Override
specifier|public
name|DocumentMapper
name|parse
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|MapperParsingException
block|{
return|return
name|parse
argument_list|(
literal|null
argument_list|,
name|source
argument_list|)
return|;
block|}
DECL|method|parse
annotation|@
name|Override
specifier|public
name|DocumentMapper
name|parse
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|JsonNode
name|root
decl_stmt|;
try|try
block|{
name|root
operator|=
name|objectMapper
operator|.
name|readValue
argument_list|(
operator|new
name|FastStringReader
argument_list|(
name|source
argument_list|)
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Failed to parse json mapping definition"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|rootName
init|=
name|root
operator|.
name|getFieldNames
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ObjectNode
name|rootObj
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|// we have no type, we assume the first node is the type
name|rootObj
operator|=
operator|(
name|ObjectNode
operator|)
name|root
operator|.
name|get
argument_list|(
name|rootName
argument_list|)
expr_stmt|;
name|type
operator|=
name|rootName
expr_stmt|;
block|}
else|else
block|{
comment|// we have a type, check if the top level one is the type as well
comment|// if it is, then the root is that node, if not then the root is the master node
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|rootName
argument_list|)
condition|)
block|{
name|JsonNode
name|tmpNode
init|=
name|root
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmpNode
operator|.
name|isObject
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Expected root node name ["
operator|+
name|rootName
operator|+
literal|"] to be of json object type, but its not"
argument_list|)
throw|;
block|}
name|rootObj
operator|=
operator|(
name|ObjectNode
operator|)
name|tmpNode
expr_stmt|;
block|}
else|else
block|{
name|rootObj
operator|=
operator|(
name|ObjectNode
operator|)
name|root
expr_stmt|;
block|}
block|}
name|JsonDocumentMapper
operator|.
name|Builder
name|docBuilder
init|=
name|JsonMapperBuilders
operator|.
name|doc
argument_list|(
name|parseObject
argument_list|(
name|type
argument_list|,
name|rootObj
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|fieldsIt
init|=
name|rootObj
operator|.
name|getFields
argument_list|()
init|;
name|fieldsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|fieldsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|JsonSourceFieldMapper
operator|.
name|JSON_TYPE
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|docBuilder
operator|.
name|sourceField
argument_list|(
name|parseSourceField
argument_list|(
operator|(
name|ObjectNode
operator|)
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JsonIdFieldMapper
operator|.
name|JSON_TYPE
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|docBuilder
operator|.
name|idField
argument_list|(
name|parseIdField
argument_list|(
operator|(
name|ObjectNode
operator|)
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JsonTypeFieldMapper
operator|.
name|JSON_TYPE
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|docBuilder
operator|.
name|typeField
argument_list|(
name|parseTypeField
argument_list|(
operator|(
name|ObjectNode
operator|)
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JsonUidFieldMapper
operator|.
name|JSON_TYPE
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|docBuilder
operator|.
name|uidField
argument_list|(
name|parseUidField
argument_list|(
operator|(
name|ObjectNode
operator|)
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JsonBoostFieldMapper
operator|.
name|JSON_TYPE
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|docBuilder
operator|.
name|boostField
argument_list|(
name|parseBoostField
argument_list|(
operator|(
name|ObjectNode
operator|)
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"indexAnalyzer"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|docBuilder
operator|.
name|indexAnalyzer
argument_list|(
name|analysisService
operator|.
name|analyzer
argument_list|(
name|fieldNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"searchAnalyzer"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|docBuilder
operator|.
name|searchAnalyzer
argument_list|(
name|analysisService
operator|.
name|analyzer
argument_list|(
name|fieldNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"analyzer"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|docBuilder
operator|.
name|indexAnalyzer
argument_list|(
name|analysisService
operator|.
name|analyzer
argument_list|(
name|fieldNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|docBuilder
operator|.
name|searchAnalyzer
argument_list|(
name|analysisService
operator|.
name|analyzer
argument_list|(
name|fieldNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|docBuilder
operator|.
name|hasIndexAnalyzer
argument_list|()
condition|)
block|{
name|docBuilder
operator|.
name|indexAnalyzer
argument_list|(
name|analysisService
operator|.
name|defaultIndexAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|docBuilder
operator|.
name|hasSearchAnalyzer
argument_list|()
condition|)
block|{
name|docBuilder
operator|.
name|searchAnalyzer
argument_list|(
name|analysisService
operator|.
name|defaultSearchAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|docBuilder
operator|.
name|mappingSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|docBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|parseUidField
specifier|private
name|JsonUidFieldMapper
operator|.
name|Builder
name|parseUidField
parameter_list|(
name|ObjectNode
name|uidNode
parameter_list|)
block|{
comment|//        String name = uidNode.get("name") == null ? JsonUidFieldMapper.Defaults.NAME : uidNode.get("name").getTextValue();
name|JsonUidFieldMapper
operator|.
name|Builder
name|builder
init|=
name|uid
argument_list|()
decl_stmt|;
comment|//        for (Iterator<Map.Entry<String, JsonNode>> fieldsIt = uidNode.getFields(); fieldsIt.hasNext();) {
comment|//            Map.Entry<String, JsonNode> entry = fieldsIt.next();
comment|//            String fieldName = entry.getKey();
comment|//            JsonNode fieldNode = entry.getValue();
comment|//
comment|//            if ("indexName".equals(fieldName)) {
comment|//                builder.indexName(fieldNode.getTextValue());
comment|//            }
comment|//        }
return|return
name|builder
return|;
block|}
DECL|method|parseBoostField
specifier|private
name|JsonBoostFieldMapper
operator|.
name|Builder
name|parseBoostField
parameter_list|(
name|ObjectNode
name|boostNode
parameter_list|)
block|{
name|String
name|name
init|=
name|boostNode
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|==
literal|null
condition|?
name|JsonBoostFieldMapper
operator|.
name|Defaults
operator|.
name|NAME
else|:
name|boostNode
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getTextValue
argument_list|()
decl_stmt|;
name|JsonBoostFieldMapper
operator|.
name|Builder
name|builder
init|=
name|boost
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|boostNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|boostNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getNumberValue
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseTypeField
specifier|private
name|JsonTypeFieldMapper
operator|.
name|Builder
name|parseTypeField
parameter_list|(
name|ObjectNode
name|typeNode
parameter_list|)
block|{
comment|//        String name = typeNode.get("name") == null ? JsonTypeFieldMapper.Defaults.NAME : typeNode.get("name").getTextValue();
name|JsonTypeFieldMapper
operator|.
name|Builder
name|builder
init|=
name|type
argument_list|()
decl_stmt|;
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|builder
operator|.
name|name
argument_list|,
name|typeNode
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|parseIdField
specifier|private
name|JsonIdFieldMapper
operator|.
name|Builder
name|parseIdField
parameter_list|(
name|ObjectNode
name|idNode
parameter_list|)
block|{
comment|//        String name = idNode.get("name") == null ? JsonIdFieldMapper.Defaults.NAME : idNode.get("name").getTextValue();
name|JsonIdFieldMapper
operator|.
name|Builder
name|builder
init|=
name|id
argument_list|()
decl_stmt|;
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|builder
operator|.
name|name
argument_list|,
name|idNode
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|parseSourceField
specifier|private
name|JsonSourceFieldMapper
operator|.
name|Builder
name|parseSourceField
parameter_list|(
name|ObjectNode
name|sourceNode
parameter_list|)
block|{
comment|//        String name = sourceNode.get("name") == null ? JsonSourceFieldMapper.Defaults.NAME : sourceNode.get("name").getTextValue();
name|JsonSourceFieldMapper
operator|.
name|Builder
name|builder
init|=
name|source
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|fieldsIt
init|=
name|sourceNode
operator|.
name|getFields
argument_list|()
init|;
name|fieldsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|fieldsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"compressionThreshold"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|compressionThreshold
argument_list|(
name|fieldNode
operator|.
name|getNumberValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"compressionType"
argument_list|)
condition|)
block|{
name|String
name|compressionType
init|=
name|fieldNode
operator|.
name|getTextValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"zip"
operator|.
name|equals
argument_list|(
name|compressionType
argument_list|)
condition|)
block|{
name|builder
operator|.
name|compressor
argument_list|(
operator|new
name|ZipCompressor
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"gzip"
operator|.
name|equals
argument_list|(
name|compressionType
argument_list|)
condition|)
block|{
name|builder
operator|.
name|compressor
argument_list|(
operator|new
name|GZIPCompressor
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"lzf"
operator|.
name|equals
argument_list|(
name|compressionType
argument_list|)
condition|)
block|{
name|builder
operator|.
name|compressor
argument_list|(
operator|new
name|LzfCompressor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No compressor registed under ["
operator|+
name|compressionType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseObject
specifier|private
name|JsonObjectMapper
operator|.
name|Builder
name|parseObject
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectNode
name|node
parameter_list|)
block|{
name|JsonObjectMapper
operator|.
name|Builder
name|builder
init|=
name|object
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|fieldsIt
init|=
name|node
operator|.
name|getFields
argument_list|()
init|;
name|fieldsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|fieldsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"dynamic"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|dynamic
argument_list|(
name|fieldNode
operator|.
name|getBooleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
name|fieldNode
operator|.
name|getTextValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
literal|"object"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Trying to parse an object but has a different type ["
operator|+
name|type
operator|+
literal|"] for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"dateFormats"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|FormatDateTimeFormatter
argument_list|>
name|dateTimeFormatters
init|=
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldNode
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|JsonNode
name|node1
range|:
operator|(
name|ArrayNode
operator|)
name|fieldNode
control|)
block|{
name|dateTimeFormatters
operator|.
name|add
argument_list|(
name|parseDateTimeFormatter
argument_list|(
name|fieldName
argument_list|,
name|node1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"none"
operator|.
name|equals
argument_list|(
name|fieldNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
condition|)
block|{
name|dateTimeFormatters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|dateTimeFormatters
operator|.
name|add
argument_list|(
name|parseDateTimeFormatter
argument_list|(
name|fieldName
argument_list|,
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dateTimeFormatters
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|noDateTimeFormatter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|dateTimeFormatter
argument_list|(
name|dateTimeFormatters
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"enabled"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|enabled
argument_list|(
name|fieldNode
operator|.
name|getBooleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"pathType"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|pathType
argument_list|(
name|parsePathType
argument_list|(
name|name
argument_list|,
name|fieldNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
name|parseProperties
argument_list|(
name|builder
argument_list|,
operator|(
name|ObjectNode
operator|)
name|fieldNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parsePathType
specifier|private
name|JsonPath
operator|.
name|Type
name|parsePathType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"justName"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
literal|"just_name"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|JsonPath
operator|.
name|Type
operator|.
name|JUST_NAME
return|;
block|}
elseif|else
if|if
condition|(
literal|"full"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|JsonPath
operator|.
name|Type
operator|.
name|FULL
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for pathType ["
operator|+
name|path
operator|+
literal|"] for objet ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseProperties
specifier|private
name|void
name|parseProperties
parameter_list|(
name|JsonObjectMapper
operator|.
name|Builder
name|objBuilder
parameter_list|,
name|ObjectNode
name|propsNode
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|propsNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|type
decl_stmt|;
name|JsonNode
name|typeNode
init|=
name|propNode
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNode
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|typeNode
operator|.
name|getTextValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// lets see if we can derive this...
if|if
condition|(
name|propNode
operator|.
name|isObject
argument_list|()
operator|&&
name|propNode
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|JsonObjectMapper
operator|.
name|JSON_TYPE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No type specified for property ["
operator|+
name|propName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|JsonStringFieldMapper
operator|.
name|JSON_TYPE
argument_list|)
condition|)
block|{
name|objBuilder
operator|.
name|add
argument_list|(
name|parseString
argument_list|(
name|propName
argument_list|,
operator|(
name|ObjectNode
operator|)
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|JsonDateFieldMapper
operator|.
name|JSON_TYPE
argument_list|)
condition|)
block|{
name|objBuilder
operator|.
name|add
argument_list|(
name|parseDate
argument_list|(
name|propName
argument_list|,
operator|(
name|ObjectNode
operator|)
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|JsonIntegerFieldMapper
operator|.
name|JSON_TYPE
argument_list|)
condition|)
block|{
name|objBuilder
operator|.
name|add
argument_list|(
name|parseInteger
argument_list|(
name|propName
argument_list|,
operator|(
name|ObjectNode
operator|)
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|JsonLongFieldMapper
operator|.
name|JSON_TYPE
argument_list|)
condition|)
block|{
name|objBuilder
operator|.
name|add
argument_list|(
name|parseLong
argument_list|(
name|propName
argument_list|,
operator|(
name|ObjectNode
operator|)
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|JsonFloatFieldMapper
operator|.
name|JSON_TYPE
argument_list|)
condition|)
block|{
name|objBuilder
operator|.
name|add
argument_list|(
name|parseFloat
argument_list|(
name|propName
argument_list|,
operator|(
name|ObjectNode
operator|)
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|JsonDoubleFieldMapper
operator|.
name|JSON_TYPE
argument_list|)
condition|)
block|{
name|objBuilder
operator|.
name|add
argument_list|(
name|parseDouble
argument_list|(
name|propName
argument_list|,
operator|(
name|ObjectNode
operator|)
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|JsonBooleanFieldMapper
operator|.
name|JSON_TYPE
argument_list|)
condition|)
block|{
name|objBuilder
operator|.
name|add
argument_list|(
name|parseBoolean
argument_list|(
name|propName
argument_list|,
operator|(
name|ObjectNode
operator|)
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|JsonObjectMapper
operator|.
name|JSON_TYPE
argument_list|)
condition|)
block|{
name|objBuilder
operator|.
name|add
argument_list|(
name|parseObject
argument_list|(
name|propName
argument_list|,
operator|(
name|ObjectNode
operator|)
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|JsonBinaryFieldMapper
operator|.
name|JSON_TYPE
argument_list|)
condition|)
block|{
name|objBuilder
operator|.
name|add
argument_list|(
name|parseBinary
argument_list|(
name|propName
argument_list|,
operator|(
name|ObjectNode
operator|)
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseDate
specifier|private
name|JsonDateFieldMapper
operator|.
name|Builder
name|parseDate
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectNode
name|dateNode
parameter_list|)
block|{
name|JsonDateFieldMapper
operator|.
name|Builder
name|builder
init|=
name|dateField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|dateNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|dateNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"format"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|dateTimeFormatter
argument_list|(
name|parseDateTimeFormatter
argument_list|(
name|propName
argument_list|,
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseInteger
specifier|private
name|JsonIntegerFieldMapper
operator|.
name|Builder
name|parseInteger
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectNode
name|integerNode
parameter_list|)
block|{
name|JsonIntegerFieldMapper
operator|.
name|Builder
name|builder
init|=
name|integerField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|integerNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|integerNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getNumberValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseLong
specifier|private
name|JsonLongFieldMapper
operator|.
name|Builder
name|parseLong
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectNode
name|longNode
parameter_list|)
block|{
name|JsonLongFieldMapper
operator|.
name|Builder
name|builder
init|=
name|longField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|longNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|longNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getNumberValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseFloat
specifier|private
name|JsonFloatFieldMapper
operator|.
name|Builder
name|parseFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectNode
name|floatNode
parameter_list|)
block|{
name|JsonFloatFieldMapper
operator|.
name|Builder
name|builder
init|=
name|floatField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|floatNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|floatNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getNumberValue
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseDouble
specifier|private
name|JsonDoubleFieldMapper
operator|.
name|Builder
name|parseDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectNode
name|doubleNode
parameter_list|)
block|{
name|JsonDoubleFieldMapper
operator|.
name|Builder
name|builder
init|=
name|doubleField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|doubleNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|doubleNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getNumberValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseString
specifier|private
name|JsonStringFieldMapper
operator|.
name|Builder
name|parseString
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectNode
name|stringNode
parameter_list|)
block|{
name|JsonStringFieldMapper
operator|.
name|Builder
name|builder
init|=
name|stringField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|stringNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|stringNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseBinary
specifier|private
name|JsonBinaryFieldMapper
operator|.
name|Builder
name|parseBinary
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectNode
name|binaryNode
parameter_list|)
block|{
name|JsonBinaryFieldMapper
operator|.
name|Builder
name|builder
init|=
name|binaryField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|binaryNode
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|parseBoolean
specifier|private
name|JsonBooleanFieldMapper
operator|.
name|Builder
name|parseBoolean
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectNode
name|booleanNode
parameter_list|)
block|{
name|JsonBooleanFieldMapper
operator|.
name|Builder
name|builder
init|=
name|booleanField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|booleanNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|booleanNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getBooleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseNumberField
specifier|private
name|void
name|parseNumberField
parameter_list|(
name|JsonNumberFieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|ObjectNode
name|numberNode
parameter_list|)
block|{
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|numberNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|numberNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"precisionStep"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|precisionStep
argument_list|(
name|propNode
operator|.
name|getNumberValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseJsonField
specifier|private
name|void
name|parseJsonField
parameter_list|(
name|JsonFieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|ObjectNode
name|fieldNode
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|fieldNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"indexName"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|indexName
argument_list|(
name|propNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|store
argument_list|(
name|parseStore
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"index"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|index
argument_list|(
name|parseIndex
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"termVector"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|termVector
argument_list|(
name|parseTermVector
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"boost"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|boost
argument_list|(
name|propNode
operator|.
name|getNumberValue
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"omitNorms"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|omitNorms
argument_list|(
name|propNode
operator|.
name|getBooleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"omitTermFreqAndPositions"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|omitTermFreqAndPositions
argument_list|(
name|propNode
operator|.
name|getBooleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"indexAnalyzer"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|indexAnalyzer
argument_list|(
name|analysisService
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"searchAnalyzer"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|searchAnalyzer
argument_list|(
name|analysisService
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"analyzer"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|indexAnalyzer
argument_list|(
name|analysisService
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|searchAnalyzer
argument_list|(
name|analysisService
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseDateTimeFormatter
specifier|private
name|FormatDateTimeFormatter
name|parseDateTimeFormatter
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|JsonNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isTextual
argument_list|()
condition|)
block|{
return|return
name|Joda
operator|.
name|forPattern
argument_list|(
name|node
operator|.
name|getTextValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO support more complex configuration...
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong node to use to parse date formatters ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseTermVector
specifier|private
name|Field
operator|.
name|TermVector
name|parseTermVector
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|termVector
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|NO
return|;
block|}
elseif|else
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|YES
return|;
block|}
elseif|else
if|if
condition|(
literal|"with_offsets"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|WITH_OFFSETS
return|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS
return|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions_offsets"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for termVector ["
operator|+
name|termVector
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseIndex
specifier|private
name|Field
operator|.
name|Index
name|parseIndex
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|index
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Index
operator|.
name|NO
return|;
block|}
elseif|else
if|if
condition|(
literal|"not_analyzed"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
return|;
block|}
elseif|else
if|if
condition|(
literal|"analyzed"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for index ["
operator|+
name|index
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseStore
specifier|private
name|Field
operator|.
name|Store
name|parseStore
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|store
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|store
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Store
operator|.
name|NO
return|;
block|}
elseif|else
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|store
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Store
operator|.
name|YES
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for store ["
operator|+
name|store
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

