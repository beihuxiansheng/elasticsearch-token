begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|GetDocSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|field
operator|.
name|data
operator|.
name|FieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|FieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|bytes
operator|.
name|ByteFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|doubles
operator|.
name|DoubleFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|floats
operator|.
name|FloatFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|ints
operator|.
name|IntFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|longs
operator|.
name|LongFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|shorts
operator|.
name|ShortFieldData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A numeric filter that can be much faster than {@link org.apache.lucene.search.NumericRangeFilter} at the  * expense of loading numeric values of the field to memory using {@link org.elasticsearch.index.cache.field.data.FieldDataCache}.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|NumericRangeFieldDataFilter
specifier|public
specifier|abstract
class|class
name|NumericRangeFieldDataFilter
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Filter
block|{
DECL|field|fieldDataCache
specifier|final
name|FieldDataCache
name|fieldDataCache
decl_stmt|;
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|lowerVal
specifier|final
name|T
name|lowerVal
decl_stmt|;
DECL|field|upperVal
specifier|final
name|T
name|upperVal
decl_stmt|;
DECL|field|includeLower
specifier|final
name|boolean
name|includeLower
decl_stmt|;
DECL|field|includeUpper
specifier|final
name|boolean
name|includeUpper
decl_stmt|;
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|getLowerVal
specifier|public
name|T
name|getLowerVal
parameter_list|()
block|{
return|return
name|lowerVal
return|;
block|}
DECL|method|getUpperVal
specifier|public
name|T
name|getUpperVal
parameter_list|()
block|{
return|return
name|upperVal
return|;
block|}
DECL|method|isIncludeLower
specifier|public
name|boolean
name|isIncludeLower
parameter_list|()
block|{
return|return
name|includeLower
return|;
block|}
DECL|method|isIncludeUpper
specifier|public
name|boolean
name|isIncludeUpper
parameter_list|()
block|{
return|return
name|includeUpper
return|;
block|}
DECL|method|NumericRangeFieldDataFilter
specifier|protected
name|NumericRangeFieldDataFilter
parameter_list|(
name|FieldDataCache
name|fieldDataCache
parameter_list|,
name|String
name|field
parameter_list|,
name|T
name|lowerVal
parameter_list|,
name|T
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|this
operator|.
name|fieldDataCache
operator|=
name|fieldDataCache
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|lowerVal
operator|=
name|lowerVal
expr_stmt|;
name|this
operator|.
name|upperVal
operator|=
name|upperVal
expr_stmt|;
name|this
operator|.
name|includeLower
operator|=
name|includeLower
expr_stmt|;
name|this
operator|.
name|includeUpper
operator|=
name|includeUpper
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
name|includeLower
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|lowerVal
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|lowerVal
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|upperVal
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|upperVal
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|includeUpper
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|NumericRangeFieldDataFilter
operator|)
condition|)
return|return
literal|false
return|;
name|NumericRangeFieldDataFilter
name|other
init|=
operator|(
name|NumericRangeFieldDataFilter
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|other
operator|.
name|field
argument_list|)
operator|||
name|this
operator|.
name|includeLower
operator|!=
name|other
operator|.
name|includeLower
operator|||
name|this
operator|.
name|includeUpper
operator|!=
name|other
operator|.
name|includeUpper
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|lowerVal
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|lowerVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lowerVal
argument_list|)
else|:
name|other
operator|.
name|lowerVal
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|upperVal
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|upperVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|upperVal
argument_list|)
else|:
name|other
operator|.
name|upperVal
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|field
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|^=
operator|(
name|lowerVal
operator|!=
literal|null
operator|)
condition|?
name|lowerVal
operator|.
name|hashCode
argument_list|()
else|:
literal|550356204
expr_stmt|;
name|h
operator|=
operator|(
name|h
operator|<<
literal|1
operator|)
operator||
operator|(
name|h
operator|>>>
literal|31
operator|)
expr_stmt|;
comment|// rotate to distinguish lower from upper
name|h
operator|^=
operator|(
name|upperVal
operator|!=
literal|null
operator|)
condition|?
name|upperVal
operator|.
name|hashCode
argument_list|()
else|:
operator|-
literal|1674416163
expr_stmt|;
name|h
operator|^=
operator|(
name|includeLower
condition|?
literal|1549299360
else|:
operator|-
literal|365038026
operator|)
operator|^
operator|(
name|includeUpper
condition|?
literal|1721088258
else|:
literal|1948649653
operator|)
expr_stmt|;
return|return
name|h
return|;
block|}
DECL|method|newByteRange
specifier|public
specifier|static
name|NumericRangeFieldDataFilter
argument_list|<
name|Byte
argument_list|>
name|newByteRange
parameter_list|(
name|FieldDataCache
name|fieldDataCache
parameter_list|,
name|String
name|field
parameter_list|,
name|Byte
name|lowerVal
parameter_list|,
name|Byte
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeFieldDataFilter
argument_list|<
name|Byte
argument_list|>
argument_list|(
name|fieldDataCache
argument_list|,
name|field
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|byte
name|i
init|=
name|lowerVal
operator|.
name|byteValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeLower
operator|&&
name|i
operator|==
name|Byte
operator|.
name|MAX_VALUE
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|inclusiveLowerPoint
operator|=
call|(
name|byte
call|)
argument_list|(
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Byte
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|byte
name|i
init|=
name|upperVal
operator|.
name|byteValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|i
operator|==
name|Byte
operator|.
name|MIN_VALUE
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|inclusiveUpperPoint
operator|=
call|(
name|byte
call|)
argument_list|(
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Byte
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
specifier|final
name|ByteFieldData
name|fieldData
init|=
operator|(
name|ByteFieldData
operator|)
name|this
operator|.
name|fieldDataCache
operator|.
name|cache
argument_list|(
name|FieldDataType
operator|.
name|DefaultTypes
operator|.
name|BYTE
argument_list|,
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetDocSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
comment|// not cacheable for several reasons:
comment|// 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset
comment|// 2. Its already fast without in mem bitset, since it works with field data
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fieldData
operator|.
name|hasValue
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fieldData
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|byte
index|[]
name|values
init|=
name|fieldData
operator|.
name|values
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
name|byte
name|value
init|=
name|fieldData
operator|.
name|value
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|newShortRange
specifier|public
specifier|static
name|NumericRangeFieldDataFilter
argument_list|<
name|Short
argument_list|>
name|newShortRange
parameter_list|(
name|FieldDataCache
name|fieldDataCache
parameter_list|,
name|String
name|field
parameter_list|,
name|Short
name|lowerVal
parameter_list|,
name|Short
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeFieldDataFilter
argument_list|<
name|Short
argument_list|>
argument_list|(
name|fieldDataCache
argument_list|,
name|field
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|short
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|short
name|i
init|=
name|lowerVal
operator|.
name|shortValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeLower
operator|&&
name|i
operator|==
name|Short
operator|.
name|MAX_VALUE
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|inclusiveLowerPoint
operator|=
call|(
name|short
call|)
argument_list|(
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Short
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|short
name|i
init|=
name|upperVal
operator|.
name|shortValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|i
operator|==
name|Short
operator|.
name|MIN_VALUE
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|inclusiveUpperPoint
operator|=
call|(
name|short
call|)
argument_list|(
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Short
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
specifier|final
name|ShortFieldData
name|fieldData
init|=
operator|(
name|ShortFieldData
operator|)
name|this
operator|.
name|fieldDataCache
operator|.
name|cache
argument_list|(
name|FieldDataType
operator|.
name|DefaultTypes
operator|.
name|SHORT
argument_list|,
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetDocSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
comment|// not cacheable for several reasons:
comment|// 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset
comment|// 2. Its already fast without in mem bitset, since it works with field data
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fieldData
operator|.
name|hasValue
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fieldData
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|short
index|[]
name|values
init|=
name|fieldData
operator|.
name|values
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|short
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
name|short
name|value
init|=
name|fieldData
operator|.
name|value
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|newIntRange
specifier|public
specifier|static
name|NumericRangeFieldDataFilter
argument_list|<
name|Integer
argument_list|>
name|newIntRange
parameter_list|(
name|FieldDataCache
name|fieldDataCache
parameter_list|,
name|String
name|field
parameter_list|,
name|Integer
name|lowerVal
parameter_list|,
name|Integer
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeFieldDataFilter
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|fieldDataCache
argument_list|,
name|field
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|int
name|i
init|=
name|lowerVal
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeLower
operator|&&
name|i
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|inclusiveLowerPoint
operator|=
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|int
name|i
init|=
name|upperVal
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|i
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|inclusiveUpperPoint
operator|=
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
specifier|final
name|IntFieldData
name|fieldData
init|=
operator|(
name|IntFieldData
operator|)
name|this
operator|.
name|fieldDataCache
operator|.
name|cache
argument_list|(
name|FieldDataType
operator|.
name|DefaultTypes
operator|.
name|INT
argument_list|,
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetDocSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
comment|// not cacheable for several reasons:
comment|// 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset
comment|// 2. Its already fast without in mem bitset, since it works with field data
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fieldData
operator|.
name|hasValue
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fieldData
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|int
index|[]
name|values
init|=
name|fieldData
operator|.
name|values
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
name|int
name|value
init|=
name|fieldData
operator|.
name|value
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|newLongRange
specifier|public
specifier|static
name|NumericRangeFieldDataFilter
argument_list|<
name|Long
argument_list|>
name|newLongRange
parameter_list|(
name|FieldDataCache
name|fieldDataCache
parameter_list|,
name|String
name|field
parameter_list|,
name|Long
name|lowerVal
parameter_list|,
name|Long
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeFieldDataFilter
argument_list|<
name|Long
argument_list|>
argument_list|(
name|fieldDataCache
argument_list|,
name|field
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|long
name|i
init|=
name|lowerVal
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeLower
operator|&&
name|i
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|inclusiveLowerPoint
operator|=
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1l
operator|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|long
name|i
init|=
name|upperVal
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|i
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|inclusiveUpperPoint
operator|=
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1l
operator|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
specifier|final
name|LongFieldData
name|fieldData
init|=
operator|(
name|LongFieldData
operator|)
name|this
operator|.
name|fieldDataCache
operator|.
name|cache
argument_list|(
name|FieldDataType
operator|.
name|DefaultTypes
operator|.
name|LONG
argument_list|,
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetDocSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
comment|// not cacheable for several reasons:
comment|// 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset
comment|// 2. Its already fast without in mem bitset, since it works with field data
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fieldData
operator|.
name|hasValue
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fieldData
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|long
index|[]
name|values
init|=
name|fieldData
operator|.
name|values
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
name|long
name|value
init|=
name|fieldData
operator|.
name|value
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|newFloatRange
specifier|public
specifier|static
name|NumericRangeFieldDataFilter
argument_list|<
name|Float
argument_list|>
name|newFloatRange
parameter_list|(
name|FieldDataCache
name|fieldDataCache
parameter_list|,
name|String
name|field
parameter_list|,
name|Float
name|lowerVal
parameter_list|,
name|Float
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeFieldDataFilter
argument_list|<
name|Float
argument_list|>
argument_list|(
name|fieldDataCache
argument_list|,
name|field
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we transform the floating point numbers to sortable integers
comment|// using NumericUtils to easier find the next bigger/lower value
specifier|final
name|float
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|float
name|f
init|=
name|lowerVal
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|f
operator|>
literal|0.0f
operator|&&
name|Float
operator|.
name|isInfinite
argument_list|(
name|f
argument_list|)
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|int
name|i
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|inclusiveLowerPoint
operator|=
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Float
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|float
name|f
init|=
name|upperVal
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|f
operator|<
literal|0.0f
operator|&&
name|Float
operator|.
name|isInfinite
argument_list|(
name|f
argument_list|)
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|int
name|i
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|inclusiveUpperPoint
operator|=
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Float
operator|.
name|POSITIVE_INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
specifier|final
name|FloatFieldData
name|fieldData
init|=
operator|(
name|FloatFieldData
operator|)
name|this
operator|.
name|fieldDataCache
operator|.
name|cache
argument_list|(
name|FieldDataType
operator|.
name|DefaultTypes
operator|.
name|FLOAT
argument_list|,
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetDocSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
comment|// not cacheable for several reasons:
comment|// 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset
comment|// 2. Its already fast without in mem bitset, since it works with field data
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fieldData
operator|.
name|hasValue
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fieldData
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|float
index|[]
name|values
init|=
name|fieldData
operator|.
name|values
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|float
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
name|float
name|value
init|=
name|fieldData
operator|.
name|value
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|newDoubleRange
specifier|public
specifier|static
name|NumericRangeFieldDataFilter
argument_list|<
name|Double
argument_list|>
name|newDoubleRange
parameter_list|(
name|FieldDataCache
name|fieldDataCache
parameter_list|,
name|String
name|field
parameter_list|,
name|Double
name|lowerVal
parameter_list|,
name|Double
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|NumericRangeFieldDataFilter
argument_list|<
name|Double
argument_list|>
argument_list|(
name|fieldDataCache
argument_list|,
name|field
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we transform the floating point numbers to sortable integers
comment|// using NumericUtils to easier find the next bigger/lower value
specifier|final
name|double
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|double
name|f
init|=
name|lowerVal
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|f
operator|>
literal|0.0
operator|&&
name|Double
operator|.
name|isInfinite
argument_list|(
name|f
argument_list|)
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|long
name|i
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|inclusiveLowerPoint
operator|=
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1L
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Double
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|double
name|f
init|=
name|upperVal
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|f
operator|<
literal|0.0
operator|&&
name|Double
operator|.
name|isInfinite
argument_list|(
name|f
argument_list|)
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
name|long
name|i
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|inclusiveUpperPoint
operator|=
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1L
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Double
operator|.
name|POSITIVE_INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
specifier|final
name|DoubleFieldData
name|fieldData
init|=
operator|(
name|DoubleFieldData
operator|)
name|this
operator|.
name|fieldDataCache
operator|.
name|cache
argument_list|(
name|FieldDataType
operator|.
name|DefaultTypes
operator|.
name|DOUBLE
argument_list|,
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetDocSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
comment|// not cacheable for several reasons:
comment|// 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset
comment|// 2. Its already fast without in mem bitset, since it works with field data
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fieldData
operator|.
name|hasValue
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fieldData
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|double
index|[]
name|values
init|=
name|fieldData
operator|.
name|values
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
name|double
name|value
init|=
name|fieldData
operator|.
name|value
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
name|value
operator|>=
name|inclusiveLowerPoint
operator|&&
name|value
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

