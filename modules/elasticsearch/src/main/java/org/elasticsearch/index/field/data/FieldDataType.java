begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.field.data
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|field
operator|.
name|data
operator|.
name|FieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|doubles
operator|.
name|DoubleFieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|floats
operator|.
name|FloatFieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|ints
operator|.
name|IntFieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|longs
operator|.
name|LongFieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|shorts
operator|.
name|ShortFieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|strings
operator|.
name|StringFieldDataType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_interface
DECL|interface|FieldDataType
specifier|public
interface|interface
name|FieldDataType
parameter_list|<
name|T
extends|extends
name|FieldData
parameter_list|>
block|{
DECL|class|DefaultTypes
specifier|public
specifier|static
specifier|final
class|class
name|DefaultTypes
block|{
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|StringFieldDataType
name|STRING
init|=
operator|new
name|StringFieldDataType
argument_list|()
decl_stmt|;
DECL|field|SHORT
specifier|public
specifier|static
specifier|final
name|ShortFieldDataType
name|SHORT
init|=
operator|new
name|ShortFieldDataType
argument_list|()
decl_stmt|;
DECL|field|INT
specifier|public
specifier|static
specifier|final
name|IntFieldDataType
name|INT
init|=
operator|new
name|IntFieldDataType
argument_list|()
decl_stmt|;
DECL|field|LONG
specifier|public
specifier|static
specifier|final
name|LongFieldDataType
name|LONG
init|=
operator|new
name|LongFieldDataType
argument_list|()
decl_stmt|;
DECL|field|FLOAT
specifier|public
specifier|static
specifier|final
name|FloatFieldDataType
name|FLOAT
init|=
operator|new
name|FloatFieldDataType
argument_list|()
decl_stmt|;
DECL|field|DOUBLE
specifier|public
specifier|static
specifier|final
name|DoubleFieldDataType
name|DOUBLE
init|=
operator|new
name|DoubleFieldDataType
argument_list|()
decl_stmt|;
block|}
DECL|method|fieldDataClass
name|Class
argument_list|<
name|T
argument_list|>
name|fieldDataClass
parameter_list|()
function_decl|;
DECL|method|newFieldComparatorSource
name|FieldComparatorSource
name|newFieldComparatorSource
parameter_list|(
name|FieldDataCache
name|cache
parameter_list|)
function_decl|;
DECL|method|load
name|T
name|load
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

