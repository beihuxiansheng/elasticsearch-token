begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogStreams
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|FsStreamSnapshot
specifier|public
class|class
name|FsStreamSnapshot
implements|implements
name|Translog
operator|.
name|Snapshot
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
DECL|field|raf
specifier|private
specifier|final
name|RafReference
name|raf
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|dis
specifier|private
specifier|final
name|DataInputStream
name|dis
decl_stmt|;
DECL|field|lastOperationRead
specifier|private
name|Translog
operator|.
name|Operation
name|lastOperationRead
init|=
literal|null
decl_stmt|;
DECL|field|position
specifier|private
name|int
name|position
init|=
literal|0
decl_stmt|;
DECL|field|cachedData
specifier|private
name|byte
index|[]
name|cachedData
decl_stmt|;
DECL|method|FsStreamSnapshot
specifier|public
name|FsStreamSnapshot
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|long
name|id
parameter_list|,
name|RafReference
name|raf
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|raf
operator|=
name|raf
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|dis
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|raf
operator|.
name|file
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|translogId
annotation|@
name|Override
specifier|public
name|long
name|translogId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|position
annotation|@
name|Override
specifier|public
name|long
name|position
parameter_list|()
block|{
return|return
name|this
operator|.
name|position
return|;
block|}
DECL|method|length
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|this
operator|.
name|length
return|;
block|}
DECL|method|hasNext
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|position
operator|>
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|opSize
init|=
name|dis
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|position
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
operator|(
name|position
operator|+
name|opSize
operator|)
operator|>
name|length
condition|)
block|{
comment|// restore the position to before we read the opSize
name|position
operator|-=
literal|4
expr_stmt|;
return|return
literal|false
return|;
block|}
name|position
operator|+=
name|opSize
expr_stmt|;
if|if
condition|(
name|cachedData
operator|==
literal|null
condition|)
block|{
name|cachedData
operator|=
operator|new
name|byte
index|[
name|opSize
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cachedData
operator|.
name|length
operator|<
name|opSize
condition|)
block|{
name|cachedData
operator|=
operator|new
name|byte
index|[
name|opSize
index|]
expr_stmt|;
block|}
name|dis
operator|.
name|readFully
argument_list|(
name|cachedData
argument_list|,
literal|0
argument_list|,
name|opSize
argument_list|)
expr_stmt|;
name|lastOperationRead
operator|=
name|TranslogStreams
operator|.
name|readTranslogOperation
argument_list|(
operator|new
name|BytesStreamInput
argument_list|(
name|cachedData
argument_list|,
literal|0
argument_list|,
name|opSize
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|next
annotation|@
name|Override
specifier|public
name|Translog
operator|.
name|Operation
name|next
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastOperationRead
return|;
block|}
DECL|method|seekForward
annotation|@
name|Override
specifier|public
name|void
name|seekForward
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|position
operator|+=
name|length
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dis
operator|.
name|skip
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to seek forward"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|release
annotation|@
name|Override
specifier|public
name|boolean
name|release
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
try|try
block|{
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|raf
operator|.
name|decreaseRefCount
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

