begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|filter
operator|.
name|FilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|ScheduledRefreshableEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParserMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParserService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|TypeMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
annotation|@
name|IndexShardLifecycle
annotation|@
name|ThreadSafe
DECL|class|InternalIndexShard
specifier|public
class|class
name|InternalIndexShard
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|IndexShard
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|queryParserService
specifier|private
specifier|final
name|IndexQueryParserService
name|queryParserService
decl_stmt|;
DECL|field|filterCache
specifier|private
specifier|final
name|FilterCache
name|filterCache
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|engine
specifier|private
specifier|final
name|Engine
name|engine
decl_stmt|;
DECL|field|translog
specifier|private
specifier|final
name|Translog
name|translog
decl_stmt|;
comment|// the number of docs to sniff for mapping information in each type
DECL|field|mappingSnifferDocs
specifier|private
specifier|final
name|int
name|mappingSnifferDocs
decl_stmt|;
DECL|field|mutex
specifier|private
specifier|final
name|Object
name|mutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
specifier|volatile
name|IndexShardState
name|state
decl_stmt|;
DECL|field|refreshScheduledFuture
specifier|private
name|ScheduledFuture
name|refreshScheduledFuture
decl_stmt|;
DECL|field|shardRouting
specifier|private
specifier|volatile
name|ShardRouting
name|shardRouting
decl_stmt|;
DECL|method|InternalIndexShard
annotation|@
name|Inject
specifier|public
name|InternalIndexShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|Store
name|store
parameter_list|,
name|Engine
name|engine
parameter_list|,
name|Translog
name|translog
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|MapperService
name|mapperService
parameter_list|,
name|IndexQueryParserService
name|queryParserService
parameter_list|,
name|FilterCache
name|filterCache
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|engine
operator|=
name|engine
expr_stmt|;
name|this
operator|.
name|translog
operator|=
name|translog
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|this
operator|.
name|queryParserService
operator|=
name|queryParserService
expr_stmt|;
name|this
operator|.
name|filterCache
operator|=
name|filterCache
expr_stmt|;
name|state
operator|=
name|IndexShardState
operator|.
name|CREATED
expr_stmt|;
name|this
operator|.
name|mappingSnifferDocs
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"mappingSnifferDocs"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|store
specifier|public
name|Store
name|store
parameter_list|()
block|{
return|return
name|this
operator|.
name|store
return|;
block|}
DECL|method|engine
specifier|public
name|Engine
name|engine
parameter_list|()
block|{
return|return
name|engine
return|;
block|}
DECL|method|translog
specifier|public
name|Translog
name|translog
parameter_list|()
block|{
return|return
name|translog
return|;
block|}
DECL|method|routingEntry
specifier|public
name|ShardRouting
name|routingEntry
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardRouting
return|;
block|}
DECL|method|routingEntry
specifier|public
name|InternalIndexShard
name|routingEntry
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Trying to set a routing entry with shardId ["
operator|+
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|+
literal|"] on a shard with shardId ["
operator|+
name|shardId
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|shardRouting
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|shardRouting
operator|.
name|primary
argument_list|()
operator|&&
name|this
operator|.
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Suspect illegal state: Trying to move shard from primary mode to backup mode"
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|shardRouting
operator|=
name|shardRouting
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|recovering
specifier|public
name|IndexShardState
name|recovering
parameter_list|()
throws|throws
name|IndexShardStartedException
throws|,
name|IndexShardRelocatedException
throws|,
name|IndexShardRecoveringException
throws|,
name|IndexShardClosedException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|IndexShardState
name|returnValue
init|=
name|state
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|==
name|IndexShardState
operator|.
name|STARTED
condition|)
block|{
throw|throw
operator|new
name|IndexShardStartedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|==
name|IndexShardState
operator|.
name|RELOCATED
condition|)
block|{
throw|throw
operator|new
name|IndexShardRelocatedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|==
name|IndexShardState
operator|.
name|RECOVERING
condition|)
block|{
throw|throw
operator|new
name|IndexShardRecoveringException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|state
operator|=
name|IndexShardState
operator|.
name|RECOVERING
expr_stmt|;
return|return
name|returnValue
return|;
block|}
block|}
DECL|method|restoreRecoveryState
specifier|public
name|InternalIndexShard
name|restoreRecoveryState
parameter_list|(
name|IndexShardState
name|stateToRestore
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|state
operator|!=
name|IndexShardState
operator|.
name|RECOVERING
condition|)
block|{
throw|throw
operator|new
name|IndexShardNotRecoveringException
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|)
throw|;
block|}
name|this
operator|.
name|state
operator|=
name|stateToRestore
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|relocated
specifier|public
name|InternalIndexShard
name|relocated
parameter_list|()
throws|throws
name|IndexShardNotStartedException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|state
operator|!=
name|IndexShardState
operator|.
name|STARTED
condition|)
block|{
throw|throw
operator|new
name|IndexShardNotStartedException
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|)
throw|;
block|}
name|state
operator|=
name|IndexShardState
operator|.
name|RELOCATED
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|start
specifier|public
name|InternalIndexShard
name|start
parameter_list|()
throws|throws
name|IndexShardStartedException
throws|,
name|IndexShardRelocatedException
throws|,
name|IndexShardClosedException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|state
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|==
name|IndexShardState
operator|.
name|STARTED
condition|)
block|{
throw|throw
operator|new
name|IndexShardStartedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|==
name|IndexShardState
operator|.
name|RELOCATED
condition|)
block|{
throw|throw
operator|new
name|IndexShardRelocatedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|engine
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduleRefresherIfNeeded
argument_list|()
expr_stmt|;
name|state
operator|=
name|IndexShardState
operator|.
name|STARTED
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|state
specifier|public
name|IndexShardState
name|state
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/**      * Returns the estimated flushable memory size. Returns<tt>null</tt> if not available.      */
DECL|method|estimateFlushableMemorySize
specifier|public
name|SizeValue
name|estimateFlushableMemorySize
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
return|return
name|engine
operator|.
name|estimateFlushableMemorySize
argument_list|()
return|;
block|}
DECL|method|create
specifier|public
name|void
name|create
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
name|innerCreate
argument_list|(
name|type
argument_list|,
name|id
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|method|innerCreate
specifier|private
name|void
name|innerCreate
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|mapperService
operator|.
name|type
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DocumentMapperNotFoundException
argument_list|(
literal|"No mapper found for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|ParsedDocument
name|doc
init|=
name|docMapper
operator|.
name|parse
argument_list|(
name|type
argument_list|,
name|id
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Indexing {}"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
name|doc
operator|.
name|doc
argument_list|()
argument_list|,
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
argument_list|,
name|docMapper
operator|.
name|type
argument_list|()
argument_list|,
name|doc
operator|.
name|id
argument_list|()
argument_list|,
name|doc
operator|.
name|source
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|index
specifier|public
name|void
name|index
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
name|innerIndex
argument_list|(
name|type
argument_list|,
name|id
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|method|innerIndex
specifier|private
name|void
name|innerIndex
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|mapperService
operator|.
name|type
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DocumentMapperNotFoundException
argument_list|(
literal|"No mapper found for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|ParsedDocument
name|doc
init|=
name|docMapper
operator|.
name|parse
argument_list|(
name|type
argument_list|,
name|id
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Indexing {}"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|docMapper
operator|.
name|uidMapper
argument_list|()
operator|.
name|term
argument_list|(
name|doc
operator|.
name|uid
argument_list|()
argument_list|)
argument_list|,
name|doc
operator|.
name|doc
argument_list|()
argument_list|,
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
argument_list|,
name|docMapper
operator|.
name|type
argument_list|()
argument_list|,
name|doc
operator|.
name|id
argument_list|()
argument_list|,
name|doc
operator|.
name|source
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|mapperService
operator|.
name|type
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DocumentMapperNotFoundException
argument_list|(
literal|"No mapper found for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|innerDelete
argument_list|(
name|docMapper
operator|.
name|uidMapper
argument_list|()
operator|.
name|term
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|Term
name|uid
parameter_list|)
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
name|innerDelete
argument_list|(
name|uid
argument_list|)
expr_stmt|;
block|}
DECL|method|innerDelete
specifier|private
name|void
name|innerDelete
parameter_list|(
name|Term
name|uid
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Deleting [{}]"
argument_list|,
name|uid
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteByQuery
specifier|public
name|void
name|deleteByQuery
parameter_list|(
name|String
name|querySource
parameter_list|,
annotation|@
name|Nullable
name|String
name|queryParserName
parameter_list|,
name|String
modifier|...
name|types
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
if|if
condition|(
name|types
operator|==
literal|null
condition|)
block|{
name|types
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
name|innerDeleteByQuery
argument_list|(
name|querySource
argument_list|,
name|queryParserName
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
DECL|method|innerDeleteByQuery
specifier|private
name|void
name|innerDeleteByQuery
parameter_list|(
name|String
name|querySource
parameter_list|,
name|String
name|queryParserName
parameter_list|,
name|String
modifier|...
name|types
parameter_list|)
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParserService
operator|.
name|defaultIndexQueryParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryParserName
operator|!=
literal|null
condition|)
block|{
name|queryParser
operator|=
name|queryParserService
operator|.
name|indexQueryParser
argument_list|(
name|queryParserName
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexQueryParserMissingException
argument_list|(
name|queryParserName
argument_list|)
throw|;
block|}
block|}
name|Query
name|query
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|querySource
argument_list|)
decl_stmt|;
name|query
operator|=
name|filterByTypesIfNeeded
argument_list|(
name|query
argument_list|,
name|types
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Deleting By Query [{}]"
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|DeleteByQuery
argument_list|(
name|query
argument_list|,
name|querySource
argument_list|,
name|queryParserName
argument_list|,
name|types
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|readAllowed
argument_list|()
expr_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|mapperService
operator|.
name|type
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DocumentMapperNotFoundException
argument_list|(
literal|"No mapper found for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|searcher
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|docId
init|=
name|Lucene
operator|.
name|docId
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
argument_list|,
name|docMapper
operator|.
name|uidMapper
argument_list|()
operator|.
name|term
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|docId
operator|==
name|Lucene
operator|.
name|NO_DOC
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Get for [{}#{}] returned no result"
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|Document
name|doc
init|=
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|document
argument_list|(
name|docId
argument_list|,
name|docMapper
operator|.
name|sourceMapper
argument_list|()
operator|.
name|fieldSelector
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Get for [{}#{}] returned [{}]"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|type
block|,
name|id
block|,
name|doc
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|docMapper
operator|.
name|sourceMapper
argument_list|()
operator|.
name|value
argument_list|(
name|doc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"Failed to get type ["
operator|+
name|type
operator|+
literal|"] and id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|count
specifier|public
name|long
name|count
parameter_list|(
name|float
name|minScore
parameter_list|,
name|String
name|querySource
parameter_list|,
annotation|@
name|Nullable
name|String
name|queryParserName
parameter_list|,
name|String
modifier|...
name|types
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|readAllowed
argument_list|()
expr_stmt|;
name|IndexQueryParser
name|queryParser
init|=
name|queryParserService
operator|.
name|defaultIndexQueryParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryParserName
operator|!=
literal|null
condition|)
block|{
name|queryParser
operator|=
name|queryParserService
operator|.
name|indexQueryParser
argument_list|(
name|queryParserName
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexQueryParserMissingException
argument_list|(
name|queryParserName
argument_list|)
throw|;
block|}
block|}
name|Query
name|query
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|querySource
argument_list|)
decl_stmt|;
name|query
operator|=
name|filterByTypesIfNeeded
argument_list|(
name|query
argument_list|,
name|types
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|searcher
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|count
init|=
name|Lucene
operator|.
name|count
argument_list|(
name|searcher
operator|.
name|searcher
argument_list|()
argument_list|,
name|query
argument_list|,
name|minScore
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Count of [{}] is [{}]"
argument_list|,
name|query
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"Failed to count query ["
operator|+
name|query
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|refresh
specifier|public
name|void
name|refresh
parameter_list|(
name|Engine
operator|.
name|Refresh
name|refresh
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Refresh with {}"
argument_list|,
name|refresh
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
block|}
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|Engine
operator|.
name|Flush
name|flush
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Flush"
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|flush
argument_list|(
name|flush
argument_list|)
expr_stmt|;
block|}
DECL|method|optimize
annotation|@
name|Override
specifier|public
name|void
name|optimize
parameter_list|(
name|Engine
operator|.
name|Optimize
name|optimize
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Optimize with {}"
argument_list|,
name|optimize
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|optimize
argument_list|(
name|optimize
argument_list|)
expr_stmt|;
block|}
DECL|method|snapshot
specifier|public
name|void
name|snapshot
parameter_list|(
name|Engine
operator|.
name|SnapshotHandler
name|snapshotHandler
parameter_list|)
throws|throws
name|EngineException
block|{
name|readAllowed
argument_list|()
expr_stmt|;
name|engine
operator|.
name|snapshot
argument_list|(
name|snapshotHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|recover
specifier|public
name|void
name|recover
parameter_list|(
name|Engine
operator|.
name|RecoveryHandler
name|recoveryHandler
parameter_list|)
throws|throws
name|EngineException
block|{
name|writeAllowed
argument_list|()
expr_stmt|;
name|engine
operator|.
name|recover
argument_list|(
name|recoveryHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|searcher
specifier|public
name|Engine
operator|.
name|Searcher
name|searcher
parameter_list|()
block|{
name|readAllowed
argument_list|()
expr_stmt|;
return|return
name|engine
operator|.
name|searcher
argument_list|()
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|state
operator|!=
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
if|if
condition|(
name|refreshScheduledFuture
operator|!=
literal|null
condition|)
block|{
name|refreshScheduledFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|refreshScheduledFuture
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|state
operator|=
name|IndexShardState
operator|.
name|CLOSED
expr_stmt|;
block|}
block|}
DECL|method|performRecovery
specifier|public
name|void
name|performRecovery
parameter_list|(
name|Iterable
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operations
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
if|if
condition|(
name|state
operator|!=
name|IndexShardState
operator|.
name|RECOVERING
condition|)
block|{
throw|throw
operator|new
name|IndexShardNotRecoveringException
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|)
throw|;
block|}
name|engine
operator|.
name|start
argument_list|()
expr_stmt|;
name|applyTranslogOperations
argument_list|(
name|operations
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|state
operator|=
name|IndexShardState
operator|.
name|STARTED
expr_stmt|;
block|}
name|threadPool
operator|.
name|execute
argument_list|(
operator|new
name|ShardMappingSniffer
argument_list|()
argument_list|)
expr_stmt|;
name|scheduleRefresherIfNeeded
argument_list|()
expr_stmt|;
block|}
DECL|method|performRecovery
specifier|public
name|void
name|performRecovery
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|,
name|boolean
name|phase3
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
if|if
condition|(
name|state
operator|!=
name|IndexShardState
operator|.
name|RECOVERING
condition|)
block|{
throw|throw
operator|new
name|IndexShardNotRecoveringException
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|phase3
condition|)
block|{
comment|// start the engine, but the shard is not started yet...
name|engine
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|applyTranslogOperations
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|phase3
condition|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|state
operator|=
name|IndexShardState
operator|.
name|STARTED
expr_stmt|;
block|}
name|threadPool
operator|.
name|execute
argument_list|(
operator|new
name|ShardMappingSniffer
argument_list|()
argument_list|)
expr_stmt|;
name|scheduleRefresherIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|applyTranslogOperations
specifier|private
name|void
name|applyTranslogOperations
parameter_list|(
name|Iterable
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|snapshot
parameter_list|)
block|{
for|for
control|(
name|Translog
operator|.
name|Operation
name|operation
range|:
name|snapshot
control|)
block|{
switch|switch
condition|(
name|operation
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|operation
decl_stmt|;
name|innerCreate
argument_list|(
name|create
operator|.
name|type
argument_list|()
argument_list|,
name|create
operator|.
name|id
argument_list|()
argument_list|,
name|create
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAVE
case|:
name|Translog
operator|.
name|Index
name|index
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|operation
decl_stmt|;
name|innerIndex
argument_list|(
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|index
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|Translog
operator|.
name|Delete
name|delete
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|operation
decl_stmt|;
name|innerDelete
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE_BY_QUERY
case|:
name|Translog
operator|.
name|DeleteByQuery
name|deleteByQuery
init|=
operator|(
name|Translog
operator|.
name|DeleteByQuery
operator|)
name|operation
decl_stmt|;
name|innerDeleteByQuery
argument_list|(
name|deleteByQuery
operator|.
name|source
argument_list|()
argument_list|,
name|deleteByQuery
operator|.
name|queryParserName
argument_list|()
argument_list|,
name|deleteByQuery
operator|.
name|types
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"No operation defined for ["
operator|+
name|operation
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Returns<tt>true</tt> if this shard can ignore a recovery attempt made to it (since the already doing/done it)      */
DECL|method|ignoreRecoveryAttempt
specifier|public
name|boolean
name|ignoreRecoveryAttempt
parameter_list|()
block|{
name|IndexShardState
name|state
init|=
name|state
argument_list|()
decl_stmt|;
comment|// one time volatile read
return|return
name|state
operator|==
name|IndexShardState
operator|.
name|RECOVERING
operator|||
name|state
operator|==
name|IndexShardState
operator|.
name|STARTED
operator|||
name|state
operator|==
name|IndexShardState
operator|.
name|RELOCATED
operator|||
name|state
operator|==
name|IndexShardState
operator|.
name|CLOSED
return|;
block|}
DECL|method|readAllowed
specifier|public
name|void
name|readAllowed
parameter_list|()
throws|throws
name|IllegalIndexShardStateException
block|{
name|IndexShardState
name|state
init|=
name|this
operator|.
name|state
decl_stmt|;
comment|// one time volatile read
if|if
condition|(
name|state
operator|!=
name|IndexShardState
operator|.
name|STARTED
operator|&&
name|state
operator|!=
name|IndexShardState
operator|.
name|RELOCATED
condition|)
block|{
throw|throw
operator|new
name|IllegalIndexShardStateException
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|,
literal|"Read operations only allowed when started/relocated"
argument_list|)
throw|;
block|}
block|}
DECL|method|writeAllowed
specifier|public
name|void
name|writeAllowed
parameter_list|()
throws|throws
name|IllegalIndexShardStateException
block|{
name|IndexShardState
name|state
init|=
name|this
operator|.
name|state
decl_stmt|;
comment|// one time volatile read
if|if
condition|(
name|state
operator|!=
name|IndexShardState
operator|.
name|STARTED
condition|)
block|{
throw|throw
operator|new
name|IndexShardNotStartedException
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|)
throw|;
block|}
block|}
DECL|method|scheduleRefresherIfNeeded
specifier|private
name|void
name|scheduleRefresherIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|engine
operator|instanceof
name|ScheduledRefreshableEngine
condition|)
block|{
name|TimeValue
name|refreshInterval
init|=
operator|(
operator|(
name|ScheduledRefreshableEngine
operator|)
name|engine
operator|)
operator|.
name|refreshInterval
argument_list|()
decl_stmt|;
if|if
condition|(
name|refreshInterval
operator|.
name|millis
argument_list|()
operator|>
literal|0
condition|)
block|{
name|refreshScheduledFuture
operator|=
name|threadPool
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|EngineRefresher
argument_list|()
argument_list|,
name|refreshInterval
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Scheduling refresher every {}"
argument_list|,
name|refreshInterval
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|filterByTypesIfNeeded
specifier|private
name|Query
name|filterByTypesIfNeeded
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
block|{
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|types
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|type
init|=
name|types
index|[
literal|0
index|]
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|mapperService
operator|.
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TypeMissingException
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|type
argument_list|)
throw|;
block|}
name|Filter
name|typeFilter
init|=
operator|new
name|TermFilter
argument_list|(
name|docMapper
operator|.
name|typeMapper
argument_list|()
operator|.
name|term
argument_list|(
name|docMapper
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|typeFilter
operator|=
name|filterCache
operator|.
name|cache
argument_list|(
name|typeFilter
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FilteredQuery
argument_list|(
name|query
argument_list|,
name|typeFilter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BooleanFilter
name|booleanFilter
init|=
operator|new
name|BooleanFilter
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|mapperService
operator|.
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TypeMissingException
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|type
argument_list|)
throw|;
block|}
name|Filter
name|typeFilter
init|=
operator|new
name|TermFilter
argument_list|(
name|docMapper
operator|.
name|typeMapper
argument_list|()
operator|.
name|term
argument_list|(
name|docMapper
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|typeFilter
operator|=
name|filterCache
operator|.
name|cache
argument_list|(
name|typeFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|typeFilter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
operator|new
name|FilteredQuery
argument_list|(
name|query
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|query
return|;
block|}
DECL|class|EngineRefresher
specifier|private
class|class
name|EngineRefresher
implements|implements
name|Runnable
block|{
DECL|method|run
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to perform scheduled engine refresh"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * The mapping sniffer reads docs from the index and introduces them into the mapping service. This is      * because of dynamic fields and we want to reintroduce them.      *      *<p>Note, this is done on the shard level, we might have other dynamic fields in other shards, but      * this will be taken care off in another component.      */
DECL|class|ShardMappingSniffer
specifier|private
class|class
name|ShardMappingSniffer
implements|implements
name|Runnable
block|{
DECL|method|run
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TermEnum
name|termEnum
init|=
literal|null
decl_stmt|;
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|searcher
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|termEnum
operator|=
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Term
name|term
init|=
name|termEnum
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|term
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|)
condition|)
block|{
break|break;
block|}
name|typeNames
operator|.
name|add
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|termEnum
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Sniffing mapping for [{}]"
argument_list|,
name|typeNames
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|type
range|:
name|typeNames
control|)
block|{
name|threadPool
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|searcher
argument_list|()
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|filterCache
operator|.
name|cache
argument_list|(
operator|new
name|TermFilter
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|typeCount
init|=
name|Lucene
operator|.
name|count
argument_list|(
name|searcher
argument_list|()
operator|.
name|searcher
argument_list|()
argument_list|,
name|query
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|marker
init|=
call|(
name|int
call|)
argument_list|(
name|typeCount
operator|/
name|mappingSnifferDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|marker
operator|==
literal|0
condition|)
block|{
name|marker
operator|=
literal|1
expr_stmt|;
block|}
specifier|final
name|int
name|fMarker
init|=
name|marker
decl_stmt|;
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|Collector
argument_list|()
block|{
specifier|private
specifier|final
name|FieldSelector
name|fieldSelector
init|=
operator|new
name|UidAndSourceFieldSelector
argument_list|()
decl_stmt|;
specifier|private
name|int
name|counter
init|=
literal|0
decl_stmt|;
specifier|private
name|IndexReader
name|reader
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{                                     }
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"CLOSED"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|++
name|counter
operator|==
name|fMarker
condition|)
block|{
name|counter
operator|=
literal|0
expr_stmt|;
name|Document
name|document
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|,
name|fieldSelector
argument_list|)
decl_stmt|;
name|Uid
name|uid
init|=
name|Uid
operator|.
name|createUid
argument_list|(
name|document
operator|.
name|get
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|source
init|=
name|document
operator|.
name|get
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|mapperService
operator|.
name|type
argument_list|(
name|uid
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|uid
operator|.
name|type
argument_list|()
argument_list|,
name|uid
operator|.
name|id
argument_list|()
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CLOSED"
argument_list|)
condition|)
block|{
comment|// ignore, we got closed
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to sniff mapping for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CLOSED"
argument_list|)
condition|)
block|{
comment|// ignore, we got closed
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to sniff mapping"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|termEnum
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|termEnum
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

