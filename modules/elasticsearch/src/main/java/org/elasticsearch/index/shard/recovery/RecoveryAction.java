begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchInterruptedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RecoveryEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|memory
operator|.
name|MemorySnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|SizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|component
operator|.
name|CloseableComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|stream
operator|.
name|VoidStreamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|RecoveryAction
specifier|public
class|class
name|RecoveryAction
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|CloseableComponent
block|{
DECL|field|fileChunkSize
specifier|private
specifier|final
name|SizeValue
name|fileChunkSize
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|indexShard
specifier|private
specifier|final
name|InternalIndexShard
name|indexShard
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|openIndexOutputs
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|openIndexOutputs
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|startTransportAction
specifier|private
specifier|final
name|String
name|startTransportAction
decl_stmt|;
DECL|field|fileChunkTransportAction
specifier|private
specifier|final
name|String
name|fileChunkTransportAction
decl_stmt|;
DECL|field|snapshotTransportAction
specifier|private
specifier|final
name|String
name|snapshotTransportAction
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|sendStartRecoveryThread
specifier|private
specifier|volatile
name|Thread
name|sendStartRecoveryThread
decl_stmt|;
DECL|field|receiveSnapshotRecoveryThread
specifier|private
specifier|volatile
name|Thread
name|receiveSnapshotRecoveryThread
decl_stmt|;
DECL|field|sendSnapshotRecoveryThread
specifier|private
specifier|volatile
name|Thread
name|sendSnapshotRecoveryThread
decl_stmt|;
DECL|field|sendFileChunksRecoveryFutures
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Future
argument_list|>
name|sendFileChunksRecoveryFutures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Future
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|RecoveryAction
annotation|@
name|Inject
specifier|public
name|RecoveryAction
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|Store
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
operator|(
name|InternalIndexShard
operator|)
name|indexShard
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|startTransportAction
operator|=
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|"/"
operator|+
name|shardId
operator|.
name|id
argument_list|()
operator|+
literal|"/recovery/start"
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|startTransportAction
argument_list|,
operator|new
name|StartRecoveryTransportRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|fileChunkTransportAction
operator|=
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|"/"
operator|+
name|shardId
operator|.
name|id
argument_list|()
operator|+
literal|"/recovery/fileChunk"
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|fileChunkTransportAction
argument_list|,
operator|new
name|FileChunkTransportRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|snapshotTransportAction
operator|=
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|"/"
operator|+
name|shardId
operator|.
name|id
argument_list|()
operator|+
literal|"/recovery/snapshot"
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|snapshotTransportAction
argument_list|,
operator|new
name|SnapshotTransportRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileChunkSize
operator|=
name|componentSettings
operator|.
name|getAsSize
argument_list|(
literal|"file_chunk_size"
argument_list|,
operator|new
name|SizeValue
argument_list|(
literal|100
argument_list|,
name|SizeUnit
operator|.
name|KB
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Recovery Action registered, using file_chunk_size[{}]"
argument_list|,
name|fileChunkSize
argument_list|)
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|transportService
operator|.
name|removeHandler
argument_list|(
name|startTransportAction
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|removeHandler
argument_list|(
name|fileChunkTransportAction
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|removeHandler
argument_list|(
name|snapshotTransportAction
argument_list|)
expr_stmt|;
name|cleanOpenIndex
argument_list|()
expr_stmt|;
comment|// interrupt the startRecovery thread if its performing recovery
if|if
condition|(
name|sendStartRecoveryThread
operator|!=
literal|null
condition|)
block|{
name|sendStartRecoveryThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|receiveSnapshotRecoveryThread
operator|!=
literal|null
condition|)
block|{
name|receiveSnapshotRecoveryThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sendSnapshotRecoveryThread
operator|!=
literal|null
condition|)
block|{
name|sendSnapshotRecoveryThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Future
name|future
range|:
name|sendFileChunksRecoveryFutures
control|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startRecovery
specifier|public
specifier|synchronized
name|void
name|startRecovery
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|DiscoveryNode
name|targetNode
parameter_list|,
name|boolean
name|markAsRelocated
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|sendStartRecoveryThread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
try|try
block|{
comment|// mark the shard as recovering
name|IndexShardState
name|preRecoveringState
decl_stmt|;
try|try
block|{
name|preRecoveringState
operator|=
name|indexShard
operator|.
name|recovering
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardRecoveringException
name|e
parameter_list|)
block|{
comment|// that's fine, since we might be called concurrently, just ignore this, we are already recovering
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Already in recovering process"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IndexShardStartedException
name|e
parameter_list|)
block|{
comment|// that's fine, since we might be called concurrently, just ignore this, we are already started
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Already in recovering process"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IndexShardRelocatedException
name|e
parameter_list|)
block|{
comment|// that's fine, since we might be called concurrently, just ignore this, we are already relocated
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Already in recovering process"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IndexShardClosedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Can't recover a closed shard."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Starting recovery from {}"
argument_list|,
name|targetNode
argument_list|)
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Recovery closed"
argument_list|)
throw|;
block|}
name|RecoveryStatus
name|recoveryStatus
init|=
name|transportService
operator|.
name|submitRequest
argument_list|(
name|targetNode
argument_list|,
name|startTransportAction
argument_list|,
operator|new
name|StartRecoveryRequest
argument_list|(
name|node
argument_list|,
name|markAsRelocated
argument_list|)
argument_list|,
operator|new
name|FutureTransportResponseHandler
argument_list|<
name|RecoveryStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecoveryStatus
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RecoveryStatus
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|txGet
argument_list|()
decl_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Recovery completed from "
argument_list|)
operator|.
name|append
argument_list|(
name|targetNode
argument_list|)
operator|.
name|append
argument_list|(
literal|", took["
argument_list|)
operator|.
name|append
argument_list|(
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"   Phase1: recovered ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryStatus
operator|.
name|phase1FileNames
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" files with total size of ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|SizeValue
argument_list|(
name|recoveryStatus
operator|.
name|phase1TotalSize
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|", took ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|recoveryStatus
operator|.
name|phase1Time
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"   Phase2: recovered ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryStatus
operator|.
name|phase2Operations
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" transaction log operations"
argument_list|)
operator|.
name|append
argument_list|(
literal|", took ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|recoveryStatus
operator|.
name|phase2Time
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"   Phase3: recovered ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryStatus
operator|.
name|phase3Operations
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" transaction log operations"
argument_list|)
operator|.
name|append
argument_list|(
literal|", took ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|recoveryStatus
operator|.
name|phase3Time
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RemoteTransportException
name|e
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Recovery closed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|ActionNotFoundTransportException
operator|||
name|cause
operator|instanceof
name|IndexShardNotStartedException
condition|)
block|{
comment|// the remote shard has not yet registered the action or not started yet, we need to ignore this recovery attempt, and restore the state previous to recovering
name|indexShard
operator|.
name|restoreRecoveryState
argument_list|(
name|preRecoveringState
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Ignoring recovery attempt, remote shard not started"
argument_list|,
name|e
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|RecoveryEngineException
condition|)
block|{
comment|// it might be wrapped
if|if
condition|(
name|cause
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IgnoreRecoveryException
condition|)
block|{
throw|throw
operator|(
name|IgnoreRecoveryException
operator|)
name|cause
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|IgnoreRecoveryException
condition|)
block|{
throw|throw
operator|(
name|IgnoreRecoveryException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|new
name|RecoveryFailedException
argument_list|(
name|shardId
argument_list|,
name|node
argument_list|,
name|targetNode
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Recovery closed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|RecoveryFailedException
argument_list|(
name|shardId
argument_list|,
name|node
argument_list|,
name|targetNode
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|sendStartRecoveryThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|cleanOpenIndex
specifier|private
name|void
name|cleanOpenIndex
parameter_list|()
block|{
for|for
control|(
name|IndexOutput
name|indexOutput
range|:
name|openIndexOutputs
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|indexOutput
init|)
block|{
name|indexOutput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|openIndexOutputs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|class|StartRecoveryRequest
specifier|private
specifier|static
class|class
name|StartRecoveryRequest
implements|implements
name|Streamable
block|{
DECL|field|node
specifier|private
name|DiscoveryNode
name|node
decl_stmt|;
DECL|field|markAsRelocated
specifier|private
name|boolean
name|markAsRelocated
decl_stmt|;
DECL|method|StartRecoveryRequest
specifier|private
name|StartRecoveryRequest
parameter_list|()
block|{         }
DECL|method|StartRecoveryRequest
specifier|private
name|StartRecoveryRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|boolean
name|markAsRelocated
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|markAsRelocated
operator|=
name|markAsRelocated
expr_stmt|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|node
operator|=
name|DiscoveryNode
operator|.
name|readNode
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|markAsRelocated
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|node
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|markAsRelocated
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StartRecoveryTransportRequestHandler
specifier|private
class|class
name|StartRecoveryTransportRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|StartRecoveryRequest
argument_list|>
block|{
DECL|method|newInstance
annotation|@
name|Override
specifier|public
name|StartRecoveryRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StartRecoveryRequest
argument_list|()
return|;
block|}
DECL|method|messageReceived
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|StartRecoveryRequest
name|startRecoveryRequest
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Starting recovery to {}, markAsRelocated {}"
argument_list|,
name|startRecoveryRequest
operator|.
name|node
argument_list|,
name|startRecoveryRequest
operator|.
name|markAsRelocated
argument_list|)
expr_stmt|;
specifier|final
name|DiscoveryNode
name|node
init|=
name|startRecoveryRequest
operator|.
name|node
decl_stmt|;
name|cleanOpenIndex
argument_list|()
expr_stmt|;
specifier|final
name|RecoveryStatus
name|recoveryStatus
init|=
operator|new
name|RecoveryStatus
argument_list|()
decl_stmt|;
name|indexShard
operator|.
name|recover
argument_list|(
operator|new
name|Engine
operator|.
name|RecoveryHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|phase1
parameter_list|(
name|SnapshotIndexCommit
name|snapshot
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
try|try
block|{
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|snapshot
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|IndexInput
name|indexInput
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|recoveryStatus
operator|.
name|phase1FileNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|recoveryStatus
operator|.
name|phase1FileSizes
operator|.
name|add
argument_list|(
name|indexInput
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|indexInput
operator|.
name|length
argument_list|()
expr_stmt|;
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|recoveryStatus
operator|.
name|phase1TotalSize
operator|=
name|totalSize
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Recovery [phase1] to {}: recovering [{}] files with total size of [{}]"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|node
block|,
name|snapshot
operator|.
name|getFiles
argument_list|()
operator|.
name|length
block|,
operator|new
name|SizeValue
argument_list|(
name|totalSize
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|snapshot
operator|.
name|getFiles
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|snapshot
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|sendFileChunksRecoveryFutures
operator|.
name|add
argument_list|(
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|IndexInput
name|indexInput
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|BUFFER_SIZE
init|=
operator|(
name|int
operator|)
name|fileChunkSize
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|indexInput
operator|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|indexInput
operator|.
name|length
argument_list|()
decl_stmt|;
name|long
name|readCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|readCount
operator|<
name|len
condition|)
block|{
name|int
name|toRead
init|=
name|readCount
operator|+
name|BUFFER_SIZE
operator|>
name|len
condition|?
call|(
name|int
call|)
argument_list|(
name|len
operator|-
name|readCount
argument_list|)
else|:
name|BUFFER_SIZE
decl_stmt|;
name|long
name|position
init|=
name|indexInput
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|submitRequest
argument_list|(
name|node
argument_list|,
name|fileChunkTransportAction
argument_list|,
operator|new
name|FileChunk
argument_list|(
name|name
argument_list|,
name|position
argument_list|,
name|len
argument_list|,
name|buf
argument_list|,
name|toRead
argument_list|)
argument_list|,
name|VoidTransportResponseHandler
operator|.
name|INSTANCE
argument_list|)
operator|.
name|txGet
argument_list|(
literal|30
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|readCount
operator|+=
name|toRead
expr_stmt|;
block|}
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|indexInput
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|lastException
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|lastException
operator|.
name|get
argument_list|()
throw|;
block|}
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Recovery [phase1] to {}: took [{}]"
argument_list|,
name|node
argument_list|,
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryStatus
operator|.
name|phase1Time
operator|=
name|stopWatch
operator|.
name|totalTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticSearchInterruptedException
name|e
parameter_list|)
block|{
comment|// we got interrupted since we are closing, ignore the recovery
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Interrupted while recovering files"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RecoverFilesRecoveryException
argument_list|(
name|shardId
argument_list|,
name|snapshot
operator|.
name|getFiles
argument_list|()
operator|.
name|length
argument_list|,
operator|new
name|SizeValue
argument_list|(
name|totalSize
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|sendFileChunksRecoveryFutures
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase2
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|sendSnapshotRecoveryThread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"Recovery [phase2] to {}: sending [{}] transaction log operations"
argument_list|,
name|node
argument_list|,
name|snapshot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|sendSnapshot
argument_list|(
name|snapshot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Recovery [phase2] to {}: took [{}]"
argument_list|,
name|node
argument_list|,
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryStatus
operator|.
name|phase2Time
operator|=
name|stopWatch
operator|.
name|totalTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
name|recoveryStatus
operator|.
name|phase2Operations
operator|=
name|snapshot
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticSearchInterruptedException
name|e
parameter_list|)
block|{
comment|// we got interrupted since we are closing, ignore the recovery
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Interrupted in phase 2 files"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|sendSnapshotRecoveryThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase3
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|sendSnapshotRecoveryThread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"Recovery [phase3] to {}: sending [{}] transaction log operations"
argument_list|,
name|node
argument_list|,
name|snapshot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|sendSnapshot
argument_list|(
name|snapshot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|startRecoveryRequest
operator|.
name|markAsRelocated
condition|)
block|{
comment|// TODO what happens if the recovery process fails afterwards, we need to mark this back to started
try|try
block|{
name|indexShard
operator|.
name|relocated
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{
comment|// we can ignore this exception since, on the other node, when it moved to phase3
comment|// it will also send shard started, which might cause the index shard we work against
comment|// to move be closed by the time we get to the the relocated method
block|}
block|}
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Recovery [phase3] to {}: took [{}]"
argument_list|,
name|node
argument_list|,
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryStatus
operator|.
name|phase3Time
operator|=
name|stopWatch
operator|.
name|totalTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
name|recoveryStatus
operator|.
name|phase3Operations
operator|=
name|snapshot
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticSearchInterruptedException
name|e
parameter_list|)
block|{
comment|// we got interrupted since we are closing, ignore the recovery
throw|throw
operator|new
name|IgnoreRecoveryException
argument_list|(
literal|"Interrupted in phase 2 files"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|sendSnapshotRecoveryThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendSnapshot
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|,
name|boolean
name|phase3
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|MemorySnapshot
name|memorySnapshot
decl_stmt|;
if|if
condition|(
name|snapshot
operator|instanceof
name|MemorySnapshot
condition|)
block|{
name|memorySnapshot
operator|=
operator|(
name|MemorySnapshot
operator|)
name|snapshot
expr_stmt|;
block|}
else|else
block|{
name|memorySnapshot
operator|=
operator|new
name|MemorySnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
name|transportService
operator|.
name|submitRequest
argument_list|(
name|node
argument_list|,
name|snapshotTransportAction
argument_list|,
operator|new
name|SnapshotWrapper
argument_list|(
name|memorySnapshot
argument_list|,
name|phase3
argument_list|)
argument_list|,
name|VoidTransportResponseHandler
operator|.
name|INSTANCE
argument_list|)
operator|.
name|txGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|recoveryStatus
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RecoveryStatus
specifier|private
specifier|static
class|class
name|RecoveryStatus
implements|implements
name|Streamable
block|{
DECL|field|phase1FileNames
name|List
argument_list|<
name|String
argument_list|>
name|phase1FileNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|phase1FileSizes
name|List
argument_list|<
name|Long
argument_list|>
name|phase1FileSizes
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|phase1TotalSize
name|long
name|phase1TotalSize
decl_stmt|;
DECL|field|phase1Time
name|long
name|phase1Time
decl_stmt|;
DECL|field|phase2Operations
name|int
name|phase2Operations
decl_stmt|;
DECL|field|phase2Time
name|long
name|phase2Time
decl_stmt|;
DECL|field|phase3Operations
name|int
name|phase3Operations
decl_stmt|;
DECL|field|phase3Time
name|long
name|phase3Time
decl_stmt|;
DECL|method|RecoveryStatus
specifier|private
name|RecoveryStatus
parameter_list|()
block|{         }
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|phase1FileNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|phase1FileNames
operator|.
name|add
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|phase1FileSizes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|phase1FileSizes
operator|.
name|add
argument_list|(
name|in
operator|.
name|readVLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|phase1TotalSize
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|phase1Time
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|phase2Operations
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|phase2Time
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|phase3Operations
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|phase3Time
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|phase1FileNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|phase1FileNames
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|phase1FileSizes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|size
range|:
name|phase1FileSizes
control|)
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVLong
argument_list|(
name|phase1TotalSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|phase1Time
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|phase2Operations
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|phase2Time
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|phase3Operations
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|phase3Time
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SnapshotTransportRequestHandler
specifier|private
class|class
name|SnapshotTransportRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|SnapshotWrapper
argument_list|>
block|{
DECL|method|newInstance
annotation|@
name|Override
specifier|public
name|SnapshotWrapper
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|SnapshotWrapper
argument_list|()
return|;
block|}
DECL|method|messageReceived
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|SnapshotWrapper
name|snapshot
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|receiveSnapshotRecoveryThread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|snapshot
operator|.
name|phase3
condition|)
block|{
comment|// clean open index outputs in any case (there should not be any open, we close then in the chunk)
name|cleanOpenIndex
argument_list|()
expr_stmt|;
block|}
name|indexShard
operator|.
name|performRecovery
argument_list|(
name|snapshot
operator|.
name|snapshot
argument_list|,
name|snapshot
operator|.
name|phase3
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|phase3
condition|)
block|{
name|indexShard
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// probably need to do more here...
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|VoidStreamable
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|receiveSnapshotRecoveryThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|class|SnapshotWrapper
specifier|private
specifier|static
class|class
name|SnapshotWrapper
implements|implements
name|Streamable
block|{
DECL|field|snapshot
specifier|private
name|MemorySnapshot
name|snapshot
decl_stmt|;
DECL|field|phase3
specifier|private
name|boolean
name|phase3
decl_stmt|;
DECL|method|SnapshotWrapper
specifier|private
name|SnapshotWrapper
parameter_list|()
block|{         }
DECL|method|SnapshotWrapper
specifier|private
name|SnapshotWrapper
parameter_list|(
name|MemorySnapshot
name|snapshot
parameter_list|,
name|boolean
name|phase3
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|phase3
operator|=
name|phase3
expr_stmt|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshot
operator|=
operator|new
name|MemorySnapshot
argument_list|()
expr_stmt|;
name|snapshot
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|phase3
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshot
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|phase3
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FileChunkTransportRequestHandler
specifier|private
class|class
name|FileChunkTransportRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|FileChunk
argument_list|>
block|{
DECL|method|newInstance
annotation|@
name|Override
specifier|public
name|FileChunk
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|FileChunk
argument_list|()
return|;
block|}
DECL|method|messageReceived
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|FileChunk
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|IndexOutput
name|indexOutput
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|position
operator|==
literal|0
condition|)
block|{
comment|// first request
name|indexOutput
operator|=
name|openIndexOutputs
operator|.
name|remove
argument_list|(
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexOutput
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexOutput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|indexOutput
operator|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
name|openIndexOutputs
operator|.
name|put
argument_list|(
name|request
operator|.
name|name
argument_list|,
name|indexOutput
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexOutput
operator|=
name|openIndexOutputs
operator|.
name|get
argument_list|(
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|indexOutput
init|)
block|{
try|try
block|{
name|indexOutput
operator|.
name|writeBytes
argument_list|(
name|request
operator|.
name|content
argument_list|,
name|request
operator|.
name|content
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexOutput
operator|.
name|getFilePointer
argument_list|()
operator|==
name|request
operator|.
name|length
condition|)
block|{
comment|// we are done
name|indexOutput
operator|.
name|close
argument_list|()
expr_stmt|;
name|openIndexOutputs
operator|.
name|remove
argument_list|(
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|openIndexOutputs
operator|.
name|remove
argument_list|(
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|indexOutput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|VoidStreamable
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FileChunk
specifier|private
specifier|static
class|class
name|FileChunk
implements|implements
name|Streamable
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|position
name|long
name|position
decl_stmt|;
DECL|field|length
name|long
name|length
decl_stmt|;
DECL|field|content
name|byte
index|[]
name|content
decl_stmt|;
DECL|field|contentLength
specifier|transient
name|int
name|contentLength
decl_stmt|;
DECL|method|FileChunk
specifier|private
name|FileChunk
parameter_list|()
block|{         }
DECL|method|FileChunk
specifier|private
name|FileChunk
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|position
parameter_list|,
name|long
name|length
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|int
name|contentLength
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|contentLength
operator|=
name|contentLength
expr_stmt|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|position
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|length
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|content
operator|=
operator|new
name|byte
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|contentLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|content
argument_list|,
literal|0
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

