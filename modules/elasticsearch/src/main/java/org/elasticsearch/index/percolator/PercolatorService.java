begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastStringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParserMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParserService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceToParse
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|PercolatorService
specifier|public
class|class
name|PercolatorService
extends|extends
name|AbstractIndexComponent
block|{
DECL|class|Request
specifier|public
specifier|static
class|class
name|Request
block|{
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|byte
index|[]
name|source
decl_stmt|;
DECL|field|match
specifier|private
name|String
name|match
decl_stmt|;
DECL|field|unmatch
specifier|private
name|String
name|unmatch
decl_stmt|;
DECL|method|Request
specifier|public
name|Request
parameter_list|(
name|String
name|type
parameter_list|,
name|byte
index|[]
name|source
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|source
specifier|public
name|byte
index|[]
name|source
parameter_list|()
block|{
return|return
name|source
return|;
block|}
DECL|method|match
specifier|public
name|String
name|match
parameter_list|()
block|{
return|return
name|this
operator|.
name|match
return|;
block|}
DECL|method|match
specifier|public
name|Request
name|match
parameter_list|(
name|String
name|match
parameter_list|)
block|{
name|this
operator|.
name|match
operator|=
name|match
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unmatch
specifier|public
name|String
name|unmatch
parameter_list|()
block|{
return|return
name|this
operator|.
name|unmatch
return|;
block|}
DECL|method|unmatch
specifier|public
name|Request
name|unmatch
parameter_list|(
name|String
name|unmatch
parameter_list|)
block|{
name|this
operator|.
name|unmatch
operator|=
name|unmatch
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|class|Response
specifier|public
specifier|static
specifier|final
class|class
name|Response
block|{
DECL|field|matches
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|matches
decl_stmt|;
DECL|field|mappersAdded
specifier|private
specifier|final
name|boolean
name|mappersAdded
decl_stmt|;
DECL|method|Response
specifier|public
name|Response
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|matches
parameter_list|,
name|boolean
name|mappersAdded
parameter_list|)
block|{
name|this
operator|.
name|matches
operator|=
name|matches
expr_stmt|;
name|this
operator|.
name|mappersAdded
operator|=
name|mappersAdded
expr_stmt|;
block|}
DECL|method|mappersAdded
specifier|public
name|boolean
name|mappersAdded
parameter_list|()
block|{
return|return
name|this
operator|.
name|mappersAdded
return|;
block|}
DECL|method|matches
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|matches
parameter_list|()
block|{
return|return
name|matches
return|;
block|}
block|}
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|queryParserService
specifier|private
specifier|final
name|IndexQueryParserService
name|queryParserService
decl_stmt|;
DECL|field|queries
specifier|private
specifier|volatile
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
name|queries
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|method|PercolatorService
annotation|@
name|Inject
specifier|public
name|PercolatorService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|MapperService
name|mapperService
parameter_list|,
name|IndexQueryParserService
name|queryParserService
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|this
operator|.
name|queryParserService
operator|=
name|queryParserService
expr_stmt|;
block|}
DECL|method|addQuery
specifier|public
name|void
name|addQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|QueryBuilder
name|queryBuilder
parameter_list|)
block|{
name|addQuery
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|addQuery
specifier|public
name|void
name|addQuery
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
name|queryParserName
parameter_list|,
name|QueryBuilder
name|queryBuilder
parameter_list|)
block|{
name|FastByteArrayOutputStream
name|unsafeBytes
init|=
name|queryBuilder
operator|.
name|buildAsUnsafeBytes
argument_list|()
decl_stmt|;
name|addQuery
argument_list|(
name|name
argument_list|,
name|queryParserName
argument_list|,
name|unsafeBytes
operator|.
name|unsafeByteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|unsafeBytes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addQuery
specifier|public
name|void
name|addQuery
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
name|queryParserName
parameter_list|,
name|byte
index|[]
name|querySource
parameter_list|,
name|int
name|querySourceOffset
parameter_list|,
name|int
name|querySourceLength
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|IndexQueryParser
name|queryParser
init|=
name|queryParserService
operator|.
name|defaultIndexQueryParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryParserName
operator|!=
literal|null
condition|)
block|{
name|queryParser
operator|=
name|queryParserService
operator|.
name|indexQueryParser
argument_list|(
name|queryParserName
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexQueryParserMissingException
argument_list|(
name|queryParserName
argument_list|)
throw|;
block|}
block|}
name|Query
name|query
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|querySource
argument_list|,
name|querySourceOffset
argument_list|,
name|querySourceLength
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|addQuery
argument_list|(
name|name
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|addQuery
specifier|public
specifier|synchronized
name|void
name|addQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|this
operator|.
name|queries
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|queries
argument_list|)
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|query
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
DECL|method|removeQuery
specifier|public
specifier|synchronized
name|void
name|removeQuery
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|queries
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|queries
argument_list|)
operator|.
name|remove
argument_list|(
name|name
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
DECL|method|percolate
specifier|public
name|Response
name|percolate
parameter_list|(
name|Request
name|request
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
comment|// first, parse the source doc into a MemoryIndex
specifier|final
name|MemoryIndex
name|memoryIndex
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|mapperService
operator|.
name|documentMapperWithAutoCreate
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|docMapper
operator|.
name|parse
argument_list|(
name|source
argument_list|(
name|request
operator|.
name|source
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|flyweight
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Fieldable
name|field
range|:
name|doc
operator|.
name|doc
argument_list|()
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|field
operator|.
name|isIndexed
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|TokenStream
name|tokenStream
init|=
name|field
operator|.
name|tokenStreamValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenStream
operator|!=
literal|null
condition|)
block|{
name|memoryIndex
operator|.
name|addField
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
name|tokenStream
argument_list|,
name|field
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Reader
name|reader
init|=
name|field
operator|.
name|readerValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|memoryIndex
operator|.
name|addField
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
name|doc
operator|.
name|analyzer
argument_list|()
operator|.
name|reusableTokenStream
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
name|reader
argument_list|)
argument_list|,
name|field
operator|.
name|getBoost
argument_list|()
operator|*
name|doc
operator|.
name|doc
argument_list|()
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Failed to analyze field ["
operator|+
name|field
operator|.
name|name
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|value
init|=
name|field
operator|.
name|stringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|memoryIndex
operator|.
name|addField
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
name|doc
operator|.
name|analyzer
argument_list|()
operator|.
name|reusableTokenStream
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|FastStringReader
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
name|field
operator|.
name|getBoost
argument_list|()
operator|*
name|doc
operator|.
name|doc
argument_list|()
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Failed to analyze field ["
operator|+
name|field
operator|.
name|name
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
name|Lucene
operator|.
name|ExistsCollector
name|collector
init|=
operator|new
name|Lucene
operator|.
name|ExistsCollector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|memoryIndex
operator|.
name|createSearcher
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
name|entry
range|:
name|queries
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|match
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|request
operator|.
name|match
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|unmatch
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|request
operator|.
name|unmatch
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
try|try
block|{
name|searcher
operator|.
name|search
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"] failed to execute query"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collector
operator|.
name|exists
argument_list|()
condition|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Response
argument_list|(
name|matches
argument_list|,
name|doc
operator|.
name|mappersAdded
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

