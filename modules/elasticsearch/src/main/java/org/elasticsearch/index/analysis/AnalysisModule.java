begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Scopes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|FactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|multibindings
operator|.
name|MapBinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|IndicesAnalysisService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|AnalysisModule
specifier|public
class|class
name|AnalysisModule
extends|extends
name|AbstractModule
block|{
DECL|class|AnalysisBinderProcessor
specifier|public
specifier|static
class|class
name|AnalysisBinderProcessor
block|{
DECL|method|processCharFilters
specifier|public
name|void
name|processCharFilters
parameter_list|(
name|CharFiltersBindings
name|charFiltersBindings
parameter_list|)
block|{          }
DECL|class|CharFiltersBindings
specifier|public
specifier|static
class|class
name|CharFiltersBindings
block|{
DECL|field|binder
specifier|private
specifier|final
name|MapBinder
argument_list|<
name|String
argument_list|,
name|CharFilterFactoryFactory
argument_list|>
name|binder
decl_stmt|;
DECL|field|groupSettings
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
decl_stmt|;
DECL|method|CharFiltersBindings
specifier|public
name|CharFiltersBindings
parameter_list|(
name|MapBinder
argument_list|<
name|String
argument_list|,
name|CharFilterFactoryFactory
argument_list|>
name|binder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
parameter_list|)
block|{
name|this
operator|.
name|binder
operator|=
name|binder
expr_stmt|;
name|this
operator|.
name|groupSettings
operator|=
name|groupSettings
expr_stmt|;
block|}
DECL|method|binder
specifier|public
name|MapBinder
argument_list|<
name|String
argument_list|,
name|CharFilterFactoryFactory
argument_list|>
name|binder
parameter_list|()
block|{
return|return
name|binder
return|;
block|}
DECL|method|groupSettings
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
parameter_list|()
block|{
return|return
name|groupSettings
return|;
block|}
DECL|method|processCharFilter
specifier|public
name|void
name|processCharFilter
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|CharFilterFactory
argument_list|>
name|charFilterFactory
parameter_list|)
block|{
if|if
condition|(
operator|!
name|groupSettings
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|binder
operator|.
name|addBinding
argument_list|(
name|name
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|CharFilterFactoryFactory
operator|.
name|class
argument_list|,
name|charFilterFactory
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processTokenFilters
specifier|public
name|void
name|processTokenFilters
parameter_list|(
name|TokenFiltersBindings
name|tokenFiltersBindings
parameter_list|)
block|{          }
DECL|class|TokenFiltersBindings
specifier|public
specifier|static
class|class
name|TokenFiltersBindings
block|{
DECL|field|binder
specifier|private
specifier|final
name|MapBinder
argument_list|<
name|String
argument_list|,
name|TokenFilterFactoryFactory
argument_list|>
name|binder
decl_stmt|;
DECL|field|groupSettings
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
decl_stmt|;
DECL|method|TokenFiltersBindings
specifier|public
name|TokenFiltersBindings
parameter_list|(
name|MapBinder
argument_list|<
name|String
argument_list|,
name|TokenFilterFactoryFactory
argument_list|>
name|binder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
parameter_list|)
block|{
name|this
operator|.
name|binder
operator|=
name|binder
expr_stmt|;
name|this
operator|.
name|groupSettings
operator|=
name|groupSettings
expr_stmt|;
block|}
DECL|method|binder
specifier|public
name|MapBinder
argument_list|<
name|String
argument_list|,
name|TokenFilterFactoryFactory
argument_list|>
name|binder
parameter_list|()
block|{
return|return
name|binder
return|;
block|}
DECL|method|groupSettings
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
parameter_list|()
block|{
return|return
name|groupSettings
return|;
block|}
DECL|method|processTokenFilter
specifier|public
name|void
name|processTokenFilter
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TokenFilterFactory
argument_list|>
name|tokenFilterFactory
parameter_list|)
block|{
if|if
condition|(
operator|!
name|groupSettings
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|binder
operator|.
name|addBinding
argument_list|(
name|name
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|TokenFilterFactoryFactory
operator|.
name|class
argument_list|,
name|tokenFilterFactory
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processTokenizers
specifier|public
name|void
name|processTokenizers
parameter_list|(
name|TokenizersBindings
name|tokenizersBindings
parameter_list|)
block|{          }
DECL|class|TokenizersBindings
specifier|public
specifier|static
class|class
name|TokenizersBindings
block|{
DECL|field|binder
specifier|private
specifier|final
name|MapBinder
argument_list|<
name|String
argument_list|,
name|TokenizerFactoryFactory
argument_list|>
name|binder
decl_stmt|;
DECL|field|groupSettings
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
decl_stmt|;
DECL|method|TokenizersBindings
specifier|public
name|TokenizersBindings
parameter_list|(
name|MapBinder
argument_list|<
name|String
argument_list|,
name|TokenizerFactoryFactory
argument_list|>
name|binder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
parameter_list|)
block|{
name|this
operator|.
name|binder
operator|=
name|binder
expr_stmt|;
name|this
operator|.
name|groupSettings
operator|=
name|groupSettings
expr_stmt|;
block|}
DECL|method|binder
specifier|public
name|MapBinder
argument_list|<
name|String
argument_list|,
name|TokenizerFactoryFactory
argument_list|>
name|binder
parameter_list|()
block|{
return|return
name|binder
return|;
block|}
DECL|method|groupSettings
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
parameter_list|()
block|{
return|return
name|groupSettings
return|;
block|}
DECL|method|processTokenizer
specifier|public
name|void
name|processTokenizer
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TokenizerFactory
argument_list|>
name|tokenizerFactory
parameter_list|)
block|{
if|if
condition|(
operator|!
name|groupSettings
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|binder
operator|.
name|addBinding
argument_list|(
name|name
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|TokenizerFactoryFactory
operator|.
name|class
argument_list|,
name|tokenizerFactory
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processAnalyzers
specifier|public
name|void
name|processAnalyzers
parameter_list|(
name|AnalyzersBindings
name|analyzersBindings
parameter_list|)
block|{          }
DECL|class|AnalyzersBindings
specifier|public
specifier|static
class|class
name|AnalyzersBindings
block|{
DECL|field|binder
specifier|private
specifier|final
name|MapBinder
argument_list|<
name|String
argument_list|,
name|AnalyzerProviderFactory
argument_list|>
name|binder
decl_stmt|;
DECL|field|groupSettings
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
decl_stmt|;
DECL|field|indicesAnalysisService
specifier|private
specifier|final
name|IndicesAnalysisService
name|indicesAnalysisService
decl_stmt|;
DECL|method|AnalyzersBindings
specifier|public
name|AnalyzersBindings
parameter_list|(
name|MapBinder
argument_list|<
name|String
argument_list|,
name|AnalyzerProviderFactory
argument_list|>
name|binder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
parameter_list|,
name|IndicesAnalysisService
name|indicesAnalysisService
parameter_list|)
block|{
name|this
operator|.
name|binder
operator|=
name|binder
expr_stmt|;
name|this
operator|.
name|groupSettings
operator|=
name|groupSettings
expr_stmt|;
name|this
operator|.
name|indicesAnalysisService
operator|=
name|indicesAnalysisService
expr_stmt|;
block|}
DECL|method|binder
specifier|public
name|MapBinder
argument_list|<
name|String
argument_list|,
name|AnalyzerProviderFactory
argument_list|>
name|binder
parameter_list|()
block|{
return|return
name|binder
return|;
block|}
DECL|method|groupSettings
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
parameter_list|()
block|{
return|return
name|groupSettings
return|;
block|}
DECL|method|indicesAnalysisService
specifier|public
name|IndicesAnalysisService
name|indicesAnalysisService
parameter_list|()
block|{
return|return
name|indicesAnalysisService
return|;
block|}
DECL|method|processAnalyzer
specifier|public
name|void
name|processAnalyzer
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|AnalyzerProvider
argument_list|>
name|analyzerProvider
parameter_list|)
block|{
if|if
condition|(
operator|!
name|groupSettings
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|indicesAnalysisService
operator|!=
literal|null
operator|&&
name|indicesAnalysisService
operator|.
name|hasAnalyzer
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|binder
operator|.
name|addBinding
argument_list|(
name|name
argument_list|)
operator|.
name|toInstance
argument_list|(
name|indicesAnalysisService
operator|.
name|analyzerProviderFactory
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binder
operator|.
name|addBinding
argument_list|(
name|name
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|AnalyzerProviderFactory
operator|.
name|class
argument_list|,
name|analyzerProvider
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|indicesAnalysisService
specifier|private
specifier|final
name|IndicesAnalysisService
name|indicesAnalysisService
decl_stmt|;
DECL|field|processors
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|AnalysisBinderProcessor
argument_list|>
name|processors
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
DECL|method|AnalysisModule
specifier|public
name|AnalysisModule
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AnalysisModule
specifier|public
name|AnalysisModule
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|IndicesAnalysisService
name|indicesAnalysisService
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|indicesAnalysisService
operator|=
name|indicesAnalysisService
expr_stmt|;
name|processors
operator|.
name|add
argument_list|(
operator|new
name|DefaultProcessor
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|processors
operator|.
name|add
argument_list|(
operator|new
name|ExtendedProcessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore. no extended ones
block|}
block|}
DECL|method|addProcessor
specifier|public
name|AnalysisModule
name|addProcessor
parameter_list|(
name|AnalysisBinderProcessor
name|processor
parameter_list|)
block|{
name|processors
operator|.
name|addFirst
argument_list|(
name|processor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|configure
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|MapBinder
argument_list|<
name|String
argument_list|,
name|CharFilterFactoryFactory
argument_list|>
name|charFilterBinder
init|=
name|MapBinder
operator|.
name|newMapBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|CharFilterFactoryFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|charFiltersSettings
init|=
name|settings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.char_filter"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|charFiltersSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|charFilterName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Settings
name|charFilterSettings
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|CharFilterFactory
argument_list|>
name|type
init|=
name|charFilterSettings
operator|.
name|getAsClass
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|"org.elasticsearch.index.analysis."
argument_list|,
literal|"CharFilterFactory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Char Filter ["
operator|+
name|charFilterName
operator|+
literal|"] must have a type associated with it"
argument_list|)
throw|;
block|}
name|charFilterBinder
operator|.
name|addBinding
argument_list|(
name|charFilterName
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|CharFilterFactoryFactory
operator|.
name|class
argument_list|,
name|type
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
name|AnalysisBinderProcessor
operator|.
name|CharFiltersBindings
name|charFiltersBindings
init|=
operator|new
name|AnalysisBinderProcessor
operator|.
name|CharFiltersBindings
argument_list|(
name|charFilterBinder
argument_list|,
name|charFiltersSettings
argument_list|)
decl_stmt|;
for|for
control|(
name|AnalysisBinderProcessor
name|processor
range|:
name|processors
control|)
block|{
name|processor
operator|.
name|processCharFilters
argument_list|(
name|charFiltersBindings
argument_list|)
expr_stmt|;
block|}
name|MapBinder
argument_list|<
name|String
argument_list|,
name|TokenFilterFactoryFactory
argument_list|>
name|tokenFilterBinder
init|=
name|MapBinder
operator|.
name|newMapBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|TokenFilterFactoryFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenFiltersSettings
init|=
name|settings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.filter"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|tokenFiltersSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tokenFilterName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Settings
name|tokenFilterSettings
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|TokenFilterFactory
argument_list|>
name|type
init|=
name|tokenFilterSettings
operator|.
name|getAsClass
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|"org.elasticsearch.index.analysis."
argument_list|,
literal|"TokenFilterFactory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Token Filter ["
operator|+
name|tokenFilterName
operator|+
literal|"] must have a type associated with it"
argument_list|)
throw|;
block|}
name|tokenFilterBinder
operator|.
name|addBinding
argument_list|(
name|tokenFilterName
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|TokenFilterFactoryFactory
operator|.
name|class
argument_list|,
name|type
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
name|AnalysisBinderProcessor
operator|.
name|TokenFiltersBindings
name|tokenFiltersBindings
init|=
operator|new
name|AnalysisBinderProcessor
operator|.
name|TokenFiltersBindings
argument_list|(
name|tokenFilterBinder
argument_list|,
name|tokenFiltersSettings
argument_list|)
decl_stmt|;
for|for
control|(
name|AnalysisBinderProcessor
name|processor
range|:
name|processors
control|)
block|{
name|processor
operator|.
name|processTokenFilters
argument_list|(
name|tokenFiltersBindings
argument_list|)
expr_stmt|;
block|}
name|MapBinder
argument_list|<
name|String
argument_list|,
name|TokenizerFactoryFactory
argument_list|>
name|tokenizerBinder
init|=
name|MapBinder
operator|.
name|newMapBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|TokenizerFactoryFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenizersSettings
init|=
name|settings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.tokenizer"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|tokenizersSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tokenizerName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Settings
name|tokenizerSettings
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|TokenizerFactory
argument_list|>
name|type
init|=
name|tokenizerSettings
operator|.
name|getAsClass
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|"org.elasticsearch.index.analysis."
argument_list|,
literal|"TokenizerFactory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tokenizer ["
operator|+
name|tokenizerName
operator|+
literal|"] must have a type associated with it"
argument_list|)
throw|;
block|}
name|tokenizerBinder
operator|.
name|addBinding
argument_list|(
name|tokenizerName
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|TokenizerFactoryFactory
operator|.
name|class
argument_list|,
name|type
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
name|AnalysisBinderProcessor
operator|.
name|TokenizersBindings
name|tokenizersBindings
init|=
operator|new
name|AnalysisBinderProcessor
operator|.
name|TokenizersBindings
argument_list|(
name|tokenizerBinder
argument_list|,
name|tokenizersSettings
argument_list|)
decl_stmt|;
for|for
control|(
name|AnalysisBinderProcessor
name|processor
range|:
name|processors
control|)
block|{
name|processor
operator|.
name|processTokenizers
argument_list|(
name|tokenizersBindings
argument_list|)
expr_stmt|;
block|}
name|MapBinder
argument_list|<
name|String
argument_list|,
name|AnalyzerProviderFactory
argument_list|>
name|analyzerBinder
init|=
name|MapBinder
operator|.
name|newMapBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|AnalyzerProviderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|analyzersSettings
init|=
name|settings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.analyzer"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|analyzersSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|analyzerName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Settings
name|analyzerSettings
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|AnalyzerProvider
argument_list|>
name|type
init|=
name|analyzerSettings
operator|.
name|getAsClass
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|"org.elasticsearch.index.analysis."
argument_list|,
literal|"AnalyzerProvider"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|// no specific type, check if it has a tokenizer associated with it
name|String
name|tokenizerName
init|=
name|analyzerSettings
operator|.
name|get
argument_list|(
literal|"tokenizer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerName
operator|!=
literal|null
condition|)
block|{
comment|// we have a tokenizer, use the CustomAnalyzer
name|type
operator|=
name|CustomAnalyzerProvider
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Analyzer ["
operator|+
name|analyzerName
operator|+
literal|"] must have a type associated with it or a tokenizer"
argument_list|)
throw|;
block|}
block|}
name|analyzerBinder
operator|.
name|addBinding
argument_list|(
name|analyzerName
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|AnalyzerProviderFactory
operator|.
name|class
argument_list|,
name|type
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
name|AnalysisBinderProcessor
operator|.
name|AnalyzersBindings
name|analyzersBindings
init|=
operator|new
name|AnalysisBinderProcessor
operator|.
name|AnalyzersBindings
argument_list|(
name|analyzerBinder
argument_list|,
name|analyzersSettings
argument_list|,
name|indicesAnalysisService
argument_list|)
decl_stmt|;
for|for
control|(
name|AnalysisBinderProcessor
name|processor
range|:
name|processors
control|)
block|{
name|processor
operator|.
name|processAnalyzers
argument_list|(
name|analyzersBindings
argument_list|)
expr_stmt|;
block|}
name|bind
argument_list|(
name|AnalysisService
operator|.
name|class
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
DECL|class|DefaultProcessor
specifier|private
specifier|static
class|class
name|DefaultProcessor
extends|extends
name|AnalysisBinderProcessor
block|{
DECL|method|processCharFilters
annotation|@
name|Override
specifier|public
name|void
name|processCharFilters
parameter_list|(
name|CharFiltersBindings
name|charFiltersBindings
parameter_list|)
block|{
name|charFiltersBindings
operator|.
name|processCharFilter
argument_list|(
literal|"html_strip"
argument_list|,
name|HtmlStripCharFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|charFiltersBindings
operator|.
name|processCharFilter
argument_list|(
literal|"htmlStrip"
argument_list|,
name|HtmlStripCharFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|processTokenFilters
annotation|@
name|Override
specifier|public
name|void
name|processTokenFilters
parameter_list|(
name|TokenFiltersBindings
name|tokenFiltersBindings
parameter_list|)
block|{
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"stop"
argument_list|,
name|StopTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"asciifolding"
argument_list|,
name|ASCIIFoldingTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"length"
argument_list|,
name|LengthTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"lowercase"
argument_list|,
name|LowerCaseTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"porterStem"
argument_list|,
name|PorterStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"porter_stem"
argument_list|,
name|PorterStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"standard"
argument_list|,
name|StandardTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"nGram"
argument_list|,
name|NGramTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"ngram"
argument_list|,
name|NGramTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"edgeNGram"
argument_list|,
name|EdgeNGramTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"edge_ngram"
argument_list|,
name|EdgeNGramTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"shingle"
argument_list|,
name|ShingleTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|processTokenizers
annotation|@
name|Override
specifier|public
name|void
name|processTokenizers
parameter_list|(
name|TokenizersBindings
name|tokenizersBindings
parameter_list|)
block|{
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"standard"
argument_list|,
name|StandardTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"keyword"
argument_list|,
name|KeywordTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"letter"
argument_list|,
name|LetterTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"lowercase"
argument_list|,
name|LowerCaseTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"whitespace"
argument_list|,
name|WhitespaceTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"russian_letter"
argument_list|,
name|RussianLetterTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"russianLetter"
argument_list|,
name|RussianLetterTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|processAnalyzers
annotation|@
name|Override
specifier|public
name|void
name|processAnalyzers
parameter_list|(
name|AnalyzersBindings
name|analyzersBindings
parameter_list|)
block|{
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"standard"
argument_list|,
name|StandardAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"standard_html_strip"
argument_list|,
name|StandardHtmlStripAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"standardHtmlStrip"
argument_list|,
name|StandardHtmlStripAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"simple"
argument_list|,
name|SimpleAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"stop"
argument_list|,
name|StopAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"whitespace"
argument_list|,
name|WhitespaceAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"keyword"
argument_list|,
name|KeywordAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ExtendedProcessor
specifier|private
specifier|static
class|class
name|ExtendedProcessor
extends|extends
name|AnalysisBinderProcessor
block|{
DECL|method|processTokenFilters
annotation|@
name|Override
specifier|public
name|void
name|processTokenFilters
parameter_list|(
name|TokenFiltersBindings
name|tokenFiltersBindings
parameter_list|)
block|{
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"snowball"
argument_list|,
name|SnowballTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"arabicStem"
argument_list|,
name|ArabicStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"arabic_stem"
argument_list|,
name|ArabicStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"brazilianStem"
argument_list|,
name|BrazilianStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"brazilian_stem"
argument_list|,
name|BrazilianStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"czechStem"
argument_list|,
name|CzechStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"czech_stem"
argument_list|,
name|CzechStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"dutchStem"
argument_list|,
name|DutchStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"dutch_stem"
argument_list|,
name|DutchStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"frenchStem"
argument_list|,
name|FrenchStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"french_stem"
argument_list|,
name|FrenchStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"germanStem"
argument_list|,
name|GermanStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"german_stem"
argument_list|,
name|GermanStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"russianStem"
argument_list|,
name|RussianStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFiltersBindings
operator|.
name|processTokenFilter
argument_list|(
literal|"russian_stem"
argument_list|,
name|RussianStemTokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|processTokenizers
annotation|@
name|Override
specifier|public
name|void
name|processTokenizers
parameter_list|(
name|TokenizersBindings
name|tokenizersBindings
parameter_list|)
block|{
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"nGram"
argument_list|,
name|NGramTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"ngram"
argument_list|,
name|NGramTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"edgeNGram"
argument_list|,
name|EdgeNGramTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizersBindings
operator|.
name|processTokenizer
argument_list|(
literal|"edge_ngram"
argument_list|,
name|EdgeNGramTokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|processAnalyzers
annotation|@
name|Override
specifier|public
name|void
name|processAnalyzers
parameter_list|(
name|AnalyzersBindings
name|analyzersBindings
parameter_list|)
block|{
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"pattern"
argument_list|,
name|PatternAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"snowball"
argument_list|,
name|SnowballAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"arabic"
argument_list|,
name|ArabicAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"brazilian"
argument_list|,
name|BrazilianAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"chinese"
argument_list|,
name|ChineseAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"cjk"
argument_list|,
name|CjkAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"czech"
argument_list|,
name|CzechAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"dutch"
argument_list|,
name|DutchAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"french"
argument_list|,
name|FrenchAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"german"
argument_list|,
name|GermanAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"greek"
argument_list|,
name|GreekAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"persian"
argument_list|,
name|PersianAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"russian"
argument_list|,
name|RussianAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|analyzersBindings
operator|.
name|processAnalyzer
argument_list|(
literal|"thai"
argument_list|,
name|ThaiAnalyzerProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

