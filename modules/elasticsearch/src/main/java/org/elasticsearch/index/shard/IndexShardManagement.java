begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|CloseableComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|jmx
operator|.
name|JmxService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|jmx
operator|.
name|MBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|jmx
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexServiceManagement
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
annotation|@
name|MBean
argument_list|(
name|objectName
operator|=
literal|""
argument_list|,
name|description
operator|=
literal|""
argument_list|)
DECL|class|IndexShardManagement
specifier|public
class|class
name|IndexShardManagement
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|CloseableComponent
block|{
DECL|method|buildShardGroupName
specifier|public
specifier|static
name|String
name|buildShardGroupName
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
return|return
name|buildIndexGroupName
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|)
operator|+
literal|",subService=shards,shard="
operator|+
name|shardId
operator|.
name|id
argument_list|()
return|;
block|}
DECL|field|jmxService
specifier|private
specifier|final
name|JmxService
name|jmxService
decl_stmt|;
DECL|field|indexShard
specifier|private
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|translog
specifier|private
specifier|final
name|Translog
name|translog
decl_stmt|;
DECL|method|IndexShardManagement
annotation|@
name|Inject
specifier|public
name|IndexShardManagement
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|JmxService
name|jmxService
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|Store
name|store
parameter_list|,
name|Translog
name|translog
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|jmxService
operator|=
name|jmxService
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|translog
operator|=
name|translog
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|jmxService
operator|.
name|unregisterGroup
argument_list|(
name|buildShardGroupName
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Index Name"
argument_list|)
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Shard Id"
argument_list|)
DECL|method|getShardId
specifier|public
name|int
name|getShardId
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Storage Size"
argument_list|)
DECL|method|getStoreSize
specifier|public
name|String
name|getStoreSize
parameter_list|()
block|{
try|try
block|{
return|return
name|store
operator|.
name|estimateSize
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"NA"
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The current transaction log id"
argument_list|)
DECL|method|getTranslogId
specifier|public
name|long
name|getTranslogId
parameter_list|()
block|{
return|return
name|translog
operator|.
name|currentId
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of transaction log operations"
argument_list|)
DECL|method|getTranslogNumberOfOperations
specifier|public
name|long
name|getTranslogNumberOfOperations
parameter_list|()
block|{
return|return
name|translog
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Estimated size in memory the transaction log takes"
argument_list|)
DECL|method|getTranslogSize
specifier|public
name|String
name|getTranslogSize
parameter_list|()
block|{
return|return
name|translog
operator|.
name|estimateMemorySize
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The state of the shard"
argument_list|)
DECL|method|getState
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|state
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Primary"
argument_list|)
DECL|method|isPrimary
specifier|public
name|boolean
name|isPrimary
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The state of the shard as perceived by the cluster"
argument_list|)
DECL|method|getRoutingState
specifier|public
name|String
name|getRoutingState
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The number of documents in the index"
argument_list|)
DECL|method|getNumDocs
specifier|public
name|int
name|getNumDocs
parameter_list|()
block|{
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|indexShard
operator|.
name|searcher
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
return|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The total number of documents in the index (including deleted ones)"
argument_list|)
DECL|method|getMaxDoc
specifier|public
name|int
name|getMaxDoc
parameter_list|()
block|{
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|indexShard
operator|.
name|searcher
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
return|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

