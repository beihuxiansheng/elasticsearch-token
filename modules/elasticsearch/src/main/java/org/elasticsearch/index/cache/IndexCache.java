begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.cache
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|CloseableComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bloom
operator|.
name|BloomCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|field
operator|.
name|data
operator|.
name|FieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|filter
operator|.
name|FilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|id
operator|.
name|IdCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|query
operator|.
name|parser
operator|.
name|QueryParserCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|IndexCache
specifier|public
class|class
name|IndexCache
extends|extends
name|AbstractIndexComponent
implements|implements
name|CloseableComponent
implements|,
name|ClusterStateListener
block|{
DECL|field|filterCache
specifier|private
specifier|final
name|FilterCache
name|filterCache
decl_stmt|;
DECL|field|fieldDataCache
specifier|private
specifier|final
name|FieldDataCache
name|fieldDataCache
decl_stmt|;
DECL|field|queryParserCache
specifier|private
specifier|final
name|QueryParserCache
name|queryParserCache
decl_stmt|;
DECL|field|idCache
specifier|private
specifier|final
name|IdCache
name|idCache
decl_stmt|;
DECL|field|bloomCache
specifier|private
specifier|final
name|BloomCache
name|bloomCache
decl_stmt|;
DECL|field|refreshInterval
specifier|private
specifier|final
name|TimeValue
name|refreshInterval
decl_stmt|;
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|latestCacheStatsTimestamp
specifier|private
name|long
name|latestCacheStatsTimestamp
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|latestCacheStats
specifier|private
name|CacheStats
name|latestCacheStats
decl_stmt|;
DECL|method|IndexCache
annotation|@
name|Inject
specifier|public
name|IndexCache
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|FilterCache
name|filterCache
parameter_list|,
name|FieldDataCache
name|fieldDataCache
parameter_list|,
name|QueryParserCache
name|queryParserCache
parameter_list|,
name|IdCache
name|idCache
parameter_list|,
name|BloomCache
name|bloomCache
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterCache
operator|=
name|filterCache
expr_stmt|;
name|this
operator|.
name|fieldDataCache
operator|=
name|fieldDataCache
expr_stmt|;
name|this
operator|.
name|queryParserCache
operator|=
name|queryParserCache
expr_stmt|;
name|this
operator|.
name|idCache
operator|=
name|idCache
expr_stmt|;
name|this
operator|.
name|bloomCache
operator|=
name|bloomCache
expr_stmt|;
name|this
operator|.
name|refreshInterval
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"stats.refresh_interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Using stats.refresh_interval [{}]"
argument_list|,
name|refreshInterval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
argument_list|(
name|optional
operator|=
literal|true
argument_list|)
DECL|method|setClusterService
specifier|public
name|void
name|setClusterService
parameter_list|(
annotation|@
name|Nullable
name|ClusterService
name|clusterService
parameter_list|)
block|{
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
if|if
condition|(
name|clusterService
operator|!=
literal|null
condition|)
block|{
name|clusterService
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stats
specifier|public
specifier|synchronized
name|CacheStats
name|stats
parameter_list|()
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|timestamp
operator|-
name|latestCacheStatsTimestamp
operator|)
operator|>
name|refreshInterval
operator|.
name|millis
argument_list|()
condition|)
block|{
name|FilterCache
operator|.
name|EntriesStats
name|filterEntriesStats
init|=
name|filterCache
operator|.
name|entriesStats
argument_list|()
decl_stmt|;
name|latestCacheStats
operator|=
operator|new
name|CacheStats
argument_list|(
name|fieldDataCache
operator|.
name|evictions
argument_list|()
argument_list|,
name|filterCache
operator|.
name|evictions
argument_list|()
argument_list|,
name|fieldDataCache
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|filterEntriesStats
operator|.
name|sizeInBytes
argument_list|,
name|filterEntriesStats
operator|.
name|count
argument_list|,
name|bloomCache
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|latestCacheStatsTimestamp
operator|=
name|timestamp
expr_stmt|;
block|}
return|return
name|latestCacheStats
return|;
block|}
DECL|method|filter
specifier|public
name|FilterCache
name|filter
parameter_list|()
block|{
return|return
name|filterCache
return|;
block|}
DECL|method|fieldData
specifier|public
name|FieldDataCache
name|fieldData
parameter_list|()
block|{
return|return
name|fieldDataCache
return|;
block|}
DECL|method|idCache
specifier|public
name|IdCache
name|idCache
parameter_list|()
block|{
return|return
name|this
operator|.
name|idCache
return|;
block|}
DECL|method|bloomCache
specifier|public
name|BloomCache
name|bloomCache
parameter_list|()
block|{
return|return
name|this
operator|.
name|bloomCache
return|;
block|}
DECL|method|queryParserCache
specifier|public
name|QueryParserCache
name|queryParserCache
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryParserCache
return|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|filterCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|fieldDataCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|idCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|queryParserCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|bloomCache
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|clusterService
operator|!=
literal|null
condition|)
block|{
name|clusterService
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
name|filterCache
operator|.
name|clear
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|fieldDataCache
operator|.
name|clear
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|idCache
operator|.
name|clear
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|bloomCache
operator|.
name|clear
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|filterCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fieldDataCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|idCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queryParserCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bloomCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|clusterChanged
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
comment|// clear the query parser cache if the metadata (mappings) changed...
if|if
condition|(
name|event
operator|.
name|metaDataChanged
argument_list|()
condition|)
block|{
name|queryParserCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

