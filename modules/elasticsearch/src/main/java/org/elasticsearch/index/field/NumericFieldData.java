begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.field
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
package|;
end_package

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|NumericFieldData
specifier|public
specifier|abstract
class|class
name|NumericFieldData
extends|extends
name|FieldData
block|{
DECL|method|NumericFieldData
specifier|protected
name|NumericFieldData
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|FieldDataOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|fieldName
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the value of the specified number as an<code>int</code>.      * This may involve rounding or truncation.      *      * @return the numeric value represented by this object after conversion      *         to type<code>int</code>.      */
DECL|method|intValue
specifier|public
specifier|abstract
name|int
name|intValue
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**      * Returns the value of the specified number as a<code>long</code>.      * This may involve rounding or truncation.      *      * @return the numeric value represented by this object after conversion      *         to type<code>long</code>.      */
DECL|method|longValue
specifier|public
specifier|abstract
name|long
name|longValue
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**      * Returns the value of the specified number as a<code>float</code>.      * This may involve rounding.      *      * @return the numeric value represented by this object after conversion      *         to type<code>float</code>.      */
DECL|method|floatValue
specifier|public
specifier|abstract
name|float
name|floatValue
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**      * Returns the value of the specified number as a<code>double</code>.      * This may involve rounding.      *      * @return the numeric value represented by this object after conversion      *         to type<code>double</code>.      */
DECL|method|doubleValue
specifier|public
specifier|abstract
name|double
name|doubleValue
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**      * Returns the value of the specified number as a<code>byte</code>.      * This may involve rounding or truncation.      *      * @return the numeric value represented by this object after conversion      *         to type<code>byte</code>.      */
DECL|method|byteValue
specifier|public
name|byte
name|byteValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
name|intValue
argument_list|(
name|docId
argument_list|)
return|;
block|}
comment|/**      * Returns the value of the specified number as a<code>short</code>.      * This may involve rounding or truncation.      *      * @return the numeric value represented by this object after conversion      *         to type<code>short</code>.      */
DECL|method|shortValue
specifier|public
name|short
name|shortValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|intValue
argument_list|(
name|docId
argument_list|)
return|;
block|}
DECL|method|doubleValues
specifier|public
specifier|abstract
name|double
index|[]
name|doubleValues
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
DECL|method|forEachValueInDoc
specifier|public
specifier|abstract
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|DoubleValueInDocProc
name|proc
parameter_list|)
function_decl|;
DECL|interface|DoubleValueInDocProc
specifier|public
specifier|static
interface|interface
name|DoubleValueInDocProc
block|{
DECL|method|onValue
name|void
name|onValue
parameter_list|(
name|int
name|docId
parameter_list|,
name|double
name|value
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

