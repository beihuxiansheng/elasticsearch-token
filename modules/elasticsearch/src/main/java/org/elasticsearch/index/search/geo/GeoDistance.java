begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_comment
comment|/**  * Geo distance calculation.  *  * @author kimchy (shay.banon)  */
end_comment

begin_enum
DECL|enum|GeoDistance
specifier|public
enum|enum
name|GeoDistance
block|{
comment|/**      * Calculates distance as points on a plane. Faster, but less accurate than {@link #ARC}.      */
DECL|method|PLANE
DECL|method|PLANE
name|PLANE
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
name|double
name|px
init|=
name|targetLongitude
operator|-
name|sourceLongitude
decl_stmt|;
name|double
name|py
init|=
name|targetLatitude
operator|-
name|sourceLatitude
decl_stmt|;
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|px
operator|*
name|px
operator|+
name|py
operator|*
name|py
argument_list|)
operator|*
name|unit
operator|.
name|getDistancePerDegree
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|normalize
parameter_list|(
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
name|distance
return|;
block|}
block|}
block|,
comment|/**      * Calculates distance factor.      */
DECL|method|FACTOR
DECL|method|FACTOR
name|FACTOR
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
comment|// TODO: we might want to normalize longitude as we did in LatLng...
name|double
name|longitudeDifference
init|=
name|targetLongitude
operator|-
name|sourceLongitude
decl_stmt|;
name|double
name|a
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|sourceLatitude
argument_list|)
decl_stmt|;
name|double
name|c
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|targetLatitude
argument_list|)
decl_stmt|;
return|return
operator|(
name|Math
operator|.
name|cos
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|c
argument_list|)
operator|)
operator|+
operator|(
name|Math
operator|.
name|sin
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|c
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|longitudeDifference
argument_list|)
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|normalize
parameter_list|(
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cos
argument_list|(
name|distance
operator|/
name|unit
operator|.
name|getEarthRadius
argument_list|()
argument_list|)
return|;
block|}
block|}
block|,
comment|/**      * Calculates distance as points in a globe.      */
DECL|method|ARC
DECL|method|ARC
name|ARC
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
comment|// TODO: we might want to normalize longitude as we did in LatLng...
name|double
name|longitudeDifference
init|=
name|targetLongitude
operator|-
name|sourceLongitude
decl_stmt|;
name|double
name|a
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|sourceLatitude
argument_list|)
decl_stmt|;
name|double
name|c
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|targetLatitude
argument_list|)
decl_stmt|;
name|double
name|factor
init|=
operator|(
name|Math
operator|.
name|cos
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|c
argument_list|)
operator|)
operator|+
operator|(
name|Math
operator|.
name|sin
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|c
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|longitudeDifference
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|factor
operator|<
operator|-
literal|1D
condition|)
block|{
return|return
name|Math
operator|.
name|PI
operator|*
name|unit
operator|.
name|getEarthRadius
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|factor
operator|>=
literal|1D
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|acos
argument_list|(
name|factor
argument_list|)
operator|*
name|unit
operator|.
name|getEarthRadius
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|double
name|normalize
parameter_list|(
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
name|distance
return|;
block|}
block|}
block|;
DECL|method|normalize
specifier|public
specifier|abstract
name|double
name|normalize
parameter_list|(
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
function_decl|;
DECL|method|calculate
specifier|public
specifier|abstract
name|double
name|calculate
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
function_decl|;
DECL|method|fromString
specifier|public
specifier|static
name|GeoDistance
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
literal|"plane"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|PLANE
return|;
block|}
elseif|else
if|if
condition|(
literal|"arc"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|ARC
return|;
block|}
elseif|else
if|if
condition|(
literal|"factor"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|FACTOR
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No geo distance for ["
operator|+
name|s
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
end_enum

end_unit

