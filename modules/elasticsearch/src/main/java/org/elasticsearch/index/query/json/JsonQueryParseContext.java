begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.json
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|filter
operator|.
name|FilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMappers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|JsonQueryParseContext
specifier|public
class|class
name|JsonQueryParseContext
block|{
DECL|field|index
specifier|private
specifier|final
name|Index
name|index
decl_stmt|;
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|similarityService
specifier|private
specifier|final
name|SimilarityService
name|similarityService
decl_stmt|;
DECL|field|filterCache
specifier|private
specifier|final
name|FilterCache
name|filterCache
decl_stmt|;
DECL|field|queryParserRegistry
specifier|private
specifier|final
name|JsonQueryParserRegistry
name|queryParserRegistry
decl_stmt|;
DECL|field|jp
specifier|private
name|JsonParser
name|jp
decl_stmt|;
DECL|method|JsonQueryParseContext
specifier|public
name|JsonQueryParseContext
parameter_list|(
name|Index
name|index
parameter_list|,
name|JsonQueryParserRegistry
name|queryParserRegistry
parameter_list|,
name|MapperService
name|mapperService
parameter_list|,
name|SimilarityService
name|similarityService
parameter_list|,
name|FilterCache
name|filterCache
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|queryParserRegistry
operator|=
name|queryParserRegistry
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|this
operator|.
name|similarityService
operator|=
name|similarityService
expr_stmt|;
name|this
operator|.
name|filterCache
operator|=
name|filterCache
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|JsonParser
name|jp
parameter_list|)
block|{
name|this
operator|.
name|jp
operator|=
name|jp
expr_stmt|;
block|}
DECL|method|jp
specifier|public
name|JsonParser
name|jp
parameter_list|()
block|{
return|return
name|jp
return|;
block|}
DECL|method|mapperService
specifier|public
name|MapperService
name|mapperService
parameter_list|()
block|{
return|return
name|mapperService
return|;
block|}
DECL|method|similarityService
annotation|@
name|Nullable
specifier|public
name|SimilarityService
name|similarityService
parameter_list|()
block|{
return|return
name|this
operator|.
name|similarityService
return|;
block|}
DECL|method|searchSimilarity
specifier|public
name|Similarity
name|searchSimilarity
parameter_list|()
block|{
return|return
name|similarityService
operator|!=
literal|null
condition|?
name|similarityService
operator|.
name|defaultSearchSimilarity
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|filterCache
specifier|public
name|FilterCache
name|filterCache
parameter_list|()
block|{
return|return
name|filterCache
return|;
block|}
DECL|method|cacheFilterIfPossible
specifier|public
name|Filter
name|cacheFilterIfPossible
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filterCache
operator|==
literal|null
condition|)
block|{
return|return
name|filter
return|;
block|}
return|return
name|filterCache
operator|.
name|cache
argument_list|(
name|filter
argument_list|)
return|;
block|}
DECL|method|parseInnerQuery
specifier|public
name|Query
name|parseInnerQuery
parameter_list|()
throws|throws
name|IOException
throws|,
name|QueryParsingException
block|{
comment|// move to START object
name|JsonToken
name|token
decl_stmt|;
if|if
condition|(
name|jp
operator|.
name|getCurrentToken
argument_list|()
operator|!=
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|token
operator|=
name|jp
operator|.
name|nextToken
argument_list|()
expr_stmt|;
assert|assert
name|token
operator|==
name|JsonToken
operator|.
name|START_OBJECT
assert|;
block|}
name|token
operator|=
name|jp
operator|.
name|nextToken
argument_list|()
expr_stmt|;
assert|assert
name|token
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
assert|;
name|String
name|queryName
init|=
name|jp
operator|.
name|getCurrentName
argument_list|()
decl_stmt|;
comment|// move to the next START_OBJECT
name|token
operator|=
name|jp
operator|.
name|nextToken
argument_list|()
expr_stmt|;
assert|assert
name|token
operator|==
name|JsonToken
operator|.
name|START_OBJECT
assert|;
name|JsonQueryParser
name|queryParser
init|=
name|queryParserRegistry
operator|.
name|queryParser
argument_list|(
name|queryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|index
argument_list|,
literal|"No json query parser registered for ["
operator|+
name|queryName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Query
name|result
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|jp
operator|.
name|getCurrentToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
comment|// if we are at END_OBJECT, move to the next one...
name|jp
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|parseInnerFilter
specifier|public
name|Filter
name|parseInnerFilter
parameter_list|()
throws|throws
name|IOException
throws|,
name|QueryParsingException
block|{
comment|// move to START object
name|JsonToken
name|token
decl_stmt|;
if|if
condition|(
name|jp
operator|.
name|getCurrentToken
argument_list|()
operator|!=
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|token
operator|=
name|jp
operator|.
name|nextToken
argument_list|()
expr_stmt|;
assert|assert
name|token
operator|==
name|JsonToken
operator|.
name|START_OBJECT
assert|;
block|}
name|token
operator|=
name|jp
operator|.
name|nextToken
argument_list|()
expr_stmt|;
assert|assert
name|token
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
assert|;
name|String
name|queryName
init|=
name|jp
operator|.
name|getCurrentName
argument_list|()
decl_stmt|;
comment|// move to the next START_OBJECT
name|token
operator|=
name|jp
operator|.
name|nextToken
argument_list|()
expr_stmt|;
assert|assert
name|token
operator|==
name|JsonToken
operator|.
name|START_OBJECT
assert|;
name|JsonFilterParser
name|filterParser
init|=
name|queryParserRegistry
operator|.
name|filterParser
argument_list|(
name|queryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|index
argument_list|,
literal|"No json query parser registered for ["
operator|+
name|queryName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Filter
name|result
init|=
name|filterParser
operator|.
name|parse
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|jp
operator|.
name|getCurrentToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
comment|// if we are at END_OBJECT, move to the next one...
name|jp
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|fieldMapper
specifier|public
name|FieldMapper
name|fieldMapper
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldMappers
name|fieldMappers
init|=
name|mapperService
operator|.
name|smartNameFieldMappers
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|fieldMappers
operator|.
name|mapper
argument_list|()
return|;
block|}
DECL|method|indexName
specifier|public
name|String
name|indexName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldMapper
name|smartMapper
init|=
name|fieldMapper
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|smartMapper
operator|==
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
return|return
name|smartMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
return|;
block|}
DECL|method|smartFieldMappers
specifier|public
name|MapperService
operator|.
name|SmartNameFieldMappers
name|smartFieldMappers
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|mapperService
operator|.
name|smartName
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

