begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.field.data.doubles
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|doubles
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|field
operator|.
name|data
operator|.
name|FieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|FieldDataType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|DoubleFieldDataType
specifier|public
class|class
name|DoubleFieldDataType
implements|implements
name|FieldDataType
argument_list|<
name|DoubleFieldData
argument_list|>
block|{
DECL|method|newFieldComparatorSource
annotation|@
name|Override
specifier|public
name|FieldComparatorSource
name|newFieldComparatorSource
parameter_list|(
specifier|final
name|FieldDataCache
name|cache
parameter_list|,
specifier|final
name|String
name|missing
parameter_list|)
block|{
if|if
condition|(
name|missing
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|FieldComparatorSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FieldComparator
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DoubleFieldDataComparator
argument_list|(
name|numHits
argument_list|,
name|fieldname
argument_list|,
name|cache
argument_list|)
return|;
block|}
block|}
return|;
block|}
if|if
condition|(
name|missing
operator|.
name|equals
argument_list|(
literal|"_last"
argument_list|)
condition|)
block|{
return|return
operator|new
name|FieldComparatorSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FieldComparator
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DoubleFieldDataMissingComparator
argument_list|(
name|numHits
argument_list|,
name|fieldname
argument_list|,
name|cache
argument_list|,
name|reversed
condition|?
name|Double
operator|.
name|MIN_VALUE
else|:
name|Double
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
block|}
return|;
block|}
if|if
condition|(
name|missing
operator|.
name|equals
argument_list|(
literal|"_first"
argument_list|)
condition|)
block|{
return|return
operator|new
name|FieldComparatorSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FieldComparator
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DoubleFieldDataMissingComparator
argument_list|(
name|numHits
argument_list|,
name|fieldname
argument_list|,
name|cache
argument_list|,
name|reversed
condition|?
name|Double
operator|.
name|MAX_VALUE
else|:
name|Double
operator|.
name|MIN_VALUE
argument_list|)
return|;
block|}
block|}
return|;
block|}
return|return
operator|new
name|FieldComparatorSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FieldComparator
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DoubleFieldDataMissingComparator
argument_list|(
name|numHits
argument_list|,
name|fieldname
argument_list|,
name|cache
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|missing
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|load
annotation|@
name|Override
specifier|public
name|DoubleFieldData
name|load
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DoubleFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

