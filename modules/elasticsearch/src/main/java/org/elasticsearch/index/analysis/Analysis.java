begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WordlistLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|Analysis
specifier|public
class|class
name|Analysis
block|{
DECL|method|isNoStopwords
specifier|public
specifier|static
name|boolean
name|isNoStopwords
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|value
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"stopwords"
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
operator|&&
literal|"_none_"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|parseStemExclusion
specifier|public
specifier|static
name|Set
argument_list|<
name|?
argument_list|>
name|parseStemExclusion
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Set
argument_list|<
name|?
argument_list|>
name|defaultStemExclusion
parameter_list|)
block|{
name|String
name|value
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"stem_exclusion"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"_none_"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Strings
operator|.
name|commaDelimitedListToSet
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
name|String
index|[]
name|stopWords
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"stem_exclusion"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopWords
operator|!=
literal|null
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Iterators
operator|.
name|forArray
argument_list|(
name|stopWords
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultStemExclusion
return|;
block|}
block|}
DECL|method|parseStopWords
specifier|public
specifier|static
name|Set
argument_list|<
name|?
argument_list|>
name|parseStopWords
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Set
argument_list|<
name|?
argument_list|>
name|defaultStopWords
parameter_list|)
block|{
name|String
name|value
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"stopwords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"_none_"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Strings
operator|.
name|commaDelimitedListToSet
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
name|String
index|[]
name|stopWords
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"stopwords"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopWords
operator|!=
literal|null
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Iterators
operator|.
name|forArray
argument_list|(
name|stopWords
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultStopWords
return|;
block|}
block|}
comment|/**      * Fetches a list of words from the specified settings file. The list should either be available at the key      * specified by settingsPrefix or in a file specified by settingsPrefix + _path.      *      * @throws ElasticSearchIllegalArgumentException      *          If the word list cannot be found at either key.      */
DECL|method|getWordList
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getWordList
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|settingPrefix
parameter_list|)
block|{
name|String
name|wordListPath
init|=
name|settings
operator|.
name|get
argument_list|(
name|settingPrefix
operator|+
literal|"_path"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|wordListPath
operator|==
literal|null
condition|)
block|{
name|String
index|[]
name|explicitWordList
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|settingPrefix
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|explicitWordList
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s or %s_path must be provided."
argument_list|,
name|settingPrefix
argument_list|,
name|settingPrefix
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|explicitWordList
argument_list|)
argument_list|)
return|;
block|}
block|}
name|File
name|wordListFile
init|=
operator|new
name|File
argument_list|(
name|wordListPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wordListFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
name|settingPrefix
operator|+
literal|"_path file must exist."
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|WordlistLoader
operator|.
name|getWordSet
argument_list|(
name|wordListFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"IOException while reading %s_path: %s"
argument_list|,
name|settingPrefix
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

