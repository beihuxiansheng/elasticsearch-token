begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.deletionpolicy
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lucene
operator|.
name|IndexCommitDelegate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * A snapshot index commit point. While this is held and {@link #release()}  * was not called, no files will be deleted that relates to this commit point  * ({@link #getFileNames()}).  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|SnapshotIndexCommit
specifier|public
class|class
name|SnapshotIndexCommit
extends|extends
name|IndexCommitDelegate
implements|implements
name|Releasable
block|{
DECL|field|deletionPolicy
specifier|private
specifier|final
name|SnapshotDeletionPolicy
name|deletionPolicy
decl_stmt|;
DECL|field|files
specifier|private
specifier|final
name|String
index|[]
name|files
decl_stmt|;
DECL|method|SnapshotIndexCommit
name|SnapshotIndexCommit
parameter_list|(
name|SnapshotDeletionPolicy
name|deletionPolicy
parameter_list|,
name|IndexCommit
name|cp
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletionPolicy
operator|=
name|deletionPolicy
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tmpFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|o
range|:
name|cp
operator|.
name|getFileNames
argument_list|()
control|)
block|{
name|tmpFiles
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|files
operator|=
name|tmpFiles
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tmpFiles
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|getFiles
specifier|public
name|String
index|[]
name|getFiles
parameter_list|()
block|{
return|return
name|files
return|;
block|}
comment|/**      * Releases the current snapshot, returning<code>true</code> if it was      * actually released.      */
DECL|method|release
specifier|public
name|boolean
name|release
parameter_list|()
block|{
return|return
name|deletionPolicy
operator|.
name|release
argument_list|(
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Override the delete operation, and only actually delete it if it      * is not held by the {@link SnapshotDeletionPolicy}.      */
DECL|method|delete
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|()
block|{
if|if
condition|(
operator|!
name|deletionPolicy
operator|.
name|isHeld
argument_list|(
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|delegate
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

