begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|LowerCaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ReusableAnalyzerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|IndicesAnalysisService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|AnalysisSettingsRequired
DECL|class|SynonymTokenFilterFactory
specifier|public
class|class
name|SynonymTokenFilterFactory
extends|extends
name|AbstractTokenFilterFactory
block|{
DECL|field|synonymMap
specifier|private
specifier|final
name|SynonymMap
name|synonymMap
decl_stmt|;
DECL|field|ignoreCase
specifier|private
specifier|final
name|boolean
name|ignoreCase
decl_stmt|;
DECL|method|SynonymTokenFilterFactory
annotation|@
name|Inject
specifier|public
name|SynonymTokenFilterFactory
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|Environment
name|env
parameter_list|,
name|IndicesAnalysisService
name|indicesAnalysisService
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactoryFactory
argument_list|>
name|tokenizerFactories
parameter_list|,
annotation|@
name|Assisted
name|String
name|name
parameter_list|,
annotation|@
name|Assisted
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
name|Analysis
operator|.
name|getWordList
argument_list|(
name|env
argument_list|,
name|settings
argument_list|,
literal|"synonyms"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rules
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"synonym requires either `synonyms` or `synonyms_path` to be configured"
argument_list|)
throw|;
block|}
name|this
operator|.
name|ignoreCase
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"ignore_case"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|expand
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"expand"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|tokenizerName
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
decl_stmt|;
name|TokenizerFactoryFactory
name|tokenizerFactoryFactory
init|=
name|tokenizerFactories
operator|.
name|get
argument_list|(
name|tokenizerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerFactoryFactory
operator|==
literal|null
condition|)
block|{
name|tokenizerFactoryFactory
operator|=
name|indicesAnalysisService
operator|.
name|tokenizerFactoryFactory
argument_list|(
name|tokenizerName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenizerFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"failed to fine tokenizer ["
operator|+
name|tokenizerName
operator|+
literal|"] for synonym token filter"
argument_list|)
throw|;
block|}
specifier|final
name|TokenizerFactory
name|tokenizerFactory
init|=
name|tokenizerFactoryFactory
operator|.
name|create
argument_list|(
name|tokenizerName
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|ReusableAnalyzerBase
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
name|tokenizerFactory
operator|==
literal|null
condition|?
operator|new
name|WhitespaceTokenizer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|reader
argument_list|)
else|:
name|tokenizerFactory
operator|.
name|create
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TokenStream
name|stream
init|=
name|ignoreCase
condition|?
operator|new
name|LowerCaseFilter
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|tokenizer
argument_list|)
else|:
name|tokenizer
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|stream
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|CustomSynonymParser
name|parser
init|=
operator|new
name|CustomSynonymParser
argument_list|(
literal|true
argument_list|,
name|expand
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|rule
range|:
name|rules
control|)
block|{
name|parser
operator|.
name|addLine
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
name|synonymMap
operator|=
name|parser
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"failed to build synonyms"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|create
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
comment|// fst is null means no synonyms
return|return
name|synonymMap
operator|.
name|fst
operator|==
literal|null
condition|?
name|tokenStream
else|:
operator|new
name|SynonymFilter
argument_list|(
name|tokenStream
argument_list|,
name|synonymMap
argument_list|,
name|ignoreCase
argument_list|)
return|;
block|}
comment|/**      * Parser for the Solr synonyms format.      *<ol>      *<li> Blank lines and lines starting with '#' are comments.      *<li> Explicit mappings match any token sequence on the LHS of "=>"      * and replace with all alternatives on the RHS.  These types of mappings      * ignore the expand parameter in the constructor.      * Example:      *<blockquote>i-pod, i pod => ipod</blockquote>      *<li> Equivalent synonyms may be separated with commas and give      * no explicit mapping.  In this case the mapping behavior will      * be taken from the expand parameter in the constructor.  This allows      * the same synonym file to be used in different synonym handling strategies.      * Example:      *<blockquote>ipod, i-pod, i pod</blockquote>      *      *<li> Multiple synonym mapping entries are merged.      * Example:      *<blockquote>      * foo => foo bar<br>      * foo => baz<br><br>      * is equivalent to<br><br>      * foo => foo bar, baz      *</blockquote>      *</ol>      *      * @lucene.experimental      */
DECL|class|CustomSynonymParser
specifier|public
specifier|static
class|class
name|CustomSynonymParser
extends|extends
name|SynonymMap
operator|.
name|Builder
block|{
DECL|field|expand
specifier|private
specifier|final
name|boolean
name|expand
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
DECL|method|CustomSynonymParser
specifier|public
name|CustomSynonymParser
parameter_list|(
name|boolean
name|dedup
parameter_list|,
name|boolean
name|expand
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|super
argument_list|(
name|dedup
argument_list|)
expr_stmt|;
name|this
operator|.
name|expand
operator|=
name|expand
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|Reader
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|LineNumberReader
name|br
init|=
operator|new
name|LineNumberReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
try|try
block|{
name|addInternal
argument_list|(
name|br
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ParseException
name|ex
init|=
operator|new
name|ParseException
argument_list|(
literal|"Invalid synonym rule at line "
operator|+
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addLine
specifier|public
name|void
name|addLine
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
return|return;
block|}
name|CharsRef
name|inputs
index|[]
decl_stmt|;
name|CharsRef
name|outputs
index|[]
decl_stmt|;
comment|// TODO: we could process this more efficiently.
name|String
name|sides
index|[]
init|=
name|split
argument_list|(
name|line
argument_list|,
literal|"=>"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sides
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// explicit mapping
if|if
condition|(
name|sides
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"more than one explicit mapping specified on the same line"
argument_list|)
throw|;
block|}
name|String
name|inputStrings
index|[]
init|=
name|split
argument_list|(
name|sides
index|[
literal|0
index|]
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|inputs
operator|=
operator|new
name|CharsRef
index|[
name|inputStrings
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
name|analyze
argument_list|(
name|analyzer
argument_list|,
name|unescape
argument_list|(
name|inputStrings
index|[
name|i
index|]
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
operator|new
name|CharsRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|outputStrings
index|[]
init|=
name|split
argument_list|(
name|sides
index|[
literal|1
index|]
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|outputs
operator|=
operator|new
name|CharsRef
index|[
name|outputStrings
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|outputs
index|[
name|i
index|]
operator|=
name|analyze
argument_list|(
name|analyzer
argument_list|,
name|unescape
argument_list|(
name|outputStrings
index|[
name|i
index|]
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
operator|new
name|CharsRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|inputStrings
index|[]
init|=
name|split
argument_list|(
name|line
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|inputs
operator|=
operator|new
name|CharsRef
index|[
name|inputStrings
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
name|analyze
argument_list|(
name|analyzer
argument_list|,
name|unescape
argument_list|(
name|inputStrings
index|[
name|i
index|]
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
operator|new
name|CharsRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expand
condition|)
block|{
name|outputs
operator|=
name|inputs
expr_stmt|;
block|}
else|else
block|{
name|outputs
operator|=
operator|new
name|CharsRef
index|[
literal|1
index|]
expr_stmt|;
name|outputs
index|[
literal|0
index|]
operator|=
name|inputs
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
comment|// currently we include the term itself in the map,
comment|// and use includeOrig = false always.
comment|// this is how the existing filter does it, but its actually a bug,
comment|// especially if combined with ignoreCase = true
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|outputs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|add
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
name|outputs
index|[
name|j
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addInternal
specifier|private
name|void
name|addInternal
parameter_list|(
name|BufferedReader
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|addLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|split
specifier|private
specifier|static
name|String
index|[]
name|split
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|,
name|end
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|separator
argument_list|,
name|pos
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|pos
operator|+=
name|separator
operator|.
name|length
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\\'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|end
condition|)
break|break;
comment|// ERROR, or let it go?
name|ch
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|unescape
specifier|private
name|String
name|unescape
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"\\"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\\'
operator|&&
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|s
return|;
block|}
block|}
block|}
end_class

end_unit

