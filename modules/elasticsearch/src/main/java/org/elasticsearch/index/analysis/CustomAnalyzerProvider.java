begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A custom analyzer that is built out of a single {@link org.apache.lucene.analysis.Tokenizer} and a list  * of {@link org.apache.lucene.analysis.TokenFilter}s.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|CustomAnalyzerProvider
specifier|public
class|class
name|CustomAnalyzerProvider
extends|extends
name|AbstractIndexAnalyzerProvider
argument_list|<
name|CustomAnalyzer
argument_list|>
block|{
DECL|field|tokenizerFactory
specifier|private
specifier|final
name|TokenizerFactory
name|tokenizerFactory
decl_stmt|;
DECL|field|charFilterFactories
specifier|private
specifier|final
name|CharFilterFactory
index|[]
name|charFilterFactories
decl_stmt|;
DECL|field|tokenFilterFactories
specifier|private
specifier|final
name|TokenFilterFactory
index|[]
name|tokenFilterFactories
decl_stmt|;
DECL|field|customAnalyzer
specifier|private
specifier|final
name|CustomAnalyzer
name|customAnalyzer
decl_stmt|;
DECL|method|CustomAnalyzerProvider
annotation|@
name|Inject
specifier|public
name|CustomAnalyzerProvider
parameter_list|(
name|Index
name|index
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactoryFactory
argument_list|>
name|tokenizerFactories
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CharFilterFactoryFactory
argument_list|>
name|charFilterFactories
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactoryFactory
argument_list|>
name|tokenFilterFactories
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
annotation|@
name|Assisted
name|String
name|name
parameter_list|,
annotation|@
name|Assisted
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|String
name|tokenizerName
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"tokenizer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Custom Analyzer ["
operator|+
name|name
operator|+
literal|"] must be configured with a tokenizer"
argument_list|)
throw|;
block|}
name|TokenizerFactoryFactory
name|tokenizerFactoryFactory
init|=
name|tokenizerFactories
operator|.
name|get
argument_list|(
name|tokenizerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Custom Analyzer ["
operator|+
name|name
operator|+
literal|"] failed to find tokenizer under name ["
operator|+
name|tokenizerName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Settings
name|tokenizerSettings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.tokenizer"
argument_list|)
operator|.
name|get
argument_list|(
name|tokenizerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerSettings
operator|==
literal|null
condition|)
block|{
name|tokenizerSettings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|tokenizerFactory
operator|=
name|tokenizerFactoryFactory
operator|.
name|create
argument_list|(
name|tokenizerName
argument_list|,
name|tokenizerSettings
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CharFilterFactory
argument_list|>
name|charFilters
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|String
index|[]
name|charFilterNames
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"char_filter"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|charFilterName
range|:
name|charFilterNames
control|)
block|{
name|CharFilterFactoryFactory
name|charFilterFactoryFactory
init|=
name|charFilterFactories
operator|.
name|get
argument_list|(
name|charFilterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|charFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Custom Analyzer ["
operator|+
name|name
operator|+
literal|"] failed to find char filter under name ["
operator|+
name|charFilterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Settings
name|charFilterSettings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.char_filter"
argument_list|)
operator|.
name|get
argument_list|(
name|charFilterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|charFilterSettings
operator|==
literal|null
condition|)
block|{
name|charFilterSettings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|charFilters
operator|.
name|add
argument_list|(
name|charFilterFactoryFactory
operator|.
name|create
argument_list|(
name|charFilterName
argument_list|,
name|charFilterSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|charFilterFactories
operator|=
name|charFilters
operator|.
name|toArray
argument_list|(
operator|new
name|CharFilterFactory
index|[
name|charFilters
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TokenFilterFactory
argument_list|>
name|tokenFilters
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokenFilterNames
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"filter"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tokenFilterName
range|:
name|tokenFilterNames
control|)
block|{
name|TokenFilterFactoryFactory
name|tokenFilterFactoryFactory
init|=
name|tokenFilterFactories
operator|.
name|get
argument_list|(
name|tokenFilterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Custom Analyzer ["
operator|+
name|name
operator|+
literal|"] failed to find token filter under name ["
operator|+
name|tokenFilterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Settings
name|tokenFilterSettings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.filter"
argument_list|)
operator|.
name|get
argument_list|(
name|tokenFilterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenFilterSettings
operator|==
literal|null
condition|)
block|{
name|tokenFilterSettings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|tokenFilters
operator|.
name|add
argument_list|(
name|tokenFilterFactoryFactory
operator|.
name|create
argument_list|(
name|tokenFilterName
argument_list|,
name|tokenFilterSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|tokenFilterFactories
operator|=
name|tokenFilters
operator|.
name|toArray
argument_list|(
operator|new
name|TokenFilterFactory
index|[
name|tokenFilters
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|customAnalyzer
operator|=
operator|new
name|CustomAnalyzer
argument_list|(
name|this
operator|.
name|tokenizerFactory
argument_list|,
name|this
operator|.
name|charFilterFactories
argument_list|,
name|this
operator|.
name|tokenFilterFactories
argument_list|)
expr_stmt|;
block|}
DECL|method|get
annotation|@
name|Override
specifier|public
name|CustomAnalyzer
name|get
parameter_list|()
block|{
return|return
name|this
operator|.
name|customAnalyzer
return|;
block|}
block|}
end_class

end_unit

