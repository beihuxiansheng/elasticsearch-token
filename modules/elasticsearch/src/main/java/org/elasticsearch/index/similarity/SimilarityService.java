begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.similarity
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|SimilarityService
specifier|public
class|class
name|SimilarityService
extends|extends
name|AbstractIndexComponent
block|{
DECL|field|similarityProviders
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|SimilarityProvider
argument_list|>
name|similarityProviders
decl_stmt|;
DECL|field|similarities
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Similarity
argument_list|>
name|similarities
decl_stmt|;
DECL|method|SimilarityService
specifier|public
name|SimilarityService
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
name|this
argument_list|(
name|index
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SimilarityService
annotation|@
name|Inject
specifier|public
name|SimilarityService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|SimilarityProviderFactory
argument_list|>
name|providerFactories
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SimilarityProvider
argument_list|>
name|similarityProviders
init|=
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|providerFactories
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|providersSettings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
literal|"index.similarity"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SimilarityProviderFactory
argument_list|>
name|entry
range|:
name|providerFactories
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|similarityName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SimilarityProviderFactory
name|similarityProviderFactory
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Settings
name|similaritySettings
init|=
name|providersSettings
operator|.
name|get
argument_list|(
name|similarityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|similaritySettings
operator|==
literal|null
condition|)
block|{
name|similaritySettings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|SimilarityProvider
name|similarityProvider
init|=
name|similarityProviderFactory
operator|.
name|create
argument_list|(
name|similarityName
argument_list|,
name|similaritySettings
argument_list|)
decl_stmt|;
name|similarityProviders
operator|.
name|put
argument_list|(
name|similarityName
argument_list|,
name|similarityProvider
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add defaults
if|if
condition|(
operator|!
name|similarityProviders
operator|.
name|containsKey
argument_list|(
literal|"index"
argument_list|)
condition|)
block|{
name|similarityProviders
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
operator|new
name|DefaultSimilarityProvider
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
literal|"index"
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|similarityProviders
operator|.
name|containsKey
argument_list|(
literal|"search"
argument_list|)
condition|)
block|{
name|similarityProviders
operator|.
name|put
argument_list|(
literal|"search"
argument_list|,
operator|new
name|DefaultSimilarityProvider
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
literal|"search"
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|similarityProviders
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|similarityProviders
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Similarity
argument_list|>
name|similarities
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|SimilarityProvider
name|provider
range|:
name|similarityProviders
operator|.
name|values
argument_list|()
control|)
block|{
name|similarities
operator|.
name|put
argument_list|(
name|provider
operator|.
name|name
argument_list|()
argument_list|,
name|provider
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|similarities
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|similarities
argument_list|)
expr_stmt|;
block|}
DECL|method|similarity
specifier|public
name|Similarity
name|similarity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|similarities
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|defaultIndexSimilarity
specifier|public
name|Similarity
name|defaultIndexSimilarity
parameter_list|()
block|{
return|return
name|similarities
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
return|;
block|}
DECL|method|defaultSearchSimilarity
specifier|public
name|Similarity
name|defaultSearchSimilarity
parameter_list|()
block|{
return|return
name|similarities
operator|.
name|get
argument_list|(
literal|"search"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

