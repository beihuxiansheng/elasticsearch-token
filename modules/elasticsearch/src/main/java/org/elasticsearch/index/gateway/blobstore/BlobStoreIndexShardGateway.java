begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.gateway.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|InputStreamIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|ThreadSafeInputStreamIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|TObjectLongHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|TObjectLongIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexShardGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexShardGatewayRecoveryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexShardGatewaySnapshotFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|throttler
operator|.
name|RecoveryThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogStreams
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|BlobStoreIndexShardGateway
specifier|public
specifier|abstract
class|class
name|BlobStoreIndexShardGateway
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|IndexShardGateway
block|{
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|indexShard
specifier|protected
specifier|final
name|InternalIndexShard
name|indexShard
decl_stmt|;
DECL|field|store
specifier|protected
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|recoveryThrottler
specifier|protected
specifier|final
name|RecoveryThrottler
name|recoveryThrottler
decl_stmt|;
DECL|field|chunkSize
specifier|protected
specifier|final
name|ByteSizeValue
name|chunkSize
decl_stmt|;
DECL|field|blobStore
specifier|protected
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
DECL|field|shardPath
specifier|protected
specifier|final
name|BlobPath
name|shardPath
decl_stmt|;
DECL|field|indexContainer
specifier|protected
specifier|final
name|ImmutableBlobContainer
name|indexContainer
decl_stmt|;
DECL|field|translogContainer
specifier|protected
specifier|final
name|AppendableBlobContainer
name|translogContainer
decl_stmt|;
DECL|field|translogBlob
specifier|private
specifier|volatile
name|AppendableBlobContainer
operator|.
name|AppendableBlob
name|translogBlob
decl_stmt|;
DECL|method|BlobStoreIndexShardGateway
specifier|protected
name|BlobStoreIndexShardGateway
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|IndexGateway
name|indexGateway
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|Store
name|store
parameter_list|,
name|RecoveryThrottler
name|recoveryThrottler
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
operator|(
name|InternalIndexShard
operator|)
name|indexShard
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|recoveryThrottler
operator|=
name|recoveryThrottler
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
operator|(
operator|(
name|BlobStoreIndexGateway
operator|)
name|indexGateway
operator|)
operator|.
name|chunkSize
argument_list|()
expr_stmt|;
comment|// can be null -> no chunking
name|this
operator|.
name|blobStore
operator|=
operator|(
operator|(
name|BlobStoreIndexGateway
operator|)
name|indexGateway
operator|)
operator|.
name|blobStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardPath
operator|=
operator|(
operator|(
name|BlobStoreIndexGateway
operator|)
name|indexGateway
operator|)
operator|.
name|indexPath
argument_list|()
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexContainer
operator|=
name|blobStore
operator|.
name|immutableBlobContainer
argument_list|(
name|shardPath
operator|.
name|add
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|translogContainer
operator|=
name|blobStore
operator|.
name|appendableBlobContainer
argument_list|(
name|shardPath
operator|.
name|add
argument_list|(
literal|"translog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|toString
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
argument_list|()
operator|+
literal|"://"
operator|+
name|blobStore
operator|+
literal|"/"
operator|+
name|shardPath
return|;
block|}
DECL|method|requiresSnapshotScheduling
annotation|@
name|Override
specifier|public
name|boolean
name|requiresSnapshotScheduling
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|delete
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
if|if
condition|(
name|translogBlob
operator|!=
literal|null
condition|)
block|{
name|translogBlob
operator|.
name|close
argument_list|()
expr_stmt|;
name|translogBlob
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|delete
condition|)
block|{
name|blobStore
operator|.
name|delete
argument_list|(
name|shardPath
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|snapshot
annotation|@
name|Override
specifier|public
name|SnapshotStatus
name|snapshot
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|IndexShardGatewaySnapshotFailedException
block|{
name|long
name|totalTimeStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|indexDirty
init|=
literal|false
decl_stmt|;
specifier|final
name|SnapshotIndexCommit
name|snapshotIndexCommit
init|=
name|snapshot
operator|.
name|indexCommit
argument_list|()
decl_stmt|;
specifier|final
name|Translog
operator|.
name|Snapshot
name|translogSnapshot
init|=
name|snapshot
operator|.
name|translogSnapshot
argument_list|()
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|indicesBlobs
init|=
literal|null
decl_stmt|;
name|TObjectLongHashMap
argument_list|<
name|String
argument_list|>
name|combinedIndicesBlobs
init|=
literal|null
decl_stmt|;
name|int
name|indexNumberOfFiles
init|=
literal|0
decl_stmt|;
name|long
name|indexTotalFilesSize
init|=
literal|0
decl_stmt|;
name|long
name|indexTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|indexChanged
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|indexDirty
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|indicesBlobs
operator|=
name|indexContainer
operator|.
name|listBlobs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to list indices files from gateway"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|combinedIndicesBlobs
operator|=
name|buildCombinedPartsBlobs
argument_list|(
name|indicesBlobs
argument_list|)
expr_stmt|;
comment|// snapshot into the index
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|snapshotIndexCommit
operator|.
name|getFiles
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fileName
range|:
name|snapshotIndexCommit
operator|.
name|getFiles
argument_list|()
control|)
block|{
comment|// don't copy over the segments file, it will be copied over later on as part of the
comment|// final snapshot phase
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// if the file exists in the gateway, and has the same length, don't copy it over
name|long
name|fileSize
decl_stmt|;
try|try
block|{
name|fileSize
operator|=
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to get length on local store"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|combinedIndicesBlobs
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
operator|&&
name|combinedIndicesBlobs
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|==
name|fileSize
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// we are snapshotting the file
name|indexNumberOfFiles
operator|++
expr_stmt|;
name|indexTotalFilesSize
operator|+=
name|fileSize
expr_stmt|;
if|if
condition|(
name|combinedIndicesBlobs
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
try|try
block|{
name|indexContainer
operator|.
name|deleteBlobsByPrefix
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to delete ["
operator|+
name|fileName
operator|+
literal|"] before snapshotting, ignoring..."
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|snapshotFile
argument_list|(
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|latch
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|failures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to perform snapshot (index files)"
argument_list|,
name|failures
operator|.
name|get
argument_list|(
name|failures
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
throw|;
block|}
name|indexTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
block|}
comment|// handle if snapshot has changed
specifier|final
name|AtomicInteger
name|translogNumberOfOperations
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|long
name|translogTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|newTranslogCreated
argument_list|()
operator|||
name|snapshot
operator|.
name|sameTranslogNewOperations
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|newTranslogCreated
argument_list|()
operator|&&
name|translogBlob
operator|!=
literal|null
condition|)
block|{
name|translogBlob
operator|.
name|close
argument_list|()
expr_stmt|;
name|translogBlob
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|translogBlob
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|translogBlob
operator|=
name|translogContainer
operator|.
name|appendBlob
argument_list|(
literal|"translog-"
operator|+
name|translogSnapshot
operator|.
name|translogId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to create translog"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|failure
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
name|translogBlob
operator|.
name|append
argument_list|(
operator|new
name|AppendableBlobContainer
operator|.
name|AppendBlobListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|withStream
parameter_list|(
name|StreamOutput
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|deltaNumberOfOperations
decl_stmt|;
name|Iterable
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operationsIt
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|newTranslogCreated
argument_list|()
condition|)
block|{
name|deltaNumberOfOperations
operator|=
name|translogSnapshot
operator|.
name|size
argument_list|()
expr_stmt|;
name|operationsIt
operator|=
name|translogSnapshot
expr_stmt|;
block|}
else|else
block|{
name|deltaNumberOfOperations
operator|=
name|translogSnapshot
operator|.
name|size
argument_list|()
operator|-
name|snapshot
operator|.
name|lastTranslogSize
argument_list|()
expr_stmt|;
name|operationsIt
operator|=
name|translogSnapshot
operator|.
name|skipTo
argument_list|(
name|snapshot
operator|.
name|lastTranslogSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|writeInt
argument_list|(
name|deltaNumberOfOperations
argument_list|)
expr_stmt|;
for|for
control|(
name|Translog
operator|.
name|Operation
name|operation
range|:
name|operationsIt
control|)
block|{
name|writeTranslogOperation
argument_list|(
name|os
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
name|translogNumberOfOperations
operator|.
name|set
argument_list|(
name|deltaNumberOfOperations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|failure
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failure
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to snapshot translog"
argument_list|,
name|failure
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
name|translogTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
block|}
comment|// now write the segments file
if|if
condition|(
name|indexDirty
condition|)
block|{
try|try
block|{
name|indexNumberOfFiles
operator|++
expr_stmt|;
if|if
condition|(
name|indicesBlobs
operator|.
name|containsKey
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
condition|)
block|{
name|indexContainer
operator|.
name|deleteBlob
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexTotalFilesSize
operator|+=
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|IndexInput
name|indexInput
init|=
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
operator|.
name|openInput
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|InputStreamIndexInput
name|is
init|=
operator|new
name|InputStreamIndexInput
argument_list|(
name|indexInput
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|indexContainer
operator|.
name|writeBlob
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|,
name|is
argument_list|,
name|is
operator|.
name|actualSizeToRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|indexTime
operator|+=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to finalize index snapshot into ["
operator|+
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// delete the old translog
if|if
condition|(
name|snapshot
operator|.
name|newTranslogCreated
argument_list|()
condition|)
block|{
try|try
block|{
name|translogContainer
operator|.
name|deleteBlob
argument_list|(
literal|"translog-"
operator|+
name|snapshot
operator|.
name|lastTranslogId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// delete old index files
if|if
condition|(
name|indexDirty
condition|)
block|{
for|for
control|(
name|TObjectLongIterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|combinedIndicesBlobs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|advance
argument_list|()
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fileName
range|:
name|snapshotIndexCommit
operator|.
name|getFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
try|try
block|{
name|indexContainer
operator|.
name|deleteBlobsByPrefix
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to delete unused index files, will retry later..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|new
name|SnapshotStatus
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|totalTimeStart
argument_list|)
argument_list|,
operator|new
name|SnapshotStatus
operator|.
name|Index
argument_list|(
name|indexNumberOfFiles
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|indexTotalFilesSize
argument_list|)
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|indexTime
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SnapshotStatus
operator|.
name|Translog
argument_list|(
name|translogNumberOfOperations
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|translogTime
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|recover
annotation|@
name|Override
specifier|public
name|RecoveryStatus
name|recover
parameter_list|()
throws|throws
name|IndexShardGatewayRecoveryException
block|{
name|RecoveryStatus
operator|.
name|Index
name|recoveryStatusIndex
init|=
name|recoverIndex
argument_list|()
decl_stmt|;
name|RecoveryStatus
operator|.
name|Translog
name|recoveryStatusTranslog
init|=
name|recoverTranslog
argument_list|()
decl_stmt|;
return|return
operator|new
name|RecoveryStatus
argument_list|(
name|recoveryStatusIndex
argument_list|,
name|recoveryStatusTranslog
argument_list|)
return|;
block|}
DECL|method|recoverTranslog
specifier|private
name|RecoveryStatus
operator|.
name|Translog
name|recoverTranslog
parameter_list|()
throws|throws
name|IndexShardGatewayRecoveryException
block|{
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
decl_stmt|;
try|try
block|{
name|blobs
operator|=
name|translogContainer
operator|.
name|listBlobsByPrefix
argument_list|(
literal|"translog-"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to list content of gateway"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|translogIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|BlobMetaData
name|blob
range|:
name|blobs
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|translogId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|blob
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
name|blob
operator|.
name|name
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|translogIds
operator|.
name|add
argument_list|(
name|translogId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|translogIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no recovery file found, start the shard and bail
name|indexShard
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
operator|new
name|RecoveryStatus
operator|.
name|Translog
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|0
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|translogIds
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Long
name|o1
parameter_list|,
name|Long
name|o2
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|o2
operator|-
name|o1
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// try and recover from the latest translog id down to the first
name|Exception
name|lastException
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Long
name|translogId
range|:
name|translogIds
control|)
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|byte
index|[]
name|translogData
init|=
name|translogContainer
operator|.
name|readBlobFully
argument_list|(
literal|"translog-"
operator|+
name|translogId
argument_list|)
decl_stmt|;
name|BytesStreamInput
name|si
init|=
operator|new
name|BytesStreamInput
argument_list|(
name|translogData
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// we recover them in parts, each part container the number of operations, and then the list of them
name|int
name|numberOfOperations
init|=
name|si
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfOperations
condition|;
name|i
operator|++
control|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|readTranslogOperation
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|si
operator|.
name|position
argument_list|()
operator|==
name|translogData
operator|.
name|length
condition|)
block|{
comment|// we have reached the end of the stream, bail
break|break;
block|}
block|}
name|indexShard
operator|.
name|performRecovery
argument_list|(
name|operations
argument_list|)
expr_stmt|;
comment|// clean all the other translogs
for|for
control|(
name|Long
name|translogIdToDelete
range|:
name|translogIds
control|)
block|{
if|if
condition|(
operator|!
name|translogId
operator|.
name|equals
argument_list|(
name|translogIdToDelete
argument_list|)
condition|)
block|{
try|try
block|{
name|translogContainer
operator|.
name|deleteBlob
argument_list|(
literal|"translog-"
operator|+
name|translogIdToDelete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|// only if we can append to an existing translog we should use the current id and continue to append to it
name|long
name|lastTranslogId
init|=
name|indexShard
operator|.
name|translog
argument_list|()
operator|.
name|currentId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|translogContainer
operator|.
name|canAppendToExistingBlob
argument_list|()
condition|)
block|{
name|lastTranslogId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
operator|new
name|RecoveryStatus
operator|.
name|Translog
argument_list|(
name|lastTranslogId
argument_list|,
name|operations
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|translogData
operator|.
name|length
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Failed to read translog, will try the next one"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to recovery translog"
argument_list|,
name|lastException
argument_list|)
throw|;
block|}
DECL|method|recoverIndex
specifier|private
name|RecoveryStatus
operator|.
name|Index
name|recoverIndex
parameter_list|()
throws|throws
name|IndexShardGatewayRecoveryException
block|{
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
decl_stmt|;
try|try
block|{
name|blobs
operator|=
name|indexContainer
operator|.
name|listBlobs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to list content of gateway"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|TObjectLongHashMap
argument_list|<
name|String
argument_list|>
name|combinedBlobs
init|=
name|buildCombinedPartsBlobs
argument_list|(
name|blobs
argument_list|)
decl_stmt|;
comment|// filter out only the files that we need to recover, and reuse ones that exists in the store
name|List
argument_list|<
name|String
argument_list|>
name|filesToRecover
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TObjectLongIterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|combinedBlobs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|advance
argument_list|()
expr_stmt|;
comment|// if the store has the file, and it has the same length, don't recover it
try|try
block|{
if|if
condition|(
name|store
operator|.
name|directory
argument_list|()
operator|.
name|fileExists
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
operator|&&
name|store
operator|.
name|directory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
operator|==
name|it
operator|.
name|value
argument_list|()
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"not recovering [{}], exists in local store and has same size [{}]"
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|filesToRecover
operator|.
name|add
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|filesToRecover
operator|.
name|add
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to check local store for existence of [{}]"
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
specifier|final
name|AtomicLong
name|throttlingWaitTime
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|filesToRecover
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fileToRecover
range|:
name|filesToRecover
control|)
block|{
name|totalSize
operator|+=
name|combinedBlobs
operator|.
name|get
argument_list|(
name|fileToRecover
argument_list|)
expr_stmt|;
if|if
condition|(
name|recoveryThrottler
operator|.
name|tryStream
argument_list|(
name|shardId
argument_list|,
name|fileToRecover
argument_list|)
condition|)
block|{
comment|// we managed to get a recovery going
name|recoverFile
argument_list|(
name|fileToRecover
argument_list|,
name|blobs
argument_list|,
name|latch
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// lets reschedule to do it next time
name|threadPool
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|throttlingWaitTime
operator|.
name|addAndGet
argument_list|(
name|recoveryThrottler
operator|.
name|throttleInterval
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|recoveryThrottler
operator|.
name|tryStream
argument_list|(
name|shardId
argument_list|,
name|fileToRecover
argument_list|)
condition|)
block|{
comment|// we managed to get a recovery going
name|recoverFile
argument_list|(
name|fileToRecover
argument_list|,
name|blobs
argument_list|,
name|latch
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|threadPool
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|recoveryThrottler
operator|.
name|throttleInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|recoveryThrottler
operator|.
name|throttleInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Interrupted while recovering index"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|failures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to recovery index"
argument_list|,
name|failures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
comment|// read the gateway data persisted
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
if|if
condition|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
condition|)
block|{
name|version
operator|=
name|IndexReader
operator|.
name|getCurrentVersion
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to fetch index version after copying it over"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|/// now, go over and clean files that are in the store, but were not in the gateway
try|try
block|{
for|for
control|(
name|String
name|storeFile
range|:
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|blobs
operator|.
name|containsKey
argument_list|(
name|storeFile
argument_list|)
condition|)
block|{
try|try
block|{
name|store
operator|.
name|directory
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|storeFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
operator|new
name|RecoveryStatus
operator|.
name|Index
argument_list|(
name|version
argument_list|,
name|filesToRecover
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|totalSize
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|throttlingWaitTime
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|recoverFile
specifier|private
name|void
name|recoverFile
parameter_list|(
specifier|final
name|String
name|fileToRecover
parameter_list|,
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|,
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
parameter_list|)
block|{
specifier|final
name|IndexOutput
name|indexOutput
decl_stmt|;
try|try
block|{
name|indexOutput
operator|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|fileToRecover
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|recoveryThrottler
operator|.
name|streamDone
argument_list|(
name|shardId
argument_list|,
name|fileToRecover
argument_list|)
expr_stmt|;
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|AtomicInteger
name|partIndex
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|indexContainer
operator|.
name|readBlob
argument_list|(
name|fileToRecover
argument_list|,
operator|new
name|BlobContainer
operator|.
name|ReadBlobListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onPartial
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|indexOutput
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onCompleted
parameter_list|()
block|{
name|int
name|part
init|=
name|partIndex
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|partName
init|=
name|fileToRecover
operator|+
literal|".part"
operator|+
name|part
decl_stmt|;
if|if
condition|(
name|blobs
operator|.
name|containsKey
argument_list|(
name|partName
argument_list|)
condition|)
block|{
comment|// continue with the new part
name|indexContainer
operator|.
name|readBlob
argument_list|(
name|partName
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we are done...
try|try
block|{
name|indexOutput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|recoveryThrottler
operator|.
name|streamDone
argument_list|(
name|shardId
argument_list|,
name|fileToRecover
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|recoveryThrottler
operator|.
name|streamDone
argument_list|(
name|shardId
argument_list|,
name|fileToRecover
argument_list|)
expr_stmt|;
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|snapshotFile
specifier|private
name|void
name|snapshotFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|,
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|chunkBytes
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|chunkSize
operator|!=
literal|null
condition|)
block|{
name|chunkBytes
operator|=
name|chunkSize
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
name|long
name|totalLength
init|=
name|dir
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|long
name|numberOfChunks
init|=
name|totalLength
operator|/
name|chunkBytes
decl_stmt|;
if|if
condition|(
name|totalLength
operator|%
name|chunkBytes
operator|>
literal|0
condition|)
block|{
name|numberOfChunks
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|numberOfChunks
operator|==
literal|0
condition|)
block|{
name|numberOfChunks
operator|++
expr_stmt|;
block|}
specifier|final
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|(
name|numberOfChunks
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfChunks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|chunkNumber
init|=
name|i
decl_stmt|;
name|IndexInput
name|indexInput
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexInput
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
name|chunkNumber
operator|*
name|chunkBytes
argument_list|)
expr_stmt|;
name|InputStreamIndexInput
name|is
init|=
operator|new
name|ThreadSafeInputStreamIndexInput
argument_list|(
name|indexInput
argument_list|,
name|chunkBytes
argument_list|)
decl_stmt|;
name|String
name|blobName
init|=
name|fileName
decl_stmt|;
if|if
condition|(
name|chunkNumber
operator|>
literal|0
condition|)
block|{
name|blobName
operator|+=
literal|".part"
operator|+
name|chunkNumber
expr_stmt|;
block|}
specifier|final
name|IndexInput
name|fIndexInput
init|=
name|indexInput
decl_stmt|;
name|indexContainer
operator|.
name|writeBlob
argument_list|(
name|blobName
argument_list|,
name|is
argument_list|,
name|is
operator|.
name|actualSizeToRead
argument_list|()
argument_list|,
operator|new
name|ImmutableBlobContainer
operator|.
name|WriterListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|()
block|{
try|try
block|{
name|fIndexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|indexInput
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|buildCombinedPartsBlobs
specifier|private
name|TObjectLongHashMap
argument_list|<
name|String
argument_list|>
name|buildCombinedPartsBlobs
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|)
block|{
name|TObjectLongHashMap
argument_list|<
name|String
argument_list|>
name|combinedBlobs
init|=
operator|new
name|TObjectLongHashMap
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlobMetaData
name|blob
range|:
name|blobs
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|cleanName
decl_stmt|;
name|int
name|partIndex
init|=
name|blob
operator|.
name|name
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|".part"
argument_list|)
decl_stmt|;
if|if
condition|(
name|partIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|cleanName
operator|=
name|blob
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cleanName
operator|=
name|blob
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|partIndex
argument_list|)
expr_stmt|;
block|}
name|combinedBlobs
operator|.
name|adjustOrPutValue
argument_list|(
name|cleanName
argument_list|,
name|blob
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|blob
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|combinedBlobs
return|;
block|}
block|}
end_class

end_unit

