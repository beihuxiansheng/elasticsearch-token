begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store.memory
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SingleInstanceLockFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * A memory based directory that uses {@link java.nio.ByteBuffer} in order to store the directory content.  *  *<p>The benefit of using {@link java.nio.ByteBuffer} is the fact that it can be stored in "native" memory  * outside of the JVM heap, thus not incurring the GC overhead of large in memory index.  *  *<p>Each "file" is segmented into one or more byte buffers.  *  *<p>Since its good practice to cache byte buffers, it also provide a simple mechanism to define a cache  * of byte buffers that are reused when possible.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ByteBufferDirectory
specifier|public
class|class
name|ByteBufferDirectory
extends|extends
name|Directory
block|{
DECL|field|files
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBufferFile
argument_list|>
name|files
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ByteBufferFile
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Queue
argument_list|<
name|ByteBuffer
argument_list|>
name|cache
decl_stmt|;
DECL|field|bufferSizeInBytes
specifier|private
specifier|final
name|int
name|bufferSizeInBytes
decl_stmt|;
DECL|field|cacheSizeInBytes
specifier|private
specifier|final
name|int
name|cacheSizeInBytes
decl_stmt|;
DECL|field|disableCache
specifier|private
specifier|final
name|boolean
name|disableCache
decl_stmt|;
DECL|field|direct
specifier|private
specifier|final
name|boolean
name|direct
decl_stmt|;
DECL|field|useCleanHack
specifier|private
name|boolean
name|useCleanHack
init|=
literal|true
decl_stmt|;
DECL|field|CLEAN_SUPPORTED
specifier|public
specifier|static
specifier|final
name|boolean
name|CLEAN_SUPPORTED
decl_stmt|;
DECL|field|directBufferCleaner
specifier|private
specifier|static
specifier|final
name|Method
name|directBufferCleaner
decl_stmt|;
DECL|field|directBufferCleanerClean
specifier|private
specifier|static
specifier|final
name|Method
name|directBufferCleanerClean
decl_stmt|;
static|static
block|{
name|Method
name|directBufferCleanerX
init|=
literal|null
decl_stmt|;
name|Method
name|directBufferCleanerCleanX
init|=
literal|null
decl_stmt|;
name|boolean
name|v
decl_stmt|;
try|try
block|{
name|directBufferCleanerX
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.nio.DirectByteBuffer"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"cleaner"
argument_list|)
expr_stmt|;
name|directBufferCleanerX
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|directBufferCleanerCleanX
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Cleaner"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"clean"
argument_list|)
expr_stmt|;
name|directBufferCleanerCleanX
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|v
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|v
operator|=
literal|false
expr_stmt|;
block|}
name|CLEAN_SUPPORTED
operator|=
name|v
expr_stmt|;
name|directBufferCleaner
operator|=
name|directBufferCleanerX
expr_stmt|;
name|directBufferCleanerClean
operator|=
name|directBufferCleanerCleanX
expr_stmt|;
block|}
comment|/**      * Constructs a new byte buffer directory.      *      * @param bufferSizeInBytes The size of a byte buffer      * @param cacheSizeInBytes  The size of the cache, set to<code>0</code> to disable caching      * @param direct            Should the byte buffers be stored outside the heap (<code>true</code) or in head (<code>false</code>)      * @param warmCache         Should the cache be warmed      */
DECL|method|ByteBufferDirectory
specifier|public
name|ByteBufferDirectory
parameter_list|(
name|int
name|bufferSizeInBytes
parameter_list|,
name|int
name|cacheSizeInBytes
parameter_list|,
name|boolean
name|direct
parameter_list|,
name|boolean
name|warmCache
parameter_list|)
block|{
name|disableCache
operator|=
name|cacheSizeInBytes
operator|==
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|disableCache
operator|&&
name|cacheSizeInBytes
operator|<
name|bufferSizeInBytes
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cache size ["
operator|+
name|cacheSizeInBytes
operator|+
literal|"] is smaller than buffer size ["
operator|+
name|bufferSizeInBytes
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|bufferSizeInBytes
operator|=
name|bufferSizeInBytes
expr_stmt|;
name|int
name|numberOfCacheEntries
init|=
name|cacheSizeInBytes
operator|/
name|bufferSizeInBytes
decl_stmt|;
name|this
operator|.
name|cache
operator|=
name|disableCache
condition|?
literal|null
else|:
operator|new
name|ArrayBlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|numberOfCacheEntries
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheSizeInBytes
operator|=
name|disableCache
condition|?
literal|0
else|:
name|numberOfCacheEntries
operator|*
name|bufferSizeInBytes
expr_stmt|;
name|this
operator|.
name|direct
operator|=
name|direct
expr_stmt|;
name|setLockFactory
argument_list|(
operator|new
name|SingleInstanceLockFactory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|disableCache
operator|&&
name|warmCache
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfCacheEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|add
argument_list|(
name|createBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setUseClean
specifier|public
name|void
name|setUseClean
parameter_list|(
specifier|final
name|boolean
name|useCleanHack
parameter_list|)
block|{
if|if
condition|(
name|useCleanHack
operator|&&
operator|!
name|CLEAN_SUPPORTED
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Clean hack not supported on this platform!"
argument_list|)
throw|;
name|this
operator|.
name|useCleanHack
operator|=
name|useCleanHack
expr_stmt|;
block|}
DECL|method|getUseClean
specifier|public
name|boolean
name|getUseClean
parameter_list|()
block|{
return|return
name|useCleanHack
return|;
block|}
DECL|method|cacheSizeInBytes
specifier|public
name|int
name|cacheSizeInBytes
parameter_list|()
block|{
return|return
name|this
operator|.
name|cacheSizeInBytes
return|;
block|}
DECL|method|bufferSizeInBytes
specifier|public
name|int
name|bufferSizeInBytes
parameter_list|()
block|{
return|return
name|bufferSizeInBytes
return|;
block|}
DECL|method|isDirect
specifier|public
name|boolean
name|isDirect
parameter_list|()
block|{
return|return
name|direct
return|;
block|}
DECL|method|isCacheEnabled
specifier|public
name|boolean
name|isCacheEnabled
parameter_list|()
block|{
return|return
operator|!
name|disableCache
return|;
block|}
DECL|method|listAll
annotation|@
name|Override
specifier|public
name|String
index|[]
name|listAll
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|files
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|fileExists
annotation|@
name|Override
specifier|public
name|boolean
name|fileExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|files
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|fileModified
annotation|@
name|Override
specifier|public
name|long
name|fileModified
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBufferFile
name|file
init|=
name|files
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
return|return
name|file
operator|.
name|lastModified
argument_list|()
return|;
block|}
DECL|method|touchFile
annotation|@
name|Override
specifier|public
name|void
name|touchFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBufferFile
name|file
init|=
name|files
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
name|long
name|ts2
decl_stmt|,
name|ts1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// In 3.0 we will change this to throw
comment|// InterruptedException instead
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|ts2
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|ts1
operator|==
name|ts2
condition|)
do|;
name|file
operator|.
name|lastModified
argument_list|(
name|ts2
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteFile
annotation|@
name|Override
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBufferFile
name|file
init|=
name|files
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
name|file
operator|.
name|clean
argument_list|()
expr_stmt|;
block|}
DECL|method|fileLength
annotation|@
name|Override
specifier|public
name|long
name|fileLength
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBufferFile
name|file
init|=
name|files
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
return|return
name|file
operator|.
name|length
argument_list|()
return|;
block|}
DECL|method|createOutput
annotation|@
name|Override
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBufferFile
name|file
init|=
operator|new
name|ByteBufferFile
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|ByteBufferFile
name|existing
init|=
name|files
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|existing
operator|.
name|clean
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ByteBufferIndexOutput
argument_list|(
name|this
argument_list|,
name|file
argument_list|)
return|;
block|}
DECL|method|openInput
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBufferFile
name|file
init|=
name|files
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
return|return
operator|new
name|ByteBufferIndexInput
argument_list|(
name|this
argument_list|,
name|file
argument_list|)
return|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|files
init|=
name|listAll
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|disableCache
condition|)
block|{
name|ByteBuffer
name|buffer
init|=
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
while|while
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|closeBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|cache
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|releaseBuffer
name|void
name|releaseBuffer
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
block|{
if|if
condition|(
name|disableCache
condition|)
block|{
name|closeBuffer
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|success
init|=
name|cache
operator|.
name|offer
argument_list|(
name|byteBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|closeBuffer
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|acquireBuffer
name|ByteBuffer
name|acquireBuffer
parameter_list|()
block|{
if|if
condition|(
name|disableCache
condition|)
block|{
return|return
name|createBuffer
argument_list|()
return|;
block|}
name|ByteBuffer
name|byteBuffer
init|=
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteBuffer
operator|==
literal|null
condition|)
block|{
comment|// everything is taken, return a new one
return|return
name|createBuffer
argument_list|()
return|;
block|}
name|byteBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|byteBuffer
return|;
block|}
DECL|method|createBuffer
specifier|private
name|ByteBuffer
name|createBuffer
parameter_list|()
block|{
if|if
condition|(
name|isDirect
argument_list|()
condition|)
block|{
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|bufferSizeInBytes
argument_list|()
argument_list|)
return|;
block|}
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufferSizeInBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|closeBuffer
specifier|private
name|void
name|closeBuffer
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
block|{
if|if
condition|(
name|useCleanHack
operator|&&
name|isDirect
argument_list|()
condition|)
block|{
try|try
block|{
name|Object
name|cleaner
init|=
name|directBufferCleaner
operator|.
name|invoke
argument_list|(
name|byteBuffer
argument_list|)
decl_stmt|;
name|directBufferCleanerClean
operator|.
name|invoke
argument_list|(
name|cleaner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// silently ignore exception
block|}
block|}
block|}
block|}
end_class

end_unit

