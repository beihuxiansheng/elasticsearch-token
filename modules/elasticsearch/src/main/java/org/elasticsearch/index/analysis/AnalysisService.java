begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|CloseableComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|AnalysisService
specifier|public
class|class
name|AnalysisService
extends|extends
name|AbstractIndexComponent
implements|implements
name|CloseableComponent
block|{
DECL|field|analyzers
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|analyzers
decl_stmt|;
DECL|field|tokenizers
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|TokenizerFactory
argument_list|>
name|tokenizers
decl_stmt|;
DECL|field|tokenFilters
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|tokenFilters
decl_stmt|;
DECL|method|AnalysisService
specifier|public
name|AnalysisService
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
name|this
argument_list|(
name|index
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AnalysisService
annotation|@
name|Inject
specifier|public
name|AnalysisService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProviderFactory
argument_list|>
name|analyzerFactoryFactories
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactoryFactory
argument_list|>
name|tokenizerFactoryFactories
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactoryFactory
argument_list|>
name|tokenFilterFactoryFactories
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|>
name|analyzerProviders
init|=
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|analyzerFactoryFactories
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|analyzersSettings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.analyzer"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AnalyzerProviderFactory
argument_list|>
name|entry
range|:
name|analyzerFactoryFactories
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|analyzerName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|AnalyzerProviderFactory
name|analyzerFactoryFactory
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Settings
name|analyzerSettings
init|=
name|analyzersSettings
operator|.
name|get
argument_list|(
name|analyzerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzerSettings
operator|==
literal|null
condition|)
block|{
name|analyzerSettings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|AnalyzerProvider
name|analyzerFactory
init|=
name|analyzerFactoryFactory
operator|.
name|create
argument_list|(
name|analyzerName
argument_list|,
name|analyzerSettings
argument_list|)
decl_stmt|;
name|analyzerProviders
operator|.
name|put
argument_list|(
name|analyzerName
argument_list|,
name|analyzerFactory
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|analyzerProviders
operator|.
name|containsKey
argument_list|(
literal|"default"
argument_list|)
condition|)
block|{
name|analyzerProviders
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
operator|new
name|StandardAnalyzerProvider
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
literal|"default"
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|analyzerProviders
operator|.
name|containsKey
argument_list|(
literal|"default_index"
argument_list|)
condition|)
block|{
name|analyzerProviders
operator|.
name|put
argument_list|(
literal|"default_index"
argument_list|,
name|analyzerProviders
operator|.
name|get
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|analyzerProviders
operator|.
name|containsKey
argument_list|(
literal|"default_search"
argument_list|)
condition|)
block|{
name|analyzerProviders
operator|.
name|put
argument_list|(
literal|"default_search"
argument_list|,
name|analyzerProviders
operator|.
name|get
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|analyzers
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|AnalyzerProvider
name|analyzerFactory
range|:
name|analyzerProviders
operator|.
name|values
argument_list|()
control|)
block|{
name|analyzers
operator|.
name|put
argument_list|(
name|analyzerFactory
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|NamedAnalyzer
argument_list|(
name|analyzerFactory
operator|.
name|name
argument_list|()
argument_list|,
name|analyzerFactory
operator|.
name|scope
argument_list|()
argument_list|,
name|analyzerFactory
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|analyzers
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|analyzers
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactory
argument_list|>
name|tokenizers
init|=
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenizerFactoryFactories
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenizersSettings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.tokenizer"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TokenizerFactoryFactory
argument_list|>
name|entry
range|:
name|tokenizerFactoryFactories
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tokenizerName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TokenizerFactoryFactory
name|tokenizerFactoryFactory
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Settings
name|tokenizerSettings
init|=
name|tokenizersSettings
operator|.
name|get
argument_list|(
name|tokenizerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerSettings
operator|==
literal|null
condition|)
block|{
name|tokenizerSettings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|TokenizerFactory
name|tokenizerFactory
init|=
name|tokenizerFactoryFactory
operator|.
name|create
argument_list|(
name|tokenizerName
argument_list|,
name|tokenizerSettings
argument_list|)
decl_stmt|;
name|tokenizers
operator|.
name|put
argument_list|(
name|tokenizerName
argument_list|,
name|tokenizerFactory
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|tokenizers
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|tokenizers
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|tokenFilters
init|=
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenFilterFactoryFactories
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenFiltersSettings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.filter"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TokenFilterFactoryFactory
argument_list|>
name|entry
range|:
name|tokenFilterFactoryFactories
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tokenFilterName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TokenFilterFactoryFactory
name|tokenFilterFactoryFactory
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Settings
name|tokenFilterSettings
init|=
name|tokenFiltersSettings
operator|.
name|get
argument_list|(
name|tokenFilterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenFilterSettings
operator|==
literal|null
condition|)
block|{
name|tokenFilterSettings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|TokenFilterFactory
name|tokenFilterFactory
init|=
name|tokenFilterFactoryFactory
operator|.
name|create
argument_list|(
name|tokenFilterName
argument_list|,
name|tokenFilterSettings
argument_list|)
decl_stmt|;
name|tokenFilters
operator|.
name|put
argument_list|(
name|tokenFilterName
argument_list|,
name|tokenFilterFactory
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|tokenFilters
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|tokenFilters
argument_list|)
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|NamedAnalyzer
name|analyzer
range|:
name|analyzers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|analyzer
operator|.
name|scope
argument_list|()
operator|==
name|AnalyzerScope
operator|.
name|INDEX
condition|)
block|{
name|analyzer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|analyzer
specifier|public
name|NamedAnalyzer
name|analyzer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|analyzers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|defaultAnalyzer
specifier|public
name|NamedAnalyzer
name|defaultAnalyzer
parameter_list|()
block|{
return|return
name|analyzers
operator|.
name|get
argument_list|(
literal|"default"
argument_list|)
return|;
block|}
DECL|method|defaultIndexAnalyzer
specifier|public
name|NamedAnalyzer
name|defaultIndexAnalyzer
parameter_list|()
block|{
return|return
name|defaultAnalyzer
argument_list|()
return|;
block|}
DECL|method|defaultSearchAnalyzer
specifier|public
name|NamedAnalyzer
name|defaultSearchAnalyzer
parameter_list|()
block|{
return|return
name|defaultAnalyzer
argument_list|()
return|;
block|}
DECL|method|tokenizer
specifier|public
name|TokenizerFactory
name|tokenizer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenizers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|tokenFilter
specifier|public
name|TokenFilterFactory
name|tokenFilter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenFilters
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

