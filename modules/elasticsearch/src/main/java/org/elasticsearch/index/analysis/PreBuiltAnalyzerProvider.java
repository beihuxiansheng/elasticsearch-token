begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|PreBuiltAnalyzerProvider
specifier|public
class|class
name|PreBuiltAnalyzerProvider
parameter_list|<
name|T
extends|extends
name|Analyzer
parameter_list|>
implements|implements
name|AnalyzerProvider
argument_list|<
name|T
argument_list|>
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|scope
specifier|private
specifier|final
name|AnalyzerScope
name|scope
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|T
name|analyzer
decl_stmt|;
DECL|method|PreBuiltAnalyzerProvider
specifier|public
name|PreBuiltAnalyzerProvider
parameter_list|(
name|String
name|name
parameter_list|,
name|AnalyzerScope
name|scope
parameter_list|,
name|T
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
block|}
DECL|method|name
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|scope
annotation|@
name|Override
specifier|public
name|AnalyzerScope
name|scope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
DECL|method|get
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
block|}
end_class

end_unit

