begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|GetDocSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|field
operator|.
name|data
operator|.
name|FieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|xcontent
operator|.
name|geo
operator|.
name|GeoPointFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|xcontent
operator|.
name|geo
operator|.
name|GeoPointFieldDataType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|GeoBoundingBoxFilter
specifier|public
class|class
name|GeoBoundingBoxFilter
extends|extends
name|Filter
block|{
DECL|field|topLeft
specifier|private
specifier|final
name|Point
name|topLeft
decl_stmt|;
DECL|field|bottomRight
specifier|private
specifier|final
name|Point
name|bottomRight
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|fieldDataCache
specifier|private
specifier|final
name|FieldDataCache
name|fieldDataCache
decl_stmt|;
DECL|method|GeoBoundingBoxFilter
specifier|public
name|GeoBoundingBoxFilter
parameter_list|(
name|Point
name|topLeft
parameter_list|,
name|Point
name|bottomRight
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|FieldDataCache
name|fieldDataCache
parameter_list|)
block|{
name|this
operator|.
name|topLeft
operator|=
name|topLeft
expr_stmt|;
name|this
operator|.
name|bottomRight
operator|=
name|bottomRight
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|fieldDataCache
operator|=
name|fieldDataCache
expr_stmt|;
block|}
DECL|method|topLeft
specifier|public
name|Point
name|topLeft
parameter_list|()
block|{
return|return
name|topLeft
return|;
block|}
DECL|method|bottomRight
specifier|public
name|Point
name|bottomRight
parameter_list|()
block|{
return|return
name|bottomRight
return|;
block|}
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|getDocIdSet
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|GeoPointFieldData
name|fieldData
init|=
operator|(
name|GeoPointFieldData
operator|)
name|fieldDataCache
operator|.
name|cache
argument_list|(
name|GeoPointFieldDataType
operator|.
name|TYPE
argument_list|,
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
comment|//checks to see if bounding box crosses 180 degrees
if|if
condition|(
name|topLeft
operator|.
name|lon
operator|>
name|bottomRight
operator|.
name|lon
condition|)
block|{
return|return
operator|new
name|GetDocSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
comment|// not cacheable for several reasons:
comment|// 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset
comment|// 2. Its already fast without in mem bitset, since it works with field data
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fieldData
operator|.
name|hasValue
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fieldData
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|double
index|[]
name|lats
init|=
name|fieldData
operator|.
name|latValues
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|double
index|[]
name|lons
init|=
name|fieldData
operator|.
name|lonValues
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|lat
init|=
name|lats
index|[
name|i
index|]
decl_stmt|;
name|double
name|lon
init|=
name|lons
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|topLeft
operator|.
name|lon
operator|<=
name|lon
operator|&&
literal|180
operator|>=
name|lon
operator|)
operator|||
operator|(
operator|-
literal|180
operator|<=
name|lon
operator|&&
name|bottomRight
operator|.
name|lon
operator|>=
name|lon
operator|)
operator|)
operator|&&
operator|(
name|topLeft
operator|.
name|lat
operator|>=
name|lat
operator|&&
name|bottomRight
operator|.
name|lat
operator|<=
name|lat
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
name|double
name|lat
init|=
name|fieldData
operator|.
name|latValue
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|fieldData
operator|.
name|lonValue
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|topLeft
operator|.
name|lon
operator|<=
name|lon
operator|&&
literal|180
operator|>=
name|lon
operator|)
operator|||
operator|(
operator|-
literal|180
operator|<=
name|lon
operator|&&
name|bottomRight
operator|.
name|lon
operator|>=
name|lon
operator|)
operator|)
operator|&&
operator|(
name|topLeft
operator|.
name|lat
operator|>=
name|lat
operator|&&
name|bottomRight
operator|.
name|lat
operator|<=
name|lat
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|GetDocSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
comment|// not cacheable for several reasons:
comment|// 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset
comment|// 2. Its already fast without in mem bitset, since it works with field data
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fieldData
operator|.
name|hasValue
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fieldData
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|double
index|[]
name|lats
init|=
name|fieldData
operator|.
name|latValues
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|double
index|[]
name|lons
init|=
name|fieldData
operator|.
name|lonValues
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|topLeft
operator|.
name|lon
operator|<=
name|lons
index|[
name|i
index|]
operator|&&
name|bottomRight
operator|.
name|lon
operator|>=
name|lons
index|[
name|i
index|]
operator|&&
name|topLeft
operator|.
name|lat
operator|>=
name|lats
index|[
name|i
index|]
operator|&&
name|bottomRight
operator|.
name|lat
operator|<=
name|lats
index|[
name|i
index|]
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
name|double
name|lat
init|=
name|fieldData
operator|.
name|latValue
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|fieldData
operator|.
name|lonValue
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|topLeft
operator|.
name|lon
operator|<=
name|lon
operator|&&
name|bottomRight
operator|.
name|lon
operator|>=
name|lon
operator|&&
name|topLeft
operator|.
name|lat
operator|>=
name|lat
operator|&&
name|bottomRight
operator|.
name|lat
operator|<=
name|lat
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
block|}
DECL|class|Point
specifier|public
specifier|static
class|class
name|Point
block|{
DECL|field|lat
specifier|public
name|double
name|lat
decl_stmt|;
DECL|field|lon
specifier|public
name|double
name|lon
decl_stmt|;
block|}
block|}
end_class

end_unit

