begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NativeFSLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NoLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SimpleFSLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
operator|.
name|ByteBufferDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|memory
operator|.
name|ByteBufferCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|SwitchDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|IndexStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|support
operator|.
name|AbstractStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|FsStore
specifier|public
specifier|abstract
class|class
name|FsStore
extends|extends
name|AbstractStore
block|{
DECL|field|DEFAULT_SUGGEST_USE_COMPOUND_FILE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SUGGEST_USE_COMPOUND_FILE
init|=
literal|false
decl_stmt|;
DECL|method|FsStore
specifier|public
name|FsStore
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|IndexStore
name|indexStore
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|indexStore
argument_list|)
expr_stmt|;
block|}
DECL|method|fullDelete
annotation|@
name|Override
specifier|public
name|void
name|fullDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystemUtils
operator|.
name|deleteRecursively
argument_list|(
name|fsDirectory
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// if we are the last ones, delete also the actual index
name|String
index|[]
name|list
init|=
name|fsDirectory
argument_list|()
operator|.
name|getDirectory
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|FileSystemUtils
operator|.
name|deleteRecursively
argument_list|(
name|fsDirectory
argument_list|()
operator|.
name|getDirectory
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doRenameFile
annotation|@
name|Override
specifier|protected
name|void
name|doRenameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|directory
init|=
name|fsDirectory
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|File
name|old
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|from
argument_list|)
decl_stmt|;
name|File
name|nu
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|nu
operator|.
name|exists
argument_list|()
condition|)
if|if
condition|(
operator|!
name|nu
operator|.
name|delete
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot delete "
operator|+
name|nu
argument_list|)
throw|;
if|if
condition|(
operator|!
name|old
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Can't rename from ["
operator|+
name|from
operator|+
literal|"] to ["
operator|+
name|to
operator|+
literal|"], from does not exists"
argument_list|)
throw|;
block|}
name|boolean
name|renamed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|old
operator|.
name|renameTo
argument_list|(
name|nu
argument_list|)
condition|)
block|{
name|renamed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|renamed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to rename, from ["
operator|+
name|from
operator|+
literal|"], to ["
operator|+
name|to
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|fsDirectory
specifier|public
specifier|abstract
name|FSDirectory
name|fsDirectory
parameter_list|()
function_decl|;
DECL|method|buildLockFactory
specifier|protected
name|LockFactory
name|buildLockFactory
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fsLock
init|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"fs_lock"
argument_list|,
literal|"native"
argument_list|)
decl_stmt|;
name|LockFactory
name|lockFactory
init|=
operator|new
name|NoLockFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|fsLock
operator|.
name|equals
argument_list|(
literal|"native"
argument_list|)
condition|)
block|{
comment|// TODO LUCENE MONITOR: this is not needed in next Lucene version
name|lockFactory
operator|=
operator|new
name|NativeFSLockFactory
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fsLock
operator|.
name|equals
argument_list|(
literal|"simple"
argument_list|)
condition|)
block|{
name|lockFactory
operator|=
operator|new
name|SimpleFSLockFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|lockFactory
return|;
block|}
DECL|method|buildSwitchDirectoryIfNeeded
specifier|protected
name|Tuple
argument_list|<
name|SwitchDirectory
argument_list|,
name|Boolean
argument_list|>
name|buildSwitchDirectoryIfNeeded
parameter_list|(
name|Directory
name|fsDirectory
parameter_list|,
name|ByteBufferCache
name|byteBufferCache
parameter_list|)
block|{
name|boolean
name|cache
init|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"memory.enabled"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cache
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Directory
name|memDir
init|=
operator|new
name|ByteBufferDirectory
argument_list|(
name|byteBufferCache
argument_list|)
decl_stmt|;
comment|// see http://lucene.apache.org/java/3_0_1/fileformats.html
name|String
index|[]
name|primaryExtensions
init|=
name|componentSettings
operator|.
name|getAsArray
argument_list|(
literal|"memory.extensions"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"del"
block|,
literal|"gen"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryExtensions
operator|==
literal|null
operator|||
name|primaryExtensions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Boolean
name|forceUseCompound
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|extension
range|:
name|primaryExtensions
control|)
block|{
if|if
condition|(
operator|!
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|extension
argument_list|)
operator|||
literal|"del"
operator|.
name|equals
argument_list|(
name|extension
argument_list|)
operator|||
literal|"gen"
operator|.
name|equals
argument_list|(
name|extension
argument_list|)
operator|)
condition|)
block|{
comment|// caching internal CFS extension, don't use compound file extension
name|forceUseCompound
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Tuple
argument_list|<
name|SwitchDirectory
argument_list|,
name|Boolean
argument_list|>
argument_list|(
operator|new
name|SwitchDirectory
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|primaryExtensions
argument_list|)
argument_list|,
name|memDir
argument_list|,
name|fsDirectory
argument_list|,
literal|true
argument_list|)
argument_list|,
name|forceUseCompound
argument_list|)
return|;
block|}
block|}
end_class

end_unit

