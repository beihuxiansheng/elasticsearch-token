begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.object
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|UidField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|AllFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|multifield
operator|.
name|MultiFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
annotation|@
name|ThreadSafe
DECL|class|ObjectMapper
specifier|public
class|class
name|ObjectMapper
implements|implements
name|Mapper
implements|,
name|AllFieldMapper
operator|.
name|IncludeInAll
block|{
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"object"
decl_stmt|;
DECL|field|NESTED_CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|NESTED_CONTENT_TYPE
init|=
literal|"nested"
decl_stmt|;
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|ENABLED
init|=
literal|true
decl_stmt|;
DECL|field|NESTED
specifier|public
specifier|static
specifier|final
name|Nested
name|NESTED
init|=
name|Nested
operator|.
name|NO
decl_stmt|;
DECL|field|DYNAMIC
specifier|public
specifier|static
specifier|final
name|Dynamic
name|DYNAMIC
init|=
literal|null
decl_stmt|;
comment|// not set, inherited from father
DECL|field|PATH_TYPE
specifier|public
specifier|static
specifier|final
name|ContentPath
operator|.
name|Type
name|PATH_TYPE
init|=
name|ContentPath
operator|.
name|Type
operator|.
name|FULL
decl_stmt|;
block|}
DECL|enum|Dynamic
specifier|public
specifier|static
enum|enum
name|Dynamic
block|{
DECL|enum constant|TRUE
name|TRUE
block|,
DECL|enum constant|FALSE
name|FALSE
block|,
DECL|enum constant|STRICT
name|STRICT
block|}
DECL|class|Nested
specifier|public
specifier|static
class|class
name|Nested
block|{
DECL|field|NO
specifier|public
specifier|static
specifier|final
name|Nested
name|NO
init|=
operator|new
name|Nested
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|newNested
specifier|public
specifier|static
name|Nested
name|newNested
parameter_list|(
name|boolean
name|includeInParent
parameter_list|,
name|boolean
name|includeInRoot
parameter_list|)
block|{
return|return
operator|new
name|Nested
argument_list|(
literal|true
argument_list|,
name|includeInParent
argument_list|,
name|includeInRoot
argument_list|)
return|;
block|}
DECL|field|nested
specifier|private
specifier|final
name|boolean
name|nested
decl_stmt|;
DECL|field|includeInParent
specifier|private
specifier|final
name|boolean
name|includeInParent
decl_stmt|;
DECL|field|includeInRoot
specifier|private
specifier|final
name|boolean
name|includeInRoot
decl_stmt|;
DECL|method|Nested
specifier|private
name|Nested
parameter_list|(
name|boolean
name|nested
parameter_list|,
name|boolean
name|includeInParent
parameter_list|,
name|boolean
name|includeInRoot
parameter_list|)
block|{
name|this
operator|.
name|nested
operator|=
name|nested
expr_stmt|;
name|this
operator|.
name|includeInParent
operator|=
name|includeInParent
expr_stmt|;
name|this
operator|.
name|includeInRoot
operator|=
name|includeInRoot
expr_stmt|;
block|}
DECL|method|isNested
specifier|public
name|boolean
name|isNested
parameter_list|()
block|{
return|return
name|nested
return|;
block|}
DECL|method|isIncludeInParent
specifier|public
name|boolean
name|isIncludeInParent
parameter_list|()
block|{
return|return
name|includeInParent
return|;
block|}
DECL|method|isIncludeInRoot
specifier|public
name|boolean
name|isIncludeInRoot
parameter_list|()
block|{
return|return
name|includeInRoot
return|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|T
extends|extends
name|Builder
parameter_list|,
name|Y
extends|extends
name|ObjectMapper
parameter_list|>
extends|extends
name|Mapper
operator|.
name|Builder
argument_list|<
name|T
argument_list|,
name|Y
argument_list|>
block|{
DECL|field|enabled
specifier|protected
name|boolean
name|enabled
init|=
name|Defaults
operator|.
name|ENABLED
decl_stmt|;
DECL|field|nested
specifier|protected
name|Nested
name|nested
init|=
name|Defaults
operator|.
name|NESTED
decl_stmt|;
DECL|field|dynamic
specifier|protected
name|Dynamic
name|dynamic
init|=
name|Defaults
operator|.
name|DYNAMIC
decl_stmt|;
DECL|field|pathType
specifier|protected
name|ContentPath
operator|.
name|Type
name|pathType
init|=
name|Defaults
operator|.
name|PATH_TYPE
decl_stmt|;
DECL|field|includeInAll
specifier|protected
name|Boolean
name|includeInAll
decl_stmt|;
DECL|field|mappersBuilders
specifier|protected
specifier|final
name|List
argument_list|<
name|Mapper
operator|.
name|Builder
argument_list|>
name|mappersBuilders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
operator|(
name|T
operator|)
name|this
expr_stmt|;
block|}
DECL|method|enabled
specifier|public
name|T
name|enabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|dynamic
specifier|public
name|T
name|dynamic
parameter_list|(
name|Dynamic
name|dynamic
parameter_list|)
block|{
name|this
operator|.
name|dynamic
operator|=
name|dynamic
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|nested
specifier|public
name|T
name|nested
parameter_list|(
name|Nested
name|nested
parameter_list|)
block|{
name|this
operator|.
name|nested
operator|=
name|nested
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|pathType
specifier|public
name|T
name|pathType
parameter_list|(
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|)
block|{
name|this
operator|.
name|pathType
operator|=
name|pathType
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|includeInAll
specifier|public
name|T
name|includeInAll
parameter_list|(
name|boolean
name|includeInAll
parameter_list|)
block|{
name|this
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|add
specifier|public
name|T
name|add
parameter_list|(
name|Mapper
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|mappersBuilders
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|builder
return|;
block|}
DECL|method|build
annotation|@
name|Override
specifier|public
name|Y
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|ContentPath
operator|.
name|Type
name|origPathType
init|=
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|()
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Mapper
argument_list|>
name|mappers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Mapper
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Mapper
operator|.
name|Builder
name|builder
range|:
name|mappersBuilders
control|)
block|{
name|Mapper
name|mapper
init|=
name|builder
operator|.
name|build
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|mappers
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|name
argument_list|()
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|origPathType
argument_list|)
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|ObjectMapper
name|objectMapper
init|=
name|createMapper
argument_list|(
name|name
argument_list|,
name|context
operator|.
name|path
argument_list|()
operator|.
name|fullPathAsText
argument_list|(
name|name
argument_list|)
argument_list|,
name|enabled
argument_list|,
name|nested
argument_list|,
name|dynamic
argument_list|,
name|pathType
argument_list|,
name|mappers
argument_list|)
decl_stmt|;
name|objectMapper
operator|.
name|includeInAllIfNotSet
argument_list|(
name|includeInAll
argument_list|)
expr_stmt|;
return|return
operator|(
name|Y
operator|)
name|objectMapper
return|;
block|}
DECL|method|createMapper
specifier|protected
name|ObjectMapper
name|createMapper
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fullPath
parameter_list|,
name|boolean
name|enabled
parameter_list|,
name|Nested
name|nested
parameter_list|,
name|Dynamic
name|dynamic
parameter_list|,
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Mapper
argument_list|>
name|mappers
parameter_list|)
block|{
return|return
operator|new
name|ObjectMapper
argument_list|(
name|name
argument_list|,
name|fullPath
argument_list|,
name|enabled
argument_list|,
name|nested
argument_list|,
name|dynamic
argument_list|,
name|pathType
argument_list|,
name|mappers
argument_list|)
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|Mapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|objectNode
init|=
name|node
decl_stmt|;
name|ObjectMapper
operator|.
name|Builder
name|builder
init|=
name|createBuilder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|nested
init|=
literal|false
decl_stmt|;
name|boolean
name|nestedIncludeInParent
init|=
literal|false
decl_stmt|;
name|boolean
name|nestedIncludeInRoot
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|objectNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"dynamic"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|fieldNode
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"strict"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|dynamic
argument_list|(
name|Dynamic
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|dynamic
argument_list|(
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
condition|?
name|Dynamic
operator|.
name|TRUE
else|:
name|Dynamic
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
name|fieldNode
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|CONTENT_TYPE
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nested
operator|=
name|Nested
operator|.
name|NO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|NESTED_CONTENT_TYPE
argument_list|)
condition|)
block|{
name|nested
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Trying to parse an object but has a different type ["
operator|+
name|type
operator|+
literal|"] for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"include_in_parent"
argument_list|)
condition|)
block|{
name|nestedIncludeInParent
operator|=
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"include_in_root"
argument_list|)
condition|)
block|{
name|nestedIncludeInRoot
operator|=
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"enabled"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|enabled
argument_list|(
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"path"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|pathType
argument_list|(
name|parsePathType
argument_list|(
name|name
argument_list|,
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
name|parseProperties
argument_list|(
name|builder
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|fieldNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"include_in_all"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|includeInAll
argument_list|(
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processField
argument_list|(
name|builder
argument_list|,
name|fieldName
argument_list|,
name|fieldNode
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nested
condition|)
block|{
name|builder
operator|.
name|nested
operator|=
name|Nested
operator|.
name|newNested
argument_list|(
name|nestedIncludeInParent
argument_list|,
name|nestedIncludeInRoot
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseProperties
specifier|private
name|void
name|parseProperties
parameter_list|(
name|ObjectMapper
operator|.
name|Builder
name|objBuilder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propsNode
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|propsNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propNode
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|type
decl_stmt|;
name|Object
name|typeNode
init|=
name|propNode
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNode
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|typeNode
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// lets see if we can derive this...
if|if
condition|(
name|propNode
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|ObjectMapper
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propNode
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|MultiFieldMapper
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No type specified for property ["
operator|+
name|propName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|Mapper
operator|.
name|TypeParser
name|typeParser
init|=
name|parserContext
operator|.
name|typeParser
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No handler for type ["
operator|+
name|type
operator|+
literal|"] declared on field ["
operator|+
name|propName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|objBuilder
operator|.
name|add
argument_list|(
name|typeParser
operator|.
name|parse
argument_list|(
name|propName
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createBuilder
specifier|protected
name|Builder
name|createBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|object
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|processField
specifier|protected
name|void
name|processField
parameter_list|(
name|Builder
name|builder
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|fieldNode
parameter_list|)
block|{          }
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|fullPath
specifier|private
specifier|final
name|String
name|fullPath
decl_stmt|;
DECL|field|enabled
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
DECL|field|nested
specifier|private
specifier|final
name|Nested
name|nested
decl_stmt|;
DECL|field|nestedTypePath
specifier|private
specifier|final
name|String
name|nestedTypePath
decl_stmt|;
DECL|field|nestedTypeFilter
specifier|private
specifier|final
name|Filter
name|nestedTypeFilter
decl_stmt|;
DECL|field|dynamic
specifier|private
specifier|final
name|Dynamic
name|dynamic
decl_stmt|;
DECL|field|pathType
specifier|private
specifier|final
name|ContentPath
operator|.
name|Type
name|pathType
decl_stmt|;
DECL|field|includeInAll
specifier|private
name|Boolean
name|includeInAll
decl_stmt|;
DECL|field|mappers
specifier|private
specifier|volatile
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Mapper
argument_list|>
name|mappers
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|mutex
specifier|private
specifier|final
name|Object
name|mutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|ObjectMapper
name|ObjectMapper
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fullPath
parameter_list|,
name|boolean
name|enabled
parameter_list|,
name|Nested
name|nested
parameter_list|,
name|Dynamic
name|dynamic
parameter_list|,
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Mapper
argument_list|>
name|mappers
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fullPath
operator|=
name|fullPath
expr_stmt|;
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
name|this
operator|.
name|nested
operator|=
name|nested
expr_stmt|;
name|this
operator|.
name|dynamic
operator|=
name|dynamic
expr_stmt|;
name|this
operator|.
name|pathType
operator|=
name|pathType
expr_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|mappers
operator|=
name|copyOf
argument_list|(
name|mappers
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nestedTypePath
operator|=
literal|"__"
operator|+
name|fullPath
expr_stmt|;
name|this
operator|.
name|nestedTypeFilter
operator|=
operator|new
name|TermFilter
argument_list|(
name|TypeFieldMapper
operator|.
name|TERM_FACTORY
operator|.
name|createTerm
argument_list|(
name|nestedTypePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|name
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|includeInAll
annotation|@
name|Override
specifier|public
name|void
name|includeInAll
parameter_list|(
name|Boolean
name|includeInAll
parameter_list|)
block|{
if|if
condition|(
name|includeInAll
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
comment|// when called from outside, apply this on all the inner mappers
for|for
control|(
name|Mapper
name|mapper
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|mapper
operator|instanceof
name|AllFieldMapper
operator|.
name|IncludeInAll
condition|)
block|{
operator|(
operator|(
name|AllFieldMapper
operator|.
name|IncludeInAll
operator|)
name|mapper
operator|)
operator|.
name|includeInAll
argument_list|(
name|includeInAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|includeInAllIfNotSet
annotation|@
name|Override
specifier|public
name|void
name|includeInAllIfNotSet
parameter_list|(
name|Boolean
name|includeInAll
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|includeInAll
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
block|}
comment|// when called from outside, apply this on all the inner mappers
for|for
control|(
name|Mapper
name|mapper
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|mapper
operator|instanceof
name|AllFieldMapper
operator|.
name|IncludeInAll
condition|)
block|{
operator|(
operator|(
name|AllFieldMapper
operator|.
name|IncludeInAll
operator|)
name|mapper
operator|)
operator|.
name|includeInAllIfNotSet
argument_list|(
name|includeInAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|nested
specifier|public
name|Nested
name|nested
parameter_list|()
block|{
return|return
name|this
operator|.
name|nested
return|;
block|}
DECL|method|nestedTypeFilter
specifier|public
name|Filter
name|nestedTypeFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|nestedTypeFilter
return|;
block|}
DECL|method|putMapper
specifier|public
name|ObjectMapper
name|putMapper
parameter_list|(
name|Mapper
name|mapper
parameter_list|)
block|{
if|if
condition|(
name|mapper
operator|instanceof
name|AllFieldMapper
operator|.
name|IncludeInAll
condition|)
block|{
operator|(
operator|(
name|AllFieldMapper
operator|.
name|IncludeInAll
operator|)
name|mapper
operator|)
operator|.
name|includeInAllIfNotSet
argument_list|(
name|includeInAll
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|mappers
operator|=
name|newMapBuilder
argument_list|(
name|mappers
argument_list|)
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|name
argument_list|()
argument_list|,
name|mapper
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|traverse
annotation|@
name|Override
specifier|public
name|void
name|traverse
parameter_list|(
name|FieldMapperListener
name|fieldMapperListener
parameter_list|)
block|{
for|for
control|(
name|Mapper
name|mapper
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|mapper
operator|.
name|traverse
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|traverse
annotation|@
name|Override
specifier|public
name|void
name|traverse
parameter_list|(
name|ObjectMapperListener
name|objectMapperListener
parameter_list|)
block|{
name|objectMapperListener
operator|.
name|objectMapper
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|Mapper
name|mapper
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|mapper
operator|.
name|traverse
argument_list|(
name|objectMapperListener
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fullPath
specifier|public
name|String
name|fullPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|fullPath
return|;
block|}
DECL|method|nestedTypePath
specifier|public
name|String
name|nestedTypePath
parameter_list|()
block|{
return|return
name|nestedTypePath
return|;
block|}
DECL|method|dynamic
specifier|public
specifier|final
name|Dynamic
name|dynamic
parameter_list|()
block|{
return|return
name|this
operator|.
name|dynamic
return|;
block|}
DECL|method|parse
specifier|public
name|void
name|parse
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|context
operator|.
name|parser
argument_list|()
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
return|return;
block|}
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
comment|// the object is null ("obj1" : null), simply bail
return|return;
block|}
name|Document
name|restoreDoc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nested
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|Document
name|nestedDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// pre add the uid field if possible (id was already provided)
name|Fieldable
name|uidField
init|=
name|context
operator|.
name|doc
argument_list|()
operator|.
name|getFieldable
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|uidField
operator|!=
literal|null
condition|)
block|{
comment|// we don't need to add it as a full uid field in nested docs, since we don't need versioning
comment|// we also rely on this for UidField#loadVersion
comment|// this is a deeply nested field
if|if
condition|(
name|uidField
operator|.
name|stringValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nestedDoc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|uidField
operator|.
name|stringValue
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nestedDoc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
operator|(
operator|(
name|UidField
operator|)
name|uidField
operator|)
operator|.
name|uid
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the type of the nested doc starts with __, so we can identify that its a nested one in filters
comment|// note, we don't prefix it with the type of the doc since it allows us to execute a nested query
comment|// across types (for example, with similar nested objects)
name|nestedDoc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|nestedTypePath
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|restoreDoc
operator|=
name|context
operator|.
name|switchDoc
argument_list|(
name|nestedDoc
argument_list|)
expr_stmt|;
name|context
operator|.
name|addDoc
argument_list|(
name|nestedDoc
argument_list|)
expr_stmt|;
block|}
name|ContentPath
operator|.
name|Type
name|origPathType
init|=
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|()
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
comment|// if we are at the end of the previous object, advance
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
comment|// if we are just starting an OBJECT, advance, this is the object we are parsing, we need the name first
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|serializeObject
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|serializeArray
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|serializeNullValue
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"object mapping for ["
operator|+
name|name
operator|+
literal|"] tried to parse as object, but got EOF, has a concrete value been provided to it?"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|serializeValue
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
comment|// restore the enable path flag
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|origPathType
argument_list|)
expr_stmt|;
if|if
condition|(
name|nested
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|Document
name|nestedDoc
init|=
name|context
operator|.
name|switchDoc
argument_list|(
name|restoreDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|nested
operator|.
name|isIncludeInParent
argument_list|()
condition|)
block|{
for|for
control|(
name|Fieldable
name|field
range|:
name|nestedDoc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
operator|||
name|field
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|context
operator|.
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|nested
operator|.
name|isIncludeInRoot
argument_list|()
condition|)
block|{
comment|// don't add it twice, if its included in parent, and we are handling the master doc...
if|if
condition|(
operator|!
operator|(
name|nested
operator|.
name|isIncludeInParent
argument_list|()
operator|&&
name|context
operator|.
name|doc
argument_list|()
operator|==
name|context
operator|.
name|rootDoc
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|Fieldable
name|field
range|:
name|nestedDoc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
operator|||
name|field
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|context
operator|.
name|rootDoc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|serializeNullValue
specifier|private
name|void
name|serializeNullValue
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|String
name|lastFieldName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we can only handle null values if we have mappings for them
name|Mapper
name|mapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|lastFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
name|mapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|serializeObject
specifier|private
name|void
name|serializeObject
parameter_list|(
specifier|final
name|ParseContext
name|context
parameter_list|,
name|String
name|currentFieldName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentFieldName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"object mapping ["
operator|+
name|name
operator|+
literal|"] trying to serialize an object with no field associated with it, current value ["
operator|+
name|context
operator|.
name|parser
argument_list|()
operator|.
name|textOrNull
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
name|Mapper
name|objectMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|currentFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectMapper
operator|!=
literal|null
condition|)
block|{
name|objectMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Dynamic
name|dynamic
init|=
name|this
operator|.
name|dynamic
decl_stmt|;
if|if
condition|(
name|dynamic
operator|==
literal|null
condition|)
block|{
name|dynamic
operator|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|dynamic
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dynamic
operator|==
name|Dynamic
operator|.
name|STRICT
condition|)
block|{
throw|throw
operator|new
name|StrictDynamicMappingException
argument_list|(
name|currentFieldName
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|dynamic
operator|==
name|Dynamic
operator|.
name|TRUE
condition|)
block|{
comment|// we sync here just so we won't add it twice. Its not the end of the world
comment|// to sync here since next operations will get it before
name|boolean
name|newMapper
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|objectMapper
operator|=
name|mappers
operator|.
name|get
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectMapper
operator|==
literal|null
condition|)
block|{
name|newMapper
operator|=
literal|true
expr_stmt|;
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"object"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|MapperBuilders
operator|.
name|object
argument_list|(
name|currentFieldName
argument_list|)
operator|.
name|enabled
argument_list|(
literal|true
argument_list|)
operator|.
name|dynamic
argument_list|(
name|dynamic
argument_list|)
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
block|}
comment|// remove the current field name from path, since the object builder adds it as well...
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|BuilderContext
name|builderContext
init|=
operator|new
name|BuilderContext
argument_list|(
name|context
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|objectMapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
name|putMapper
argument_list|(
name|objectMapper
argument_list|)
expr_stmt|;
comment|// now re add it
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
name|context
operator|.
name|addedMapper
argument_list|()
expr_stmt|;
block|}
block|}
comment|// traverse and parse outside of the mutex
if|if
condition|(
name|newMapper
condition|)
block|{
comment|// we need to traverse in case we have a dynamic template and need to add field mappers
comment|// introduced by it
name|objectMapper
operator|.
name|traverse
argument_list|(
operator|new
name|FieldMapperListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|fieldMapper
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|)
block|{
name|context
operator|.
name|docMapper
argument_list|()
operator|.
name|addFieldMapper
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|objectMapper
operator|.
name|traverse
argument_list|(
operator|new
name|ObjectMapperListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|objectMapper
parameter_list|(
name|ObjectMapper
name|objectMapper
parameter_list|)
block|{
name|context
operator|.
name|docMapper
argument_list|()
operator|.
name|addObjectMapper
argument_list|(
name|objectMapper
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// now, parse it
name|objectMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// not dynamic, read everything up to end object
name|context
operator|.
name|parser
argument_list|()
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
DECL|method|serializeArray
specifier|private
name|void
name|serializeArray
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|String
name|lastFieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|Mapper
name|mapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|lastFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
operator|&&
name|mapper
operator|instanceof
name|ArrayValueMapperParser
condition|)
block|{
name|mapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|serializeObject
argument_list|(
name|context
argument_list|,
name|lastFieldName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|serializeArray
argument_list|(
name|context
argument_list|,
name|lastFieldName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|lastFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|serializeNullValue
argument_list|(
name|context
argument_list|,
name|lastFieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializeValue
argument_list|(
name|context
argument_list|,
name|lastFieldName
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|serializeValue
specifier|private
name|void
name|serializeValue
parameter_list|(
specifier|final
name|ParseContext
name|context
parameter_list|,
name|String
name|currentFieldName
parameter_list|,
name|XContentParser
operator|.
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentFieldName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"object mapping ["
operator|+
name|name
operator|+
literal|"] trying to serialize a value with no field associated with it, current value ["
operator|+
name|context
operator|.
name|parser
argument_list|()
operator|.
name|textOrNull
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Mapper
name|mapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|currentFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
name|mapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return;
block|}
name|Dynamic
name|dynamic
init|=
name|this
operator|.
name|dynamic
decl_stmt|;
if|if
condition|(
name|dynamic
operator|==
literal|null
condition|)
block|{
name|dynamic
operator|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|dynamic
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dynamic
operator|==
name|Dynamic
operator|.
name|STRICT
condition|)
block|{
throw|throw
operator|new
name|StrictDynamicMappingException
argument_list|(
name|currentFieldName
argument_list|)
throw|;
block|}
if|if
condition|(
name|dynamic
operator|==
name|Dynamic
operator|.
name|FALSE
condition|)
block|{
return|return;
block|}
comment|// we sync here since we don't want to add this field twice to the document mapper
comment|// its not the end of the world, since we add it to the mappers once we create it
comment|// so next time we won't even get here for this field
name|boolean
name|newMapper
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|mapper
operator|=
name|mappers
operator|.
name|get
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
name|newMapper
operator|=
literal|true
expr_stmt|;
name|BuilderContext
name|builderContext
init|=
operator|new
name|BuilderContext
argument_list|(
name|context
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|String
name|text
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|text
argument_list|()
decl_stmt|;
comment|// check if it fits one of the date formats
name|boolean
name|resolved
init|=
literal|false
decl_stmt|;
comment|// a safe check since "1" gets parsed as well
if|if
condition|(
name|context
operator|.
name|root
argument_list|()
operator|.
name|dateDetection
argument_list|()
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|||
name|text
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
operator|||
name|text
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
for|for
control|(
name|FormatDateTimeFormatter
name|dateTimeFormatter
range|:
name|context
operator|.
name|root
argument_list|()
operator|.
name|dynamicDateTimeFormatters
argument_list|()
control|)
block|{
try|try
block|{
name|dateTimeFormatter
operator|.
name|parser
argument_list|()
operator|.
name|parseMillis
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|dateField
argument_list|(
name|currentFieldName
argument_list|)
operator|.
name|dateTimeFormatter
argument_list|(
name|dateTimeFormatter
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
name|resolved
operator|=
literal|true
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// failure to parse this, continue
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|resolved
operator|&&
name|context
operator|.
name|root
argument_list|()
operator|.
name|numericDetection
argument_list|()
condition|)
block|{
try|try
block|{
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|longField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
name|resolved
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// not a long number
block|}
if|if
condition|(
operator|!
name|resolved
condition|)
block|{
try|try
block|{
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|doubleField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
name|resolved
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// not a long number
block|}
block|}
block|}
comment|// DON'T do automatic ip detection logic, since it messes up with docs that have hosts and ips
comment|// check if its an ip
comment|//                if (!resolved&& text.indexOf('.') != -1) {
comment|//                    try {
comment|//                        IpFieldMapper.ipToLong(text);
comment|//                        XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "ip");
comment|//                        if (builder == null) {
comment|//                            builder = ipField(currentFieldName);
comment|//                        }
comment|//                        mapper = builder.build(builderContext);
comment|//                        resolved = true;
comment|//                    } catch (Exception e) {
comment|//                        // failure to parse, not ip...
comment|//                    }
comment|//                }
if|if
condition|(
operator|!
name|resolved
condition|)
block|{
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"string"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|stringField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|XContentParser
operator|.
name|NumberType
name|numberType
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|numberType
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberType
operator|==
name|XContentParser
operator|.
name|NumberType
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|parser
argument_list|()
operator|.
name|estimatedNumberType
argument_list|()
condition|)
block|{
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|longField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"integer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|integerField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|numberType
operator|==
name|XContentParser
operator|.
name|NumberType
operator|.
name|LONG
condition|)
block|{
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|longField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numberType
operator|==
name|XContentParser
operator|.
name|NumberType
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|parser
argument_list|()
operator|.
name|estimatedNumberType
argument_list|()
condition|)
block|{
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|doubleField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|floatField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|numberType
operator|==
name|XContentParser
operator|.
name|NumberType
operator|.
name|DOUBLE
condition|)
block|{
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|doubleField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
condition|)
block|{
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|"boolean"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|booleanField
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Mapper
operator|.
name|Builder
name|builder
init|=
name|context
operator|.
name|root
argument_list|()
operator|.
name|findTemplateBuilder
argument_list|(
name|context
argument_list|,
name|currentFieldName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
name|mapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO how do we identify dynamically that its a binary value?
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Can't handle serializing a dynamic type with content token ["
operator|+
name|token
operator|+
literal|"] and field name ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|putMapper
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
name|context
operator|.
name|addedMapper
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newMapper
condition|)
block|{
name|mapper
operator|.
name|traverse
argument_list|(
operator|new
name|FieldMapperListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|fieldMapper
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|)
block|{
name|context
operator|.
name|docMapper
argument_list|()
operator|.
name|addFieldMapper
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|mapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|merge
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
specifier|final
name|Mapper
name|mergeWith
parameter_list|,
specifier|final
name|MergeContext
name|mergeContext
parameter_list|)
throws|throws
name|MergeMappingException
block|{
if|if
condition|(
operator|!
operator|(
name|mergeWith
operator|instanceof
name|ObjectMapper
operator|)
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"Can't merge a non object mapping ["
operator|+
name|mergeWith
operator|.
name|name
argument_list|()
operator|+
literal|"] with an object mapping ["
operator|+
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ObjectMapper
name|mergeWithObject
init|=
operator|(
name|ObjectMapper
operator|)
name|mergeWith
decl_stmt|;
name|doMerge
argument_list|(
name|mergeWithObject
argument_list|,
name|mergeContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Mapper
argument_list|>
name|mappersToTraverse
init|=
operator|new
name|ArrayList
argument_list|<
name|Mapper
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
for|for
control|(
name|Mapper
name|mergeWithMapper
range|:
name|mergeWithObject
operator|.
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|Mapper
name|mergeIntoMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|mergeWithMapper
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeIntoMapper
operator|==
literal|null
condition|)
block|{
comment|// no mapping, simply add it if not simulating
if|if
condition|(
operator|!
name|mergeContext
operator|.
name|mergeFlags
argument_list|()
operator|.
name|simulate
argument_list|()
condition|)
block|{
name|putMapper
argument_list|(
name|mergeWithMapper
argument_list|)
expr_stmt|;
name|mappersToTraverse
operator|.
name|add
argument_list|(
name|mergeWithMapper
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|mergeWithMapper
operator|instanceof
name|MultiFieldMapper
operator|)
operator|&&
operator|!
operator|(
name|mergeIntoMapper
operator|instanceof
name|MultiFieldMapper
operator|)
condition|)
block|{
name|MultiFieldMapper
name|mergeWithMultiField
init|=
operator|(
name|MultiFieldMapper
operator|)
name|mergeWithMapper
decl_stmt|;
name|mergeWithMultiField
operator|.
name|merge
argument_list|(
name|mergeIntoMapper
argument_list|,
name|mergeContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mergeContext
operator|.
name|mergeFlags
argument_list|()
operator|.
name|simulate
argument_list|()
condition|)
block|{
name|putMapper
argument_list|(
name|mergeWithMultiField
argument_list|)
expr_stmt|;
comment|// now, record mappers to traverse events for all mappers
for|for
control|(
name|Mapper
name|mapper
range|:
name|mergeWithMultiField
operator|.
name|mappers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|mappersToTraverse
operator|.
name|add
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|mergeIntoMapper
operator|.
name|merge
argument_list|(
name|mergeWithMapper
argument_list|,
name|mergeContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// call this outside of the mutex
for|for
control|(
name|Mapper
name|mapper
range|:
name|mappersToTraverse
control|)
block|{
name|mapper
operator|.
name|traverse
argument_list|(
operator|new
name|FieldMapperListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|fieldMapper
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|)
block|{
name|mergeContext
operator|.
name|docMapper
argument_list|()
operator|.
name|addFieldMapper
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|traverse
argument_list|(
operator|new
name|ObjectMapperListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|objectMapper
parameter_list|(
name|ObjectMapper
name|objectMapper
parameter_list|)
block|{
name|mergeContext
operator|.
name|docMapper
argument_list|()
operator|.
name|addObjectMapper
argument_list|(
name|objectMapper
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doMerge
specifier|protected
name|void
name|doMerge
parameter_list|(
name|ObjectMapper
name|mergeWith
parameter_list|,
name|MergeContext
name|mergeContext
parameter_list|)
block|{      }
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|Mapper
name|mapper
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|mapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toXContent
annotation|@
name|Override
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
name|Mapper
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|,
name|ToXContent
name|custom
parameter_list|,
name|Mapper
modifier|...
name|additionalMappers
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|nested
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|NESTED_CONTENT_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|nested
operator|.
name|isIncludeInParent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_parent"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nested
operator|.
name|isIncludeInRoot
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_root"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// only write the object content type if there are no properties, otherwise, it is automatically detected
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
block|}
comment|// grr, ugly! on root, dynamic defaults to TRUE, on children, it defaults to null to
comment|// inherit the root behavior
if|if
condition|(
name|this
operator|instanceof
name|RootObjectMapper
condition|)
block|{
if|if
condition|(
name|dynamic
operator|!=
name|Dynamic
operator|.
name|TRUE
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
name|dynamic
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dynamic
operator|!=
name|Defaults
operator|.
name|DYNAMIC
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
name|dynamic
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|enabled
operator|!=
name|Defaults
operator|.
name|ENABLED
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pathType
operator|!=
name|Defaults
operator|.
name|PATH_TYPE
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
name|pathType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInAll
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
name|includeInAll
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|custom
operator|!=
literal|null
condition|)
block|{
name|custom
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|doXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
comment|// sort the mappers so we get consistent serialization format
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Mapper
argument_list|>
name|sortedMappers
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Mapper
argument_list|>
argument_list|(
name|mappers
argument_list|)
decl_stmt|;
comment|// check internal mappers first (this is only relevant for root object)
for|for
control|(
name|Mapper
name|mapper
range|:
name|sortedMappers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|mapper
operator|instanceof
name|InternalMapper
condition|)
block|{
name|mapper
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|additionalMappers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Mapper
name|mapper
range|:
name|additionalMappers
control|)
block|{
name|mapper
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
for|for
control|(
name|Mapper
name|mapper
range|:
name|sortedMappers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|mapper
operator|instanceof
name|InternalMapper
operator|)
condition|)
block|{
name|mapper
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{      }
block|}
end_class

end_unit

