begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.json
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ArrayNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|json
operator|.
name|JsonMapperBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|JacksonNodes
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|JsonTypeParsers
specifier|public
class|class
name|JsonTypeParsers
block|{
DECL|class|JsonObjectTypeParser
specifier|public
specifier|static
class|class
name|JsonObjectTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|objectNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonObjectMapper
operator|.
name|Builder
name|builder
init|=
name|object
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|fieldsIt
init|=
name|objectNode
operator|.
name|getFields
argument_list|()
init|;
name|fieldsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|fieldsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"dynamic"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|dynamic
argument_list|(
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
name|fieldNode
operator|.
name|getTextValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
literal|"object"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Trying to parse an object but has a different type ["
operator|+
name|type
operator|+
literal|"] for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"dateFormats"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|FormatDateTimeFormatter
argument_list|>
name|dateTimeFormatters
init|=
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldNode
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|JsonNode
name|node1
range|:
operator|(
name|ArrayNode
operator|)
name|fieldNode
control|)
block|{
name|dateTimeFormatters
operator|.
name|add
argument_list|(
name|parseDateTimeFormatter
argument_list|(
name|fieldName
argument_list|,
name|node1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"none"
operator|.
name|equals
argument_list|(
name|fieldNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
condition|)
block|{
name|dateTimeFormatters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|dateTimeFormatters
operator|.
name|add
argument_list|(
name|parseDateTimeFormatter
argument_list|(
name|fieldName
argument_list|,
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dateTimeFormatters
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|noDateTimeFormatter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|dateTimeFormatter
argument_list|(
name|dateTimeFormatters
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"enabled"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|enabled
argument_list|(
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"pathType"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|pathType
argument_list|(
name|parsePathType
argument_list|(
name|name
argument_list|,
name|fieldNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
name|parseProperties
argument_list|(
name|builder
argument_list|,
operator|(
name|ObjectNode
operator|)
name|fieldNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"includeInAll"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|includeInAll
argument_list|(
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseProperties
specifier|private
name|void
name|parseProperties
parameter_list|(
name|JsonObjectMapper
operator|.
name|Builder
name|objBuilder
parameter_list|,
name|ObjectNode
name|propsNode
parameter_list|,
name|JsonTypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|propsNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|type
decl_stmt|;
name|JsonNode
name|typeNode
init|=
name|propNode
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNode
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|typeNode
operator|.
name|getTextValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// lets see if we can derive this...
if|if
condition|(
name|propNode
operator|.
name|isObject
argument_list|()
operator|&&
name|propNode
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|JsonObjectMapper
operator|.
name|JSON_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propNode
operator|.
name|isObject
argument_list|()
operator|&&
name|propNode
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|JsonMultiFieldMapper
operator|.
name|JSON_TYPE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No type specified for property ["
operator|+
name|propName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|JsonTypeParser
name|typeParser
init|=
name|parserContext
operator|.
name|typeParser
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No handler for type ["
operator|+
name|type
operator|+
literal|"] declared on field ["
operator|+
name|propName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|objBuilder
operator|.
name|add
argument_list|(
name|typeParser
operator|.
name|parse
argument_list|(
name|propName
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|JsonMultiFieldTypeParser
specifier|public
specifier|static
class|class
name|JsonMultiFieldTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|multiFieldNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonMultiFieldMapper
operator|.
name|Builder
name|builder
init|=
name|multiField
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|fieldsIt
init|=
name|multiFieldNode
operator|.
name|getFields
argument_list|()
init|;
name|fieldsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|fieldsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"pathType"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|pathType
argument_list|(
name|parsePathType
argument_list|(
name|name
argument_list|,
name|fieldNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"fields"
argument_list|)
condition|)
block|{
name|ObjectNode
name|fieldsNode
init|=
operator|(
name|ObjectNode
operator|)
name|fieldNode
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|fieldsNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry1
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry1
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry1
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|type
decl_stmt|;
name|JsonNode
name|typeNode
init|=
name|propNode
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNode
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|typeNode
operator|.
name|getTextValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No type specified for property ["
operator|+
name|propName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|JsonTypeParser
name|typeParser
init|=
name|parserContext
operator|.
name|typeParser
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No handler for type ["
operator|+
name|type
operator|+
literal|"] declared on field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|typeParser
operator|.
name|parse
argument_list|(
name|propName
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|JsonDateTypeParser
specifier|public
specifier|static
class|class
name|JsonDateTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|dateNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonDateFieldMapper
operator|.
name|Builder
name|builder
init|=
name|dateField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|dateNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|dateNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"format"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|dateTimeFormatter
argument_list|(
name|parseDateTimeFormatter
argument_list|(
name|propName
argument_list|,
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|JsonShortTypeParser
specifier|public
specifier|static
class|class
name|JsonShortTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|shortNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonShortFieldMapper
operator|.
name|Builder
name|builder
init|=
name|shortField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|shortNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|shortNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|nodeShortValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|JsonIntegerTypeParser
specifier|public
specifier|static
class|class
name|JsonIntegerTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|integerNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonIntegerFieldMapper
operator|.
name|Builder
name|builder
init|=
name|integerField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|integerNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|integerNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|nodeIntegerValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|JsonLongTypeParser
specifier|public
specifier|static
class|class
name|JsonLongTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|longNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonLongFieldMapper
operator|.
name|Builder
name|builder
init|=
name|longField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|longNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|longNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|nodeLongValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|JsonFloatTypeParser
specifier|public
specifier|static
class|class
name|JsonFloatTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|floatNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonFloatFieldMapper
operator|.
name|Builder
name|builder
init|=
name|floatField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|floatNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|floatNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|nodeFloatValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|JsonDoubleTypeParser
specifier|public
specifier|static
class|class
name|JsonDoubleTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|doubleNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonDoubleFieldMapper
operator|.
name|Builder
name|builder
init|=
name|doubleField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|doubleNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|doubleNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|nodeDoubleValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|JsonStringTypeParser
specifier|public
specifier|static
class|class
name|JsonStringTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|stringNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonStringFieldMapper
operator|.
name|Builder
name|builder
init|=
name|stringField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|stringNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|stringNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|getValueAsText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|JsonBinaryTypeParser
specifier|public
specifier|static
class|class
name|JsonBinaryTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|binaryNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonBinaryFieldMapper
operator|.
name|Builder
name|builder
init|=
name|binaryField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|binaryNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|JsonBooleanTypeParser
specifier|public
specifier|static
class|class
name|JsonBooleanTypeParser
implements|implements
name|JsonTypeParser
block|{
DECL|method|parse
annotation|@
name|Override
specifier|public
name|JsonMapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ObjectNode
name|booleanNode
init|=
operator|(
name|ObjectNode
operator|)
name|node
decl_stmt|;
name|JsonBooleanFieldMapper
operator|.
name|Builder
name|builder
init|=
name|booleanField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|booleanNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|booleanNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"nullValue"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|method|parseNumberField
specifier|public
specifier|static
name|void
name|parseNumberField
parameter_list|(
name|JsonNumberFieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|ObjectNode
name|numberNode
parameter_list|,
name|JsonTypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
name|parseJsonField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|numberNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|numberNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"precisionStep"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|precisionStep
argument_list|(
name|nodeIntegerValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseJsonField
specifier|public
specifier|static
name|void
name|parseJsonField
parameter_list|(
name|JsonFieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|ObjectNode
name|fieldNode
parameter_list|,
name|JsonTypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|propsIt
init|=
name|fieldNode
operator|.
name|getFields
argument_list|()
init|;
name|propsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|propsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"indexName"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|indexName
argument_list|(
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|store
argument_list|(
name|parseStore
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"index"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|index
argument_list|(
name|parseIndex
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"termVector"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|termVector
argument_list|(
name|parseTermVector
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"boost"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|boost
argument_list|(
name|nodeFloatValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"omitNorms"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|omitNorms
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"omitTermFreqAndPositions"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|omitTermFreqAndPositions
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"indexAnalyzer"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|indexAnalyzer
argument_list|(
name|parserContext
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"searchAnalyzer"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|searchAnalyzer
argument_list|(
name|parserContext
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"analyzer"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|indexAnalyzer
argument_list|(
name|parserContext
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|searchAnalyzer
argument_list|(
name|parserContext
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"includeInAll"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|includeInAll
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseDateTimeFormatter
specifier|public
specifier|static
name|FormatDateTimeFormatter
name|parseDateTimeFormatter
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|JsonNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isTextual
argument_list|()
condition|)
block|{
return|return
name|Joda
operator|.
name|forPattern
argument_list|(
name|node
operator|.
name|getTextValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO support more complex configuration...
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong node to use to parse date formatters ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseTermVector
specifier|public
specifier|static
name|Field
operator|.
name|TermVector
name|parseTermVector
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|termVector
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|NO
return|;
block|}
elseif|else
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|YES
return|;
block|}
elseif|else
if|if
condition|(
literal|"with_offsets"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|WITH_OFFSETS
return|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS
return|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions_offsets"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for termVector ["
operator|+
name|termVector
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseIndex
specifier|public
specifier|static
name|Field
operator|.
name|Index
name|parseIndex
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|index
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Index
operator|.
name|NO
return|;
block|}
elseif|else
if|if
condition|(
literal|"not_analyzed"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
return|;
block|}
elseif|else
if|if
condition|(
literal|"analyzed"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for index ["
operator|+
name|index
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseStore
specifier|public
specifier|static
name|Field
operator|.
name|Store
name|parseStore
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|store
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|store
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Store
operator|.
name|NO
return|;
block|}
elseif|else
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|store
argument_list|)
condition|)
block|{
return|return
name|Field
operator|.
name|Store
operator|.
name|YES
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for store ["
operator|+
name|store
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parsePathType
specifier|public
specifier|static
name|JsonPath
operator|.
name|Type
name|parsePathType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"justName"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
literal|"just_name"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|JsonPath
operator|.
name|Type
operator|.
name|JUST_NAME
return|;
block|}
elseif|else
if|if
condition|(
literal|"full"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|JsonPath
operator|.
name|Type
operator|.
name|FULL
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for pathType ["
operator|+
name|path
operator|+
literal|"] for objet ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

