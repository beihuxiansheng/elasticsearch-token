begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.field
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|doubles
operator|.
name|DoubleFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|floats
operator|.
name|FloatFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|ints
operator|.
name|IntFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|longs
operator|.
name|LongFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|shorts
operator|.
name|ShortFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|strings
operator|.
name|StringFieldData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_comment
comment|// General TODOs on FieldData
end_comment

begin_comment
comment|// TODO Make storing of freqs optional
end_comment

begin_comment
comment|// TODO Optimize the order (both int[] and int[][] when they are sparse, create an Order abstraction)
end_comment

begin_class
DECL|class|FieldData
specifier|public
specifier|abstract
class|class
name|FieldData
block|{
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|STRING
name|STRING
argument_list|(
name|StringFieldData
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|SHORT
name|SHORT
argument_list|(
name|ShortFieldData
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|INT
name|INT
argument_list|(
name|IntFieldData
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|LONG
name|LONG
argument_list|(
name|LongFieldData
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|FLOAT
name|FLOAT
argument_list|(
name|FloatFieldData
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|DOUBLE
name|DOUBLE
argument_list|(
name|DoubleFieldData
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|;
DECL|field|fieldDataClass
specifier|public
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|FieldData
argument_list|>
name|fieldDataClass
decl_stmt|;
DECL|field|isNumeric
specifier|private
specifier|final
name|boolean
name|isNumeric
decl_stmt|;
DECL|method|Type
name|Type
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|FieldData
argument_list|>
name|clazz
parameter_list|,
name|boolean
name|numeric
parameter_list|)
block|{
name|this
operator|.
name|fieldDataClass
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|isNumeric
operator|=
name|numeric
expr_stmt|;
block|}
DECL|method|isNumeric
specifier|public
name|boolean
name|isNumeric
parameter_list|()
block|{
return|return
name|isNumeric
return|;
block|}
block|}
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|FieldDataOptions
name|options
decl_stmt|;
DECL|method|FieldData
specifier|protected
name|FieldData
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|FieldDataOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
comment|/**      * The field name of this field data.      */
DECL|method|fieldName
specifier|public
specifier|final
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
comment|/**      * Is the field data a multi valued one (has multiple values / terms per document id) or not.      */
DECL|method|multiValued
specifier|public
specifier|abstract
name|boolean
name|multiValued
parameter_list|()
function_decl|;
comment|/**      * Is there a value associated with this document id.      */
DECL|method|hasValue
specifier|public
specifier|abstract
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
DECL|method|stringValue
specifier|public
specifier|abstract
name|String
name|stringValue
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
DECL|method|forEachValue
specifier|public
specifier|abstract
name|void
name|forEachValue
parameter_list|(
name|StringValueProc
name|proc
parameter_list|)
function_decl|;
DECL|interface|StringValueProc
specifier|public
specifier|static
interface|interface
name|StringValueProc
block|{
DECL|method|onValue
name|void
name|onValue
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|freq
parameter_list|)
function_decl|;
block|}
DECL|method|forEachValueInDoc
specifier|public
specifier|abstract
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|StringValueInDocProc
name|proc
parameter_list|)
function_decl|;
DECL|interface|StringValueInDocProc
specifier|public
specifier|static
interface|interface
name|StringValueInDocProc
block|{
DECL|method|onValue
name|void
name|onValue
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|docId
parameter_list|)
function_decl|;
block|}
comment|/**      * The type of this field data.      */
DECL|method|type
specifier|public
specifier|abstract
name|Type
name|type
parameter_list|()
function_decl|;
DECL|method|options
specifier|public
name|FieldDataOptions
name|options
parameter_list|()
block|{
return|return
name|this
operator|.
name|options
return|;
block|}
DECL|method|load
specifier|public
specifier|static
name|FieldData
name|load
parameter_list|(
name|Type
name|type
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|FieldDataOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|type
operator|.
name|fieldDataClass
argument_list|,
name|reader
argument_list|,
name|fieldName
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|load
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|FieldData
parameter_list|>
name|T
name|load
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|FieldDataOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|==
name|StringFieldData
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|StringFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|,
name|options
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|IntFieldData
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|IntFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|,
name|options
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|LongFieldData
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|LongFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|,
name|options
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|FloatFieldData
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|FloatFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|,
name|options
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DoubleFieldData
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|DoubleFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|,
name|options
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ShortFieldData
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|ShortFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|,
name|options
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No support for type ["
operator|+
name|type
operator|+
literal|"] to load field data"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

