begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|RafReference
specifier|public
class|class
name|RafReference
block|{
DECL|field|file
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
DECL|field|raf
specifier|private
specifier|final
name|RandomAccessFile
name|raf
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|FileChannel
name|channel
decl_stmt|;
DECL|field|refCount
specifier|private
specifier|final
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|RafReference
specifier|public
name|RafReference
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|raf
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|raf
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|this
operator|.
name|refCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|file
specifier|public
name|File
name|file
parameter_list|()
block|{
return|return
name|this
operator|.
name|file
return|;
block|}
DECL|method|channel
specifier|public
name|FileChannel
name|channel
parameter_list|()
block|{
return|return
name|this
operator|.
name|channel
return|;
block|}
DECL|method|raf
specifier|public
name|RandomAccessFile
name|raf
parameter_list|()
block|{
return|return
name|this
operator|.
name|raf
return|;
block|}
comment|/**      * Increases the ref count, and returns<tt>true</tt> if it managed to      * actually increment it.      */
DECL|method|increaseRefCount
specifier|public
name|boolean
name|increaseRefCount
parameter_list|()
block|{
return|return
name|refCount
operator|.
name|incrementAndGet
argument_list|()
operator|>
literal|1
return|;
block|}
DECL|method|decreaseRefCount
specifier|public
name|void
name|decreaseRefCount
parameter_list|(
name|boolean
name|delete
parameter_list|)
block|{
if|if
condition|(
name|refCount
operator|.
name|decrementAndGet
argument_list|()
operator|<=
literal|0
condition|)
block|{
try|try
block|{
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|delete
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
end_class

end_unit

