begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|XContentDynamicTemplate
specifier|public
class|class
name|XContentDynamicTemplate
block|{
DECL|enum|MatchType
specifier|public
specifier|static
enum|enum
name|MatchType
block|{
DECL|enum constant|SIMPLE
name|SIMPLE
block|,
DECL|enum constant|REGEX
name|REGEX
block|;
DECL|method|fromString
specifier|public
specifier|static
name|MatchType
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
literal|"simple"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|SIMPLE
return|;
block|}
elseif|else
if|if
condition|(
literal|"regex"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|REGEX
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No matching pattern matched on ["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|field|match
specifier|private
specifier|final
name|String
name|match
decl_stmt|;
DECL|field|unmatch
specifier|private
specifier|final
name|String
name|unmatch
decl_stmt|;
DECL|field|matchType
specifier|private
specifier|final
name|MatchType
name|matchType
decl_stmt|;
DECL|field|matchMappingType
specifier|private
specifier|final
name|String
name|matchMappingType
decl_stmt|;
DECL|field|mapping
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
decl_stmt|;
DECL|method|parse
specifier|public
specifier|static
name|XContentDynamicTemplate
name|parse
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
operator|!
name|conf
operator|.
name|containsKey
argument_list|(
literal|"match"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"template must have match set"
argument_list|)
throw|;
block|}
name|String
name|match
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"match"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|unmatch
init|=
name|conf
operator|.
name|containsKey
argument_list|(
literal|"unmatch"
argument_list|)
condition|?
name|conf
operator|.
name|get
argument_list|(
literal|"unmatch"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|matchMappingType
init|=
name|conf
operator|.
name|containsKey
argument_list|(
literal|"match_mapping_type"
argument_list|)
condition|?
name|conf
operator|.
name|get
argument_list|(
literal|"match_mapping_type"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|containsKey
argument_list|(
literal|"mapping"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"template must have mapping set"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|conf
operator|.
name|get
argument_list|(
literal|"mapping"
argument_list|)
decl_stmt|;
name|String
name|matchType
init|=
name|conf
operator|.
name|containsKey
argument_list|(
literal|"match_pattern"
argument_list|)
condition|?
name|conf
operator|.
name|get
argument_list|(
literal|"match_pattern"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
literal|"simple"
decl_stmt|;
return|return
operator|new
name|XContentDynamicTemplate
argument_list|(
name|match
argument_list|,
name|unmatch
argument_list|,
name|matchMappingType
argument_list|,
name|MatchType
operator|.
name|fromString
argument_list|(
name|matchType
argument_list|)
argument_list|,
name|mapping
argument_list|)
return|;
block|}
DECL|method|XContentDynamicTemplate
specifier|public
name|XContentDynamicTemplate
parameter_list|(
name|String
name|match
parameter_list|,
name|String
name|unmatch
parameter_list|,
name|String
name|matchMappingType
parameter_list|,
name|MatchType
name|matchType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
parameter_list|)
block|{
name|this
operator|.
name|match
operator|=
name|match
expr_stmt|;
name|this
operator|.
name|unmatch
operator|=
name|unmatch
expr_stmt|;
name|this
operator|.
name|matchType
operator|=
name|matchType
expr_stmt|;
name|this
operator|.
name|matchMappingType
operator|=
name|matchMappingType
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|dynamicType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|patternMatch
argument_list|(
name|match
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|patternMatch
argument_list|(
name|unmatch
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|matchMappingType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dynamicType
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|patternMatch
argument_list|(
name|matchMappingType
argument_list|,
name|dynamicType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|hasType
specifier|public
name|boolean
name|hasType
parameter_list|()
block|{
return|return
name|mapping
operator|.
name|containsKey
argument_list|(
literal|"type"
argument_list|)
return|;
block|}
DECL|method|mappingType
specifier|public
name|String
name|mappingType
parameter_list|(
name|String
name|dynamicType
parameter_list|)
block|{
return|return
name|mapping
operator|.
name|containsKey
argument_list|(
literal|"type"
argument_list|)
condition|?
name|mapping
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|dynamicType
return|;
block|}
DECL|method|patternMatch
specifier|private
name|boolean
name|patternMatch
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|matchType
operator|==
name|MatchType
operator|.
name|SIMPLE
condition|)
block|{
return|return
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|str
argument_list|)
return|;
block|}
return|return
name|str
operator|.
name|matches
argument_list|(
name|pattern
argument_list|)
return|;
block|}
DECL|method|mappingForName
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mappingForName
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|dynamicType
parameter_list|)
block|{
return|return
name|processMap
argument_list|(
name|mapping
argument_list|,
name|name
argument_list|,
name|dynamicType
argument_list|)
return|;
block|}
DECL|method|processMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|processMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|dynamicType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|processedMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{name}"
argument_list|,
name|name
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{dynamic_type}"
argument_list|,
name|dynamicType
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{dynamicType}"
argument_list|,
name|dynamicType
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|value
operator|=
name|processMap
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|value
argument_list|,
name|name
argument_list|,
name|dynamicType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|value
operator|=
name|processList
argument_list|(
operator|(
name|List
operator|)
name|value
argument_list|,
name|name
argument_list|,
name|dynamicType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{name}"
argument_list|,
name|name
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{dynamic_type}"
argument_list|,
name|dynamicType
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{dynamicType}"
argument_list|,
name|dynamicType
argument_list|)
expr_stmt|;
block|}
name|processedMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|processedMap
return|;
block|}
DECL|method|processList
specifier|private
name|List
name|processList
parameter_list|(
name|List
name|list
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|dynamicType
parameter_list|)
block|{
name|List
name|processedList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|list
control|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|value
operator|=
name|processMap
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|value
argument_list|,
name|name
argument_list|,
name|dynamicType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|value
operator|=
name|processList
argument_list|(
operator|(
name|List
operator|)
name|value
argument_list|,
name|name
argument_list|,
name|dynamicType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{name}"
argument_list|,
name|name
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{dynamic_type}"
argument_list|,
name|dynamicType
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{dynamicType}"
argument_list|,
name|dynamicType
argument_list|)
expr_stmt|;
block|}
name|processedList
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|processedList
return|;
block|}
block|}
end_class

end_unit

