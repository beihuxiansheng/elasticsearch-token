begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|IndexCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|QueryParsers
specifier|public
specifier|final
class|class
name|QueryParsers
block|{
DECL|method|QueryParsers
specifier|private
name|QueryParsers
parameter_list|()
block|{      }
DECL|method|wrapSmartNameQuery
specifier|public
specifier|static
name|Query
name|wrapSmartNameQuery
parameter_list|(
name|Query
name|query
parameter_list|,
annotation|@
name|Nullable
name|MapperService
operator|.
name|SmartNameFieldMappers
name|smartFieldMappers
parameter_list|,
annotation|@
name|Nullable
name|IndexCache
name|indexCache
parameter_list|)
block|{
if|if
condition|(
name|smartFieldMappers
operator|==
literal|null
condition|)
block|{
return|return
name|query
return|;
block|}
if|if
condition|(
operator|!
name|smartFieldMappers
operator|.
name|hasDocMapper
argument_list|()
condition|)
block|{
return|return
name|query
return|;
block|}
name|DocumentMapper
name|docMapper
init|=
name|smartFieldMappers
operator|.
name|docMapper
argument_list|()
decl_stmt|;
name|Filter
name|typeFilter
init|=
operator|new
name|TermFilter
argument_list|(
name|docMapper
operator|.
name|typeMapper
argument_list|()
operator|.
name|term
argument_list|(
name|docMapper
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexCache
operator|!=
literal|null
condition|)
block|{
name|typeFilter
operator|=
name|indexCache
operator|.
name|filter
argument_list|()
operator|.
name|cache
argument_list|(
name|typeFilter
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FilteredQuery
argument_list|(
name|query
argument_list|,
name|typeFilter
argument_list|)
return|;
block|}
DECL|method|wrapSmartNameFilter
specifier|public
specifier|static
name|Filter
name|wrapSmartNameFilter
parameter_list|(
name|Filter
name|filter
parameter_list|,
annotation|@
name|Nullable
name|MapperService
operator|.
name|SmartNameFieldMappers
name|smartFieldMappers
parameter_list|,
annotation|@
name|Nullable
name|IndexCache
name|indexCache
parameter_list|)
block|{
if|if
condition|(
name|smartFieldMappers
operator|==
literal|null
condition|)
block|{
return|return
name|filter
return|;
block|}
if|if
condition|(
operator|!
name|smartFieldMappers
operator|.
name|hasDocMapper
argument_list|()
condition|)
block|{
return|return
name|filter
return|;
block|}
name|DocumentMapper
name|docMapper
init|=
name|smartFieldMappers
operator|.
name|docMapper
argument_list|()
decl_stmt|;
name|BooleanFilter
name|booleanFilter
init|=
operator|new
name|BooleanFilter
argument_list|()
decl_stmt|;
name|Filter
name|typeFilter
init|=
operator|new
name|TermFilter
argument_list|(
name|docMapper
operator|.
name|typeMapper
argument_list|()
operator|.
name|term
argument_list|(
name|docMapper
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexCache
operator|!=
literal|null
condition|)
block|{
name|typeFilter
operator|=
name|indexCache
operator|.
name|filter
argument_list|()
operator|.
name|cache
argument_list|(
name|typeFilter
argument_list|)
expr_stmt|;
block|}
name|booleanFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|typeFilter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|filter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|result
init|=
name|booleanFilter
decl_stmt|;
if|if
condition|(
name|indexCache
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|indexCache
operator|.
name|filter
argument_list|()
operator|.
name|cache
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

