begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.jmx
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Classes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|MapBuilder
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|ResourceDMBean
specifier|public
class|class
name|ResourceDMBean
implements|implements
name|DynamicMBean
block|{
DECL|field|primitives
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|primitives
init|=
block|{
name|int
operator|.
name|class
block|,
name|byte
operator|.
name|class
block|,
name|short
operator|.
name|class
block|,
name|long
operator|.
name|class
block|,
name|float
operator|.
name|class
block|,
name|double
operator|.
name|class
block|,
name|boolean
operator|.
name|class
block|,
name|char
operator|.
name|class
block|}
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|obj
specifier|private
specifier|final
name|Object
name|obj
decl_stmt|;
DECL|field|objectName
specifier|private
specifier|final
name|String
name|objectName
decl_stmt|;
DECL|field|groupName
specifier|private
specifier|final
name|String
name|groupName
decl_stmt|;
DECL|field|fullObjectName
specifier|private
specifier|final
name|String
name|fullObjectName
decl_stmt|;
DECL|field|description
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
DECL|field|attributesInfo
specifier|private
specifier|final
name|MBeanAttributeInfo
index|[]
name|attributesInfo
decl_stmt|;
DECL|field|operationsInfo
specifier|private
specifier|final
name|MBeanOperationInfo
index|[]
name|operationsInfo
decl_stmt|;
DECL|field|mBeanInfo
specifier|private
specifier|final
name|MBeanInfo
name|mBeanInfo
decl_stmt|;
DECL|field|attributes
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|AttributeEntry
argument_list|>
name|attributes
decl_stmt|;
DECL|field|operations
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|MBeanOperationInfo
argument_list|>
name|operations
decl_stmt|;
DECL|method|ResourceDMBean
specifier|public
name|ResourceDMBean
parameter_list|(
name|Object
name|instance
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|instance
argument_list|,
literal|"Cannot make an MBean wrapper for null instance"
argument_list|)
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|instance
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|AttributeEntry
argument_list|>
name|attributesBuilder
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MBeanOperationInfo
argument_list|>
name|operationsBuilder
init|=
operator|new
name|ArrayList
argument_list|<
name|MBeanOperationInfo
argument_list|>
argument_list|()
decl_stmt|;
name|MBean
name|mBean
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|MBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|groupName
operator|=
name|findGroupName
argument_list|()
expr_stmt|;
if|if
condition|(
name|mBean
operator|!=
literal|null
operator|&&
name|Strings
operator|.
name|hasLength
argument_list|(
name|mBean
operator|.
name|objectName
argument_list|()
argument_list|)
condition|)
block|{
name|objectName
operator|=
name|mBean
operator|.
name|objectName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
comment|// we have something in the group object name, don't put anything in the object name
name|objectName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|objectName
operator|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|groupName
argument_list|)
operator|&&
name|Strings
operator|.
name|hasLength
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
name|this
operator|.
name|fullObjectName
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|findDescription
argument_list|()
expr_stmt|;
name|findFields
argument_list|(
name|attributesBuilder
argument_list|)
expr_stmt|;
name|findMethods
argument_list|(
name|attributesBuilder
argument_list|,
name|operationsBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributesBuilder
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|operations
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|operationsBuilder
argument_list|)
expr_stmt|;
name|attributesInfo
operator|=
operator|new
name|MBeanAttributeInfo
index|[
name|attributes
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|MBeanAttributeInfo
name|info
decl_stmt|;
for|for
control|(
name|AttributeEntry
name|entry
range|:
name|attributes
operator|.
name|values
argument_list|()
control|)
block|{
name|info
operator|=
name|entry
operator|.
name|getInfo
argument_list|()
expr_stmt|;
name|attributesInfo
index|[
name|i
operator|++
index|]
operator|=
name|info
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Attribute "
operator|+
name|info
operator|.
name|getName
argument_list|()
operator|+
literal|"[r="
operator|+
name|info
operator|.
name|isReadable
argument_list|()
operator|+
literal|",w="
operator|+
name|info
operator|.
name|isWritable
argument_list|()
operator|+
literal|",is="
operator|+
name|info
operator|.
name|isIs
argument_list|()
operator|+
literal|",type="
operator|+
name|info
operator|.
name|getType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
name|operationsInfo
operator|=
operator|new
name|MBeanOperationInfo
index|[
name|operations
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|operations
operator|.
name|toArray
argument_list|(
name|operationsInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|operations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|logger
operator|.
name|trace
argument_list|(
literal|"Operations are:"
argument_list|)
expr_stmt|;
for|for
control|(
name|MBeanOperationInfo
name|op
range|:
name|operationsInfo
control|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Operation "
operator|+
name|op
operator|.
name|getReturnType
argument_list|()
operator|+
literal|" "
operator|+
name|op
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|mBeanInfo
operator|=
operator|new
name|MBeanInfo
argument_list|(
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|description
argument_list|,
name|attributesInfo
argument_list|,
literal|null
argument_list|,
name|operationsInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getMBeanInfo
specifier|public
name|MBeanInfo
name|getMBeanInfo
parameter_list|()
block|{
return|return
name|mBeanInfo
return|;
block|}
DECL|method|getAttribute
specifier|public
specifier|synchronized
name|Object
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|AttributeNotFoundException
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Invalid attribute requested "
operator|+
name|name
argument_list|)
throw|;
name|Attribute
name|attr
init|=
name|getNamedAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AttributeNotFoundException
argument_list|(
literal|"Unknown attribute '"
operator|+
name|name
operator|+
literal|"'. Known attributes names are: "
operator|+
name|attributes
operator|.
name|keySet
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attr
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|setAttribute
specifier|public
specifier|synchronized
name|void
name|setAttribute
parameter_list|(
name|Attribute
name|attribute
parameter_list|)
block|{
if|if
condition|(
name|attribute
operator|==
literal|null
operator|||
name|attribute
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Invalid attribute requested "
operator|+
name|attribute
argument_list|)
throw|;
name|setNamedAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
DECL|method|getAttributes
specifier|public
specifier|synchronized
name|AttributeList
name|getAttributes
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
block|{
name|AttributeList
name|al
init|=
operator|new
name|AttributeList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Attribute
name|attr
init|=
name|getNamedAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|al
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Did not find attribute "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|al
return|;
block|}
DECL|method|setAttributes
specifier|public
specifier|synchronized
name|AttributeList
name|setAttributes
parameter_list|(
name|AttributeList
name|list
parameter_list|)
block|{
name|AttributeList
name|results
init|=
operator|new
name|AttributeList
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|aList
range|:
name|list
control|)
block|{
name|Attribute
name|attr
init|=
operator|(
name|Attribute
operator|)
name|aList
decl_stmt|;
if|if
condition|(
name|setNamedAttribute
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to update attribute name "
operator|+
name|attr
operator|.
name|getName
argument_list|()
operator|+
literal|" with value "
operator|+
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|results
return|;
block|}
DECL|method|invoke
specifier|public
name|Object
name|invoke
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
index|[]
name|args
parameter_list|,
name|String
index|[]
name|sig
parameter_list|)
throws|throws
name|MBeanException
throws|,
name|ReflectionException
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Invoke method called on "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|MBeanOperationInfo
name|opInfo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MBeanOperationInfo
name|op
range|:
name|operationsInfo
control|)
block|{
if|if
condition|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|opInfo
operator|=
name|op
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|opInfo
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Operation "
operator|+
name|name
operator|+
literal|" not in ModelMBeanInfo"
decl_stmt|;
throw|throw
operator|new
name|MBeanException
argument_list|(
operator|new
name|ServiceNotFoundException
argument_list|(
name|msg
argument_list|)
argument_list|,
name|msg
argument_list|)
throw|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
operator|new
name|Class
index|[
name|sig
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|classes
index|[
name|i
index|]
operator|=
name|getClassForName
argument_list|(
name|sig
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Method
name|method
init|=
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|classes
argument_list|)
decl_stmt|;
return|return
name|method
operator|.
name|invoke
argument_list|(
name|getObject
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MBeanException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getObject
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|obj
return|;
block|}
DECL|method|getClassForName
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getClassForName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
return|return
name|Classes
operator|.
name|getDefaultClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// Could be a primitive - let's check
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|primitive
range|:
name|primitives
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|primitive
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|primitive
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Class "
operator|+
name|name
operator|+
literal|" cannot be found"
argument_list|)
throw|;
block|}
DECL|method|findGroupName
specifier|private
name|String
name|findGroupName
parameter_list|()
block|{
name|Class
name|objClass
init|=
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|objClass
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
name|Method
index|[]
name|methods
init|=
name|objClass
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|ManagedGroupName
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|String
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|getObject
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to get group name for ["
operator|+
name|getObject
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|objClass
operator|=
name|objClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|findDescription
specifier|private
name|String
name|findDescription
parameter_list|()
block|{
name|MBean
name|mbean
init|=
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|MBean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mbean
operator|!=
literal|null
operator|&&
name|mbean
operator|.
name|description
argument_list|()
operator|!=
literal|null
operator|&&
name|mbean
operator|.
name|description
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|mbean
operator|.
name|description
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|findMethods
specifier|private
name|void
name|findMethods
parameter_list|(
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|AttributeEntry
argument_list|>
name|attributesBuilder
parameter_list|,
name|List
argument_list|<
name|MBeanOperationInfo
argument_list|>
name|ops
parameter_list|)
block|{
comment|// find all methods but don't include methods from Object class
name|List
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Method
argument_list|>
name|objectMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Object
operator|.
name|class
operator|.
name|getMethods
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|methods
operator|.
name|removeAll
argument_list|(
name|objectMethods
argument_list|)
expr_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
comment|// does method have @ManagedAttribute annotation?
name|ManagedAttribute
name|attr
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|ManagedAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|&&
operator|!
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
operator|!
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isWarnEnabled
argument_list|()
condition|)
name|logger
operator|.
name|warn
argument_list|(
literal|"method name "
operator|+
name|methodName
operator|+
literal|" doesn't start with \"get\", \"set\", or \"is\""
operator|+
literal|", but is annotated with @ManagedAttribute: will be ignored"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MBeanAttributeInfo
name|info
decl_stmt|;
name|String
name|attributeName
init|=
literal|null
decl_stmt|;
name|boolean
name|writeAttribute
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isSetMethod
argument_list|(
name|method
argument_list|)
condition|)
block|{
comment|// setter
name|attributeName
operator|=
name|methodName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|MBeanAttributeInfo
argument_list|(
name|attributeName
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|attr
operator|.
name|description
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeAttribute
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// getter
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|java
operator|.
name|lang
operator|.
name|Void
operator|.
name|TYPE
condition|)
block|{
name|boolean
name|hasSetter
init|=
name|attributesBuilder
operator|.
name|containsKey
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
comment|// we found is method
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
condition|)
block|{
name|attributeName
operator|=
name|methodName
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|MBeanAttributeInfo
argument_list|(
name|attributeName
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|attr
operator|.
name|description
argument_list|()
argument_list|,
literal|true
argument_list|,
name|hasSetter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this has to be get
name|attributeName
operator|=
name|methodName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|MBeanAttributeInfo
argument_list|(
name|attributeName
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|attr
operator|.
name|description
argument_list|()
argument_list|,
literal|true
argument_list|,
name|hasSetter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Method "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" must have a valid return type and zero parameters"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
name|AttributeEntry
name|ae
init|=
name|attributesBuilder
operator|.
name|get
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
comment|// is it a read method?
if|if
condition|(
operator|!
name|writeAttribute
condition|)
block|{
comment|// we already have annotated field as read
if|if
condition|(
name|ae
operator|instanceof
name|FieldAttributeEntry
operator|&&
name|ae
operator|.
name|getInfo
argument_list|()
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"not adding annotated method "
operator|+
name|method
operator|+
literal|" since we already have read attribute"
argument_list|)
expr_stmt|;
block|}
comment|// we already have annotated set method
elseif|else
if|if
condition|(
name|ae
operator|instanceof
name|MethodAttributeEntry
condition|)
block|{
name|MethodAttributeEntry
name|mae
init|=
operator|(
name|MethodAttributeEntry
operator|)
name|ae
decl_stmt|;
if|if
condition|(
name|mae
operator|.
name|hasSetMethod
argument_list|()
condition|)
block|{
name|attributesBuilder
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
operator|new
name|MethodAttributeEntry
argument_list|(
name|mae
operator|.
name|getInfo
argument_list|()
argument_list|,
name|mae
operator|.
name|getSetMethod
argument_list|()
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we don't have such entry
else|else
block|{
name|attributesBuilder
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
operator|new
name|MethodAttributeEntry
argument_list|(
name|info
argument_list|,
literal|null
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// is it a set method?
else|else
block|{
if|if
condition|(
name|ae
operator|instanceof
name|FieldAttributeEntry
condition|)
block|{
comment|// we already have annotated field as write
if|if
condition|(
name|ae
operator|.
name|getInfo
argument_list|()
operator|.
name|isWritable
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Not adding annotated method "
operator|+
name|methodName
operator|+
literal|" since we already have writable attribute"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we already have annotated field as read
comment|// lets make the field writable
name|Field
name|f
init|=
operator|(
operator|(
name|FieldAttributeEntry
operator|)
name|ae
operator|)
operator|.
name|getField
argument_list|()
decl_stmt|;
name|MBeanAttributeInfo
name|i
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
name|ae
operator|.
name|getInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|attr
operator|.
name|description
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|attributesBuilder
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
operator|new
name|FieldAttributeEntry
argument_list|(
name|i
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we already have annotated getOrIs method
elseif|else
if|if
condition|(
name|ae
operator|instanceof
name|MethodAttributeEntry
condition|)
block|{
name|MethodAttributeEntry
name|mae
init|=
operator|(
name|MethodAttributeEntry
operator|)
name|ae
decl_stmt|;
if|if
condition|(
name|mae
operator|.
name|hasIsOrGetMethod
argument_list|()
condition|)
block|{
name|attributesBuilder
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
operator|new
name|MethodAttributeEntry
argument_list|(
name|info
argument_list|,
name|method
argument_list|,
name|mae
operator|.
name|getIsOrGetMethod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we don't have such entry
else|else
block|{
name|attributesBuilder
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
operator|new
name|MethodAttributeEntry
argument_list|(
name|info
argument_list|,
name|method
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|ManagedOperation
operator|.
name|class
argument_list|)
condition|)
block|{
name|ManagedOperation
name|op
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|ManagedOperation
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|attName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSetMethod
argument_list|(
name|method
argument_list|)
operator|||
name|isGetMethod
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|attName
operator|=
name|attName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isIsMethod
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|attName
operator|=
name|attName
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// expose unless we already exposed matching attribute field
name|boolean
name|isAlreadyExposed
init|=
name|attributesBuilder
operator|.
name|containsKey
argument_list|(
name|attName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAlreadyExposed
condition|)
block|{
name|ops
operator|.
name|add
argument_list|(
operator|new
name|MBeanOperationInfo
argument_list|(
name|op
operator|!=
literal|null
condition|?
name|op
operator|.
name|description
argument_list|()
else|:
literal|""
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|isSetMethod
specifier|private
name|boolean
name|isSetMethod
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
operator|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|java
operator|.
name|lang
operator|.
name|Void
operator|.
name|TYPE
operator|)
return|;
block|}
DECL|method|isGetMethod
specifier|private
name|boolean
name|isGetMethod
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
operator|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|java
operator|.
name|lang
operator|.
name|Void
operator|.
name|TYPE
operator|&&
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|)
return|;
block|}
DECL|method|isIsMethod
specifier|private
name|boolean
name|isIsMethod
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
operator|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|boolean
operator|.
name|class
operator|||
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|Boolean
operator|.
name|class
operator|)
operator|&&
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
operator|)
return|;
block|}
DECL|method|findFields
specifier|private
name|void
name|findFields
parameter_list|(
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|AttributeEntry
argument_list|>
name|attributesBuilder
parameter_list|)
block|{
comment|// traverse class hierarchy and find all annotated fields
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
init|;
name|clazz
operator|!=
literal|null
condition|;
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
name|Field
index|[]
name|fields
init|=
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|ManagedAttribute
name|attr
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ManagedAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|String
name|fieldName
init|=
name|renameToJavaCodingConvention
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|info
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
name|fieldName
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|attr
operator|.
name|description
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|attr
operator|.
name|writable
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|attributesBuilder
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
operator|new
name|FieldAttributeEntry
argument_list|(
name|info
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getNamedAttribute
specifier|private
name|Attribute
name|getNamedAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Attribute
name|result
init|=
literal|null
decl_stmt|;
name|AttributeEntry
name|entry
init|=
name|attributes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|MBeanAttributeInfo
name|i
init|=
name|entry
operator|.
name|getInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|=
operator|new
name|Attribute
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|logger
operator|.
name|debug
argument_list|(
literal|"Attribute "
operator|+
name|name
operator|+
literal|" has r="
operator|+
name|i
operator|.
name|isReadable
argument_list|()
operator|+
literal|",w="
operator|+
name|i
operator|.
name|isWritable
argument_list|()
operator|+
literal|",is="
operator|+
name|i
operator|.
name|isIs
argument_list|()
operator|+
literal|" and value "
operator|+
name|result
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Exception while reading value of attribute "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Did not find queried attribute with name "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|setNamedAttribute
specifier|private
name|boolean
name|setNamedAttribute
parameter_list|(
name|Attribute
name|attribute
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|logger
operator|.
name|debug
argument_list|(
literal|"Invoking set on attribute "
operator|+
name|attribute
operator|.
name|getName
argument_list|()
operator|+
literal|" with value "
operator|+
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|AttributeEntry
name|entry
init|=
name|attributes
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|entry
operator|.
name|invoke
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Exception while writing value for attribute "
operator|+
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Could not invoke set on attribute "
operator|+
name|attribute
operator|.
name|getName
argument_list|()
operator|+
literal|" with value "
operator|+
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|renameToJavaCodingConvention
specifier|private
name|String
name|renameToJavaCodingConvention
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|fieldName
operator|.
name|contains
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"_."
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|m
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
name|fieldName
operator|.
name|substring
argument_list|(
name|m
operator|.
name|end
argument_list|()
operator|-
literal|1
argument_list|,
name|m
operator|.
name|end
argument_list|()
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|char
name|first
init|=
name|sb
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|first
argument_list|)
condition|)
block|{
name|sb
operator|.
name|setCharAt
argument_list|(
literal|0
argument_list|,
name|Character
operator|.
name|toUpperCase
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|fieldName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|fieldName
return|;
block|}
block|}
block|}
DECL|class|MethodAttributeEntry
specifier|private
class|class
name|MethodAttributeEntry
implements|implements
name|AttributeEntry
block|{
DECL|field|info
specifier|final
name|MBeanAttributeInfo
name|info
decl_stmt|;
DECL|field|isOrGetmethod
specifier|final
name|Method
name|isOrGetmethod
decl_stmt|;
DECL|field|setMethod
specifier|final
name|Method
name|setMethod
decl_stmt|;
DECL|method|MethodAttributeEntry
specifier|public
name|MethodAttributeEntry
parameter_list|(
specifier|final
name|MBeanAttributeInfo
name|info
parameter_list|,
specifier|final
name|Method
name|setMethod
parameter_list|,
specifier|final
name|Method
name|isOrGetMethod
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|setMethod
operator|=
name|setMethod
expr_stmt|;
name|this
operator|.
name|isOrGetmethod
operator|=
name|isOrGetMethod
expr_stmt|;
block|}
DECL|method|invoke
specifier|public
name|Object
name|invoke
parameter_list|(
name|Attribute
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|&&
name|isOrGetmethod
operator|!=
literal|null
condition|)
return|return
name|isOrGetmethod
operator|.
name|invoke
argument_list|(
name|getObject
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|setMethod
operator|!=
literal|null
condition|)
return|return
name|setMethod
operator|.
name|invoke
argument_list|(
name|getObject
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
DECL|method|getInfo
specifier|public
name|MBeanAttributeInfo
name|getInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
DECL|method|hasIsOrGetMethod
specifier|public
name|boolean
name|hasIsOrGetMethod
parameter_list|()
block|{
return|return
name|isOrGetmethod
operator|!=
literal|null
return|;
block|}
DECL|method|hasSetMethod
specifier|public
name|boolean
name|hasSetMethod
parameter_list|()
block|{
return|return
name|setMethod
operator|!=
literal|null
return|;
block|}
DECL|method|getIsOrGetMethod
specifier|public
name|Method
name|getIsOrGetMethod
parameter_list|()
block|{
return|return
name|isOrGetmethod
return|;
block|}
DECL|method|getSetMethod
specifier|public
name|Method
name|getSetMethod
parameter_list|()
block|{
return|return
name|setMethod
return|;
block|}
block|}
DECL|class|FieldAttributeEntry
specifier|private
class|class
name|FieldAttributeEntry
implements|implements
name|AttributeEntry
block|{
DECL|field|info
specifier|private
specifier|final
name|MBeanAttributeInfo
name|info
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|Field
name|field
decl_stmt|;
DECL|method|FieldAttributeEntry
specifier|public
name|FieldAttributeEntry
parameter_list|(
specifier|final
name|MBeanAttributeInfo
name|info
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isAccessible
argument_list|()
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getField
specifier|public
name|Field
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|invoke
specifier|public
name|Object
name|invoke
parameter_list|(
name|Attribute
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
name|field
operator|.
name|get
argument_list|(
name|getObject
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|field
operator|.
name|set
argument_list|(
name|getObject
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|getInfo
specifier|public
name|MBeanAttributeInfo
name|getInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
block|}
DECL|interface|AttributeEntry
specifier|private
interface|interface
name|AttributeEntry
block|{
DECL|method|invoke
specifier|public
name|Object
name|invoke
parameter_list|(
name|Attribute
name|a
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|getInfo
specifier|public
name|MBeanAttributeInfo
name|getInfo
parameter_list|()
function_decl|;
block|}
DECL|method|isManagedResource
specifier|public
name|boolean
name|isManagedResource
parameter_list|()
block|{
return|return
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|operations
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getFullObjectName
specifier|public
name|String
name|getFullObjectName
parameter_list|()
block|{
return|return
name|this
operator|.
name|fullObjectName
return|;
block|}
DECL|method|getObjectName
specifier|public
name|String
name|getObjectName
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectName
return|;
block|}
DECL|method|getGroupName
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|this
operator|.
name|groupName
return|;
block|}
block|}
end_class

end_unit

