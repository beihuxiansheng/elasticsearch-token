begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.jmx
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|matcher
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|TypeEncounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|TypeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|jmx
operator|.
name|action
operator|.
name|GetJmxServiceUrlAction
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|JmxModule
specifier|public
class|class
name|JmxModule
extends|extends
name|AbstractModule
block|{
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|method|JmxModule
specifier|public
name|JmxModule
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
DECL|method|configure
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|JmxService
name|jmxService
init|=
operator|new
name|JmxService
argument_list|(
name|Loggers
operator|.
name|getLogger
argument_list|(
name|JmxService
operator|.
name|class
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|bind
argument_list|(
name|JmxService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|jmxService
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GetJmxServiceUrlAction
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bindListener
argument_list|(
name|Matchers
operator|.
name|any
argument_list|()
argument_list|,
operator|new
name|JmxExporterTypeListener
argument_list|(
name|jmxService
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|JmxExporterTypeListener
specifier|private
specifier|static
class|class
name|JmxExporterTypeListener
implements|implements
name|TypeListener
block|{
DECL|field|jmxService
specifier|private
specifier|final
name|JmxService
name|jmxService
decl_stmt|;
DECL|method|JmxExporterTypeListener
specifier|private
name|JmxExporterTypeListener
parameter_list|(
name|JmxService
name|jmxService
parameter_list|)
block|{
name|this
operator|.
name|jmxService
operator|=
name|jmxService
expr_stmt|;
block|}
DECL|method|hear
annotation|@
name|Override
specifier|public
parameter_list|<
name|I
parameter_list|>
name|void
name|hear
parameter_list|(
name|TypeLiteral
argument_list|<
name|I
argument_list|>
name|typeLiteral
parameter_list|,
name|TypeEncounter
argument_list|<
name|I
argument_list|>
name|typeEncounter
parameter_list|)
block|{
name|Class
argument_list|<
name|?
super|super
name|I
argument_list|>
name|type
init|=
name|typeLiteral
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isAnnotationPresent
argument_list|(
name|MBean
operator|.
name|class
argument_list|)
condition|)
block|{
name|typeEncounter
operator|.
name|register
argument_list|(
operator|new
name|JmxExporterInjectionListener
argument_list|<
name|I
argument_list|>
argument_list|(
name|jmxService
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|JmxExporterInjectionListener
specifier|private
specifier|static
class|class
name|JmxExporterInjectionListener
parameter_list|<
name|I
parameter_list|>
implements|implements
name|InjectionListener
argument_list|<
name|I
argument_list|>
block|{
DECL|field|jmxService
specifier|private
specifier|final
name|JmxService
name|jmxService
decl_stmt|;
DECL|method|JmxExporterInjectionListener
specifier|private
name|JmxExporterInjectionListener
parameter_list|(
name|JmxService
name|jmxService
parameter_list|)
block|{
name|this
operator|.
name|jmxService
operator|=
name|jmxService
expr_stmt|;
block|}
DECL|method|afterInjection
annotation|@
name|Override
specifier|public
name|void
name|afterInjection
parameter_list|(
name|I
name|instance
parameter_list|)
block|{
name|jmxService
operator|.
name|registerMBean
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

