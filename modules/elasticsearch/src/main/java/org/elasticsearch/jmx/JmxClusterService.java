begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.jmx
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|jmx
operator|.
name|action
operator|.
name|GetJmxServiceUrlAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DynamicExecutors
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_comment
comment|// TODO Disabled for now. Can be used to mbean proxy other nodes in the cluster from within the same console. Need the jmxruntime_optional jars though..,
end_comment

begin_class
DECL|class|JmxClusterService
specifier|public
class|class
name|JmxClusterService
extends|extends
name|AbstractComponent
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|jmxService
specifier|private
specifier|final
name|JmxService
name|jmxService
decl_stmt|;
DECL|field|getJmxServiceUrlAction
specifier|private
specifier|final
name|GetJmxServiceUrlAction
name|getJmxServiceUrlAction
decl_stmt|;
DECL|field|clusterNodesJmxUpdater
specifier|private
specifier|final
name|ExecutorService
name|clusterNodesJmxUpdater
decl_stmt|;
DECL|method|JmxClusterService
specifier|public
name|JmxClusterService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|JmxService
name|jmxService
parameter_list|,
specifier|final
name|GetJmxServiceUrlAction
name|getJmxServiceUrlAction
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|jmxService
operator|=
name|jmxService
expr_stmt|;
name|this
operator|.
name|getJmxServiceUrlAction
operator|=
name|getJmxServiceUrlAction
expr_stmt|;
name|this
operator|.
name|clusterNodesJmxUpdater
operator|=
name|newSingleThreadExecutor
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"jmxService#updateTask"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|jmxService
operator|.
name|publishUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clusterService
operator|.
name|add
argument_list|(
operator|new
name|JmxClusterEventListener
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Node
name|node
range|:
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
control|)
block|{
name|clusterNodesJmxUpdater
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|nodeServiceUrl
init|=
name|getJmxServiceUrlAction
operator|.
name|obtainPublishUrl
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|registerNode
argument_list|(
name|node
argument_list|,
name|nodeServiceUrl
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|clusterNodesJmxUpdater
operator|!=
literal|null
condition|)
block|{
name|clusterNodesJmxUpdater
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|registerNode
specifier|private
name|void
name|registerNode
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|nodeServiceUrl
parameter_list|)
block|{
try|try
block|{
name|JMXServiceURL
name|jmxServiceURL
init|=
operator|new
name|JMXServiceURL
argument_list|(
name|nodeServiceUrl
argument_list|)
decl_stmt|;
name|JMXConnector
name|jmxConnector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|jmxServiceURL
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|connection
init|=
name|jmxConnector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
comment|//            for (ObjectName objectName : connection.queryNames(null, null)) {
comment|//                try {
comment|//                    MBeanProxy mBeanProxy = new MBeanProxy(remoteName, connection);
comment|//                } catch (InstanceAlreadyExistsException e) {
comment|//                    // ignore
comment|//                } catch (Exception e) {
comment|//                    logger.warn("Failed to register proxy mbean", e);
comment|//                }
comment|//            }
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to register node ["
operator|+
name|node
operator|+
literal|"] with serviceUrl ["
operator|+
name|nodeServiceUrl
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|JmxClusterEventListener
specifier|private
class|class
name|JmxClusterEventListener
implements|implements
name|ClusterStateListener
block|{
DECL|method|clusterChanged
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|nodesChanged
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|Node
name|node
range|:
name|event
operator|.
name|nodesDelta
argument_list|()
operator|.
name|addedNodes
argument_list|()
control|)
block|{
name|clusterNodesJmxUpdater
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|nodeServiceUrl
init|=
name|getJmxServiceUrlAction
operator|.
name|obtainPublishUrl
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|registerNode
argument_list|(
name|node
argument_list|,
name|nodeServiceUrl
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

