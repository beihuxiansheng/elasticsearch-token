begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|JsonBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|HttpJsonBuilder
specifier|public
class|class
name|HttpJsonBuilder
block|{
DECL|method|cached
specifier|public
specifier|static
name|JsonBuilder
name|cached
parameter_list|(
name|HttpRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|JsonBuilder
name|builder
init|=
name|JsonBuilder
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|String
name|prettyPrint
init|=
name|request
operator|.
name|param
argument_list|(
literal|"pretty"
argument_list|)
decl_stmt|;
if|if
condition|(
name|prettyPrint
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|prettyPrint
argument_list|)
condition|)
block|{
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

