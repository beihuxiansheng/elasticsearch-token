begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchOperationThreading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|action
operator|.
name|support
operator|.
name|HttpActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|action
operator|.
name|support
operator|.
name|HttpJsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|json
operator|.
name|JsonQueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|json
operator|.
name|QueryStringJsonQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|Scroll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|JsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpResponse
operator|.
name|Status
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|HttpSearchAction
specifier|public
class|class
name|HttpSearchAction
extends|extends
name|BaseHttpServerHandler
block|{
DECL|field|fieldsPattern
specifier|public
specifier|final
specifier|static
name|Pattern
name|fieldsPattern
decl_stmt|;
static|static
block|{
name|fieldsPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
DECL|method|HttpSearchAction
annotation|@
name|Inject
specifier|public
name|HttpSearchAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|HttpServer
name|httpService
parameter_list|,
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|httpService
operator|.
name|registerHandler
argument_list|(
name|HttpRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_search"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|httpService
operator|.
name|registerHandler
argument_list|(
name|HttpRequest
operator|.
name|Method
operator|.
name|POST
argument_list|,
literal|"/_search"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|httpService
operator|.
name|registerHandler
argument_list|(
name|HttpRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/{index}/_search"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|httpService
operator|.
name|registerHandler
argument_list|(
name|HttpRequest
operator|.
name|Method
operator|.
name|POST
argument_list|,
literal|"/{index}/_search"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|httpService
operator|.
name|registerHandler
argument_list|(
name|HttpRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/{index}/{type}/_search"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|httpService
operator|.
name|registerHandler
argument_list|(
name|HttpRequest
operator|.
name|Method
operator|.
name|POST
argument_list|,
literal|"/{index}/{type}/_search"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|handleRequest
annotation|@
name|Override
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|HttpRequest
name|request
parameter_list|,
specifier|final
name|HttpChannel
name|channel
parameter_list|)
block|{
name|SearchRequest
name|searchRequest
decl_stmt|;
try|try
block|{
name|searchRequest
operator|=
name|parseSearchRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|listenerThreaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SearchOperationThreading
name|operationThreading
init|=
name|SearchOperationThreading
operator|.
name|fromString
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"operationThreading"
argument_list|)
argument_list|,
name|SearchOperationThreading
operator|.
name|SINGLE_THREAD
argument_list|)
decl_stmt|;
if|if
condition|(
name|operationThreading
operator|==
name|SearchOperationThreading
operator|.
name|NO_THREADS
condition|)
block|{
comment|// since we don't spawn, don't allow no_threads, but change it to a single thread
name|operationThreading
operator|=
name|SearchOperationThreading
operator|.
name|SINGLE_THREAD
expr_stmt|;
block|}
name|searchRequest
operator|.
name|operationThreading
argument_list|(
name|operationThreading
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|JsonHttpResponse
argument_list|(
name|request
argument_list|,
name|BAD_REQUEST
argument_list|,
name|JsonBuilder
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"error"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to send failure response"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|client
operator|.
name|execSearch
argument_list|(
name|searchRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|SearchResponse
name|result
parameter_list|)
block|{
try|try
block|{
name|JsonBuilder
name|builder
init|=
name|HttpJsonBuilder
operator|.
name|cached
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|result
operator|.
name|toJson
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|JsonHttpResponse
argument_list|(
name|request
argument_list|,
name|OK
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|JsonThrowableHttpResponse
argument_list|(
name|request
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to send failure response"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|spawn
annotation|@
name|Override
specifier|public
name|boolean
name|spawn
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|parseSearchRequest
specifier|private
name|SearchRequest
name|parseSearchRequest
parameter_list|(
name|HttpRequest
name|request
parameter_list|)
block|{
name|String
index|[]
name|indices
init|=
name|HttpActions
operator|.
name|splitIndices
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"index"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|(
name|indices
argument_list|,
name|parseSearchSource
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|searchType
init|=
name|request
operator|.
name|param
argument_list|(
literal|"searchType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"dfs_query_then_fetch"
operator|.
name|equals
argument_list|(
name|searchType
argument_list|)
condition|)
block|{
name|searchRequest
operator|.
name|searchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dfs_query_and_fetch"
operator|.
name|equals
argument_list|(
name|searchType
argument_list|)
condition|)
block|{
name|searchRequest
operator|.
name|searchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_AND_FETCH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"query_then_fetch"
operator|.
name|equals
argument_list|(
name|searchType
argument_list|)
condition|)
block|{
name|searchRequest
operator|.
name|searchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"query_and_fetch"
operator|.
name|equals
argument_list|(
name|searchType
argument_list|)
condition|)
block|{
name|searchRequest
operator|.
name|searchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No search type for ["
operator|+
name|searchType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|searchRequest
operator|.
name|searchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
expr_stmt|;
block|}
name|String
name|from
init|=
name|request
operator|.
name|param
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|searchRequest
operator|.
name|from
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|size
init|=
name|request
operator|.
name|param
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|searchRequest
operator|.
name|size
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO query boost per index
comment|//        searchRequest.queryBoost();
name|String
name|scroll
init|=
name|request
operator|.
name|param
argument_list|(
literal|"scroll"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scroll
operator|!=
literal|null
condition|)
block|{
name|searchRequest
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|scroll
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|timeout
init|=
name|request
operator|.
name|param
argument_list|(
literal|"timeout"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|searchRequest
operator|.
name|timeout
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|timeout
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|typesParam
init|=
name|request
operator|.
name|param
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typesParam
operator|!=
literal|null
condition|)
block|{
name|searchRequest
operator|.
name|types
argument_list|(
name|HttpActions
operator|.
name|splitTypes
argument_list|(
name|typesParam
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|searchRequest
operator|.
name|queryHint
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"queryHint"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|searchRequest
return|;
block|}
DECL|method|parseSearchSource
specifier|private
name|String
name|parseSearchSource
parameter_list|(
name|HttpRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasContent
argument_list|()
condition|)
block|{
return|return
name|request
operator|.
name|contentAsString
argument_list|()
return|;
block|}
name|String
name|queryString
init|=
name|request
operator|.
name|param
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No query to execute, not in body, and not bounded to 'q' parameter"
argument_list|)
throw|;
block|}
name|QueryStringJsonQueryBuilder
name|queryBuilder
init|=
name|JsonQueryBuilders
operator|.
name|queryString
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|defaultField
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"df"
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|analyzer
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"analyzer"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|defaultOperator
init|=
name|request
operator|.
name|param
argument_list|(
literal|"defaultOperator"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultOperator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"OR"
operator|.
name|equals
argument_list|(
name|defaultOperator
argument_list|)
condition|)
block|{
name|queryBuilder
operator|.
name|defualtOperator
argument_list|(
name|QueryStringJsonQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AND"
operator|.
name|equals
argument_list|(
name|defaultOperator
argument_list|)
condition|)
block|{
name|queryBuilder
operator|.
name|defualtOperator
argument_list|(
name|QueryStringJsonQueryBuilder
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Unsupported defaultOperator ["
operator|+
name|defaultOperator
operator|+
literal|"], can either be [OR] or [AND]"
argument_list|)
throw|;
block|}
block|}
comment|// TODO add different parameters to the query
name|SearchSourceBuilder
name|searchSourceBuilder
init|=
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|queryBuilder
argument_list|)
decl_stmt|;
name|searchSourceBuilder
operator|.
name|queryParserName
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"queryParserName"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|explain
init|=
name|request
operator|.
name|param
argument_list|(
literal|"explain"
argument_list|)
decl_stmt|;
if|if
condition|(
name|explain
operator|!=
literal|null
condition|)
block|{
name|searchSourceBuilder
operator|.
name|explain
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|explain
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|request
operator|.
name|params
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
operator|!
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|fields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
name|String
name|sField
init|=
name|request
operator|.
name|param
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|sFields
init|=
name|fieldsPattern
operator|.
name|split
argument_list|(
name|sField
argument_list|)
decl_stmt|;
if|if
condition|(
name|sFields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|sFields
control|)
block|{
name|searchSourceBuilder
operator|.
name|field
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|sorts
init|=
name|request
operator|.
name|params
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sorts
operator|!=
literal|null
operator|&&
operator|!
name|sorts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|sort
range|:
name|sorts
control|)
block|{
name|int
name|delimiter
init|=
name|sort
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|delimiter
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|sortField
init|=
name|sort
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|delimiter
argument_list|)
decl_stmt|;
name|String
name|reverse
init|=
name|sort
operator|.
name|substring
argument_list|(
name|delimiter
operator|+
literal|1
argument_list|)
decl_stmt|;
name|searchSourceBuilder
operator|.
name|sort
argument_list|(
name|sortField
argument_list|,
name|reverse
operator|.
name|equals
argument_list|(
literal|"reverse"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|searchSourceBuilder
operator|.
name|sort
argument_list|(
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// TODO add different parameters to the source
return|return
name|searchSourceBuilder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

