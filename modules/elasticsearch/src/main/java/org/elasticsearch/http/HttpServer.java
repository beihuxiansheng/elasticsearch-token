begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|TransportNodesInfoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BytesRestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|StringRestResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|HttpServer
specifier|public
class|class
name|HttpServer
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|HttpServer
argument_list|>
block|{
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|transport
specifier|private
specifier|final
name|HttpServerTransport
name|transport
decl_stmt|;
DECL|field|restController
specifier|private
specifier|final
name|RestController
name|restController
decl_stmt|;
DECL|field|nodesInfoAction
specifier|private
specifier|final
name|TransportNodesInfoAction
name|nodesInfoAction
decl_stmt|;
DECL|field|disableSites
specifier|private
specifier|final
name|boolean
name|disableSites
decl_stmt|;
DECL|method|HttpServer
annotation|@
name|Inject
specifier|public
name|HttpServer
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|HttpServerTransport
name|transport
parameter_list|,
name|RestController
name|restController
parameter_list|,
name|TransportNodesInfoAction
name|nodesInfoAction
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|restController
operator|=
name|restController
expr_stmt|;
name|this
operator|.
name|nodesInfoAction
operator|=
name|nodesInfoAction
expr_stmt|;
name|this
operator|.
name|disableSites
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"disable_sites"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|transport
operator|.
name|httpServerAdapter
argument_list|(
operator|new
name|Dispatcher
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|Dispatcher
specifier|static
class|class
name|Dispatcher
implements|implements
name|HttpServerAdapter
block|{
DECL|field|server
specifier|private
specifier|final
name|HttpServer
name|server
decl_stmt|;
DECL|method|Dispatcher
name|Dispatcher
parameter_list|(
name|HttpServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
DECL|method|dispatchRequest
annotation|@
name|Override
specifier|public
name|void
name|dispatchRequest
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpChannel
name|channel
parameter_list|)
block|{
name|server
operator|.
name|internalDispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doStart
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|transport
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|transport
operator|.
name|boundAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nodesInfoAction
operator|.
name|putNodeAttribute
argument_list|(
literal|"http_address"
argument_list|,
name|transport
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|nodesInfoAction
operator|.
name|removeNodeAttribute
argument_list|(
literal|"http_address"
argument_list|)
expr_stmt|;
name|transport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|doClose
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|internalDispatchRequest
specifier|public
name|void
name|internalDispatchRequest
parameter_list|(
specifier|final
name|HttpRequest
name|request
parameter_list|,
specifier|final
name|HttpChannel
name|channel
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|rawPath
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/_plugin/"
argument_list|)
condition|)
block|{
name|handlePluginSite
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|OPTIONS
condition|)
block|{
comment|// when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gets automatically added)
name|StringRestResponse
name|response
init|=
operator|new
name|StringRestResponse
argument_list|(
name|OK
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringRestResponse
argument_list|(
name|BAD_REQUEST
argument_list|,
literal|"No handler found for uri ["
operator|+
name|request
operator|.
name|uri
argument_list|()
operator|+
literal|"] and method ["
operator|+
name|request
operator|.
name|method
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handlePluginSite
specifier|private
name|void
name|handlePluginSite
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpChannel
name|channel
parameter_list|)
block|{
if|if
condition|(
name|disableSites
condition|)
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringRestResponse
argument_list|(
name|FORBIDDEN
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|request
operator|.
name|method
argument_list|()
operator|!=
name|RestRequest
operator|.
name|Method
operator|.
name|GET
condition|)
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringRestResponse
argument_list|(
name|FORBIDDEN
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|i1
init|=
name|request
operator|.
name|rawPath
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
name|i1
operator|==
operator|-
literal|1
condition|)
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringRestResponse
argument_list|(
name|NOT_FOUND
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|pluginName
init|=
name|request
operator|.
name|rawPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|9
argument_list|,
name|i1
argument_list|)
decl_stmt|;
name|String
name|sitePath
init|=
name|request
operator|.
name|rawPath
argument_list|()
operator|.
name|substring
argument_list|(
name|i1
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|sitePath
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sitePath
operator|=
literal|"/index.html"
expr_stmt|;
block|}
comment|// Convert file separators.
name|sitePath
operator|=
name|sitePath
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
comment|// this is a plugin provided site, serve it as static files from the plugin location
name|File
name|siteFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|environment
operator|.
name|pluginsFile
argument_list|()
argument_list|,
name|pluginName
argument_list|)
argument_list|,
literal|"_site"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|siteFile
argument_list|,
name|sitePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|isHidden
argument_list|()
condition|)
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringRestResponse
argument_list|(
name|NOT_FOUND
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringRestResponse
argument_list|(
name|FORBIDDEN
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|siteFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringRestResponse
argument_list|(
name|FORBIDDEN
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|byte
index|[]
name|data
init|=
name|Streams
operator|.
name|copyToByteArray
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|BytesRestResponse
argument_list|(
name|data
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringRestResponse
argument_list|(
name|INTERNAL_SERVER_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

