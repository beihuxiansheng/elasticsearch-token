begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.action.admin.cluster.node.shutdown
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|shutdown
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ListenableActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|shutdown
operator|.
name|NodesShutdownRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|shutdown
operator|.
name|NodesShutdownResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainListenableActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|internal
operator|.
name|InternalClusterAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|NodesShutdownRequestBuilder
specifier|public
class|class
name|NodesShutdownRequestBuilder
block|{
DECL|field|clusterClient
specifier|private
specifier|final
name|InternalClusterAdminClient
name|clusterClient
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|NodesShutdownRequest
name|request
decl_stmt|;
DECL|method|NodesShutdownRequestBuilder
specifier|public
name|NodesShutdownRequestBuilder
parameter_list|(
name|InternalClusterAdminClient
name|clusterClient
parameter_list|)
block|{
name|this
operator|.
name|clusterClient
operator|=
name|clusterClient
expr_stmt|;
name|this
operator|.
name|request
operator|=
operator|new
name|NodesShutdownRequest
argument_list|()
expr_stmt|;
block|}
comment|/**      * The nodes ids to restart.      */
DECL|method|setNodesIds
specifier|public
name|NodesShutdownRequestBuilder
name|setNodesIds
parameter_list|(
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
name|request
operator|.
name|nodesIds
argument_list|(
name|nodesIds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The delay for the restart to occur. Defaults to<tt>1s</tt>.      */
DECL|method|setDelay
specifier|public
name|NodesShutdownRequestBuilder
name|setDelay
parameter_list|(
name|TimeValue
name|delay
parameter_list|)
block|{
name|request
operator|.
name|delay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The delay for the restart to occur. Defaults to<tt>1s</tt>.      */
DECL|method|setDelay
specifier|public
name|NodesShutdownRequestBuilder
name|setDelay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|request
operator|.
name|delay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Executes the operation asynchronously and returns a future.      */
DECL|method|execute
specifier|public
name|ListenableActionFuture
argument_list|<
name|NodesShutdownResponse
argument_list|>
name|execute
parameter_list|()
block|{
name|PlainListenableActionFuture
argument_list|<
name|NodesShutdownResponse
argument_list|>
name|future
init|=
operator|new
name|PlainListenableActionFuture
argument_list|<
name|NodesShutdownResponse
argument_list|>
argument_list|(
name|request
operator|.
name|listenerThreaded
argument_list|()
argument_list|,
name|clusterClient
operator|.
name|threadPool
argument_list|()
argument_list|)
decl_stmt|;
name|clusterClient
operator|.
name|nodesShutdown
argument_list|(
name|request
argument_list|,
name|future
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
comment|/**      * Executes the operation asynchronously with the provided listener.      */
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|ActionListener
argument_list|<
name|NodesShutdownResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|clusterClient
operator|.
name|nodesShutdown
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

