begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|builder
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestXContentBuilder
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|XContentThrowableRestResponse
specifier|public
class|class
name|XContentThrowableRestResponse
extends|extends
name|XContentRestResponse
block|{
DECL|method|XContentThrowableRestResponse
specifier|public
name|XContentThrowableRestResponse
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|request
argument_list|,
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|XContentThrowableRestResponse
specifier|public
name|XContentThrowableRestResponse
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|Status
name|status
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|request
argument_list|,
name|status
argument_list|,
name|convert
argument_list|(
name|request
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|convert
specifier|private
specifier|static
name|XContentBuilder
name|convert
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|restContentBuilder
argument_list|(
name|request
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"error"
argument_list|,
name|detailedMessage
argument_list|(
name|t
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"error_trace"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"error_trace"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"cause"
argument_list|)
expr_stmt|;
block|}
name|buildThrowable
argument_list|(
name|t
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|buildThrowable
specifier|private
specifier|static
name|void
name|buildThrowable
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"message"
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StackTraceElement
name|stElement
range|:
name|t
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"at"
argument_list|)
operator|.
name|field
argument_list|(
literal|"class"
argument_list|,
name|stElement
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"method"
argument_list|,
name|stElement
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stElement
operator|.
name|getFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"file"
argument_list|,
name|stElement
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stElement
operator|.
name|getLineNumber
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"line"
argument_list|,
name|stElement
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

