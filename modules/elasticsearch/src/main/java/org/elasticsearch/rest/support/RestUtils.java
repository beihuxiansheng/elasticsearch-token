begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|UnsupportedCharsetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|RestUtils
specifier|public
class|class
name|RestUtils
block|{
DECL|method|decodeQueryString
specifier|public
specifier|static
name|void
name|decodeQueryString
parameter_list|(
name|String
name|queryString
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|fromIndex
operator|<
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|fromIndex
operator|>=
name|queryString
operator|.
name|length
argument_list|()
condition|)
block|{
return|return;
block|}
name|int
name|toIndex
decl_stmt|;
while|while
condition|(
operator|(
name|toIndex
operator|=
name|queryString
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|,
name|fromIndex
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|queryString
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|,
name|fromIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
name|params
operator|.
name|put
argument_list|(
name|decodeComponent
argument_list|(
name|queryString
operator|.
name|substring
argument_list|(
name|fromIndex
argument_list|,
name|idx
argument_list|)
argument_list|)
argument_list|,
name|decodeComponent
argument_list|(
name|queryString
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|,
name|toIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fromIndex
operator|=
name|toIndex
operator|+
literal|1
expr_stmt|;
block|}
name|int
name|idx
init|=
name|queryString
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|,
name|fromIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|params
operator|.
name|put
argument_list|(
name|decodeComponent
argument_list|(
name|queryString
operator|.
name|substring
argument_list|(
name|fromIndex
argument_list|,
name|idx
argument_list|)
argument_list|)
argument_list|,
name|decodeComponent
argument_list|(
name|queryString
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|decodeComponent
specifier|public
specifier|static
name|String
name|decodeComponent
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|numChars
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChars
condition|;
name|i
operator|++
control|)
block|{
comment|// do an initial check if it requires decoding do it and return
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'+'
operator|||
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'%'
condition|)
block|{
try|try
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|s
argument_list|,
literal|"UTF8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedCharsetException
argument_list|(
literal|"UTF8"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|s
return|;
block|}
block|}
end_class

end_unit

