begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastOperationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|builder
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|xcontent
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|xcontent
operator|.
name|QueryStringQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|RestActions
specifier|public
class|class
name|RestActions
block|{
DECL|field|indicesPattern
specifier|public
specifier|final
specifier|static
name|Pattern
name|indicesPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
decl_stmt|;
DECL|field|typesPattern
specifier|public
specifier|final
specifier|static
name|Pattern
name|typesPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
decl_stmt|;
DECL|field|nodesIdsPattern
specifier|public
specifier|final
specifier|static
name|Pattern
name|nodesIdsPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
decl_stmt|;
DECL|method|buildBroadcastShardsHeader
specifier|public
specifier|static
name|void
name|buildBroadcastShardsHeader
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|BroadcastOperationResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"_shards"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"total"
argument_list|,
name|response
operator|.
name|totalShards
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"successful"
argument_list|,
name|response
operator|.
name|successfulShards
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"failed"
argument_list|,
name|response
operator|.
name|failedShards
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|shardFailures
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"failures"
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardOperationFailedException
name|shardFailure
range|:
name|response
operator|.
name|shardFailures
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|shardFailure
operator|.
name|index
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|shardFailure
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardFailure
operator|.
name|shardId
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"shard"
argument_list|,
name|shardFailure
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"reason"
argument_list|,
name|shardFailure
operator|.
name|reason
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|parseQuerySource
specifier|public
specifier|static
name|byte
index|[]
name|parseQuerySource
parameter_list|(
name|RestRequest
name|request
parameter_list|)
block|{
name|String
name|queryString
init|=
name|request
operator|.
name|param
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No query to execute, not in body, and not bounded to 'q' parameter"
argument_list|)
throw|;
block|}
name|QueryStringQueryBuilder
name|queryBuilder
init|=
name|QueryBuilders
operator|.
name|queryString
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|defaultField
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"df"
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|analyzer
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"analyzer"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|defaultOperator
init|=
name|request
operator|.
name|param
argument_list|(
literal|"default_operator"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultOperator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"OR"
operator|.
name|equals
argument_list|(
name|defaultOperator
argument_list|)
condition|)
block|{
name|queryBuilder
operator|.
name|defaultOperator
argument_list|(
name|QueryStringQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AND"
operator|.
name|equals
argument_list|(
name|defaultOperator
argument_list|)
condition|)
block|{
name|queryBuilder
operator|.
name|defaultOperator
argument_list|(
name|QueryStringQueryBuilder
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Unsupported defaultOperator ["
operator|+
name|defaultOperator
operator|+
literal|"], can either be [OR] or [AND]"
argument_list|)
throw|;
block|}
block|}
return|return
name|queryBuilder
operator|.
name|buildAsBytes
argument_list|()
return|;
block|}
DECL|method|splitIndices
specifier|public
specifier|static
name|String
index|[]
name|splitIndices
parameter_list|(
name|String
name|indices
parameter_list|)
block|{
if|if
condition|(
name|indices
operator|==
literal|null
condition|)
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
return|return
name|indicesPattern
operator|.
name|split
argument_list|(
name|indices
argument_list|)
return|;
block|}
DECL|method|splitTypes
specifier|public
specifier|static
name|String
index|[]
name|splitTypes
parameter_list|(
name|String
name|typeNames
parameter_list|)
block|{
return|return
name|typesPattern
operator|.
name|split
argument_list|(
name|typeNames
argument_list|)
return|;
block|}
DECL|method|splitNodes
specifier|public
specifier|static
name|String
index|[]
name|splitNodes
parameter_list|(
name|String
name|nodes
parameter_list|)
block|{
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
return|return
name|nodesIdsPattern
operator|.
name|split
argument_list|(
name|nodes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

