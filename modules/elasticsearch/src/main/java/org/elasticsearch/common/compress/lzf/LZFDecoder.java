begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this  * file except in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS  * OF ANY KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress.lzf
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * Decoder that handles decoding of sequence of encoded LZF chunks,  * combining them into a single contiguous result byte array  *  * @author tatu@ning.com  */
end_comment

begin_class
DECL|class|LZFDecoder
specifier|public
class|class
name|LZFDecoder
block|{
DECL|field|BYTE_NULL
specifier|private
specifier|final
specifier|static
name|byte
name|BYTE_NULL
init|=
literal|0
decl_stmt|;
DECL|field|HEADER_BYTES
specifier|private
specifier|final
specifier|static
name|int
name|HEADER_BYTES
init|=
literal|5
decl_stmt|;
comment|// static methods, no need to instantiate
DECL|method|LZFDecoder
specifier|private
name|LZFDecoder
parameter_list|()
block|{     }
comment|/**      * Method for decompressing a block of input data encoded in LZF      * block structure (compatible with lzf command line utility),      * and can consist of any number of blocks.      * Note that input MUST consists of a sequence of one or more complete      * chunks; partial chunks can not be handled.      */
DECL|method|decode
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
specifier|final
name|byte
index|[]
name|inputBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|calculateUncompressedSize
argument_list|(
name|inputBuffer
argument_list|,
literal|0
argument_list|,
name|inputBuffer
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|decode
argument_list|(
name|inputBuffer
argument_list|,
literal|0
argument_list|,
name|inputBuffer
operator|.
name|length
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Method for decompressing a block of input data encoded in LZF      * block structure (compatible with lzf command line utility),      * and can consist of any number of blocks.      * Note that input MUST consists of a sequence of one or more complete      * chunks; partial chunks can not be handled.      *      * @since 0.8.2      */
DECL|method|decode
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
specifier|final
name|byte
index|[]
name|inputBuffer
parameter_list|,
name|int
name|inputPtr
parameter_list|,
name|int
name|inputLen
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|calculateUncompressedSize
argument_list|(
name|inputBuffer
argument_list|,
name|inputPtr
argument_list|,
name|inputLen
argument_list|)
index|]
decl_stmt|;
name|decode
argument_list|(
name|inputBuffer
argument_list|,
name|inputPtr
argument_list|,
name|inputLen
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Method for decompressing a block of input data encoded in LZF      * block structure (compatible with lzf command line utility),      * and can consist of any number of blocks.      * Note that input MUST consists of a sequence of one or more complete      * chunks; partial chunks can not be handled.      */
DECL|method|decode
specifier|public
specifier|static
name|int
name|decode
parameter_list|(
specifier|final
name|byte
index|[]
name|inputBuffer
parameter_list|,
specifier|final
name|byte
index|[]
name|targetBuffer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|decode
argument_list|(
name|inputBuffer
argument_list|,
literal|0
argument_list|,
name|inputBuffer
operator|.
name|length
argument_list|,
name|targetBuffer
argument_list|)
return|;
block|}
comment|/**      * Method for decompressing a block of input data encoded in LZF      * block structure (compatible with lzf command line utility),      * and can consist of any number of blocks.      * Note that input MUST consists of a sequence of one or more complete      * chunks; partial chunks can not be handled.      */
DECL|method|decode
specifier|public
specifier|static
name|int
name|decode
parameter_list|(
specifier|final
name|byte
index|[]
name|sourceBuffer
parameter_list|,
name|int
name|inPtr
parameter_list|,
name|int
name|inLength
parameter_list|,
specifier|final
name|byte
index|[]
name|targetBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|result
init|=
name|targetBuffer
decl_stmt|;
name|int
name|outPtr
init|=
literal|0
decl_stmt|;
name|int
name|blockNr
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|inPtr
operator|+
name|inLength
operator|-
literal|1
decl_stmt|;
comment|// -1 to offset possible end marker
while|while
condition|(
name|inPtr
operator|<
name|end
condition|)
block|{
comment|// let's do basic sanity checks; no point in skimping with these checks
if|if
condition|(
name|sourceBuffer
index|[
name|inPtr
index|]
operator|!=
name|LZFChunk
operator|.
name|BYTE_Z
operator|||
name|sourceBuffer
index|[
name|inPtr
operator|+
literal|1
index|]
operator|!=
name|LZFChunk
operator|.
name|BYTE_V
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt input data, block #"
operator|+
name|blockNr
operator|+
literal|" (at offset "
operator|+
name|inPtr
operator|+
literal|"): did not start with 'ZV' signature bytes"
argument_list|)
throw|;
block|}
name|inPtr
operator|+=
literal|2
expr_stmt|;
name|int
name|type
init|=
name|sourceBuffer
index|[
name|inPtr
operator|++
index|]
decl_stmt|;
name|int
name|len
init|=
name|uint16
argument_list|(
name|sourceBuffer
argument_list|,
name|inPtr
argument_list|)
decl_stmt|;
name|inPtr
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|LZFChunk
operator|.
name|BLOCK_TYPE_NON_COMPRESSED
condition|)
block|{
comment|// uncompressed
name|System
operator|.
name|arraycopy
argument_list|(
name|sourceBuffer
argument_list|,
name|inPtr
argument_list|,
name|result
argument_list|,
name|outPtr
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|outPtr
operator|+=
name|len
expr_stmt|;
block|}
else|else
block|{
comment|// compressed
name|int
name|uncompLen
init|=
name|uint16
argument_list|(
name|sourceBuffer
argument_list|,
name|inPtr
argument_list|)
decl_stmt|;
name|inPtr
operator|+=
literal|2
expr_stmt|;
name|decompressChunk
argument_list|(
name|sourceBuffer
argument_list|,
name|inPtr
argument_list|,
name|result
argument_list|,
name|outPtr
argument_list|,
name|outPtr
operator|+
name|uncompLen
argument_list|)
expr_stmt|;
name|outPtr
operator|+=
name|uncompLen
expr_stmt|;
block|}
name|inPtr
operator|+=
name|len
expr_stmt|;
operator|++
name|blockNr
expr_stmt|;
block|}
return|return
name|outPtr
return|;
block|}
comment|/**      * Helper method that will calculate total uncompressed size, for sequence of      * one or more LZF blocks stored in given byte array.      * Will do basic sanity checking, so that this method can be called to      * verify against some types of corruption.      */
DECL|method|calculateUncompressedSize
specifier|public
specifier|static
name|int
name|calculateUncompressedSize
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|ptr
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|uncompressedSize
init|=
literal|0
decl_stmt|;
name|int
name|blockNr
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|ptr
operator|+
name|length
decl_stmt|;
while|while
condition|(
name|ptr
operator|<
name|end
condition|)
block|{
comment|// can use optional end marker
if|if
condition|(
name|ptr
operator|==
operator|(
name|data
operator|.
name|length
operator|+
literal|1
operator|)
operator|&&
name|data
index|[
name|ptr
index|]
operator|==
name|BYTE_NULL
condition|)
block|{
operator|++
name|ptr
expr_stmt|;
comment|// so that we'll be at end
break|break;
block|}
comment|// simpler to handle bounds checks by catching exception here...
try|try
block|{
if|if
condition|(
name|data
index|[
name|ptr
index|]
operator|!=
name|LZFChunk
operator|.
name|BYTE_Z
operator|||
name|data
index|[
name|ptr
operator|+
literal|1
index|]
operator|!=
name|LZFChunk
operator|.
name|BYTE_V
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt input data, block #"
operator|+
name|blockNr
operator|+
literal|" (at offset "
operator|+
name|ptr
operator|+
literal|"): did not start with 'ZV' signature bytes"
argument_list|)
throw|;
block|}
name|int
name|type
init|=
operator|(
name|int
operator|)
name|data
index|[
name|ptr
operator|+
literal|2
index|]
decl_stmt|;
name|int
name|blockLen
init|=
name|uint16
argument_list|(
name|data
argument_list|,
name|ptr
operator|+
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|LZFChunk
operator|.
name|BLOCK_TYPE_NON_COMPRESSED
condition|)
block|{
comment|// uncompressed
name|ptr
operator|+=
literal|5
expr_stmt|;
name|uncompressedSize
operator|+=
name|blockLen
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|LZFChunk
operator|.
name|BLOCK_TYPE_COMPRESSED
condition|)
block|{
comment|// compressed
name|uncompressedSize
operator|+=
name|uint16
argument_list|(
name|data
argument_list|,
name|ptr
operator|+
literal|5
argument_list|)
expr_stmt|;
name|ptr
operator|+=
literal|7
expr_stmt|;
block|}
else|else
block|{
comment|// unknown... CRC-32 would be 2, but that's not implemented by cli tool
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt input data, block #"
operator|+
name|blockNr
operator|+
literal|" (at offset "
operator|+
name|ptr
operator|+
literal|"): unrecognized block type "
operator|+
operator|(
name|type
operator|&
literal|0xFF
operator|)
argument_list|)
throw|;
block|}
name|ptr
operator|+=
name|blockLen
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt input data, block #"
operator|+
name|blockNr
operator|+
literal|" (at offset "
operator|+
name|ptr
operator|+
literal|"): truncated block header"
argument_list|)
throw|;
block|}
operator|++
name|blockNr
expr_stmt|;
block|}
comment|// one more sanity check:
if|if
condition|(
name|ptr
operator|!=
name|data
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt input data: block #"
operator|+
name|blockNr
operator|+
literal|" extends "
operator|+
operator|(
name|data
operator|.
name|length
operator|-
name|ptr
operator|)
operator|+
literal|" beyond end of input"
argument_list|)
throw|;
block|}
return|return
name|uncompressedSize
return|;
block|}
comment|/**      * Main decode from a stream.  Decompressed bytes are placed in the outputBuffer, inputBuffer      * is a "scratch-area".      *      * @param is           An input stream of LZF compressed bytes      * @param inputBuffer  A byte array used as a scratch area.      * @param outputBuffer A byte array in which the result is returned      * @return The number of bytes placed in the outputBuffer.      */
DECL|method|decompressChunk
specifier|public
specifier|static
name|int
name|decompressChunk
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
specifier|final
name|byte
index|[]
name|inputBuffer
parameter_list|,
specifier|final
name|byte
index|[]
name|outputBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesInOutput
decl_stmt|;
comment|/* note: we do NOT read more than 5 bytes because otherwise might need to shuffle bytes            * for output buffer (could perhaps optimize in future?)            */
name|int
name|bytesRead
init|=
name|readHeader
argument_list|(
name|is
argument_list|,
name|inputBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|bytesRead
operator|<
name|HEADER_BYTES
operator|)
operator|||
name|inputBuffer
index|[
literal|0
index|]
operator|!=
name|LZFChunk
operator|.
name|BYTE_Z
operator|||
name|inputBuffer
index|[
literal|1
index|]
operator|!=
name|LZFChunk
operator|.
name|BYTE_V
condition|)
block|{
if|if
condition|(
name|bytesRead
operator|==
literal|0
condition|)
block|{
comment|// probably fine, clean EOF
return|return
operator|-
literal|1
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt input data, block did not start with 2 byte signature ('ZV') followed by type byte, 2-byte length)"
argument_list|)
throw|;
block|}
name|int
name|type
init|=
name|inputBuffer
index|[
literal|2
index|]
decl_stmt|;
name|int
name|compLen
init|=
name|uint16
argument_list|(
name|inputBuffer
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|LZFChunk
operator|.
name|BLOCK_TYPE_NON_COMPRESSED
condition|)
block|{
comment|// uncompressed
name|readFully
argument_list|(
name|is
argument_list|,
literal|false
argument_list|,
name|outputBuffer
argument_list|,
literal|0
argument_list|,
name|compLen
argument_list|)
expr_stmt|;
name|bytesInOutput
operator|=
name|compLen
expr_stmt|;
block|}
else|else
block|{
comment|// compressed
name|readFully
argument_list|(
name|is
argument_list|,
literal|true
argument_list|,
name|inputBuffer
argument_list|,
literal|0
argument_list|,
literal|2
operator|+
name|compLen
argument_list|)
expr_stmt|;
comment|// first 2 bytes are uncompressed length
name|int
name|uncompLen
init|=
name|uint16
argument_list|(
name|inputBuffer
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|decompressChunk
argument_list|(
name|inputBuffer
argument_list|,
literal|2
argument_list|,
name|outputBuffer
argument_list|,
literal|0
argument_list|,
name|uncompLen
argument_list|)
expr_stmt|;
name|bytesInOutput
operator|=
name|uncompLen
expr_stmt|;
block|}
return|return
name|bytesInOutput
return|;
block|}
comment|/**      * Main decode method for individual chunks.      */
DECL|method|decompressChunk
specifier|public
specifier|static
name|void
name|decompressChunk
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|int
name|inPos
parameter_list|,
name|byte
index|[]
name|out
parameter_list|,
name|int
name|outPos
parameter_list|,
name|int
name|outEnd
parameter_list|)
throws|throws
name|IOException
block|{
do|do
block|{
name|int
name|ctrl
init|=
name|in
index|[
name|inPos
operator|++
index|]
operator|&
literal|255
decl_stmt|;
if|if
condition|(
name|ctrl
operator|<
name|LZFChunk
operator|.
name|MAX_LITERAL
condition|)
block|{
comment|// literal run
comment|// 11-Aug-2011, tatu: Looks silly, but is faster than simple loop or System.arraycopy
switch|switch
condition|(
name|ctrl
condition|)
block|{
case|case
literal|31
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|30
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|29
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|28
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|27
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|26
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|25
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|24
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|23
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|22
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|21
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|20
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|19
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|18
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|17
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|16
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|15
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|14
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|13
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|12
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|11
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|10
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|9
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|8
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|7
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|6
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|5
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|4
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|3
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|2
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|1
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|0
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
block|}
continue|continue;
block|}
comment|// back reference
name|int
name|len
init|=
name|ctrl
operator|>>
literal|5
decl_stmt|;
name|ctrl
operator|=
operator|-
operator|(
operator|(
name|ctrl
operator|&
literal|0x1f
operator|)
operator|<<
literal|8
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|7
condition|)
block|{
comment|// 2 bytes; length of 3 - 8 bytes
name|ctrl
operator|-=
name|in
index|[
name|inPos
operator|++
index|]
operator|&
literal|255
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
switch|switch
condition|(
name|len
condition|)
block|{
case|case
literal|6
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|5
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|4
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|3
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|2
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|1
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
block|}
continue|continue;
block|}
comment|// long version (3 bytes, length of up to 264 bytes)
name|len
operator|=
name|in
index|[
name|inPos
operator|++
index|]
operator|&
literal|255
expr_stmt|;
name|ctrl
operator|-=
name|in
index|[
name|inPos
operator|++
index|]
operator|&
literal|255
expr_stmt|;
comment|// First: if there is no overlap, can just use arraycopy:
if|if
condition|(
operator|(
name|ctrl
operator|+
name|len
operator|)
operator|<
operator|-
literal|9
condition|)
block|{
name|len
operator|+=
literal|9
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|out
argument_list|,
name|outPos
operator|+
name|ctrl
argument_list|,
name|out
argument_list|,
name|outPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|outPos
operator|+=
name|len
expr_stmt|;
continue|continue;
block|}
comment|// otherwise manual copy: so first just copy 9 bytes we know are needed
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
comment|// then loop
comment|// Odd: after extensive profiling, looks like magic number
comment|// for unrolling is 4: with 8 performance is worse (even
comment|// bit less than with no unrolling).
name|len
operator|+=
name|outPos
expr_stmt|;
specifier|final
name|int
name|end
init|=
name|len
operator|-
literal|3
decl_stmt|;
while|while
condition|(
name|outPos
operator|<
name|end
condition|)
block|{
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
block|}
switch|switch
condition|(
name|len
operator|-
name|outPos
condition|)
block|{
case|case
literal|3
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|2
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|1
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
block|}
block|}
do|while
condition|(
name|outPos
operator|<
name|outEnd
condition|)
do|;
comment|// sanity check to guard against corrupt data:
if|if
condition|(
name|outPos
operator|!=
name|outEnd
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt data: overrun in decompress, input offset "
operator|+
name|inPos
operator|+
literal|", output offset "
operator|+
name|outPos
argument_list|)
throw|;
block|}
DECL|method|uint16
specifier|private
specifier|final
specifier|static
name|int
name|uint16
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|ptr
parameter_list|)
block|{
return|return
operator|(
operator|(
name|data
index|[
name|ptr
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|data
index|[
name|ptr
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
return|;
block|}
comment|/**      * Helper method to forcibly load header bytes that must be read before      * chunk can be handled.      */
DECL|method|readHeader
specifier|protected
specifier|static
name|int
name|readHeader
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
specifier|final
name|byte
index|[]
name|inputBuffer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Ok: simple case first, where we just get all data we need
name|int
name|needed
init|=
name|HEADER_BYTES
decl_stmt|;
name|int
name|count
init|=
name|is
operator|.
name|read
argument_list|(
name|inputBuffer
argument_list|,
literal|0
argument_list|,
name|needed
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
name|needed
condition|)
block|{
return|return
name|count
return|;
block|}
if|if
condition|(
name|count
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// if not, a source that trickles data (network etc); must loop
name|int
name|offset
init|=
name|count
decl_stmt|;
name|needed
operator|-=
name|count
expr_stmt|;
do|do
block|{
name|count
operator|=
name|is
operator|.
name|read
argument_list|(
name|inputBuffer
argument_list|,
name|offset
argument_list|,
name|needed
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|offset
operator|+=
name|count
expr_stmt|;
name|needed
operator|-=
name|count
expr_stmt|;
block|}
do|while
condition|(
name|needed
operator|>
literal|0
condition|)
do|;
return|return
name|offset
return|;
block|}
DECL|method|readFully
specifier|private
specifier|final
specifier|static
name|void
name|readFully
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|boolean
name|compressed
parameter_list|,
name|byte
index|[]
name|outputBuffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|left
init|=
name|len
decl_stmt|;
while|while
condition|(
name|left
operator|>
literal|0
condition|)
block|{
name|int
name|count
init|=
name|is
operator|.
name|read
argument_list|(
name|outputBuffer
argument_list|,
name|offset
argument_list|,
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
comment|// EOF not allowed here
throw|throw
operator|new
name|IOException
argument_list|(
literal|"EOF in "
operator|+
name|len
operator|+
literal|" byte ("
operator|+
operator|(
name|compressed
condition|?
literal|""
else|:
literal|"un"
operator|)
operator|+
literal|"compressed) block: could only read "
operator|+
operator|(
name|len
operator|-
name|left
operator|)
operator|+
literal|" bytes"
argument_list|)
throw|;
block|}
name|offset
operator|+=
name|count
expr_stmt|;
name|left
operator|-=
name|count
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

