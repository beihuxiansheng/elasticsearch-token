begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_comment
comment|/**  * A UUID taken from java UUID that simply holds less data.  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|UUID
specifier|public
class|class
name|UUID
implements|implements
name|Comparable
argument_list|<
name|UUID
argument_list|>
block|{
comment|/*      * The most significant 64 bits of this UUID.      *      * @serial      */
DECL|field|mostSigBits
specifier|private
specifier|final
name|long
name|mostSigBits
decl_stmt|;
comment|/*      * The least significant 64 bits of this UUID.      *      * @serial      */
DECL|field|leastSigBits
specifier|private
specifier|final
name|long
name|leastSigBits
decl_stmt|;
comment|/*      * The random number generator used by this class to create random      * based UUIDs.      */
DECL|field|numberGenerator
specifier|private
specifier|static
specifier|volatile
name|SecureRandom
name|numberGenerator
init|=
literal|null
decl_stmt|;
comment|// Constructors and Factories
comment|/*      * Private constructor which uses a byte array to construct the new UUID.      */
DECL|method|UUID
specifier|private
name|UUID
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|long
name|msb
init|=
literal|0
decl_stmt|;
name|long
name|lsb
init|=
literal|0
decl_stmt|;
assert|assert
name|data
operator|.
name|length
operator|==
literal|16
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
name|msb
operator|=
operator|(
name|msb
operator|<<
literal|8
operator|)
operator||
operator|(
name|data
index|[
name|i
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|8
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
name|lsb
operator|=
operator|(
name|lsb
operator|<<
literal|8
operator|)
operator||
operator|(
name|data
index|[
name|i
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
name|this
operator|.
name|mostSigBits
operator|=
name|msb
expr_stmt|;
name|this
operator|.
name|leastSigBits
operator|=
name|lsb
expr_stmt|;
block|}
comment|/**      * Constructs a new<tt>UUID</tt> using the specified data.      *<tt>mostSigBits</tt> is used for the most significant 64 bits      * of the<tt>UUID</tt> and<tt>leastSigBits</tt> becomes the      * least significant 64 bits of the<tt>UUID</tt>.      *      * @param mostSigBits      * @param leastSigBits      */
DECL|method|UUID
specifier|public
name|UUID
parameter_list|(
name|long
name|mostSigBits
parameter_list|,
name|long
name|leastSigBits
parameter_list|)
block|{
name|this
operator|.
name|mostSigBits
operator|=
name|mostSigBits
expr_stmt|;
name|this
operator|.
name|leastSigBits
operator|=
name|leastSigBits
expr_stmt|;
block|}
comment|/**      * Static factory to retrieve a type 4 (pseudo randomly generated) UUID.      *      * The<code>UUID</code> is generated using a cryptographically strong      * pseudo random number generator.      *      * @return a randomly generated<tt>UUID</tt>.      */
DECL|method|randomUUID
specifier|public
specifier|static
name|UUID
name|randomUUID
parameter_list|()
block|{
name|SecureRandom
name|ng
init|=
name|numberGenerator
decl_stmt|;
if|if
condition|(
name|ng
operator|==
literal|null
condition|)
block|{
name|numberGenerator
operator|=
name|ng
operator|=
operator|new
name|SecureRandom
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|randomBytes
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|ng
operator|.
name|nextBytes
argument_list|(
name|randomBytes
argument_list|)
expr_stmt|;
name|randomBytes
index|[
literal|6
index|]
operator|&=
literal|0x0f
expr_stmt|;
comment|/* clear version        */
name|randomBytes
index|[
literal|6
index|]
operator||=
literal|0x40
expr_stmt|;
comment|/* set to version 4     */
name|randomBytes
index|[
literal|8
index|]
operator|&=
literal|0x3f
expr_stmt|;
comment|/* clear variant        */
name|randomBytes
index|[
literal|8
index|]
operator||=
literal|0x80
expr_stmt|;
comment|/* set to IETF variant  */
return|return
operator|new
name|UUID
argument_list|(
name|randomBytes
argument_list|)
return|;
block|}
comment|/**      * Static factory to retrieve a type 3 (name based)<tt>UUID</tt> based on      * the specified byte array.      *      * @param name a byte array to be used to construct a<tt>UUID</tt>.      * @return a<tt>UUID</tt> generated from the specified array.      */
DECL|method|nameUUIDFromBytes
specifier|public
specifier|static
name|UUID
name|nameUUIDFromBytes
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
name|MessageDigest
name|md
decl_stmt|;
try|try
block|{
name|md
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|nsae
parameter_list|)
block|{
throw|throw
operator|new
name|InternalError
argument_list|(
literal|"MD5 not supported"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|md5Bytes
init|=
name|md
operator|.
name|digest
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|md5Bytes
index|[
literal|6
index|]
operator|&=
literal|0x0f
expr_stmt|;
comment|/* clear version        */
name|md5Bytes
index|[
literal|6
index|]
operator||=
literal|0x30
expr_stmt|;
comment|/* set to version 3     */
name|md5Bytes
index|[
literal|8
index|]
operator|&=
literal|0x3f
expr_stmt|;
comment|/* clear variant        */
name|md5Bytes
index|[
literal|8
index|]
operator||=
literal|0x80
expr_stmt|;
comment|/* set to IETF variant  */
return|return
operator|new
name|UUID
argument_list|(
name|md5Bytes
argument_list|)
return|;
block|}
comment|/**      * Creates a<tt>UUID</tt> from the string standard representation as      * described in the {@link #toString} method.      *      * @param name a string that specifies a<tt>UUID</tt>.      * @return a<tt>UUID</tt> with the specified value.      * @throws IllegalArgumentException if name does not conform to the      *                                  string representation as described in {@link #toString}.      */
DECL|method|fromString
specifier|public
specifier|static
name|UUID
name|fromString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|components
init|=
name|name
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|components
operator|.
name|length
operator|!=
literal|5
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid UUID string: "
operator|+
name|name
argument_list|)
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
name|components
index|[
name|i
index|]
operator|=
literal|"0x"
operator|+
name|components
index|[
name|i
index|]
expr_stmt|;
name|long
name|mostSigBits
init|=
name|Long
operator|.
name|decode
argument_list|(
name|components
index|[
literal|0
index|]
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|mostSigBits
operator|<<=
literal|16
expr_stmt|;
name|mostSigBits
operator||=
name|Long
operator|.
name|decode
argument_list|(
name|components
index|[
literal|1
index|]
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|mostSigBits
operator|<<=
literal|16
expr_stmt|;
name|mostSigBits
operator||=
name|Long
operator|.
name|decode
argument_list|(
name|components
index|[
literal|2
index|]
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|long
name|leastSigBits
init|=
name|Long
operator|.
name|decode
argument_list|(
name|components
index|[
literal|3
index|]
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|leastSigBits
operator|<<=
literal|48
expr_stmt|;
name|leastSigBits
operator||=
name|Long
operator|.
name|decode
argument_list|(
name|components
index|[
literal|4
index|]
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
return|return
operator|new
name|UUID
argument_list|(
name|mostSigBits
argument_list|,
name|leastSigBits
argument_list|)
return|;
block|}
comment|// Field Accessor Methods
comment|/**      * Returns the least significant 64 bits of this UUID's 128 bit value.      *      * @return the least significant 64 bits of this UUID's 128 bit value.      */
DECL|method|getLeastSignificantBits
specifier|public
name|long
name|getLeastSignificantBits
parameter_list|()
block|{
return|return
name|leastSigBits
return|;
block|}
comment|/**      * Returns the most significant 64 bits of this UUID's 128 bit value.      *      * @return the most significant 64 bits of this UUID's 128 bit value.      */
DECL|method|getMostSignificantBits
specifier|public
name|long
name|getMostSignificantBits
parameter_list|()
block|{
return|return
name|mostSigBits
return|;
block|}
comment|// Object Inherited Methods
comment|/**      * Returns a<code>String</code> object representing this      *<code>UUID</code>.      *      *<p>The UUID string representation is as described by this BNF :      *<blockquote><pre>      * {@code      * UUID                   =<time_low> "-"<time_mid> "-"      *<time_high_and_version> "-"      *<variant_and_sequence> "-"      *<node>      * time_low               = 4*<hexOctet>      * time_mid               = 2*<hexOctet>      * time_high_and_version  = 2*<hexOctet>      * variant_and_sequence   = 2*<hexOctet>      * node                   = 6*<hexOctet>      * hexOctet               =<hexDigit><hexDigit>      * hexDigit               =      *       "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"      *       | "a" | "b" | "c" | "d" | "e" | "f"      *       | "A" | "B" | "C" | "D" | "E" | "F"      * }</pre></blockquote>      *      * @return a string representation of this<tt>UUID</tt>.      */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|digits
argument_list|(
name|mostSigBits
operator|>>
literal|32
argument_list|,
literal|8
argument_list|)
operator|+
literal|"-"
operator|+
name|digits
argument_list|(
name|mostSigBits
operator|>>
literal|16
argument_list|,
literal|4
argument_list|)
operator|+
literal|"-"
operator|+
name|digits
argument_list|(
name|mostSigBits
argument_list|,
literal|4
argument_list|)
operator|+
literal|"-"
operator|+
name|digits
argument_list|(
name|leastSigBits
operator|>>
literal|48
argument_list|,
literal|4
argument_list|)
operator|+
literal|"-"
operator|+
name|digits
argument_list|(
name|leastSigBits
argument_list|,
literal|12
argument_list|)
operator|)
return|;
block|}
comment|/**      * Returns val represented by the specified number of hex digits.      */
DECL|method|digits
specifier|private
specifier|static
name|String
name|digits
parameter_list|(
name|long
name|val
parameter_list|,
name|int
name|digits
parameter_list|)
block|{
name|long
name|hi
init|=
literal|1L
operator|<<
operator|(
name|digits
operator|*
literal|4
operator|)
decl_stmt|;
return|return
name|Long
operator|.
name|toHexString
argument_list|(
name|hi
operator||
operator|(
name|val
operator|&
operator|(
name|hi
operator|-
literal|1
operator|)
operator|)
argument_list|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Returns a hash code for this<code>UUID</code>.      *      * @return a hash code value for this<tt>UUID</tt>.      */
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|mostSigBits
operator|>>
literal|32
operator|)
operator|^
name|mostSigBits
operator|^
operator|(
name|leastSigBits
operator|>>
literal|32
operator|)
operator|^
name|leastSigBits
argument_list|)
return|;
block|}
comment|/**      * Compares this object to the specified object.  The result is      *<tt>true</tt> if and only if the argument is not      *<tt>null</tt>, is a<tt>UUID</tt> object, has the same variant,      * and contains the same value, bit for bit, as this<tt>UUID</tt>.      *      * @param obj the object to compare with.      * @return<code>true</code> if the objects are the same;      *<code>false</code> otherwise.      */
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|UUID
operator|)
condition|)
return|return
literal|false
return|;
name|UUID
name|id
init|=
operator|(
name|UUID
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|mostSigBits
operator|==
name|id
operator|.
name|mostSigBits
operator|&&
name|leastSigBits
operator|==
name|id
operator|.
name|leastSigBits
operator|)
return|;
block|}
comment|// Comparison Operations
comment|/**      * Compares this UUID with the specified UUID.      *      *<p>The first of two UUIDs follows the second if the most significant      * field in which the UUIDs differ is greater for the first UUID.      *      * @param val<tt>UUID</tt> to which this<tt>UUID</tt> is to be compared.      * @return -1, 0 or 1 as this<tt>UUID</tt> is less than, equal      *         to, or greater than<tt>val</tt>.      */
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|UUID
name|val
parameter_list|)
block|{
comment|// The ordering is intentionally set up so that the UUIDs
comment|// can simply be numerically compared as two numbers
return|return
operator|(
name|this
operator|.
name|mostSigBits
operator|<
name|val
operator|.
name|mostSigBits
condition|?
operator|-
literal|1
else|:
operator|(
name|this
operator|.
name|mostSigBits
operator|>
name|val
operator|.
name|mostSigBits
condition|?
literal|1
else|:
operator|(
name|this
operator|.
name|leastSigBits
operator|<
name|val
operator|.
name|leastSigBits
condition|?
operator|-
literal|1
else|:
operator|(
name|this
operator|.
name|leastSigBits
operator|>
name|val
operator|.
name|leastSigBits
condition|?
literal|1
else|:
literal|0
operator|)
operator|)
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

