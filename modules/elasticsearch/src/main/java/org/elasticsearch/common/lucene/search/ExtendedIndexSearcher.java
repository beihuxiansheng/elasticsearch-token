begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ExtendedIndexSearcher
specifier|public
class|class
name|ExtendedIndexSearcher
extends|extends
name|IndexSearcher
block|{
DECL|method|ExtendedIndexSearcher
specifier|public
name|ExtendedIndexSearcher
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
block|{
name|super
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|setSimilarity
argument_list|(
name|searcher
operator|.
name|getSimilarity
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ExtendedIndexSearcher
specifier|public
name|ExtendedIndexSearcher
parameter_list|(
name|IndexReader
name|r
parameter_list|)
block|{
name|super
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
DECL|method|subReaders
specifier|public
name|IndexReader
index|[]
name|subReaders
parameter_list|()
block|{
return|return
name|this
operator|.
name|subReaders
return|;
block|}
DECL|method|docStarts
specifier|public
name|int
index|[]
name|docStarts
parameter_list|()
block|{
return|return
name|this
operator|.
name|docStarts
return|;
block|}
comment|// taken from DirectoryReader#readerIndex
DECL|method|readerIndex
specifier|public
name|int
name|readerIndex
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|int
name|lo
init|=
literal|0
decl_stmt|;
comment|// search starts array
name|int
name|hi
init|=
name|subReaders
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// for first element less
while|while
condition|(
name|hi
operator|>=
name|lo
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|midValue
init|=
name|docStarts
index|[
name|mid
index|]
decl_stmt|;
if|if
condition|(
name|doc
operator|<
name|midValue
condition|)
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|doc
operator|>
name|midValue
condition|)
name|lo
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
else|else
block|{
comment|// found a match
while|while
condition|(
name|mid
operator|+
literal|1
operator|<
name|subReaders
operator|.
name|length
operator|&&
name|docStarts
index|[
name|mid
operator|+
literal|1
index|]
operator|==
name|midValue
condition|)
block|{
name|mid
operator|++
expr_stmt|;
comment|// scan to last match
block|}
return|return
name|mid
return|;
block|}
block|}
return|return
name|hi
return|;
block|}
block|}
end_class

end_unit

