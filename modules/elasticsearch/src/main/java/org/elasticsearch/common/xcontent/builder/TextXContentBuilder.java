begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent.builder
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastCharArrayWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Unicode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|TextXContentBuilder
specifier|public
class|class
name|TextXContentBuilder
extends|extends
name|XContentBuilder
argument_list|<
name|TextXContentBuilder
argument_list|>
block|{
DECL|field|writer
specifier|private
specifier|final
name|FastCharArrayWriter
name|writer
decl_stmt|;
DECL|field|xContent
specifier|private
specifier|final
name|XContent
name|xContent
decl_stmt|;
DECL|field|utf8Result
specifier|final
name|UnicodeUtil
operator|.
name|UTF8Result
name|utf8Result
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|()
decl_stmt|;
DECL|method|TextXContentBuilder
specifier|public
name|TextXContentBuilder
parameter_list|(
name|XContent
name|xContent
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writer
operator|=
operator|new
name|FastCharArrayWriter
argument_list|()
expr_stmt|;
name|this
operator|.
name|xContent
operator|=
name|xContent
expr_stmt|;
name|this
operator|.
name|generator
operator|=
name|xContent
operator|.
name|createGenerator
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|this
expr_stmt|;
block|}
DECL|method|raw
annotation|@
name|Override
specifier|public
name|TextXContentBuilder
name|raw
parameter_list|(
name|byte
index|[]
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
name|Unicode
operator|.
name|UTF16Result
name|result
init|=
name|Unicode
operator|.
name|unsafeFromBytesAsUtf16
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|reset
specifier|public
name|TextXContentBuilder
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|fieldCaseConversion
operator|=
name|globalFieldCaseConversion
expr_stmt|;
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|generator
operator|=
name|xContent
operator|.
name|createGenerator
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|string
specifier|public
name|String
name|string
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
return|return
name|writer
operator|.
name|toStringTrim
argument_list|()
return|;
block|}
DECL|method|unsafeChars
specifier|public
name|FastCharArrayWriter
name|unsafeChars
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
return|return
name|writer
return|;
block|}
DECL|method|unsafeBytes
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|unsafeBytes
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|utf8
argument_list|()
operator|.
name|result
return|;
block|}
comment|/**      * Call this AFTER {@link #unsafeBytes()}.      */
DECL|method|unsafeBytesLength
annotation|@
name|Override
specifier|public
name|int
name|unsafeBytesLength
parameter_list|()
block|{
return|return
name|utf8Result
operator|.
name|length
return|;
block|}
DECL|method|copiedBytes
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|copiedBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|utf8Result
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|utf8Result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Returns the byte[] that represents the utf8 of the json written up until now.      * Note, the result is shared within this instance, so copy the byte array if needed      * or use {@link #utf8copied()}.      */
DECL|method|utf8
specifier|public
name|UnicodeUtil
operator|.
name|UTF8Result
name|utf8
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
comment|// ignore whitepsaces
name|int
name|st
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|writer
operator|.
name|size
argument_list|()
decl_stmt|;
name|char
index|[]
name|val
init|=
name|writer
operator|.
name|unsafeCharArray
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|st
operator|<
name|len
operator|)
operator|&&
operator|(
name|val
index|[
name|st
index|]
operator|<=
literal|' '
operator|)
condition|)
block|{
name|st
operator|++
expr_stmt|;
name|len
operator|--
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|st
operator|<
name|len
operator|)
operator|&&
operator|(
name|val
index|[
name|len
operator|-
literal|1
index|]
operator|<=
literal|' '
operator|)
condition|)
block|{
name|len
operator|--
expr_stmt|;
block|}
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|val
argument_list|,
name|st
argument_list|,
name|len
argument_list|,
name|utf8Result
argument_list|)
expr_stmt|;
return|return
name|utf8Result
return|;
block|}
comment|/**      * Returns a copied byte[] that represnts the utf8 o fthe json written up until now.      */
DECL|method|utf8copied
specifier|public
name|byte
index|[]
name|utf8copied
parameter_list|()
throws|throws
name|IOException
block|{
name|utf8
argument_list|()
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|utf8Result
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|utf8Result
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|utf8Result
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

