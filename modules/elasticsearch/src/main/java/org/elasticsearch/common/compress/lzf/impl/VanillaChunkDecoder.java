begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.compress.lzf.impl
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
operator|.
name|ChunkDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
operator|.
name|LZFChunk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * Safe {@link ChunkDecoder} implementation that can be used on any  * platform.  */
end_comment

begin_class
DECL|class|VanillaChunkDecoder
specifier|public
class|class
name|VanillaChunkDecoder
extends|extends
name|ChunkDecoder
block|{
DECL|method|VanillaChunkDecoder
specifier|public
name|VanillaChunkDecoder
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|decodeChunk
specifier|public
specifier|final
name|int
name|decodeChunk
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
specifier|final
name|byte
index|[]
name|inputBuffer
parameter_list|,
specifier|final
name|byte
index|[]
name|outputBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesInOutput
decl_stmt|;
comment|/* note: we do NOT read more than 5 bytes because otherwise might need to shuffle bytes          * for output buffer (could perhaps optimize in future?)          */
name|int
name|bytesRead
init|=
name|readHeader
argument_list|(
name|is
argument_list|,
name|inputBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|bytesRead
operator|<
name|HEADER_BYTES
operator|)
operator|||
name|inputBuffer
index|[
literal|0
index|]
operator|!=
name|LZFChunk
operator|.
name|BYTE_Z
operator|||
name|inputBuffer
index|[
literal|1
index|]
operator|!=
name|LZFChunk
operator|.
name|BYTE_V
condition|)
block|{
if|if
condition|(
name|bytesRead
operator|==
literal|0
condition|)
block|{
comment|// probably fine, clean EOF
return|return
operator|-
literal|1
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt input data, block did not start with 2 byte signature ('ZV') followed by type byte, 2-byte length)"
argument_list|)
throw|;
block|}
name|int
name|type
init|=
name|inputBuffer
index|[
literal|2
index|]
decl_stmt|;
name|int
name|compLen
init|=
name|uint16
argument_list|(
name|inputBuffer
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|LZFChunk
operator|.
name|BLOCK_TYPE_NON_COMPRESSED
condition|)
block|{
comment|// uncompressed
name|readFully
argument_list|(
name|is
argument_list|,
literal|false
argument_list|,
name|outputBuffer
argument_list|,
literal|0
argument_list|,
name|compLen
argument_list|)
expr_stmt|;
name|bytesInOutput
operator|=
name|compLen
expr_stmt|;
block|}
else|else
block|{
comment|// compressed
name|readFully
argument_list|(
name|is
argument_list|,
literal|true
argument_list|,
name|inputBuffer
argument_list|,
literal|0
argument_list|,
literal|2
operator|+
name|compLen
argument_list|)
expr_stmt|;
comment|// first 2 bytes are uncompressed length
name|int
name|uncompLen
init|=
name|uint16
argument_list|(
name|inputBuffer
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|decodeChunk
argument_list|(
name|inputBuffer
argument_list|,
literal|2
argument_list|,
name|outputBuffer
argument_list|,
literal|0
argument_list|,
name|uncompLen
argument_list|)
expr_stmt|;
name|bytesInOutput
operator|=
name|uncompLen
expr_stmt|;
block|}
return|return
name|bytesInOutput
return|;
block|}
annotation|@
name|Override
DECL|method|decodeChunk
specifier|public
specifier|final
name|void
name|decodeChunk
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|int
name|inPos
parameter_list|,
name|byte
index|[]
name|out
parameter_list|,
name|int
name|outPos
parameter_list|,
name|int
name|outEnd
parameter_list|)
throws|throws
name|IOException
block|{
do|do
block|{
name|int
name|ctrl
init|=
name|in
index|[
name|inPos
operator|++
index|]
operator|&
literal|255
decl_stmt|;
if|if
condition|(
name|ctrl
operator|<
name|LZFChunk
operator|.
name|MAX_LITERAL
condition|)
block|{
comment|// literal run
switch|switch
condition|(
name|ctrl
condition|)
block|{
case|case
literal|31
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|30
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|29
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|28
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|27
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|26
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|25
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|24
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|23
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|22
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|21
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|20
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|19
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|18
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|17
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|16
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|15
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|14
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|13
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|12
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|11
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|10
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|9
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|8
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|7
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|6
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|5
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|4
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|3
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|2
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|1
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|0
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
block|}
continue|continue;
block|}
comment|// back reference
name|int
name|len
init|=
name|ctrl
operator|>>
literal|5
decl_stmt|;
name|ctrl
operator|=
operator|-
operator|(
operator|(
name|ctrl
operator|&
literal|0x1f
operator|)
operator|<<
literal|8
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|7
condition|)
block|{
comment|// 2 bytes; length of 3 - 8 bytes
name|ctrl
operator|-=
name|in
index|[
name|inPos
operator|++
index|]
operator|&
literal|255
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
switch|switch
condition|(
name|len
condition|)
block|{
case|case
literal|6
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|5
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|4
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|3
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|2
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|1
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
block|}
continue|continue;
block|}
comment|// long version (3 bytes, length of up to 264 bytes)
name|len
operator|=
name|in
index|[
name|inPos
operator|++
index|]
operator|&
literal|255
expr_stmt|;
name|ctrl
operator|-=
name|in
index|[
name|inPos
operator|++
index|]
operator|&
literal|255
expr_stmt|;
comment|// First: if there is no overlap, can just use arraycopy:
if|if
condition|(
operator|(
name|ctrl
operator|+
name|len
operator|)
operator|<
operator|-
literal|9
condition|)
block|{
name|len
operator|+=
literal|9
expr_stmt|;
if|if
condition|(
name|len
operator|<=
literal|32
condition|)
block|{
name|copyUpTo32WithSwitch
argument_list|(
name|out
argument_list|,
name|outPos
operator|+
name|ctrl
argument_list|,
name|out
argument_list|,
name|outPos
argument_list|,
name|len
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|out
argument_list|,
name|outPos
operator|+
name|ctrl
argument_list|,
name|out
argument_list|,
name|outPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|outPos
operator|+=
name|len
expr_stmt|;
continue|continue;
block|}
comment|// otherwise manual copy: so first just copy 9 bytes we know are needed
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
comment|// then loop
comment|// Odd: after extensive profiling, looks like magic number
comment|// for unrolling is 4: with 8 performance is worse (even
comment|// bit less than with no unrolling).
name|len
operator|+=
name|outPos
expr_stmt|;
specifier|final
name|int
name|end
init|=
name|len
operator|-
literal|3
decl_stmt|;
while|while
condition|(
name|outPos
operator|<
name|end
condition|)
block|{
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
block|}
switch|switch
condition|(
name|len
operator|-
name|outPos
condition|)
block|{
case|case
literal|3
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|2
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
case|case
literal|1
case|:
name|out
index|[
name|outPos
index|]
operator|=
name|out
index|[
name|outPos
operator|++
operator|+
name|ctrl
index|]
expr_stmt|;
block|}
block|}
do|while
condition|(
name|outPos
operator|<
name|outEnd
condition|)
do|;
comment|// sanity check to guard against corrupt data:
if|if
condition|(
name|outPos
operator|!=
name|outEnd
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt data: overrun in decompress, input offset "
operator|+
name|inPos
operator|+
literal|", output offset "
operator|+
name|outPos
argument_list|)
throw|;
block|}
comment|/*     ///////////////////////////////////////////////////////////////////////     // Internal methods     ///////////////////////////////////////////////////////////////////////      */
DECL|method|copyUpTo32WithSwitch
specifier|protected
specifier|static
specifier|final
name|void
name|copyUpTo32WithSwitch
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|int
name|inPos
parameter_list|,
name|byte
index|[]
name|out
parameter_list|,
name|int
name|outPos
parameter_list|,
name|int
name|lengthMinusOne
parameter_list|)
block|{
switch|switch
condition|(
name|lengthMinusOne
condition|)
block|{
case|case
literal|31
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|30
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|29
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|28
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|27
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|26
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|25
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|24
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|23
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|22
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|21
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|20
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|19
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|18
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|17
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|16
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|15
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|14
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|13
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|12
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|11
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|10
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|9
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|8
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|7
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|6
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|5
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|4
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|3
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|2
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|1
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
case|case
literal|0
case|:
name|out
index|[
name|outPos
operator|++
index|]
operator|=
name|in
index|[
name|inPos
operator|++
index|]
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

