begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.jna
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|jna
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|Native
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|CLibrary
specifier|public
class|class
name|CLibrary
block|{
DECL|field|logger
specifier|private
specifier|static
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|CLibrary
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MCL_CURRENT
specifier|public
specifier|static
specifier|final
name|int
name|MCL_CURRENT
init|=
literal|1
decl_stmt|;
DECL|field|MCL_FUTURE
specifier|public
specifier|static
specifier|final
name|int
name|MCL_FUTURE
init|=
literal|2
decl_stmt|;
DECL|field|ENOMEM
specifier|public
specifier|static
specifier|final
name|int
name|ENOMEM
init|=
literal|12
decl_stmt|;
static|static
block|{
try|try
block|{
name|Native
operator|.
name|register
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"JNA not found. Native methods will be disabled."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Unable to link C library. Native methods will be disabled."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mlockall
specifier|public
specifier|static
specifier|native
name|int
name|mlockall
parameter_list|(
name|int
name|flags
parameter_list|)
function_decl|;
DECL|method|munlockall
specifier|public
specifier|static
specifier|native
name|int
name|munlockall
parameter_list|()
function_decl|;
DECL|method|CLibrary
specifier|private
name|CLibrary
parameter_list|()
block|{     }
block|}
end_class

end_unit

