begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.regex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|Regex
specifier|public
class|class
name|Regex
block|{
DECL|method|compile
specifier|public
specifier|static
name|Pattern
name|compile
parameter_list|(
name|String
name|regex
parameter_list|,
name|String
name|flags
parameter_list|)
block|{
name|int
name|pFlags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flags
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|Strings
operator|.
name|delimitedListToStringArray
argument_list|(
name|flags
argument_list|,
literal|"|"
argument_list|)
control|)
block|{
if|if
condition|(
literal|"CASE_INSENSITIVE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|pFlags
operator||=
name|Pattern
operator|.
name|CASE_INSENSITIVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"MULTILINE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|pFlags
operator||=
name|Pattern
operator|.
name|MULTILINE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"DOTALL"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|pFlags
operator||=
name|Pattern
operator|.
name|DOTALL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"UNICODE_CASE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|pFlags
operator||=
name|Pattern
operator|.
name|UNICODE_CASE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"CANON_EQ"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|pFlags
operator||=
name|Pattern
operator|.
name|CANON_EQ
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"UNIX_LINES"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|pFlags
operator||=
name|Pattern
operator|.
name|UNIX_LINES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"LITERAL"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|pFlags
operator||=
name|Pattern
operator|.
name|LITERAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"COMMENTS"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|pFlags
operator||=
name|Pattern
operator|.
name|COMMENTS
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Unknown regex flag ["
operator|+
name|s
operator|+
literal|"] to compile ["
operator|+
name|regex
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|,
name|pFlags
argument_list|)
return|;
block|}
block|}
end_class

end_unit

