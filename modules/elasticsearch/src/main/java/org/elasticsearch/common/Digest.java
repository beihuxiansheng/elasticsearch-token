begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|Digest
specifier|public
class|class
name|Digest
block|{
DECL|field|STREAM_BUFFER_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|STREAM_BUFFER_LENGTH
init|=
literal|1024
operator|*
literal|16
decl_stmt|;
comment|/**      * Read through an InputStream and returns the digest for the data      *      * @param digest The MessageDigest to use (e.g. MD5)      * @param data   Data to digest      * @return MD5 digest      * @throws IOException On error reading from the stream      */
DECL|method|digest
specifier|private
specifier|static
name|byte
index|[]
name|digest
parameter_list|(
name|MessageDigest
name|digest
parameter_list|,
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|STREAM_BUFFER_LENGTH
index|]
decl_stmt|;
name|int
name|read
init|=
name|data
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|STREAM_BUFFER_LENGTH
argument_list|)
decl_stmt|;
while|while
condition|(
name|read
operator|>
operator|-
literal|1
condition|)
block|{
name|digest
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|read
operator|=
name|data
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|STREAM_BUFFER_LENGTH
argument_list|)
expr_stmt|;
block|}
return|return
name|digest
operator|.
name|digest
argument_list|()
return|;
block|}
DECL|field|Charset_UTF8
specifier|private
specifier|static
specifier|final
name|Charset
name|Charset_UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF8"
argument_list|)
decl_stmt|;
DECL|method|getBytesUtf8
specifier|private
specifier|static
name|byte
index|[]
name|getBytesUtf8
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|data
operator|.
name|getBytes
argument_list|(
name|Charset_UTF8
argument_list|)
return|;
block|}
comment|/**      * Returns a<code>MessageDigest</code> for the given<code>algorithm</code>.      *      * @param algorithm the name of the algorithm requested. See<a      *                  href="http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA">Appendix A in the Java      *                  Cryptography Architecture API Specification& Reference</a> for information about standard algorithm      *                  names.      * @return An MD5 digest instance.      * @throws RuntimeException when a {@link java.security.NoSuchAlgorithmException} is caught.      * @see MessageDigest#getInstance(String)      */
DECL|method|getDigest
specifier|static
name|MessageDigest
name|getDigest
parameter_list|(
name|String
name|algorithm
parameter_list|)
block|{
try|try
block|{
return|return
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns an MD5 MessageDigest.      *      * @return An MD5 digest instance.      * @throws RuntimeException when a {@link java.security.NoSuchAlgorithmException} is caught.      */
DECL|method|getMd5Digest
specifier|public
specifier|static
name|MessageDigest
name|getMd5Digest
parameter_list|()
block|{
return|return
name|getDigest
argument_list|(
literal|"MD5"
argument_list|)
return|;
block|}
comment|/**      * Returns an SHA-256 digest.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @return An SHA-256 digest instance.      * @throws RuntimeException when a {@link java.security.NoSuchAlgorithmException} is caught.      */
DECL|method|getSha256Digest
specifier|private
specifier|static
name|MessageDigest
name|getSha256Digest
parameter_list|()
block|{
return|return
name|getDigest
argument_list|(
literal|"SHA-256"
argument_list|)
return|;
block|}
comment|/**      * Returns an SHA-384 digest.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @return An SHA-384 digest instance.      * @throws RuntimeException when a {@link java.security.NoSuchAlgorithmException} is caught.      */
DECL|method|getSha384Digest
specifier|private
specifier|static
name|MessageDigest
name|getSha384Digest
parameter_list|()
block|{
return|return
name|getDigest
argument_list|(
literal|"SHA-384"
argument_list|)
return|;
block|}
comment|/**      * Returns an SHA-512 digest.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @return An SHA-512 digest instance.      * @throws RuntimeException when a {@link java.security.NoSuchAlgorithmException} is caught.      */
DECL|method|getSha512Digest
specifier|private
specifier|static
name|MessageDigest
name|getSha512Digest
parameter_list|()
block|{
return|return
name|getDigest
argument_list|(
literal|"SHA-512"
argument_list|)
return|;
block|}
comment|/**      * Returns an SHA-1 digest.      *      * @return An SHA-1 digest instance.      * @throws RuntimeException when a {@link java.security.NoSuchAlgorithmException} is caught.      */
DECL|method|getShaDigest
specifier|private
specifier|static
name|MessageDigest
name|getShaDigest
parameter_list|()
block|{
return|return
name|getDigest
argument_list|(
literal|"SHA"
argument_list|)
return|;
block|}
comment|/**      * Calculates the MD5 digest and returns the value as a 16 element<code>byte[]</code>.      *      * @param data Data to digest      * @return MD5 digest      */
DECL|method|md5
specifier|public
specifier|static
name|byte
index|[]
name|md5
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getMd5Digest
argument_list|()
operator|.
name|digest
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the MD5 digest and returns the value as a 16 element<code>byte[]</code>.      *      * @param data Data to digest      * @return MD5 digest      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|md5
specifier|public
specifier|static
name|byte
index|[]
name|md5
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|digest
argument_list|(
name|getMd5Digest
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the MD5 digest and returns the value as a 16 element<code>byte[]</code>.      *      * @param data Data to digest      * @return MD5 digest      */
DECL|method|md5
specifier|public
specifier|static
name|byte
index|[]
name|md5
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|md5
argument_list|(
name|getBytesUtf8
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the MD5 digest and returns the value as a 32 character hex string.      *      * @param data Data to digest      * @return MD5 digest as a hex string      */
DECL|method|md5Hex
specifier|public
specifier|static
name|String
name|md5Hex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|md5
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the MD5 digest and returns the value as a 32 character hex string.      *      * @param data Data to digest      * @return MD5 digest as a hex string      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|md5Hex
specifier|public
specifier|static
name|String
name|md5Hex
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|md5
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the MD5 digest and returns the value as a 32 character hex string.      *      * @param data Data to digest      * @return MD5 digest as a hex string      */
DECL|method|md5Hex
specifier|public
specifier|static
name|String
name|md5Hex
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|md5
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
DECL|field|US_ASCII
specifier|final
specifier|static
specifier|private
name|Charset
name|US_ASCII
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
decl_stmt|;
DECL|method|md5HexToByteArray
specifier|public
specifier|static
name|byte
index|[]
name|md5HexToByteArray
parameter_list|(
name|String
name|md5Hex
parameter_list|)
block|{
return|return
name|md5Hex
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
return|;
block|}
DECL|method|md5HexFromByteArray
specifier|public
specifier|static
name|String
name|md5HexFromByteArray
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
literal|32
argument_list|,
name|US_ASCII
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-1 digest and returns the value as a<code>byte[]</code>.      *      * @param data Data to digest      * @return SHA-1 digest      */
DECL|method|sha
specifier|public
specifier|static
name|byte
index|[]
name|sha
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getShaDigest
argument_list|()
operator|.
name|digest
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-1 digest and returns the value as a<code>byte[]</code>.      *      * @param data Data to digest      * @return SHA-1 digest      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|sha
specifier|public
specifier|static
name|byte
index|[]
name|sha
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|digest
argument_list|(
name|getShaDigest
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-1 digest and returns the value as a<code>byte[]</code>.      *      * @param data Data to digest      * @return SHA-1 digest      */
DECL|method|sha
specifier|public
specifier|static
name|byte
index|[]
name|sha
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|sha
argument_list|(
name|getBytesUtf8
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-256 digest and returns the value as a<code>byte[]</code>.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-256 digest      * @since 1.4      */
DECL|method|sha256
specifier|public
specifier|static
name|byte
index|[]
name|sha256
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getSha256Digest
argument_list|()
operator|.
name|digest
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-256 digest and returns the value as a<code>byte[]</code>.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-256 digest      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|sha256
specifier|public
specifier|static
name|byte
index|[]
name|sha256
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|digest
argument_list|(
name|getSha256Digest
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-256 digest and returns the value as a<code>byte[]</code>.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-256 digest      * @since 1.4      */
DECL|method|sha256
specifier|public
specifier|static
name|byte
index|[]
name|sha256
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|sha256
argument_list|(
name|getBytesUtf8
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-256 digest and returns the value as a hex string.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-256 digest as a hex string      * @since 1.4      */
DECL|method|sha256Hex
specifier|public
specifier|static
name|String
name|sha256Hex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha256
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-256 digest and returns the value as a hex string.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-256 digest as a hex string      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|sha256Hex
specifier|public
specifier|static
name|String
name|sha256Hex
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha256
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-256 digest and returns the value as a hex string.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-256 digest as a hex string      * @since 1.4      */
DECL|method|sha256Hex
specifier|public
specifier|static
name|String
name|sha256Hex
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha256
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-384 digest and returns the value as a<code>byte[]</code>.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-384 digest      * @since 1.4      */
DECL|method|sha384
specifier|public
specifier|static
name|byte
index|[]
name|sha384
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getSha384Digest
argument_list|()
operator|.
name|digest
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-384 digest and returns the value as a<code>byte[]</code>.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-384 digest      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|sha384
specifier|public
specifier|static
name|byte
index|[]
name|sha384
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|digest
argument_list|(
name|getSha384Digest
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-384 digest and returns the value as a<code>byte[]</code>.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-384 digest      * @since 1.4      */
DECL|method|sha384
specifier|public
specifier|static
name|byte
index|[]
name|sha384
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|sha384
argument_list|(
name|getBytesUtf8
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-384 digest and returns the value as a hex string.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-384 digest as a hex string      * @since 1.4      */
DECL|method|sha384Hex
specifier|public
specifier|static
name|String
name|sha384Hex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha384
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-384 digest and returns the value as a hex string.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-384 digest as a hex string      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|sha384Hex
specifier|public
specifier|static
name|String
name|sha384Hex
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha384
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-384 digest and returns the value as a hex string.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-384 digest as a hex string      * @since 1.4      */
DECL|method|sha384Hex
specifier|public
specifier|static
name|String
name|sha384Hex
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha384
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-512 digest and returns the value as a<code>byte[]</code>.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-512 digest      * @since 1.4      */
DECL|method|sha512
specifier|public
specifier|static
name|byte
index|[]
name|sha512
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getSha512Digest
argument_list|()
operator|.
name|digest
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-512 digest and returns the value as a<code>byte[]</code>.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-512 digest      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|sha512
specifier|public
specifier|static
name|byte
index|[]
name|sha512
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|digest
argument_list|(
name|getSha512Digest
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-512 digest and returns the value as a<code>byte[]</code>.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-512 digest      * @since 1.4      */
DECL|method|sha512
specifier|public
specifier|static
name|byte
index|[]
name|sha512
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|sha512
argument_list|(
name|getBytesUtf8
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-512 digest and returns the value as a hex string.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-512 digest as a hex string      * @since 1.4      */
DECL|method|sha512Hex
specifier|public
specifier|static
name|String
name|sha512Hex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha512
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-512 digest and returns the value as a hex string.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-512 digest as a hex string      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|sha512Hex
specifier|public
specifier|static
name|String
name|sha512Hex
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha512
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-512 digest and returns the value as a hex string.      *<p>      * Throws a<code>RuntimeException</code> on JRE versions prior to 1.4.0.      *</p>      *      * @param data Data to digest      * @return SHA-512 digest as a hex string      * @since 1.4      */
DECL|method|sha512Hex
specifier|public
specifier|static
name|String
name|sha512Hex
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha512
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-1 digest and returns the value as a hex string.      *      * @param data Data to digest      * @return SHA-1 digest as a hex string      */
DECL|method|shaHex
specifier|public
specifier|static
name|String
name|shaHex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-1 digest and returns the value as a hex string.      *      * @param data Data to digest      * @return SHA-1 digest as a hex string      * @throws IOException On error reading from the stream      * @since 1.4      */
DECL|method|shaHex
specifier|public
specifier|static
name|String
name|shaHex
parameter_list|(
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Calculates the SHA-1 digest and returns the value as a hex string.      *      * @param data Data to digest      * @return SHA-1 digest as a hex string      */
DECL|method|shaHex
specifier|public
specifier|static
name|String
name|shaHex
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
DECL|field|NULL_DIGEST
specifier|public
specifier|static
specifier|final
name|NullDigest
name|NULL_DIGEST
init|=
operator|new
name|NullDigest
argument_list|(
literal|"null"
argument_list|)
decl_stmt|;
DECL|class|NullDigest
specifier|private
specifier|static
specifier|final
class|class
name|NullDigest
extends|extends
name|MessageDigest
block|{
DECL|method|NullDigest
specifier|private
name|NullDigest
parameter_list|(
name|String
name|algorithm
parameter_list|)
block|{
name|super
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
block|}
DECL|method|engineUpdate
annotation|@
name|Override
specifier|protected
name|void
name|engineUpdate
parameter_list|(
name|byte
name|input
parameter_list|)
block|{         }
DECL|method|engineUpdate
annotation|@
name|Override
specifier|protected
name|void
name|engineUpdate
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{         }
DECL|method|engineDigest
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|engineDigest
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|engineReset
annotation|@
name|Override
specifier|protected
name|void
name|engineReset
parameter_list|()
block|{         }
block|}
block|}
end_class

end_unit

