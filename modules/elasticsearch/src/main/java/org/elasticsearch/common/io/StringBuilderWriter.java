begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|ThreadLocals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_comment
comment|/**  * A Writer based on {@link StringBuilder}. Also alows for thread local reuse of {@link StringBuilder}  * by using:<code>StringBuilderWriter.Cached.cached()</code> in order to obtain the cached writer. Note,  * in such cases, the {@link #getBuilder()} should be called and used (usually<code>toString</code> it)  * before another usage of the writer.  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
DECL|class|StringBuilderWriter
specifier|public
class|class
name|StringBuilderWriter
extends|extends
name|Writer
block|{
comment|/**      * A thread local based cache of {@link StringBuilderWriter}.      */
DECL|class|Cached
specifier|public
specifier|static
class|class
name|Cached
block|{
DECL|field|cache
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|StringBuilderWriter
argument_list|>
argument_list|>
name|cache
init|=
operator|new
name|ThreadLocal
argument_list|<
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|StringBuilderWriter
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|StringBuilderWriter
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|ThreadLocals
operator|.
name|CleanableValue
argument_list|<
name|StringBuilderWriter
argument_list|>
argument_list|(
operator|new
name|StringBuilderWriter
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**          * Returns the cached thread local writer, with its internal {@link StringBuilder} cleared.          */
DECL|method|cached
specifier|public
specifier|static
name|StringBuilderWriter
name|cached
parameter_list|()
block|{
name|StringBuilderWriter
name|writer
init|=
name|cache
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|writer
operator|.
name|getBuilder
argument_list|()
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|writer
return|;
block|}
block|}
DECL|field|builder
specifier|private
specifier|final
name|StringBuilder
name|builder
decl_stmt|;
comment|/**      * Construct a new {@link StringBuilder} instance with default capacity.      */
DECL|method|StringBuilderWriter
specifier|public
name|StringBuilderWriter
parameter_list|()
block|{
name|this
operator|.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
comment|/**      * Construct a new {@link StringBuilder} instance with the specified capacity.      *      * @param capacity The initial capacity of the underlying {@link StringBuilder}      */
DECL|method|StringBuilderWriter
specifier|public
name|StringBuilderWriter
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a new instance with the specified {@link StringBuilder}.      *      * @param builder The String builder      */
DECL|method|StringBuilderWriter
specifier|public
name|StringBuilderWriter
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
operator|(
name|builder
operator|!=
literal|null
condition|?
name|builder
else|:
operator|new
name|StringBuilder
argument_list|()
operator|)
expr_stmt|;
block|}
comment|/**      * Append a single character to this Writer.      *      * @param value The character to append      * @return This writer instance      */
DECL|method|append
specifier|public
name|Writer
name|append
parameter_list|(
name|char
name|value
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Append a character sequence to this Writer.      *      * @param value The character to append      * @return This writer instance      */
DECL|method|append
specifier|public
name|Writer
name|append
parameter_list|(
name|CharSequence
name|value
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Append a portion of a character sequence to the {@link StringBuilder}.      *      * @param value The character to append      * @param start The index of the first character      * @param end   The index of the last character + 1      * @return This writer instance      */
DECL|method|append
specifier|public
name|Writer
name|append
parameter_list|(
name|CharSequence
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Closing this writer has no effect.      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{     }
comment|/**      * Flushing this writer has no effect.      */
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
block|{     }
comment|/**      * Write a String to the {@link StringBuilder}.      *      * @param value The value to write      */
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Write a portion of a character array to the {@link StringBuilder}.      *      * @param value  The value to write      * @param offset The index of the first character      * @param length The number of characters to write      */
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return the underlying builder.      *      * @return The underlying builder      */
DECL|method|getBuilder
specifier|public
name|StringBuilder
name|getBuilder
parameter_list|()
block|{
return|return
name|builder
return|;
block|}
comment|/**      * Returns {@link StringBuilder#toString()}.      *      * @return The contents of the String builder.      */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

