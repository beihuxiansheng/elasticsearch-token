begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent.smile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|smile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|jackson
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContentGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapConverter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|SmileXContentGenerator
specifier|public
class|class
name|SmileXContentGenerator
extends|extends
name|JsonXContentGenerator
block|{
DECL|method|SmileXContentGenerator
specifier|public
name|SmileXContentGenerator
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
block|{
name|super
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
DECL|method|contentType
annotation|@
name|Override
specifier|public
name|XContentType
name|contentType
parameter_list|()
block|{
return|return
name|XContentType
operator|.
name|SMILE
return|;
block|}
DECL|method|writeRawField
annotation|@
name|Override
specifier|public
name|void
name|writeRawField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|FastByteArrayOutputStream
name|bos
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFieldName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
comment|// crap here, need to find a better way... (at least don't create the map and direct parser to generator)
name|XContentMapConverter
operator|.
name|writeMap
argument_list|(
name|this
argument_list|,
name|SmileXContent
operator|.
name|smileXContent
operator|.
name|createParser
argument_list|(
name|content
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

