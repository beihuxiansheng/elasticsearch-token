begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.bloom
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bloom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|BloomFilterFactory
specifier|public
class|class
name|BloomFilterFactory
block|{
DECL|field|logger
specifier|private
specifier|static
name|ESLogger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|BloomFilterFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|EXCESS
specifier|private
specifier|static
specifier|final
name|int
name|EXCESS
init|=
literal|20
decl_stmt|;
comment|/**      * @return A BloomFilter with the lowest practical false positive probability      *         for the given number of elements.      */
DECL|method|getFilter
specifier|public
specifier|static
name|BloomFilter
name|getFilter
parameter_list|(
name|long
name|numElements
parameter_list|,
name|int
name|targetBucketsPerElem
parameter_list|)
block|{
name|int
name|maxBucketsPerElement
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|BloomCalculations
operator|.
name|maxBucketsPerElement
argument_list|(
name|numElements
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|bucketsPerElement
init|=
name|Math
operator|.
name|min
argument_list|(
name|targetBucketsPerElem
argument_list|,
name|maxBucketsPerElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketsPerElement
operator|<
name|targetBucketsPerElem
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot provide an optimal BloomFilter for %d elements (%d/%d buckets per element)."
argument_list|,
name|numElements
argument_list|,
name|bucketsPerElement
argument_list|,
name|targetBucketsPerElem
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BloomCalculations
operator|.
name|BloomSpecification
name|spec
init|=
name|BloomCalculations
operator|.
name|computeBloomSpec
argument_list|(
name|bucketsPerElement
argument_list|)
decl_stmt|;
return|return
operator|new
name|ObsBloomFilter
argument_list|(
name|spec
operator|.
name|K
argument_list|,
name|bucketsFor
argument_list|(
name|numElements
argument_list|,
name|spec
operator|.
name|bucketsPerElement
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @return The smallest BloomFilter that can provide the given false positive      *         probability rate for the given number of elements.      *      *         Asserts that the given probability can be satisfied using this filter.      */
DECL|method|getFilter
specifier|public
specifier|static
name|BloomFilter
name|getFilter
parameter_list|(
name|long
name|numElements
parameter_list|,
name|double
name|maxFalsePosProbability
parameter_list|)
block|{
assert|assert
name|maxFalsePosProbability
operator|<=
literal|1.0
operator|:
literal|"Invalid probability"
assert|;
name|int
name|bucketsPerElement
init|=
name|BloomCalculations
operator|.
name|maxBucketsPerElement
argument_list|(
name|numElements
argument_list|)
decl_stmt|;
name|BloomCalculations
operator|.
name|BloomSpecification
name|spec
init|=
name|BloomCalculations
operator|.
name|computeBloomSpec
argument_list|(
name|bucketsPerElement
argument_list|,
name|maxFalsePosProbability
argument_list|)
decl_stmt|;
return|return
operator|new
name|ObsBloomFilter
argument_list|(
name|spec
operator|.
name|K
argument_list|,
name|bucketsFor
argument_list|(
name|numElements
argument_list|,
name|spec
operator|.
name|bucketsPerElement
argument_list|)
argument_list|)
return|;
block|}
DECL|method|bucketsFor
specifier|private
specifier|static
name|long
name|bucketsFor
parameter_list|(
name|long
name|numElements
parameter_list|,
name|int
name|bucketsPer
parameter_list|)
block|{
return|return
name|numElements
operator|*
name|bucketsPer
operator|+
name|EXCESS
return|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|long
name|elements
init|=
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"100m"
argument_list|)
operator|.
name|singles
argument_list|()
decl_stmt|;
name|BloomFilter
name|filter
init|=
name|BloomFilterFactory
operator|.
name|getFilter
argument_list|(
name|elements
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Filter size: "
operator|+
operator|new
name|ByteSizeValue
argument_list|(
name|filter
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|utf8s
init|=
name|UUID
operator|.
name|randomBase64UUID
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|utf8s
argument_list|,
literal|0
argument_list|,
name|utf8s
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|long
name|falsePositives
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|utf8s
init|=
name|UUID
operator|.
name|randomBase64UUID
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|isPresent
argument_list|(
name|utf8s
argument_list|,
literal|0
argument_list|,
name|utf8s
operator|.
name|length
argument_list|)
condition|)
block|{
name|falsePositives
operator|++
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"false positives: "
operator|+
name|falsePositives
argument_list|)
expr_stmt|;
name|byte
index|[]
name|utf8s
init|=
name|UUID
operator|.
name|randomBase64UUID
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|isPresent
argument_list|(
name|utf8s
argument_list|,
literal|0
argument_list|,
name|utf8s
operator|.
name|length
argument_list|)
condition|)
block|{             }
block|}
name|long
name|timeSize
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Indexed in "
operator|+
operator|new
name|TimeValue
argument_list|(
name|timeSize
argument_list|)
operator|+
literal|", TPS: "
operator|+
operator|(
name|elements
operator|/
name|timeSize
operator|)
operator|+
literal|" per millisecond"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

