begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this  * file except in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS  * OF ANY KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress.lzf
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * Encoder that handles splitting of input into chunks to encode,  * calls {@link ChunkEncoder} to compress individual chunks and  * combines resulting chunks into contiguous output byte array.  *  * @author tatu@ning.com  */
end_comment

begin_class
DECL|class|LZFEncoder
specifier|public
class|class
name|LZFEncoder
block|{
comment|// Static methods only, no point in instantiating
DECL|method|LZFEncoder
specifier|private
name|LZFEncoder
parameter_list|()
block|{     }
DECL|method|encode
specifier|public
specifier|static
name|byte
index|[]
name|encode
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|encode
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|encode
specifier|public
specifier|static
name|void
name|encode
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|left
init|=
name|length
decl_stmt|;
name|ChunkEncoder
name|enc
init|=
operator|new
name|ChunkEncoder
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|int
name|chunkLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
argument_list|,
name|left
argument_list|)
decl_stmt|;
name|enc
operator|.
name|encodeChunk
argument_list|(
name|os
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|chunkLen
argument_list|)
expr_stmt|;
name|left
operator|-=
name|chunkLen
expr_stmt|;
comment|// shortcut: if it all fit in, no need to coalesce:
if|if
condition|(
name|left
operator|<
literal|1
condition|)
block|{
return|return;
block|}
name|int
name|inputOffset
init|=
name|chunkLen
decl_stmt|;
do|do
block|{
name|chunkLen
operator|=
name|Math
operator|.
name|min
argument_list|(
name|left
argument_list|,
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
argument_list|)
expr_stmt|;
name|enc
operator|.
name|encodeChunk
argument_list|(
name|os
argument_list|,
name|data
argument_list|,
name|inputOffset
argument_list|,
name|chunkLen
argument_list|)
expr_stmt|;
name|inputOffset
operator|+=
name|chunkLen
expr_stmt|;
name|left
operator|-=
name|chunkLen
expr_stmt|;
block|}
do|while
condition|(
name|left
operator|>
literal|0
condition|)
do|;
block|}
comment|/**      * Method for compressing given input data using LZF encoding and      * block structure (compatible with lzf command line utility).      * Result consists of a sequence of chunks.      */
DECL|method|encode
specifier|public
specifier|static
name|byte
index|[]
name|encode
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|left
init|=
name|length
decl_stmt|;
name|ChunkEncoder
name|enc
init|=
operator|new
name|ChunkEncoder
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|int
name|chunkLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
argument_list|,
name|left
argument_list|)
decl_stmt|;
name|LZFChunk
name|first
init|=
name|enc
operator|.
name|encodeChunk
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|chunkLen
argument_list|)
decl_stmt|;
name|left
operator|-=
name|chunkLen
expr_stmt|;
comment|// shortcut: if it all fit in, no need to coalesce:
if|if
condition|(
name|left
operator|<
literal|1
condition|)
block|{
return|return
name|first
operator|.
name|getData
argument_list|()
return|;
block|}
comment|// otherwise need to get other chunks:
name|int
name|resultBytes
init|=
name|first
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|inputOffset
init|=
name|chunkLen
decl_stmt|;
name|LZFChunk
name|last
init|=
name|first
decl_stmt|;
do|do
block|{
name|chunkLen
operator|=
name|Math
operator|.
name|min
argument_list|(
name|left
argument_list|,
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
argument_list|)
expr_stmt|;
name|LZFChunk
name|chunk
init|=
name|enc
operator|.
name|encodeChunk
argument_list|(
name|data
argument_list|,
name|inputOffset
argument_list|,
name|chunkLen
argument_list|)
decl_stmt|;
name|inputOffset
operator|+=
name|chunkLen
expr_stmt|;
name|left
operator|-=
name|chunkLen
expr_stmt|;
name|resultBytes
operator|+=
name|chunk
operator|.
name|length
argument_list|()
expr_stmt|;
name|last
operator|.
name|setNext
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
name|last
operator|=
name|chunk
expr_stmt|;
block|}
do|while
condition|(
name|left
operator|>
literal|0
condition|)
do|;
comment|// and then coalesce returns into single contiguous byte array
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|resultBytes
index|]
decl_stmt|;
name|int
name|ptr
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|first
operator|!=
literal|null
condition|;
name|first
operator|=
name|first
operator|.
name|next
argument_list|()
control|)
block|{
name|ptr
operator|=
name|first
operator|.
name|copyTo
argument_list|(
name|result
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

