begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|LatLng
specifier|public
class|class
name|LatLng
block|{
DECL|field|lat
specifier|private
name|double
name|lat
decl_stmt|;
DECL|field|lng
specifier|private
name|double
name|lng
decl_stmt|;
DECL|field|normalized
specifier|private
name|boolean
name|normalized
decl_stmt|;
DECL|method|LatLng
specifier|public
name|LatLng
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lng
parameter_list|)
block|{
if|if
condition|(
name|lat
operator|>
literal|90.0
operator|||
name|lat
operator|<
operator|-
literal|90.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal latitude value "
operator|+
name|lat
argument_list|)
throw|;
block|}
name|this
operator|.
name|lat
operator|=
name|lat
expr_stmt|;
name|this
operator|.
name|lng
operator|=
name|lng
expr_stmt|;
block|}
DECL|method|isNormalized
specifier|public
name|boolean
name|isNormalized
parameter_list|()
block|{
return|return
name|normalized
operator|||
operator|(
operator|(
name|lng
operator|>=
operator|-
literal|180
operator|)
operator|&&
operator|(
name|lng
operator|<=
literal|180
operator|)
operator|)
return|;
block|}
DECL|method|normalize
specifier|public
name|LatLng
name|normalize
parameter_list|()
block|{
if|if
condition|(
name|isNormalized
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|double
name|delta
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lng
operator|<
literal|0
condition|)
block|{
name|delta
operator|=
literal|360
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lng
operator|>=
literal|0
condition|)
block|{
name|delta
operator|=
operator|-
literal|360
expr_stmt|;
block|}
name|double
name|newLng
init|=
name|lng
decl_stmt|;
while|while
condition|(
name|newLng
operator|<=
operator|-
literal|180
operator|||
name|newLng
operator|>=
literal|180
condition|)
block|{
name|newLng
operator|+=
name|delta
expr_stmt|;
block|}
name|LatLng
name|ret
init|=
operator|new
name|LatLng
argument_list|(
name|lat
argument_list|,
name|newLng
argument_list|)
decl_stmt|;
name|ret
operator|.
name|normalized
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getLat
specifier|public
name|double
name|getLat
parameter_list|()
block|{
return|return
name|this
operator|.
name|lat
return|;
block|}
DECL|method|getLng
specifier|public
name|double
name|getLng
parameter_list|()
block|{
return|return
name|this
operator|.
name|lng
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|LatLng
name|other
parameter_list|)
block|{
return|return
name|lat
operator|==
name|other
operator|.
name|getLat
argument_list|()
operator|&&
name|lng
operator|==
name|other
operator|.
name|getLng
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
operator|instanceof
name|LatLng
operator|&&
name|equals
argument_list|(
operator|(
name|LatLng
operator|)
name|other
argument_list|)
return|;
block|}
comment|/**      * Calculates the distance between two lat/lng's in miles.      * Imported from mq java client.      *      * @param ll2 Second lat,lng position to calculate distance to.      * @return Returns the distance in miles.      */
DECL|method|arcDistance
specifier|public
name|double
name|arcDistance
parameter_list|(
name|LatLng
name|ll2
parameter_list|)
block|{
return|return
name|arcDistance
argument_list|(
name|ll2
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
return|;
block|}
comment|/**      * Calculates the distance between two lat/lng's in miles or meters.      * Imported from mq java client.  Variable references changed to match.      *      * @param ll2    Second lat,lng position to calculate distance to.      * @param lUnits Units to calculate distace, defaults to miles      * @return Returns the distance in meters or miles.      */
DECL|method|arcDistance
specifier|public
name|double
name|arcDistance
parameter_list|(
name|LatLng
name|ll2
parameter_list|,
name|DistanceUnit
name|lUnits
parameter_list|)
block|{
name|LatLng
name|ll1
init|=
name|normalize
argument_list|()
decl_stmt|;
name|ll2
operator|=
name|ll2
operator|.
name|normalize
argument_list|()
expr_stmt|;
name|double
name|lat1
init|=
name|ll1
operator|.
name|getLat
argument_list|()
decl_stmt|,
name|lng1
init|=
name|ll1
operator|.
name|getLng
argument_list|()
decl_stmt|;
name|double
name|lat2
init|=
name|ll2
operator|.
name|getLat
argument_list|()
decl_stmt|,
name|lng2
init|=
name|ll2
operator|.
name|getLng
argument_list|()
decl_stmt|;
comment|// Check for same position
if|if
condition|(
name|lat1
operator|==
name|lat2
operator|&&
name|lng1
operator|==
name|lng2
condition|)
return|return
literal|0.0
return|;
comment|// Get the m_dLongitude diffeernce. Don't need to worry about
comment|// crossing 180 since cos(x) = cos(-x)
name|double
name|dLon
init|=
name|lng2
operator|-
name|lng1
decl_stmt|;
name|double
name|a
init|=
name|radians
argument_list|(
literal|90.0
operator|-
name|lat1
argument_list|)
decl_stmt|;
name|double
name|c
init|=
name|radians
argument_list|(
literal|90.0
operator|-
name|lat2
argument_list|)
decl_stmt|;
name|double
name|cosB
init|=
operator|(
name|Math
operator|.
name|cos
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|c
argument_list|)
operator|)
operator|+
operator|(
name|Math
operator|.
name|sin
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|c
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|radians
argument_list|(
name|dLon
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|double
name|radius
init|=
operator|(
name|lUnits
operator|==
name|DistanceUnit
operator|.
name|MILES
operator|)
condition|?
literal|3963.205
comment|/* MILERADIUSOFEARTH */
else|:
literal|6378.160187
comment|/* KMRADIUSOFEARTH */
decl_stmt|;
comment|// Find angle subtended (with some bounds checking) in radians and
comment|// multiply by earth radius to find the arc distance
if|if
condition|(
name|cosB
operator|<
operator|-
literal|1.0
condition|)
return|return
literal|3.14159265358979323846
comment|/* PI */
operator|*
name|radius
return|;
elseif|else
if|if
condition|(
name|cosB
operator|>=
literal|1.0
condition|)
return|return
literal|0
return|;
else|else
return|return
name|Math
operator|.
name|acos
argument_list|(
name|cosB
argument_list|)
operator|*
name|radius
return|;
block|}
DECL|method|radians
specifier|private
name|double
name|radians
parameter_list|(
name|double
name|a
parameter_list|)
block|{
return|return
name|a
operator|*
literal|0.01745329251994
return|;
block|}
block|}
end_class

end_unit

