begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.blobstore.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|AppendableBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|ImmutableBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * An appendable container that uses an immutable container to implement an appendable one.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ImmutableAppendableBlobContainer
specifier|public
class|class
name|ImmutableAppendableBlobContainer
extends|extends
name|AbstractBlobContainer
implements|implements
name|AppendableBlobContainer
block|{
DECL|field|container
specifier|private
specifier|final
name|ImmutableBlobContainer
name|container
decl_stmt|;
DECL|method|ImmutableAppendableBlobContainer
specifier|public
name|ImmutableAppendableBlobContainer
parameter_list|(
name|ImmutableBlobContainer
name|container
parameter_list|)
block|{
name|super
argument_list|(
name|container
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
DECL|method|appendBlob
annotation|@
name|Override
specifier|public
name|AppendableBlob
name|appendBlob
parameter_list|(
specifier|final
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AppendableBlob
argument_list|()
block|{
name|int
name|part
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
specifier|final
name|AppendBlobListener
name|listener
parameter_list|)
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|String
name|partBlobName
init|=
name|blobName
operator|+
literal|".a"
operator|+
operator|(
name|part
operator|++
operator|)
decl_stmt|;
try|try
block|{
name|listener
operator|.
name|withStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|FastByteArrayInputStream
name|is
init|=
operator|new
name|FastByteArrayInputStream
argument_list|(
name|out
operator|.
name|unsafeByteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|.
name|writeBlob
argument_list|(
name|partBlobName
argument_list|,
name|is
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|ImmutableBlobContainer
operator|.
name|WriterListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|()
block|{
name|listener
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{              }
block|}
return|;
block|}
DECL|method|readBlob
annotation|@
name|Override
specifier|public
name|void
name|readBlob
parameter_list|(
specifier|final
name|String
name|blobName
parameter_list|,
specifier|final
name|ReadBlobListener
name|listener
parameter_list|)
block|{
name|container
operator|.
name|readBlob
argument_list|(
name|blobName
operator|+
literal|".a0"
argument_list|,
operator|new
name|ReadBlobListener
argument_list|()
block|{
name|int
name|part
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onPartial
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|listener
operator|.
name|onPartial
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|()
block|{
name|part
operator|++
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|blobExists
argument_list|(
name|blobName
operator|+
literal|".a"
operator|+
name|part
argument_list|)
condition|)
block|{
name|container
operator|.
name|readBlob
argument_list|(
name|blobName
operator|+
literal|".a"
operator|+
name|part
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|listBlobs
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|listBlobs
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|buildVirtualBlobs
argument_list|(
name|container
operator|.
name|listBlobs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|listBlobsByPrefix
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|listBlobsByPrefix
parameter_list|(
name|String
name|blobNamePrefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|buildVirtualBlobs
argument_list|(
name|container
operator|.
name|listBlobsByPrefix
argument_list|(
name|blobNamePrefix
argument_list|)
argument_list|)
return|;
block|}
DECL|method|blobExists
annotation|@
name|Override
specifier|public
name|boolean
name|blobExists
parameter_list|(
name|String
name|blobName
parameter_list|)
block|{
return|return
name|container
operator|.
name|blobExists
argument_list|(
name|blobName
operator|+
literal|".a0"
argument_list|)
return|;
block|}
DECL|method|deleteBlob
annotation|@
name|Override
specifier|public
name|boolean
name|deleteBlob
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
block|{
name|container
operator|.
name|deleteBlobsByPrefix
argument_list|(
name|blobName
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|deleteBlobsByFilter
annotation|@
name|Override
specifier|public
name|void
name|deleteBlobsByFilter
parameter_list|(
name|BlobNameFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
init|=
name|buildVirtualBlobs
argument_list|(
name|container
operator|.
name|listBlobs
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|blobName
range|:
name|blobs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|blobName
argument_list|)
condition|)
block|{
name|container
operator|.
name|deleteBlob
argument_list|(
name|blobName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|deleteBlobsByPrefix
annotation|@
name|Override
specifier|public
name|void
name|deleteBlobsByPrefix
parameter_list|(
name|String
name|blobNamePrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|container
operator|.
name|deleteBlobsByPrefix
argument_list|(
name|blobNamePrefix
argument_list|)
expr_stmt|;
block|}
DECL|method|buildVirtualBlobs
specifier|private
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|buildVirtualBlobs
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|BlobMetaData
name|blob
range|:
name|blobs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|blob
operator|.
name|name
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".a0"
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|blob
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|blob
operator|.
name|name
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|".a0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|long
name|sizeInBytes
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|blobs
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// no chunking
name|sizeInBytes
operator|=
name|blobs
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// chunking...
name|int
name|part
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|BlobMetaData
name|md
init|=
name|blobs
operator|.
name|get
argument_list|(
name|name
operator|+
literal|".a"
operator|+
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|sizeInBytes
operator|+=
name|md
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
name|part
operator|++
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PlainBlobMetaData
argument_list|(
name|name
argument_list|,
name|sizeInBytes
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

