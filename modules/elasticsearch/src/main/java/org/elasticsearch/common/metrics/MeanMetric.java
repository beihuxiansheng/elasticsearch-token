begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|jsr166e
operator|.
name|LongAdder
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|MeanMetric
specifier|public
class|class
name|MeanMetric
implements|implements
name|Metric
block|{
DECL|field|counter
specifier|private
specifier|final
name|LongAdder
name|counter
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
DECL|field|sum
specifier|private
specifier|final
name|LongAdder
name|sum
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
DECL|method|inc
specifier|public
name|void
name|inc
parameter_list|(
name|long
name|n
parameter_list|)
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
name|sum
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|dec
specifier|public
name|void
name|dec
parameter_list|(
name|long
name|n
parameter_list|)
block|{
name|counter
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|sum
operator|.
name|add
argument_list|(
operator|-
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|count
specifier|public
name|long
name|count
parameter_list|()
block|{
return|return
name|counter
operator|.
name|sum
argument_list|()
return|;
block|}
DECL|method|sum
specifier|public
name|long
name|sum
parameter_list|()
block|{
return|return
name|sum
operator|.
name|sum
argument_list|()
return|;
block|}
DECL|method|mean
specifier|public
name|double
name|mean
parameter_list|()
block|{
name|long
name|count
init|=
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|sum
operator|.
name|sum
argument_list|()
operator|/
operator|(
name|double
operator|)
name|count
return|;
block|}
return|return
literal|0.0
return|;
block|}
block|}
end_class

end_unit

