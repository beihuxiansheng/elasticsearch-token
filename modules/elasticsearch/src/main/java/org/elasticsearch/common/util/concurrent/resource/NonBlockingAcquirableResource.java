begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent.resource
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicStampedReference
import|;
end_import

begin_comment
comment|/**  * A wrapper around a resource that can be released. Note, release should not be  * called directly on the resource itself.  *<p/>  *<p>Yea, I now, the fact that the resouce itself is releasable basically means that  * users of this class should take care... .  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|NonBlockingAcquirableResource
specifier|public
class|class
name|NonBlockingAcquirableResource
parameter_list|<
name|T
extends|extends
name|Releasable
parameter_list|>
implements|implements
name|AcquirableResource
argument_list|<
name|T
argument_list|>
block|{
DECL|field|resource
specifier|private
specifier|final
name|T
name|resource
decl_stmt|;
DECL|field|counter
specifier|private
name|AtomicStampedReference
argument_list|<
name|Boolean
argument_list|>
name|counter
init|=
operator|new
name|AtomicStampedReference
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|NonBlockingAcquirableResource
specifier|public
name|NonBlockingAcquirableResource
parameter_list|(
name|T
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
DECL|method|resource
annotation|@
name|Override
specifier|public
name|T
name|resource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
DECL|method|acquire
annotation|@
name|Override
specifier|public
name|boolean
name|acquire
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|stamp
init|=
name|counter
operator|.
name|getStamp
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|counter
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|stamp
argument_list|,
name|stamp
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|counter
operator|.
name|getReference
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|method|release
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|currentReference
init|=
name|counter
operator|.
name|getReference
argument_list|()
decl_stmt|;
name|int
name|stamp
init|=
name|counter
operator|.
name|getStamp
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|counter
operator|.
name|compareAndSet
argument_list|(
name|currentReference
argument_list|,
name|currentReference
argument_list|,
name|stamp
argument_list|,
name|stamp
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|currentReference
operator|&&
operator|(
name|stamp
operator|<=
literal|1
operator|)
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
DECL|method|markForClose
annotation|@
name|Override
specifier|public
name|void
name|markForClose
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|stamp
init|=
name|counter
operator|.
name|getStamp
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|counter
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|stamp
argument_list|,
name|stamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|stamp
operator|<=
literal|0
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
elseif|else
if|if
condition|(
name|counter
operator|.
name|getReference
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
DECL|method|forceClose
annotation|@
name|Override
specifier|public
name|void
name|forceClose
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|close
specifier|private
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

