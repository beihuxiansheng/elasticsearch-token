begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_interface
DECL|interface|BlobContainer
specifier|public
interface|interface
name|BlobContainer
block|{
DECL|interface|BlobNameFilter
interface|interface
name|BlobNameFilter
block|{
comment|/**          * Return<tt>false</tt> if the blob should be filtered.          */
DECL|method|accept
name|boolean
name|accept
parameter_list|(
name|String
name|blobName
parameter_list|)
function_decl|;
block|}
DECL|interface|ReadBlobListener
interface|interface
name|ReadBlobListener
block|{
DECL|method|onPartial
name|void
name|onPartial
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|onCompleted
name|void
name|onCompleted
parameter_list|()
function_decl|;
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
DECL|method|path
name|BlobPath
name|path
parameter_list|()
function_decl|;
DECL|method|readBlob
name|void
name|readBlob
parameter_list|(
name|String
name|blobName
parameter_list|,
name|ReadBlobListener
name|listener
parameter_list|)
function_decl|;
DECL|method|readBlobFully
name|byte
index|[]
name|readBlobFully
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|deleteBlob
name|boolean
name|deleteBlob
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|deleteBlobsByPrefix
name|void
name|deleteBlobsByPrefix
parameter_list|(
name|String
name|blobNamePrefix
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|deleteBlobsByFilter
name|void
name|deleteBlobsByFilter
parameter_list|(
name|BlobNameFilter
name|filter
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|listBlobs
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|listBlobs
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|listBlobsByPrefix
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|listBlobsByPrefix
parameter_list|(
name|String
name|blobNamePrefix
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

