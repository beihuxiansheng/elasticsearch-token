begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.compress.lzf
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_class
DECL|class|LZFInputStream
specifier|public
class|class
name|LZFInputStream
extends|extends
name|InputStream
block|{
DECL|field|EOF_FLAG
specifier|public
specifier|static
specifier|final
name|int
name|EOF_FLAG
init|=
operator|-
literal|1
decl_stmt|;
comment|/* stream to be decompressed */
DECL|field|inputStream
specifier|private
specifier|final
name|InputStream
name|inputStream
decl_stmt|;
comment|/* the current buffer of compressed bytes */
DECL|field|compressedBytes
specifier|private
specifier|final
name|byte
index|[]
name|compressedBytes
init|=
operator|new
name|byte
index|[
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
index|]
decl_stmt|;
comment|/* the buffer of uncompressed bytes from which */
DECL|field|uncompressedBytes
specifier|private
specifier|final
name|byte
index|[]
name|uncompressedBytes
init|=
operator|new
name|byte
index|[
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
index|]
decl_stmt|;
comment|/* The current position (next char to output) in the uncompressed bytes buffer. */
DECL|field|bufferPosition
specifier|private
name|int
name|bufferPosition
init|=
literal|0
decl_stmt|;
comment|/* Length of the current uncompressed bytes buffer */
DECL|field|bufferLength
specifier|private
name|int
name|bufferLength
init|=
literal|0
decl_stmt|;
DECL|method|LZFInputStream
specifier|public
name|LZFInputStream
parameter_list|(
specifier|final
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|inputStream
operator|=
name|inputStream
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|returnValue
init|=
name|EOF_FLAG
decl_stmt|;
name|readyBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferPosition
operator|<
name|bufferLength
condition|)
block|{
name|returnValue
operator|=
operator|(
name|uncompressedBytes
index|[
name|bufferPosition
operator|++
index|]
operator|&
literal|255
operator|)
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
return|;
block|}
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|buffer
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|// FIXED HERE: handle 0 length cases
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|outputPos
init|=
name|offset
decl_stmt|;
name|readyBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferLength
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// FIXED HERE: fixed to use length
while|while
condition|(
name|outputPos
operator|<
name|length
operator|&&
name|bufferPosition
operator|<
name|bufferLength
condition|)
block|{
name|int
name|chunkLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|bufferLength
operator|-
name|bufferPosition
argument_list|,
name|length
operator|-
name|outputPos
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|uncompressedBytes
argument_list|,
name|bufferPosition
argument_list|,
name|buffer
argument_list|,
name|outputPos
argument_list|,
name|chunkLength
argument_list|)
expr_stmt|;
name|outputPos
operator|+=
name|chunkLength
expr_stmt|;
name|bufferPosition
operator|+=
name|chunkLength
expr_stmt|;
name|readyBuffer
argument_list|()
expr_stmt|;
block|}
return|return
name|outputPos
operator|-
name|offset
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Fill the uncompressed bytes buffer by reading the underlying inputStream.      *      * @throws IOException      */
DECL|method|readyBuffer
specifier|private
name|void
name|readyBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bufferPosition
operator|>=
name|bufferLength
condition|)
block|{
name|bufferLength
operator|=
name|LZFDecoder
operator|.
name|decompressChunk
argument_list|(
name|inputStream
argument_list|,
name|compressedBytes
argument_list|,
name|uncompressedBytes
argument_list|)
expr_stmt|;
name|bufferPosition
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

