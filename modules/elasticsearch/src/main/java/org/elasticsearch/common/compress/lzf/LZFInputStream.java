begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.compress.lzf
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_class
DECL|class|LZFInputStream
specifier|public
class|class
name|LZFInputStream
extends|extends
name|InputStream
block|{
DECL|field|_recycler
specifier|private
specifier|final
name|BufferRecycler
name|_recycler
decl_stmt|;
comment|/**      * stream to be decompressed      */
DECL|field|inputStream
specifier|protected
specifier|final
name|InputStream
name|inputStream
decl_stmt|;
comment|/**      * Flag that indicates if we have already called 'inputStream.close()'      * (to avoid calling it multiple times)      */
DECL|field|inputStreamClosed
specifier|protected
name|boolean
name|inputStreamClosed
decl_stmt|;
comment|/**      * Flag that indicates whether we force full reads (reading of as many      * bytes as requested), or 'optimal' reads (up to as many as available,      * but at least one). Default is false, meaning that 'optimal' read      * is used.      */
DECL|field|cfgFullReads
specifier|protected
name|boolean
name|cfgFullReads
init|=
literal|false
decl_stmt|;
comment|/* the current buffer of compressed bytes (from which to decode) */
DECL|field|_inputBuffer
specifier|private
name|byte
index|[]
name|_inputBuffer
decl_stmt|;
comment|/* the buffer of uncompressed bytes from which content is read */
DECL|field|_decodedBytes
specifier|private
name|byte
index|[]
name|_decodedBytes
decl_stmt|;
comment|/* The current position (next char to output) in the uncompressed bytes buffer. */
DECL|field|bufferPosition
specifier|private
name|int
name|bufferPosition
init|=
literal|0
decl_stmt|;
comment|/* Length of the current uncompressed bytes buffer */
DECL|field|bufferLength
specifier|private
name|int
name|bufferLength
init|=
literal|0
decl_stmt|;
comment|/*     ///////////////////////////////////////////////////////////////////////     // Construction     ///////////////////////////////////////////////////////////////////////      */
DECL|method|LZFInputStream
specifier|public
name|LZFInputStream
parameter_list|(
specifier|final
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|inputStream
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param inputStream Underlying input stream to use      * @param fullReads   Whether {@link #read(byte[])} should try to read exactly      *                    as many bytes as requested (true); or just however many happen to be      *                    available (false)      */
DECL|method|LZFInputStream
specifier|public
name|LZFInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
name|boolean
name|fullReads
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|_recycler
operator|=
name|BufferRecycler
operator|.
name|instance
argument_list|()
expr_stmt|;
name|inputStream
operator|=
name|in
expr_stmt|;
name|inputStreamClosed
operator|=
literal|false
expr_stmt|;
name|cfgFullReads
operator|=
name|fullReads
expr_stmt|;
name|_inputBuffer
operator|=
name|_recycler
operator|.
name|allocInputBuffer
argument_list|(
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
argument_list|)
expr_stmt|;
name|_decodedBytes
operator|=
name|_recycler
operator|.
name|allocDecodeBuffer
argument_list|(
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
argument_list|)
expr_stmt|;
block|}
comment|/*    ///////////////////////////////////////////////////////////////////////    // InputStream impl    ///////////////////////////////////////////////////////////////////////     */
comment|/**      * Method is overridden to report number of bytes that can now be read      * from decoded data buffer, without reading bytes from the underlying      * stream.      * Never throws an exception; returns number of bytes available without      * further reads from underlying source; -1 if stream has been closed, or      * 0 if an actual read (and possible blocking) is needed to find out.      */
annotation|@
name|Override
DECL|method|available
specifier|public
name|int
name|available
parameter_list|()
block|{
comment|// if closed, return -1;
if|if
condition|(
name|inputStreamClosed
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|left
init|=
operator|(
name|bufferLength
operator|-
name|bufferPosition
operator|)
decl_stmt|;
return|return
operator|(
name|left
operator|<=
literal|0
operator|)
condition|?
literal|0
else|:
name|left
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|readyBuffer
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|_decodedBytes
index|[
name|bufferPosition
operator|++
index|]
operator|&
literal|255
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|<
literal|1
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|readyBuffer
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// First let's read however much data we happen to have...
name|int
name|chunkLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|bufferLength
operator|-
name|bufferPosition
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|_decodedBytes
argument_list|,
name|bufferPosition
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|chunkLength
argument_list|)
expr_stmt|;
name|bufferPosition
operator|+=
name|chunkLength
expr_stmt|;
if|if
condition|(
name|chunkLength
operator|==
name|length
operator|||
operator|!
name|cfgFullReads
condition|)
block|{
return|return
name|chunkLength
return|;
block|}
comment|// Need more data, then
name|int
name|totalRead
init|=
name|chunkLength
decl_stmt|;
do|do
block|{
name|offset
operator|+=
name|chunkLength
expr_stmt|;
if|if
condition|(
operator|!
name|readyBuffer
argument_list|()
condition|)
block|{
break|break;
block|}
name|chunkLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|bufferLength
operator|-
name|bufferPosition
argument_list|,
operator|(
name|length
operator|-
name|totalRead
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|_decodedBytes
argument_list|,
name|bufferPosition
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|chunkLength
argument_list|)
expr_stmt|;
name|bufferPosition
operator|+=
name|chunkLength
expr_stmt|;
name|totalRead
operator|+=
name|chunkLength
expr_stmt|;
block|}
do|while
condition|(
name|totalRead
operator|<
name|length
condition|)
do|;
return|return
name|totalRead
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|bufferPosition
operator|=
name|bufferLength
operator|=
literal|0
expr_stmt|;
name|byte
index|[]
name|buf
init|=
name|_inputBuffer
decl_stmt|;
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
name|_inputBuffer
operator|=
literal|null
expr_stmt|;
name|_recycler
operator|.
name|releaseInputBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|buf
operator|=
name|_decodedBytes
expr_stmt|;
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
name|_decodedBytes
operator|=
literal|null
expr_stmt|;
name|_recycler
operator|.
name|releaseDecodeBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|inputStreamClosed
condition|)
block|{
name|inputStreamClosed
operator|=
literal|true
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*     ///////////////////////////////////////////////////////////////////////     // Additional public accessors     ///////////////////////////////////////////////////////////////////////      */
comment|/**      * Method that can be used to find underlying {@link InputStream} that      * we read from to get LZF encoded data to decode.      * Will never return null; although underlying stream may be closed      * (if this stream has been closed).      *      * @since 0.8      */
DECL|method|getUnderlyingInputStream
specifier|public
name|InputStream
name|getUnderlyingInputStream
parameter_list|()
block|{
return|return
name|inputStream
return|;
block|}
comment|/*    ///////////////////////////////////////////////////////////////////////    // Internal methods    ///////////////////////////////////////////////////////////////////////     */
comment|/**      * Fill the uncompressed bytes buffer by reading the underlying inputStream.      *      * @throws IOException      */
DECL|method|readyBuffer
specifier|protected
name|boolean
name|readyBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bufferPosition
operator|<
name|bufferLength
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|inputStreamClosed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|bufferLength
operator|=
name|LZFDecoder
operator|.
name|decompressChunk
argument_list|(
name|inputStream
argument_list|,
name|_inputBuffer
argument_list|,
name|_decodedBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufferLength
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|bufferPosition
operator|=
literal|0
expr_stmt|;
return|return
operator|(
name|bufferPosition
operator|<
name|bufferLength
operator|)
return|;
block|}
block|}
end_class

end_unit

