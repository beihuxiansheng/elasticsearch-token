begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilterClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocSets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_comment
comment|// LUCENE MONITOR: added to take into account DocSet that wraps OpenBitSet when optimizing or/and/...
end_comment

begin_class
DECL|class|XBooleanFilter
specifier|public
class|class
name|XBooleanFilter
extends|extends
name|Filter
block|{
DECL|field|shouldFilters
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|shouldFilters
init|=
literal|null
decl_stmt|;
DECL|field|notFilters
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|notFilters
init|=
literal|null
decl_stmt|;
DECL|field|mustFilters
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|mustFilters
init|=
literal|null
decl_stmt|;
DECL|method|getDISI
specifier|private
name|DocIdSet
name|getDISI
parameter_list|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|,
name|int
name|index
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|DocIdSet
name|docIdSet
init|=
name|filters
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getDocIdSet
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIdSet
operator|==
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
operator|||
name|docIdSet
operator|==
name|DocSet
operator|.
name|EMPTY_DOC_SET
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|docIdSet
return|;
block|}
DECL|method|getShouldFilters
specifier|public
name|List
argument_list|<
name|Filter
argument_list|>
name|getShouldFilters
parameter_list|()
block|{
return|return
name|this
operator|.
name|shouldFilters
return|;
block|}
DECL|method|getMustFilters
specifier|public
name|List
argument_list|<
name|Filter
argument_list|>
name|getMustFilters
parameter_list|()
block|{
return|return
name|this
operator|.
name|mustFilters
return|;
block|}
DECL|method|getNotFilters
specifier|public
name|List
argument_list|<
name|Filter
argument_list|>
name|getNotFilters
parameter_list|()
block|{
return|return
name|this
operator|.
name|notFilters
return|;
block|}
comment|/**      * Returns the a DocIdSetIterator representing the Boolean composition      * of the filters that have been added.      */
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|FixedBitSet
name|res
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|shouldFilters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shouldFilters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DocIdSet
name|disi
init|=
name|getDISI
argument_list|(
name|shouldFilters
argument_list|,
name|i
argument_list|,
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|disi
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|res
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DocSets
operator|.
name|or
argument_list|(
name|res
argument_list|,
name|disi
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if no should clauses match, return null (act as min_should_match set to 1)
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|notFilters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|notFilters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DocIdSet
name|disi
init|=
name|getDISI
argument_list|(
name|notFilters
argument_list|,
name|i
argument_list|,
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|disi
operator|!=
literal|null
condition|)
block|{
name|DocSets
operator|.
name|andNot
argument_list|(
name|res
argument_list|,
name|disi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|mustFilters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mustFilters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DocIdSet
name|disi
init|=
name|getDISI
argument_list|(
name|mustFilters
argument_list|,
name|i
argument_list|,
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|disi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DocSets
operator|.
name|and
argument_list|(
name|res
argument_list|,
name|disi
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
comment|/**      * Adds a new FilterClause to the Boolean Filter container      *      * @param filterClause A FilterClause object containing a Filter and an Occur parameter      */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|FilterClause
name|filterClause
parameter_list|)
block|{
if|if
condition|(
name|filterClause
operator|.
name|getOccur
argument_list|()
operator|.
name|equals
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
condition|)
block|{
if|if
condition|(
name|mustFilters
operator|==
literal|null
condition|)
block|{
name|mustFilters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|mustFilters
operator|.
name|add
argument_list|(
name|filterClause
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterClause
operator|.
name|getOccur
argument_list|()
operator|.
name|equals
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
condition|)
block|{
if|if
condition|(
name|shouldFilters
operator|==
literal|null
condition|)
block|{
name|shouldFilters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|shouldFilters
operator|.
name|add
argument_list|(
name|filterClause
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterClause
operator|.
name|getOccur
argument_list|()
operator|.
name|equals
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
condition|)
block|{
if|if
condition|(
name|notFilters
operator|==
literal|null
condition|)
block|{
name|notFilters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|notFilters
operator|.
name|add
argument_list|(
name|filterClause
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|equalFilters
specifier|private
name|boolean
name|equalFilters
parameter_list|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters1
parameter_list|,
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters2
parameter_list|)
block|{
return|return
operator|(
name|filters1
operator|==
name|filters2
operator|)
operator|||
operator|(
operator|(
name|filters1
operator|!=
literal|null
operator|)
operator|&&
name|filters1
operator|.
name|equals
argument_list|(
name|filters2
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|(
name|obj
operator|==
literal|null
operator|)
operator|||
operator|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
name|XBooleanFilter
name|other
init|=
operator|(
name|XBooleanFilter
operator|)
name|obj
decl_stmt|;
return|return
name|equalFilters
argument_list|(
name|notFilters
argument_list|,
name|other
operator|.
name|notFilters
argument_list|)
operator|&&
name|equalFilters
argument_list|(
name|mustFilters
argument_list|,
name|other
operator|.
name|mustFilters
argument_list|)
operator|&&
name|equalFilters
argument_list|(
name|shouldFilters
argument_list|,
name|other
operator|.
name|shouldFilters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|7
decl_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
operator|(
literal|null
operator|==
name|mustFilters
condition|?
literal|0
else|:
name|mustFilters
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
operator|(
literal|null
operator|==
name|notFilters
condition|?
literal|0
else|:
name|notFilters
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
operator|(
literal|null
operator|==
name|shouldFilters
condition|?
literal|0
else|:
name|shouldFilters
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|hash
return|;
block|}
comment|/**      * Prints a user-readable version of this query.      */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"BooleanFilter("
argument_list|)
expr_stmt|;
name|appendFilters
argument_list|(
name|shouldFilters
argument_list|,
literal|""
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|appendFilters
argument_list|(
name|mustFilters
argument_list|,
literal|"+"
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|appendFilters
argument_list|(
name|notFilters
argument_list|,
literal|"-"
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|appendFilters
specifier|private
name|void
name|appendFilters
parameter_list|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|,
name|String
name|occurString
parameter_list|,
name|StringBuilder
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|filters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|occurString
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

