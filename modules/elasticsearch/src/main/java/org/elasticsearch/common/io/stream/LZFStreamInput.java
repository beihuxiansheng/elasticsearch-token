begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
operator|.
name|LZFChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
operator|.
name|LZFDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|LZFStreamInput
specifier|public
class|class
name|LZFStreamInput
extends|extends
name|StreamInput
block|{
DECL|field|EOF_FLAG
specifier|public
specifier|static
name|int
name|EOF_FLAG
init|=
operator|-
literal|1
decl_stmt|;
comment|/* the current buffer of compressed bytes */
DECL|field|compressedBytes
specifier|private
specifier|final
name|byte
index|[]
name|compressedBytes
init|=
operator|new
name|byte
index|[
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
index|]
decl_stmt|;
comment|/* the buffer of uncompressed bytes from which */
DECL|field|uncompressedBytes
specifier|private
specifier|final
name|byte
index|[]
name|uncompressedBytes
init|=
operator|new
name|byte
index|[
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
index|]
decl_stmt|;
comment|/* The current position (next char to output) in the uncompressed bytes buffer. */
DECL|field|bufferPosition
specifier|private
name|int
name|bufferPosition
init|=
literal|0
decl_stmt|;
comment|/* Length of the current uncompressed bytes buffer */
DECL|field|bufferLength
specifier|private
name|int
name|bufferLength
init|=
literal|0
decl_stmt|;
DECL|field|in
specifier|private
name|StreamInput
name|in
decl_stmt|;
DECL|method|LZFStreamInput
specifier|public
name|LZFStreamInput
parameter_list|()
block|{     }
DECL|method|LZFStreamInput
specifier|public
name|LZFStreamInput
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
comment|// we need to read the first buffer here, since it might be a VOID message, and we need to at least read the LZF header
name|readyBuffer
argument_list|()
expr_stmt|;
block|}
DECL|method|read
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|returnValue
init|=
name|EOF_FLAG
decl_stmt|;
name|readyBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferPosition
operator|<
name|bufferLength
condition|)
block|{
name|returnValue
operator|=
operator|(
name|uncompressedBytes
index|[
name|bufferPosition
operator|++
index|]
operator|&
literal|255
operator|)
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
DECL|method|read
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|outputPos
init|=
name|off
decl_stmt|;
name|readyBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferLength
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
while|while
condition|(
name|outputPos
operator|<
name|len
operator|&&
name|bufferPosition
operator|<
name|bufferLength
condition|)
block|{
name|int
name|chunkLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|bufferLength
operator|-
name|bufferPosition
argument_list|,
name|len
operator|-
name|outputPos
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|uncompressedBytes
argument_list|,
name|bufferPosition
argument_list|,
name|b
argument_list|,
name|outputPos
argument_list|,
name|chunkLength
argument_list|)
expr_stmt|;
name|outputPos
operator|+=
name|chunkLength
expr_stmt|;
name|bufferPosition
operator|+=
name|chunkLength
expr_stmt|;
name|readyBuffer
argument_list|()
expr_stmt|;
block|}
return|return
name|outputPos
operator|-
name|off
return|;
block|}
DECL|method|readByte
annotation|@
name|Override
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
name|readyBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferPosition
operator|<
name|bufferLength
condition|)
block|{
return|return
operator|(
name|uncompressedBytes
index|[
name|bufferPosition
operator|++
index|]
operator|)
return|;
block|}
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
DECL|method|readBytes
annotation|@
name|Override
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|read
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
name|len
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
block|}
DECL|method|reset
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|bufferPosition
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bufferLength
operator|=
literal|0
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|bufferPosition
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bufferLength
operator|=
literal|0
expr_stmt|;
comment|// we need to read the first buffer here, since it might be a VOID message, and we need to at least read the LZF header
name|readyBuffer
argument_list|()
expr_stmt|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Fill the uncompressed bytes buffer by reading the underlying inputStream.      *      * @throws java.io.IOException      */
DECL|method|readyBuffer
specifier|private
name|void
name|readyBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bufferPosition
operator|>=
name|bufferLength
condition|)
block|{
name|bufferLength
operator|=
name|LZFDecoder
operator|.
name|decompressChunk
argument_list|(
name|in
argument_list|,
name|compressedBytes
argument_list|,
name|uncompressedBytes
argument_list|)
expr_stmt|;
name|bufferPosition
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

