begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.versioned
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|versioned
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|ExtTIntIntHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link VersionedMap} based on trove {@link org.elasticsearch.util.gnu.trove.TIntIntHashMap}.  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
annotation|@
name|ThreadSafe
DECL|class|NativeVersionedMap
specifier|public
class|class
name|NativeVersionedMap
implements|implements
name|VersionedMap
block|{
comment|/**      * Mask value for indexing into segments. The upper bits of a      * key's hash code are used to choose the segment.      */
DECL|field|segmentMask
specifier|private
specifier|final
name|int
name|segmentMask
decl_stmt|;
comment|/**      * Shift value for indexing within segments.      */
DECL|field|segmentShift
specifier|private
specifier|final
name|int
name|segmentShift
decl_stmt|;
DECL|field|segments
specifier|private
specifier|final
name|Segment
index|[]
name|segments
decl_stmt|;
DECL|method|NativeVersionedMap
specifier|public
name|NativeVersionedMap
parameter_list|()
block|{
name|this
argument_list|(
literal|16
argument_list|)
expr_stmt|;
block|}
DECL|method|NativeVersionedMap
specifier|public
name|NativeVersionedMap
parameter_list|(
name|int
name|concurrencyLevel
parameter_list|)
block|{
comment|// Find power-of-two sizes best matching arguments
name|int
name|sshift
init|=
literal|0
decl_stmt|;
name|int
name|ssize
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|ssize
operator|<
name|concurrencyLevel
condition|)
block|{
operator|++
name|sshift
expr_stmt|;
name|ssize
operator|<<=
literal|1
expr_stmt|;
block|}
name|segmentShift
operator|=
literal|32
operator|-
name|sshift
expr_stmt|;
name|segmentMask
operator|=
name|ssize
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|segments
operator|=
operator|new
name|Segment
index|[
name|ssize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|segments
index|[
name|i
index|]
operator|=
operator|new
name|Segment
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|beforeVersion
annotation|@
name|Override
specifier|public
name|boolean
name|beforeVersion
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|versionToCheck
parameter_list|)
block|{
name|Segment
name|segment
init|=
name|segmentFor
argument_list|(
name|hash
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|segment
operator|.
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|result
init|=
name|segment
operator|.
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
operator|-
literal|1
operator|||
name|versionToCheck
operator|<
name|result
return|;
block|}
finally|finally
block|{
name|segment
operator|.
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|putVersion
annotation|@
name|Override
specifier|public
name|void
name|putVersion
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|version
parameter_list|)
block|{
name|Segment
name|segment
init|=
name|segmentFor
argument_list|(
name|hash
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|segment
operator|.
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|segment
operator|.
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|segment
operator|.
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|putVersionIfAbsent
annotation|@
name|Override
specifier|public
name|void
name|putVersionIfAbsent
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|version
parameter_list|)
block|{
name|Segment
name|segment
init|=
name|segmentFor
argument_list|(
name|hash
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|segment
operator|.
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|segment
operator|.
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|segment
operator|.
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|segment
operator|.
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clear
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|Segment
name|segment
range|:
name|segments
control|)
block|{
name|segment
operator|.
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|segment
operator|.
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|segment
operator|.
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Applies a supplemental hash function to a given hashCode, which      * defends against poor quality hash functions.  This is critical      * because ConcurrentHashMap uses power-of-two length hash tables,      * that otherwise encounter collisions for hashCodes that do not      * differ in lower or upper bits.      */
DECL|method|hash
specifier|private
specifier|static
name|int
name|hash
parameter_list|(
name|int
name|h
parameter_list|)
block|{
comment|// Spread bits to regularize both segment and index locations,
comment|// using variant of single-word Wang/Jenkins hash.
name|h
operator|+=
operator|(
name|h
operator|<<
literal|15
operator|)
operator|^
literal|0xffffcd7d
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|>>>
literal|10
operator|)
expr_stmt|;
name|h
operator|+=
operator|(
name|h
operator|<<
literal|3
operator|)
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|>>>
literal|6
operator|)
expr_stmt|;
name|h
operator|+=
operator|(
name|h
operator|<<
literal|2
operator|)
operator|+
operator|(
name|h
operator|<<
literal|14
operator|)
expr_stmt|;
return|return
name|h
operator|^
operator|(
name|h
operator|>>>
literal|16
operator|)
return|;
block|}
comment|/**      * Returns the segment that should be used for key with given hash      *      * @param hash the hash code for the key      * @return the segment      */
DECL|method|segmentFor
specifier|final
name|Segment
name|segmentFor
parameter_list|(
name|int
name|hash
parameter_list|)
block|{
return|return
name|segments
index|[
operator|(
name|hash
operator|>>>
name|segmentShift
operator|)
operator|&
name|segmentMask
index|]
return|;
block|}
DECL|class|Segment
specifier|private
specifier|static
class|class
name|Segment
block|{
DECL|field|rwl
specifier|final
name|ReadWriteLock
name|rwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|map
specifier|final
name|ExtTIntIntHashMap
name|map
init|=
operator|new
name|ExtTIntIntHashMap
argument_list|()
decl_stmt|;
DECL|method|Segment
specifier|private
name|Segment
parameter_list|()
block|{
name|map
operator|.
name|defaultReturnValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

