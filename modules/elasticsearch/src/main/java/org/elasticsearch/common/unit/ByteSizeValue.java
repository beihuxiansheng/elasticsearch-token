begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.unit
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ByteSizeValue
specifier|public
class|class
name|ByteSizeValue
implements|implements
name|Serializable
implements|,
name|Streamable
block|{
DECL|field|size
specifier|private
name|long
name|size
decl_stmt|;
DECL|field|sizeUnit
specifier|private
name|ByteSizeUnit
name|sizeUnit
decl_stmt|;
DECL|method|ByteSizeValue
specifier|private
name|ByteSizeValue
parameter_list|()
block|{      }
DECL|method|ByteSizeValue
specifier|public
name|ByteSizeValue
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
name|this
argument_list|(
name|bytes
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteSizeValue
specifier|public
name|ByteSizeValue
parameter_list|(
name|long
name|size
parameter_list|,
name|ByteSizeUnit
name|sizeUnit
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|sizeUnit
operator|=
name|sizeUnit
expr_stmt|;
block|}
DECL|method|bytes
specifier|public
name|long
name|bytes
parameter_list|()
block|{
return|return
name|sizeUnit
operator|.
name|toBytes
argument_list|(
name|size
argument_list|)
return|;
block|}
DECL|method|getBytes
specifier|public
name|long
name|getBytes
parameter_list|()
block|{
return|return
name|bytes
argument_list|()
return|;
block|}
DECL|method|kb
specifier|public
name|long
name|kb
parameter_list|()
block|{
return|return
name|sizeUnit
operator|.
name|toKB
argument_list|(
name|size
argument_list|)
return|;
block|}
DECL|method|getKb
specifier|public
name|long
name|getKb
parameter_list|()
block|{
return|return
name|kb
argument_list|()
return|;
block|}
DECL|method|mb
specifier|public
name|long
name|mb
parameter_list|()
block|{
return|return
name|sizeUnit
operator|.
name|toMB
argument_list|(
name|size
argument_list|)
return|;
block|}
DECL|method|getMb
specifier|public
name|long
name|getMb
parameter_list|()
block|{
return|return
name|mb
argument_list|()
return|;
block|}
DECL|method|gb
specifier|public
name|long
name|gb
parameter_list|()
block|{
return|return
name|sizeUnit
operator|.
name|toGB
argument_list|(
name|size
argument_list|)
return|;
block|}
DECL|method|getGb
specifier|public
name|long
name|getGb
parameter_list|()
block|{
return|return
name|gb
argument_list|()
return|;
block|}
DECL|method|kbFrac
specifier|public
name|double
name|kbFrac
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|bytes
argument_list|()
operator|)
operator|/
name|ByteSizeUnit
operator|.
name|C1
return|;
block|}
DECL|method|getKbFrac
specifier|public
name|double
name|getKbFrac
parameter_list|()
block|{
return|return
name|kbFrac
argument_list|()
return|;
block|}
DECL|method|mbFrac
specifier|public
name|double
name|mbFrac
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|bytes
argument_list|()
operator|)
operator|/
name|ByteSizeUnit
operator|.
name|C2
return|;
block|}
DECL|method|getMbFrac
specifier|public
name|double
name|getMbFrac
parameter_list|()
block|{
return|return
name|mbFrac
argument_list|()
return|;
block|}
DECL|method|gbFrac
specifier|public
name|double
name|gbFrac
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|bytes
argument_list|()
operator|)
operator|/
name|ByteSizeUnit
operator|.
name|C3
return|;
block|}
DECL|method|getGbFrac
specifier|public
name|double
name|getGbFrac
parameter_list|()
block|{
return|return
name|gbFrac
argument_list|()
return|;
block|}
DECL|method|toString
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|long
name|bytes
init|=
name|bytes
argument_list|()
decl_stmt|;
name|double
name|value
init|=
name|bytes
decl_stmt|;
name|String
name|suffix
init|=
literal|"b"
decl_stmt|;
if|if
condition|(
name|bytes
operator|>=
name|ByteSizeUnit
operator|.
name|C3
condition|)
block|{
name|value
operator|=
name|gbFrac
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|"gb"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
operator|>=
name|ByteSizeUnit
operator|.
name|C2
condition|)
block|{
name|value
operator|=
name|mbFrac
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|"mb"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
operator|>=
name|ByteSizeUnit
operator|.
name|C1
condition|)
block|{
name|value
operator|=
name|kbFrac
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|"kb"
expr_stmt|;
block|}
return|return
name|Strings
operator|.
name|format1Decimals
argument_list|(
name|value
argument_list|,
name|suffix
argument_list|)
return|;
block|}
DECL|method|parseBytesSizeValue
specifier|public
specifier|static
name|ByteSizeValue
name|parseBytesSizeValue
parameter_list|(
name|String
name|sValue
parameter_list|,
name|ByteSizeValue
name|defaultValue
parameter_list|)
throws|throws
name|ElasticSearchParseException
block|{
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
name|long
name|bytes
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
name|bytes
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"k"
argument_list|)
operator|||
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"K"
argument_list|)
condition|)
block|{
name|bytes
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|*
name|ByteSizeUnit
operator|.
name|C1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"kb"
argument_list|)
condition|)
block|{
name|bytes
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
operator|*
name|ByteSizeUnit
operator|.
name|C1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
operator|||
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
condition|)
block|{
name|bytes
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|*
name|ByteSizeUnit
operator|.
name|C2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"mb"
argument_list|)
condition|)
block|{
name|bytes
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
operator|*
name|ByteSizeUnit
operator|.
name|C2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"g"
argument_list|)
operator|||
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"G"
argument_list|)
condition|)
block|{
name|bytes
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|*
name|ByteSizeUnit
operator|.
name|C3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"gb"
argument_list|)
condition|)
block|{
name|bytes
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
operator|*
name|ByteSizeUnit
operator|.
name|C3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchParseException
argument_list|(
literal|"Failed to parse ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|bytes
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
return|;
block|}
DECL|method|readBytesSizeValue
specifier|public
specifier|static
name|ByteSizeValue
name|readBytesSizeValue
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteSizeValue
name|sizeValue
init|=
operator|new
name|ByteSizeValue
argument_list|()
decl_stmt|;
name|sizeValue
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|sizeValue
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|size
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|sizeUnit
operator|=
name|ByteSizeUnit
operator|.
name|BYTES
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|equals
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ByteSizeValue
name|sizeValue
init|=
operator|(
name|ByteSizeValue
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|sizeValue
operator|.
name|size
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|sizeUnit
operator|!=
name|sizeValue
operator|.
name|sizeUnit
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|hashCode
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
call|(
name|int
call|)
argument_list|(
name|size
operator|^
operator|(
name|size
operator|>>>
literal|32
operator|)
argument_list|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|sizeUnit
operator|!=
literal|null
condition|?
name|sizeUnit
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

