begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|FastDataOutputStream
specifier|public
class|class
name|FastDataOutputStream
extends|extends
name|FilterOutputStream
implements|implements
name|DataOutput
block|{
comment|/**      * The number of bytes written to the data output stream so far.      * If this counter overflows, it will be wrapped to Integer.MAX_VALUE.      */
DECL|field|written
specifier|protected
name|int
name|written
decl_stmt|;
comment|/**      * bytearr is initialized on demand by writeUTF      */
DECL|field|bytearr
specifier|private
name|byte
index|[]
name|bytearr
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a new data output stream to write data to the specified      * underlying output stream. The counter<code>written</code> is      * set to zero.      *      * @param out the underlying output stream, to be saved for later      *            use.      * @see java.io.FilterOutputStream#out      */
DECL|method|FastDataOutputStream
specifier|public
name|FastDataOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Increases the written counter by the specified value      * until it reaches Integer.MAX_VALUE.      */
DECL|method|incCount
specifier|private
name|void
name|incCount
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|int
name|temp
init|=
name|written
operator|+
name|value
decl_stmt|;
if|if
condition|(
name|temp
operator|<
literal|0
condition|)
block|{
name|temp
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|written
operator|=
name|temp
expr_stmt|;
block|}
comment|/**      * Writes the specified byte (the low eight bits of the argument      *<code>b</code>) to the underlying output stream. If no exception      * is thrown, the counter<code>written</code> is incremented by      *<code>1</code>.      *<p/>      * Implements the<code>write</code> method of<code>OutputStream</code>.      *      * @param b the<code>byte</code> to be written.      * @throws java.io.IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      */
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|incCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes<code>len</code> bytes from the specified byte array      * starting at offset<code>off</code> to the underlying output stream.      * If no exception is thrown, the counter<code>written</code> is      * incremented by<code>len</code>.      *      * @param b   the data.      * @param off the start offset in the data.      * @param len the number of bytes to write.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      */
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|incCount
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**      * Flushes this data output stream. This forces any buffered output      * bytes to be written out to the stream.      *<p/>      * The<code>flush</code> method of<code>DataOutputStream</code>      * calls the<code>flush</code> method of its underlying output stream.      *      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      * @see java.io.OutputStream#flush()      */
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Writes a<code>boolean</code> to the underlying output stream as      * a 1-byte value. The value<code>true</code> is written out as the      * value<code>(byte)1</code>; the value<code>false</code> is      * written out as the value<code>(byte)0</code>. If no exception is      * thrown, the counter<code>written</code> is incremented by      *<code>1</code>.      *      * @param v a<code>boolean</code> value to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      */
DECL|method|writeBoolean
specifier|public
specifier|final
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|v
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|incCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes out a<code>byte</code> to the underlying output stream as      * a 1-byte value. If no exception is thrown, the counter      *<code>written</code> is incremented by<code>1</code>.      *      * @param v a<code>byte</code> value to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      */
DECL|method|writeByte
specifier|public
specifier|final
name|void
name|writeByte
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|incCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a<code>short</code> to the underlying output stream as two      * bytes, high byte first. If no exception is thrown, the counter      *<code>written</code> is incremented by<code>2</code>.      *      * @param v a<code>short</code> to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      */
DECL|method|writeShort
specifier|public
specifier|final
name|void
name|writeShort
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|incCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a<code>char</code> to the underlying output stream as a      * 2-byte value, high byte first. If no exception is thrown, the      * counter<code>written</code> is incremented by<code>2</code>.      *      * @param v a<code>char</code> value to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      */
DECL|method|writeChar
specifier|public
specifier|final
name|void
name|writeChar
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|incCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes an<code>int</code> to the underlying output stream as four      * bytes, high byte first. If no exception is thrown, the counter      *<code>written</code> is incremented by<code>4</code>.      *      * @param v an<code>int</code> to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      */
DECL|method|writeInt
specifier|public
specifier|final
name|void
name|writeInt
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|incCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|field|writeBuffer
specifier|private
name|byte
name|writeBuffer
index|[]
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
comment|/**      * Writes a<code>long</code> to the underlying output stream as eight      * bytes, high byte first. In no exception is thrown, the counter      *<code>written</code> is incremented by<code>8</code>.      *      * @param v a<code>long</code> to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      */
DECL|method|writeLong
specifier|public
specifier|final
name|void
name|writeLong
parameter_list|(
name|long
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|writeBuffer
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|56
argument_list|)
expr_stmt|;
name|writeBuffer
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|48
argument_list|)
expr_stmt|;
name|writeBuffer
index|[
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|40
argument_list|)
expr_stmt|;
name|writeBuffer
index|[
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|32
argument_list|)
expr_stmt|;
name|writeBuffer
index|[
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|writeBuffer
index|[
literal|5
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|writeBuffer
index|[
literal|6
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|writeBuffer
index|[
literal|7
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|writeBuffer
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|incCount
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the float argument to an<code>int</code> using the      *<code>floatToIntBits</code> method in class<code>Float</code>,      * and then writes that<code>int</code> value to the underlying      * output stream as a 4-byte quantity, high byte first. If no      * exception is thrown, the counter<code>written</code> is      * incremented by<code>4</code>.      *      * @param v a<code>float</code> value to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      * @see java.lang.Float#floatToIntBits(float)      */
DECL|method|writeFloat
specifier|public
specifier|final
name|void
name|writeFloat
parameter_list|(
name|float
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|writeInt
argument_list|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the double argument to a<code>long</code> using the      *<code>doubleToLongBits</code> method in class<code>Double</code>,      * and then writes that<code>long</code> value to the underlying      * output stream as an 8-byte quantity, high byte first. If no      * exception is thrown, the counter<code>written</code> is      * incremented by<code>8</code>.      *      * @param v a<code>double</code> value to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      * @see java.lang.Double#doubleToLongBits(double)      */
DECL|method|writeDouble
specifier|public
specifier|final
name|void
name|writeDouble
parameter_list|(
name|double
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLong
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes out the string to the underlying output stream as a      * sequence of bytes. Each character in the string is written out, in      * sequence, by discarding its high eight bits. If no exception is      * thrown, the counter<code>written</code> is incremented by the      * length of<code>s</code>.      *      * @param s a string of bytes to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.FilterOutputStream#out      */
DECL|method|writeBytes
specifier|public
specifier|final
name|void
name|writeBytes
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|incCount
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a string to the underlying output stream as a sequence of      * characters. Each character is written to the data output stream as      * if by the<code>writeChar</code> method. If no exception is      * thrown, the counter<code>written</code> is incremented by twice      * the length of<code>s</code>.      *      * @param s a<code>String</code> value to be written.      * @throws IOException if an I/O error occurs.      * @see java.io.DataOutputStream#writeChar(int)      * @see java.io.FilterOutputStream#out      */
DECL|method|writeChars
specifier|public
specifier|final
name|void
name|writeChars
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|v
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
name|incCount
argument_list|(
name|len
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a string to the underlying output stream using      *<a href="DataInput.html#modified-utf-8">modified UTF-8</a>      * encoding in a machine-independent manner.      *<p/>      * First, two bytes are written to the output stream as if by the      *<code>writeShort</code> method giving the number of bytes to      * follow. This value is the number of bytes actually written out,      * not the length of the string. Following the length, each character      * of the string is output, in sequence, using the modified UTF-8 encoding      * for the character. If no exception is thrown, the counter      *<code>written</code> is incremented by the total number of      * bytes written to the output stream. This will be at least two      * plus the length of<code>str</code>, and at most two plus      * thrice the length of<code>str</code>.      *      * @param str a string to be written.      * @throws IOException if an I/O error occurs.      */
DECL|method|writeUTF
specifier|public
specifier|final
name|void
name|writeUTF
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
name|writeUTF
argument_list|(
name|str
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a string to the specified DataOutput using      *<a href="DataInput.html#modified-utf-8">modified UTF-8</a>      * encoding in a machine-independent manner.      *<p/>      * First, two bytes are written to out as if by the<code>writeShort</code>      * method giving the number of bytes to follow. This value is the number of      * bytes actually written out, not the length of the string. Following the      * length, each character of the string is output, in sequence, using the      * modified UTF-8 encoding for the character. If no exception is thrown, the      * counter<code>written</code> is incremented by the total number of      * bytes written to the output stream. This will be at least two      * plus the length of<code>str</code>, and at most two plus      * thrice the length of<code>str</code>.      *      * @param str a string to be written.      * @param out destination to write to      * @return The number of bytes written out.      * @throws IOException if an I/O error occurs.      */
DECL|method|writeUTF
specifier|static
name|int
name|writeUTF
parameter_list|(
name|String
name|str
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|strlen
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|utflen
init|=
literal|0
decl_stmt|;
name|int
name|c
decl_stmt|,
name|count
init|=
literal|0
decl_stmt|;
comment|/* use charAt instead of copying String to char array */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strlen
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|c
operator|>=
literal|0x0001
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|0x007F
operator|)
condition|)
block|{
name|utflen
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>
literal|0x07FF
condition|)
block|{
name|utflen
operator|+=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|utflen
operator|+=
literal|2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|utflen
operator|>
literal|65535
condition|)
throw|throw
operator|new
name|UTFDataFormatException
argument_list|(
literal|"encoded string too long: "
operator|+
name|utflen
operator|+
literal|" bytes"
argument_list|)
throw|;
name|byte
index|[]
name|bytearr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|out
operator|instanceof
name|FastDataOutputStream
condition|)
block|{
name|FastDataOutputStream
name|dos
init|=
operator|(
name|FastDataOutputStream
operator|)
name|out
decl_stmt|;
if|if
condition|(
name|dos
operator|.
name|bytearr
operator|==
literal|null
operator|||
operator|(
name|dos
operator|.
name|bytearr
operator|.
name|length
operator|<
operator|(
name|utflen
operator|+
literal|2
operator|)
operator|)
condition|)
name|dos
operator|.
name|bytearr
operator|=
operator|new
name|byte
index|[
operator|(
name|utflen
operator|*
literal|2
operator|)
operator|+
literal|2
index|]
expr_stmt|;
name|bytearr
operator|=
name|dos
operator|.
name|bytearr
expr_stmt|;
block|}
else|else
block|{
name|bytearr
operator|=
operator|new
name|byte
index|[
name|utflen
operator|+
literal|2
index|]
expr_stmt|;
block|}
name|bytearr
index|[
name|count
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|utflen
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|bytearr
index|[
name|count
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|utflen
operator|>>>
literal|0
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|strlen
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|c
operator|>=
literal|0x0001
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|0x007F
operator|)
operator|)
condition|)
break|break;
name|bytearr
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|c
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|strlen
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|c
operator|>=
literal|0x0001
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|0x007F
operator|)
condition|)
block|{
name|bytearr
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|c
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>
literal|0x07FF
condition|)
block|{
name|bytearr
index|[
name|count
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xE0
operator||
operator|(
operator|(
name|c
operator|>>
literal|12
operator|)
operator|&
literal|0x0F
operator|)
argument_list|)
expr_stmt|;
name|bytearr
index|[
name|count
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|c
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|bytearr
index|[
name|count
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|c
operator|>>
literal|0
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytearr
index|[
name|count
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xC0
operator||
operator|(
operator|(
name|c
operator|>>
literal|6
operator|)
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|bytearr
index|[
name|count
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|c
operator|>>
literal|0
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|write
argument_list|(
name|bytearr
argument_list|,
literal|0
argument_list|,
name|utflen
operator|+
literal|2
argument_list|)
expr_stmt|;
return|return
name|utflen
operator|+
literal|2
return|;
block|}
comment|/**      * Returns the current value of the counter<code>written</code>,      * the number of bytes written to this data output stream so far.      * If the counter overflows, it will be wrapped to Integer.MAX_VALUE.      *      * @return the value of the<code>written</code> field.      * @see java.io.DataOutputStream#written      */
DECL|method|size
specifier|public
specifier|final
name|int
name|size
parameter_list|()
block|{
return|return
name|written
return|;
block|}
block|}
end_class

end_unit

