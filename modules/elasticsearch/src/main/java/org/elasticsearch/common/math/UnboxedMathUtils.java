begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.math
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|UnboxedMathUtils
specifier|public
class|class
name|UnboxedMathUtils
block|{
DECL|method|sin
specifier|public
specifier|static
name|double
name|sin
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sin
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|cos
specifier|public
specifier|static
name|double
name|cos
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cos
argument_list|(
name|a
argument_list|)
return|;
comment|// default impl. delegates to StrictMath
block|}
DECL|method|tan
specifier|public
specifier|static
name|double
name|tan
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|tan
argument_list|(
name|a
argument_list|)
return|;
comment|// default impl. delegates to StrictMath
block|}
DECL|method|asin
specifier|public
specifier|static
name|double
name|asin
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|asin
argument_list|(
name|a
argument_list|)
return|;
comment|// default impl. delegates to StrictMath
block|}
DECL|method|acos
specifier|public
specifier|static
name|double
name|acos
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|acos
argument_list|(
name|a
argument_list|)
return|;
comment|// default impl. delegates to StrictMath
block|}
DECL|method|atan
specifier|public
specifier|static
name|double
name|atan
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan
argument_list|(
name|a
argument_list|)
return|;
comment|// default impl. delegates to StrictMath
block|}
DECL|method|toRadians
specifier|public
specifier|static
name|double
name|toRadians
parameter_list|(
name|Double
name|angdeg
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toRadians
argument_list|(
name|angdeg
argument_list|)
return|;
block|}
DECL|method|toDegrees
specifier|public
specifier|static
name|double
name|toDegrees
parameter_list|(
name|Double
name|angrad
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toDegrees
argument_list|(
name|angrad
argument_list|)
return|;
block|}
DECL|method|exp
specifier|public
specifier|static
name|double
name|exp
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|exp
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|log
specifier|public
specifier|static
name|double
name|log
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|log10
specifier|public
specifier|static
name|double
name|log10
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|sqrt
specifier|public
specifier|static
name|double
name|sqrt
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|cbrt
specifier|public
specifier|static
name|double
name|cbrt
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cbrt
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|IEEEremainder
specifier|public
specifier|static
name|double
name|IEEEremainder
parameter_list|(
name|Double
name|f1
parameter_list|,
name|Double
name|f2
parameter_list|)
block|{
return|return
name|Math
operator|.
name|IEEEremainder
argument_list|(
name|f1
argument_list|,
name|f2
argument_list|)
return|;
block|}
DECL|method|ceil
specifier|public
specifier|static
name|double
name|ceil
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|ceil
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|floor
specifier|public
specifier|static
name|double
name|floor
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|floor
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|rint
specifier|public
specifier|static
name|double
name|rint
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|rint
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|atan2
specifier|public
specifier|static
name|double
name|atan2
parameter_list|(
name|Double
name|y
parameter_list|,
name|Double
name|x
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan2
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
return|;
block|}
DECL|method|pow
specifier|public
specifier|static
name|double
name|pow
parameter_list|(
name|Double
name|a
parameter_list|,
name|Double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|round
specifier|public
specifier|static
name|int
name|round
parameter_list|(
name|Float
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|round
specifier|public
specifier|static
name|long
name|round
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|random
specifier|public
specifier|static
name|double
name|random
parameter_list|()
block|{
return|return
name|Math
operator|.
name|random
argument_list|()
return|;
block|}
DECL|method|abs
specifier|public
specifier|static
name|int
name|abs
parameter_list|(
name|Integer
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|abs
specifier|public
specifier|static
name|long
name|abs
parameter_list|(
name|Long
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|abs
specifier|public
specifier|static
name|float
name|abs
parameter_list|(
name|Float
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|abs
specifier|public
specifier|static
name|double
name|abs
parameter_list|(
name|Double
name|a
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|max
specifier|public
specifier|static
name|int
name|max
parameter_list|(
name|Integer
name|a
parameter_list|,
name|Integer
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|max
specifier|public
specifier|static
name|long
name|max
parameter_list|(
name|Long
name|a
parameter_list|,
name|Long
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|max
specifier|public
specifier|static
name|float
name|max
parameter_list|(
name|Float
name|a
parameter_list|,
name|Float
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|max
specifier|public
specifier|static
name|double
name|max
parameter_list|(
name|Double
name|a
parameter_list|,
name|Double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|min
specifier|public
specifier|static
name|int
name|min
parameter_list|(
name|Integer
name|a
parameter_list|,
name|Integer
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|min
specifier|public
specifier|static
name|long
name|min
parameter_list|(
name|Long
name|a
parameter_list|,
name|Long
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|min
specifier|public
specifier|static
name|float
name|min
parameter_list|(
name|Float
name|a
parameter_list|,
name|Float
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|min
specifier|public
specifier|static
name|double
name|min
parameter_list|(
name|Double
name|a
parameter_list|,
name|Double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|ulp
specifier|public
specifier|static
name|double
name|ulp
parameter_list|(
name|Double
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|ulp
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|ulp
specifier|public
specifier|static
name|float
name|ulp
parameter_list|(
name|Float
name|f
parameter_list|)
block|{
return|return
name|Math
operator|.
name|ulp
argument_list|(
name|f
argument_list|)
return|;
block|}
DECL|method|signum
specifier|public
specifier|static
name|double
name|signum
parameter_list|(
name|Double
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|signum
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|signum
specifier|public
specifier|static
name|float
name|signum
parameter_list|(
name|Float
name|f
parameter_list|)
block|{
return|return
name|Math
operator|.
name|signum
argument_list|(
name|f
argument_list|)
return|;
block|}
DECL|method|sinh
specifier|public
specifier|static
name|double
name|sinh
parameter_list|(
name|Double
name|x
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sinh
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|method|cosh
specifier|public
specifier|static
name|double
name|cosh
parameter_list|(
name|Double
name|x
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cosh
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|method|tanh
specifier|public
specifier|static
name|double
name|tanh
parameter_list|(
name|Double
name|x
parameter_list|)
block|{
return|return
name|Math
operator|.
name|tanh
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|method|hypot
specifier|public
specifier|static
name|double
name|hypot
parameter_list|(
name|Double
name|x
parameter_list|,
name|Double
name|y
parameter_list|)
block|{
return|return
name|Math
operator|.
name|hypot
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
DECL|method|expm1
specifier|public
specifier|static
name|double
name|expm1
parameter_list|(
name|Double
name|x
parameter_list|)
block|{
return|return
name|Math
operator|.
name|expm1
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|method|log1p
specifier|public
specifier|static
name|double
name|log1p
parameter_list|(
name|Double
name|x
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log1p
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|method|copySign
specifier|public
specifier|static
name|double
name|copySign
parameter_list|(
name|Double
name|magnitude
parameter_list|,
name|Double
name|sign
parameter_list|)
block|{
return|return
name|Math
operator|.
name|copySign
argument_list|(
name|magnitude
argument_list|,
name|sign
argument_list|)
return|;
block|}
DECL|method|copySign
specifier|public
specifier|static
name|float
name|copySign
parameter_list|(
name|Float
name|magnitude
parameter_list|,
name|Float
name|sign
parameter_list|)
block|{
return|return
name|Math
operator|.
name|copySign
argument_list|(
name|magnitude
argument_list|,
name|sign
argument_list|)
return|;
block|}
DECL|method|getExponent
specifier|public
specifier|static
name|int
name|getExponent
parameter_list|(
name|Float
name|f
parameter_list|)
block|{
return|return
name|Math
operator|.
name|getExponent
argument_list|(
name|f
argument_list|)
return|;
block|}
DECL|method|getExponent
specifier|public
specifier|static
name|int
name|getExponent
parameter_list|(
name|Double
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|getExponent
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|nextAfter
specifier|public
specifier|static
name|double
name|nextAfter
parameter_list|(
name|Double
name|start
parameter_list|,
name|Double
name|direction
parameter_list|)
block|{
return|return
name|Math
operator|.
name|nextAfter
argument_list|(
name|start
argument_list|,
name|direction
argument_list|)
return|;
block|}
DECL|method|nextAfter
specifier|public
specifier|static
name|float
name|nextAfter
parameter_list|(
name|Float
name|start
parameter_list|,
name|Double
name|direction
parameter_list|)
block|{
return|return
name|Math
operator|.
name|nextAfter
argument_list|(
name|start
argument_list|,
name|direction
argument_list|)
return|;
block|}
DECL|method|nextUp
specifier|public
specifier|static
name|double
name|nextUp
parameter_list|(
name|Double
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|nextUp
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|nextUp
specifier|public
specifier|static
name|float
name|nextUp
parameter_list|(
name|Float
name|f
parameter_list|)
block|{
return|return
name|Math
operator|.
name|nextUp
argument_list|(
name|f
argument_list|)
return|;
block|}
DECL|method|scalb
specifier|public
specifier|static
name|double
name|scalb
parameter_list|(
name|Double
name|d
parameter_list|,
name|Integer
name|scaleFactor
parameter_list|)
block|{
return|return
name|Math
operator|.
name|scalb
argument_list|(
name|d
argument_list|,
name|scaleFactor
argument_list|)
return|;
block|}
DECL|method|scalb
specifier|public
specifier|static
name|float
name|scalb
parameter_list|(
name|Float
name|f
parameter_list|,
name|Integer
name|scaleFactor
parameter_list|)
block|{
return|return
name|Math
operator|.
name|scalb
argument_list|(
name|f
argument_list|,
name|scaleFactor
argument_list|)
return|;
block|}
block|}
end_class

end_unit

