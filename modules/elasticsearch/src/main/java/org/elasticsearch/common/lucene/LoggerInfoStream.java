begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_comment
comment|/**  * A {@link java.io.PrintStream} that logs each {@link #println(String)} into a logger  * under trace level.  *<p/>  *<p>Provides also factory methods that basically append to the logger name provide the  * {@link #SUFFIX}.  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|LoggerInfoStream
specifier|public
class|class
name|LoggerInfoStream
extends|extends
name|PrintStream
block|{
DECL|field|SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|SUFFIX
init|=
literal|".lucene"
decl_stmt|;
comment|/**      * Creates a new {@link LoggerInfoStream} based on the provided logger      * by appending to its<tt>NAME</tt> the {@link #SUFFIX}.      */
DECL|method|getInfoStream
specifier|public
specifier|static
name|LoggerInfoStream
name|getInfoStream
parameter_list|(
name|ESLogger
name|logger
parameter_list|)
block|{
return|return
operator|new
name|LoggerInfoStream
argument_list|(
name|Loggers
operator|.
name|getLogger
argument_list|(
name|logger
argument_list|,
name|SUFFIX
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Creates a new {@link LoggerInfoStream} based on the provided name      * by appending to it the {@link #SUFFIX}.      */
DECL|method|getInfoStream
specifier|public
specifier|static
name|LoggerInfoStream
name|getInfoStream
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|LoggerInfoStream
argument_list|(
name|Loggers
operator|.
name|getLogger
argument_list|(
name|name
operator|+
name|SUFFIX
argument_list|)
argument_list|)
return|;
block|}
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
comment|/**      * Constucts a new instance based on the provided logger. Will output      * each {@link #println(String)} operation as a trace level.      */
DECL|method|LoggerInfoStream
specifier|public
name|LoggerInfoStream
parameter_list|(
name|ESLogger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|OutputStream
operator|)
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
comment|/**      * Override only the method Lucene actually uses.      */
DECL|method|println
annotation|@
name|Override
specifier|public
name|void
name|println
parameter_list|(
name|String
name|x
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

