begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseOptions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|TransportStreams
specifier|public
class|class
name|TransportStreams
block|{
DECL|field|HEADER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|HEADER_SIZE
init|=
literal|4
operator|+
literal|8
operator|+
literal|1
decl_stmt|;
DECL|method|writeHeader
specifier|public
specifier|static
name|void
name|writeHeader
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|dataLength
parameter_list|,
name|long
name|requestId
parameter_list|,
name|byte
name|status
parameter_list|)
block|{
name|writeInt
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|dataLength
operator|+
literal|9
argument_list|)
expr_stmt|;
comment|// add the requestId and the status
name|writeLong
argument_list|(
name|data
argument_list|,
literal|4
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
name|data
index|[
literal|12
index|]
operator|=
name|status
expr_stmt|;
block|}
comment|// same as writeLong in StreamOutput
DECL|method|writeLong
specifier|private
specifier|static
name|void
name|writeLong
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|56
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|48
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|40
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|32
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|24
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
argument_list|)
operator|)
expr_stmt|;
block|}
comment|// same as writeInt in StreamOutput
DECL|method|writeInt
specifier|private
specifier|static
name|void
name|writeInt
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|24
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
operator|++
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
operator|)
expr_stmt|;
name|buffer
index|[
name|offset
index|]
operator|=
operator|(
call|(
name|byte
call|)
argument_list|(
name|value
argument_list|)
operator|)
expr_stmt|;
block|}
DECL|field|STATUS_REQRES
specifier|private
specifier|static
specifier|final
name|byte
name|STATUS_REQRES
init|=
literal|1
operator|<<
literal|0
decl_stmt|;
DECL|field|STATUS_ERROR
specifier|private
specifier|static
specifier|final
name|byte
name|STATUS_ERROR
init|=
literal|1
operator|<<
literal|1
decl_stmt|;
DECL|field|STATUS_COMPRESS
specifier|private
specifier|static
specifier|final
name|byte
name|STATUS_COMPRESS
init|=
literal|1
operator|<<
literal|2
decl_stmt|;
DECL|method|statusIsRequest
specifier|public
specifier|static
name|boolean
name|statusIsRequest
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|&
name|STATUS_REQRES
operator|)
operator|==
literal|0
return|;
block|}
DECL|method|statusSetRequest
specifier|public
specifier|static
name|byte
name|statusSetRequest
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|value
operator|&=
operator|~
name|STATUS_REQRES
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|method|statusSetResponse
specifier|public
specifier|static
name|byte
name|statusSetResponse
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|value
operator||=
name|STATUS_REQRES
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|method|statusIsError
specifier|public
specifier|static
name|boolean
name|statusIsError
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|&
name|STATUS_ERROR
operator|)
operator|!=
literal|0
return|;
block|}
DECL|method|statusSetError
specifier|public
specifier|static
name|byte
name|statusSetError
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|value
operator||=
name|STATUS_ERROR
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|method|statusIsCompress
specifier|public
specifier|static
name|boolean
name|statusIsCompress
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|&
name|STATUS_COMPRESS
operator|)
operator|!=
literal|0
return|;
block|}
DECL|method|statusSetCompress
specifier|public
specifier|static
name|byte
name|statusSetCompress
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|value
operator||=
name|STATUS_COMPRESS
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|method|buildRequest
specifier|public
specifier|static
name|byte
index|[]
name|buildRequest
parameter_list|(
specifier|final
name|long
name|requestId
parameter_list|,
specifier|final
name|String
name|action
parameter_list|,
specifier|final
name|Streamable
name|message
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|status
init|=
literal|0
decl_stmt|;
name|status
operator|=
name|TransportStreams
operator|.
name|statusSetRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|wrapped
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|compress
argument_list|()
condition|)
block|{
name|status
operator|=
name|TransportStreams
operator|.
name|statusSetCompress
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|HandlesStreamOutput
name|stream
init|=
name|CachedStreamOutput
operator|.
name|cachedHandlesLzfBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|writeUTF
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|wrapped
operator|=
operator|(
call|(
name|BytesStreamOutput
call|)
argument_list|(
operator|(
name|LZFStreamOutput
operator|)
name|stream
operator|.
name|wrappedOut
argument_list|()
argument_list|)
operator|.
name|wrappedOut
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
name|HandlesStreamOutput
name|stream
init|=
name|CachedStreamOutput
operator|.
name|cachedHandlesBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|writeUTF
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|wrapped
operator|=
operator|(
operator|(
name|BytesStreamOutput
operator|)
name|stream
operator|.
name|wrappedOut
argument_list|()
operator|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|HEADER_SIZE
operator|+
name|wrapped
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|TransportStreams
operator|.
name|writeHeader
argument_list|(
name|data
argument_list|,
name|wrapped
operator|.
name|size
argument_list|()
argument_list|,
name|requestId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|wrapped
operator|.
name|unsafeByteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
name|HEADER_SIZE
argument_list|,
name|wrapped
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|buildResponse
specifier|public
specifier|static
name|byte
index|[]
name|buildResponse
parameter_list|(
specifier|final
name|long
name|requestId
parameter_list|,
name|Streamable
name|message
parameter_list|,
name|TransportResponseOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|status
init|=
literal|0
decl_stmt|;
name|status
operator|=
name|TransportStreams
operator|.
name|statusSetResponse
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|wrapped
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|compress
argument_list|()
condition|)
block|{
name|status
operator|=
name|TransportStreams
operator|.
name|statusSetCompress
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|HandlesStreamOutput
name|stream
init|=
name|CachedStreamOutput
operator|.
name|cachedHandlesLzfBytes
argument_list|()
decl_stmt|;
name|message
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|wrapped
operator|=
operator|(
call|(
name|BytesStreamOutput
call|)
argument_list|(
operator|(
name|LZFStreamOutput
operator|)
name|stream
operator|.
name|wrappedOut
argument_list|()
argument_list|)
operator|.
name|wrappedOut
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
name|HandlesStreamOutput
name|stream
init|=
name|CachedStreamOutput
operator|.
name|cachedHandlesBytes
argument_list|()
decl_stmt|;
name|message
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|wrapped
operator|=
operator|(
operator|(
name|BytesStreamOutput
operator|)
name|stream
operator|.
name|wrappedOut
argument_list|()
operator|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|HEADER_SIZE
operator|+
name|wrapped
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|TransportStreams
operator|.
name|writeHeader
argument_list|(
name|data
argument_list|,
name|wrapped
operator|.
name|size
argument_list|()
argument_list|,
name|requestId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|wrapped
operator|.
name|unsafeByteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
name|HEADER_SIZE
argument_list|,
name|wrapped
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

