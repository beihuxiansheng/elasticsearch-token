begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|HandlesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|OpenChannelsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ClientBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioClientSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|logging
operator|.
name|InternalLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|logging
operator|.
name|InternalLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|PortsRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|NetworkExceptionHelper
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DynamicExecutors
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
operator|.
name|Helper
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|NettyTransport
specifier|public
class|class
name|NettyTransport
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|Transport
argument_list|>
implements|implements
name|Transport
block|{
static|static
block|{
name|InternalLoggerFactory
operator|.
name|setDefaultFactory
argument_list|(
operator|new
name|NettyInternalESLoggerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InternalLogger
name|newInstance
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|super
operator|.
name|newInstance
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|"org.elasticsearch.common.netty."
argument_list|,
literal|"netty."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"org.jboss.netty."
argument_list|,
literal|"netty."
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|networkService
specifier|private
specifier|final
name|NetworkService
name|networkService
decl_stmt|;
DECL|field|workerCount
specifier|final
name|int
name|workerCount
decl_stmt|;
DECL|field|port
specifier|final
name|String
name|port
decl_stmt|;
DECL|field|bindHost
specifier|final
name|String
name|bindHost
decl_stmt|;
DECL|field|publishHost
specifier|final
name|String
name|publishHost
decl_stmt|;
DECL|field|connectTimeout
specifier|final
name|TimeValue
name|connectTimeout
decl_stmt|;
DECL|field|connectionsPerNode
specifier|final
name|int
name|connectionsPerNode
decl_stmt|;
DECL|field|tcpNoDelay
specifier|final
name|Boolean
name|tcpNoDelay
decl_stmt|;
DECL|field|tcpKeepAlive
specifier|final
name|Boolean
name|tcpKeepAlive
decl_stmt|;
DECL|field|reuseAddress
specifier|final
name|Boolean
name|reuseAddress
decl_stmt|;
DECL|field|tcpSendBufferSize
specifier|final
name|ByteSizeValue
name|tcpSendBufferSize
decl_stmt|;
DECL|field|tcpReceiveBufferSize
specifier|final
name|ByteSizeValue
name|tcpReceiveBufferSize
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|serverOpenChannels
specifier|private
specifier|volatile
name|OpenChannelsHandler
name|serverOpenChannels
decl_stmt|;
DECL|field|clientBootstrap
specifier|private
specifier|volatile
name|ClientBootstrap
name|clientBootstrap
decl_stmt|;
DECL|field|serverBootstrap
specifier|private
specifier|volatile
name|ServerBootstrap
name|serverBootstrap
decl_stmt|;
comment|// node id to actual channel
DECL|field|connectedNodes
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|NodeConnections
argument_list|>
name|connectedNodes
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|serverChannel
specifier|private
specifier|volatile
name|Channel
name|serverChannel
decl_stmt|;
DECL|field|transportServiceAdapter
specifier|private
specifier|volatile
name|TransportServiceAdapter
name|transportServiceAdapter
decl_stmt|;
DECL|field|boundAddress
specifier|private
specifier|volatile
name|BoundTransportAddress
name|boundAddress
decl_stmt|;
DECL|method|NettyTransport
specifier|public
name|NettyTransport
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
argument_list|(
name|EMPTY_SETTINGS
argument_list|,
name|threadPool
argument_list|,
operator|new
name|NetworkService
argument_list|(
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|NettyTransport
specifier|public
name|NettyTransport
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
operator|new
name|NetworkService
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|NettyTransport
annotation|@
name|Inject
specifier|public
name|NettyTransport
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|NetworkService
name|networkService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
name|this
operator|.
name|workerCount
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"worker_count"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"port"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.tcp.port"
argument_list|,
literal|"9300-9400"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|bindHost
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"bind_host"
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNode
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"connections_per_node"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.tcp.connection_per_node"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|publishHost
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"publish_host"
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectTimeout
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"connect_timeout"
argument_list|,
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"transport.tcp.connect_timeout"
argument_list|,
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpNoDelay
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"tcp_no_delay"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_NO_DELAY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpKeepAlive
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"tcp_keep_alive"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_KEEP_ALIVE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|reuseAddress
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"reuse_address"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_REUSE_ADDRESS
argument_list|,
name|NetworkUtils
operator|.
name|defaultReuseAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpSendBufferSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"tcp_send_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_SEND_BUFFER_SIZE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpReceiveBufferSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"tcp_receive_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_RECEIVE_BUFFER_SIZE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
DECL|method|transportServiceAdapter
annotation|@
name|Override
specifier|public
name|void
name|transportServiceAdapter
parameter_list|(
name|TransportServiceAdapter
name|service
parameter_list|)
block|{
name|this
operator|.
name|transportServiceAdapter
operator|=
name|service
expr_stmt|;
block|}
DECL|method|transportServiceAdapter
name|TransportServiceAdapter
name|transportServiceAdapter
parameter_list|()
block|{
return|return
name|transportServiceAdapter
return|;
block|}
DECL|method|threadPool
name|ThreadPool
name|threadPool
parameter_list|()
block|{
return|return
name|threadPool
return|;
block|}
DECL|method|doStart
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|clientBootstrap
operator|=
operator|new
name|ClientBootstrap
argument_list|(
operator|new
name|NioClientSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transportClientBoss"
argument_list|)
argument_list|)
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transportClientIoWorker"
argument_list|)
argument_list|)
argument_list|,
name|workerCount
argument_list|)
argument_list|)
expr_stmt|;
name|ChannelPipelineFactory
name|clientPipelineFactory
init|=
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"decoder"
argument_list|,
operator|new
name|SizeHeaderFrameDecoder
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"dispatcher"
argument_list|,
operator|new
name|MessageChannelHandler
argument_list|(
name|NettyTransport
operator|.
name|this
argument_list|,
name|logger
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
block|}
decl_stmt|;
name|clientBootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|clientPipelineFactory
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"connectTimeoutMillis"
argument_list|,
name|connectTimeout
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcpNoDelay
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpKeepAlive
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"keepAlive"
argument_list|,
name|tcpKeepAlive
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpSendBufferSize
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpReceiveBufferSize
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reuseAddress
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"network.server"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|serverOpenChannels
operator|=
operator|new
name|OpenChannelsHandler
argument_list|()
expr_stmt|;
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transportServerBoss"
argument_list|)
argument_list|)
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transportServerIoWorker"
argument_list|)
argument_list|)
argument_list|,
name|workerCount
argument_list|)
argument_list|)
expr_stmt|;
name|ChannelPipelineFactory
name|serverPipelineFactory
init|=
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"openChannels"
argument_list|,
name|serverOpenChannels
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"decoder"
argument_list|,
operator|new
name|SizeHeaderFrameDecoder
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"dispatcher"
argument_list|,
operator|new
name|MessageChannelHandler
argument_list|(
name|NettyTransport
operator|.
name|this
argument_list|,
name|logger
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
block|}
decl_stmt|;
name|serverBootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|serverPipelineFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcpNoDelay
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpKeepAlive
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.keepAlive"
argument_list|,
name|tcpKeepAlive
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpSendBufferSize
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.sendBufferSize"
argument_list|,
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpReceiveBufferSize
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.receiveBufferSize"
argument_list|,
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reuseAddress
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
block|}
comment|// Bind and start to accept incoming connections.
name|InetAddress
name|hostAddressX
decl_stmt|;
try|try
block|{
name|hostAddressX
operator|=
name|networkService
operator|.
name|resolveBindHostAddress
argument_list|(
name|bindHost
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to resolve host ["
operator|+
name|bindHost
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|InetAddress
name|hostAddress
init|=
name|hostAddressX
decl_stmt|;
name|PortsRange
name|portsRange
init|=
operator|new
name|PortsRange
argument_list|(
name|port
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|portsRange
operator|.
name|iterate
argument_list|(
operator|new
name|PortsRange
operator|.
name|PortCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onPortNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
try|try
block|{
name|serverChannel
operator|=
name|serverBootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|hostAddress
argument_list|,
name|portNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to bind to ["
operator|+
name|port
operator|+
literal|"]"
argument_list|,
name|lastException
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Bound to address [{}]"
argument_list|,
name|serverChannel
operator|.
name|getLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|boundAddress
init|=
operator|(
name|InetSocketAddress
operator|)
name|serverChannel
operator|.
name|getLocalAddress
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|publishAddress
decl_stmt|;
try|try
block|{
name|publishAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|networkService
operator|.
name|resolvePublishHostAddress
argument_list|(
name|publishHost
argument_list|)
argument_list|,
name|boundAddress
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to resolve publish address"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|boundAddress
operator|=
operator|new
name|BoundTransportAddress
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|boundAddress
argument_list|)
argument_list|,
operator|new
name|InetSocketTransportAddress
argument_list|(
name|publishAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
if|if
condition|(
name|serverChannel
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|serverChannel
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|serverChannel
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serverOpenChannels
operator|!=
literal|null
condition|)
block|{
name|serverOpenChannels
operator|.
name|close
argument_list|()
expr_stmt|;
name|serverOpenChannels
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|serverBootstrap
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|serverBootstrap
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|NodeConnections
argument_list|>
name|it
init|=
name|connectedNodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeConnections
name|nodeConnections
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeConnections
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clientBootstrap
operator|!=
literal|null
condition|)
block|{
comment|// HACK, make sure we try and close open client channels also after
comment|// we releaseExternalResources, they seem to hang when there are open client channels
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|threadPool
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|NodeConnections
argument_list|>
name|it
init|=
name|connectedNodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeConnections
name|nodeConnections
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeConnections
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|clientBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|scheduledFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|doClose
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
DECL|method|addressesFromString
annotation|@
name|Override
specifier|public
name|TransportAddress
index|[]
name|addressesFromString
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|index
init|=
name|address
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|host
init|=
name|address
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ports
init|=
name|Strings
operator|.
name|commaDelimitedListToSet
argument_list|(
name|address
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|address
operator|.
name|indexOf
argument_list|(
literal|']'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TransportAddress
argument_list|>
name|addresses
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|port
range|:
name|ports
control|)
block|{
name|int
index|[]
name|iPorts
init|=
operator|new
name|PortsRange
argument_list|(
name|port
argument_list|)
operator|.
name|ports
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iPort
range|:
name|iPorts
control|)
block|{
name|addresses
operator|.
name|add
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|host
argument_list|,
name|iPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|addresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
name|addresses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
name|index
operator|=
name|address
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Port must be provided to create inet address from ["
operator|+
name|address
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|String
name|host
init|=
name|address
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|address
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransportAddress
index|[]
block|{
operator|new
name|InetSocketTransportAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
block|}
return|;
block|}
block|}
DECL|method|addressSupported
annotation|@
name|Override
specifier|public
name|boolean
name|addressSupported
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TransportAddress
argument_list|>
name|address
parameter_list|)
block|{
return|return
name|InetSocketTransportAddress
operator|.
name|class
operator|.
name|equals
argument_list|(
name|address
argument_list|)
return|;
block|}
DECL|method|boundAddress
annotation|@
name|Override
specifier|public
name|BoundTransportAddress
name|boundAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|boundAddress
return|;
block|}
DECL|method|exceptionCaught
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|isCloseConnectionException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|||
name|isConnectException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"(Ignoring) Exception caught on netty layer ["
operator|+
name|ctx
operator|.
name|getChannel
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Exception caught on netty layer ["
operator|+
name|ctx
operator|.
name|getChannel
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|wrapAddress
name|TransportAddress
name|wrapAddress
parameter_list|(
name|SocketAddress
name|socketAddress
parameter_list|)
block|{
return|return
operator|new
name|InetSocketTransportAddress
argument_list|(
operator|(
name|InetSocketAddress
operator|)
name|socketAddress
argument_list|)
return|;
block|}
DECL|field|LENGTH_PLACEHOLDER
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|LENGTH_PLACEHOLDER
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
DECL|method|sendRequest
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Streamable
parameter_list|>
name|void
name|sendRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|Streamable
name|streamable
parameter_list|,
specifier|final
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
name|Channel
name|targetChannel
init|=
name|nodeChannel
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|HandlesStreamOutput
name|stream
init|=
name|BytesStreamOutput
operator|.
name|Cached
operator|.
name|cachedHandles
argument_list|()
decl_stmt|;
name|stream
operator|.
name|writeBytes
argument_list|(
name|LENGTH_PLACEHOLDER
argument_list|)
expr_stmt|;
comment|// fake size
name|stream
operator|.
name|writeLong
argument_list|(
name|requestId
argument_list|)
expr_stmt|;
name|byte
name|status
init|=
literal|0
decl_stmt|;
name|status
operator|=
name|setRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeByte
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// 0 for request, 1 for response.
name|stream
operator|.
name|writeUTF
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|streamable
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|BytesStreamOutput
operator|)
name|stream
operator|.
name|wrappedOut
argument_list|()
operator|)
operator|.
name|copiedByteArray
argument_list|()
decl_stmt|;
name|ChannelBuffer
name|buffer
init|=
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|buffer
operator|.
name|writerIndex
argument_list|()
operator|-
literal|4
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|handler
operator|.
name|handleException
argument_list|(
operator|new
name|RemoteTransportException
argument_list|(
literal|""
argument_list|,
operator|new
name|FailedCommunicationException
argument_list|(
literal|"Trying to send a stream with 0 size"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|setInt
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// update real size.
name|ChannelFuture
name|channelFuture
init|=
name|targetChannel
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
comment|// TODO do we need this listener?
comment|//        channelFuture.addListener(new ChannelFutureListener() {
comment|//            @Override public void operationComplete(ChannelFuture future) throws Exception {
comment|//                if (!future.isSuccess()) {
comment|//                    // maybe add back the retry?
comment|//                    handler.handleException(new RemoteTransportException("", new FailedCommunicationException("Error sending request", future.getCause())));
comment|//                }
comment|//            }
comment|//        });
block|}
DECL|method|nodeConnected
annotation|@
name|Override
specifier|public
name|boolean
name|nodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
name|connectedNodes
operator|.
name|containsKey
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
return|;
block|}
DECL|method|connectToNode
annotation|@
name|Override
specifier|public
name|void
name|connectToNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Can't add nodes to a stopped transport"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"Can't connect to a null node"
argument_list|)
throw|;
block|}
name|NodeConnections
name|nodeConnections
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeConnections
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// recheck here, within the sync block (we cache connections, so we don't care about this single sync block)
name|nodeConnections
operator|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeConnections
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|ChannelFuture
argument_list|>
name|connectFutures
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|connectionIndex
init|=
literal|0
init|;
name|connectionIndex
operator|<
name|connectionsPerNode
condition|;
name|connectionIndex
operator|++
control|)
block|{
name|InetSocketAddress
name|address
init|=
operator|(
operator|(
name|InetSocketTransportAddress
operator|)
name|node
operator|.
name|address
argument_list|()
operator|)
operator|.
name|address
argument_list|()
decl_stmt|;
name|connectFutures
operator|.
name|add
argument_list|(
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Channel
argument_list|>
name|channels
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Throwable
name|lastConnectException
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ChannelFuture
name|connectFuture
range|:
name|connectFutures
control|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
for|for
control|(
name|Channel
name|channel
range|:
name|channels
control|)
block|{
name|channel
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"Can't connect when the transport is stopped"
argument_list|)
throw|;
block|}
name|connectFuture
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.25
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectFuture
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|lastConnectException
operator|=
name|connectFuture
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Channel
name|channel
init|=
name|connectFuture
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|channel
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|channels
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|channels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|lastConnectException
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|lastConnectException
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"], reason unknown"
argument_list|)
throw|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Connected to node[{}], number_of_connections[{}]"
argument_list|,
name|node
argument_list|,
name|channels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connectedNodes
operator|.
name|put
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|NodeConnections
argument_list|(
name|node
argument_list|,
name|channels
operator|.
name|toArray
argument_list|(
operator|new
name|Channel
index|[
name|channels
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|transportServiceAdapter
operator|.
name|raiseNodeConnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"General node connection failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|disconnectFromNode
annotation|@
name|Override
specifier|public
name|void
name|disconnectFromNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|NodeConnections
name|nodeConnections
init|=
name|connectedNodes
operator|.
name|remove
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeConnections
operator|!=
literal|null
condition|)
block|{
name|nodeConnections
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|nodeChannel
specifier|private
name|Channel
name|nodeChannel
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|ConnectTransportException
block|{
name|NettyTransport
operator|.
name|NodeConnections
name|nodeConnections
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeConnections
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NodeNotConnectedException
argument_list|(
name|node
argument_list|,
literal|"Node not connected"
argument_list|)
throw|;
block|}
name|Channel
name|channel
init|=
name|nodeConnections
operator|.
name|channel
argument_list|()
decl_stmt|;
if|if
condition|(
name|channel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NodeNotConnectedException
argument_list|(
name|node
argument_list|,
literal|"Node not connected"
argument_list|)
throw|;
block|}
return|return
name|channel
return|;
block|}
DECL|class|NodeConnections
specifier|public
class|class
name|NodeConnections
block|{
DECL|field|node
specifier|private
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|field|counter
specifier|private
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|channels
specifier|private
specifier|volatile
name|Channel
index|[]
name|channels
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|NodeConnections
specifier|private
name|NodeConnections
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|Channel
index|[]
name|channels
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|channels
operator|=
name|channels
expr_stmt|;
block|}
DECL|method|channel
specifier|private
name|Channel
name|channel
parameter_list|()
block|{
return|return
name|channels
index|[
name|Math
operator|.
name|abs
argument_list|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
operator|%
name|channels
operator|.
name|length
index|]
return|;
block|}
DECL|method|channelClosed
specifier|private
name|void
name|channelClosed
parameter_list|(
name|Channel
name|closedChannel
parameter_list|)
block|{
name|List
argument_list|<
name|Channel
argument_list|>
name|updated
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Channel
name|channel
range|:
name|channels
control|)
block|{
if|if
condition|(
operator|!
name|channel
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|closedChannel
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|updated
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|channels
operator|=
name|updated
operator|.
name|toArray
argument_list|(
operator|new
name|Channel
index|[
name|updated
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|numberOfChannels
specifier|private
name|int
name|numberOfChannels
parameter_list|()
block|{
return|return
name|channels
operator|.
name|length
return|;
block|}
DECL|method|close
specifier|private
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
name|Channel
index|[]
name|channelsToClose
init|=
name|channels
decl_stmt|;
name|channels
operator|=
operator|new
name|Channel
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|Channel
name|channel
range|:
name|channelsToClose
control|)
block|{
if|if
condition|(
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Disconnected from [{}]"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|transportServiceAdapter
operator|.
name|raiseNodeDisconnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ChannelCloseListener
specifier|private
class|class
name|ChannelCloseListener
implements|implements
name|ChannelFutureListener
block|{
DECL|field|nodeId
specifier|private
specifier|final
name|String
name|nodeId
decl_stmt|;
DECL|method|ChannelCloseListener
specifier|private
name|ChannelCloseListener
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
DECL|method|operationComplete
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|NodeConnections
name|nodeConnections
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeConnections
operator|!=
literal|null
condition|)
block|{
name|nodeConnections
operator|.
name|channelClosed
argument_list|(
name|future
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeConnections
operator|.
name|numberOfChannels
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// all the channels in the node connections are closed, remove it from
comment|// our client channels
name|connectedNodes
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
comment|// and close it
name|nodeConnections
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

