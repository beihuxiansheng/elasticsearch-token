begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cache.memory
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ByteBufferCache
specifier|public
class|class
name|ByteBufferCache
extends|extends
name|AbstractComponent
block|{
DECL|field|CLEAN_SUPPORTED
specifier|public
specifier|static
specifier|final
name|boolean
name|CLEAN_SUPPORTED
decl_stmt|;
DECL|field|directBufferCleaner
specifier|private
specifier|static
specifier|final
name|Method
name|directBufferCleaner
decl_stmt|;
DECL|field|directBufferCleanerClean
specifier|private
specifier|static
specifier|final
name|Method
name|directBufferCleanerClean
decl_stmt|;
static|static
block|{
name|Method
name|directBufferCleanerX
init|=
literal|null
decl_stmt|;
name|Method
name|directBufferCleanerCleanX
init|=
literal|null
decl_stmt|;
name|boolean
name|v
decl_stmt|;
try|try
block|{
name|directBufferCleanerX
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.nio.DirectByteBuffer"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"cleaner"
argument_list|)
expr_stmt|;
name|directBufferCleanerX
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|directBufferCleanerCleanX
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Cleaner"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"clean"
argument_list|)
expr_stmt|;
name|directBufferCleanerCleanX
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|v
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|v
operator|=
literal|false
expr_stmt|;
block|}
name|CLEAN_SUPPORTED
operator|=
name|v
expr_stmt|;
name|directBufferCleaner
operator|=
name|directBufferCleanerX
expr_stmt|;
name|directBufferCleanerClean
operator|=
name|directBufferCleanerCleanX
expr_stmt|;
block|}
DECL|field|cache
specifier|private
specifier|final
name|Queue
argument_list|<
name|ByteBuffer
argument_list|>
name|cache
decl_stmt|;
DECL|field|disableCache
specifier|private
specifier|final
name|boolean
name|disableCache
decl_stmt|;
DECL|field|bufferSizeInBytes
specifier|private
specifier|final
name|int
name|bufferSizeInBytes
decl_stmt|;
DECL|field|cacheSizeInBytes
specifier|private
specifier|final
name|long
name|cacheSizeInBytes
decl_stmt|;
DECL|field|direct
specifier|private
specifier|final
name|boolean
name|direct
decl_stmt|;
DECL|field|acquiredBuffers
specifier|private
specifier|final
name|AtomicLong
name|acquiredBuffers
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|ByteBufferCache
specifier|public
name|ByteBufferCache
parameter_list|()
block|{
name|this
argument_list|(
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteBufferCache
specifier|public
name|ByteBufferCache
parameter_list|(
name|int
name|bufferSizeInBytes
parameter_list|,
name|int
name|cacheSizeInBytes
parameter_list|,
name|boolean
name|direct
parameter_list|,
name|boolean
name|warmCache
parameter_list|)
block|{
name|this
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"buffer_size"
argument_list|,
name|bufferSizeInBytes
argument_list|)
operator|.
name|put
argument_list|(
literal|"cache_size"
argument_list|,
name|cacheSizeInBytes
argument_list|)
operator|.
name|put
argument_list|(
literal|"direct"
argument_list|,
name|direct
argument_list|)
operator|.
name|put
argument_list|(
literal|"warm_cache"
argument_list|,
name|warmCache
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteBufferCache
annotation|@
name|Inject
specifier|public
name|ByteBufferCache
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferSizeInBytes
operator|=
operator|(
name|int
operator|)
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"buffer_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|100
argument_list|,
name|ByteSizeUnit
operator|.
name|KB
argument_list|)
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|long
name|cacheSizeInBytes
init|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"cache_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|200
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|this
operator|.
name|direct
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"direct"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|warmCache
init|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"warm_cache"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|disableCache
operator|=
name|cacheSizeInBytes
operator|==
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|disableCache
operator|&&
name|cacheSizeInBytes
operator|<
name|bufferSizeInBytes
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cache size ["
operator|+
name|cacheSizeInBytes
operator|+
literal|"] is smaller than buffer size ["
operator|+
name|bufferSizeInBytes
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|int
name|numberOfCacheEntries
init|=
call|(
name|int
call|)
argument_list|(
name|cacheSizeInBytes
operator|/
name|bufferSizeInBytes
argument_list|)
decl_stmt|;
name|this
operator|.
name|cache
operator|=
name|disableCache
condition|?
literal|null
else|:
operator|new
name|ArrayBlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|numberOfCacheEntries
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheSizeInBytes
operator|=
name|disableCache
condition|?
literal|0
else|:
name|numberOfCacheEntries
operator|*
name|bufferSizeInBytes
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"using bytebuffer cache with buffer_size [{}], cache_size [{}], direct [{}], warm_cache [{}]"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|bufferSizeInBytes
argument_list|)
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|cacheSizeInBytes
argument_list|)
argument_list|,
name|direct
argument_list|,
name|warmCache
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|bufferSize
specifier|public
name|ByteSizeValue
name|bufferSize
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|bufferSizeInBytes
argument_list|)
return|;
block|}
DECL|method|cacheSize
specifier|public
name|ByteSizeValue
name|cacheSize
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|cacheSizeInBytes
argument_list|)
return|;
block|}
DECL|method|allocatedMemory
specifier|public
name|ByteSizeValue
name|allocatedMemory
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|acquiredBuffers
operator|.
name|get
argument_list|()
operator|*
name|bufferSizeInBytes
argument_list|)
return|;
block|}
DECL|method|bufferSizeInBytes
specifier|public
name|int
name|bufferSizeInBytes
parameter_list|()
block|{
return|return
name|bufferSizeInBytes
return|;
block|}
DECL|method|direct
specifier|public
name|boolean
name|direct
parameter_list|()
block|{
return|return
name|direct
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|disableCache
condition|)
block|{
name|ByteBuffer
name|buffer
init|=
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
while|while
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|closeBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|cache
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
name|acquiredBuffers
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|acquireBuffer
specifier|public
name|ByteBuffer
name|acquireBuffer
parameter_list|()
block|{
name|acquiredBuffers
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|disableCache
condition|)
block|{
return|return
name|createBuffer
argument_list|()
return|;
block|}
name|ByteBuffer
name|byteBuffer
init|=
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteBuffer
operator|==
literal|null
condition|)
block|{
comment|// everything is taken, return a new one
return|return
name|createBuffer
argument_list|()
return|;
block|}
name|byteBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|byteBuffer
return|;
block|}
DECL|method|releaseBuffer
specifier|public
name|void
name|releaseBuffer
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
block|{
name|acquiredBuffers
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|disableCache
condition|)
block|{
name|closeBuffer
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|success
init|=
name|cache
operator|.
name|offer
argument_list|(
name|byteBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|closeBuffer
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createBuffer
specifier|private
name|ByteBuffer
name|createBuffer
parameter_list|()
block|{
if|if
condition|(
name|direct
condition|)
block|{
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|bufferSizeInBytes
argument_list|)
return|;
block|}
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufferSizeInBytes
argument_list|)
return|;
block|}
DECL|method|closeBuffer
specifier|private
name|void
name|closeBuffer
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
block|{
if|if
condition|(
name|direct
operator|&&
name|CLEAN_SUPPORTED
condition|)
block|{
try|try
block|{
name|Object
name|cleaner
init|=
name|directBufferCleaner
operator|.
name|invoke
argument_list|(
name|byteBuffer
argument_list|)
decl_stmt|;
name|directBufferCleanerClean
operator|.
name|invoke
argument_list|(
name|cleaner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Failed to clean memory"
argument_list|)
expr_stmt|;
comment|// ignore
block|}
block|}
block|}
block|}
end_class

end_unit

