begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.controller
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|controller
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ShardFieldDocSortedHitQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|AggregatedDfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|CountFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|Facet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|Facets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|trove
operator|.
name|ExtTIntArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|trove
operator|.
name|ExtTObjectIntHasMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|SearchPhaseController
specifier|public
class|class
name|SearchPhaseController
block|{
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|ShardDoc
index|[]
name|EMPTY
init|=
operator|new
name|ShardDoc
index|[
literal|0
index|]
decl_stmt|;
DECL|method|aggregateDfs
specifier|public
name|AggregatedDfs
name|aggregateDfs
parameter_list|(
name|Iterable
argument_list|<
name|DfsSearchResult
argument_list|>
name|results
parameter_list|)
block|{
name|ExtTObjectIntHasMap
argument_list|<
name|Term
argument_list|>
name|dfMap
init|=
operator|new
name|ExtTObjectIntHasMap
argument_list|<
name|Term
argument_list|>
argument_list|()
operator|.
name|defaultReturnValue
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|aggMaxDoc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DfsSearchResult
name|result
range|:
name|results
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|freqs
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dfMap
operator|.
name|adjustOrPutValue
argument_list|(
name|result
operator|.
name|terms
argument_list|()
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|freqs
argument_list|()
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|freqs
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|aggMaxDoc
operator|+=
name|result
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|AggregatedDfs
argument_list|(
name|dfMap
argument_list|,
name|aggMaxDoc
argument_list|)
return|;
block|}
DECL|method|sortDocs
specifier|public
name|ShardDoc
index|[]
name|sortDocs
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|results
parameter_list|)
block|{
if|if
condition|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|results
argument_list|)
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|QuerySearchResultProvider
name|queryResultProvider
init|=
name|Iterables
operator|.
name|get
argument_list|(
name|results
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|totalNumDocs
init|=
literal|0
decl_stmt|;
name|int
name|queueSize
init|=
name|queryResultProvider
operator|.
name|queryResult
argument_list|()
operator|.
name|from
argument_list|()
operator|+
name|queryResultProvider
operator|.
name|queryResult
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryResultProvider
operator|.
name|includeFetch
argument_list|()
condition|)
block|{
comment|// if we did both query and fetch on the same go, we have fetched all the docs from each shards already, use them...
name|queueSize
operator|*=
name|results
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|PriorityQueue
name|queue
decl_stmt|;
if|if
condition|(
name|queryResultProvider
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
operator|instanceof
name|TopFieldDocs
condition|)
block|{
comment|// sorting ...
name|queue
operator|=
operator|new
name|ShardFieldDocSortedHitQueue
argument_list|(
operator|(
operator|(
name|TopFieldDocs
operator|)
name|queryResultProvider
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
operator|)
operator|.
name|fields
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
comment|// we need to accumulate for all and then filter the from
for|for
control|(
name|QuerySearchResultProvider
name|resultProvider
range|:
name|results
control|)
block|{
name|QuerySearchResult
name|result
init|=
name|resultProvider
operator|.
name|queryResult
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|result
operator|.
name|topDocs
argument_list|()
operator|.
name|scoreDocs
decl_stmt|;
name|totalNumDocs
operator|+=
name|scoreDocs
operator|.
name|length
expr_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|scoreDocs
control|)
block|{
name|ShardFieldDoc
name|nodeFieldDoc
init|=
operator|new
name|ShardFieldDoc
argument_list|(
name|result
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|doc
operator|.
name|doc
argument_list|,
name|doc
operator|.
name|score
argument_list|,
operator|(
operator|(
name|FieldDoc
operator|)
name|doc
operator|)
operator|.
name|fields
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|insertWithOverflow
argument_list|(
name|nodeFieldDoc
argument_list|)
operator|==
name|nodeFieldDoc
condition|)
block|{
comment|// filled the queue, break
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
name|queue
operator|=
operator|new
name|ScoreDocQueue
argument_list|(
name|queueSize
argument_list|)
expr_stmt|;
comment|// we need to accumulate for all and then filter the from
for|for
control|(
name|QuerySearchResultProvider
name|resultProvider
range|:
name|results
control|)
block|{
name|QuerySearchResult
name|result
init|=
name|resultProvider
operator|.
name|queryResult
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|result
operator|.
name|topDocs
argument_list|()
operator|.
name|scoreDocs
decl_stmt|;
name|totalNumDocs
operator|+=
name|scoreDocs
operator|.
name|length
expr_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|scoreDocs
control|)
block|{
name|ShardScoreDoc
name|nodeScoreDoc
init|=
operator|new
name|ShardScoreDoc
argument_list|(
name|result
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|doc
operator|.
name|doc
argument_list|,
name|doc
operator|.
name|score
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|insertWithOverflow
argument_list|(
name|nodeScoreDoc
argument_list|)
operator|==
name|nodeScoreDoc
condition|)
block|{
comment|// filled the queue, break
break|break;
block|}
block|}
block|}
block|}
name|int
name|resultDocsSize
init|=
name|queryResultProvider
operator|.
name|queryResult
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryResultProvider
operator|.
name|includeFetch
argument_list|()
condition|)
block|{
comment|// if we did both query and fetch on the same go, we have fetched all the docs from each shards already, use them...
name|resultDocsSize
operator|*=
name|results
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|totalNumDocs
operator|<
name|queueSize
condition|)
block|{
name|resultDocsSize
operator|=
name|totalNumDocs
operator|-
name|queryResultProvider
operator|.
name|queryResult
argument_list|()
operator|.
name|from
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resultDocsSize
operator|<=
literal|0
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|ShardDoc
index|[]
name|shardDocs
init|=
operator|new
name|ShardDoc
index|[
name|resultDocsSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|resultDocsSize
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
comment|// put docs in array
name|shardDocs
index|[
name|i
index|]
operator|=
operator|(
name|ShardDoc
operator|)
name|queue
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
name|shardDocs
return|;
block|}
DECL|method|docIdsToLoad
specifier|public
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|docIdsToLoad
parameter_list|(
name|ShardDoc
index|[]
name|shardDocs
parameter_list|)
block|{
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|ExtTIntArrayList
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardDoc
name|shardDoc
range|:
name|shardDocs
control|)
block|{
name|ExtTIntArrayList
name|list
init|=
name|result
operator|.
name|get
argument_list|(
name|shardDoc
operator|.
name|shardTarget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ExtTIntArrayList
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|shardDoc
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|shardDoc
operator|.
name|docId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|merge
specifier|public
name|InternalSearchResponse
name|merge
parameter_list|(
name|ShardDoc
index|[]
name|sortedDocs
parameter_list|,
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|queryResults
parameter_list|,
name|Map
argument_list|<
name|SearchShardTarget
argument_list|,
name|?
extends|extends
name|FetchSearchResultProvider
argument_list|>
name|fetchResults
parameter_list|)
block|{
comment|// merge facets
name|Facets
name|facets
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|queryResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we rely on the fact that the order of facets is the same on all query results
name|QuerySearchResult
name|queryResult
init|=
name|queryResults
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|queryResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryResult
operator|.
name|facets
argument_list|()
operator|!=
literal|null
operator|&&
name|queryResult
operator|.
name|facets
argument_list|()
operator|.
name|facets
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|queryResult
operator|.
name|facets
argument_list|()
operator|.
name|facets
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Facet
argument_list|>
name|mergedFacets
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|Facet
name|facet
range|:
name|queryResult
operator|.
name|facets
argument_list|()
operator|.
name|facets
argument_list|()
control|)
block|{
if|if
condition|(
name|facet
operator|.
name|type
argument_list|()
operator|==
name|Facet
operator|.
name|Type
operator|.
name|COUNT
condition|)
block|{
name|mergedFacets
operator|.
name|add
argument_list|(
operator|new
name|CountFacet
argument_list|(
name|facet
operator|.
name|name
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Can't handle type ["
operator|+
name|facet
operator|.
name|type
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|QuerySearchResultProvider
name|queryResultProvider
range|:
name|queryResults
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Facet
argument_list|>
name|queryFacets
init|=
name|queryResultProvider
operator|.
name|queryResult
argument_list|()
operator|.
name|facets
argument_list|()
operator|.
name|facets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mergedFacets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Facet
name|queryFacet
init|=
name|queryFacets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Facet
name|mergedFacet
init|=
name|mergedFacets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryFacet
operator|.
name|type
argument_list|()
operator|==
name|Facet
operator|.
name|Type
operator|.
name|COUNT
condition|)
block|{
operator|(
operator|(
name|CountFacet
operator|)
name|mergedFacet
operator|)
operator|.
name|increment
argument_list|(
operator|(
operator|(
name|CountFacet
operator|)
name|queryFacet
operator|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|facets
operator|=
operator|new
name|Facets
argument_list|(
name|mergedFacets
argument_list|)
expr_stmt|;
block|}
block|}
comment|// count the total (we use the query result provider here, since we might not get any hits (we scrolled past them))
name|long
name|totalHits
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QuerySearchResultProvider
name|queryResultProvider
range|:
name|queryResults
operator|.
name|values
argument_list|()
control|)
block|{
name|totalHits
operator|+=
name|queryResultProvider
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
operator|.
name|totalHits
expr_stmt|;
block|}
comment|// clean the fetch counter
for|for
control|(
name|FetchSearchResultProvider
name|fetchSearchResultProvider
range|:
name|fetchResults
operator|.
name|values
argument_list|()
control|)
block|{
name|fetchSearchResultProvider
operator|.
name|fetchResult
argument_list|()
operator|.
name|initCounter
argument_list|()
expr_stmt|;
block|}
comment|// merge hits
name|List
argument_list|<
name|SearchHit
argument_list|>
name|hits
init|=
operator|new
name|ArrayList
argument_list|<
name|SearchHit
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fetchResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ShardDoc
name|shardDoc
range|:
name|sortedDocs
control|)
block|{
name|FetchSearchResultProvider
name|fetchResultProvider
init|=
name|fetchResults
operator|.
name|get
argument_list|(
name|shardDoc
operator|.
name|shardTarget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetchResultProvider
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|FetchSearchResult
name|fetchResult
init|=
name|fetchResultProvider
operator|.
name|fetchResult
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|fetchResult
operator|.
name|counterGetAndIncrement
argument_list|()
decl_stmt|;
name|SearchHit
name|searchHit
init|=
name|fetchResult
operator|.
name|hits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
name|index
index|]
decl_stmt|;
operator|(
operator|(
name|InternalSearchHit
operator|)
name|searchHit
operator|)
operator|.
name|shard
argument_list|(
name|fetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|)
expr_stmt|;
name|hits
operator|.
name|add
argument_list|(
name|searchHit
argument_list|)
expr_stmt|;
block|}
block|}
name|InternalSearchHits
name|searchHits
init|=
operator|new
name|InternalSearchHits
argument_list|(
name|hits
operator|.
name|toArray
argument_list|(
operator|new
name|SearchHit
index|[
name|hits
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|totalHits
argument_list|)
decl_stmt|;
return|return
operator|new
name|InternalSearchResponse
argument_list|(
name|searchHits
argument_list|,
name|facets
argument_list|)
return|;
block|}
block|}
end_class

end_unit

