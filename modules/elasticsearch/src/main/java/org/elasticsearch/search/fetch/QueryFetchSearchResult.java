begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|QueryFetchSearchResult
specifier|public
class|class
name|QueryFetchSearchResult
implements|implements
name|Streamable
implements|,
name|QuerySearchResultProvider
implements|,
name|FetchSearchResultProvider
block|{
DECL|field|queryResult
specifier|private
name|QuerySearchResult
name|queryResult
decl_stmt|;
DECL|field|fetchResult
specifier|private
name|FetchSearchResult
name|fetchResult
decl_stmt|;
DECL|method|QueryFetchSearchResult
specifier|public
name|QueryFetchSearchResult
parameter_list|()
block|{      }
DECL|method|QueryFetchSearchResult
specifier|public
name|QueryFetchSearchResult
parameter_list|(
name|QuerySearchResult
name|queryResult
parameter_list|,
name|FetchSearchResult
name|fetchResult
parameter_list|)
block|{
name|this
operator|.
name|queryResult
operator|=
name|queryResult
expr_stmt|;
name|this
operator|.
name|fetchResult
operator|=
name|fetchResult
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|long
name|id
parameter_list|()
block|{
return|return
name|queryResult
operator|.
name|id
argument_list|()
return|;
block|}
DECL|method|shardTarget
specifier|public
name|SearchShardTarget
name|shardTarget
parameter_list|()
block|{
return|return
name|queryResult
operator|.
name|shardTarget
argument_list|()
return|;
block|}
DECL|method|includeFetch
annotation|@
name|Override
specifier|public
name|boolean
name|includeFetch
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|queryResult
specifier|public
name|QuerySearchResult
name|queryResult
parameter_list|()
block|{
return|return
name|queryResult
return|;
block|}
DECL|method|fetchResult
specifier|public
name|FetchSearchResult
name|fetchResult
parameter_list|()
block|{
return|return
name|fetchResult
return|;
block|}
DECL|method|readQueryFetchSearchResult
specifier|public
specifier|static
name|QueryFetchSearchResult
name|readQueryFetchSearchResult
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|QueryFetchSearchResult
name|result
init|=
operator|new
name|QueryFetchSearchResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|queryResult
operator|=
name|readQuerySearchResult
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fetchResult
operator|=
name|readFetchSearchResult
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|queryResult
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|fetchResult
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

