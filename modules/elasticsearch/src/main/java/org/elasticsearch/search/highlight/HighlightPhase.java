begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|HighlightPhase
specifier|public
class|class
name|HighlightPhase
implements|implements
name|SearchPhase
block|{
DECL|method|parseElements
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|SearchParseElement
argument_list|>
name|parseElements
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"highlight"
argument_list|,
operator|new
name|HighlighterParseElement
argument_list|()
argument_list|)
return|;
block|}
DECL|method|preProcess
annotation|@
name|Override
specifier|public
name|void
name|preProcess
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{     }
DECL|method|execute
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|SearchContext
name|context
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
if|if
condition|(
name|context
operator|.
name|highlight
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|FastVectorHighlighter
argument_list|>
name|highlighterMap
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|FieldQuery
argument_list|>
name|fieldQueryMap
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|context
operator|.
name|fetchResult
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|hits
argument_list|()
control|)
block|{
name|InternalSearchHit
name|internalHit
init|=
operator|(
name|InternalSearchHit
operator|)
name|hit
decl_stmt|;
name|DocumentMapper
name|documentMapper
init|=
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|type
argument_list|(
name|internalHit
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
name|internalHit
operator|.
name|docId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchContextHighlight
operator|.
name|ParsedHighlightField
name|parsedHighlightField
range|:
name|context
operator|.
name|highlight
argument_list|()
operator|.
name|fields
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|parsedHighlightField
operator|.
name|field
argument_list|()
decl_stmt|;
name|FieldMapper
name|mapper
init|=
name|documentMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
name|parsedHighlightField
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
name|fieldName
operator|=
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
expr_stmt|;
block|}
name|Tuple
argument_list|<
name|Integer
argument_list|,
name|FastVectorHighlighter
argument_list|>
name|highlighterTuple
init|=
name|getHighlighter
argument_list|(
name|highlighterMap
argument_list|,
name|parsedHighlightField
operator|.
name|settings
argument_list|()
argument_list|)
decl_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
name|highlighterTuple
operator|.
name|v2
argument_list|()
decl_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|getFieldQuery
argument_list|(
name|highlighterTuple
operator|.
name|v1
argument_list|()
argument_list|,
name|fieldQueryMap
argument_list|,
name|highlighter
argument_list|,
name|context
operator|.
name|query
argument_list|()
argument_list|,
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|parsedHighlightField
operator|.
name|settings
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|fragments
decl_stmt|;
try|try
block|{
name|fragments
operator|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|parsedHighlightField
operator|.
name|settings
argument_list|()
operator|.
name|fragmentCharSize
argument_list|()
argument_list|,
name|parsedHighlightField
operator|.
name|settings
argument_list|()
operator|.
name|numberOfFragments
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FetchPhaseExecutionException
argument_list|(
name|context
argument_list|,
literal|"Failed to highlight field ["
operator|+
name|parsedHighlightField
operator|.
name|field
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|HighlightField
name|highlightField
init|=
operator|new
name|HighlightField
argument_list|(
name|parsedHighlightField
operator|.
name|field
argument_list|()
argument_list|,
name|fragments
argument_list|)
decl_stmt|;
name|highlightFields
operator|.
name|put
argument_list|(
name|highlightField
operator|.
name|name
argument_list|()
argument_list|,
name|highlightField
argument_list|)
expr_stmt|;
block|}
name|internalHit
operator|.
name|highlightFields
argument_list|(
name|highlightFields
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFieldQuery
specifier|private
name|FieldQuery
name|getFieldQuery
parameter_list|(
name|int
name|key
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|FieldQuery
argument_list|>
name|fieldQueryMap
parameter_list|,
name|FastVectorHighlighter
name|highlighter
parameter_list|,
name|Query
name|query
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|SearchContextHighlight
operator|.
name|ParsedHighlightSettings
name|settings
parameter_list|)
block|{
name|FieldQuery
name|fq
init|=
name|fieldQueryMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|fq
operator|==
literal|null
condition|)
block|{
name|CustomFieldQuery
operator|.
name|reader
operator|.
name|set
argument_list|(
name|indexReader
argument_list|)
expr_stmt|;
name|CustomFieldQuery
operator|.
name|highlightFilters
operator|.
name|set
argument_list|(
name|settings
operator|.
name|highlightFilter
argument_list|()
argument_list|)
expr_stmt|;
name|fq
operator|=
operator|new
name|CustomFieldQuery
argument_list|(
name|query
argument_list|,
name|highlighter
argument_list|)
expr_stmt|;
name|fieldQueryMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|fq
argument_list|)
expr_stmt|;
block|}
return|return
name|fq
return|;
block|}
DECL|method|getHighlighter
specifier|private
name|Tuple
argument_list|<
name|Integer
argument_list|,
name|FastVectorHighlighter
argument_list|>
name|getHighlighter
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|FastVectorHighlighter
argument_list|>
name|highlighterMap
parameter_list|,
name|SearchContextHighlight
operator|.
name|ParsedHighlightSettings
name|settings
parameter_list|)
block|{
name|FragListBuilder
name|fragListBuilder
decl_stmt|;
name|FragmentsBuilder
name|fragmentsBuilder
decl_stmt|;
if|if
condition|(
operator|!
name|settings
operator|.
name|fragmentsAllowed
argument_list|()
condition|)
block|{
name|fragListBuilder
operator|=
operator|new
name|SingleFragListBuilder
argument_list|()
expr_stmt|;
name|fragmentsBuilder
operator|=
operator|new
name|SimpleFragmentsBuilder
argument_list|(
name|settings
operator|.
name|preTags
argument_list|()
argument_list|,
name|settings
operator|.
name|postTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fragListBuilder
operator|=
operator|new
name|SimpleFragListBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|scoreOrdered
argument_list|()
condition|)
block|{
name|fragmentsBuilder
operator|=
operator|new
name|ScoreOrderFragmentsBuilder
argument_list|(
name|settings
operator|.
name|preTags
argument_list|()
argument_list|,
name|settings
operator|.
name|postTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fragmentsBuilder
operator|=
operator|new
name|SimpleFragmentsBuilder
argument_list|(
name|settings
operator|.
name|preTags
argument_list|()
argument_list|,
name|settings
operator|.
name|postTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// highlighter key is determined by tags and FragList and Fragment builder classes.
name|String
index|[]
name|mask
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|settings
operator|.
name|preTags
argument_list|()
argument_list|,
name|settings
operator|.
name|preTags
argument_list|()
operator|.
name|length
operator|+
name|settings
operator|.
name|postTags
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|settings
operator|.
name|postTags
argument_list|()
argument_list|,
literal|0
argument_list|,
name|mask
argument_list|,
name|settings
operator|.
name|preTags
argument_list|()
operator|.
name|length
argument_list|,
name|settings
operator|.
name|postTags
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|key
init|=
operator|(
name|Arrays
operator|.
name|toString
argument_list|(
name|mask
argument_list|)
operator|+
name|fragListBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
name|fragmentsBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|)
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|FastVectorHighlighter
name|highlighter
init|=
name|highlighterMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|highlighter
operator|==
literal|null
condition|)
block|{
name|highlighter
operator|=
operator|new
name|FastVectorHighlighter
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|fragListBuilder
argument_list|,
name|fragmentsBuilder
argument_list|)
expr_stmt|;
name|highlighterMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|highlighter
argument_list|)
expr_stmt|;
block|}
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|key
argument_list|,
name|highlighter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

