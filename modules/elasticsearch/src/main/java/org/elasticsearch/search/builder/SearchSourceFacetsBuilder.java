begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.builder
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|xcontent
operator|.
name|XContentQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|histogram
operator|.
name|HistogramFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|histogram
operator|.
name|HistogramFacetCollectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|query
operator|.
name|QueryFacetCollectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|statistical
operator|.
name|StatisticalFacetCollectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|terms
operator|.
name|TermsFacetCollectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|xcontent
operator|.
name|builder
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A search source facets builder.  *  * @author kimchy (shay.banon)  * @see SearchSourceBuilder#facets(SearchSourceFacetsBuilder)  */
end_comment

begin_class
DECL|class|SearchSourceFacetsBuilder
specifier|public
class|class
name|SearchSourceFacetsBuilder
implements|implements
name|ToXContent
block|{
DECL|field|queryFacets
specifier|private
name|List
argument_list|<
name|BuilderQueryFacet
argument_list|>
name|queryFacets
decl_stmt|;
DECL|field|termsFacets
specifier|private
name|List
argument_list|<
name|BuilderTermsFacet
argument_list|>
name|termsFacets
decl_stmt|;
DECL|field|statisticalFacets
specifier|private
name|List
argument_list|<
name|BuilderStatisticalFacet
argument_list|>
name|statisticalFacets
decl_stmt|;
DECL|field|histogramFacets
specifier|private
name|List
argument_list|<
name|BuilderHistogramFacet
argument_list|>
name|histogramFacets
decl_stmt|;
comment|/**      * Adds a query facet (which results in a count facet returned).      *      * @param name  The logical name of the facet, it will be returned under the name      * @param query The query facet      */
DECL|method|queryFacet
specifier|public
name|SearchSourceFacetsBuilder
name|queryFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentQueryBuilder
name|query
parameter_list|)
block|{
if|if
condition|(
name|queryFacets
operator|==
literal|null
condition|)
block|{
name|queryFacets
operator|=
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|queryFacets
operator|.
name|add
argument_list|(
operator|new
name|BuilderQueryFacet
argument_list|(
name|name
argument_list|,
name|query
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a query facet (which results in a count facet returned) with an option to      * be global on the index or bounded by the search query.      *      * @param name  The logical name of the facet, it will be returned under the name      * @param query The query facet      */
DECL|method|queryFacetGlobal
specifier|public
name|SearchSourceFacetsBuilder
name|queryFacetGlobal
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentQueryBuilder
name|query
parameter_list|)
block|{
if|if
condition|(
name|queryFacets
operator|==
literal|null
condition|)
block|{
name|queryFacets
operator|=
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|queryFacets
operator|.
name|add
argument_list|(
operator|new
name|BuilderQueryFacet
argument_list|(
name|name
argument_list|,
name|query
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|termsFacet
specifier|public
name|SearchSourceFacetsBuilder
name|termsFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|termsFacets
operator|==
literal|null
condition|)
block|{
name|termsFacets
operator|=
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|termsFacets
operator|.
name|add
argument_list|(
operator|new
name|BuilderTermsFacet
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|termsFacetGlobal
specifier|public
name|SearchSourceFacetsBuilder
name|termsFacetGlobal
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|termsFacets
operator|==
literal|null
condition|)
block|{
name|termsFacets
operator|=
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|termsFacets
operator|.
name|add
argument_list|(
operator|new
name|BuilderTermsFacet
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|,
name|size
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|statisticalFacet
specifier|public
name|SearchSourceFacetsBuilder
name|statisticalFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|statisticalFacets
operator|==
literal|null
condition|)
block|{
name|statisticalFacets
operator|=
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|statisticalFacets
operator|.
name|add
argument_list|(
operator|new
name|BuilderStatisticalFacet
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|statisticalFacetGlobal
specifier|public
name|SearchSourceFacetsBuilder
name|statisticalFacetGlobal
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|statisticalFacets
operator|==
literal|null
condition|)
block|{
name|statisticalFacets
operator|=
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|statisticalFacets
operator|.
name|add
argument_list|(
operator|new
name|BuilderStatisticalFacet
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|histogramFacet
specifier|public
name|SearchSourceFacetsBuilder
name|histogramFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
return|return
name|histogramFacet
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|,
name|interval
argument_list|,
name|HistogramFacet
operator|.
name|ComparatorType
operator|.
name|VALUE
argument_list|)
return|;
block|}
DECL|method|histogramFacet
specifier|public
name|SearchSourceFacetsBuilder
name|histogramFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|interval
parameter_list|,
name|HistogramFacet
operator|.
name|ComparatorType
name|comparatorType
parameter_list|)
block|{
if|if
condition|(
name|histogramFacets
operator|==
literal|null
condition|)
block|{
name|histogramFacets
operator|=
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|histogramFacets
operator|.
name|add
argument_list|(
operator|new
name|BuilderHistogramFacet
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|,
name|interval
argument_list|,
name|comparatorType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|histogramFacetGlobal
specifier|public
name|SearchSourceFacetsBuilder
name|histogramFacetGlobal
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
return|return
name|histogramFacet
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|,
name|interval
argument_list|,
name|HistogramFacet
operator|.
name|ComparatorType
operator|.
name|VALUE
argument_list|)
return|;
block|}
DECL|method|histogramFacetGlobal
specifier|public
name|SearchSourceFacetsBuilder
name|histogramFacetGlobal
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|interval
parameter_list|,
name|HistogramFacet
operator|.
name|ComparatorType
name|comparatorType
parameter_list|)
block|{
if|if
condition|(
name|histogramFacets
operator|==
literal|null
condition|)
block|{
name|histogramFacets
operator|=
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|histogramFacets
operator|.
name|add
argument_list|(
operator|new
name|BuilderHistogramFacet
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|,
name|interval
argument_list|,
name|comparatorType
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|toXContent
annotation|@
name|Override
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|queryFacets
operator|==
literal|null
operator|&&
name|termsFacets
operator|==
literal|null
operator|&&
name|statisticalFacets
operator|==
literal|null
operator|&&
name|histogramFacets
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"facets"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|queryFacets
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BuilderQueryFacet
name|queryFacet
range|:
name|queryFacets
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|queryFacet
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|QueryFacetCollectorParser
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|queryFacet
operator|.
name|queryBuilder
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryFacet
operator|.
name|global
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"global"
argument_list|,
name|queryFacet
operator|.
name|global
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|termsFacets
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BuilderTermsFacet
name|termsFacet
range|:
name|termsFacets
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|termsFacet
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|TermsFacetCollectorParser
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|termsFacet
operator|.
name|fieldName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"size"
argument_list|,
name|termsFacet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|termsFacet
operator|.
name|global
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"global"
argument_list|,
name|termsFacet
operator|.
name|global
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|statisticalFacets
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BuilderStatisticalFacet
name|statisticalFacet
range|:
name|statisticalFacets
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|statisticalFacet
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|StatisticalFacetCollectorParser
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|statisticalFacet
operator|.
name|fieldName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|statisticalFacet
operator|.
name|global
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"global"
argument_list|,
name|statisticalFacet
operator|.
name|global
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|histogramFacets
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BuilderHistogramFacet
name|histogramFacet
range|:
name|histogramFacets
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|histogramFacet
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|HistogramFacetCollectorParser
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|histogramFacet
operator|.
name|fieldName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"interval"
argument_list|,
name|histogramFacet
operator|.
name|interval
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"comparator"
argument_list|,
name|histogramFacet
operator|.
name|comparatorType
argument_list|()
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|histogramFacet
operator|.
name|global
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"global"
argument_list|,
name|histogramFacet
operator|.
name|global
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|class|BuilderTermsFacet
specifier|private
specifier|static
class|class
name|BuilderTermsFacet
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|global
specifier|private
specifier|final
name|Boolean
name|global
decl_stmt|;
DECL|method|BuilderTermsFacet
specifier|private
name|BuilderTermsFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|size
parameter_list|,
name|Boolean
name|global
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|global
operator|=
name|global
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|global
specifier|public
name|Boolean
name|global
parameter_list|()
block|{
return|return
name|global
return|;
block|}
block|}
DECL|class|BuilderQueryFacet
specifier|private
specifier|static
class|class
name|BuilderQueryFacet
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|queryBuilder
specifier|private
specifier|final
name|XContentQueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|global
specifier|private
specifier|final
name|Boolean
name|global
decl_stmt|;
DECL|method|BuilderQueryFacet
specifier|private
name|BuilderQueryFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentQueryBuilder
name|queryBuilder
parameter_list|,
name|Boolean
name|global
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|queryBuilder
operator|=
name|queryBuilder
expr_stmt|;
name|this
operator|.
name|global
operator|=
name|global
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|queryBuilder
specifier|public
name|XContentQueryBuilder
name|queryBuilder
parameter_list|()
block|{
return|return
name|queryBuilder
return|;
block|}
DECL|method|global
specifier|public
name|Boolean
name|global
parameter_list|()
block|{
return|return
name|this
operator|.
name|global
return|;
block|}
block|}
DECL|class|BuilderStatisticalFacet
specifier|private
specifier|static
class|class
name|BuilderStatisticalFacet
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|global
specifier|private
specifier|final
name|Boolean
name|global
decl_stmt|;
DECL|method|BuilderStatisticalFacet
specifier|private
name|BuilderStatisticalFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Boolean
name|global
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|global
operator|=
name|global
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|global
specifier|public
name|Boolean
name|global
parameter_list|()
block|{
return|return
name|this
operator|.
name|global
return|;
block|}
block|}
DECL|class|BuilderHistogramFacet
specifier|private
specifier|static
class|class
name|BuilderHistogramFacet
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|interval
specifier|private
specifier|final
name|long
name|interval
decl_stmt|;
DECL|field|comparatorType
specifier|private
specifier|final
name|HistogramFacet
operator|.
name|ComparatorType
name|comparatorType
decl_stmt|;
DECL|field|global
specifier|private
specifier|final
name|Boolean
name|global
decl_stmt|;
DECL|method|BuilderHistogramFacet
specifier|private
name|BuilderHistogramFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|interval
parameter_list|,
name|Boolean
name|global
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|,
name|interval
argument_list|,
name|HistogramFacet
operator|.
name|ComparatorType
operator|.
name|VALUE
argument_list|,
name|global
argument_list|)
expr_stmt|;
block|}
DECL|method|BuilderHistogramFacet
specifier|private
name|BuilderHistogramFacet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|interval
parameter_list|,
name|HistogramFacet
operator|.
name|ComparatorType
name|comparatorType
parameter_list|,
name|Boolean
name|global
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
name|this
operator|.
name|comparatorType
operator|=
name|comparatorType
expr_stmt|;
name|this
operator|.
name|global
operator|=
name|global
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|interval
specifier|public
name|long
name|interval
parameter_list|()
block|{
return|return
name|this
operator|.
name|interval
return|;
block|}
DECL|method|comparatorType
specifier|public
name|HistogramFacet
operator|.
name|ComparatorType
name|comparatorType
parameter_list|()
block|{
return|return
name|this
operator|.
name|comparatorType
return|;
block|}
DECL|method|global
specifier|public
name|Boolean
name|global
parameter_list|()
block|{
return|return
name|this
operator|.
name|global
return|;
block|}
block|}
block|}
end_class

end_unit

