begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.facets
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|geodistance
operator|.
name|GeoDistanceFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|histogram
operator|.
name|HistogramFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|query
operator|.
name|QueryFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|statistical
operator|.
name|StatisticalFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|terms
operator|.
name|TermsFacet
import|;
end_import

begin_comment
comment|/**  * A search facet.  *  * @author kimchy (shay.banon)  */
end_comment

begin_interface
DECL|interface|Facet
specifier|public
interface|interface
name|Facet
block|{
comment|/**      * The type of the facet.      */
DECL|enum|Type
enum|enum
name|Type
block|{
comment|/**          * Terms facet type, matching {@link TermsFacet}.          */
DECL|enum constant|TERMS
name|TERMS
argument_list|(
literal|0
argument_list|,
name|TermsFacet
operator|.
name|class
argument_list|)
block|,
comment|/**          * Query facet type, matching {@link QueryFacet}.          */
DECL|enum constant|QUERY
name|QUERY
argument_list|(
literal|1
argument_list|,
name|QueryFacet
operator|.
name|class
argument_list|)
block|,
comment|/**          * Statistical facet type, matching {@link StatisticalFacet}.          */
DECL|enum constant|STATISTICAL
name|STATISTICAL
argument_list|(
literal|2
argument_list|,
name|StatisticalFacet
operator|.
name|class
argument_list|)
block|,
comment|/**          * Histogram facet type, matching {@link HistogramFacet}.          */
DECL|enum constant|HISTOGRAM
name|HISTOGRAM
argument_list|(
literal|3
argument_list|,
name|HistogramFacet
operator|.
name|class
argument_list|)
block|,
comment|/**          * Geo Distance facet type, matching {@link GeoDistanceFacet}.          */
DECL|enum constant|GEO_DISTANCE
name|GEO_DISTANCE
argument_list|(
literal|4
argument_list|,
name|GeoDistanceFacet
operator|.
name|class
argument_list|)
block|;
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|type
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Facet
argument_list|>
name|type
decl_stmt|;
DECL|method|Type
name|Type
parameter_list|(
name|int
name|id
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Facet
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|int
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**          * The facet class type.          */
DECL|method|type
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Facet
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
comment|/**          * The facet class type.          */
DECL|method|getType
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Facet
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
argument_list|()
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|Type
name|fromId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
return|return
name|TERMS
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|1
condition|)
block|{
return|return
name|QUERY
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|2
condition|)
block|{
return|return
name|STATISTICAL
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|3
condition|)
block|{
return|return
name|HISTOGRAM
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|4
condition|)
block|{
return|return
name|GEO_DISTANCE
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No match for id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * The "logical" name of the search facet.      */
DECL|method|name
name|String
name|name
parameter_list|()
function_decl|;
comment|/**      * The "logical" name of the search facet.      */
DECL|method|getName
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**      * The type of the facet.      */
DECL|method|type
name|Type
name|type
parameter_list|()
function_decl|;
comment|/**      * The type of the facet.      */
DECL|method|getType
name|Type
name|getType
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

