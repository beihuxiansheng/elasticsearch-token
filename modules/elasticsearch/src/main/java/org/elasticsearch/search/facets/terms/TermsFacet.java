begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.facets.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facets
operator|.
name|Facet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_interface
DECL|interface|TermsFacet
specifier|public
interface|interface
name|TermsFacet
extends|extends
name|Facet
extends|,
name|Iterable
argument_list|<
name|TermsFacet
operator|.
name|Entry
argument_list|>
block|{
DECL|enum|ComparatorType
specifier|public
specifier|static
enum|enum
name|ComparatorType
block|{
DECL|enum constant|COUNT
name|COUNT
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
name|o1
parameter_list|,
name|Entry
name|o2
parameter_list|)
block|{
name|int
name|i
init|=
name|o2
operator|.
name|count
argument_list|()
operator|-
name|o1
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|i
operator|=
name|o2
operator|.
name|term
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o1
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|i
operator|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|o2
argument_list|)
operator|-
name|System
operator|.
name|identityHashCode
argument_list|(
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
block|}
argument_list|)
block|,
DECL|enum constant|TERM
name|TERM
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
name|o1
parameter_list|,
name|Entry
name|o2
parameter_list|)
block|{
name|int
name|i
init|=
name|o2
operator|.
name|term
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o1
operator|.
name|term
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|i
operator|=
name|o2
operator|.
name|count
argument_list|()
operator|-
name|o1
operator|.
name|count
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|i
operator|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|o2
argument_list|)
operator|-
name|System
operator|.
name|identityHashCode
argument_list|(
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
block|}
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|Entry
argument_list|>
name|comparator
decl_stmt|;
DECL|method|ComparatorType
name|ComparatorType
parameter_list|(
name|byte
name|id
parameter_list|,
name|Comparator
argument_list|<
name|Entry
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|comparator
specifier|public
name|Comparator
argument_list|<
name|Entry
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|ComparatorType
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
return|return
name|COUNT
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|1
condition|)
block|{
return|return
name|TERM
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No type argument match for multi count comparator ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|class|Entry
specifier|public
class|class
name|Entry
block|{
DECL|field|term
specifier|private
name|String
name|term
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
DECL|method|term
specifier|public
name|String
name|term
parameter_list|()
block|{
return|return
name|term
return|;
block|}
DECL|method|getTerm
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|term
return|;
block|}
DECL|method|count
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|getCount
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
argument_list|()
return|;
block|}
block|}
DECL|method|entries
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|()
function_decl|;
DECL|method|getEntries
name|List
argument_list|<
name|Entry
argument_list|>
name|getEntries
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

