begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|SearchContextException
specifier|public
class|class
name|SearchContextException
extends|extends
name|SearchException
block|{
DECL|method|SearchContextException
specifier|public
name|SearchContextException
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|context
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|buildMessage
argument_list|(
name|context
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|SearchContextException
specifier|public
name|SearchContextException
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|super
argument_list|(
name|context
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|buildMessage
argument_list|(
name|context
argument_list|,
name|msg
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|buildMessage
specifier|private
specifier|static
name|String
name|buildMessage
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|context
operator|.
name|shardTarget
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]["
argument_list|)
operator|.
name|append
argument_list|(
name|context
operator|.
name|shardTarget
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|parsedQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"query["
argument_list|)
operator|.
name|append
argument_list|(
name|context
operator|.
name|parsedQuery
argument_list|()
operator|.
name|query
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"],"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"query[_failed_to_string_],"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"from["
argument_list|)
operator|.
name|append
argument_list|(
name|context
operator|.
name|from
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"],size["
argument_list|)
operator|.
name|append
argument_list|(
name|context
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|sort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",sort["
argument_list|)
operator|.
name|append
argument_list|(
name|context
operator|.
name|sort
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|msg
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

