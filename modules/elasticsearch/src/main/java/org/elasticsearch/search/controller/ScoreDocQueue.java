begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.controller
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|controller
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_comment
comment|/**  *<p>Same as lucene {@link org.apache.lucene.search.HitQueue}.  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|ScoreDocQueue
specifier|public
class|class
name|ScoreDocQueue
extends|extends
name|PriorityQueue
argument_list|<
name|ShardScoreDoc
argument_list|>
block|{
DECL|method|ScoreDocQueue
specifier|public
name|ScoreDocQueue
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|initialize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|lessThan
specifier|protected
specifier|final
name|boolean
name|lessThan
parameter_list|(
name|ShardScoreDoc
name|hitA
parameter_list|,
name|ShardScoreDoc
name|hitB
parameter_list|)
block|{
if|if
condition|(
name|hitA
operator|.
name|score
operator|==
name|hitB
operator|.
name|score
condition|)
block|{
name|int
name|c
init|=
name|hitA
operator|.
name|shardTarget
argument_list|()
operator|.
name|compareTo
argument_list|(
name|hitB
operator|.
name|shardTarget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
return|return
name|hitA
operator|.
name|doc
operator|>
name|hitB
operator|.
name|doc
return|;
block|}
return|return
name|c
operator|>
literal|0
return|;
block|}
else|else
block|{
return|return
name|hitA
operator|.
name|score
operator|<
name|hitB
operator|.
name|score
return|;
block|}
block|}
block|}
end_class

end_unit

