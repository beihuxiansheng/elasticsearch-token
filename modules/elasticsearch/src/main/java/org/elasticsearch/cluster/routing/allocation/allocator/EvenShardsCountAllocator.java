begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.allocator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|MutableShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|FailedRerouteAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|StartedRerouteAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|EvenShardsCountAllocator
specifier|public
class|class
name|EvenShardsCountAllocator
extends|extends
name|AbstractComponent
implements|implements
name|ShardsAllocator
block|{
DECL|method|EvenShardsCountAllocator
annotation|@
name|Inject
specifier|public
name|EvenShardsCountAllocator
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
DECL|method|applyStartedShards
annotation|@
name|Override
specifier|public
name|void
name|applyStartedShards
parameter_list|(
name|StartedRerouteAllocation
name|allocation
parameter_list|)
block|{     }
DECL|method|applyFailedShards
annotation|@
name|Override
specifier|public
name|void
name|applyFailedShards
parameter_list|(
name|FailedRerouteAllocation
name|allocation
parameter_list|)
block|{     }
DECL|method|allocateUnassigned
annotation|@
name|Override
specifier|public
name|boolean
name|allocateUnassigned
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RoutingNode
argument_list|>
name|nodes
init|=
name|routingNodes
operator|.
name|sortedNodesLeastToHigh
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|MutableShardRouting
argument_list|>
name|unassignedIterator
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|lastNode
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|unassignedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|shard
init|=
name|unassignedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// do the allocation, finding the least "busy" node
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RoutingNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|lastNode
argument_list|)
decl_stmt|;
name|lastNode
operator|++
expr_stmt|;
if|if
condition|(
name|lastNode
operator|==
name|nodes
operator|.
name|size
argument_list|()
condition|)
block|{
name|lastNode
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|shard
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
operator|.
name|allocate
argument_list|()
condition|)
block|{
name|int
name|numberOfShardsToAllocate
init|=
name|routingNodes
operator|.
name|requiredAverageNumberOfShardsPerNode
argument_list|()
operator|-
name|node
operator|.
name|shards
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfShardsToAllocate
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
name|node
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// allocate all the unassigned shards above the average per node.
for|for
control|(
name|Iterator
argument_list|<
name|MutableShardRouting
argument_list|>
name|it
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MutableShardRouting
name|shard
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// go over the nodes and try and allocate the remaining ones
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|routingNodes
operator|.
name|sortedNodesLeastToHigh
argument_list|()
control|)
block|{
if|if
condition|(
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|shard
argument_list|,
name|routingNode
argument_list|,
name|allocation
argument_list|)
operator|.
name|allocate
argument_list|()
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|routingNode
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|rebalance
annotation|@
name|Override
specifier|public
name|boolean
name|rebalance
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|RoutingNode
argument_list|>
name|sortedNodesLeastToHigh
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|sortedNodesLeastToHigh
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortedNodesLeastToHigh
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|lowIndex
init|=
literal|0
decl_stmt|;
name|int
name|highIndex
init|=
name|sortedNodesLeastToHigh
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|boolean
name|relocationPerformed
decl_stmt|;
do|do
block|{
name|relocationPerformed
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|lowIndex
operator|!=
name|highIndex
condition|)
block|{
name|RoutingNode
name|lowRoutingNode
init|=
name|sortedNodesLeastToHigh
operator|.
name|get
argument_list|(
name|lowIndex
argument_list|)
decl_stmt|;
name|RoutingNode
name|highRoutingNode
init|=
name|sortedNodesLeastToHigh
operator|.
name|get
argument_list|(
name|highIndex
argument_list|)
decl_stmt|;
name|int
name|averageNumOfShards
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|requiredAverageNumberOfShardsPerNode
argument_list|()
decl_stmt|;
comment|// only active shards can be removed so must count only active ones.
if|if
condition|(
name|highRoutingNode
operator|.
name|numberOfOwningShards
argument_list|()
operator|<=
name|averageNumOfShards
condition|)
block|{
name|highIndex
operator|--
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|lowRoutingNode
operator|.
name|shards
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|averageNumOfShards
condition|)
block|{
name|lowIndex
operator|++
expr_stmt|;
continue|continue;
block|}
name|boolean
name|relocated
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MutableShardRouting
argument_list|>
name|startedShards
init|=
name|highRoutingNode
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
decl_stmt|;
for|for
control|(
name|MutableShardRouting
name|startedShard
range|:
name|startedShards
control|)
block|{
if|if
condition|(
operator|!
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canRebalance
argument_list|(
name|startedShard
argument_list|,
name|allocation
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|startedShard
argument_list|,
name|lowRoutingNode
argument_list|,
name|allocation
argument_list|)
operator|.
name|allocate
argument_list|()
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|lowRoutingNode
operator|.
name|add
argument_list|(
operator|new
name|MutableShardRouting
argument_list|(
name|startedShard
operator|.
name|index
argument_list|()
argument_list|,
name|startedShard
operator|.
name|id
argument_list|()
argument_list|,
name|lowRoutingNode
operator|.
name|nodeId
argument_list|()
argument_list|,
name|startedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|startedShard
operator|.
name|primary
argument_list|()
argument_list|,
name|INITIALIZING
argument_list|,
name|startedShard
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|startedShard
operator|.
name|relocate
argument_list|(
name|lowRoutingNode
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|relocated
operator|=
literal|true
expr_stmt|;
name|relocationPerformed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|relocated
condition|)
block|{
name|highIndex
operator|--
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|relocationPerformed
condition|)
do|;
return|return
name|changed
return|;
block|}
DECL|method|move
annotation|@
name|Override
specifier|public
name|boolean
name|move
parameter_list|(
name|MutableShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
assert|assert
name|shardRouting
operator|.
name|started
argument_list|()
assert|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|RoutingNode
argument_list|>
name|sortedNodesLeastToHigh
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|sortedNodesLeastToHigh
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortedNodesLeastToHigh
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|RoutingNode
name|nodeToCheck
range|:
name|sortedNodesLeastToHigh
control|)
block|{
comment|// check if its the node we are moving from, no sense to check on it
if|if
condition|(
name|nodeToCheck
operator|.
name|nodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|nodeId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|shardRouting
argument_list|,
name|nodeToCheck
argument_list|,
name|allocation
argument_list|)
operator|.
name|allocate
argument_list|()
condition|)
block|{
name|nodeToCheck
operator|.
name|add
argument_list|(
operator|new
name|MutableShardRouting
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|id
argument_list|()
argument_list|,
name|nodeToCheck
operator|.
name|nodeId
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|primary
argument_list|()
argument_list|,
name|INITIALIZING
argument_list|,
name|shardRouting
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|shardRouting
operator|.
name|relocate
argument_list|(
name|nodeToCheck
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|changed
return|;
block|}
block|}
end_class

end_unit

