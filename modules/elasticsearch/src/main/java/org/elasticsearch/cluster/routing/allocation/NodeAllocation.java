begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_comment
comment|/**  * A pluggable logic allowing to control if allocation of a shard is allowed on a specific node.  *  * @author kimchy (shay.banon)  */
end_comment

begin_interface
DECL|interface|NodeAllocation
specifier|public
interface|interface
name|NodeAllocation
block|{
DECL|enum|Decision
enum|enum
name|Decision
block|{
DECL|enum constant|ALLOWED
name|ALLOWED
block|{
annotation|@
name|Override
name|boolean
name|allocate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|,
DECL|enum constant|DISALLOWED
name|DISALLOWED
block|{
annotation|@
name|Override
name|boolean
name|allocate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|;
DECL|method|allocate
specifier|abstract
name|boolean
name|allocate
parameter_list|()
function_decl|;
block|}
DECL|method|canAllocate
name|Decision
name|canAllocate
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingNodes
name|routingNodes
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

