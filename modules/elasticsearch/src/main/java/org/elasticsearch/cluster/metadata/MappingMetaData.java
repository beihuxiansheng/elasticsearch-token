begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|MappingMetaData
specifier|public
class|class
name|MappingMetaData
block|{
DECL|class|Routing
specifier|public
specifier|static
class|class
name|Routing
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|Routing
name|EMPTY
init|=
operator|new
name|Routing
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|required
specifier|private
specifier|final
name|boolean
name|required
decl_stmt|;
DECL|method|Routing
specifier|public
name|Routing
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
block|}
DECL|method|required
specifier|public
name|boolean
name|required
parameter_list|()
block|{
return|return
name|required
return|;
block|}
block|}
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|CompressedString
name|source
decl_stmt|;
DECL|field|routing
specifier|private
specifier|final
name|Routing
name|routing
decl_stmt|;
DECL|method|MappingMetaData
specifier|public
name|MappingMetaData
parameter_list|(
name|DocumentMapper
name|docMapper
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|docMapper
operator|.
name|type
argument_list|()
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|docMapper
operator|.
name|mappingSource
argument_list|()
expr_stmt|;
name|this
operator|.
name|routing
operator|=
operator|new
name|Routing
argument_list|(
name|docMapper
operator|.
name|routingFieldMapper
argument_list|()
operator|.
name|required
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|MappingMetaData
specifier|public
name|MappingMetaData
parameter_list|(
name|String
name|type
parameter_list|,
name|CompressedString
name|source
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|Routing
operator|.
name|EMPTY
expr_stmt|;
block|}
DECL|method|MappingMetaData
name|MappingMetaData
parameter_list|(
name|String
name|type
parameter_list|,
name|CompressedString
name|source
parameter_list|,
name|Routing
name|routing
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|source
specifier|public
name|CompressedString
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|routing
specifier|public
name|Routing
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|routing
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|MappingMetaData
name|mappingMd
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|mappingMd
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|mappingMd
operator|.
name|source
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// routing
name|out
operator|.
name|writeBoolean
argument_list|(
name|mappingMd
operator|.
name|routing
argument_list|()
operator|.
name|required
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|MappingMetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|CompressedString
name|source
init|=
name|CompressedString
operator|.
name|readCompressedString
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// routing
name|Routing
name|routing
init|=
operator|new
name|Routing
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|MappingMetaData
argument_list|(
name|type
argument_list|,
name|source
argument_list|,
name|routing
argument_list|)
return|;
block|}
block|}
end_class

end_unit

