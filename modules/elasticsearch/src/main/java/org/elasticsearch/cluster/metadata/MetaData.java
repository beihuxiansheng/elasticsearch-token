begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this   * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Immutable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|JsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|StringJsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|ToJson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|MapBuilder
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
annotation|@
name|Immutable
DECL|class|MetaData
specifier|public
class|class
name|MetaData
implements|implements
name|Iterable
argument_list|<
name|IndexMetaData
argument_list|>
block|{
DECL|field|EMPTY_META_DATA
specifier|public
specifier|static
name|MetaData
name|EMPTY_META_DATA
init|=
name|newMetaDataBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
decl_stmt|;
comment|// limits the number of shards per node
DECL|field|maxNumberOfShardsPerNode
specifier|private
specifier|final
name|int
name|maxNumberOfShardsPerNode
decl_stmt|;
DECL|field|totalNumberOfShards
specifier|private
specifier|final
specifier|transient
name|int
name|totalNumberOfShards
decl_stmt|;
DECL|method|MetaData
specifier|private
name|MetaData
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
parameter_list|,
name|int
name|maxNumberOfShardsPerNode
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxNumberOfShardsPerNode
operator|=
name|maxNumberOfShardsPerNode
expr_stmt|;
name|int
name|totalNumberOfShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|totalNumberOfShards
operator|+=
name|indexMetaData
operator|.
name|totalNumberOfShards
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|totalNumberOfShards
operator|=
name|totalNumberOfShards
expr_stmt|;
block|}
DECL|method|hasIndex
specifier|public
name|boolean
name|hasIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|index
specifier|public
name|IndexMetaData
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|indices
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
parameter_list|()
block|{
return|return
name|this
operator|.
name|indices
return|;
block|}
DECL|method|maxNumberOfShardsPerNode
specifier|public
name|int
name|maxNumberOfShardsPerNode
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxNumberOfShardsPerNode
return|;
block|}
DECL|method|totalNumberOfShards
specifier|public
name|int
name|totalNumberOfShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalNumberOfShards
return|;
block|}
DECL|method|iterator
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|IndexMetaData
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|indices
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|newMetaDataBuilder
specifier|public
specifier|static
name|Builder
name|newMetaDataBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
comment|// limits the number of shards per node
DECL|field|maxNumberOfShardsPerNode
specifier|private
name|int
name|maxNumberOfShardsPerNode
init|=
literal|100
decl_stmt|;
DECL|field|indices
specifier|private
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|indexMetaDataBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|indices
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|remove
specifier|public
name|Builder
name|remove
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|indices
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|metaData
specifier|public
name|Builder
name|metaData
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
name|indices
operator|.
name|putAll
argument_list|(
name|metaData
operator|.
name|indices
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxNumberOfShardsPerNode
specifier|public
name|Builder
name|maxNumberOfShardsPerNode
parameter_list|(
name|int
name|maxNumberOfShardsPerNode
parameter_list|)
block|{
name|this
operator|.
name|maxNumberOfShardsPerNode
operator|=
name|maxNumberOfShardsPerNode
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|MetaData
name|build
parameter_list|()
block|{
return|return
operator|new
name|MetaData
argument_list|(
name|indices
operator|.
name|immutableMap
argument_list|()
argument_list|,
name|maxNumberOfShardsPerNode
argument_list|)
return|;
block|}
DECL|method|toJson
specifier|public
specifier|static
name|String
name|toJson
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|StringJsonBuilder
name|builder
init|=
name|JsonBuilder
operator|.
name|stringJsonBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toJson
argument_list|(
name|metaData
argument_list|,
name|builder
argument_list|,
name|ToJson
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
DECL|method|toJson
specifier|public
specifier|static
name|void
name|toJson
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|JsonBuilder
name|builder
parameter_list|,
name|ToJson
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"meta-data"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"maxNumberOfShardsPerNode"
argument_list|,
name|metaData
operator|.
name|maxNumberOfShardsPerNode
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
control|)
block|{
name|IndexMetaData
operator|.
name|Builder
operator|.
name|toJson
argument_list|(
name|indexMetaData
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromJson
specifier|public
specifier|static
name|MetaData
name|fromJson
parameter_list|(
name|JsonParser
name|jp
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|globalSettings
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|JsonToken
name|token
init|=
name|jp
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|jp
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|jp
operator|.
name|getCurrentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
literal|"indices"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|jp
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|Builder
operator|.
name|fromJson
argument_list|(
name|jp
argument_list|,
name|globalSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|JsonToken
operator|.
name|VALUE_NUMBER_INT
condition|)
block|{
if|if
condition|(
literal|"maxNumberOfShardsPerNode"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|maxNumberOfShardsPerNode
argument_list|(
name|jp
operator|.
name|getIntValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|MetaData
name|readFrom
parameter_list|(
name|DataInput
name|in
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|globalSettings
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|maxNumberOfShardsPerNode
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|,
name|globalSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|metaData
operator|.
name|maxNumberOfShardsPerNode
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|metaData
operator|.
name|indices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
control|)
block|{
name|IndexMetaData
operator|.
name|Builder
operator|.
name|writeTo
argument_list|(
name|indexMetaData
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

