begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this   * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|set
operator|.
name|hash
operator|.
name|THashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Immutable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexMissingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
annotation|@
name|Immutable
DECL|class|MetaData
specifier|public
class|class
name|MetaData
implements|implements
name|Iterable
argument_list|<
name|IndexMetaData
argument_list|>
block|{
DECL|field|EMPTY_META_DATA
specifier|public
specifier|static
specifier|final
name|MetaData
name|EMPTY_META_DATA
init|=
name|newMetaDataBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|routingPattern
specifier|public
specifier|final
specifier|static
name|Pattern
name|routingPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
decl_stmt|;
DECL|field|templates
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|templates
decl_stmt|;
DECL|field|totalNumberOfShards
specifier|private
specifier|final
specifier|transient
name|int
name|totalNumberOfShards
decl_stmt|;
DECL|field|allIndices
specifier|private
specifier|final
name|String
index|[]
name|allIndices
decl_stmt|;
DECL|field|aliases
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|aliases
decl_stmt|;
DECL|field|aliasToIndexToSearchRoutingMap
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasToIndexToSearchRoutingMap
decl_stmt|;
comment|// This map indicates if an alias associated with an index is filtering alias
DECL|field|indexToAliasFilteringRequiredMap
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|indexToAliasFilteringRequiredMap
decl_stmt|;
DECL|field|aliasAndIndexToIndexMap
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|aliasAndIndexToIndexMap
decl_stmt|;
DECL|method|MetaData
specifier|private
name|MetaData
parameter_list|(
name|long
name|version
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|templates
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|this
operator|.
name|templates
operator|=
name|templates
expr_stmt|;
name|int
name|totalNumberOfShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|totalNumberOfShards
operator|+=
name|indexMetaData
operator|.
name|totalNumberOfShards
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|totalNumberOfShards
operator|=
name|totalNumberOfShards
expr_stmt|;
comment|// build all indices map
name|List
argument_list|<
name|String
argument_list|>
name|allIndicesLst
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|allIndicesLst
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|allIndices
operator|=
name|allIndicesLst
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|allIndicesLst
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
comment|// build aliases map
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|tmpAliasesMap
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|index
init|=
name|indexMetaData
operator|.
name|index
argument_list|()
decl_stmt|;
for|for
control|(
name|AliasMetaData
name|aliasMd
range|:
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|indexAliasMap
init|=
name|tmpAliasesMap
operator|.
name|get
argument_list|(
name|aliasMd
operator|.
name|alias
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexAliasMap
operator|==
literal|null
condition|)
block|{
name|indexAliasMap
operator|=
name|newMapBuilder
argument_list|()
expr_stmt|;
name|tmpAliasesMap
operator|.
name|put
argument_list|(
name|aliasMd
operator|.
name|alias
argument_list|()
argument_list|,
name|indexAliasMap
argument_list|)
expr_stmt|;
block|}
name|indexAliasMap
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|aliasMd
argument_list|)
expr_stmt|;
block|}
block|}
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|aliases
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|alias
range|:
name|tmpAliasesMap
operator|.
name|map
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|aliases
operator|.
name|put
argument_list|(
name|alias
operator|.
name|getKey
argument_list|()
argument_list|,
name|alias
operator|.
name|getValue
argument_list|()
operator|.
name|immutableMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|aliases
operator|=
name|aliases
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
comment|// build routing aliases set
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|tmpAliasToIndexToSearchRoutingMap
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|AliasMetaData
name|aliasMd
range|:
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|indexToSearchRoutingMap
init|=
name|tmpAliasToIndexToSearchRoutingMap
operator|.
name|get
argument_list|(
name|aliasMd
operator|.
name|alias
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexToSearchRoutingMap
operator|==
literal|null
condition|)
block|{
name|indexToSearchRoutingMap
operator|=
name|newMapBuilder
argument_list|()
expr_stmt|;
name|tmpAliasToIndexToSearchRoutingMap
operator|.
name|put
argument_list|(
name|aliasMd
operator|.
name|alias
argument_list|()
argument_list|,
name|indexToSearchRoutingMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aliasMd
operator|.
name|searchRouting
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|indexToSearchRoutingMap
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|routingPattern
operator|.
name|split
argument_list|(
name|aliasMd
operator|.
name|searchRouting
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexToSearchRoutingMap
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasToIndexToSearchRoutingMap
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|alias
range|:
name|tmpAliasToIndexToSearchRoutingMap
operator|.
name|map
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|aliasToIndexToSearchRoutingMap
operator|.
name|put
argument_list|(
name|alias
operator|.
name|getKey
argument_list|()
argument_list|,
name|alias
operator|.
name|getValue
argument_list|()
operator|.
name|immutableMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|aliasToIndexToSearchRoutingMap
operator|=
name|aliasToIndexToSearchRoutingMap
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
comment|// build filtering required map
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|filteringRequiredMap
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|indexFilteringRequiredMap
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
comment|// Filtering is not required for the index itself
name|indexFilteringRequiredMap
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|AliasMetaData
name|aliasMetaData
range|:
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|aliasMetaData
operator|.
name|filter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|indexFilteringRequiredMap
operator|.
name|put
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexFilteringRequiredMap
operator|.
name|put
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|filteringRequiredMap
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|indexFilteringRequiredMap
operator|.
name|immutableMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexToAliasFilteringRequiredMap
operator|=
name|filteringRequiredMap
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
comment|// build aliasAndIndex to Index map
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|tmpAliasAndIndexToIndexBuilder
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|lst
init|=
name|tmpAliasAndIndexToIndexBuilder
operator|.
name|get
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
condition|)
block|{
name|lst
operator|=
name|newHashSet
argument_list|()
expr_stmt|;
name|tmpAliasAndIndexToIndexBuilder
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
name|lst
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|lst
operator|=
name|tmpAliasAndIndexToIndexBuilder
operator|.
name|get
argument_list|(
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
condition|)
block|{
name|lst
operator|=
name|newHashSet
argument_list|()
expr_stmt|;
name|tmpAliasAndIndexToIndexBuilder
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
name|lst
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|aliasAndIndexToIndexBuilder
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|tmpAliasAndIndexToIndexBuilder
operator|.
name|map
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|aliasAndIndexToIndexBuilder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|aliasAndIndexToIndexMap
operator|=
name|aliasAndIndexToIndexBuilder
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|aliases
specifier|public
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|aliases
parameter_list|()
block|{
return|return
name|this
operator|.
name|aliases
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getAliases
specifier|public
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|getAliases
parameter_list|()
block|{
return|return
name|aliases
argument_list|()
return|;
block|}
comment|/**      * Returns all the concrete indices.      */
DECL|method|concreteAllIndices
specifier|public
name|String
index|[]
name|concreteAllIndices
parameter_list|()
block|{
return|return
name|allIndices
return|;
block|}
DECL|method|getConcreteAllIndices
specifier|public
name|String
index|[]
name|getConcreteAllIndices
parameter_list|()
block|{
return|return
name|concreteAllIndices
argument_list|()
return|;
block|}
comment|/**      * Translates the provided indices (possibly aliased) into actual indices.      */
DECL|method|concreteIndices
specifier|public
name|String
index|[]
name|concreteIndices
parameter_list|(
name|String
index|[]
name|indices
parameter_list|)
throws|throws
name|IndexMissingException
block|{
return|return
name|concreteIndices
argument_list|(
name|indices
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Translates the provided indices (possibly aliased) into actual indices.      */
DECL|method|concreteIndicesIgnoreMissing
specifier|public
name|String
index|[]
name|concreteIndicesIgnoreMissing
parameter_list|(
name|String
index|[]
name|indices
parameter_list|)
block|{
return|return
name|concreteIndices
argument_list|(
name|indices
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Returns indexing routing for the given index.      */
DECL|method|resolveIndexRouting
specifier|public
name|String
name|resolveIndexRouting
parameter_list|(
annotation|@
name|Nullable
name|String
name|routing
parameter_list|,
name|String
name|aliasOrIndex
parameter_list|)
block|{
comment|// Check if index is specified by an alias
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|indexAliases
init|=
name|aliases
operator|.
name|get
argument_list|(
name|aliasOrIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexAliases
operator|==
literal|null
operator|||
name|indexAliases
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|routing
return|;
block|}
if|if
condition|(
name|indexAliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Alias ["
operator|+
name|aliasOrIndex
operator|+
literal|"] has more than one index associated with it ["
operator|+
name|indexAliases
operator|.
name|keySet
argument_list|()
operator|+
literal|"], can't execute a single index op"
argument_list|)
throw|;
block|}
name|AliasMetaData
name|aliasMd
init|=
name|indexAliases
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|aliasMd
operator|.
name|indexRouting
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|routing
operator|.
name|equals
argument_list|(
name|aliasMd
operator|.
name|indexRouting
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Alias ["
operator|+
name|aliasOrIndex
operator|+
literal|"] has index routing associated with it ["
operator|+
name|aliasMd
operator|.
name|indexRouting
argument_list|()
operator|+
literal|"], and was provided with routing value ["
operator|+
name|routing
operator|+
literal|"], rejecting operation"
argument_list|)
throw|;
block|}
block|}
name|routing
operator|=
name|aliasMd
operator|.
name|indexRouting
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|routing
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"index/alias ["
operator|+
name|aliasOrIndex
operator|+
literal|"] provided with routing value ["
operator|+
name|routing
operator|+
literal|"] that resolved to several routing values, rejecting operation"
argument_list|)
throw|;
block|}
block|}
return|return
name|routing
return|;
block|}
comment|/**      * Sets the same routing for all indices      */
DECL|method|resolveSearchRoutingAllIndices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolveSearchRoutingAllIndices
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|THashSet
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|THashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|routingPattern
operator|.
name|split
argument_list|(
name|routing
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|routings
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
name|concreteAllIndices
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
name|routings
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|routings
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|resolveSearchRouting
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolveSearchRouting
parameter_list|(
annotation|@
name|Nullable
name|String
name|routing
parameter_list|,
name|String
name|aliasOrIndex
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|routings
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paramRouting
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|paramRouting
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|routingPattern
operator|.
name|split
argument_list|(
name|routing
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|indexToRoutingMap
init|=
name|aliasToIndexToSearchRoutingMap
operator|.
name|get
argument_list|(
name|aliasOrIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexToRoutingMap
operator|!=
literal|null
operator|&&
operator|!
name|indexToRoutingMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// It's an alias
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|indexRouting
range|:
name|indexToRoutingMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|indexRouting
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Routing alias
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|THashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|indexRouting
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|retainAll
argument_list|(
name|paramRouting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Non-routing alias
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|THashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|paramRouting
argument_list|)
decl_stmt|;
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// It's an index
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|THashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|paramRouting
argument_list|)
decl_stmt|;
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|aliasOrIndex
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|routings
return|;
block|}
DECL|method|resolveSearchRouting
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolveSearchRouting
parameter_list|(
annotation|@
name|Nullable
name|String
name|routing
parameter_list|,
name|String
index|[]
name|aliasesOrIndices
parameter_list|)
block|{
if|if
condition|(
name|aliasesOrIndices
operator|==
literal|null
operator|||
name|aliasesOrIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|resolveSearchRoutingAllIndices
argument_list|(
name|routing
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|routings
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paramRouting
init|=
literal|null
decl_stmt|;
comment|// List of indices that don't require any routing
name|Set
argument_list|<
name|String
argument_list|>
name|norouting
init|=
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|paramRouting
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|routingPattern
operator|.
name|split
argument_list|(
name|routing
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aliasesOrIndices
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|aliasesOrIndices
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"_all"
argument_list|)
condition|)
block|{
return|return
name|resolveSearchRoutingAllIndices
argument_list|(
name|routing
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|resolveSearchRouting
argument_list|(
name|routing
argument_list|,
name|aliasesOrIndices
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
for|for
control|(
name|String
name|aliasOrIndex
range|:
name|aliasesOrIndices
control|)
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|indexToRoutingMap
init|=
name|aliasToIndexToSearchRoutingMap
operator|.
name|get
argument_list|(
name|aliasOrIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexToRoutingMap
operator|!=
literal|null
operator|&&
operator|!
name|indexToRoutingMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|indexRouting
range|:
name|indexToRoutingMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|norouting
operator|.
name|contains
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|indexRouting
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Routing alias
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
name|routings
operator|.
name|get
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|THashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|routings
operator|.
name|put
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|addAll
argument_list|(
name|indexRouting
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|retainAll
argument_list|(
name|paramRouting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|routings
operator|.
name|remove
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Non-routing alias
if|if
condition|(
operator|!
name|norouting
operator|.
name|contains
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|norouting
operator|.
name|add
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|THashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|paramRouting
argument_list|)
decl_stmt|;
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|routings
operator|!=
literal|null
condition|)
block|{
name|routings
operator|.
name|remove
argument_list|(
name|indexRouting
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// Index
if|if
condition|(
operator|!
name|norouting
operator|.
name|contains
argument_list|(
name|aliasOrIndex
argument_list|)
condition|)
block|{
name|norouting
operator|.
name|add
argument_list|(
name|aliasOrIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|THashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|paramRouting
argument_list|)
decl_stmt|;
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|aliasOrIndex
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|routings
operator|!=
literal|null
condition|)
block|{
name|routings
operator|.
name|remove
argument_list|(
name|aliasOrIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|routings
operator|==
literal|null
operator|||
name|routings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|routings
return|;
block|}
comment|/**      * Translates the provided indices (possibly aliased) into actual indices.      */
DECL|method|concreteIndices
specifier|public
name|String
index|[]
name|concreteIndices
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|boolean
name|ignoreMissing
parameter_list|)
throws|throws
name|IndexMissingException
block|{
if|if
condition|(
name|indices
operator|==
literal|null
operator|||
name|indices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|concreteAllIndices
argument_list|()
return|;
block|}
comment|// optimize for single element index (common case)
if|if
condition|(
name|indices
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|index
init|=
name|indices
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|concreteAllIndices
argument_list|()
return|;
block|}
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
literal|"_all"
argument_list|)
condition|)
block|{
return|return
name|concreteAllIndices
argument_list|()
return|;
block|}
comment|// if a direct index name, just return the array provided
if|if
condition|(
name|this
operator|.
name|indices
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
name|indices
return|;
block|}
name|String
index|[]
name|actualLst
init|=
name|aliasAndIndexToIndexMap
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualLst
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ignoreMissing
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
block|}
else|else
block|{
return|return
name|actualLst
return|;
block|}
block|}
comment|// check if its a possible aliased index, if not, just return the
comment|// passed array
name|boolean
name|possiblyAliased
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|indices
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|possiblyAliased
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|possiblyAliased
condition|)
block|{
return|return
name|indices
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|actualIndices
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|indices
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|String
index|[]
name|actualLst
init|=
name|aliasAndIndexToIndexMap
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualLst
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ignoreMissing
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|x
range|:
name|actualLst
control|)
block|{
name|actualIndices
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|actualIndices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|actualIndices
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|concreteIndex
specifier|public
name|String
name|concreteIndex
parameter_list|(
name|String
name|index
parameter_list|)
throws|throws
name|IndexMissingException
throws|,
name|ElasticSearchIllegalArgumentException
block|{
comment|// a quick check, if this is an actual index, if so, return it
if|if
condition|(
name|indices
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
name|index
return|;
block|}
comment|// not an actual index, fetch from an alias
name|String
index|[]
name|lst
init|=
name|aliasAndIndexToIndexMap
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|lst
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Alias ["
operator|+
name|index
operator|+
literal|"] has more than one indices associated with it ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|lst
argument_list|)
operator|+
literal|"], can't execute a single index op"
argument_list|)
throw|;
block|}
return|return
name|lst
index|[
literal|0
index|]
return|;
block|}
DECL|method|hasIndex
specifier|public
name|boolean
name|hasIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|hasConcreteIndex
specifier|public
name|boolean
name|hasConcreteIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|aliasAndIndexToIndexMap
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|index
specifier|public
name|IndexMetaData
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|indices
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
parameter_list|()
block|{
return|return
name|this
operator|.
name|indices
return|;
block|}
DECL|method|getIndices
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|getIndices
parameter_list|()
block|{
return|return
name|indices
argument_list|()
return|;
block|}
DECL|method|templates
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|templates
parameter_list|()
block|{
return|return
name|this
operator|.
name|templates
return|;
block|}
DECL|method|getTemplates
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|getTemplates
parameter_list|()
block|{
return|return
name|this
operator|.
name|templates
return|;
block|}
DECL|method|totalNumberOfShards
specifier|public
name|int
name|totalNumberOfShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalNumberOfShards
return|;
block|}
DECL|method|getTotalNumberOfShards
specifier|public
name|int
name|getTotalNumberOfShards
parameter_list|()
block|{
return|return
name|totalNumberOfShards
argument_list|()
return|;
block|}
comment|/**      * Iterates through the list of indices and selects the effective list of filtering aliases for the      * given index.      *      *<p>Only aliases with filters are returned. If the indices list contains a non-filtering reference to      * the index itself - null is returned. Returns<tt>null</tt> if no filtering is required.</p>      */
DECL|method|filteringAliases
specifier|public
name|String
index|[]
name|filteringAliases
parameter_list|(
name|String
name|index
parameter_list|,
name|String
modifier|...
name|indices
parameter_list|)
block|{
if|if
condition|(
name|indices
operator|==
literal|null
operator|||
name|indices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// optimize for the most common single index/alias scenario
if|if
condition|(
name|indices
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|alias
init|=
name|indices
index|[
literal|0
index|]
decl_stmt|;
comment|// This list contains "_all" - no filtering needed
if|if
condition|(
name|alias
operator|.
name|equals
argument_list|(
literal|"_all"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|aliasToFilteringRequiredMap
init|=
name|indexToAliasFilteringRequiredMap
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasToFilteringRequiredMap
operator|==
literal|null
condition|)
block|{
comment|// Shouldn't happen
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
name|Boolean
name|filteringRequired
init|=
name|aliasToFilteringRequiredMap
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteringRequired
operator|==
literal|null
operator|||
operator|!
name|filteringRequired
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|alias
block|}
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|filteringAliases
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|indices
control|)
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|aliasToFilteringRequiredMap
init|=
name|indexToAliasFilteringRequiredMap
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasToFilteringRequiredMap
operator|==
literal|null
condition|)
block|{
comment|// Shouldn't happen
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
name|Boolean
name|filteringRequired
init|=
name|aliasToFilteringRequiredMap
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|// Check that this is an alias for the current index
comment|// Otherwise - skip it
if|if
condition|(
name|filteringRequired
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|filteringRequired
condition|)
block|{
comment|// If filtering required - add it to the list of filters
if|if
condition|(
name|filteringAliases
operator|==
literal|null
condition|)
block|{
name|filteringAliases
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|filteringAliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If not, we have a non filtering alias for this index - no filtering needed
return|return
literal|null
return|;
block|}
block|}
block|}
if|if
condition|(
name|filteringAliases
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|filteringAliases
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filteringAliases
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|iterator
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|IndexMetaData
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|indices
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|newMetaDataBuilder
specifier|public
specifier|static
name|Builder
name|newMetaDataBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|indices
specifier|private
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
DECL|field|templates
specifier|private
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|templates
init|=
name|newMapBuilder
argument_list|()
decl_stmt|;
DECL|method|metaData
specifier|public
name|Builder
name|metaData
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|metaData
operator|.
name|version
expr_stmt|;
name|this
operator|.
name|indices
operator|.
name|putAll
argument_list|(
name|metaData
operator|.
name|indices
argument_list|)
expr_stmt|;
name|this
operator|.
name|templates
operator|.
name|putAll
argument_list|(
name|metaData
operator|.
name|templates
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|indexMetaDataBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|indices
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|get
specifier|public
name|IndexMetaData
name|get
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|remove
specifier|public
name|Builder
name|remove
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|indices
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexTemplateMetaData
operator|.
name|Builder
name|template
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|template
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexTemplateMetaData
name|template
parameter_list|)
block|{
name|templates
operator|.
name|put
argument_list|(
name|template
operator|.
name|name
argument_list|()
argument_list|,
name|template
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|remoteTemplate
specifier|public
name|Builder
name|remoteTemplate
parameter_list|(
name|String
name|templateName
parameter_list|)
block|{
name|templates
operator|.
name|remove
argument_list|(
name|templateName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|updateSettings
specifier|public
name|Builder
name|updateSettings
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
modifier|...
name|indices
parameter_list|)
block|{
if|if
condition|(
name|indices
operator|==
literal|null
operator|||
name|indices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|indices
operator|=
name|this
operator|.
name|indices
operator|.
name|map
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|this
operator|.
name|indices
operator|.
name|map
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|this
operator|.
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
name|put
argument_list|(
name|IndexMetaData
operator|.
name|newIndexMetaDataBuilder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|settings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|settings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|updateNumberOfReplicas
specifier|public
name|Builder
name|updateNumberOfReplicas
parameter_list|(
name|int
name|numberOfReplicas
parameter_list|,
name|String
modifier|...
name|indices
parameter_list|)
block|{
if|if
condition|(
name|indices
operator|==
literal|null
operator|||
name|indices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|indices
operator|=
name|this
operator|.
name|indices
operator|.
name|map
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|this
operator|.
name|indices
operator|.
name|map
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|this
operator|.
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
name|put
argument_list|(
name|IndexMetaData
operator|.
name|newIndexMetaDataBuilder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numberOfReplicas
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|Builder
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|MetaData
name|build
parameter_list|()
block|{
return|return
operator|new
name|MetaData
argument_list|(
name|version
argument_list|,
name|indices
operator|.
name|immutableMap
argument_list|()
argument_list|,
name|templates
operator|.
name|immutableMap
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toXContent
specifier|public
specifier|static
name|String
name|toXContent
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|metaData
argument_list|,
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
DECL|method|toXContent
specifier|public
specifier|static
name|void
name|toXContent
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"meta-data"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"templates"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexTemplateMetaData
name|template
range|:
name|metaData
operator|.
name|templates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexTemplateMetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|template
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
control|)
block|{
name|IndexMetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|indexMetaData
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|MetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"meta-data"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
comment|// no data...
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
literal|"indices"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"templates"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexTemplateMetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|MetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexTemplateMetaData
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|metaData
operator|.
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|metaData
operator|.
name|indices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
control|)
block|{
name|IndexMetaData
operator|.
name|Builder
operator|.
name|writeTo
argument_list|(
name|indexMetaData
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|metaData
operator|.
name|templates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexTemplateMetaData
name|template
range|:
name|metaData
operator|.
name|templates
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexTemplateMetaData
operator|.
name|Builder
operator|.
name|writeTo
argument_list|(
name|template
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

