begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.block
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Represents current cluster level blocks to block dirty operations done against the cluster.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ClusterBlocks
specifier|public
class|class
name|ClusterBlocks
block|{
DECL|field|EMPTY_CLUSTER_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlocks
name|EMPTY_CLUSTER_BLOCK
init|=
operator|new
name|ClusterBlocks
argument_list|(
operator|new
name|ImmutableLevelHolder
index|[]
block|{
name|ImmutableLevelHolder
operator|.
name|EMPTY
block|,
name|ImmutableLevelHolder
operator|.
name|EMPTY
block|,
name|ImmutableLevelHolder
operator|.
name|EMPTY
block|}
argument_list|)
decl_stmt|;
DECL|field|levelHolders
specifier|private
specifier|final
name|ImmutableLevelHolder
index|[]
name|levelHolders
decl_stmt|;
DECL|method|ClusterBlocks
name|ClusterBlocks
parameter_list|(
name|ImmutableLevelHolder
index|[]
name|levelHolders
parameter_list|)
block|{
name|this
operator|.
name|levelHolders
operator|=
name|levelHolders
expr_stmt|;
block|}
DECL|method|global
specifier|public
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|global
parameter_list|(
name|ClusterBlockLevel
name|level
parameter_list|)
block|{
return|return
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|global
argument_list|()
return|;
block|}
DECL|method|globalBlocked
specifier|public
name|boolean
name|globalBlocked
parameter_list|()
block|{
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|ClusterBlockLevel
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|global
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|indicesBlocked
specifier|public
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|indicesBlocked
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|indices
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|ClusterBlockLevel
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|index
range|:
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|indexBlocks
init|=
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexBlocks
operator|!=
literal|null
operator|&&
operator|!
name|indexBlocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indices
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|indices
argument_list|)
return|;
block|}
DECL|method|indexBlocks
specifier|public
name|ImmutableMap
argument_list|<
name|ClusterBlockLevel
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|indexBlocks
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|ClusterBlockLevel
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|ClusterBlockLevel
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
operator|&&
operator|!
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|level
argument_list|,
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|indices
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|indices
parameter_list|(
name|ClusterBlockLevel
name|level
parameter_list|)
block|{
return|return
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|indices
argument_list|()
return|;
block|}
DECL|method|indexBlockedRaiseException
specifier|public
name|void
name|indexBlockedRaiseException
parameter_list|(
name|ClusterBlockLevel
name|level
parameter_list|,
name|String
name|index
parameter_list|)
throws|throws
name|ClusterBlockException
block|{
if|if
condition|(
operator|!
name|indexBlocked
argument_list|(
name|level
argument_list|,
name|index
argument_list|)
condition|)
block|{
return|return;
block|}
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|ClusterBlock
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|global
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|indexBlocks
init|=
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexBlocks
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|indexBlocks
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ClusterBlockException
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|indexBlocked
specifier|public
name|boolean
name|indexBlocked
parameter_list|(
name|ClusterBlockLevel
name|level
parameter_list|,
name|String
name|index
parameter_list|)
block|{
if|if
condition|(
operator|!
name|global
argument_list|(
name|level
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|indexBlocks
init|=
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexBlocks
operator|!=
literal|null
operator|&&
operator|!
name|indexBlocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|class|ImmutableLevelHolder
specifier|static
class|class
name|ImmutableLevelHolder
block|{
DECL|field|EMPTY
specifier|static
specifier|final
name|ImmutableLevelHolder
name|EMPTY
init|=
operator|new
name|ImmutableLevelHolder
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|ClusterBlock
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|global
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|global
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|indices
decl_stmt|;
DECL|method|ImmutableLevelHolder
name|ImmutableLevelHolder
parameter_list|(
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|global
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|indices
parameter_list|)
block|{
name|this
operator|.
name|global
operator|=
name|global
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
block|}
DECL|method|global
specifier|public
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|global
parameter_list|()
block|{
return|return
name|global
return|;
block|}
DECL|method|indices
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
block|}
DECL|class|LevelHolder
specifier|static
class|class
name|LevelHolder
block|{
DECL|field|global
specifier|private
specifier|final
name|Set
argument_list|<
name|ClusterBlock
argument_list|>
name|global
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|indices
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|LevelHolder
name|LevelHolder
parameter_list|()
block|{         }
DECL|method|global
specifier|public
name|Set
argument_list|<
name|ClusterBlock
argument_list|>
name|global
parameter_list|()
block|{
return|return
name|global
return|;
block|}
DECL|method|indices
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|levelHolders
specifier|private
name|LevelHolder
index|[]
name|levelHolders
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|()
block|{
name|levelHolders
operator|=
operator|new
name|LevelHolder
index|[
literal|3
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levelHolders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|levelHolders
index|[
name|i
index|]
operator|=
operator|new
name|LevelHolder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|blocks
specifier|public
name|Builder
name|blocks
parameter_list|(
name|ClusterBlocks
name|blocks
parameter_list|)
block|{
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|ClusterBlockLevel
operator|.
name|values
argument_list|()
control|)
block|{
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|global
argument_list|()
operator|.
name|addAll
argument_list|(
name|blocks
operator|.
name|global
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|entry
range|:
name|blocks
operator|.
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|indices
argument_list|()
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|indices
argument_list|()
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Sets
operator|.
expr|<
name|ClusterBlock
operator|>
name|newHashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|indices
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|addGlobalBlock
specifier|public
name|Builder
name|addGlobalBlock
parameter_list|(
name|ClusterBlock
name|block
parameter_list|)
block|{
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|ClusterBlockLevel
operator|.
name|values
argument_list|()
control|)
block|{
name|addGlobalBlock
argument_list|(
name|level
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addGlobalBlock
specifier|public
name|Builder
name|addGlobalBlock
parameter_list|(
name|ClusterBlockLevel
name|level
parameter_list|,
name|ClusterBlock
name|block
parameter_list|)
block|{
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|global
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeGlobalBlock
specifier|public
name|Builder
name|removeGlobalBlock
parameter_list|(
name|ClusterBlock
name|block
parameter_list|)
block|{
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|ClusterBlockLevel
operator|.
name|values
argument_list|()
control|)
block|{
name|removeGlobalBlock
argument_list|(
name|level
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|removeGlobalBlock
specifier|public
name|Builder
name|removeGlobalBlock
parameter_list|(
name|ClusterBlockLevel
name|level
parameter_list|,
name|ClusterBlock
name|block
parameter_list|)
block|{
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|global
argument_list|()
operator|.
name|remove
argument_list|(
name|block
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addIndexBlock
specifier|public
name|Builder
name|addIndexBlock
parameter_list|(
name|String
name|index
parameter_list|,
name|ClusterBlockLevel
name|level
parameter_list|,
name|ClusterBlock
name|block
parameter_list|)
block|{
if|if
condition|(
operator|!
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|indices
argument_list|()
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|indices
argument_list|()
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|Sets
operator|.
expr|<
name|ClusterBlock
operator|>
name|newHashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|indices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeIndexBlock
specifier|public
name|Builder
name|removeIndexBlock
parameter_list|(
name|String
name|index
parameter_list|,
name|ClusterBlockLevel
name|level
parameter_list|,
name|ClusterBlock
name|block
parameter_list|)
block|{
name|Set
argument_list|<
name|ClusterBlock
argument_list|>
name|indexBlocks
init|=
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|indices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexBlocks
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
name|indexBlocks
operator|.
name|remove
argument_list|(
name|block
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|ClusterBlocks
name|build
parameter_list|()
block|{
name|ImmutableLevelHolder
index|[]
name|holders
init|=
operator|new
name|ImmutableLevelHolder
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|ClusterBlockLevel
operator|.
name|values
argument_list|()
control|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|indicesBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|entry
range|:
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|indices
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|indicesBuilder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|holders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|=
operator|new
name|ImmutableLevelHolder
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|levelHolders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|.
name|global
argument_list|()
argument_list|)
argument_list|,
name|indicesBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ClusterBlocks
argument_list|(
name|holders
argument_list|)
return|;
block|}
DECL|method|readClusterBlocks
specifier|public
specifier|static
name|ClusterBlocks
name|readClusterBlocks
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableLevelHolder
index|[]
name|holders
init|=
operator|new
name|ImmutableLevelHolder
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|ClusterBlockLevel
operator|.
name|values
argument_list|()
control|)
block|{
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|global
init|=
name|readBlockSet
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|indicesBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|indicesBuilder
operator|.
name|put
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
operator|.
name|intern
argument_list|()
argument_list|,
name|readBlockSet
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|holders
index|[
name|level
operator|.
name|id
argument_list|()
index|]
operator|=
operator|new
name|ImmutableLevelHolder
argument_list|(
name|global
argument_list|,
name|indicesBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ClusterBlocks
argument_list|(
name|holders
argument_list|)
return|;
block|}
DECL|method|writeClusterBlocks
specifier|public
specifier|static
name|void
name|writeClusterBlocks
parameter_list|(
name|ClusterBlocks
name|clusterBlock
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|ClusterBlockLevel
operator|.
name|values
argument_list|()
control|)
block|{
name|writeBlockSet
argument_list|(
name|clusterBlock
operator|.
name|global
argument_list|(
name|level
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|clusterBlock
operator|.
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|entry
range|:
name|clusterBlock
operator|.
name|indices
argument_list|(
name|level
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeBlockSet
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeBlockSet
specifier|private
specifier|static
name|void
name|writeBlockSet
parameter_list|(
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|blocks
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|blocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ClusterBlock
name|block
range|:
name|blocks
control|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|block
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|block
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readBlockSet
specifier|private
specifier|static
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|readBlockSet
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|ClusterBlock
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|in
operator|.
name|readUTF
argument_list|()
operator|.
name|intern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

