begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ProcessedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|ShardsAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|RiverIndexName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|MetaDataCreateIndexService
specifier|public
class|class
name|MetaDataCreateIndexService
extends|extends
name|AbstractComponent
block|{
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|shardsAllocation
specifier|private
specifier|final
name|ShardsAllocation
name|shardsAllocation
decl_stmt|;
DECL|field|riverIndexName
specifier|private
specifier|final
name|String
name|riverIndexName
decl_stmt|;
DECL|method|MetaDataCreateIndexService
annotation|@
name|Inject
specifier|public
name|MetaDataCreateIndexService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ShardsAllocation
name|shardsAllocation
parameter_list|,
annotation|@
name|RiverIndexName
name|String
name|riverIndexName
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|shardsAllocation
operator|=
name|shardsAllocation
expr_stmt|;
name|this
operator|.
name|riverIndexName
operator|=
name|riverIndexName
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
name|void
name|createIndex
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|Listener
name|listener
parameter_list|)
block|{
name|ImmutableSettings
operator|.
name|Builder
name|updatedSettingsBuilder
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|request
operator|.
name|settings
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"index."
argument_list|)
condition|)
block|{
name|updatedSettingsBuilder
operator|.
name|put
argument_list|(
literal|"index."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updatedSettingsBuilder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|settings
argument_list|(
name|updatedSettingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"create-index ["
operator|+
name|request
operator|.
name|index
operator|+
literal|"], cause ["
operator|+
name|request
operator|.
name|cause
operator|+
literal|"]"
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|request
operator|.
name|origin
operator|==
name|Request
operator|.
name|Origin
operator|.
name|API
condition|)
block|{
try|try
block|{
name|validate
argument_list|(
name|request
argument_list|,
name|currentState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
block|}
name|List
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|templates
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
comment|// we only find a template when its an API call (a new index)
if|if
condition|(
name|request
operator|.
name|origin
operator|==
name|Request
operator|.
name|Origin
operator|.
name|API
condition|)
block|{
comment|// find templates, highest order are better matching
name|templates
operator|=
name|findTemplates
argument_list|(
name|request
argument_list|,
name|currentState
argument_list|)
expr_stmt|;
block|}
comment|// add the request mapping
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mappings
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|request
operator|.
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|parseMapping
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// apply templates, merging the mappings into the request mapping if exists
for|for
control|(
name|IndexTemplateMetaData
name|template
range|:
name|templates
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|entry
range|:
name|template
operator|.
name|mappings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|XContentHelper
operator|.
name|mergeDefaults
argument_list|(
name|mappings
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|parseMapping
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|parseMapping
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now add config level mappings
if|if
condition|(
name|request
operator|.
name|origin
operator|==
name|Request
operator|.
name|Origin
operator|.
name|API
condition|)
block|{
name|File
name|mappingsDir
init|=
operator|new
name|File
argument_list|(
name|environment
operator|.
name|configFile
argument_list|()
argument_list|,
literal|"mappings"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingsDir
operator|.
name|exists
argument_list|()
operator|&&
name|mappingsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// first index level
name|File
name|indexMappingsDir
init|=
operator|new
name|File
argument_list|(
name|mappingsDir
argument_list|,
name|request
operator|.
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMappingsDir
operator|.
name|exists
argument_list|()
operator|&&
name|indexMappingsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addMappings
argument_list|(
name|mappings
argument_list|,
name|indexMappingsDir
argument_list|)
expr_stmt|;
block|}
comment|// second is the _default mapping
name|File
name|defaultMappingsDir
init|=
operator|new
name|File
argument_list|(
name|mappingsDir
argument_list|,
literal|"_default"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultMappingsDir
operator|.
name|exists
argument_list|()
operator|&&
name|defaultMappingsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addMappings
argument_list|(
name|mappings
argument_list|,
name|defaultMappingsDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ImmutableSettings
operator|.
name|Builder
name|indexSettingsBuilder
init|=
name|settingsBuilder
argument_list|()
decl_stmt|;
comment|// apply templates, here, in reverse order, since first ones are better matching
for|for
control|(
name|int
name|i
init|=
name|templates
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|templates
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now, put the request settings, so they override templates
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|request
operator|.
name|settings
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|equals
argument_list|(
name|PercolatorService
operator|.
name|INDEX_NAME
argument_list|)
condition|)
block|{
comment|// if its percolator, always 1 shard
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|equals
argument_list|(
name|riverIndexName
argument_list|)
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|equals
argument_list|(
name|PercolatorService
operator|.
name|INDEX_NAME
argument_list|)
condition|)
block|{
comment|// if its percolator, always set number of replicas to 0, and expand to 0-all
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|,
literal|"0-all"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|equals
argument_list|(
name|riverIndexName
argument_list|)
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Settings
name|actualIndexSettings
init|=
name|indexSettingsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Set up everything, now locally create the index to see that things are ok, and apply
comment|// create the index here (on the master) to validate it can be created, as well as adding the mapping
name|indicesService
operator|.
name|createIndex
argument_list|(
name|request
operator|.
name|index
argument_list|,
name|actualIndexSettings
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// now add the mappings
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|index
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
decl_stmt|;
comment|// first, add the default mapping
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
condition|)
block|{
try|try
block|{
name|mapperService
operator|.
name|add
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|map
argument_list|(
name|mappings
operator|.
name|get
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|indicesService
operator|.
name|deleteIndex
argument_list|(
name|request
operator|.
name|index
argument_list|,
literal|"failed on parsing default mapping on index creation"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"mapping ["
operator|+
name|MapperService
operator|.
name|DEFAULT_MAPPING
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|mapperService
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|map
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|indicesService
operator|.
name|deleteIndex
argument_list|(
name|request
operator|.
name|index
argument_list|,
literal|"failed on parsing mappings on index creation"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"mapping ["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// now, update the mappings with the actual source
name|Map
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappingsMetaData
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|DocumentMapper
name|mapper
range|:
name|mapperService
control|)
block|{
name|MappingMetaData
name|mappingMd
init|=
operator|new
name|MappingMetaData
argument_list|(
name|mapper
argument_list|)
decl_stmt|;
name|mappingsMetaData
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
name|mappingMd
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
init|=
name|newIndexMetaDataBuilder
argument_list|(
name|request
operator|.
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|actualIndexSettings
argument_list|)
decl_stmt|;
for|for
control|(
name|MappingMetaData
name|mappingMd
range|:
name|mappingsMetaData
operator|.
name|values
argument_list|()
control|)
block|{
name|indexMetaDataBuilder
operator|.
name|putMapping
argument_list|(
name|mappingMd
argument_list|)
expr_stmt|;
block|}
name|indexMetaDataBuilder
operator|.
name|state
argument_list|(
name|request
operator|.
name|state
argument_list|)
expr_stmt|;
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|indexMetaDataBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaData
name|newMetaData
init|=
name|newMetaDataBuilder
argument_list|()
operator|.
name|metaData
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}"
argument_list|,
name|request
operator|.
name|index
argument_list|,
name|request
operator|.
name|cause
argument_list|,
name|indexMetaData
operator|.
name|numberOfShards
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
argument_list|,
name|mappings
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|blocks
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ClusterBlock
name|block
range|:
name|request
operator|.
name|blocks
control|)
block|{
name|blocks
operator|.
name|addIndexBlock
argument_list|(
name|request
operator|.
name|index
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|state
operator|==
name|State
operator|.
name|CLOSE
condition|)
block|{
name|blocks
operator|.
name|addIndexBlock
argument_list|(
name|request
operator|.
name|index
argument_list|,
name|MetaDataStateIndexService
operator|.
name|INDEX_CLOSED_BLOCK
argument_list|)
expr_stmt|;
block|}
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|blocks
argument_list|(
name|blocks
argument_list|)
operator|.
name|metaData
argument_list|(
name|newMetaData
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to create"
argument_list|,
name|e
argument_list|,
name|request
operator|.
name|index
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|state
operator|==
name|State
operator|.
name|CLOSE
condition|)
block|{
comment|// no need to do shard allocated when closed...
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|Response
argument_list|(
literal|true
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"reroute after index ["
operator|+
name|request
operator|.
name|index
operator|+
literal|"] creation"
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|routingTable
argument_list|(
name|currentState
operator|.
name|routingTable
argument_list|()
argument_list|)
decl_stmt|;
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingBuilder
init|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|request
operator|.
name|index
argument_list|)
operator|.
name|initializeEmpty
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|origin
operator|==
name|Request
operator|.
name|Origin
operator|.
name|API
argument_list|)
decl_stmt|;
name|routingTableBuilder
operator|.
name|add
argument_list|(
name|indexRoutingBuilder
argument_list|)
expr_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|routingResult
init|=
name|shardsAllocation
operator|.
name|reroute
argument_list|(
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTableBuilder
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|routingResult
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] created and added to cluster_state"
argument_list|,
name|request
operator|.
name|index
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|Response
argument_list|(
literal|true
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|parseMapping
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseMapping
parameter_list|(
name|String
name|mappingSource
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|mappingSource
argument_list|)
operator|.
name|createParser
argument_list|(
name|mappingSource
argument_list|)
operator|.
name|mapAndClose
argument_list|()
return|;
block|}
DECL|method|addMappings
specifier|private
name|void
name|addMappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mappings
parameter_list|,
name|File
name|mappingsDir
parameter_list|)
block|{
name|File
index|[]
name|mappingsFiles
init|=
name|mappingsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|mappingFile
range|:
name|mappingsFiles
control|)
block|{
name|String
name|mappingType
init|=
name|mappingFile
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|mappingFile
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|mappingSource
init|=
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|FileReader
argument_list|(
name|mappingFile
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|mappingType
argument_list|)
condition|)
block|{
name|XContentHelper
operator|.
name|mergeDefaults
argument_list|(
name|mappings
operator|.
name|get
argument_list|(
name|mappingType
argument_list|)
argument_list|,
name|parseMapping
argument_list|(
name|mappingSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappings
operator|.
name|put
argument_list|(
name|mappingType
argument_list|,
name|parseMapping
argument_list|(
name|mappingSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read / parse mapping ["
operator|+
name|mappingType
operator|+
literal|"] from location ["
operator|+
name|mappingFile
operator|+
literal|"], ignoring..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|findTemplates
specifier|private
name|List
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|findTemplates
parameter_list|(
name|Request
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|List
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|templates
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexTemplateMetaData
name|template
range|:
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|templates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|template
operator|.
name|template
argument_list|()
argument_list|,
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
name|templates
operator|.
name|add
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|templates
argument_list|,
operator|new
name|Comparator
argument_list|<
name|IndexTemplateMetaData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|IndexTemplateMetaData
name|o1
parameter_list|,
name|IndexTemplateMetaData
name|o2
parameter_list|)
block|{
return|return
name|o2
operator|.
name|order
argument_list|()
operator|-
name|o1
operator|.
name|order
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|templates
return|;
block|}
DECL|method|validate
specifier|private
name|void
name|validate
parameter_list|(
name|Request
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
if|if
condition|(
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexAlreadyExistsException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexAlreadyExistsException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not contain whitespace"
argument_list|)
throw|;
block|}
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not contain ',"
argument_list|)
throw|;
block|}
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not contain '#"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|index
operator|.
name|equals
argument_list|(
name|riverIndexName
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|index
operator|.
name|equals
argument_list|(
name|PercolatorService
operator|.
name|INDEX_NAME
argument_list|)
operator|&&
name|request
operator|.
name|index
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not start with '_'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|index
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must be lowercase"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|validFileName
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not contain the following characters "
operator|+
name|Strings
operator|.
name|INVALID_FILENAME_CHARS
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|aliases
argument_list|()
operator|.
name|contains
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"an alias with the same name already exists"
argument_list|)
throw|;
block|}
block|}
DECL|interface|Listener
specifier|public
specifier|static
interface|interface
name|Listener
block|{
DECL|method|onResponse
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
function_decl|;
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
DECL|class|Request
specifier|public
specifier|static
class|class
name|Request
block|{
DECL|enum|Origin
specifier|public
specifier|static
enum|enum
name|Origin
block|{
DECL|enum constant|API
name|API
block|,
DECL|enum constant|GATEWAY
name|GATEWAY
block|}
DECL|field|origin
specifier|final
name|Origin
name|origin
decl_stmt|;
DECL|field|cause
specifier|final
name|String
name|cause
decl_stmt|;
DECL|field|index
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|state
name|State
name|state
init|=
name|State
operator|.
name|OPEN
decl_stmt|;
DECL|field|settings
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
decl_stmt|;
DECL|field|mappings
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappings
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|timeout
name|TimeValue
name|timeout
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|field|blocks
name|Set
argument_list|<
name|ClusterBlock
argument_list|>
name|blocks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|method|Request
specifier|public
name|Request
parameter_list|(
name|Origin
name|origin
parameter_list|,
name|String
name|cause
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|origin
operator|=
name|origin
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|settings
specifier|public
name|Request
name|settings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mappings
specifier|public
name|Request
name|mappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappings
parameter_list|)
block|{
name|this
operator|.
name|mappings
operator|.
name|putAll
argument_list|(
name|mappings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mappingsMetaData
specifier|public
name|Request
name|mappingsMetaData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|entry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|mappings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|mappingsCompressed
specifier|public
name|Request
name|mappingsCompressed
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|mappings
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|entry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|mappings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|blocks
specifier|public
name|Request
name|blocks
parameter_list|(
name|Set
argument_list|<
name|ClusterBlock
argument_list|>
name|blocks
parameter_list|)
block|{
name|this
operator|.
name|blocks
operator|.
name|addAll
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|state
specifier|public
name|Request
name|state
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timeout
specifier|public
name|Request
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|class|Response
specifier|public
specifier|static
class|class
name|Response
block|{
DECL|field|acknowledged
specifier|private
specifier|final
name|boolean
name|acknowledged
decl_stmt|;
DECL|field|indexMetaData
specifier|private
specifier|final
name|IndexMetaData
name|indexMetaData
decl_stmt|;
DECL|method|Response
specifier|public
name|Response
parameter_list|(
name|boolean
name|acknowledged
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|this
operator|.
name|acknowledged
operator|=
name|acknowledged
expr_stmt|;
name|this
operator|.
name|indexMetaData
operator|=
name|indexMetaData
expr_stmt|;
block|}
DECL|method|acknowledged
specifier|public
name|boolean
name|acknowledged
parameter_list|()
block|{
return|return
name|acknowledged
return|;
block|}
DECL|method|indexMetaData
specifier|public
name|IndexMetaData
name|indexMetaData
parameter_list|()
block|{
return|return
name|indexMetaData
return|;
block|}
block|}
block|}
end_class

end_unit

