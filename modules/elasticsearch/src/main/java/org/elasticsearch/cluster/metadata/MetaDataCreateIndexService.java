begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ProcessedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|NodeIndexCreatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|ShardsAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|timer
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|timer
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|timer
operator|.
name|TimerService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|MetaDataCreateIndexService
specifier|public
class|class
name|MetaDataCreateIndexService
extends|extends
name|AbstractComponent
block|{
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|timerService
specifier|private
specifier|final
name|TimerService
name|timerService
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|shardsAllocation
specifier|private
specifier|final
name|ShardsAllocation
name|shardsAllocation
decl_stmt|;
DECL|field|nodeIndexCreatedAction
specifier|private
specifier|final
name|NodeIndexCreatedAction
name|nodeIndexCreatedAction
decl_stmt|;
DECL|method|MetaDataCreateIndexService
annotation|@
name|Inject
specifier|public
name|MetaDataCreateIndexService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|TimerService
name|timerService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ShardsAllocation
name|shardsAllocation
parameter_list|,
name|NodeIndexCreatedAction
name|nodeIndexCreatedAction
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|timerService
operator|=
name|timerService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|shardsAllocation
operator|=
name|shardsAllocation
expr_stmt|;
name|this
operator|.
name|nodeIndexCreatedAction
operator|=
name|nodeIndexCreatedAction
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
name|void
name|createIndex
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|Listener
name|userListener
parameter_list|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"create-index ["
operator|+
name|request
operator|.
name|index
operator|+
literal|"], cause ["
operator|+
name|request
operator|.
name|cause
operator|+
literal|"]"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
specifier|final
name|CreateIndexListener
name|listener
init|=
operator|new
name|CreateIndexListener
argument_list|(
name|request
argument_list|,
name|userListener
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|currentState
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|IndexAlreadyExistsException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
if|if
condition|(
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|IndexAlreadyExistsException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not contain whitespace"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not contain ',"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not contain '#"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
if|if
condition|(
name|request
operator|.
name|index
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not start with '_'"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|index
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must be lowercase"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|validFileName
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"must not contain the following characters "
operator|+
name|Strings
operator|.
name|INVALID_FILENAME_CHARS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
if|if
condition|(
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|aliases
argument_list|()
operator|.
name|contains
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|,
name|request
operator|.
name|index
argument_list|,
literal|"an alias with the same name already exists"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
comment|// add to the mappings files that exists within the config/mappings location
name|Map
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|mappings
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|File
name|mappingsDir
init|=
operator|new
name|File
argument_list|(
name|environment
operator|.
name|configFile
argument_list|()
argument_list|,
literal|"mappings"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingsDir
operator|.
name|exists
argument_list|()
operator|&&
name|mappingsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|defaultMappingsDir
init|=
operator|new
name|File
argument_list|(
name|mappingsDir
argument_list|,
literal|"_default"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultMappingsDir
operator|.
name|exists
argument_list|()
operator|&&
name|defaultMappingsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addMappings
argument_list|(
name|mappings
argument_list|,
name|defaultMappingsDir
argument_list|)
expr_stmt|;
block|}
name|File
name|indexMappingsDir
init|=
operator|new
name|File
argument_list|(
name|mappingsDir
argument_list|,
name|request
operator|.
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMappingsDir
operator|.
name|exists
argument_list|()
operator|&&
name|indexMappingsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addMappings
argument_list|(
name|mappings
argument_list|,
name|indexMappingsDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|// put this last so index level mappings can override default mappings
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|request
operator|.
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|CompressedString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ImmutableSettings
operator|.
name|Builder
name|indexSettingsBuilder
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|request
operator|.
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|settings
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|settings
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Settings
name|actualIndexSettings
init|=
name|indexSettingsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// create the index here (on the master) to validate it can be created, as well as adding the mapping
name|indicesService
operator|.
name|createIndex
argument_list|(
name|request
operator|.
name|index
argument_list|,
name|actualIndexSettings
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// now add the mappings
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|index
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|entry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|mapperService
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|indicesService
operator|.
name|deleteIndex
argument_list|(
name|request
operator|.
name|index
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"mapping ["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// now, update the mappings with the actual source
name|mappings
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|DocumentMapper
name|mapper
range|:
name|mapperService
control|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
name|mapper
operator|.
name|mappingSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
init|=
name|newIndexMetaDataBuilder
argument_list|(
name|request
operator|.
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|actualIndexSettings
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|entry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|indexMetaDataBuilder
operator|.
name|putMapping
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|indexMetaDataBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaData
name|newMetaData
init|=
name|newMetaDataBuilder
argument_list|()
operator|.
name|metaData
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}"
argument_list|,
name|request
operator|.
name|index
argument_list|,
name|request
operator|.
name|cause
argument_list|,
name|indexMetaData
operator|.
name|numberOfShards
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
argument_list|,
name|mappings
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// -1 since we added it on the master already
if|if
condition|(
name|counter
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no nodes to add to
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|Response
argument_list|(
literal|true
argument_list|,
name|indexMetaData
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|NodeIndexCreatedAction
operator|.
name|Listener
name|nodeIndexCreateListener
init|=
operator|new
name|NodeIndexCreatedAction
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNodeIndexCreated
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
name|request
operator|.
name|index
argument_list|)
condition|)
block|{
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|Response
argument_list|(
literal|true
argument_list|,
name|indexMetaData
argument_list|)
argument_list|)
expr_stmt|;
name|nodeIndexCreatedAction
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|nodeIndexCreatedAction
operator|.
name|add
argument_list|(
name|nodeIndexCreateListener
argument_list|)
expr_stmt|;
name|Timeout
name|timeoutTask
init|=
name|timerService
operator|.
name|newTimeout
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Timeout
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|Response
argument_list|(
literal|false
argument_list|,
name|indexMetaData
argument_list|)
argument_list|)
expr_stmt|;
name|nodeIndexCreatedAction
operator|.
name|remove
argument_list|(
name|nodeIndexCreateListener
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|request
operator|.
name|timeout
argument_list|,
name|TimerService
operator|.
name|ExecutionType
operator|.
name|THREADED
argument_list|)
decl_stmt|;
name|listener
operator|.
name|timeout
operator|=
name|timeoutTask
expr_stmt|;
block|}
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|newMetaData
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addMappings
specifier|private
name|void
name|addMappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|mappings
parameter_list|,
name|File
name|mappingsDir
parameter_list|)
block|{
name|File
index|[]
name|mappingsFiles
init|=
name|mappingsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|mappingFile
range|:
name|mappingsFiles
control|)
block|{
name|String
name|fileNameNoSuffix
init|=
name|mappingFile
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|mappingFile
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|fileNameNoSuffix
argument_list|)
condition|)
block|{
comment|// if we have the mapping defined, ignore it
continue|continue;
block|}
try|try
block|{
name|mappings
operator|.
name|put
argument_list|(
name|fileNameNoSuffix
argument_list|,
operator|new
name|CompressedString
argument_list|(
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|FileReader
argument_list|(
name|mappingFile
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read mapping ["
operator|+
name|fileNameNoSuffix
operator|+
literal|"] from location ["
operator|+
name|mappingFile
operator|+
literal|"], ignoring..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CreateIndexListener
class|class
name|CreateIndexListener
implements|implements
name|Listener
block|{
DECL|field|notified
specifier|private
name|AtomicBoolean
name|notified
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|Request
name|request
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|Listener
name|listener
decl_stmt|;
DECL|field|timeout
specifier|volatile
name|Timeout
name|timeout
decl_stmt|;
DECL|method|CreateIndexListener
specifier|private
name|CreateIndexListener
parameter_list|(
name|Request
name|request
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
DECL|method|onResponse
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
specifier|final
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|notified
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|timeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
comment|// do prefetch here so we won't compute md5 and such on the cluster update state...
name|long
name|prefetchTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|shardsAllocation
operator|.
name|preferUnallocatedStrategy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|shardsAllocation
operator|.
name|preferUnallocatedStrategy
argument_list|()
operator|.
name|prefetch
argument_list|(
name|response
operator|.
name|indexMetaData
argument_list|()
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
name|prefetchTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
specifier|final
name|long
name|fPrefetchTime
init|=
name|prefetchTime
decl_stmt|;
comment|// do the reroute after indices have been created on all the other nodes so we can query them for some info (like shard allocation)
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"reroute after index ["
operator|+
name|request
operator|.
name|index
operator|+
literal|"] creation"
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexRoutingTable
name|indexRoutingTable
range|:
name|currentState
operator|.
name|routingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|routingTableBuilder
operator|.
name|add
argument_list|(
name|indexRoutingTable
argument_list|)
expr_stmt|;
block|}
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingBuilder
init|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|request
operator|.
name|index
argument_list|)
operator|.
name|initializeEmpty
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|routingTableBuilder
operator|.
name|add
argument_list|(
name|indexRoutingBuilder
argument_list|)
expr_stmt|;
name|RoutingTable
name|newRoutingTable
init|=
name|shardsAllocation
operator|.
name|reroute
argument_list|(
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTableBuilder
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|newRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] created and added to cluster_state, prefetch_took [{}]"
argument_list|,
name|request
operator|.
name|index
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|fPrefetchTime
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onFailure
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|notified
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|timeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|interface|Listener
specifier|public
specifier|static
interface|interface
name|Listener
block|{
DECL|method|onResponse
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
function_decl|;
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
DECL|class|Request
specifier|public
specifier|static
class|class
name|Request
block|{
DECL|field|cause
specifier|final
name|String
name|cause
decl_stmt|;
DECL|field|index
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|settings
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
decl_stmt|;
DECL|field|mappings
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappings
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|timeout
name|TimeValue
name|timeout
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|method|Request
specifier|public
name|Request
parameter_list|(
name|String
name|cause
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|settings
specifier|public
name|Request
name|settings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mappings
specifier|public
name|Request
name|mappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappings
parameter_list|)
block|{
name|this
operator|.
name|mappings
operator|.
name|putAll
argument_list|(
name|mappings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mappingsCompressed
specifier|public
name|Request
name|mappingsCompressed
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|mappings
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|entry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|mappings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|timeout
specifier|public
name|Request
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|class|Response
specifier|public
specifier|static
class|class
name|Response
block|{
DECL|field|acknowledged
specifier|private
specifier|final
name|boolean
name|acknowledged
decl_stmt|;
DECL|field|indexMetaData
specifier|private
specifier|final
name|IndexMetaData
name|indexMetaData
decl_stmt|;
DECL|method|Response
specifier|public
name|Response
parameter_list|(
name|boolean
name|acknowledged
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|this
operator|.
name|acknowledged
operator|=
name|acknowledged
expr_stmt|;
name|this
operator|.
name|indexMetaData
operator|=
name|indexMetaData
expr_stmt|;
block|}
DECL|method|acknowledged
specifier|public
name|boolean
name|acknowledged
parameter_list|()
block|{
return|return
name|acknowledged
return|;
block|}
DECL|method|indexMetaData
specifier|public
name|IndexMetaData
name|indexMetaData
parameter_list|()
block|{
return|return
name|indexMetaData
return|;
block|}
block|}
block|}
end_class

end_unit

