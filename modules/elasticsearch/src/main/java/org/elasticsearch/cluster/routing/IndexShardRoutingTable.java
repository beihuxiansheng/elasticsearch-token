begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this   * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|jsr166y
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|IndexShardRoutingTable
specifier|public
class|class
name|IndexShardRoutingTable
implements|implements
name|Iterable
argument_list|<
name|ShardRouting
argument_list|>
block|{
DECL|field|shardId
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|shards
specifier|final
name|ImmutableList
argument_list|<
name|ShardRouting
argument_list|>
name|shards
decl_stmt|;
DECL|field|counter
specifier|final
name|AtomicInteger
name|counter
decl_stmt|;
DECL|method|IndexShardRoutingTable
name|IndexShardRoutingTable
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ImmutableList
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|shards
operator|=
name|shards
expr_stmt|;
name|this
operator|.
name|counter
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|shards
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
DECL|method|getShardId
specifier|public
name|ShardId
name|getShardId
parameter_list|()
block|{
return|return
name|shardId
argument_list|()
return|;
block|}
DECL|method|iterator
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|ShardRouting
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|shards
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|shards
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getSize
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
argument_list|()
return|;
block|}
DECL|method|shards
specifier|public
name|ImmutableList
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|()
block|{
return|return
name|shards
return|;
block|}
DECL|method|getShards
specifier|public
name|ImmutableList
argument_list|<
name|ShardRouting
argument_list|>
name|getShards
parameter_list|()
block|{
return|return
name|shards
argument_list|()
return|;
block|}
DECL|method|countWithState
specifier|public
name|int
name|countWithState
parameter_list|(
name|ShardRoutingState
name|state
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|this
control|)
block|{
if|if
condition|(
name|state
operator|==
name|shard
operator|.
name|state
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|shardsIt
specifier|public
name|ShardsIterator
name|shardsIt
parameter_list|()
block|{
return|return
operator|new
name|IndexShardsIterator
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|shardsRandomIt
specifier|public
name|ShardsIterator
name|shardsRandomIt
parameter_list|()
block|{
return|return
operator|new
name|IndexShardsIterator
argument_list|(
name|nextCounter
argument_list|()
argument_list|)
return|;
block|}
DECL|method|primaryShard
specifier|public
name|ShardRouting
name|primaryShard
parameter_list|()
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|this
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
return|return
name|shardRouting
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|replicaShards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|replicaShards
parameter_list|()
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|replicaShards
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|this
control|)
block|{
if|if
condition|(
operator|!
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
name|replicaShards
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|replicaShards
return|;
block|}
DECL|method|shardsWithState
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shardsWithState
parameter_list|(
name|ShardRoutingState
modifier|...
name|states
parameter_list|)
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardEntry
range|:
name|this
control|)
block|{
for|for
control|(
name|ShardRoutingState
name|state
range|:
name|states
control|)
block|{
if|if
condition|(
name|shardEntry
operator|.
name|state
argument_list|()
operator|==
name|state
condition|)
block|{
name|shards
operator|.
name|add
argument_list|(
name|shardEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|shards
return|;
block|}
DECL|method|nextCounter
name|int
name|nextCounter
parameter_list|()
block|{
return|return
name|counter
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
DECL|method|shardModulo
name|ShardRouting
name|shardModulo
parameter_list|(
name|int
name|shardId
parameter_list|)
block|{
return|return
name|shards
operator|.
name|get
argument_list|(
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|shardId
argument_list|)
operator|%
name|size
argument_list|()
operator|)
argument_list|)
return|;
block|}
comment|/**      *<p>The class can be used from different threads, though not designed to be used concurrently      * from different threads.      */
DECL|class|IndexShardsIterator
class|class
name|IndexShardsIterator
implements|implements
name|ShardsIterator
implements|,
name|Iterator
argument_list|<
name|ShardRouting
argument_list|>
block|{
DECL|field|origIndex
specifier|private
specifier|final
name|int
name|origIndex
decl_stmt|;
DECL|field|index
specifier|private
specifier|volatile
name|int
name|index
decl_stmt|;
DECL|field|counter
specifier|private
specifier|volatile
name|int
name|counter
init|=
literal|0
decl_stmt|;
DECL|method|IndexShardsIterator
specifier|private
name|IndexShardsIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|origIndex
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|iterator
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ShardRouting
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|method|reset
annotation|@
name|Override
specifier|public
name|ShardsIterator
name|reset
parameter_list|()
block|{
name|counter
operator|=
literal|0
expr_stmt|;
name|index
operator|=
name|origIndex
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|hasNext
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|counter
operator|<
name|size
argument_list|()
return|;
block|}
DECL|method|next
annotation|@
name|Override
specifier|public
name|ShardRouting
name|next
parameter_list|()
throws|throws
name|NoSuchElementException
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"No shard found"
argument_list|)
throw|;
block|}
name|counter
operator|++
expr_stmt|;
return|return
name|shardModulo
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
DECL|method|remove
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|size
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|IndexShardRoutingTable
operator|.
name|this
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|sizeActive
annotation|@
name|Override
specifier|public
name|int
name|sizeActive
parameter_list|()
block|{
name|int
name|shardsActive
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|IndexShardRoutingTable
operator|.
name|this
operator|.
name|shards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|active
argument_list|()
condition|)
block|{
name|shardsActive
operator|++
expr_stmt|;
block|}
block|}
return|return
name|shardsActive
return|;
block|}
DECL|method|hasNextActive
annotation|@
name|Override
specifier|public
name|boolean
name|hasNextActive
parameter_list|()
block|{
name|int
name|counter
init|=
name|this
operator|.
name|counter
decl_stmt|;
name|int
name|index
init|=
name|this
operator|.
name|index
decl_stmt|;
while|while
condition|(
name|counter
operator|++
operator|<
name|size
argument_list|()
condition|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|shardModulo
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|active
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|nextActive
annotation|@
name|Override
specifier|public
name|ShardRouting
name|nextActive
parameter_list|()
throws|throws
name|NoSuchElementException
block|{
name|ShardRouting
name|shardRouting
init|=
name|nextActiveOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"No active shard found"
argument_list|)
throw|;
block|}
return|return
name|shardRouting
return|;
block|}
DECL|method|nextActiveOrNull
annotation|@
name|Override
specifier|public
name|ShardRouting
name|nextActiveOrNull
parameter_list|()
throws|throws
name|NoSuchElementException
block|{
name|int
name|counter
init|=
name|this
operator|.
name|counter
decl_stmt|;
name|int
name|index
init|=
name|this
operator|.
name|index
decl_stmt|;
while|while
condition|(
name|counter
operator|++
operator|<
name|size
argument_list|()
condition|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|shardModulo
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|active
argument_list|()
condition|)
block|{
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
name|shardRouting
return|;
block|}
block|}
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|sizeAssigned
annotation|@
name|Override
specifier|public
name|int
name|sizeAssigned
parameter_list|()
block|{
name|int
name|shardsAssigned
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|IndexShardRoutingTable
operator|.
name|this
operator|.
name|shards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|assignedToNode
argument_list|()
condition|)
block|{
name|shardsAssigned
operator|++
expr_stmt|;
block|}
block|}
return|return
name|shardsAssigned
return|;
block|}
DECL|method|hasNextAssigned
annotation|@
name|Override
specifier|public
name|boolean
name|hasNextAssigned
parameter_list|()
block|{
name|int
name|counter
init|=
name|this
operator|.
name|counter
decl_stmt|;
name|int
name|index
init|=
name|this
operator|.
name|index
decl_stmt|;
while|while
condition|(
name|counter
operator|++
operator|<
name|size
argument_list|()
condition|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|shardModulo
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|assignedToNode
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|nextAssigned
annotation|@
name|Override
specifier|public
name|ShardRouting
name|nextAssigned
parameter_list|()
throws|throws
name|NoSuchElementException
block|{
name|ShardRouting
name|shardRouting
init|=
name|nextAssignedOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"No assigned shard found"
argument_list|)
throw|;
block|}
return|return
name|shardRouting
return|;
block|}
DECL|method|nextAssignedOrNull
annotation|@
name|Override
specifier|public
name|ShardRouting
name|nextAssignedOrNull
parameter_list|()
block|{
name|int
name|counter
init|=
name|this
operator|.
name|counter
decl_stmt|;
name|int
name|index
init|=
name|this
operator|.
name|index
decl_stmt|;
while|while
condition|(
name|counter
operator|++
operator|<
name|size
argument_list|()
condition|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|shardModulo
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|assignedToNode
argument_list|()
condition|)
block|{
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
name|shardRouting
return|;
block|}
block|}
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|shardId
annotation|@
name|Override
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|IndexShardRoutingTable
operator|.
name|this
operator|.
name|shardId
argument_list|()
return|;
block|}
DECL|method|equals
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
name|ShardsIterator
name|that
init|=
operator|(
name|ShardsIterator
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|?
operator|!
name|shardId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|shardId
argument_list|()
argument_list|)
else|:
name|that
operator|.
name|shardId
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|hashCode
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|shardId
operator|!=
literal|null
condition|?
name|shardId
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|field|shards
specifier|private
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|IndexShardRoutingTable
name|indexShard
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|indexShard
operator|.
name|shardId
expr_stmt|;
name|this
operator|.
name|shards
operator|=
name|newArrayList
argument_list|(
name|indexShard
operator|.
name|shards
argument_list|)
expr_stmt|;
block|}
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|shards
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
block|}
DECL|method|addShard
specifier|public
name|Builder
name|addShard
parameter_list|(
name|ImmutableShardRouting
name|shardEntry
parameter_list|)
block|{
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
comment|// don't add two that map to the same node id
comment|// we rely on the fact that a node does not have primary and backup of the same shard
if|if
condition|(
name|shard
operator|.
name|assignedToNode
argument_list|()
operator|&&
name|shardEntry
operator|.
name|assignedToNode
argument_list|()
operator|&&
name|shard
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardEntry
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
block|}
name|shards
operator|.
name|add
argument_list|(
name|shardEntry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeShard
specifier|public
name|Builder
name|removeShard
parameter_list|(
name|ShardRouting
name|shardEntry
parameter_list|)
block|{
name|shards
operator|.
name|remove
argument_list|(
name|shardEntry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|IndexShardRoutingTable
name|build
parameter_list|()
block|{
return|return
operator|new
name|IndexShardRoutingTable
argument_list|(
name|shardId
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|shards
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|IndexShardRoutingTable
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|index
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
return|return
name|readFromThin
argument_list|(
name|in
argument_list|,
name|index
argument_list|)
return|;
block|}
DECL|method|readFromThin
specifier|public
specifier|static
name|IndexShardRoutingTable
name|readFromThin
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|String
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|iShardId
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|iShardId
argument_list|)
decl_stmt|;
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ImmutableShardRouting
name|shard
init|=
name|ImmutableShardRouting
operator|.
name|readShardRoutingEntry
argument_list|(
name|in
argument_list|,
name|index
argument_list|,
name|iShardId
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|IndexShardRoutingTable
name|indexShard
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writeToThin
argument_list|(
name|indexShard
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|writeToThin
specifier|public
specifier|static
name|void
name|writeToThin
parameter_list|(
name|IndexShardRoutingTable
name|indexShard
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|indexShard
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|indexShard
operator|.
name|shards
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|entry
range|:
name|indexShard
control|)
block|{
name|entry
operator|.
name|writeToThin
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

