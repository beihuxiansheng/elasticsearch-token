begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|MutableShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_class
DECL|class|ClusterRebalanceNodeAllocation
specifier|public
class|class
name|ClusterRebalanceNodeAllocation
extends|extends
name|NodeAllocation
block|{
DECL|enum|ClusterRebalanceType
specifier|public
specifier|static
enum|enum
name|ClusterRebalanceType
block|{
DECL|enum constant|ALWAYS
name|ALWAYS
block|,
DECL|enum constant|INDICES_PRIMARIES_ACTIVE
name|INDICES_PRIMARIES_ACTIVE
block|,
DECL|enum constant|INDICES_ALL_ACTIVE
name|INDICES_ALL_ACTIVE
block|}
DECL|field|type
specifier|private
specifier|final
name|ClusterRebalanceType
name|type
decl_stmt|;
DECL|method|ClusterRebalanceNodeAllocation
annotation|@
name|Inject
specifier|public
name|ClusterRebalanceNodeAllocation
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|String
name|allowRebalance
init|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"allow_rebalance"
argument_list|,
literal|"indices_all_active"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"always"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
condition|)
block|{
name|type
operator|=
name|ClusterRebalanceType
operator|.
name|ALWAYS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"indices_primaries_active"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
operator|||
literal|"indicesPrimariesActive"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
condition|)
block|{
name|type
operator|=
name|ClusterRebalanceType
operator|.
name|INDICES_PRIMARIES_ACTIVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"indices_all_active"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
operator|||
literal|"indicesAllActive"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
condition|)
block|{
name|type
operator|=
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[cluster.routing.allocation.allow_rebalance] has a wrong value {}, defaulting to 'indices_all_active'"
argument_list|,
name|allowRebalance
argument_list|)
expr_stmt|;
name|type
operator|=
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"using [allow_rebalance] with [{}]"
argument_list|,
name|type
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|canRebalance
annotation|@
name|Override
specifier|public
name|boolean
name|canRebalance
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|ClusterRebalanceType
operator|.
name|INDICES_PRIMARIES_ACTIVE
condition|)
block|{
for|for
control|(
name|MutableShardRouting
name|shard
range|:
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|RoutingNode
name|node
range|:
name|allocation
operator|.
name|routingNodes
argument_list|()
control|)
block|{
for|for
control|(
name|MutableShardRouting
name|shard
range|:
name|node
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
operator|&&
operator|!
name|shard
operator|.
name|active
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|type
operator|==
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
condition|)
block|{
if|if
condition|(
operator|!
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|RoutingNode
name|node
range|:
name|allocation
operator|.
name|routingNodes
argument_list|()
control|)
block|{
for|for
control|(
name|MutableShardRouting
name|shard
range|:
name|node
control|)
block|{
if|if
condition|(
operator|!
name|shard
operator|.
name|active
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
comment|// type == Type.ALWAYS
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

