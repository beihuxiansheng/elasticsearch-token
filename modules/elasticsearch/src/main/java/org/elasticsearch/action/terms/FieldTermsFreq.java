begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|trove
operator|.
name|ExtTObjectIntHasMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|terms
operator|.
name|TermFreq
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * All the {@link TermFreq}s that occur in a specific field.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|FieldTermsFreq
specifier|public
class|class
name|FieldTermsFreq
implements|implements
name|Streamable
implements|,
name|Iterable
argument_list|<
name|TermFreq
argument_list|>
block|{
DECL|field|fieldName
specifier|private
name|String
name|fieldName
decl_stmt|;
DECL|field|termsFreqs
specifier|private
name|TermFreq
index|[]
name|termsFreqs
decl_stmt|;
DECL|field|termsFreqMap
specifier|private
specifier|transient
name|ExtTObjectIntHasMap
argument_list|<
name|Object
argument_list|>
name|termsFreqMap
decl_stmt|;
DECL|method|FieldTermsFreq
specifier|private
name|FieldTermsFreq
parameter_list|()
block|{      }
DECL|method|FieldTermsFreq
name|FieldTermsFreq
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TermFreq
index|[]
name|termsFreqs
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|termsFreqs
operator|=
name|termsFreqs
expr_stmt|;
block|}
comment|/**      * The fields name.      */
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldName
return|;
block|}
comment|/**      * The term frequencies of the field.      */
DECL|method|termsFreqs
specifier|public
name|TermFreq
index|[]
name|termsFreqs
parameter_list|()
block|{
return|return
name|this
operator|.
name|termsFreqs
return|;
block|}
comment|/**      * Returns the document frequency of a term,<tt>-1</tt> if the term does not exists.      */
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|(
name|Object
name|term
parameter_list|)
block|{
comment|// we use "toString" on the term so we get hits when we the termValue is Long, and we lookup with int
if|if
condition|(
name|termsFreqMap
operator|==
literal|null
condition|)
block|{
name|ExtTObjectIntHasMap
argument_list|<
name|Object
argument_list|>
name|termsFreqMap
init|=
operator|new
name|ExtTObjectIntHasMap
argument_list|<
name|Object
argument_list|>
argument_list|()
operator|.
name|defaultReturnValue
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|TermFreq
name|termFreq
range|:
name|termsFreqs
control|)
block|{
name|termsFreqMap
operator|.
name|put
argument_list|(
name|termFreq
operator|.
name|term
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|termFreq
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|termsFreqMap
operator|=
name|termsFreqMap
expr_stmt|;
block|}
return|return
name|termsFreqMap
operator|.
name|get
argument_list|(
name|term
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|iterator
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|TermFreq
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|forArray
argument_list|(
name|termsFreqs
argument_list|)
return|;
block|}
DECL|method|readFieldTermsFreq
specifier|public
specifier|static
name|FieldTermsFreq
name|readFieldTermsFreq
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldTermsFreq
name|fieldTermsFreq
init|=
operator|new
name|FieldTermsFreq
argument_list|()
decl_stmt|;
name|fieldTermsFreq
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|fieldTermsFreq
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|fieldName
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|termsFreqs
operator|=
operator|new
name|TermFreq
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|termsFreqs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|termsFreqs
index|[
name|i
index|]
operator|=
name|readTermFreq
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|termsFreqs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|TermFreq
name|termFreq
range|:
name|termsFreqs
control|)
block|{
name|termFreq
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

