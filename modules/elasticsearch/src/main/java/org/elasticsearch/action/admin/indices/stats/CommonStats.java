begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|flush
operator|.
name|FlushStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|IndexingStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|MergeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|refresh
operator|.
name|RefreshStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|DocsStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreStats
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|CommonStats
specifier|public
class|class
name|CommonStats
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|docs
annotation|@
name|Nullable
name|DocsStats
name|docs
decl_stmt|;
DECL|field|store
annotation|@
name|Nullable
name|StoreStats
name|store
decl_stmt|;
DECL|field|indexing
annotation|@
name|Nullable
name|IndexingStats
name|indexing
decl_stmt|;
DECL|field|get
annotation|@
name|Nullable
name|GetStats
name|get
decl_stmt|;
DECL|field|merge
annotation|@
name|Nullable
name|MergeStats
name|merge
decl_stmt|;
DECL|field|refresh
annotation|@
name|Nullable
name|RefreshStats
name|refresh
decl_stmt|;
DECL|field|flush
annotation|@
name|Nullable
name|FlushStats
name|flush
decl_stmt|;
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|CommonStats
name|stats
parameter_list|)
block|{
if|if
condition|(
name|docs
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|docs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|docs
operator|=
operator|new
name|DocsStats
argument_list|()
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|stats
operator|.
name|docs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|docs
operator|.
name|add
argument_list|(
name|stats
operator|.
name|docs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|store
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|store
operator|=
operator|new
name|StoreStats
argument_list|()
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|stats
operator|.
name|store
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|store
operator|.
name|add
argument_list|(
name|stats
operator|.
name|store
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexing
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|indexing
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|indexing
operator|=
operator|new
name|IndexingStats
argument_list|()
expr_stmt|;
name|indexing
operator|.
name|add
argument_list|(
name|stats
operator|.
name|indexing
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|indexing
operator|.
name|add
argument_list|(
name|stats
operator|.
name|indexing
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|get
operator|=
operator|new
name|GetStats
argument_list|()
expr_stmt|;
name|get
operator|.
name|add
argument_list|(
name|stats
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|get
operator|.
name|add
argument_list|(
name|stats
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|merge
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|merge
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|merge
operator|=
operator|new
name|MergeStats
argument_list|()
expr_stmt|;
name|merge
operator|.
name|add
argument_list|(
name|stats
operator|.
name|merge
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|merge
operator|.
name|add
argument_list|(
name|stats
operator|.
name|merge
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|refresh
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|refresh
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|refresh
operator|=
operator|new
name|RefreshStats
argument_list|()
expr_stmt|;
name|refresh
operator|.
name|add
argument_list|(
name|stats
operator|.
name|refresh
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|refresh
operator|.
name|add
argument_list|(
name|stats
operator|.
name|refresh
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flush
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|flush
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|flush
operator|=
operator|new
name|FlushStats
argument_list|()
expr_stmt|;
name|flush
operator|.
name|add
argument_list|(
name|stats
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|flush
operator|.
name|add
argument_list|(
name|stats
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|docs
annotation|@
name|Nullable
specifier|public
name|DocsStats
name|docs
parameter_list|()
block|{
return|return
name|this
operator|.
name|docs
return|;
block|}
DECL|method|getDocs
annotation|@
name|Nullable
specifier|public
name|DocsStats
name|getDocs
parameter_list|()
block|{
return|return
name|this
operator|.
name|docs
return|;
block|}
DECL|method|store
annotation|@
name|Nullable
specifier|public
name|StoreStats
name|store
parameter_list|()
block|{
return|return
name|store
return|;
block|}
DECL|method|getStore
annotation|@
name|Nullable
specifier|public
name|StoreStats
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
DECL|method|indexing
annotation|@
name|Nullable
specifier|public
name|IndexingStats
name|indexing
parameter_list|()
block|{
return|return
name|indexing
return|;
block|}
DECL|method|getIndexing
annotation|@
name|Nullable
specifier|public
name|IndexingStats
name|getIndexing
parameter_list|()
block|{
return|return
name|indexing
return|;
block|}
DECL|method|get
annotation|@
name|Nullable
specifier|public
name|GetStats
name|get
parameter_list|()
block|{
return|return
name|get
return|;
block|}
DECL|method|getGet
annotation|@
name|Nullable
specifier|public
name|GetStats
name|getGet
parameter_list|()
block|{
return|return
name|get
return|;
block|}
DECL|method|merge
annotation|@
name|Nullable
specifier|public
name|MergeStats
name|merge
parameter_list|()
block|{
return|return
name|merge
return|;
block|}
DECL|method|getMerge
annotation|@
name|Nullable
specifier|public
name|MergeStats
name|getMerge
parameter_list|()
block|{
return|return
name|merge
return|;
block|}
DECL|method|refresh
annotation|@
name|Nullable
specifier|public
name|RefreshStats
name|refresh
parameter_list|()
block|{
return|return
name|refresh
return|;
block|}
DECL|method|getRefresh
annotation|@
name|Nullable
specifier|public
name|RefreshStats
name|getRefresh
parameter_list|()
block|{
return|return
name|refresh
return|;
block|}
DECL|method|flush
annotation|@
name|Nullable
specifier|public
name|FlushStats
name|flush
parameter_list|()
block|{
return|return
name|flush
return|;
block|}
DECL|method|getFlush
annotation|@
name|Nullable
specifier|public
name|FlushStats
name|getFlush
parameter_list|()
block|{
return|return
name|flush
return|;
block|}
DECL|method|readCommonStats
specifier|public
specifier|static
name|CommonStats
name|readCommonStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|CommonStats
name|stats
init|=
operator|new
name|CommonStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|docs
operator|=
name|DocsStats
operator|.
name|readDocStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|store
operator|=
name|StoreStats
operator|.
name|readStoreStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|indexing
operator|=
name|IndexingStats
operator|.
name|readIndexingStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|get
operator|=
name|GetStats
operator|.
name|readGetStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|merge
operator|=
name|MergeStats
operator|.
name|readMergeStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|refresh
operator|=
name|RefreshStats
operator|.
name|readRefreshStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|flush
operator|=
name|FlushStats
operator|.
name|readFlushStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|docs
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|docs
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexing
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|indexing
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|get
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|merge
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|merge
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|refresh
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|refresh
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flush
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|flush
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|// note, requires a wrapping object
DECL|method|toXContent
annotation|@
name|Override
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|docs
operator|!=
literal|null
condition|)
block|{
name|docs
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexing
operator|!=
literal|null
condition|)
block|{
name|indexing
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|!=
literal|null
condition|)
block|{
name|get
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|merge
operator|!=
literal|null
condition|)
block|{
name|merge
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|refresh
operator|!=
literal|null
condition|)
block|{
name|refresh
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flush
operator|!=
literal|null
condition|)
block|{
name|flush
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

