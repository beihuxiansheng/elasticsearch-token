begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.status
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|status
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|MergeStats
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|IndexStatus
specifier|public
class|class
name|IndexStatus
implements|implements
name|Iterable
argument_list|<
name|IndexShardStatus
argument_list|>
block|{
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|indexShards
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|IndexShardStatus
argument_list|>
name|indexShards
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|method|IndexStatus
name|IndexStatus
parameter_list|(
name|String
name|index
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|ShardStatus
index|[]
name|shards
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|ShardStatus
argument_list|>
argument_list|>
name|tmpIndexShards
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardStatus
name|shard
range|:
name|shards
control|)
block|{
name|List
argument_list|<
name|ShardStatus
argument_list|>
name|lst
init|=
name|tmpIndexShards
operator|.
name|get
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
condition|)
block|{
name|lst
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
name|tmpIndexShards
operator|.
name|put
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
name|lst
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
name|indexShards
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|ShardStatus
argument_list|>
argument_list|>
name|entry
range|:
name|tmpIndexShards
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|indexShards
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|IndexShardStatus
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardRouting
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ShardStatus
index|[
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|index
argument_list|()
return|;
block|}
comment|/**      * A shard id to index shard status map (note, index shard status is the replication shard group that maps      * to the shard id).      */
DECL|method|shards
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|IndexShardStatus
argument_list|>
name|shards
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexShards
return|;
block|}
DECL|method|getShards
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|IndexShardStatus
argument_list|>
name|getShards
parameter_list|()
block|{
return|return
name|shards
argument_list|()
return|;
block|}
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
DECL|method|getSettings
specifier|public
name|Settings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
argument_list|()
return|;
block|}
comment|/**      * Returns only the primary shards store size in bytes.      */
DECL|method|primaryStoreSize
specifier|public
name|ByteSizeValue
name|primaryStoreSize
parameter_list|()
block|{
name|long
name|bytes
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|IndexShardStatus
name|shard
range|:
name|this
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|primaryStoreSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bytes
operator|==
operator|-
literal|1
condition|)
block|{
name|bytes
operator|=
literal|0
expr_stmt|;
block|}
name|bytes
operator|+=
name|shard
operator|.
name|primaryStoreSize
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bytes
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**      * Returns only the primary shards store size in bytes.      */
DECL|method|getPrimaryStoreSize
specifier|public
name|ByteSizeValue
name|getPrimaryStoreSize
parameter_list|()
block|{
return|return
name|primaryStoreSize
argument_list|()
return|;
block|}
comment|/**      * Returns the full store size in bytes, of both primaries and replicas.      */
DECL|method|storeSize
specifier|public
name|ByteSizeValue
name|storeSize
parameter_list|()
block|{
name|long
name|bytes
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|IndexShardStatus
name|shard
range|:
name|this
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|storeSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bytes
operator|==
operator|-
literal|1
condition|)
block|{
name|bytes
operator|=
literal|0
expr_stmt|;
block|}
name|bytes
operator|+=
name|shard
operator|.
name|storeSize
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bytes
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**      * Returns the full store size in bytes, of both primaries and replicas.      */
DECL|method|getStoreSize
specifier|public
name|ByteSizeValue
name|getStoreSize
parameter_list|()
block|{
return|return
name|storeSize
argument_list|()
return|;
block|}
DECL|method|translogOperations
specifier|public
name|long
name|translogOperations
parameter_list|()
block|{
name|long
name|translogOperations
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|IndexShardStatus
name|shard
range|:
name|this
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|translogOperations
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|translogOperations
operator|==
operator|-
literal|1
condition|)
block|{
name|translogOperations
operator|=
literal|0
expr_stmt|;
block|}
name|translogOperations
operator|+=
name|shard
operator|.
name|translogOperations
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|translogOperations
return|;
block|}
DECL|method|getTranslogOperations
specifier|public
name|long
name|getTranslogOperations
parameter_list|()
block|{
return|return
name|translogOperations
argument_list|()
return|;
block|}
DECL|field|docs
specifier|private
specifier|transient
name|DocsStatus
name|docs
decl_stmt|;
DECL|method|docs
specifier|public
name|DocsStatus
name|docs
parameter_list|()
block|{
if|if
condition|(
name|docs
operator|!=
literal|null
condition|)
block|{
return|return
name|docs
return|;
block|}
name|DocsStatus
name|docs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|IndexShardStatus
name|shard
range|:
name|this
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|docs
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|docs
operator|==
literal|null
condition|)
block|{
name|docs
operator|=
operator|new
name|DocsStatus
argument_list|()
expr_stmt|;
block|}
name|docs
operator|.
name|numDocs
operator|+=
name|shard
operator|.
name|docs
argument_list|()
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|docs
operator|.
name|maxDoc
operator|+=
name|shard
operator|.
name|docs
argument_list|()
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|docs
operator|.
name|deletedDocs
operator|+=
name|shard
operator|.
name|docs
argument_list|()
operator|.
name|deletedDocs
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
return|return
name|docs
return|;
block|}
DECL|method|getDocs
specifier|public
name|DocsStatus
name|getDocs
parameter_list|()
block|{
return|return
name|docs
argument_list|()
return|;
block|}
comment|/**      * Total merges of this index.      */
DECL|method|mergeStats
specifier|public
name|MergeStats
name|mergeStats
parameter_list|()
block|{
name|MergeStats
name|mergeStats
init|=
operator|new
name|MergeStats
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexShardStatus
name|shard
range|:
name|this
control|)
block|{
name|mergeStats
operator|.
name|add
argument_list|(
name|shard
operator|.
name|mergeStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mergeStats
return|;
block|}
comment|/**      * Total merges of this index.      */
DECL|method|getMergeStats
specifier|public
name|MergeStats
name|getMergeStats
parameter_list|()
block|{
return|return
name|this
operator|.
name|mergeStats
argument_list|()
return|;
block|}
DECL|method|iterator
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|IndexShardStatus
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|indexShards
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

