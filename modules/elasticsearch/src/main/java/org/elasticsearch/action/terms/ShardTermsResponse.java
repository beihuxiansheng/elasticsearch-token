begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastShardOperationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
operator|.
name|TObjectIntHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|gnu
operator|.
name|trove
operator|.
name|TObjectIntIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|ShardTermsResponse
specifier|public
class|class
name|ShardTermsResponse
extends|extends
name|BroadcastShardOperationResponse
block|{
DECL|field|fieldsTermsFreqs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TObjectIntHashMap
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldsTermsFreqs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TObjectIntHashMap
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|field|numDeletedDocs
specifier|private
name|int
name|numDeletedDocs
decl_stmt|;
DECL|method|ShardTermsResponse
name|ShardTermsResponse
parameter_list|()
block|{     }
DECL|method|ShardTermsResponse
name|ShardTermsResponse
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|int
name|numDeletedDocs
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|numDeletedDocs
operator|=
name|numDeletedDocs
expr_stmt|;
block|}
DECL|method|numDocs
name|int
name|numDocs
parameter_list|()
block|{
return|return
name|this
operator|.
name|numDocs
return|;
block|}
DECL|method|maxDoc
name|int
name|maxDoc
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxDoc
return|;
block|}
DECL|method|numDeletedDocs
name|int
name|numDeletedDocs
parameter_list|()
block|{
return|return
name|this
operator|.
name|numDeletedDocs
return|;
block|}
DECL|method|put
name|void
name|put
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TObjectIntHashMap
argument_list|<
name|String
argument_list|>
name|termsFreqs
parameter_list|)
block|{
name|fieldsTermsFreqs
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|termsFreqs
argument_list|)
expr_stmt|;
block|}
DECL|method|fieldsTermsFreqs
name|Map
argument_list|<
name|String
argument_list|,
name|TObjectIntHashMap
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldsTermsFreqs
parameter_list|()
block|{
return|return
name|fieldsTermsFreqs
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|numDocs
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|maxDoc
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|numDeletedDocs
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldName
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|TObjectIntHashMap
argument_list|<
name|String
argument_list|>
name|termsFreq
init|=
operator|new
name|TObjectIntHashMap
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|size1
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size1
condition|;
name|j
operator|++
control|)
block|{
name|termsFreq
operator|.
name|put
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fieldsTermsFreqs
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|termsFreq
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|numDeletedDocs
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|fieldsTermsFreqs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TObjectIntHashMap
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|fieldsTermsFreqs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TObjectIntIterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

