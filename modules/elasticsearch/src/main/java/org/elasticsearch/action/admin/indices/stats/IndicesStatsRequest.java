begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastOperationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A request to get indices level stats. Allow to enable different stats to be returned.  *  *<p>By default, the {@link #docs(boolean)}, {@link #store(boolean)}, {@link #indexing(boolean)}  * are enabled. Other stats can be enabled as well.  *  *<p>All the stats to be returned can be cleared using {@link #clear()}, at which point, specific  * stats can be enabled.  */
end_comment

begin_class
DECL|class|IndicesStatsRequest
specifier|public
class|class
name|IndicesStatsRequest
extends|extends
name|BroadcastOperationRequest
block|{
DECL|field|docs
specifier|private
name|boolean
name|docs
init|=
literal|true
decl_stmt|;
DECL|field|store
specifier|private
name|boolean
name|store
init|=
literal|true
decl_stmt|;
DECL|field|indexing
specifier|private
name|boolean
name|indexing
init|=
literal|true
decl_stmt|;
DECL|field|get
specifier|private
name|boolean
name|get
init|=
literal|true
decl_stmt|;
DECL|field|merge
specifier|private
name|boolean
name|merge
init|=
literal|false
decl_stmt|;
DECL|field|refresh
specifier|private
name|boolean
name|refresh
init|=
literal|false
decl_stmt|;
DECL|field|flush
specifier|private
name|boolean
name|flush
init|=
literal|false
decl_stmt|;
DECL|field|types
specifier|private
name|String
index|[]
name|types
init|=
literal|null
decl_stmt|;
DECL|method|indices
specifier|public
name|IndicesStatsRequest
name|indices
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Clears all stats.      */
DECL|method|clear
specifier|public
name|IndicesStatsRequest
name|clear
parameter_list|()
block|{
name|docs
operator|=
literal|false
expr_stmt|;
name|store
operator|=
literal|false
expr_stmt|;
name|get
operator|=
literal|false
expr_stmt|;
name|indexing
operator|=
literal|false
expr_stmt|;
name|merge
operator|=
literal|false
expr_stmt|;
name|refresh
operator|=
literal|false
expr_stmt|;
name|flush
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Document types to return stats for. Mainly affects {@link #indexing(boolean)} when      * enabled, returning specific indexing stats for those types.      */
DECL|method|types
specifier|public
name|IndicesStatsRequest
name|types
parameter_list|(
name|String
modifier|...
name|types
parameter_list|)
block|{
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Document types to return stats for. Mainly affects {@link #indexing(boolean)} when      * enabled, returning specific indexing stats for those types.      */
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
name|this
operator|.
name|types
return|;
block|}
DECL|method|docs
specifier|public
name|IndicesStatsRequest
name|docs
parameter_list|(
name|boolean
name|docs
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|docs
specifier|public
name|boolean
name|docs
parameter_list|()
block|{
return|return
name|this
operator|.
name|docs
return|;
block|}
DECL|method|store
specifier|public
name|IndicesStatsRequest
name|store
parameter_list|(
name|boolean
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|store
specifier|public
name|boolean
name|store
parameter_list|()
block|{
return|return
name|this
operator|.
name|store
return|;
block|}
DECL|method|indexing
specifier|public
name|IndicesStatsRequest
name|indexing
parameter_list|(
name|boolean
name|indexing
parameter_list|)
block|{
name|this
operator|.
name|indexing
operator|=
name|indexing
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|indexing
specifier|public
name|boolean
name|indexing
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexing
return|;
block|}
DECL|method|get
specifier|public
name|IndicesStatsRequest
name|get
parameter_list|(
name|boolean
name|get
parameter_list|)
block|{
name|this
operator|.
name|get
operator|=
name|get
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
return|;
block|}
DECL|method|merge
specifier|public
name|IndicesStatsRequest
name|merge
parameter_list|(
name|boolean
name|merge
parameter_list|)
block|{
name|this
operator|.
name|merge
operator|=
name|merge
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|merge
specifier|public
name|boolean
name|merge
parameter_list|()
block|{
return|return
name|this
operator|.
name|merge
return|;
block|}
DECL|method|refresh
specifier|public
name|IndicesStatsRequest
name|refresh
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
name|this
operator|.
name|refresh
operator|=
name|refresh
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|refresh
specifier|public
name|boolean
name|refresh
parameter_list|()
block|{
return|return
name|this
operator|.
name|refresh
return|;
block|}
DECL|method|flush
specifier|public
name|IndicesStatsRequest
name|flush
parameter_list|(
name|boolean
name|flush
parameter_list|)
block|{
name|this
operator|.
name|flush
operator|=
name|flush
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|flush
specifier|public
name|boolean
name|flush
parameter_list|()
block|{
return|return
name|this
operator|.
name|flush
return|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|indexing
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|flush
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|types
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|docs
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|store
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|indexing
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|get
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|merge
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|flush
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|refresh
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|types
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

