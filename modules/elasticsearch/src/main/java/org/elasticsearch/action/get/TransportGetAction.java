begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.get
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TransportActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|single
operator|.
name|shard
operator|.
name|TransportShardSingleOperationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|BytesHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|UidField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMappers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|selector
operator|.
name|FieldMappersFieldSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SourceLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Performs the get operation.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|TransportGetAction
specifier|public
class|class
name|TransportGetAction
extends|extends
name|TransportShardSingleOperationAction
argument_list|<
name|GetRequest
argument_list|,
name|GetResponse
argument_list|>
block|{
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|realtime
specifier|private
specifier|final
name|boolean
name|realtime
decl_stmt|;
DECL|method|TransportGetAction
annotation|@
name|Inject
specifier|public
name|TransportGetAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|realtime
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"action.get.realtime"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|executor
annotation|@
name|Override
specifier|protected
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
DECL|method|transportAction
annotation|@
name|Override
specifier|protected
name|String
name|transportAction
parameter_list|()
block|{
return|return
name|TransportActions
operator|.
name|GET
return|;
block|}
DECL|method|transportShardAction
annotation|@
name|Override
specifier|protected
name|String
name|transportShardAction
parameter_list|()
block|{
return|return
literal|"indices/get/shard"
return|;
block|}
DECL|method|checkBlock
annotation|@
name|Override
specifier|protected
name|void
name|checkBlock
parameter_list|(
name|GetRequest
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indexBlockedRaiseException
argument_list|(
name|ClusterBlockLevel
operator|.
name|READ
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|shards
annotation|@
name|Override
specifier|protected
name|ShardIterator
name|shards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|GetRequest
name|request
parameter_list|)
block|{
return|return
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|getShards
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|routing
argument_list|()
argument_list|,
name|request
operator|.
name|preference
argument_list|()
argument_list|)
return|;
block|}
DECL|method|doExecute
annotation|@
name|Override
specifier|protected
name|void
name|doExecute
parameter_list|(
name|GetRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|GetResponse
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|realtime
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|realtime
operator|=
name|this
operator|.
name|realtime
expr_stmt|;
block|}
comment|// update the routing (request#index here is possibly an alias)
name|MetaData
name|metaData
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|request
operator|.
name|routing
argument_list|(
name|metaData
operator|.
name|resolveIndexRouting
argument_list|(
name|request
operator|.
name|routing
argument_list|()
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|doExecute
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|shardOperation
annotation|@
name|Override
specifier|protected
name|GetResponse
name|shardOperation
parameter_list|(
name|GetRequest
name|request
parameter_list|,
name|int
name|shardId
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|shardSafe
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|refresh
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|realtime
argument_list|()
condition|)
block|{
name|indexShard
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|load
argument_list|(
name|logger
argument_list|,
name|scriptService
argument_list|,
name|indexService
argument_list|,
name|indexShard
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|fields
argument_list|()
argument_list|,
name|request
operator|.
name|realtime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|load
specifier|public
specifier|static
name|GetResponse
name|load
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|IndexService
name|indexService
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
index|[]
name|gFields
parameter_list|,
name|boolean
name|realtime
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|Engine
operator|.
name|GetResult
name|get
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"_all"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|typeX
range|:
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|types
argument_list|()
control|)
block|{
name|get
operator|=
name|indexShard
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
name|realtime
argument_list|,
name|UidFieldMapper
operator|.
name|TERM_FACTORY
operator|.
name|createTerm
argument_list|(
name|Uid
operator|.
name|createUid
argument_list|(
name|typeX
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|get
operator|.
name|exists
argument_list|()
condition|)
block|{
name|type
operator|=
name|typeX
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|get
operator|==
literal|null
operator|||
operator|!
name|get
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|GetResponse
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|get
operator|=
name|indexShard
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
name|realtime
argument_list|,
name|UidFieldMapper
operator|.
name|TERM_FACTORY
operator|.
name|createTerm
argument_list|(
name|Uid
operator|.
name|createUid
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|get
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|GetResponse
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
name|DocumentMapper
name|docMapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|GetResponse
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
try|try
block|{
comment|// break between having loaded it from translog (so we only have _source), and having a document to load
if|if
condition|(
name|get
operator|.
name|docIdAndVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|source
init|=
literal|null
decl_stmt|;
name|UidField
operator|.
name|DocIdAndVersion
name|docIdAndVersion
init|=
name|get
operator|.
name|docIdAndVersion
argument_list|()
decl_stmt|;
name|FieldSelector
name|fieldSelector
init|=
name|buildFieldSelectors
argument_list|(
name|docMapper
argument_list|,
name|gFields
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldSelector
operator|!=
literal|null
condition|)
block|{
name|Document
name|doc
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|docIdAndVersion
operator|.
name|reader
operator|.
name|document
argument_list|(
name|docIdAndVersion
operator|.
name|docId
argument_list|,
name|fieldSelector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"Failed to get type ["
operator|+
name|type
operator|+
literal|"] and id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|source
operator|=
name|extractSource
argument_list|(
name|doc
argument_list|,
name|docMapper
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|oField
range|:
name|doc
operator|.
name|getFields
argument_list|()
control|)
block|{
name|Fieldable
name|field
init|=
operator|(
name|Fieldable
operator|)
name|oField
decl_stmt|;
name|String
name|name
init|=
name|field
operator|.
name|name
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
name|FieldMappers
name|fieldMappers
init|=
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|indexName
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
name|FieldMapper
name|mapper
init|=
name|fieldMappers
operator|.
name|mapper
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
expr_stmt|;
name|value
operator|=
name|mapper
operator|.
name|valueForSearch
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|isBinary
argument_list|()
condition|)
block|{
name|value
operator|=
name|field
operator|.
name|getBinaryValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|field
operator|.
name|stringValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
name|newHashMapWithExpectedSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|GetField
name|getField
init|=
name|fields
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|getField
operator|==
literal|null
condition|)
block|{
name|getField
operator|=
operator|new
name|GetField
argument_list|(
name|name
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|getField
argument_list|)
expr_stmt|;
block|}
name|getField
operator|.
name|values
argument_list|()
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now, go and do the script thingy if needed
if|if
condition|(
name|gFields
operator|!=
literal|null
operator|&&
name|gFields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|SearchLookup
name|searchLookup
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|gFields
control|)
block|{
name|String
name|script
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|contains
argument_list|(
literal|"_source."
argument_list|)
operator|||
name|field
operator|.
name|contains
argument_list|(
literal|"doc["
argument_list|)
condition|)
block|{
name|script
operator|=
name|field
expr_stmt|;
block|}
else|else
block|{
name|FieldMappers
name|x
init|=
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
operator|!
name|x
operator|.
name|mapper
argument_list|()
operator|.
name|stored
argument_list|()
condition|)
block|{
name|script
operator|=
literal|"_source."
operator|+
name|x
operator|.
name|mapper
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|script
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|searchLookup
operator|==
literal|null
condition|)
block|{
name|searchLookup
operator|=
operator|new
name|SearchLookup
argument_list|(
name|indexService
operator|.
name|mapperService
argument_list|()
argument_list|,
name|indexService
operator|.
name|cache
argument_list|()
operator|.
name|fieldData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SearchScript
name|searchScript
init|=
name|scriptService
operator|.
name|search
argument_list|(
name|searchLookup
argument_list|,
literal|"mvel"
argument_list|,
name|script
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|searchScript
operator|.
name|setNextReader
argument_list|(
name|docIdAndVersion
operator|.
name|reader
argument_list|)
expr_stmt|;
name|searchScript
operator|.
name|setNextDocId
argument_list|(
name|docIdAndVersion
operator|.
name|docId
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|value
init|=
name|searchScript
operator|.
name|run
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
name|newHashMapWithExpectedSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|GetField
name|getField
init|=
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|getField
operator|==
literal|null
condition|)
block|{
name|getField
operator|=
operator|new
name|GetField
argument_list|(
name|field
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|getField
argument_list|)
expr_stmt|;
block|}
name|getField
operator|.
name|values
argument_list|()
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to execute get request script field [{}]"
argument_list|,
name|e
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
comment|// ignore
block|}
block|}
block|}
block|}
return|return
operator|new
name|GetResponse
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|,
name|get
operator|.
name|exists
argument_list|()
argument_list|,
name|source
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BytesHolder
argument_list|(
name|source
argument_list|)
argument_list|,
name|fields
argument_list|)
return|;
block|}
else|else
block|{
name|BytesHolder
name|source
init|=
name|get
operator|.
name|source
argument_list|()
decl_stmt|;
assert|assert
name|source
operator|!=
literal|null
assert|;
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
name|boolean
name|sourceRequested
init|=
literal|false
decl_stmt|;
comment|// we can only load scripts that can run against the source
if|if
condition|(
name|gFields
operator|!=
literal|null
operator|&&
name|gFields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
init|=
name|SourceLookup
operator|.
name|sourceAsMap
argument_list|(
name|source
operator|.
name|bytes
argument_list|()
argument_list|,
name|source
operator|.
name|offset
argument_list|()
argument_list|,
name|source
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|SearchLookup
name|searchLookup
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|gFields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"_source"
argument_list|)
condition|)
block|{
name|sourceRequested
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|String
name|script
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|contains
argument_list|(
literal|"_source."
argument_list|)
condition|)
block|{
name|script
operator|=
name|field
expr_stmt|;
block|}
else|else
block|{
name|FieldMappers
name|x
init|=
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|script
operator|=
literal|"_source."
operator|+
name|x
operator|.
name|mapper
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|script
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|searchLookup
operator|==
literal|null
condition|)
block|{
name|searchLookup
operator|=
operator|new
name|SearchLookup
argument_list|(
name|indexService
operator|.
name|mapperService
argument_list|()
argument_list|,
name|indexService
operator|.
name|cache
argument_list|()
operator|.
name|fieldData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SearchScript
name|searchScript
init|=
name|scriptService
operator|.
name|search
argument_list|(
name|searchLookup
argument_list|,
literal|"mvel"
argument_list|,
name|script
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// we can't do this, only allow to run scripts against the source
comment|//searchScript.setNextReader(docIdAndVersion.reader);
comment|//searchScript.setNextDocId(docIdAndVersion.docId);
comment|// but, we need to inject the parsed source into the script, so it will be used...
name|searchScript
operator|.
name|setNextSource
argument_list|(
name|sourceAsMap
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|value
init|=
name|searchScript
operator|.
name|run
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
name|newHashMapWithExpectedSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|GetField
name|getField
init|=
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|getField
operator|==
literal|null
condition|)
block|{
name|getField
operator|=
operator|new
name|GetField
argument_list|(
name|field
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|getField
argument_list|)
expr_stmt|;
block|}
name|getField
operator|.
name|values
argument_list|()
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to execute get request script field [{}]"
argument_list|,
name|e
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
comment|// ignore
block|}
block|}
block|}
block|}
else|else
block|{
name|sourceRequested
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|new
name|GetResponse
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|,
name|get
operator|.
name|exists
argument_list|()
argument_list|,
name|sourceRequested
condition|?
name|source
else|:
literal|null
argument_list|,
name|fields
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|get
operator|.
name|searcher
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|get
operator|.
name|searcher
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|buildFieldSelectors
specifier|private
specifier|static
name|FieldSelector
name|buildFieldSelectors
parameter_list|(
name|DocumentMapper
name|docMapper
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
return|return
name|docMapper
operator|.
name|sourceMapper
argument_list|()
operator|.
name|fieldSelector
argument_list|()
return|;
block|}
comment|// don't load anything
if|if
condition|(
name|fields
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FieldMappersFieldSelector
name|fieldSelector
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fields
control|)
block|{
name|FieldMappers
name|x
init|=
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|x
operator|.
name|mapper
argument_list|()
operator|.
name|stored
argument_list|()
condition|)
block|{
if|if
condition|(
name|fieldSelector
operator|==
literal|null
condition|)
block|{
name|fieldSelector
operator|=
operator|new
name|FieldMappersFieldSelector
argument_list|()
expr_stmt|;
block|}
name|fieldSelector
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fieldSelector
return|;
block|}
DECL|method|extractSource
specifier|private
specifier|static
name|byte
index|[]
name|extractSource
parameter_list|(
name|Document
name|doc
parameter_list|,
name|DocumentMapper
name|documentMapper
parameter_list|)
block|{
name|byte
index|[]
name|source
init|=
literal|null
decl_stmt|;
name|Fieldable
name|sourceField
init|=
name|doc
operator|.
name|getFieldable
argument_list|(
name|documentMapper
operator|.
name|sourceMapper
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceField
operator|!=
literal|null
condition|)
block|{
name|source
operator|=
name|documentMapper
operator|.
name|sourceMapper
argument_list|()
operator|.
name|nativeValue
argument_list|(
name|sourceField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|removeField
argument_list|(
name|documentMapper
operator|.
name|sourceMapper
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|source
return|;
block|}
DECL|method|newRequest
annotation|@
name|Override
specifier|protected
name|GetRequest
name|newRequest
parameter_list|()
block|{
return|return
operator|new
name|GetRequest
argument_list|()
return|;
block|}
DECL|method|newResponse
annotation|@
name|Override
specifier|protected
name|GetResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|GetResponse
argument_list|()
return|;
block|}
block|}
end_class

end_unit

