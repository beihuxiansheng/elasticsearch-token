begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|Actions
specifier|public
class|class
name|Actions
block|{
DECL|method|addValidationError
specifier|public
specifier|static
name|ActionRequestValidationException
name|addValidationError
parameter_list|(
name|String
name|error
parameter_list|,
name|ActionRequestValidationException
name|validationException
parameter_list|)
block|{
if|if
condition|(
name|validationException
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
operator|new
name|ActionRequestValidationException
argument_list|()
expr_stmt|;
block|}
name|validationException
operator|.
name|addValidationError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|validationException
return|;
block|}
DECL|method|isAllNodes
specifier|public
specifier|static
name|boolean
name|isAllNodes
parameter_list|(
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
return|return
name|nodesIds
operator|==
literal|null
operator|||
name|nodesIds
operator|.
name|length
operator|==
literal|0
operator|||
operator|(
name|nodesIds
operator|.
name|length
operator|==
literal|1
operator|&&
name|nodesIds
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"_all"
argument_list|)
operator|)
return|;
block|}
DECL|method|buildNodesIds
specifier|public
specifier|static
name|String
index|[]
name|buildNodesIds
parameter_list|(
name|DiscoveryNodes
name|nodes
parameter_list|,
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
if|if
condition|(
name|isAllNodes
argument_list|(
name|nodesIds
argument_list|)
condition|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|nodesIds
operator|=
operator|new
name|String
index|[
name|nodes
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
name|nodesIds
index|[
name|index
operator|++
index|]
operator|=
name|node
operator|.
name|id
argument_list|()
expr_stmt|;
block|}
return|return
name|nodesIds
return|;
block|}
else|else
block|{
name|String
index|[]
name|resolvedNodesIds
init|=
operator|new
name|String
index|[
name|nodesIds
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodesIds
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"_local"
argument_list|)
condition|)
block|{
name|resolvedNodesIds
index|[
name|i
index|]
operator|=
name|nodes
operator|.
name|localNodeId
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesIds
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"_master"
argument_list|)
condition|)
block|{
name|resolvedNodesIds
index|[
name|i
index|]
operator|=
name|nodes
operator|.
name|masterNodeId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resolvedNodesIds
index|[
name|i
index|]
operator|=
name|nodesIds
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|resolvedNodesIds
return|;
block|}
block|}
block|}
end_class

end_unit

