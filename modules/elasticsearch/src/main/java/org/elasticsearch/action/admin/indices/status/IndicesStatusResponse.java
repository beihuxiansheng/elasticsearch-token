begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.status
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|status
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastOperationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|status
operator|.
name|ShardStatus
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|IndicesStatusResponse
specifier|public
class|class
name|IndicesStatusResponse
extends|extends
name|BroadcastOperationResponse
block|{
DECL|field|shards
specifier|protected
name|ShardStatus
index|[]
name|shards
decl_stmt|;
DECL|field|indicesSettings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|indicesSettings
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|indicesStatus
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|IndexStatus
argument_list|>
name|indicesStatus
decl_stmt|;
DECL|method|IndicesStatusResponse
name|IndicesStatusResponse
parameter_list|()
block|{     }
DECL|method|IndicesStatusResponse
name|IndicesStatusResponse
parameter_list|(
name|ShardStatus
index|[]
name|shards
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|,
name|int
name|totalShards
parameter_list|,
name|int
name|successfulShards
parameter_list|,
name|int
name|failedShards
parameter_list|,
name|List
argument_list|<
name|ShardOperationFailedException
argument_list|>
name|shardFailures
parameter_list|)
block|{
name|super
argument_list|(
name|totalShards
argument_list|,
name|successfulShards
argument_list|,
name|failedShards
argument_list|,
name|shardFailures
argument_list|)
expr_stmt|;
name|this
operator|.
name|shards
operator|=
name|shards
expr_stmt|;
name|indicesSettings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|ShardStatus
name|shard
range|:
name|shards
control|)
block|{
if|if
condition|(
operator|!
name|indicesSettings
operator|.
name|containsKey
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|indicesSettings
operator|.
name|put
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|shards
specifier|public
name|ShardStatus
index|[]
name|shards
parameter_list|()
block|{
return|return
name|this
operator|.
name|shards
return|;
block|}
DECL|method|getShards
specifier|public
name|ShardStatus
index|[]
name|getShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|shards
return|;
block|}
DECL|method|getAt
specifier|public
name|ShardStatus
name|getAt
parameter_list|(
name|int
name|position
parameter_list|)
block|{
return|return
name|shards
index|[
name|position
index|]
return|;
block|}
DECL|method|index
specifier|public
name|IndexStatus
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|getIndices
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|IndexStatus
argument_list|>
name|getIndices
parameter_list|()
block|{
return|return
name|indices
argument_list|()
return|;
block|}
DECL|method|indices
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|IndexStatus
argument_list|>
name|indices
parameter_list|()
block|{
if|if
condition|(
name|indicesStatus
operator|!=
literal|null
condition|)
block|{
return|return
name|indicesStatus
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|IndexStatus
argument_list|>
name|indicesStatus
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indicesSettings
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ShardStatus
argument_list|>
name|shards
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardStatus
name|shard
range|:
name|shards
argument_list|()
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|shardRouting
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|shards
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
name|indicesStatus
operator|.
name|put
argument_list|(
name|index
argument_list|,
operator|new
name|IndexStatus
argument_list|(
name|index
argument_list|,
name|indicesSettings
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|shards
operator|.
name|toArray
argument_list|(
operator|new
name|ShardStatus
index|[
name|shards
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|indicesStatus
operator|=
name|indicesStatus
expr_stmt|;
return|return
name|indicesStatus
return|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|shards
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardStatus
name|status
range|:
name|shards
argument_list|()
control|)
block|{
name|status
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|indicesSettings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|indicesSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeSettingsToStream
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shards
operator|=
operator|new
name|ShardStatus
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shards
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|shards
index|[
name|i
index|]
operator|=
name|readIndexShardStatus
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|indicesSettings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|indicesSettings
operator|.
name|put
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|,
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

