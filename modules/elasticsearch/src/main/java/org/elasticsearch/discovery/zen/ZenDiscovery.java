begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ProcessedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|Lifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|InitialStateDiscoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|elect
operator|.
name|ElectMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|fd
operator|.
name|MasterFaultDetection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|fd
operator|.
name|NodesFaultDetection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|membership
operator|.
name|MembershipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|ZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|ZenPingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|publish
operator|.
name|PublishClusterStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ZenDiscovery
specifier|public
class|class
name|ZenDiscovery
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|Discovery
argument_list|>
implements|implements
name|Discovery
implements|,
name|DiscoveryNodesProvider
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|pingService
specifier|private
specifier|final
name|ZenPingService
name|pingService
decl_stmt|;
DECL|field|masterFD
specifier|private
specifier|final
name|MasterFaultDetection
name|masterFD
decl_stmt|;
DECL|field|nodesFD
specifier|private
specifier|final
name|NodesFaultDetection
name|nodesFD
decl_stmt|;
DECL|field|publishClusterState
specifier|private
specifier|final
name|PublishClusterStateAction
name|publishClusterState
decl_stmt|;
DECL|field|membership
specifier|private
specifier|final
name|MembershipAction
name|membership
decl_stmt|;
DECL|field|initialPingTimeout
specifier|private
specifier|final
name|TimeValue
name|initialPingTimeout
decl_stmt|;
comment|// a flag that should be used only for testing
DECL|field|sendLeaveRequest
specifier|private
specifier|final
name|boolean
name|sendLeaveRequest
decl_stmt|;
DECL|field|electMaster
specifier|private
specifier|final
name|ElectMasterService
name|electMaster
decl_stmt|;
DECL|field|localNode
specifier|private
name|DiscoveryNode
name|localNode
decl_stmt|;
DECL|field|initialStateListeners
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|InitialStateDiscoveryListener
argument_list|>
name|initialStateListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|InitialStateDiscoveryListener
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|master
specifier|private
specifier|volatile
name|boolean
name|master
init|=
literal|false
decl_stmt|;
DECL|field|latestDiscoNodes
specifier|private
specifier|volatile
name|DiscoveryNodes
name|latestDiscoNodes
decl_stmt|;
DECL|field|currentJoinThread
specifier|private
specifier|volatile
name|Thread
name|currentJoinThread
decl_stmt|;
DECL|field|initialStateSent
specifier|private
specifier|final
name|AtomicBoolean
name|initialStateSent
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|ZenDiscovery
annotation|@
name|Inject
specifier|public
name|ZenDiscovery
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ZenPingService
name|pingService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|pingService
operator|=
name|pingService
expr_stmt|;
name|this
operator|.
name|initialPingTimeout
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"ping_timeout"
argument_list|,
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"initial_ping_timeout"
argument_list|,
name|timeValueSeconds
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|sendLeaveRequest
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"send_leave_request"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using ping_timeout [{}]"
argument_list|,
name|initialPingTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|electMaster
operator|=
operator|new
name|ElectMasterService
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterFD
operator|=
operator|new
name|MasterFaultDetection
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterFD
operator|.
name|addListener
argument_list|(
operator|new
name|MasterNodeFailureListener
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodesFD
operator|=
operator|new
name|NodesFaultDetection
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodesFD
operator|.
name|addListener
argument_list|(
operator|new
name|NodeFailureListener
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|publishClusterState
operator|=
operator|new
name|PublishClusterStateAction
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|this
argument_list|,
operator|new
name|NewClusterStateListener
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|pingService
operator|.
name|setNodesProvider
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|membership
operator|=
operator|new
name|MembershipAction
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|this
argument_list|,
operator|new
name|MembershipListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doStart
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nodeAttributes
init|=
name|buildCommonNodesAttributes
argument_list|(
name|settings
argument_list|)
decl_stmt|;
comment|// note, we rely on the fact that its a new id each time we start, see FD and "kill -9" handling
name|String
name|nodeId
init|=
name|UUID
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
name|localNode
operator|=
operator|new
name|DiscoveryNode
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|nodeId
argument_list|,
name|transportService
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|,
name|nodeAttributes
argument_list|)
expr_stmt|;
name|latestDiscoNodes
operator|=
operator|new
name|DiscoveryNodes
operator|.
name|Builder
argument_list|()
operator|.
name|put
argument_list|(
name|localNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|localNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodesFD
operator|.
name|updateNodes
argument_list|(
name|latestDiscoNodes
argument_list|)
expr_stmt|;
name|pingService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// do the join on a different thread, the DiscoveryService waits for 30s anyhow till it is discovered
name|asyncJoinCluster
argument_list|()
expr_stmt|;
block|}
DECL|method|doStop
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|pingService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterFD
operator|.
name|stop
argument_list|(
literal|"zen disco stop"
argument_list|)
expr_stmt|;
name|nodesFD
operator|.
name|stop
argument_list|()
expr_stmt|;
name|initialStateSent
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|sendLeaveRequest
condition|)
block|{
if|if
condition|(
operator|!
name|master
operator|&&
name|latestDiscoNodes
operator|.
name|masterNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|membership
operator|.
name|sendLeaveRequestBlocking
argument_list|(
name|latestDiscoNodes
operator|.
name|masterNode
argument_list|()
argument_list|,
name|localNode
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to send leave request to master [{}]"
argument_list|,
name|e
argument_list|,
name|latestDiscoNodes
operator|.
name|masterNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DiscoveryNode
index|[]
name|possibleMasters
init|=
name|electMaster
operator|.
name|nextPossibleMasters
argument_list|(
name|latestDiscoNodes
operator|.
name|nodes
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|possibleMaster
range|:
name|possibleMasters
control|)
block|{
if|if
condition|(
name|localNode
operator|.
name|equals
argument_list|(
name|possibleMaster
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|membership
operator|.
name|sendLeaveRequest
argument_list|(
name|latestDiscoNodes
operator|.
name|masterNode
argument_list|()
argument_list|,
name|possibleMaster
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to send leave request from master [{}] to possible master [{}]"
argument_list|,
name|e
argument_list|,
name|latestDiscoNodes
operator|.
name|masterNode
argument_list|()
argument_list|,
name|possibleMaster
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|master
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|currentJoinThread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|currentJoinThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|method|doClose
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticSearchException
block|{
name|masterFD
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodesFD
operator|.
name|close
argument_list|()
expr_stmt|;
name|publishClusterState
operator|.
name|close
argument_list|()
expr_stmt|;
name|membership
operator|.
name|close
argument_list|()
expr_stmt|;
name|pingService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|localNode
annotation|@
name|Override
specifier|public
name|DiscoveryNode
name|localNode
parameter_list|()
block|{
return|return
name|localNode
return|;
block|}
DECL|method|addListener
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|InitialStateDiscoveryListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|initialStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeListener
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|InitialStateDiscoveryListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|initialStateListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|nodeDescription
annotation|@
name|Override
specifier|public
name|String
name|nodeDescription
parameter_list|()
block|{
return|return
name|clusterName
operator|.
name|value
argument_list|()
operator|+
literal|"/"
operator|+
name|localNode
operator|.
name|id
argument_list|()
return|;
block|}
DECL|method|nodes
annotation|@
name|Override
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
name|DiscoveryNodes
name|latestNodes
init|=
name|this
operator|.
name|latestDiscoNodes
decl_stmt|;
if|if
condition|(
name|latestNodes
operator|!=
literal|null
condition|)
block|{
return|return
name|latestNodes
return|;
block|}
comment|// have not decided yet, just send the local node
return|return
name|newNodesBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|localNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|localNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|publish
annotation|@
name|Override
specifier|public
name|void
name|publish
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
if|if
condition|(
operator|!
name|master
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Shouldn't publish state when not master"
argument_list|)
throw|;
block|}
name|latestDiscoNodes
operator|=
name|clusterState
operator|.
name|nodes
argument_list|()
expr_stmt|;
name|nodesFD
operator|.
name|updateNodes
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
name|publishClusterState
operator|.
name|publish
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
block|}
DECL|method|asyncJoinCluster
specifier|private
name|void
name|asyncJoinCluster
parameter_list|()
block|{
name|threadPool
operator|.
name|cached
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|currentJoinThread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
try|try
block|{
name|innterJoinCluster
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|currentJoinThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|innterJoinCluster
specifier|private
name|void
name|innterJoinCluster
parameter_list|()
block|{
name|boolean
name|retry
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|retry
condition|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
return|return;
block|}
name|retry
operator|=
literal|false
expr_stmt|;
name|DiscoveryNode
name|masterNode
init|=
name|findMaster
argument_list|()
decl_stmt|;
if|if
condition|(
name|masterNode
operator|==
literal|null
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|localNode
operator|.
name|equals
argument_list|(
name|masterNode
argument_list|)
condition|)
block|{
name|this
operator|.
name|master
operator|=
literal|true
expr_stmt|;
name|nodesFD
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start the nodes FD
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"zen-disco-join (elected_as_master)"
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|builder
init|=
operator|new
name|DiscoveryNodes
operator|.
name|Builder
argument_list|()
operator|.
name|localNodeId
argument_list|(
name|localNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|localNode
operator|.
name|id
argument_list|()
argument_list|)
comment|// put our local node
operator|.
name|put
argument_list|(
name|localNode
argument_list|)
decl_stmt|;
comment|// update the fact that we are the master...
name|latestDiscoNodes
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterBlocks
name|clusterBlocks
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
operator|.
name|removeGlobalBlock
argument_list|(
name|NO_MASTER_BLOCK
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|nodes
argument_list|(
name|builder
argument_list|)
operator|.
name|blocks
argument_list|(
name|clusterBlocks
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|sendInitialStateEventIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|master
operator|=
literal|false
expr_stmt|;
try|try
block|{
comment|// first, make sure we can connect to the master
name|transportService
operator|.
name|connectToNode
argument_list|(
name|masterNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to connect to master [{}], retrying..."
argument_list|,
name|e
argument_list|,
name|masterNode
argument_list|)
expr_stmt|;
name|retry
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
comment|// send join request
name|ClusterState
name|clusterState
decl_stmt|;
try|try
block|{
name|clusterState
operator|=
name|membership
operator|.
name|sendJoinRequestBlocking
argument_list|(
name|masterNode
argument_list|,
name|localNode
argument_list|,
name|initialPingTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|ElasticSearchException
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"failed to send join request to master [{}], reason [{}]"
argument_list|,
name|masterNode
argument_list|,
operator|(
operator|(
name|ElasticSearchException
operator|)
name|e
operator|)
operator|.
name|getDetailedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"failed to send join request to master [{}], reason [{}]"
argument_list|,
name|masterNode
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"detailed failed reason"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// failed to send the join request, retry
name|retry
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|masterFD
operator|.
name|start
argument_list|(
name|masterNode
argument_list|,
literal|"initial_join"
argument_list|)
expr_stmt|;
comment|// we update the metadata once we managed to join, so we pre-create indices and so on (no shards allocation)
specifier|final
name|MetaData
name|metaData
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
decl_stmt|;
comment|// sync also the version with the version the master currently has, so the next update will be applied
specifier|final
name|long
name|version
init|=
name|clusterState
operator|.
name|version
argument_list|()
decl_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"zen-disco-join (detected master)"
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|ClusterBlocks
name|clusterBlocks
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
operator|.
name|removeGlobalBlock
argument_list|(
name|NO_MASTER_BLOCK
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// make sure we have the local node id set, we might need it as a result of the new metadata
name|DiscoveryNodes
operator|.
name|Builder
name|nodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|newNodesBuilder
argument_list|()
operator|.
name|putAll
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|localNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|localNode
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodesBuilder
argument_list|)
operator|.
name|blocks
argument_list|(
name|clusterBlocks
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
comment|// don't send initial state event, since we want to get the cluster state from the master that includes us first
comment|//                        sendInitialStateEventIfNeeded();
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleNodeFailure
specifier|private
name|void
name|handleNodeFailure
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|lifecycleState
argument_list|()
operator|!=
name|Lifecycle
operator|.
name|State
operator|.
name|STARTED
condition|)
block|{
comment|// not started, ignore a node failure
return|return;
block|}
if|if
condition|(
operator|!
name|master
condition|)
block|{
comment|// nothing to do here...
return|return;
block|}
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"zen-disco-node_failed("
operator|+
name|node
operator|+
literal|"), reason "
operator|+
name|reason
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|builder
init|=
operator|new
name|DiscoveryNodes
operator|.
name|Builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|latestDiscoNodes
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|nodes
argument_list|(
name|latestDiscoNodes
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|sendInitialStateEventIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMasterGone
specifier|private
name|void
name|handleMasterGone
parameter_list|(
specifier|final
name|DiscoveryNode
name|masterNode
parameter_list|,
specifier|final
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|lifecycleState
argument_list|()
operator|!=
name|Lifecycle
operator|.
name|State
operator|.
name|STARTED
condition|)
block|{
comment|// not started, ignore a master failure
return|return;
block|}
if|if
condition|(
name|master
condition|)
block|{
comment|// we might get this on both a master telling us shutting down, and then the disconnect failure
return|return;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"master_left [{}], reason [{}]"
argument_list|,
name|masterNode
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"zen-disco-master_failed ("
operator|+
name|masterNode
operator|+
literal|")"
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
if|if
condition|(
operator|!
name|masterNode
operator|.
name|id
argument_list|()
operator|.
name|equals
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// master got switched on us, no need to send anything
return|return
name|currentState
return|;
block|}
name|ClusterBlocks
name|clusterBlocks
init|=
name|currentState
operator|.
name|blocks
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|currentState
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
init|=
name|newArrayList
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|masterNode
argument_list|)
expr_stmt|;
comment|// remove the master node from the list, it has failed
specifier|final
name|DiscoveryNode
name|electedMaster
init|=
name|electMaster
operator|.
name|electMaster
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
comment|// elect master
if|if
condition|(
name|localNode
operator|.
name|equals
argument_list|(
name|electedMaster
argument_list|)
condition|)
block|{
name|master
operator|=
literal|true
expr_stmt|;
name|masterFD
operator|.
name|stop
argument_list|(
literal|"got elected as new master since master left (reason = "
operator|+
name|reason
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|nodesFD
operator|.
name|start
argument_list|()
expr_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|builder
init|=
name|DiscoveryNodes
operator|.
name|newNodesBuilder
argument_list|()
operator|.
name|putAll
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
argument_list|)
comment|// make sure the old master node, which has failed, is not part of the nodes we publish
operator|.
name|remove
argument_list|(
name|masterNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|localNode
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|latestDiscoNodes
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|nodes
argument_list|(
name|latestDiscoNodes
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|nodesFD
operator|.
name|stop
argument_list|()
expr_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|builder
init|=
name|DiscoveryNodes
operator|.
name|newNodesBuilder
argument_list|()
operator|.
name|putAll
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|masterNode
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|electedMaster
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|masterNodeId
argument_list|(
name|electedMaster
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|masterFD
operator|.
name|restart
argument_list|(
name|electedMaster
argument_list|,
literal|"possible elected master since master left (reason = "
operator|+
name|reason
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"master_left and no other node elected to become master, current nodes: {}"
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|builder
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|clusterBlocks
operator|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|clusterBlocks
argument_list|)
operator|.
name|addGlobalBlock
argument_list|(
name|NO_MASTER_BLOCK
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// if this is a data node, clean the metadata and routing, since we want to recreate the indices and shards
if|if
condition|(
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|dataNode
argument_list|()
condition|)
block|{
name|metaData
operator|=
name|MetaData
operator|.
name|newMetaDataBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|RoutingTable
operator|.
name|newRoutingTableBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|masterFD
operator|.
name|stop
argument_list|(
literal|"no master elected since master left (reason = "
operator|+
name|reason
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|asyncJoinCluster
argument_list|()
expr_stmt|;
block|}
name|latestDiscoNodes
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|blocks
argument_list|(
name|clusterBlocks
argument_list|)
operator|.
name|nodes
argument_list|(
name|latestDiscoNodes
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|sendInitialStateEventIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|handleNewClusterStateFromMaster
name|void
name|handleNewClusterStateFromMaster
parameter_list|(
specifier|final
name|ClusterState
name|newState
parameter_list|)
block|{
if|if
condition|(
name|master
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"master should not receive new cluster state from [{}]"
argument_list|,
name|newState
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|newState
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"received a cluster state from [{}] and not part of the cluster, should not happen"
argument_list|,
name|newState
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"zen-disco-receive(from master ["
operator|+
name|newState
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|+
literal|"])"
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|latestDiscoNodes
operator|=
name|newState
operator|.
name|nodes
argument_list|()
expr_stmt|;
comment|// check to see that we monitor the correct master of the cluster
if|if
condition|(
name|masterFD
operator|.
name|masterNode
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|masterFD
operator|.
name|masterNode
argument_list|()
operator|.
name|equals
argument_list|(
name|latestDiscoNodes
operator|.
name|masterNode
argument_list|()
argument_list|)
condition|)
block|{
name|masterFD
operator|.
name|restart
argument_list|(
name|latestDiscoNodes
operator|.
name|masterNode
argument_list|()
argument_list|,
literal|"new cluster stare received and we monitor the wrong master ["
operator|+
name|masterFD
operator|.
name|masterNode
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|ClusterState
operator|.
name|Builder
name|builder
init|=
name|ClusterState
operator|.
name|builder
argument_list|()
operator|.
name|state
argument_list|(
name|newState
argument_list|)
decl_stmt|;
comment|// if the routing table did not change, use the original one
if|if
condition|(
name|newState
operator|.
name|routingTable
argument_list|()
operator|.
name|version
argument_list|()
operator|==
name|currentState
operator|.
name|routingTable
argument_list|()
operator|.
name|version
argument_list|()
condition|)
block|{
name|builder
operator|.
name|routingTable
argument_list|(
name|currentState
operator|.
name|routingTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|sendInitialStateEventIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleLeaveRequest
specifier|private
name|void
name|handleLeaveRequest
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|master
condition|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"zen-disco-node_left("
operator|+
name|node
operator|+
literal|")"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|builder
init|=
operator|new
name|DiscoveryNodes
operator|.
name|Builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|latestDiscoNodes
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|nodes
argument_list|(
name|latestDiscoNodes
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleMasterGone
argument_list|(
name|node
argument_list|,
literal|"shut_down"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleJoinRequest
specifier|private
name|ClusterState
name|handleJoinRequest
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|master
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Node ["
operator|+
name|localNode
operator|+
literal|"] not master for join request from ["
operator|+
name|node
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|transportService
operator|.
name|addressSupported
argument_list|(
name|node
operator|.
name|address
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO, what should we do now? Maybe inform that node that its crap?
name|logger
operator|.
name|warn
argument_list|(
literal|"received a wrong address type from [{}], ignoring..."
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// try and connect to the node, if it fails, we can raise an exception back to the client...
name|transportService
operator|.
name|connectToNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|state
operator|=
name|clusterService
operator|.
name|state
argument_list|()
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"zen-disco-receive(join from node["
operator|+
name|node
operator|+
literal|"])"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
if|if
condition|(
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
comment|// the node already exists in the cluster
name|logger
operator|.
name|warn
argument_list|(
literal|"received a join request for an existing node [{}]"
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|// still send a new cluster state, so it will be re published and possibly update the other node
return|return
name|ClusterState
operator|.
name|builder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|nodes
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|newNode
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
DECL|method|findMaster
specifier|private
name|DiscoveryNode
name|findMaster
parameter_list|()
block|{
name|ZenPing
operator|.
name|PingResponse
index|[]
name|pingResponses
init|=
name|pingService
operator|.
name|pingAndWait
argument_list|(
name|initialPingTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|pingResponses
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ping responses:"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pingResponses
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" {none}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ZenPing
operator|.
name|PingResponse
name|pingResponse
range|:
name|pingResponses
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t--> "
argument_list|)
operator|.
name|append
argument_list|(
literal|"target ["
argument_list|)
operator|.
name|append
argument_list|(
name|pingResponse
operator|.
name|target
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], master ["
argument_list|)
operator|.
name|append
argument_list|(
name|pingResponse
operator|.
name|master
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|pingMasters
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ZenPing
operator|.
name|PingResponse
name|pingResponse
range|:
name|pingResponses
control|)
block|{
if|if
condition|(
name|pingResponse
operator|.
name|master
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pingMasters
operator|.
name|add
argument_list|(
name|pingResponse
operator|.
name|master
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pingMasters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// lets tie break between discovered nodes
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|possibleMasterNodes
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|possibleMasterNodes
operator|.
name|add
argument_list|(
name|localNode
argument_list|)
expr_stmt|;
for|for
control|(
name|ZenPing
operator|.
name|PingResponse
name|pingResponse
range|:
name|pingResponses
control|)
block|{
name|possibleMasterNodes
operator|.
name|add
argument_list|(
name|pingResponse
operator|.
name|target
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DiscoveryNode
name|electedMaster
init|=
name|electMaster
operator|.
name|electMaster
argument_list|(
name|possibleMasterNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|localNode
operator|.
name|equals
argument_list|(
name|electedMaster
argument_list|)
condition|)
block|{
return|return
name|localNode
return|;
block|}
block|}
else|else
block|{
name|DiscoveryNode
name|electedMaster
init|=
name|electMaster
operator|.
name|electMaster
argument_list|(
name|pingMasters
argument_list|)
decl_stmt|;
if|if
condition|(
name|electedMaster
operator|!=
literal|null
condition|)
block|{
return|return
name|electedMaster
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|sendInitialStateEventIfNeeded
specifier|private
name|void
name|sendInitialStateEventIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|initialStateSent
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
for|for
control|(
name|InitialStateDiscoveryListener
name|listener
range|:
name|initialStateListeners
control|)
block|{
name|listener
operator|.
name|initialStateProcessed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|NewClusterStateListener
specifier|private
class|class
name|NewClusterStateListener
implements|implements
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
block|{
DECL|method|onNewClusterState
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|handleNewClusterStateFromMaster
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MembershipListener
specifier|private
class|class
name|MembershipListener
implements|implements
name|MembershipAction
operator|.
name|MembershipListener
block|{
DECL|method|onJoin
annotation|@
name|Override
specifier|public
name|ClusterState
name|onJoin
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
name|handleJoinRequest
argument_list|(
name|node
argument_list|)
return|;
block|}
DECL|method|onLeave
annotation|@
name|Override
specifier|public
name|void
name|onLeave
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|handleLeaveRequest
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NodeFailureListener
specifier|private
class|class
name|NodeFailureListener
implements|implements
name|NodesFaultDetection
operator|.
name|Listener
block|{
DECL|method|onNodeFailure
annotation|@
name|Override
specifier|public
name|void
name|onNodeFailure
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|handleNodeFailure
argument_list|(
name|node
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MasterNodeFailureListener
specifier|private
class|class
name|MasterNodeFailureListener
implements|implements
name|MasterFaultDetection
operator|.
name|Listener
block|{
DECL|method|onMasterFailure
annotation|@
name|Override
specifier|public
name|void
name|onMasterFailure
parameter_list|(
name|DiscoveryNode
name|masterNode
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|handleMasterGone
argument_list|(
name|masterNode
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
DECL|method|onDisconnectedFromMaster
annotation|@
name|Override
specifier|public
name|void
name|onDisconnectedFromMaster
parameter_list|()
block|{
comment|// got disconnected from the master, send a join request
name|DiscoveryNode
name|masterNode
init|=
name|latestDiscoNodes
operator|.
name|masterNode
argument_list|()
decl_stmt|;
try|try
block|{
name|membership
operator|.
name|sendJoinRequest
argument_list|(
name|masterNode
argument_list|,
name|localNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send join request on disconnection from master [{}]"
argument_list|,
name|masterNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

