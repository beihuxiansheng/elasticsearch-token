begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.netty3
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|AbstractBytesReferenceTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ReleasableBytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|CompositeChannelBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|Netty3UtilsTests
specifier|public
class|class
name|Netty3UtilsTests
extends|extends
name|ESTestCase
block|{
DECL|field|PAGE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|PAGE_SIZE
init|=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
decl_stmt|;
DECL|field|bigarrays
specifier|private
specifier|final
name|BigArrays
name|bigarrays
init|=
operator|new
name|BigArrays
argument_list|(
literal|null
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|testToChannelBufferWithEmptyRef
specifier|public
name|void
name|testToChannelBufferWithEmptyRef
parameter_list|()
throws|throws
name|IOException
block|{
name|ChannelBuffer
name|channelBuffer
init|=
name|Netty3Utils
operator|.
name|toChannelBuffer
argument_list|(
name|getRandomizedBytesReference
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ChannelBuffers
operator|.
name|EMPTY_BUFFER
argument_list|,
name|channelBuffer
argument_list|)
expr_stmt|;
block|}
DECL|method|testToChannelBufferWithSlice
specifier|public
name|void
name|testToChannelBufferWithSlice
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesReference
name|ref
init|=
name|getRandomizedBytesReference
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
operator|*
name|PAGE_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|ref
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
name|ref
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|,
name|ref
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|ref
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|ChannelBuffer
name|channelBuffer
init|=
name|Netty3Utils
operator|.
name|toChannelBuffer
argument_list|(
name|slice
argument_list|)
decl_stmt|;
name|BytesReference
name|bytesReference
init|=
name|Netty3Utils
operator|.
name|toBytesReference
argument_list|(
name|channelBuffer
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice
argument_list|)
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|bytesReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToChannelBufferWithSliceAfter
specifier|public
name|void
name|testToChannelBufferWithSliceAfter
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesReference
name|ref
init|=
name|getRandomizedBytesReference
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
operator|*
name|PAGE_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|ref
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
name|ref
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|,
name|ref
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|ChannelBuffer
name|channelBuffer
init|=
name|Netty3Utils
operator|.
name|toChannelBuffer
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|BytesReference
name|bytesReference
init|=
name|Netty3Utils
operator|.
name|toBytesReference
argument_list|(
name|channelBuffer
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|ref
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
argument_list|)
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|bytesReference
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToChannelBuffer
specifier|public
name|void
name|testToChannelBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesReference
name|ref
init|=
name|getRandomizedBytesReference
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
operator|*
name|PAGE_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|ChannelBuffer
name|channelBuffer
init|=
name|Netty3Utils
operator|.
name|toChannelBuffer
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|BytesReference
name|bytesReference
init|=
name|Netty3Utils
operator|.
name|toBytesReference
argument_list|(
name|channelBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|ChannelBufferBytesReference
condition|)
block|{
name|assertEquals
argument_list|(
name|channelBuffer
argument_list|,
operator|(
operator|(
name|ChannelBufferBytesReference
operator|)
name|ref
operator|)
operator|.
name|toChannelBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|AbstractBytesReferenceTestCase
operator|.
name|getNumPages
argument_list|(
name|ref
argument_list|)
operator|>
literal|1
condition|)
block|{
comment|// we gather the buffers into a channel buffer
name|assertTrue
argument_list|(
name|channelBuffer
operator|instanceof
name|CompositeChannelBuffer
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|ref
argument_list|)
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|bytesReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRandomizedBytesReference
specifier|private
name|BytesReference
name|getRandomizedBytesReference
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we know bytes stream output always creates a paged bytes reference, we use it to create randomized content
name|ReleasableBytesStreamOutput
name|out
init|=
operator|new
name|ReleasableBytesStreamOutput
argument_list|(
name|length
argument_list|,
name|bigarrays
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|out
operator|.
name|size
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|BytesReference
name|ref
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ref
operator|.
name|length
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
operator|new
name|BytesArray
argument_list|(
name|ref
operator|.
name|toBytesRef
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|BytesRef
name|bytesRef
init|=
name|ref
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
return|return
name|Netty3Utils
operator|.
name|toBytesReference
argument_list|(
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ref
return|;
block|}
block|}
block|}
end_class

end_unit

