begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.netty3.cors
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty3
operator|.
name|cors
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Builder used to configure and build a {@link Netty3CorsConfig} instance.  *  * This class was lifted from the Netty project:  *  https://github.com/netty/netty  */
end_comment

begin_class
DECL|class|Netty3CorsConfigBuilder
specifier|public
specifier|final
class|class
name|Netty3CorsConfigBuilder
block|{
comment|/**      * Creates a Builder instance with it's origin set to '*'.      *      * @return Builder to support method chaining.      */
DECL|method|forAnyOrigin
specifier|public
specifier|static
name|Netty3CorsConfigBuilder
name|forAnyOrigin
parameter_list|()
block|{
return|return
operator|new
name|Netty3CorsConfigBuilder
argument_list|()
return|;
block|}
comment|/**      * Creates a {@link Netty3CorsConfigBuilder} instance with the specified origin.      *      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|forOrigin
specifier|public
specifier|static
name|Netty3CorsConfigBuilder
name|forOrigin
parameter_list|(
specifier|final
name|String
name|origin
parameter_list|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|origin
argument_list|)
condition|)
block|{
return|return
operator|new
name|Netty3CorsConfigBuilder
argument_list|()
return|;
block|}
return|return
operator|new
name|Netty3CorsConfigBuilder
argument_list|(
name|origin
argument_list|)
return|;
block|}
comment|/**      * Create a {@link Netty3CorsConfigBuilder} instance with the specified pattern origin.      *      * @param pattern the regular expression pattern to match incoming origins on.      * @return {@link Netty3CorsConfigBuilder} with the configured origin pattern.      */
DECL|method|forPattern
specifier|public
specifier|static
name|Netty3CorsConfigBuilder
name|forPattern
parameter_list|(
specifier|final
name|Pattern
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CORS pattern cannot be null"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Netty3CorsConfigBuilder
argument_list|(
name|pattern
argument_list|)
return|;
block|}
comment|/**      * Creates a {@link Netty3CorsConfigBuilder} instance with the specified origins.      *      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|forOrigins
specifier|public
specifier|static
name|Netty3CorsConfigBuilder
name|forOrigins
parameter_list|(
specifier|final
name|String
modifier|...
name|origins
parameter_list|)
block|{
return|return
operator|new
name|Netty3CorsConfigBuilder
argument_list|(
name|origins
argument_list|)
return|;
block|}
DECL|field|origins
name|Optional
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|origins
decl_stmt|;
DECL|field|pattern
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|pattern
decl_stmt|;
DECL|field|anyOrigin
specifier|final
name|boolean
name|anyOrigin
decl_stmt|;
DECL|field|allowNullOrigin
name|boolean
name|allowNullOrigin
decl_stmt|;
DECL|field|enabled
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
DECL|field|allowCredentials
name|boolean
name|allowCredentials
decl_stmt|;
DECL|field|maxAge
name|long
name|maxAge
decl_stmt|;
DECL|field|requestMethods
specifier|final
name|Set
argument_list|<
name|HttpMethod
argument_list|>
name|requestMethods
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|requestHeaders
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|requestHeaders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|preflightHeaders
specifier|final
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|Callable
argument_list|<
name|?
argument_list|>
argument_list|>
name|preflightHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|noPreflightHeaders
specifier|private
name|boolean
name|noPreflightHeaders
decl_stmt|;
DECL|field|shortCircuit
name|boolean
name|shortCircuit
decl_stmt|;
comment|/**      * Creates a new Builder instance with the origin passed in.      *      * @param origins the origin to be used for this builder.      */
DECL|method|Netty3CorsConfigBuilder
name|Netty3CorsConfigBuilder
parameter_list|(
specifier|final
name|String
modifier|...
name|origins
parameter_list|)
block|{
name|this
operator|.
name|origins
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|origins
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|anyOrigin
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Creates a new Builder instance allowing any origin, "*" which is the      * wildcard origin.      *      */
DECL|method|Netty3CorsConfigBuilder
name|Netty3CorsConfigBuilder
parameter_list|()
block|{
name|anyOrigin
operator|=
literal|true
expr_stmt|;
name|origins
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|pattern
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a new Builder instance allowing any origin that matches the pattern.      *      * @param pattern the pattern to match against for incoming origins.      */
DECL|method|Netty3CorsConfigBuilder
name|Netty3CorsConfigBuilder
parameter_list|(
specifier|final
name|Pattern
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|origins
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|anyOrigin
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Web browsers may set the 'Origin' request header to 'null' if a resource is loaded      * from the local file system. Calling this method will enable a successful CORS response      * with a wildcard for the CORS response header 'Access-Control-Allow-Origin'.      *      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|allowNullOrigin
name|Netty3CorsConfigBuilder
name|allowNullOrigin
parameter_list|()
block|{
name|allowNullOrigin
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disables CORS support.      *      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|disable
specifier|public
name|Netty3CorsConfigBuilder
name|disable
parameter_list|()
block|{
name|enabled
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * By default cookies are not included in CORS requests, but this method will enable cookies to      * be added to CORS requests. Calling this method will set the CORS 'Access-Control-Allow-Credentials'      * response header to true.      *      * Please note, that cookie support needs to be enabled on the client side as well.      * The client needs to opt-in to send cookies by calling:      *<pre>      * xhr.withCredentials = true;      *</pre>      * The default value for 'withCredentials' is false in which case no cookies are sent.      * Setting this to true will included cookies in cross origin requests.      *      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|allowCredentials
specifier|public
name|Netty3CorsConfigBuilder
name|allowCredentials
parameter_list|()
block|{
name|allowCredentials
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * When making a preflight request the client has to perform two request with can be inefficient.      * This setting will set the CORS 'Access-Control-Max-Age' response header and enables the      * caching of the preflight response for the specified time. During this time no preflight      * request will be made.      *      * @param max the maximum time, in seconds, that the preflight response may be cached.      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|maxAge
specifier|public
name|Netty3CorsConfigBuilder
name|maxAge
parameter_list|(
specifier|final
name|long
name|max
parameter_list|)
block|{
name|maxAge
operator|=
name|max
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specifies the allowed set of HTTP Request Methods that should be returned in the      * CORS 'Access-Control-Request-Method' response header.      *      * @param methods the {@link HttpMethod}s that should be allowed.      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|allowedRequestMethods
specifier|public
name|Netty3CorsConfigBuilder
name|allowedRequestMethods
parameter_list|(
specifier|final
name|Set
argument_list|<
name|HttpMethod
argument_list|>
name|methods
parameter_list|)
block|{
name|requestMethods
operator|.
name|addAll
argument_list|(
name|methods
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specifies the if headers that should be returned in the CORS 'Access-Control-Allow-Headers'      * response header.      *      * If a client specifies headers on the request, for example by calling:      *<pre>      * xhr.setRequestHeader('My-Custom-Header', "SomeValue");      *</pre>      * the server will receive the above header name in the 'Access-Control-Request-Headers' of the      * preflight request. The server will then decide if it allows this header to be sent for the      * real request (remember that a preflight is not the real request but a request asking the server      * if it allow a request).      *      * @param headers the headers to be added to the preflight 'Access-Control-Allow-Headers' response header.      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|allowedRequestHeaders
specifier|public
name|Netty3CorsConfigBuilder
name|allowedRequestHeaders
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|headers
parameter_list|)
block|{
name|requestHeaders
operator|.
name|addAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns HTTP response headers that should be added to a CORS preflight response.      *      * An intermediary like a load balancer might require that a CORS preflight request      * have certain headers set. This enables such headers to be added.      *      * @param name the name of the HTTP header.      * @param values the values for the HTTP header.      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|preflightResponseHeader
specifier|public
name|Netty3CorsConfigBuilder
name|preflightResponseHeader
parameter_list|(
specifier|final
name|CharSequence
name|name
parameter_list|,
specifier|final
name|Object
modifier|...
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|preflightHeaders
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ConstantValueGenerator
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|preflightResponseHeader
argument_list|(
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Returns HTTP response headers that should be added to a CORS preflight response.      *      * An intermediary like a load balancer might require that a CORS preflight request      * have certain headers set. This enables such headers to be added.      *      * @param name the name of the HTTP header.      * @param value the values for the HTTP header.      * @param<T> the type of values that the Iterable contains.      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|preflightResponseHeader
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Netty3CorsConfigBuilder
name|preflightResponseHeader
parameter_list|(
specifier|final
name|CharSequence
name|name
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|T
argument_list|>
name|value
parameter_list|)
block|{
name|preflightHeaders
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ConstantValueGenerator
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns HTTP response headers that should be added to a CORS preflight response.      *      * An intermediary like a load balancer might require that a CORS preflight request      * have certain headers set. This enables such headers to be added.      *      * Some values must be dynamically created when the HTTP response is created, for      * example the 'Date' response header. This can be accomplished by using a Callable      * which will have its 'call' method invoked when the HTTP response is created.      *      * @param name the name of the HTTP header.      * @param valueGenerator a Callable which will be invoked at HTTP response creation.      * @param<T> the type of the value that the Callable can return.      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|preflightResponseHeader
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Netty3CorsConfigBuilder
name|preflightResponseHeader
parameter_list|(
specifier|final
name|CharSequence
name|name
parameter_list|,
specifier|final
name|Callable
argument_list|<
name|T
argument_list|>
name|valueGenerator
parameter_list|)
block|{
name|preflightHeaders
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|valueGenerator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specifies that no preflight response headers should be added to a preflight response.      *      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|noPreflightResponseHeaders
specifier|public
name|Netty3CorsConfigBuilder
name|noPreflightResponseHeaders
parameter_list|()
block|{
name|noPreflightHeaders
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specifies that a CORS request should be rejected if it's invalid before being      * further processing.      *      * CORS headers are set after a request is processed. This may not always be desired      * and this setting will check that the Origin is valid and if it is not valid no      * further processing will take place, and a error will be returned to the calling client.      *      * @return {@link Netty3CorsConfigBuilder} to support method chaining.      */
DECL|method|shortCircuit
specifier|public
name|Netty3CorsConfigBuilder
name|shortCircuit
parameter_list|()
block|{
name|shortCircuit
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds a {@link Netty3CorsConfig} with settings specified by previous method calls.      *      * @return {@link Netty3CorsConfig} the configured CorsConfig instance.      */
DECL|method|build
specifier|public
name|Netty3CorsConfig
name|build
parameter_list|()
block|{
if|if
condition|(
name|preflightHeaders
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|noPreflightHeaders
condition|)
block|{
name|preflightHeaders
operator|.
name|put
argument_list|(
literal|"date"
argument_list|,
name|DateValueGenerator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|preflightHeaders
operator|.
name|put
argument_list|(
literal|"content-length"
argument_list|,
operator|new
name|ConstantValueGenerator
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Netty3CorsConfig
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * This class is used for preflight HTTP response values that do not need to be      * generated, but instead the value is "static" in that the same value will be returned      * for each call.      */
DECL|class|ConstantValueGenerator
specifier|private
specifier|static
specifier|final
class|class
name|ConstantValueGenerator
implements|implements
name|Callable
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|value
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
comment|/**          * Sole constructor.          *          * @param value the value that will be returned when the call method is invoked.          */
DECL|method|ConstantValueGenerator
specifier|private
name|ConstantValueGenerator
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value must not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|Object
name|call
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
comment|/**      * This callable is used for the DATE preflight HTTP response HTTP header.      * It's value must be generated when the response is generated, hence will be      * different for every call.      */
DECL|class|DateValueGenerator
specifier|private
specifier|static
specifier|final
class|class
name|DateValueGenerator
implements|implements
name|Callable
argument_list|<
name|Date
argument_list|>
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|DateValueGenerator
name|INSTANCE
init|=
operator|new
name|DateValueGenerator
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|call
specifier|public
name|Date
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|Date
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

