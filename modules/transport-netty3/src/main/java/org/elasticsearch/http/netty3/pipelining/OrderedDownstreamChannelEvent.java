begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.http.netty3.pipelining
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty3
operator|.
name|pipelining
package|;
end_package

begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|// this file is from netty-http-pipelining, under apache 2.0 license
end_comment

begin_comment
comment|// see github.com/typesafehub/netty-http-pipelining
end_comment

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|DownstreamMessageEvent
import|;
end_import

begin_comment
comment|/**  * Permits downstream channel events to be ordered and signalled as to whether more are to come for a given sequence.  *  * @author Christopher Hunt  */
end_comment

begin_class
DECL|class|OrderedDownstreamChannelEvent
specifier|public
class|class
name|OrderedDownstreamChannelEvent
implements|implements
name|ChannelEvent
block|{
DECL|field|ce
specifier|final
name|ChannelEvent
name|ce
decl_stmt|;
DECL|field|oue
specifier|final
name|OrderedUpstreamMessageEvent
name|oue
decl_stmt|;
DECL|field|subsequence
specifier|final
name|int
name|subsequence
decl_stmt|;
DECL|field|last
specifier|final
name|boolean
name|last
decl_stmt|;
comment|/**      * Construct a downstream channel event for all types of events.      *      * @param oue         the OrderedUpstreamMessageEvent that this response is associated with      * @param subsequence the sequence within the sequence      * @param last        when set to true this indicates that there are no more responses to be received for the      *                    original OrderedUpstreamMessageEvent      */
DECL|method|OrderedDownstreamChannelEvent
specifier|public
name|OrderedDownstreamChannelEvent
parameter_list|(
specifier|final
name|OrderedUpstreamMessageEvent
name|oue
parameter_list|,
specifier|final
name|int
name|subsequence
parameter_list|,
name|boolean
name|last
parameter_list|,
specifier|final
name|ChannelEvent
name|ce
parameter_list|)
block|{
name|this
operator|.
name|oue
operator|=
name|oue
expr_stmt|;
name|this
operator|.
name|ce
operator|=
name|ce
expr_stmt|;
name|this
operator|.
name|subsequence
operator|=
name|subsequence
expr_stmt|;
name|this
operator|.
name|last
operator|=
name|last
expr_stmt|;
block|}
comment|/**      * Convenience constructor signifying that this downstream message event is the last one for the given sequence,      * and that there is only one response.      */
DECL|method|OrderedDownstreamChannelEvent
specifier|public
name|OrderedDownstreamChannelEvent
parameter_list|(
specifier|final
name|OrderedUpstreamMessageEvent
name|oe
parameter_list|,
specifier|final
name|Object
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|oe
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convenience constructor for passing message events.      */
DECL|method|OrderedDownstreamChannelEvent
specifier|public
name|OrderedDownstreamChannelEvent
parameter_list|(
specifier|final
name|OrderedUpstreamMessageEvent
name|oue
parameter_list|,
specifier|final
name|int
name|subsequence
parameter_list|,
name|boolean
name|last
parameter_list|,
specifier|final
name|Object
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|oue
argument_list|,
name|subsequence
argument_list|,
name|last
argument_list|,
operator|new
name|DownstreamMessageEvent
argument_list|(
name|oue
operator|.
name|getChannel
argument_list|()
argument_list|,
name|Channels
operator|.
name|future
argument_list|(
name|oue
operator|.
name|getChannel
argument_list|()
argument_list|)
argument_list|,
name|message
argument_list|,
name|oue
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getOrderedUpstreamMessageEvent
specifier|public
name|OrderedUpstreamMessageEvent
name|getOrderedUpstreamMessageEvent
parameter_list|()
block|{
return|return
name|oue
return|;
block|}
DECL|method|getSubsequence
specifier|public
name|int
name|getSubsequence
parameter_list|()
block|{
return|return
name|subsequence
return|;
block|}
DECL|method|isLast
specifier|public
name|boolean
name|isLast
parameter_list|()
block|{
return|return
name|last
return|;
block|}
annotation|@
name|Override
DECL|method|getChannel
specifier|public
name|Channel
name|getChannel
parameter_list|()
block|{
return|return
name|ce
operator|.
name|getChannel
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFuture
specifier|public
name|ChannelFuture
name|getFuture
parameter_list|()
block|{
return|return
name|ce
operator|.
name|getFuture
argument_list|()
return|;
block|}
DECL|method|getChannelEvent
specifier|public
name|ChannelEvent
name|getChannelEvent
parameter_list|()
block|{
return|return
name|ce
return|;
block|}
block|}
end_class

end_unit

