begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.matrix.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|matrix
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|BaseMatrixStatsTestCase
specifier|public
specifier|abstract
class|class
name|BaseMatrixStatsTestCase
extends|extends
name|ESTestCase
block|{
DECL|field|numObs
specifier|protected
specifier|final
name|int
name|numObs
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
DECL|field|fieldA
specifier|protected
specifier|final
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|fieldA
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numObs
argument_list|)
decl_stmt|;
DECL|field|fieldB
specifier|protected
specifier|final
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|fieldB
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numObs
argument_list|)
decl_stmt|;
DECL|field|actualStats
specifier|protected
specifier|final
name|MultiPassStats
name|actualStats
init|=
operator|new
name|MultiPassStats
argument_list|(
name|fieldAKey
argument_list|,
name|fieldBKey
argument_list|)
decl_stmt|;
DECL|field|fieldAKey
specifier|protected
specifier|static
specifier|final
name|String
name|fieldAKey
init|=
literal|"fieldA"
decl_stmt|;
DECL|field|fieldBKey
specifier|protected
specifier|static
specifier|final
name|String
name|fieldBKey
init|=
literal|"fieldB"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|createStats
argument_list|()
expr_stmt|;
block|}
DECL|method|createStats
specifier|public
name|void
name|createStats
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|numObs
condition|;
operator|++
name|n
control|)
block|{
name|fieldA
operator|.
name|add
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
name|fieldB
operator|.
name|add
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|actualStats
operator|.
name|computeStats
argument_list|(
name|fieldA
argument_list|,
name|fieldB
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

