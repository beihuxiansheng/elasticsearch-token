begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.matrix.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|matrix
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalAggregationTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|InternalMatrixStatsTests
specifier|public
class|class
name|InternalMatrixStatsTests
extends|extends
name|InternalAggregationTestCase
argument_list|<
name|InternalMatrixStats
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|InternalMatrixStats
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|int
name|numFields
init|=
name|randomInt
argument_list|(
literal|128
argument_list|)
decl_stmt|;
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[
name|numFields
index|]
decl_stmt|;
name|double
index|[]
name|fieldValues
init|=
operator|new
name|double
index|[
name|numFields
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|fieldNames
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|fieldValues
index|[
name|i
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
block|}
name|RunningStats
name|runningStats
init|=
operator|new
name|RunningStats
argument_list|()
decl_stmt|;
name|runningStats
operator|.
name|add
argument_list|(
name|fieldNames
argument_list|,
name|fieldValues
argument_list|)
expr_stmt|;
name|MatrixStatsResults
name|matrixStatsResults
init|=
name|randomBoolean
argument_list|()
condition|?
operator|new
name|MatrixStatsResults
argument_list|(
name|runningStats
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|InternalMatrixStats
argument_list|(
literal|"_name"
argument_list|,
literal|1L
argument_list|,
name|runningStats
argument_list|,
name|matrixStatsResults
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Writeable
operator|.
name|Reader
argument_list|<
name|InternalMatrixStats
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|InternalMatrixStats
operator|::
operator|new
return|;
block|}
annotation|@
name|Override
DECL|method|testReduceRandom
specifier|public
name|void
name|testReduceRandom
parameter_list|()
block|{
name|int
name|numValues
init|=
literal|10000
decl_stmt|;
name|int
name|numShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|int
name|valuesPerShard
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|numValues
operator|/
name|numShards
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|aValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|bValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RunningStats
name|runningStats
init|=
operator|new
name|RunningStats
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|shardResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|valuePerShardCounter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|double
name|valueA
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|aValues
operator|.
name|add
argument_list|(
name|valueA
argument_list|)
expr_stmt|;
name|double
name|valueB
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|bValues
operator|.
name|add
argument_list|(
name|valueB
argument_list|)
expr_stmt|;
name|runningStats
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|valueA
block|,
name|valueB
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|valuePerShardCounter
operator|==
name|valuesPerShard
condition|)
block|{
name|shardResults
operator|.
name|add
argument_list|(
operator|new
name|InternalMatrixStats
argument_list|(
literal|"_name"
argument_list|,
literal|1L
argument_list|,
name|runningStats
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|runningStats
operator|=
operator|new
name|RunningStats
argument_list|()
expr_stmt|;
name|valuePerShardCounter
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|valuePerShardCounter
operator|!=
literal|0
condition|)
block|{
name|shardResults
operator|.
name|add
argument_list|(
operator|new
name|InternalMatrixStats
argument_list|(
literal|"_name"
argument_list|,
literal|1L
argument_list|,
name|runningStats
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MultiPassStats
name|multiPassStats
init|=
operator|new
name|MultiPassStats
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|multiPassStats
operator|.
name|computeStats
argument_list|(
name|aValues
argument_list|,
name|bValues
argument_list|)
expr_stmt|;
name|ScriptService
name|mockScriptService
init|=
name|mockScriptService
argument_list|()
decl_stmt|;
name|MockBigArrays
name|bigArrays
init|=
operator|new
name|MockBigArrays
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|)
decl_stmt|;
name|InternalAggregation
operator|.
name|ReduceContext
name|context
init|=
operator|new
name|InternalAggregation
operator|.
name|ReduceContext
argument_list|(
name|bigArrays
argument_list|,
name|mockScriptService
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|InternalMatrixStats
name|reduced
init|=
operator|(
name|InternalMatrixStats
operator|)
name|shardResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reduce
argument_list|(
name|shardResults
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|multiPassStats
operator|.
name|assertNearlyEqual
argument_list|(
name|reduced
operator|.
name|getResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertReduced
specifier|protected
name|void
name|assertReduced
parameter_list|(
name|InternalMatrixStats
name|reduced
parameter_list|,
name|List
argument_list|<
name|InternalMatrixStats
argument_list|>
name|inputs
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

