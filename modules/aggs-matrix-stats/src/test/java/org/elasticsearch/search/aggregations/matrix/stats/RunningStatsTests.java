begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.matrix.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|matrix
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|RunningStatsTests
specifier|public
class|class
name|RunningStatsTests
extends|extends
name|BaseMatrixStatsTestCase
block|{
comment|/** test running stats */
DECL|method|testRunningStats
specifier|public
name|void
name|testRunningStats
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MatrixStatsResults
name|results
init|=
operator|new
name|MatrixStatsResults
argument_list|(
name|createRunningStats
argument_list|(
name|fieldA
argument_list|,
name|fieldB
argument_list|)
argument_list|)
decl_stmt|;
name|actualStats
operator|.
name|assertNearlyEqual
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
comment|/** Test merging stats across observation shards */
DECL|method|testMergedStats
specifier|public
name|void
name|testMergedStats
parameter_list|()
throws|throws
name|Exception
block|{
comment|// slice observations into shards
name|int
name|numShards
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|double
name|obsPerShard
init|=
name|Math
operator|.
name|floor
argument_list|(
name|numObs
operator|/
name|numShards
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|RunningStats
name|stats
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|fieldAShard
decl_stmt|,
name|fieldBShard
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|numShards
operator|-
literal|1
condition|;
name|start
operator|=
operator|++
name|s
operator|*
operator|(
name|int
operator|)
name|obsPerShard
control|)
block|{
name|fieldAShard
operator|=
name|fieldA
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|start
operator|+
operator|(
name|int
operator|)
name|obsPerShard
argument_list|)
expr_stmt|;
name|fieldBShard
operator|=
name|fieldB
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|start
operator|+
operator|(
name|int
operator|)
name|obsPerShard
argument_list|)
expr_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
block|{
name|stats
operator|=
name|createRunningStats
argument_list|(
name|fieldAShard
argument_list|,
name|fieldBShard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|.
name|merge
argument_list|(
name|createRunningStats
argument_list|(
name|fieldAShard
argument_list|,
name|fieldBShard
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|stats
operator|.
name|merge
argument_list|(
name|createRunningStats
argument_list|(
name|fieldA
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|fieldA
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|fieldB
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|fieldB
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MatrixStatsResults
name|results
init|=
operator|new
name|MatrixStatsResults
argument_list|(
name|stats
argument_list|)
decl_stmt|;
name|actualStats
operator|.
name|assertNearlyEqual
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|createRunningStats
specifier|private
name|RunningStats
name|createRunningStats
parameter_list|(
name|List
argument_list|<
name|Double
argument_list|>
name|fieldAObs
parameter_list|,
name|List
argument_list|<
name|Double
argument_list|>
name|fieldBObs
parameter_list|)
block|{
name|RunningStats
name|stats
init|=
operator|new
name|RunningStats
argument_list|()
decl_stmt|;
comment|// create a document with two numeric fields
specifier|final
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|fieldNames
index|[
literal|0
index|]
operator|=
name|fieldAKey
expr_stmt|;
name|fieldNames
index|[
literal|1
index|]
operator|=
name|fieldBKey
expr_stmt|;
specifier|final
name|double
index|[]
name|fieldVals
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
comment|// running stats computation
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|fieldAObs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|n
control|)
block|{
name|fieldVals
index|[
literal|0
index|]
operator|=
name|fieldAObs
operator|.
name|get
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|fieldVals
index|[
literal|1
index|]
operator|=
name|fieldBObs
operator|.
name|get
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|stats
operator|.
name|add
argument_list|(
name|fieldNames
argument_list|,
name|fieldVals
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
block|}
end_class

end_unit

