begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.matrix.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|matrix
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ObjectArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|NumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|LeafBucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|LeafBucketCollectorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|MetricsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|MultiValuesSource
operator|.
name|NumericMultiValuesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Metric Aggregation for computing the pearson product correlation coefficient between multiple fields  **/
end_comment

begin_class
DECL|class|MatrixStatsAggregator
specifier|public
class|class
name|MatrixStatsAggregator
extends|extends
name|MetricsAggregator
block|{
comment|/** Multiple ValuesSource with field names */
DECL|field|valuesSources
specifier|final
name|NumericMultiValuesSource
name|valuesSources
decl_stmt|;
comment|/** array of descriptive stats, per shard, needed to compute the correlation */
DECL|field|stats
name|ObjectArray
argument_list|<
name|RunningStats
argument_list|>
name|stats
decl_stmt|;
DECL|method|MatrixStatsAggregator
specifier|public
name|MatrixStatsAggregator
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ValuesSource
operator|.
name|Numeric
argument_list|>
name|valuesSources
parameter_list|,
name|AggregationContext
name|context
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|MultiValueMode
name|multiValueMode
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
if|if
condition|(
name|valuesSources
operator|!=
literal|null
operator|&&
operator|!
name|valuesSources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|valuesSources
operator|=
operator|new
name|NumericMultiValuesSource
argument_list|(
name|valuesSources
argument_list|,
name|multiValueMode
argument_list|)
expr_stmt|;
name|stats
operator|=
name|context
operator|.
name|bigArrays
argument_list|()
operator|.
name|newObjectArray
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|valuesSources
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
operator|(
name|valuesSources
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|valuesSources
operator|.
name|needsScores
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafBucketCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|,
specifier|final
name|LeafBucketCollector
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valuesSources
operator|==
literal|null
condition|)
block|{
return|return
name|LeafBucketCollector
operator|.
name|NO_OP_COLLECTOR
return|;
block|}
specifier|final
name|BigArrays
name|bigArrays
init|=
name|context
operator|.
name|bigArrays
argument_list|()
decl_stmt|;
specifier|final
name|NumericDoubleValues
index|[]
name|values
init|=
operator|new
name|NumericDoubleValues
index|[
name|valuesSources
operator|.
name|fieldNames
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|valuesSources
operator|.
name|getField
argument_list|(
name|i
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LeafBucketCollectorBase
argument_list|(
name|sub
argument_list|,
name|values
argument_list|)
block|{
specifier|final
name|String
index|[]
name|fieldNames
init|=
name|valuesSources
operator|.
name|fieldNames
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|fieldVals
init|=
operator|new
name|double
index|[
name|fieldNames
operator|.
name|length
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get fields
if|if
condition|(
name|includeDocument
argument_list|(
name|doc
argument_list|)
operator|==
literal|true
condition|)
block|{
name|stats
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|stats
argument_list|,
name|bucket
operator|+
literal|1
argument_list|)
expr_stmt|;
name|RunningStats
name|stat
init|=
name|stats
operator|.
name|get
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
comment|// add document fields to correlation stats
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
name|stat
operator|=
operator|new
name|RunningStats
argument_list|(
name|fieldNames
argument_list|,
name|fieldVals
argument_list|)
expr_stmt|;
name|stats
operator|.
name|set
argument_list|(
name|bucket
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stat
operator|.
name|add
argument_list|(
name|fieldNames
argument_list|,
name|fieldVals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**              * return a map of field names and data              */
specifier|private
name|boolean
name|includeDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// loop over fields
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldVals
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|NumericDoubleValues
name|doubleValues
init|=
name|values
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|double
name|value
init|=
name|doubleValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// skip if value is missing
if|if
condition|(
name|value
operator|==
name|Double
operator|.
name|NEGATIVE_INFINITY
condition|)
block|{
return|return
literal|false
return|;
block|}
name|fieldVals
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|buildAggregation
specifier|public
name|InternalAggregation
name|buildAggregation
parameter_list|(
name|long
name|bucket
parameter_list|)
block|{
if|if
condition|(
name|valuesSources
operator|==
literal|null
operator|||
name|bucket
operator|>=
name|stats
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|buildEmptyAggregation
argument_list|()
return|;
block|}
return|return
operator|new
name|InternalMatrixStats
argument_list|(
name|name
argument_list|,
name|stats
operator|.
name|size
argument_list|()
argument_list|,
name|stats
operator|.
name|get
argument_list|(
name|bucket
argument_list|)
argument_list|,
literal|null
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|buildEmptyAggregation
specifier|public
name|InternalAggregation
name|buildEmptyAggregation
parameter_list|()
block|{
return|return
operator|new
name|InternalMatrixStats
argument_list|(
name|name
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|public
name|void
name|doClose
parameter_list|()
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

