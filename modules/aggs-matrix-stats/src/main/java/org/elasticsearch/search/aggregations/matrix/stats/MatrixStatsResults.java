begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.matrix.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|matrix
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Descriptive stats gathered per shard. Coordinating node computes final pearson product coefficient  * based on these descriptive stats  */
end_comment

begin_class
DECL|class|MatrixStatsResults
class|class
name|MatrixStatsResults
implements|implements
name|Writeable
block|{
comment|/** object holding results - computes results in place */
DECL|field|results
specifier|protected
specifier|final
name|RunningStats
name|results
decl_stmt|;
comment|/** pearson product correlation coefficients */
DECL|field|correlation
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|correlation
decl_stmt|;
comment|/** Base ctor */
DECL|method|MatrixStatsResults
name|MatrixStatsResults
parameter_list|()
block|{
name|results
operator|=
operator|new
name|RunningStats
argument_list|()
expr_stmt|;
name|this
operator|.
name|correlation
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/** creates and computes result from provided stats */
DECL|method|MatrixStatsResults
name|MatrixStatsResults
parameter_list|(
name|RunningStats
name|stats
parameter_list|)
block|{
name|this
operator|.
name|results
operator|=
name|stats
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|correlation
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|compute
argument_list|()
expr_stmt|;
block|}
comment|/** creates a results object from the given stream */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|MatrixStatsResults
specifier|protected
name|MatrixStatsResults
parameter_list|(
name|StreamInput
name|in
parameter_list|)
block|{
try|try
block|{
name|results
operator|=
operator|new
name|RunningStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|correlation
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Error trying to create multifield_stats results from stream input"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Marshalls MatrixStatsResults */
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// marshall results
name|results
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// marshall correlation
name|out
operator|.
name|writeGenericValue
argument_list|(
name|correlation
argument_list|)
expr_stmt|;
block|}
comment|/** return document count */
DECL|method|getDocCount
specifier|public
specifier|final
name|long
name|getDocCount
parameter_list|()
block|{
return|return
name|results
operator|.
name|docCount
return|;
block|}
comment|/** return the field counts - not public, used for getProperty() */
DECL|method|getFieldCounts
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getFieldCounts
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|results
operator|.
name|counts
argument_list|)
return|;
block|}
comment|/** return the fied count for the requested field */
DECL|method|getFieldCount
specifier|public
name|long
name|getFieldCount
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|results
operator|.
name|counts
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|results
operator|.
name|counts
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/** return the means - not public, used for getProperty() */
DECL|method|getMeans
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getMeans
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|results
operator|.
name|means
argument_list|)
return|;
block|}
comment|/** return the mean for the requested field */
DECL|method|getMean
specifier|public
name|double
name|getMean
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|checkField
argument_list|(
name|field
argument_list|,
name|results
operator|.
name|means
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|means
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/** return the variances - not public, used for getProperty() */
DECL|method|getVariances
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getVariances
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|results
operator|.
name|variances
argument_list|)
return|;
block|}
comment|/** return the variance for the requested field */
DECL|method|getVariance
specifier|public
name|double
name|getVariance
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|checkField
argument_list|(
name|field
argument_list|,
name|results
operator|.
name|variances
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|variances
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/** return the skewness - not public, used for getProperty() */
DECL|method|getSkewness
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getSkewness
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|results
operator|.
name|skewness
argument_list|)
return|;
block|}
comment|/** return the skewness for the requested field */
DECL|method|getSkewness
specifier|public
name|double
name|getSkewness
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|checkField
argument_list|(
name|field
argument_list|,
name|results
operator|.
name|skewness
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|skewness
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/** return the kurtosis */
DECL|method|getKurtosis
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getKurtosis
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|results
operator|.
name|kurtosis
argument_list|)
return|;
block|}
comment|/** return the kurtosis for the requested field */
DECL|method|getKurtosis
specifier|public
name|double
name|getKurtosis
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|checkField
argument_list|(
name|field
argument_list|,
name|results
operator|.
name|kurtosis
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|kurtosis
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/** return the covariances as a map - not public, used for getProperty() */
DECL|method|getCovariances
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|getCovariances
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|results
operator|.
name|covariances
argument_list|)
return|;
block|}
comment|/** return the covariance between two fields */
DECL|method|getCovariance
specifier|public
name|double
name|getCovariance
parameter_list|(
name|String
name|fieldX
parameter_list|,
name|String
name|fieldY
parameter_list|)
block|{
if|if
condition|(
name|fieldX
operator|.
name|equals
argument_list|(
name|fieldY
argument_list|)
condition|)
block|{
name|checkField
argument_list|(
name|fieldX
argument_list|,
name|results
operator|.
name|variances
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|variances
operator|.
name|get
argument_list|(
name|fieldX
argument_list|)
return|;
block|}
return|return
name|getValFromUpperTriangularMatrix
argument_list|(
name|results
operator|.
name|covariances
argument_list|,
name|fieldX
argument_list|,
name|fieldY
argument_list|)
return|;
block|}
comment|/** return the correlations as a map - not public, used for getProperty() */
DECL|method|getCorrelations
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|getCorrelations
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|correlation
argument_list|)
return|;
block|}
comment|/** return the correlation coefficient between two fields */
DECL|method|getCorrelation
specifier|public
name|Double
name|getCorrelation
parameter_list|(
name|String
name|fieldX
parameter_list|,
name|String
name|fieldY
parameter_list|)
block|{
if|if
condition|(
name|fieldX
operator|.
name|equals
argument_list|(
name|fieldY
argument_list|)
condition|)
block|{
return|return
literal|1.0
return|;
block|}
return|return
name|getValFromUpperTriangularMatrix
argument_list|(
name|correlation
argument_list|,
name|fieldX
argument_list|,
name|fieldY
argument_list|)
return|;
block|}
comment|/** return the value for two fields in an upper triangular matrix, regardless of row col location. */
DECL|method|getValFromUpperTriangularMatrix
specifier|private
name|double
name|getValFromUpperTriangularMatrix
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|map
parameter_list|,
name|String
name|fieldX
parameter_list|,
name|String
name|fieldY
parameter_list|)
block|{
comment|// for the co-value to exist, one of the two (or both) fields has to be a row key
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|fieldX
argument_list|)
operator|==
literal|false
operator|&&
name|map
operator|.
name|containsKey
argument_list|(
name|fieldY
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"neither field "
operator|+
name|fieldX
operator|+
literal|" nor "
operator|+
name|fieldY
operator|+
literal|" exist"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|fieldX
argument_list|)
condition|)
block|{
comment|// fieldX exists as a row key
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|fieldX
argument_list|)
operator|.
name|containsKey
argument_list|(
name|fieldY
argument_list|)
condition|)
block|{
comment|// fieldY exists as a col key to fieldX
return|return
name|map
operator|.
name|get
argument_list|(
name|fieldX
argument_list|)
operator|.
name|get
argument_list|(
name|fieldY
argument_list|)
return|;
block|}
else|else
block|{
comment|// otherwise fieldX is the col key to fieldY
return|return
name|map
operator|.
name|get
argument_list|(
name|fieldY
argument_list|)
operator|.
name|get
argument_list|(
name|fieldX
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|fieldY
argument_list|)
condition|)
block|{
comment|// fieldX did not exist as a row key, it must be a col key
return|return
name|map
operator|.
name|get
argument_list|(
name|fieldY
argument_list|)
operator|.
name|get
argument_list|(
name|fieldX
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Coefficient not computed between fields: "
operator|+
name|fieldX
operator|+
literal|" and "
operator|+
name|fieldY
argument_list|)
throw|;
block|}
DECL|method|checkField
specifier|private
name|void
name|checkField
parameter_list|(
name|String
name|field
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field name cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field "
operator|+
name|field
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
comment|/** Computes final covariance, variance, and correlation */
DECL|method|compute
specifier|private
name|void
name|compute
parameter_list|()
block|{
specifier|final
name|double
name|nM1
init|=
name|results
operator|.
name|docCount
operator|-
literal|1D
decl_stmt|;
comment|// compute final skewness and kurtosis
for|for
control|(
name|String
name|fieldName
range|:
name|results
operator|.
name|means
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|double
name|var
init|=
name|results
operator|.
name|variances
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// update skewness
name|results
operator|.
name|skewness
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|Math
operator|.
name|sqrt
argument_list|(
name|results
operator|.
name|docCount
argument_list|)
operator|*
name|results
operator|.
name|skewness
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|/
name|Math
operator|.
name|pow
argument_list|(
name|var
argument_list|,
literal|1.5D
argument_list|)
argument_list|)
expr_stmt|;
comment|// update kurtosis
name|results
operator|.
name|kurtosis
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
operator|(
name|double
operator|)
name|results
operator|.
name|docCount
operator|*
name|results
operator|.
name|kurtosis
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|/
operator|(
name|var
operator|*
name|var
operator|)
argument_list|)
expr_stmt|;
comment|// update variances
name|results
operator|.
name|variances
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|results
operator|.
name|variances
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|/
name|nM1
argument_list|)
expr_stmt|;
block|}
comment|// compute final covariances and correlation
name|double
name|cor
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|row
range|:
name|results
operator|.
name|covariances
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|rowName
init|=
name|row
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|covRow
init|=
name|row
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|corRow
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|col
range|:
name|covRow
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|colName
init|=
name|col
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// update covariance
name|covRow
operator|.
name|put
argument_list|(
name|colName
argument_list|,
name|covRow
operator|.
name|get
argument_list|(
name|colName
argument_list|)
operator|/
name|nM1
argument_list|)
expr_stmt|;
comment|// update correlation
comment|// if there is no variance in the data then correlation is NaN
if|if
condition|(
name|results
operator|.
name|variances
operator|.
name|get
argument_list|(
name|rowName
argument_list|)
operator|==
literal|0d
operator|||
name|results
operator|.
name|variances
operator|.
name|get
argument_list|(
name|colName
argument_list|)
operator|==
literal|0d
condition|)
block|{
name|cor
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|double
name|corDen
init|=
name|Math
operator|.
name|sqrt
argument_list|(
name|results
operator|.
name|variances
operator|.
name|get
argument_list|(
name|rowName
argument_list|)
argument_list|)
operator|*
name|Math
operator|.
name|sqrt
argument_list|(
name|results
operator|.
name|variances
operator|.
name|get
argument_list|(
name|colName
argument_list|)
argument_list|)
decl_stmt|;
name|cor
operator|=
name|covRow
operator|.
name|get
argument_list|(
name|colName
argument_list|)
operator|/
name|corDen
expr_stmt|;
block|}
name|corRow
operator|.
name|put
argument_list|(
name|colName
argument_list|,
name|cor
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|covariances
operator|.
name|put
argument_list|(
name|rowName
argument_list|,
name|covRow
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|put
argument_list|(
name|rowName
argument_list|,
name|corRow
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

