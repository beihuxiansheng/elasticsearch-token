begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|NumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Class to encapsulate a set of ValuesSource objects labeled by field name  */
end_comment

begin_class
DECL|class|MultiValuesSource
specifier|public
specifier|abstract
class|class
name|MultiValuesSource
parameter_list|<
name|VS
extends|extends
name|ValuesSource
parameter_list|>
block|{
DECL|field|multiValueMode
specifier|protected
name|MultiValueMode
name|multiValueMode
decl_stmt|;
DECL|field|names
specifier|protected
name|String
index|[]
name|names
decl_stmt|;
DECL|field|values
specifier|protected
name|VS
index|[]
name|values
decl_stmt|;
DECL|class|NumericMultiValuesSource
specifier|public
specifier|static
class|class
name|NumericMultiValuesSource
extends|extends
name|MultiValuesSource
argument_list|<
name|ValuesSource
operator|.
name|Numeric
argument_list|>
block|{
DECL|method|NumericMultiValuesSource
specifier|public
name|NumericMultiValuesSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ValuesSource
operator|.
name|Numeric
argument_list|>
name|valuesSources
parameter_list|,
name|MultiValueMode
name|multiValueMode
parameter_list|)
block|{
name|super
argument_list|(
name|valuesSources
argument_list|,
name|multiValueMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|valuesSources
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|values
operator|=
name|valuesSources
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ValuesSource
operator|.
name|Numeric
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|values
operator|=
operator|new
name|ValuesSource
operator|.
name|Numeric
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
DECL|method|getField
specifier|public
name|NumericDoubleValues
name|getField
parameter_list|(
specifier|final
name|int
name|ordinal
parameter_list|,
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ordinal
operator|>
name|names
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"ValuesSource array index "
operator|+
name|ordinal
operator|+
literal|" out of bounds"
argument_list|)
throw|;
block|}
return|return
name|multiValueMode
operator|.
name|select
argument_list|(
name|values
index|[
name|ordinal
index|]
operator|.
name|doubleValues
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
return|;
block|}
block|}
DECL|class|BytesMultiValuesSource
specifier|public
specifier|static
class|class
name|BytesMultiValuesSource
extends|extends
name|MultiValuesSource
argument_list|<
name|ValuesSource
operator|.
name|Bytes
argument_list|>
block|{
DECL|method|BytesMultiValuesSource
specifier|public
name|BytesMultiValuesSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ValuesSource
operator|.
name|Bytes
argument_list|>
name|valuesSources
parameter_list|,
name|MultiValueMode
name|multiValueMode
parameter_list|)
block|{
name|super
argument_list|(
name|valuesSources
argument_list|,
name|multiValueMode
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|valuesSources
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ValuesSource
operator|.
name|Bytes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|getField
specifier|public
name|Object
name|getField
parameter_list|(
specifier|final
name|int
name|ordinal
parameter_list|,
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|values
index|[
name|ordinal
index|]
operator|.
name|bytesValues
argument_list|(
name|ctx
argument_list|)
return|;
block|}
block|}
DECL|class|GeoPointValuesSource
specifier|public
specifier|static
class|class
name|GeoPointValuesSource
extends|extends
name|MultiValuesSource
argument_list|<
name|ValuesSource
operator|.
name|GeoPoint
argument_list|>
block|{
DECL|method|GeoPointValuesSource
specifier|public
name|GeoPointValuesSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ValuesSource
operator|.
name|GeoPoint
argument_list|>
name|valuesSources
parameter_list|,
name|MultiValueMode
name|multiValueMode
parameter_list|)
block|{
name|super
argument_list|(
name|valuesSources
argument_list|,
name|multiValueMode
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|valuesSources
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ValuesSource
operator|.
name|GeoPoint
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|MultiValuesSource
specifier|private
name|MultiValuesSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|valuesSources
parameter_list|,
name|MultiValueMode
name|multiValueMode
parameter_list|)
block|{
if|if
condition|(
name|valuesSources
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|names
operator|=
name|valuesSources
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|multiValueMode
operator|=
name|multiValueMode
expr_stmt|;
block|}
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
name|boolean
name|needsScores
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ValuesSource
name|value
range|:
name|values
control|)
block|{
name|needsScores
operator||=
name|value
operator|.
name|needsScores
argument_list|()
expr_stmt|;
block|}
return|return
name|needsScores
return|;
block|}
DECL|method|fieldNames
specifier|public
name|String
index|[]
name|fieldNames
parameter_list|()
block|{
return|return
name|this
operator|.
name|names
return|;
block|}
block|}
end_class

end_unit

