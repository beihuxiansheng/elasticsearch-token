begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.matrix.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|matrix
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|InternalMetricsAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Computes distribution statistics over multiple fields  */
end_comment

begin_class
DECL|class|InternalMatrixStats
specifier|public
class|class
name|InternalMatrixStats
extends|extends
name|InternalMetricsAggregation
implements|implements
name|MatrixStats
block|{
DECL|field|TYPE
specifier|public
specifier|final
specifier|static
name|Type
name|TYPE
init|=
operator|new
name|Type
argument_list|(
literal|"matrix_stats"
argument_list|)
decl_stmt|;
DECL|field|STREAM
specifier|public
specifier|final
specifier|static
name|AggregationStreams
operator|.
name|Stream
name|STREAM
init|=
operator|new
name|AggregationStreams
operator|.
name|Stream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InternalMatrixStats
name|readResult
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalMatrixStats
name|result
init|=
operator|new
name|InternalMatrixStats
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
DECL|method|registerStreams
specifier|public
specifier|static
name|void
name|registerStreams
parameter_list|()
block|{
name|AggregationStreams
operator|.
name|registerStream
argument_list|(
name|STREAM
argument_list|,
name|TYPE
operator|.
name|stream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** per shard stats needed to compute stats */
DECL|field|stats
specifier|protected
name|RunningStats
name|stats
decl_stmt|;
comment|/** final result */
DECL|field|results
specifier|protected
name|MatrixStatsResults
name|results
decl_stmt|;
DECL|method|InternalMatrixStats
specifier|protected
name|InternalMatrixStats
parameter_list|()
block|{     }
comment|/** per shard ctor */
DECL|method|InternalMatrixStats
specifier|protected
name|InternalMatrixStats
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|count
parameter_list|,
name|RunningStats
name|multiFieldStatsResults
parameter_list|,
name|MatrixStatsResults
name|results
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
assert|assert
name|count
operator|>=
literal|0
assert|;
name|this
operator|.
name|stats
operator|=
name|multiFieldStatsResults
expr_stmt|;
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|long
name|getDocCount
parameter_list|()
block|{
return|return
name|stats
operator|.
name|docCount
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldCount
specifier|public
name|long
name|getFieldCount
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|results
operator|.
name|getFieldCount
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMean
specifier|public
name|Double
name|getMean
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|results
operator|.
name|getMean
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getVariance
specifier|public
name|Double
name|getVariance
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|results
operator|.
name|getVariance
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSkewness
specifier|public
name|Double
name|getSkewness
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|results
operator|.
name|getSkewness
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKurtosis
specifier|public
name|Double
name|getKurtosis
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|results
operator|.
name|getKurtosis
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCovariance
specifier|public
name|Double
name|getCovariance
parameter_list|(
name|String
name|fieldX
parameter_list|,
name|String
name|fieldY
parameter_list|)
block|{
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|results
operator|.
name|getCovariance
argument_list|(
name|fieldX
argument_list|,
name|fieldY
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCovariance
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|getCovariance
parameter_list|()
block|{
return|return
name|results
operator|.
name|getCovariances
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCorrelation
specifier|public
name|Double
name|getCorrelation
parameter_list|(
name|String
name|fieldX
parameter_list|,
name|String
name|fieldY
parameter_list|)
block|{
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|results
operator|.
name|getCorrelation
argument_list|(
name|fieldX
argument_list|,
name|fieldY
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCorrelation
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|getCorrelation
parameter_list|()
block|{
return|return
name|results
operator|.
name|getCorrelations
argument_list|()
return|;
block|}
DECL|class|Fields
specifier|static
class|class
name|Fields
block|{
DECL|field|COUNT
specifier|public
specifier|static
specifier|final
name|String
name|COUNT
init|=
literal|"count"
decl_stmt|;
DECL|field|MEAN
specifier|public
specifier|static
specifier|final
name|String
name|MEAN
init|=
literal|"mean"
decl_stmt|;
DECL|field|VARIANCE
specifier|public
specifier|static
specifier|final
name|String
name|VARIANCE
init|=
literal|"variance"
decl_stmt|;
DECL|field|SKEWNESS
specifier|public
specifier|static
specifier|final
name|String
name|SKEWNESS
init|=
literal|"skewness"
decl_stmt|;
DECL|field|KURTOSIS
specifier|public
specifier|static
specifier|final
name|String
name|KURTOSIS
init|=
literal|"kurtosis"
decl_stmt|;
DECL|field|COVARIANCE
specifier|public
specifier|static
specifier|final
name|String
name|COVARIANCE
init|=
literal|"covariance"
decl_stmt|;
DECL|field|CORRELATION
specifier|public
specifier|static
specifier|final
name|String
name|CORRELATION
init|=
literal|"correlation"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|public
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|results
operator|.
name|getFieldCounts
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COUNT
argument_list|,
name|results
operator|.
name|getFieldCounts
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MEAN
argument_list|,
name|results
operator|.
name|getMeans
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VARIANCE
argument_list|,
name|results
operator|.
name|getVariances
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|SKEWNESS
argument_list|,
name|results
operator|.
name|getSkewness
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|KURTOSIS
argument_list|,
name|results
operator|.
name|getKurtosis
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|>
name|cov
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|>
name|cor
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|y
range|:
name|fieldNames
control|)
block|{
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|covRow
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|corRow
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|x
range|:
name|fieldNames
control|)
block|{
name|covRow
operator|.
name|add
argument_list|(
name|results
operator|.
name|getCovariance
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|corRow
operator|.
name|add
argument_list|(
name|results
operator|.
name|getCorrelation
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cov
operator|.
name|add
argument_list|(
name|covRow
argument_list|)
expr_stmt|;
name|cor
operator|.
name|add
argument_list|(
name|corRow
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COVARIANCE
argument_list|,
name|cov
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|CORRELATION
argument_list|,
name|cor
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty
specifier|public
name|Object
name|getProperty
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|coordinate
init|=
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
name|results
operator|=
name|MatrixStatsResults
operator|.
name|EMPTY
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|coordinate
condition|)
block|{
case|case
literal|"counts"
case|:
return|return
name|results
operator|.
name|getFieldCounts
argument_list|()
return|;
case|case
literal|"means"
case|:
return|return
name|results
operator|.
name|getMeans
argument_list|()
return|;
case|case
literal|"variances"
case|:
return|return
name|results
operator|.
name|getVariances
argument_list|()
return|;
case|case
literal|"skewness"
case|:
return|return
name|results
operator|.
name|getSkewness
argument_list|()
return|;
case|case
literal|"kurtosis"
case|:
return|return
name|results
operator|.
name|getKurtosis
argument_list|()
return|;
case|case
literal|"covariance"
case|:
return|return
name|results
operator|.
name|getCovariances
argument_list|()
return|;
case|case
literal|"correlation"
case|:
return|return
name|results
operator|.
name|getCorrelations
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found unknown path element ["
operator|+
name|coordinate
operator|+
literal|"] in ["
operator|+
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path not supported for ["
operator|+
name|getName
argument_list|()
operator|+
literal|"]: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write running stats
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|docCount
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeVLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|stats
operator|.
name|docCount
argument_list|)
expr_stmt|;
name|stats
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// write results
if|if
condition|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|getDocCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeVLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|results
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doReadFrom
specifier|protected
name|void
name|doReadFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read stats count
specifier|final
name|long
name|statsCount
init|=
name|in
operator|.
name|readVLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|statsCount
operator|>
literal|0
condition|)
block|{
name|stats
operator|=
operator|new
name|RunningStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|stats
operator|.
name|docCount
operator|=
name|statsCount
expr_stmt|;
block|}
comment|// read count
specifier|final
name|long
name|count
init|=
name|in
operator|.
name|readVLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|results
operator|=
operator|new
name|MatrixStatsResults
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doReduce
specifier|public
name|InternalAggregation
name|doReduce
parameter_list|(
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
comment|// merge stats across all shards
name|aggregations
operator|.
name|removeIf
argument_list|(
name|p
lambda|->
operator|(
operator|(
name|InternalMatrixStats
operator|)
name|p
operator|)
operator|.
name|stats
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// return empty result iff all stats are null
if|if
condition|(
name|aggregations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|InternalMatrixStats
argument_list|(
name|name
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|MatrixStatsResults
operator|.
name|EMPTY
argument_list|()
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|getMetaData
argument_list|()
argument_list|)
return|;
block|}
name|RunningStats
name|runningStats
init|=
operator|(
operator|(
name|InternalMatrixStats
operator|)
name|aggregations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|stats
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|aggregations
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|runningStats
operator|.
name|merge
argument_list|(
operator|(
operator|(
name|InternalMatrixStats
operator|)
name|aggregations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|stats
argument_list|)
expr_stmt|;
block|}
name|MatrixStatsResults
name|results
init|=
operator|new
name|MatrixStatsResults
argument_list|(
name|stats
argument_list|)
decl_stmt|;
return|return
operator|new
name|InternalMatrixStats
argument_list|(
name|name
argument_list|,
name|results
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|runningStats
argument_list|,
name|results
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|getMetaData
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

