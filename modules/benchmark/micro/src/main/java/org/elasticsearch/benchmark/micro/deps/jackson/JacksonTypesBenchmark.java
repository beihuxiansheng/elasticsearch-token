begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.micro.deps.jackson
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|micro
operator|.
name|deps
operator|.
name|jackson
package|;
end_package

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|FastStringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|io
operator|.
name|StringBuilderWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|Jackson
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A simple Jackson type benchmark to check how well it converts to different types it supports  * such as Map and JsonNode.  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|class|JacksonTypesBenchmark
specifier|public
class|class
name|JacksonTypesBenchmark
block|{
DECL|field|jsonString
specifier|private
specifier|final
name|String
name|jsonString
decl_stmt|;
DECL|field|factor
specifier|private
specifier|final
name|int
name|factor
decl_stmt|;
DECL|field|cycles
specifier|private
specifier|final
name|int
name|cycles
decl_stmt|;
DECL|field|objectMapper
specifier|private
specifier|final
name|ObjectMapper
name|objectMapper
decl_stmt|;
DECL|field|types
specifier|private
specifier|final
name|JsonType
index|[]
name|types
decl_stmt|;
DECL|method|JacksonTypesBenchmark
specifier|public
name|JacksonTypesBenchmark
parameter_list|(
name|String
name|jsonString
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|jsonString
argument_list|,
literal|"jsonString must have a value"
argument_list|)
expr_stmt|;
name|this
operator|.
name|jsonString
operator|=
name|jsonString
expr_stmt|;
name|this
operator|.
name|objectMapper
operator|=
name|newObjectMapper
argument_list|()
expr_stmt|;
name|this
operator|.
name|factor
operator|=
literal|10
expr_stmt|;
name|this
operator|.
name|cycles
operator|=
literal|10000
expr_stmt|;
comment|// warm things up
name|JsonType
index|[]
name|types
init|=
name|buildTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonType
name|type
range|:
name|types
control|)
block|{
name|type
operator|.
name|runRead
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|type
operator|.
name|runWrite
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|types
operator|=
name|buildTypes
argument_list|()
expr_stmt|;
block|}
comment|/**      * Runs the test. Will run<tt>factor * cycles</tt> iterations interleaving the      * different type operations by<tt>factor</tt>.      */
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
comment|// interleave the type tests so GC won't be taken into account
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|factor
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|JsonType
name|type
range|:
name|types
control|)
block|{
name|type
operator|.
name|runRead
argument_list|(
name|cycles
argument_list|)
expr_stmt|;
name|type
operator|.
name|runWrite
argument_list|(
name|cycles
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Run ["
operator|+
operator|(
name|cycles
operator|*
name|factor
operator|)
operator|+
literal|"] iterations"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=============================="
argument_list|)
expr_stmt|;
for|for
control|(
name|JsonType
name|type
range|:
name|types
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Type ["
operator|+
name|type
operator|.
name|type
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|type
operator|.
name|readStopWatch
operator|.
name|shortSummary
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|type
operator|.
name|writeStopWatch
operator|.
name|shortSummary
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------------------"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Builds the types that we are going to test.      */
DECL|method|buildTypes
specifier|private
name|JsonType
index|[]
name|buildTypes
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonType
index|[]
name|types
init|=
operator|new
name|JsonType
index|[
literal|2
index|]
decl_stmt|;
name|types
index|[
literal|0
index|]
operator|=
operator|new
name|JsonType
argument_list|(
name|jsonString
argument_list|,
name|objectMapper
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|types
index|[
literal|1
index|]
operator|=
operator|new
name|JsonType
argument_list|(
name|jsonString
argument_list|,
name|objectMapper
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|types
return|;
block|}
comment|/**      * Represents a test for a specific type, allowing to runRead and runWrite      * on it and finally getting the results from the write/read stop watches.      */
DECL|class|JsonType
specifier|private
specifier|static
class|class
name|JsonType
block|{
DECL|field|readStopWatch
specifier|final
name|StopWatch
name|readStopWatch
init|=
operator|new
name|StopWatch
argument_list|(
literal|"read"
argument_list|)
operator|.
name|keepTaskList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|writeStopWatch
specifier|final
name|StopWatch
name|writeStopWatch
init|=
operator|new
name|StopWatch
argument_list|(
literal|"write"
argument_list|)
operator|.
name|keepTaskList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|jsonString
specifier|final
name|String
name|jsonString
decl_stmt|;
DECL|field|objectMapper
specifier|final
name|ObjectMapper
name|objectMapper
decl_stmt|;
DECL|field|type
specifier|final
name|Class
name|type
decl_stmt|;
DECL|field|master
specifier|final
name|Object
name|master
decl_stmt|;
DECL|method|JsonType
specifier|protected
name|JsonType
parameter_list|(
name|String
name|jsonString
parameter_list|,
name|ObjectMapper
name|objectMapper
parameter_list|,
name|Class
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|jsonString
operator|=
name|jsonString
expr_stmt|;
name|this
operator|.
name|objectMapper
operator|=
name|objectMapper
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|objectMapper
operator|.
name|readValue
argument_list|(
operator|new
name|FastStringReader
argument_list|(
name|jsonString
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|runRead
name|void
name|runRead
parameter_list|(
name|int
name|cycles
parameter_list|)
throws|throws
name|IOException
block|{
name|readStopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cycles
condition|;
name|i
operator|++
control|)
block|{
name|objectMapper
operator|.
name|readValue
argument_list|(
operator|new
name|FastStringReader
argument_list|(
name|jsonString
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|readStopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|runWrite
name|void
name|runWrite
parameter_list|(
name|int
name|cycles
parameter_list|)
throws|throws
name|IOException
block|{
name|writeStopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cycles
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilderWriter
name|builderWriter
init|=
name|StringBuilderWriter
operator|.
name|Cached
operator|.
name|cached
argument_list|()
decl_stmt|;
name|objectMapper
operator|.
name|writeValue
argument_list|(
name|builderWriter
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|builderWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|writeStopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|JacksonTypesBenchmark
name|benchmark
init|=
operator|new
name|JacksonTypesBenchmark
argument_list|(
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|JacksonTypesBenchmark
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/elasticsearch/benchmark/micro/deps/jackson/test1.json"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|benchmark
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

