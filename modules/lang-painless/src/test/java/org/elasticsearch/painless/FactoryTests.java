begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|TemplateScript
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|FactoryTests
specifier|public
class|class
name|FactoryTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|scriptContexts
specifier|protected
name|Collection
argument_list|<
name|ScriptContext
argument_list|<
name|?
argument_list|>
argument_list|>
name|scriptContexts
parameter_list|()
block|{
name|Collection
argument_list|<
name|ScriptContext
argument_list|<
name|?
argument_list|>
argument_list|>
name|contexts
init|=
name|super
operator|.
name|scriptContexts
argument_list|()
decl_stmt|;
name|contexts
operator|.
name|add
argument_list|(
name|StatefulFactoryTestScript
operator|.
name|CONTEXT
argument_list|)
expr_stmt|;
name|contexts
operator|.
name|add
argument_list|(
name|FactoryTestScript
operator|.
name|CONTEXT
argument_list|)
expr_stmt|;
name|contexts
operator|.
name|add
argument_list|(
name|EmptyTestScript
operator|.
name|CONTEXT
argument_list|)
expr_stmt|;
name|contexts
operator|.
name|add
argument_list|(
name|TemplateScript
operator|.
name|CONTEXT
argument_list|)
expr_stmt|;
return|return
name|contexts
return|;
block|}
DECL|class|StatefulFactoryTestScript
specifier|public
specifier|abstract
specifier|static
class|class
name|StatefulFactoryTestScript
block|{
DECL|field|x
specifier|private
specifier|final
name|int
name|x
decl_stmt|;
DECL|field|y
specifier|private
specifier|final
name|int
name|y
decl_stmt|;
DECL|method|StatefulFactoryTestScript
specifier|public
name|StatefulFactoryTestScript
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
operator|*
name|a
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|y
operator|*
name|b
expr_stmt|;
block|}
DECL|method|getX
specifier|public
name|int
name|getX
parameter_list|()
block|{
return|return
name|x
return|;
block|}
DECL|method|getY
specifier|public
name|int
name|getY
parameter_list|()
block|{
return|return
name|y
operator|*
literal|2
return|;
block|}
DECL|method|getC
specifier|public
name|int
name|getC
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getD
specifier|public
name|int
name|getD
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
DECL|field|PARAMETERS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|PARAMETERS
init|=
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
decl_stmt|;
DECL|method|execute
specifier|public
specifier|abstract
name|Object
name|execute
parameter_list|(
name|int
name|test
parameter_list|)
function_decl|;
DECL|method|needsTest
specifier|public
specifier|abstract
name|boolean
name|needsTest
parameter_list|()
function_decl|;
DECL|method|needsNothing
specifier|public
specifier|abstract
name|boolean
name|needsNothing
parameter_list|()
function_decl|;
DECL|method|needsX
specifier|public
specifier|abstract
name|boolean
name|needsX
parameter_list|()
function_decl|;
DECL|method|needsC
specifier|public
specifier|abstract
name|boolean
name|needsC
parameter_list|()
function_decl|;
DECL|method|needsD
specifier|public
specifier|abstract
name|boolean
name|needsD
parameter_list|()
function_decl|;
DECL|interface|StatefulFactory
specifier|public
interface|interface
name|StatefulFactory
block|{
DECL|method|newInstance
name|StatefulFactoryTestScript
name|newInstance
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
DECL|method|needsTest
name|boolean
name|needsTest
parameter_list|()
function_decl|;
DECL|method|needsNothing
name|boolean
name|needsNothing
parameter_list|()
function_decl|;
DECL|method|needsX
name|boolean
name|needsX
parameter_list|()
function_decl|;
DECL|method|needsC
name|boolean
name|needsC
parameter_list|()
function_decl|;
DECL|method|needsD
name|boolean
name|needsD
parameter_list|()
function_decl|;
block|}
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|newFactory
name|StatefulFactory
name|newFactory
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
DECL|method|needsTest
name|boolean
name|needsTest
parameter_list|()
function_decl|;
DECL|method|needsNothing
name|boolean
name|needsNothing
parameter_list|()
function_decl|;
DECL|method|needsX
name|boolean
name|needsX
parameter_list|()
function_decl|;
DECL|method|needsC
name|boolean
name|needsC
parameter_list|()
function_decl|;
DECL|method|needsD
name|boolean
name|needsD
parameter_list|()
function_decl|;
block|}
DECL|field|CONTEXT
specifier|public
specifier|static
specifier|final
name|ScriptContext
argument_list|<
name|StatefulFactoryTestScript
operator|.
name|Factory
argument_list|>
name|CONTEXT
init|=
operator|new
name|ScriptContext
argument_list|<>
argument_list|(
literal|"test"
argument_list|,
name|StatefulFactoryTestScript
operator|.
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
DECL|method|testStatefulFactory
specifier|public
name|void
name|testStatefulFactory
parameter_list|()
block|{
name|StatefulFactoryTestScript
operator|.
name|Factory
name|factory
init|=
name|scriptEngine
operator|.
name|compile
argument_list|(
literal|"stateful_factory_test"
argument_list|,
literal|"test + x + y + d"
argument_list|,
name|StatefulFactoryTestScript
operator|.
name|CONTEXT
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|StatefulFactoryTestScript
operator|.
name|StatefulFactory
name|statefulFactory
init|=
name|factory
operator|.
name|newFactory
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|StatefulFactoryTestScript
name|script
init|=
name|statefulFactory
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|script
operator|.
name|execute
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|statefulFactory
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|28
argument_list|,
name|script
operator|.
name|execute
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|script
operator|.
name|needsTest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|script
operator|.
name|needsNothing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|script
operator|.
name|needsX
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|script
operator|.
name|needsC
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|script
operator|.
name|needsD
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|statefulFactory
operator|.
name|needsTest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|statefulFactory
operator|.
name|needsNothing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|statefulFactory
operator|.
name|needsX
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|statefulFactory
operator|.
name|needsC
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|statefulFactory
operator|.
name|needsD
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|factory
operator|.
name|needsTest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|factory
operator|.
name|needsNothing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|factory
operator|.
name|needsX
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|factory
operator|.
name|needsC
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|factory
operator|.
name|needsD
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FactoryTestScript
specifier|public
specifier|abstract
specifier|static
class|class
name|FactoryTestScript
block|{
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
DECL|method|FactoryTestScript
specifier|public
name|FactoryTestScript
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
DECL|method|getParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
DECL|field|PARAMETERS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|PARAMETERS
init|=
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
decl_stmt|;
DECL|method|execute
specifier|public
specifier|abstract
name|Object
name|execute
parameter_list|(
name|int
name|test
parameter_list|)
function_decl|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|newInstance
name|FactoryTestScript
name|newInstance
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
function_decl|;
DECL|method|needsTest
name|boolean
name|needsTest
parameter_list|()
function_decl|;
DECL|method|needsNothing
name|boolean
name|needsNothing
parameter_list|()
function_decl|;
block|}
DECL|field|CONTEXT
specifier|public
specifier|static
specifier|final
name|ScriptContext
argument_list|<
name|FactoryTestScript
operator|.
name|Factory
argument_list|>
name|CONTEXT
init|=
operator|new
name|ScriptContext
argument_list|<>
argument_list|(
literal|"test"
argument_list|,
name|FactoryTestScript
operator|.
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
DECL|method|testFactory
specifier|public
name|void
name|testFactory
parameter_list|()
block|{
name|FactoryTestScript
operator|.
name|Factory
name|factory
init|=
name|scriptEngine
operator|.
name|compile
argument_list|(
literal|"factory_test"
argument_list|,
literal|"test + params.get('test')"
argument_list|,
name|FactoryTestScript
operator|.
name|CONTEXT
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|FactoryTestScript
name|script
init|=
name|factory
operator|.
name|newInstance
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|script
operator|.
name|execute
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|script
operator|.
name|execute
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|script
operator|=
name|factory
operator|.
name|newInstance
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|script
operator|.
name|execute
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|script
operator|.
name|execute
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|factory
operator|.
name|needsTest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|factory
operator|.
name|needsNothing
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|EmptyTestScript
specifier|public
specifier|abstract
specifier|static
class|class
name|EmptyTestScript
block|{
DECL|field|PARAMETERS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|PARAMETERS
init|=
block|{}
decl_stmt|;
DECL|method|execute
specifier|public
specifier|abstract
name|Object
name|execute
parameter_list|()
function_decl|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|newInstance
name|EmptyTestScript
name|newInstance
parameter_list|()
function_decl|;
block|}
DECL|field|CONTEXT
specifier|public
specifier|static
specifier|final
name|ScriptContext
argument_list|<
name|EmptyTestScript
operator|.
name|Factory
argument_list|>
name|CONTEXT
init|=
operator|new
name|ScriptContext
argument_list|<>
argument_list|(
literal|"test"
argument_list|,
name|EmptyTestScript
operator|.
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|EmptyTestScript
operator|.
name|Factory
name|factory
init|=
name|scriptEngine
operator|.
name|compile
argument_list|(
literal|"empty_test"
argument_list|,
literal|"1"
argument_list|,
name|EmptyTestScript
operator|.
name|CONTEXT
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|EmptyTestScript
name|script
init|=
name|factory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|script
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|script
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|script
operator|=
name|factory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|script
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|script
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTemplate
specifier|public
name|void
name|testTemplate
parameter_list|()
block|{
name|TemplateScript
operator|.
name|Factory
name|factory
init|=
name|scriptEngine
operator|.
name|compile
argument_list|(
literal|"template_test"
argument_list|,
literal|"params['test']"
argument_list|,
name|TemplateScript
operator|.
name|CONTEXT
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|TemplateScript
name|script
init|=
name|factory
operator|.
name|newInstance
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|script
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|script
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|script
operator|=
name|factory
operator|.
name|newInstance
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|script
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|script
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

