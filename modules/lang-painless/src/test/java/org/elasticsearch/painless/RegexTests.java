begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_class
DECL|class|RegexTests
specifier|public
class|class
name|RegexTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testPatternAfterReturn
specifier|public
name|void
name|testPatternAfterReturn
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"return /foo/.matcher(\"foo\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"return /foo/.matcher(\"bar\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSlashesEscapePattern
specifier|public
name|void
name|testSlashesEscapePattern
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"return /\\/\\//.matcher(\"//\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPatternAfterAssignment
specifier|public
name|void
name|testPatternAfterAssignment
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def a = /foo/; return a.matcher(\"foo\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPatternInIfStement
specifier|public
name|void
name|testPatternInIfStement
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"if (/foo/.matcher(\"foo\").matches()) { return true } else { return false }"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPatternAfterInfixBoolean
specifier|public
name|void
name|testPatternAfterInfixBoolean
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"return false || /foo/.matcher(\"foo\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"return true&& /foo/.matcher(\"foo\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPatternAfterUnaryNotBoolean
specifier|public
name|void
name|testPatternAfterUnaryNotBoolean
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"return !/foo/.matcher(\"foo\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"return !/foo/.matcher(\"bar\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInTernaryCondition
specifier|public
name|void
name|testInTernaryCondition
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"return /foo/.matcher(\"foo\").matches() ? true : false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def i = 0; i += /foo/.matcher(\"foo\").matches() ? 1 : 1; return i"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInTernaryTrueArm
specifier|public
name|void
name|testInTernaryTrueArm
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def i = true; return i ? /foo/.matcher(\"foo\").matches() : false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInTernaryFalseArm
specifier|public
name|void
name|testInTernaryFalseArm
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def i = false; return i ? false : /foo/.matcher(\"foo\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegexInFunction
specifier|public
name|void
name|testRegexInFunction
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"boolean m(String s) {/foo/.matcher(s).matches()} m(\"foo\")"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReturnRegexFromFunction
specifier|public
name|void
name|testReturnRegexFromFunction
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"Pattern m(boolean a) {a ? /foo/ : /bar/} m(true).matcher(\"foo\").matches()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

