begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_comment
comment|/** Tests for shift operator across all types */
end_comment

begin_class
DECL|class|ShiftTests
specifier|public
class|class
name|ShiftTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return 1<< 2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|>>
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return 4>> 2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
operator|>>>
literal|29
argument_list|,
name|exec
argument_list|(
literal|"return -1>>> 29;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; char y = 2; return x<< y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = -1; char y = 29; return x>> y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|exec
argument_list|(
literal|"int x = -1; char y = 30; return x>>> y;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongShifts
specifier|public
name|void
name|testLongShifts
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1L
operator|<<
literal|2
argument_list|,
name|exec
argument_list|(
literal|"long x = 1L; int y = 2; return x<< y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; long y = 2L; return x<< y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|>>
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"int x = 4; long y = 2L; return x>> y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
operator|>>
literal|2
argument_list|,
name|exec
argument_list|(
literal|"long x = 4L; int y = 2; return x>> y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1L
operator|>>>
literal|29
argument_list|,
name|exec
argument_list|(
literal|"long x = -1L; int y = 29; return x>>> y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
operator|>>>
literal|29L
argument_list|,
name|exec
argument_list|(
literal|"int x = -1; long y = 29L; return x>>> y;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongShiftsConst
specifier|public
name|void
name|testLongShiftsConst
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1L
operator|<<
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return 1L<< 2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"return 1<< 2L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|>>
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"return 4>> 2L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
operator|>>
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return 4L>> 2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1L
operator|>>>
literal|29
argument_list|,
name|exec
argument_list|(
literal|"return -1L>>> 29;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
operator|>>>
literal|29L
argument_list|,
name|exec
argument_list|(
literal|"return -1>>> 29L;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusShifts
specifier|public
name|void
name|testBogusShifts
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"long x = 1L; float y = 2; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1; double y = 2L; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = 1F; int y = 2; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = 1D; int y = 2L; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusShiftsConst
specifier|public
name|void
name|testBogusShiftsConst
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"return 1L<< 2F;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"return 1L<< 2.0;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"return 1F<< 2;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"return 1D<< 2L"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testLshDef
specifier|public
name|void
name|testLshDef
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLshDefTypedLHS
specifier|public
name|void
name|testLshDefTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLshDefTypedRHS
specifier|public
name|void
name|testLshDefTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRshDef
specifier|public
name|void
name|testRshDef
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRshDefTypeLHS
specifier|public
name|void
name|testRshDefTypeLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRshDefTypedLHS
specifier|public
name|void
name|testRshDefTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUshDef
specifier|public
name|void
name|testUshDef
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUshDefTypedLHS
specifier|public
name|void
name|testUshDefTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUshDefTypedRHS
specifier|public
name|void
name|testUshDefTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusDefShifts
specifier|public
name|void
name|testBogusDefShifts
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; def y = 2F; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; def y = 2D; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; def y = 2; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; def y = 2L; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; def y = 2F; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; def y = 2D; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; def y = 2; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; def y = 2L; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; def y = 2F; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; def y = 2D; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; def y = 2; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; def y = 2L; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusDefShiftsTypedLHS
specifier|public
name|void
name|testBogusDefShiftsTypedLHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"long x = 1L; def y = 2F; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1; def y = 2D; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = 1F; def y = 2; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = 1D; def y = 2L; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"long x = 1L; def y = 2F; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1; def y = 2D; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = 1F; def y = 2; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = 1D; def y = 2L; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"long x = 1L; def y = 2F; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1; def y = 2D; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = 1F; def y = 2; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = 1D; def y = 2L; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusDefShiftsTypedRHS
specifier|public
name|void
name|testBogusDefShiftsTypedRHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; float y = 2F; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; double y = 2D; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; int y = 2; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; long y = 2L; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; float y = 2F; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; double y = 2D; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; int y = 2; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; long y = 2L; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; float y = 2F; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; double y = 2D; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; int y = 2; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; long y = 2L; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testLshCompoundAssignment
specifier|public
name|void
name|testLshCompoundAssignment
parameter_list|()
block|{
comment|// byte
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|60
argument_list|,
name|exec
argument_list|(
literal|"byte x = 15; x<<= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|60
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte) -15; x<<= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// short
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|60
argument_list|,
name|exec
argument_list|(
literal|"short x = 15; x<<= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|60
argument_list|,
name|exec
argument_list|(
literal|"short x = (short) -15; x<<= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// char
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|60
argument_list|,
name|exec
argument_list|(
literal|"char x = (char) 15; x<<= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// int
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|exec
argument_list|(
literal|"int x = 15; x<<= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|60
argument_list|,
name|exec
argument_list|(
literal|"int x = -15; x<<= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// long
name|assertEquals
argument_list|(
literal|60L
argument_list|,
name|exec
argument_list|(
literal|"long x = 15L; x<<= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|60L
argument_list|,
name|exec
argument_list|(
literal|"long x = -15L; x<<= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// long shift distance
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|exec
argument_list|(
literal|"int x = 15; x<<= 2L; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|60
argument_list|,
name|exec
argument_list|(
literal|"int x = -15; x<<= 2L; return x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRshCompoundAssignment
specifier|public
name|void
name|testRshCompoundAssignment
parameter_list|()
block|{
comment|// byte
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"byte x = 60; x>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|15
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte) -60; x>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// short
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"short x = 60; x>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|15
argument_list|,
name|exec
argument_list|(
literal|"short x = (short) -60; x>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// char
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"char x = (char) 60; x>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// int
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|exec
argument_list|(
literal|"int x = 60; x>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|15
argument_list|,
name|exec
argument_list|(
literal|"int x = -60; x>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// long
name|assertEquals
argument_list|(
literal|15L
argument_list|,
name|exec
argument_list|(
literal|"long x = 60L; x>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|15L
argument_list|,
name|exec
argument_list|(
literal|"long x = -60L; x>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// long shift distance
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|exec
argument_list|(
literal|"int x = 60; x>>= 2L; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|15
argument_list|,
name|exec
argument_list|(
literal|"int x = -60; x>>= 2L; return x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUshCompoundAssignment
specifier|public
name|void
name|testUshCompoundAssignment
parameter_list|()
block|{
comment|// byte
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"byte x = 60; x>>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|15
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte) -60; x>>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// short
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"short x = 60; x>>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|15
argument_list|,
name|exec
argument_list|(
literal|"short x = (short) -60; x>>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// char
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"char x = (char) 60; x>>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// int
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|exec
argument_list|(
literal|"int x = 60; x>>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|60
operator|>>>
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = -60; x>>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// long
name|assertEquals
argument_list|(
literal|15L
argument_list|,
name|exec
argument_list|(
literal|"long x = 60L; x>>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|60L
operator|>>>
literal|2
argument_list|,
name|exec
argument_list|(
literal|"long x = -60L; x>>>= 2; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// long shift distance
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|exec
argument_list|(
literal|"int x = 60; x>>>= 2L; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|60
operator|>>>
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = -60; x>>>= 2L; return x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusCompoundAssignment
specifier|public
name|void
name|testBogusCompoundAssignment
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"long x = 1L; float y = 2; x<<= y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1; double y = 2L; x<<= y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = 1F; int y = 2; x<<= y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = 1D; int y = 2L; x<<= y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusCompoundAssignmentConst
specifier|public
name|void
name|testBogusCompoundAssignmentConst
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1L; x<<= 2F;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1L; x<<= 2.0;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = 1F; x<<= 2;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = 1D; x<<= 2L;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

