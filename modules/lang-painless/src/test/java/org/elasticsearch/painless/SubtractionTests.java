begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_comment
comment|/** Tests for subtraction operator across all types */
end_comment

begin_comment
comment|//TODO: NaN/Inf/overflow/...
end_comment

begin_class
DECL|class|SubtractionTests
specifier|public
class|class
name|SubtractionTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|2
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return 2 - 1;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; char y = 2; return x - y;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInt
specifier|public
name|void
name|testInt
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; int y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|-
literal|3
argument_list|,
name|exec
argument_list|(
literal|"int x = 2; int y = 3; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|-
literal|10
argument_list|,
name|exec
argument_list|(
literal|"int x = 5; int y = 10; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|-
literal|1
operator|-
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; int y = 1; int z = 2; return x-y-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1
operator|-
literal|1
operator|)
operator|-
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; int y = 1; int z = 2; return (x-y)-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|-
operator|(
literal|1
operator|-
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; int y = 1; int z = 2; return x-(y-z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|-
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = 10; int y = 0; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|-
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = 0; int y = 0; return x-x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntConst
specifier|public
name|void
name|testIntConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return 1-1;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|-
literal|3
argument_list|,
name|exec
argument_list|(
literal|"return 2-3;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|-
literal|10
argument_list|,
name|exec
argument_list|(
literal|"return 5-10;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|-
literal|1
operator|-
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return 1-1-2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1
operator|-
literal|1
operator|)
operator|-
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return (1-1)-2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|-
operator|(
literal|1
operator|-
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return 1-(1-2);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|-
literal|0
argument_list|,
name|exec
argument_list|(
literal|"return 10-0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|-
literal|0
argument_list|,
name|exec
argument_list|(
literal|"return 0-0;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testByte
specifier|public
name|void
name|testByte
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"byte x = 1; byte y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|2
operator|-
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|exec
argument_list|(
literal|"byte x = 2; byte y = 3; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|5
operator|-
operator|(
name|byte
operator|)
literal|10
argument_list|,
name|exec
argument_list|(
literal|"byte x = 5; byte y = 10; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = 1; byte y = 1; byte z = 2; return x-y-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|1
operator|)
operator|-
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = 1; byte y = 1; byte z = 2; return (x-y)-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"byte x = 1; byte y = 1; byte z = 2; return x-(y-z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|10
operator|-
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"byte x = 10; byte y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|0
operator|-
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = 0; byte y = 0; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testByteConst
specifier|public
name|void
name|testByteConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return (byte)1-(byte)1;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|2
operator|-
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|exec
argument_list|(
literal|"return (byte)2-(byte)3;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|5
operator|-
operator|(
name|byte
operator|)
literal|10
argument_list|,
name|exec
argument_list|(
literal|"return (byte)5-(byte)10;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return (byte)1-(byte)1-(byte)2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|1
operator|)
operator|-
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return ((byte)1-(byte)1)-(byte)2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
operator|(
name|byte
operator|)
literal|1
operator|-
operator|(
name|byte
operator|)
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return (byte)1-((byte)1-(byte)2);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|10
operator|-
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return (byte)10-(byte)1;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|0
operator|-
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|exec
argument_list|(
literal|"return (byte)0-(byte)0;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testChar
specifier|public
name|void
name|testChar
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"char x = 1; char y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|2
operator|-
operator|(
name|char
operator|)
literal|3
argument_list|,
name|exec
argument_list|(
literal|"char x = 2; char y = 3; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|5
operator|-
operator|(
name|char
operator|)
literal|10
argument_list|,
name|exec
argument_list|(
literal|"char x = 5; char y = 10; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = 1; char y = 1; char z = 2; return x-y-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|1
operator|)
operator|-
operator|(
name|char
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = 1; char y = 1; char z = 2; return (x-y)-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"char x = 1; char y = 1; char z = 2; return x-(y-z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|10
operator|-
operator|(
name|char
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"char x = 10; char y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|0
operator|-
operator|(
name|char
operator|)
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = 0; char y = 0; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharConst
specifier|public
name|void
name|testCharConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return (char)1-(char)1;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|2
operator|-
operator|(
name|char
operator|)
literal|3
argument_list|,
name|exec
argument_list|(
literal|"return (char)2-(char)3;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|5
operator|-
operator|(
name|char
operator|)
literal|10
argument_list|,
name|exec
argument_list|(
literal|"return (char)5-(char)10;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return (char)1-(char)1-(char)2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|1
operator|)
operator|-
operator|(
name|char
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return ((char)1-(char)1)-(char)2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
operator|(
name|char
operator|)
literal|1
operator|-
operator|(
name|char
operator|)
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return (char)1-((char)1-(char)2);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|10
operator|-
operator|(
name|char
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return (char)10-(char)1;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|0
operator|-
operator|(
name|char
operator|)
literal|0
argument_list|,
name|exec
argument_list|(
literal|"return (char)0-(char)0;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testShort
specifier|public
name|void
name|testShort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"short x = 1; short y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|2
operator|-
operator|(
name|short
operator|)
literal|3
argument_list|,
name|exec
argument_list|(
literal|"short x = 2; short y = 3; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|5
operator|-
operator|(
name|short
operator|)
literal|10
argument_list|,
name|exec
argument_list|(
literal|"short x = 5; short y = 10; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = 1; short y = 1; short z = 2; return x-y-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|1
operator|)
operator|-
operator|(
name|short
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = 1; short y = 1; short z = 2; return (x-y)-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"short x = 1; short y = 1; short z = 2; return x-(y-z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|10
operator|-
operator|(
name|short
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"short x = 10; short y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|0
operator|-
operator|(
name|short
operator|)
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = 0; short y = 0; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testShortConst
specifier|public
name|void
name|testShortConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return (short)1-(short)1;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|2
operator|-
operator|(
name|short
operator|)
literal|3
argument_list|,
name|exec
argument_list|(
literal|"return (short)2-(short)3;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|5
operator|-
operator|(
name|short
operator|)
literal|10
argument_list|,
name|exec
argument_list|(
literal|"return (short)5-(short)10;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return (short)1-(short)1-(short)2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|1
operator|)
operator|-
operator|(
name|short
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return ((short)1-(short)1)-(short)2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
operator|(
name|short
operator|)
literal|1
operator|-
operator|(
name|short
operator|)
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return (short)1-((short)1-(short)2);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|10
operator|-
operator|(
name|short
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return (short)10-(short)1;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|0
operator|-
operator|(
name|short
operator|)
literal|0
argument_list|,
name|exec
argument_list|(
literal|"return (short)0-(short)0;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLong
specifier|public
name|void
name|testLong
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1L
operator|-
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"long x = 1; long y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
operator|-
literal|3L
argument_list|,
name|exec
argument_list|(
literal|"long x = 2; long y = 3; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
operator|-
literal|10L
argument_list|,
name|exec
argument_list|(
literal|"long x = 5; long y = 10; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
operator|-
literal|1L
operator|-
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = 1; long y = 1; int z = 2; return x-y-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1L
operator|-
literal|1L
operator|)
operator|-
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = 1; long y = 1; int z = 2; return (x-y)-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
operator|-
operator|(
literal|1L
operator|-
literal|2L
operator|)
argument_list|,
name|exec
argument_list|(
literal|"long x = 1; long y = 1; int z = 2; return x-(y-z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
operator|-
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = 10; long y = 0; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
operator|-
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = 0; long y = 0; return x-x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongConst
specifier|public
name|void
name|testLongConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1L
operator|-
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"return 1L-1L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
operator|-
literal|3L
argument_list|,
name|exec
argument_list|(
literal|"return 2L-3L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
operator|-
literal|10L
argument_list|,
name|exec
argument_list|(
literal|"return 5L-10L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
operator|-
literal|1L
operator|-
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"return 1L-1L-2L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1L
operator|-
literal|1L
operator|)
operator|-
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"return (1L-1L)-2L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
operator|-
operator|(
literal|1L
operator|-
literal|2L
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return 1L-(1L-2L);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
operator|-
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"return 10L-0L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
operator|-
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"return 0L-0L;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloat
specifier|public
name|void
name|testFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1F
operator|-
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"float x = 1; float y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
operator|-
literal|3F
argument_list|,
name|exec
argument_list|(
literal|"float x = 2; float y = 3; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5F
operator|-
literal|10F
argument_list|,
name|exec
argument_list|(
literal|"float x = 5; float y = 10; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
operator|-
literal|1F
operator|-
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = 1; float y = 1; float z = 2; return x-y-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1F
operator|-
literal|1F
operator|)
operator|-
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = 1; float y = 1; float z = 2; return (x-y)-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
operator|-
operator|(
literal|1F
operator|-
literal|2F
operator|)
argument_list|,
name|exec
argument_list|(
literal|"float x = 1; float y = 1; float z = 2; return x-(y-z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10F
operator|-
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = 10; float y = 0; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
operator|-
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = 0; float y = 0; return x-x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatConst
specifier|public
name|void
name|testFloatConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1F
operator|-
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"return 1F-1F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
operator|-
literal|3F
argument_list|,
name|exec
argument_list|(
literal|"return 2F-3F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5F
operator|-
literal|10F
argument_list|,
name|exec
argument_list|(
literal|"return 5F-10F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
operator|-
literal|1F
operator|-
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"return 1F-1F-2F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1F
operator|-
literal|1F
operator|)
operator|-
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"return (1F-1F)-2F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
operator|-
operator|(
literal|1F
operator|-
literal|2F
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return 1F-(1F-2F);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10F
operator|-
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"return 10F-0F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
operator|-
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"return 0F-0F;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDouble
specifier|public
name|void
name|testDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1D
operator|-
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = 1; double y = 1; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
operator|-
literal|3D
argument_list|,
name|exec
argument_list|(
literal|"double x = 2; double y = 3; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5D
operator|-
literal|10D
argument_list|,
name|exec
argument_list|(
literal|"double x = 5; double y = 10; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
operator|-
literal|1D
operator|-
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = 1; double y = 1; double z = 2; return x-y-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1D
operator|-
literal|1D
operator|)
operator|-
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = 1; double y = 1; double z = 2; return (x-y)-z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
operator|-
operator|(
literal|1D
operator|-
literal|2D
operator|)
argument_list|,
name|exec
argument_list|(
literal|"double x = 1; double y = 1; double z = 2; return x-(y-z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10D
operator|-
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = 10; float y = 0; return x-y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
operator|-
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = 0; float y = 0; return x-x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testyDoubleConst
specifier|public
name|void
name|testyDoubleConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1.0
operator|-
literal|1.0
argument_list|,
name|exec
argument_list|(
literal|"return 1.0-1.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
operator|-
literal|3.0
argument_list|,
name|exec
argument_list|(
literal|"return 2.0-3.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.0
operator|-
literal|10.0
argument_list|,
name|exec
argument_list|(
literal|"return 5.0-10.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
operator|-
literal|1.0
operator|-
literal|2.0
argument_list|,
name|exec
argument_list|(
literal|"return 1.0-1.0-2.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1.0
operator|-
literal|1.0
operator|)
operator|-
literal|2.0
argument_list|,
name|exec
argument_list|(
literal|"return (1.0-1.0)-2.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
operator|-
operator|(
literal|1.0
operator|-
literal|2.0
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return 1.0-(1.0-2.0);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.0
operator|-
literal|0.0
argument_list|,
name|exec
argument_list|(
literal|"return 10.0-0.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
operator|-
literal|0.0
argument_list|,
name|exec
argument_list|(
literal|"return 0.0-0.0;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDef
specifier|public
name|void
name|testDef
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefTypedLHS
specifier|public
name|void
name|testDefTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefTypedRHS
specifier|public
name|void
name|testDefTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

