begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|NoSemiColonTests
specifier|public
class|class
name|NoSemiColonTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testDeclarationStatement
specifier|public
name|void
name|testDeclarationStatement
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte a = 2; return a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short a = 2; return a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char a = 2; return a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int a = 2; return a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long a = 2; return a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float a = 2; return a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|exec
argument_list|(
literal|"double a = 2; return a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean a = false; return a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|exec
argument_list|(
literal|"String a = \"string\"; return a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashMap
operator|.
name|class
argument_list|,
name|exec
argument_list|(
literal|"Map<String, Object> a = new HashMap<String, Object>(); return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"byte[] a = new byte[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|short
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"short[] a = new short[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"char[] a = new char[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"int[] a = new int[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|long
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"long[] a = new long[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|float
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"float[] a = new float[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|double
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"double[] a = new double[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|boolean
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"boolean[] a = new boolean[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"String[] a = new String[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Map
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"Map<String,Object>[] a = new Map<String,Object>[1]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"byte[][] a = new byte[1][2]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|short
index|[]
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"short[][][] a = new short[1][2][3]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|char
index|[]
index|[]
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"char[][][][] a = new char[1][2][3][4]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
index|[]
index|[]
index|[]
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"int[][][][][] a = new int[1][2][3][4][5]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|long
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"long[][] a = new long[1][2]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|float
index|[]
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"float[][][] a = new float[1][2][3]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|double
index|[]
index|[]
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"double[][][][] a = new double[1][2][3][4]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|boolean
index|[]
index|[]
index|[]
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"boolean[][][][][] a = new boolean[1][2][3][4][5]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"String[][] a = new String[1][2]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Map
index|[]
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|exec
argument_list|(
literal|"Map<String,Object>[][][] a = new Map<String,Object>[1][2][3]; return a"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpression
specifier|public
name|void
name|testExpression
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|exec
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|exec
argument_list|(
literal|"5 + 5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|exec
argument_list|(
literal|"5 + 5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|exec
argument_list|(
literal|"params.param == 'yes' ? 10 : 5"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"param"
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|testReturnStatement
specifier|public
name|void
name|testReturnStatement
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|exec
argument_list|(
literal|"return 10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"int x = 5; return x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int[] x = new int[2]; x[1] = 4; return x[1]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
operator|(
name|short
index|[]
operator|)
name|exec
argument_list|(
literal|"short[] s = new short[3]; s[1] = 5; return s"
argument_list|)
operator|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|exec
argument_list|(
literal|"Map<String,Object> s = new HashMap< String,Object>(); s.put(\"x\", 10); return s"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

