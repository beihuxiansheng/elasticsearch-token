begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_class
DECL|class|DefOperationTests
specifier|public
class|class
name|DefOperationTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testIllegalCast
specifier|public
name|void
name|testIllegalCast
parameter_list|()
block|{
name|Exception
name|exception
init|=
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1.0; int y = x; return y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cannot be cast"
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (short)1; byte y = x; return y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cannot be cast"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNot
specifier|public
name|void
name|testNot
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|~
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; return ~x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|~
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; return ~x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|~
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; return ~x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|~
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = 1; return ~x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|~
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = 1L; return ~x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNeg
specifier|public
name|void
name|testNeg
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; return -x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; return -x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; return -x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = 1; return -x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = 1L; return -x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.0F
argument_list|,
name|exec
argument_list|(
literal|"def x = 1F; return -x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exec
argument_list|(
literal|"def x = 1.0; return -x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPlus
specifier|public
name|void
name|testPlus
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)-1; return +x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)-1; return +x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|65535
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)-1; return +x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = -1; return +x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = -1L; return +x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.0F
argument_list|,
name|exec
argument_list|(
literal|"def x = -1F; return +x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.0D
argument_list|,
name|exec
argument_list|(
literal|"def x = -1.0; return +x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMul
specifier|public
name|void
name|testMul
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMulTypedLHS
specifier|public
name|void
name|testMulTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMulTypedRHS
specifier|public
name|void
name|testMulTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDiv
specifier|public
name|void
name|testDiv
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDivTypedLHS
specifier|public
name|void
name|testDivTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDivTypedRHS
specifier|public
name|void
name|testDivTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; byte y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; byte y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; byte y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; byte y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; byte y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; byte y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; byte y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; short y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; short y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; short y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; short y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; short y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; short y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; short y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; char y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; char y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; char y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; char y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; char y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; char y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; char y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; int y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; int y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; int y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; int y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; int y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; int y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; int y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; long y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; long y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; long y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; long y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; long y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; long y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; long y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; float y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; float y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; float y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; float y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; float y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; float y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; float y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; double y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; double y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; double y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; double y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; double y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; double y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; double y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; byte y = (byte)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; short y = (short)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; char y = (char)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; int y = (int)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; long y = (long)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; float y = (float)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; double y = (double)2; return x / y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRem
specifier|public
name|void
name|testRem
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemTypedLHS
specifier|public
name|void
name|testRemTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemTypedRHS
specifier|public
name|void
name|testRemTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; byte y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; byte y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; byte y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; byte y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; byte y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; byte y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; byte y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; short y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; short y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; short y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; short y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; short y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; short y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; short y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; char y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; char y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; char y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; char y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; char y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; char y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; char y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; int y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; int y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; int y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; int y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; int y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; int y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; int y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; long y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; long y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; long y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; long y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; long y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; long y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; long y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; float y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; float y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; float y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; float y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; float y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; float y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; float y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; double y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; double y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; double y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; double y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; double y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; double y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; double y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; byte y = (byte)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; short y = (short)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; char y = (char)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; int y = (int)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; long y = (long)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; float y = (float)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; double y = (double)2; return x % y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAdd
specifier|public
name|void
name|testAdd
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddTypedLHS
specifier|public
name|void
name|testAddTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddTypedRHS
specifier|public
name|void
name|testAddTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; byte y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; byte y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; byte y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; byte y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; byte y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; byte y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; byte y = (byte)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; short y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; short y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; short y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; short y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; short y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; short y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; short y = (short)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; char y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; char y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; char y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; char y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; char y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; char y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; char y = (char)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; int y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; int y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; int y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; int y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; int y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; int y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; int y = (int)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; long y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; long y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; long y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; long y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; long y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; long y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; long y = (long)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; float y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; float y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; float y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; float y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; float y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; float y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; float y = (float)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; double y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; double y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; double y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; double y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; double y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; double y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; double y = (double)1; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddConcat
specifier|public
name|void
name|testAddConcat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"a"
operator|+
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (byte)2; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
operator|+
operator|(
name|short
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (short)2; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
operator|+
operator|(
name|char
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (char)2; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
operator|+
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (int)2; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
operator|+
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (long)2; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
operator|+
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (float)2; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
operator|+
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (double)2; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab"
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = 'b'; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|2
operator|+
literal|"a"
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (byte)2; return y + x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|2
operator|+
literal|"a"
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (short)2; return y + x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|2
operator|+
literal|"a"
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (char)2; return y + x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|+
literal|"a"
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (int)2; return y + x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
operator|+
literal|"a"
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (long)2; return y + x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
operator|+
literal|"a"
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (float)2; return y + x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
operator|+
literal|"a"
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = (double)2; return y + x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"anull"
argument_list|,
name|exec
argument_list|(
literal|"def x = 'a'; def y = null; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nullb"
argument_list|,
name|exec
argument_list|(
literal|"def x = null; def y = 'b'; return x + y"
argument_list|)
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = null; def y = null; return x + y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSub
specifier|public
name|void
name|testSub
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubTypedLHS
specifier|public
name|void
name|testSubTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)1; def y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubTypedRHS
specifier|public
name|void
name|testSubTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; byte y = (byte)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; short y = (short)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; char y = (char)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; int y = (int)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; long y = (long)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; float y = (float)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)1; double y = (double)1; return x - y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLsh
specifier|public
name|void
name|testLsh
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLshTypedLHS
specifier|public
name|void
name|testLshTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)1; def y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)1; def y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)1; def y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)1; def y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLshTypedRHS
specifier|public
name|void
name|testLshTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; byte y = (byte)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)1; short y = (short)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)1; char y = (char)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)1; int y = (int)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)1; long y = (long)1; return x<< y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRsh
specifier|public
name|void
name|testRsh
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRshTypeLHS
specifier|public
name|void
name|testRshTypeLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRshTypedLHS
specifier|public
name|void
name|testRshTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUsh
specifier|public
name|void
name|testUsh
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUshTypedLHS
specifier|public
name|void
name|testUshTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUshTypedRHS
specifier|public
name|void
name|testUshTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x>>> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusShifts
specifier|public
name|void
name|testBogusShifts
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; def y = 2F; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; def y = 2D; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; def y = 2; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; def y = 2L; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; def y = 2F; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; def y = 2D; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; def y = 2; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; def y = 2L; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; def y = 2F; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; def y = 2D; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; def y = 2; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; def y = 2L; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusShiftsTypedLHS
specifier|public
name|void
name|testBogusShiftsTypedLHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"long x = 1L; def y = 2F; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1; def y = 2D; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = 1F; def y = 2; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = 1D; def y = 2L; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"long x = 1L; def y = 2F; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1; def y = 2D; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = 1F; def y = 2; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = 1D; def y = 2L; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"long x = 1L; def y = 2F; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"int x = 1; def y = 2D; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = 1F; def y = 2; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = 1D; def y = 2L; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBogusShiftsTypedRHS
specifier|public
name|void
name|testBogusShiftsTypedRHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; float y = 2F; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; double y = 2D; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; int y = 2; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; long y = 2L; return x<< y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; float y = 2F; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; double y = 2D; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; int y = 2; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; long y = 2L; return x>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1L; float y = 2F; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1; double y = 2D; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1F; int y = 2; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = 1D; long y = 2L; return x>>> y;"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnd
specifier|public
name|void
name|testAnd
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (float)4; def y = (byte)1; return x& y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (double)4; def y = (byte)1; return x& y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = true; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = false; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = true; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = false; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAndTypedLHS
specifier|public
name|void
name|testAndTypedLHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = (float)4; def y = (byte)1; return x& y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = (double)4; def y = (byte)1; return x& y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"boolean x = true;  def y = true; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean x = true;  def y = false; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean x = false; def y = true; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean x = false; def y = false; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAndTypedRHS
specifier|public
name|void
name|testAndTypedRHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (float)4; byte y = (byte)1; return x& y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (double)4; byte y = (byte)1; return x& y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; byte y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; byte y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; byte y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; byte y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; short y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; short y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; short y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; short y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; char y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; char y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; char y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; char y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; int y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; int y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; int y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; int y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; long y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; long y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; long y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; long y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  boolean y = true; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  boolean y = false; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = true; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = false; return x& y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testXor
specifier|public
name|void
name|testXor
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (float)4; def y = (byte)1; return x ^ y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (double)4; def y = (byte)1; return x ^ y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = true; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = false; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = true; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = false; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testXorTypedLHS
specifier|public
name|void
name|testXorTypedLHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = (float)4; def y = (byte)1; return x ^ y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = (double)4; def y = (byte)1; return x ^ y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = true; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = false; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = true; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = false; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testXorTypedRHS
specifier|public
name|void
name|testXorTypedRHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (float)4; byte y = (byte)1; return x ^ y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (double)4; byte y = (byte)1; return x ^ y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; byte y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; byte y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; byte y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; byte y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; short y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; short y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; short y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; short y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; char y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; char y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; char y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; char y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; int y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; int y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; int y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; int y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; long y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; long y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; long y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; long y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  boolean y = true; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  boolean y = false; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = true; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = false; return x ^ y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOr
specifier|public
name|void
name|testOr
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (float)4; def y = (byte)1; return x | y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (double)4; def y = (byte)1; return x | y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = true; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = false; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = true; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = false; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrTypedLHS
specifier|public
name|void
name|testOrTypedLHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"float x = (float)4; def y = (byte)1; return x | y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"double x = (double)4; def y = (byte)1; return x | y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)4; def y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)4; def y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)4; def y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)4; def y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"boolean x = true;  def y = true; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"boolean x = true;  def y = false; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"boolean x = false; def y = true; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean x = false; def y = false; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrTypedRHS
specifier|public
name|void
name|testOrTypedRHS
parameter_list|()
block|{
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (float)4; byte y = (byte)1; return x | y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|ClassCastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|exec
argument_list|(
literal|"def x = (double)4; byte y = (byte)1; return x | y"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; byte y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; byte y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; byte y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; byte y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; short y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; short y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; short y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; short y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; char y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; char y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; char y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; char y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; int y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; int y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; int y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; int y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; long y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; long y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; long y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; long y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)4; byte y = (byte)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)4; short y = (short)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)4; char y = (char)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)4; long y = (long)1; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  boolean y = true; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  boolean y = false; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = true; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = false; return x | y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEq
specifier|public
name|void
name|testEq
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; def y = (int)7; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; def y = (int)6; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; def y = (int)5; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)4; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (int)3; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (int)2; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (int)1; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; def y = (double)7; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; def y = (double)6; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; def y = (double)5; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (double)4; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (double)3; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (double)2; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (double)1; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = true; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true; def y = false; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true; def y = null; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = null; def y = true; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true; def y = true; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = false; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); def y = new HashMap(); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); def y = new HashMap(); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); def y = new HashMap(); y.put(3, 3); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); def y = x; x.put(3, 3); y.put(3, 3); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqTypedLHS
specifier|public
name|void
name|testEqTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)7; def y = (int)7; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)6; def y = (int)6; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)5; def y = (int)5; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)4; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (int)3; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (int)2; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (int)1; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)7; def y = (double)7; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)6; def y = (double)6; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)5; def y = (double)5; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (double)4; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (double)3; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (double)2; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (double)1; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean x = false; def y = true; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean x = true; def y = false; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean x = true; def y = null; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"boolean x = true; def y = true; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"boolean x = false; def y = false; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"Map x = new HashMap(); def y = new HashMap(); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"Map x = new HashMap(); x.put(3, 3); def y = new HashMap(); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"Map x = new HashMap(); x.put(3, 3); def y = new HashMap(); y.put(3, 3); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"Map x = new HashMap(); def y = x; x.put(3, 3); y.put(3, 3); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqTypedRHS
specifier|public
name|void
name|testEqTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; int y = (int)7; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; int y = (int)6; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; int y = (int)5; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)4; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; int y = (int)3; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; int y = (int)2; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; int y = (int)1; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; double y = (double)7; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; double y = (double)6; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; double y = (double)5; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; double y = (double)4; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; double y = (double)3; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; double y = (double)2; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; double y = (double)1; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = true; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true; boolean y = false; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = null; boolean y = true; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true; boolean y = true; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = false; return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); Map y = new HashMap(); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); Map y = new HashMap(); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); Map y = new HashMap(); y.put(3, 3); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); Map y = x; x.put(3, 3); y.put(3, 3); return x == y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqr
specifier|public
name|void
name|testEqr
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; def y = (int)7; return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; def y = (int)6; return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; def y = (int)5; return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)4; return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (int)3; return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (int)2; return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (int)1; return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = true; return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); def y = new HashMap(); return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); def y = new HashMap(); return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); def y = new HashMap(); y.put(3, 3); return x === y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); def y = x; x.put(3, 3); y.put(3, 3); return x === y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNe
specifier|public
name|void
name|testNe
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; def y = (int)7; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; def y = (int)6; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; def y = (int)5; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)4; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (int)3; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (int)2; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (int)1; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; def y = (double)7; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; def y = (double)6; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; def y = (double)5; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (double)4; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (double)3; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (double)2; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (double)1; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); def y = new HashMap(); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); def y = new HashMap(); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); def y = new HashMap(); y.put(3, 3); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); def y = x; x.put(3, 3); y.put(3, 3); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = true; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  def y = false; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = true; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; def y = false; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNeTypedLHS
specifier|public
name|void
name|testNeTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)7; def y = (int)7; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)6; def y = (int)6; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)5; def y = (int)5; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)4; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (int)3; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (int)2; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (int)1; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)7; def y = (double)7; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)6; def y = (double)6; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)5; def y = (double)5; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (double)4; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (double)3; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (double)2; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (double)1; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"Map x = new HashMap(); def y = new HashMap(); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"Map x = new HashMap(); x.put(3, 3); def y = new HashMap(); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"Map x = new HashMap(); x.put(3, 3); def y = new HashMap(); y.put(3, 3); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"Map x = new HashMap(); def y = x; x.put(3, 3); y.put(3, 3); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean x = true;  def y = true; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"boolean x = true;  def y = false; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"boolean x = false; def y = true; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"boolean x = false; def y = false; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNeTypedRHS
specifier|public
name|void
name|testNeTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; int y = (int)7; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; int y = (int)6; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; int y = (int)5; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)4; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; int y = (int)3; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; int y = (int)2; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; int y = (int)1; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; double y = (double)7; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; double y = (double)6; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; double y = (double)5; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; double y = (double)4; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; double y = (double)3; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; double y = (double)2; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; double y = (double)1; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); Map y = new HashMap(); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); Map y = new HashMap(); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); Map y = new HashMap(); y.put(3, 3); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); Map y = x; x.put(3, 3); y.put(3, 3); return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  boolean y = true; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = true;  boolean y = false; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = true; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = false; boolean y = false; return x != y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNer
specifier|public
name|void
name|testNer
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)7; def y = (int)7; return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)6; def y = (int)6; return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; def y = (int)5; return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)4; return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (int)3; return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (int)2; return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (int)1; return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); def y = new HashMap(); return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); def y = new HashMap(); return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); x.put(3, 3); def y = new HashMap(); y.put(3, 3); return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = new HashMap(); def y = x; x.put(3, 3); y.put(3, 3); return x !== y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLt
specifier|public
name|void
name|testLt
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (int)7; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (int)6; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; def y = (int)5; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)4; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (int)3; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (int)2; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (int)1; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (double)7; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (double)6; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; def y = (double)5; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (double)4; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (double)3; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (double)2; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (double)1; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLtTypedLHS
specifier|public
name|void
name|testLtTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (int)7; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (int)6; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)3; def y = (int)5; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)4; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (int)3; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (int)2; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (int)1; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (double)7; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (double)6; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)3; def y = (double)5; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (double)4; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (double)3; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (double)2; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (double)1; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLtTypedRHS
specifier|public
name|void
name|testLtTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; int y = (int)7; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; int y = (int)6; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; int y = (int)5; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)4; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; int y = (int)3; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; int y = (int)2; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; int y = (int)1; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; double y = (double)7; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; double y = (double)6; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; double y = (double)5; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; double y = (double)4; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; double y = (double)3; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; double y = (double)2; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; double y = (double)1; return x< y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLte
specifier|public
name|void
name|testLte
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (int)7; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (int)6; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; def y = (int)5; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)4; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (int)3; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (int)2; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (int)1; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (double)7; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (double)6; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; def y = (double)5; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (double)4; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (double)3; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (double)2; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (double)1; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLteTypedLHS
specifier|public
name|void
name|testLteTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (int)7; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (int)6; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)3; def y = (int)5; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)4; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (int)3; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (int)2; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (int)1; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (double)7; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (double)6; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)3; def y = (double)5; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (double)4; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (double)3; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (double)2; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (double)1; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLteTypedRHS
specifier|public
name|void
name|testLteTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; int y = (int)7; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; int y = (int)6; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; int y = (int)5; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)4; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; int y = (int)3; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; int y = (int)2; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; int y = (int)1; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; double y = (double)7; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; double y = (double)6; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; double y = (double)5; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; double y = (double)4; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; double y = (double)3; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; double y = (double)2; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; double y = (double)1; return x<= y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGt
specifier|public
name|void
name|testGt
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (int)7; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (int)6; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; def y = (int)5; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)4; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (int)3; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (int)2; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (int)1; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (double)7; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (double)6; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; def y = (double)5; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (double)4; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (double)3; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (double)2; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (double)1; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGtTypedLHS
specifier|public
name|void
name|testGtTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (int)7; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (int)6; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)3; def y = (int)5; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)4; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (int)3; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (int)2; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (int)1; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (double)7; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (double)6; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)3; def y = (double)5; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (double)4; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (double)3; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (double)2; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (double)1; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGtTypedRHS
specifier|public
name|void
name|testGtTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; int y = (int)7; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; int y = (int)6; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; int y = (int)5; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)4; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; int y = (int)3; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; int y = (int)2; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; int y = (int)1; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; double y = (double)7; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; double y = (double)6; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; double y = (double)5; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; double y = (double)4; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; double y = (double)3; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; double y = (double)2; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; double y = (double)1; return x> y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGte
specifier|public
name|void
name|testGte
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (int)7; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (int)6; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; def y = (int)5; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (int)4; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (int)3; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (int)2; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (int)1; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; def y = (double)7; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (double)6; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; def y = (double)5; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; def y = (double)4; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; def y = (double)3; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; def y = (double)2; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; def y = (double)1; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGteTypedLHS
specifier|public
name|void
name|testGteTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (int)7; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (int)6; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)3; def y = (int)5; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (int)4; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (int)3; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (int)2; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (int)1; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)1; def y = (double)7; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (double)6; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)3; def y = (double)5; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)4; def y = (double)4; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)5; def y = (double)3; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)6; def y = (double)2; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)7; def y = (double)1; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGteTypedRHS
specifier|public
name|void
name|testGteTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; int y = (int)7; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; int y = (int)6; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; int y = (int)5; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; int y = (int)4; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; int y = (int)3; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; int y = (int)2; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; int y = (int)1; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)1; double y = (double)7; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; double y = (double)6; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)3; double y = (double)5; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)4; double y = (double)4; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)5; double y = (double)3; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)6; double y = (double)2; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)7; double y = (double)1; return x>= y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

