begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AugmentationTests
specifier|public
class|class
name|AugmentationTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testStatic
specifier|public
name|void
name|testStatic
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"ArrayList l = new ArrayList(); l.add(1); return l.getLength();"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"ArrayList l = new ArrayList(); l.add(1); return l.length;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubclass
specifier|public
name|void
name|testSubclass
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); return l.getLength();"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); return l.length;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDef
specifier|public
name|void
name|testDef
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def l = new ArrayList(); l.add(1); return l.getLength();"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def l = new ArrayList(); l.add(1); return l.length;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCapturingReference
specifier|public
name|void
name|testCapturingReference
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int foo(Supplier t) { return t.get() }"
operator|+
literal|"ArrayList l = new ArrayList(); l.add(1);"
operator|+
literal|"return foo(l::getLength);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int foo(Supplier t) { return t.get() }"
operator|+
literal|"List l = new ArrayList(); l.add(1);"
operator|+
literal|"return foo(l::getLength);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int foo(Supplier t) { return t.get() }"
operator|+
literal|"def l = new ArrayList(); l.add(1);"
operator|+
literal|"return foo(l::getLength);"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_Any
specifier|public
name|void
name|testIterable_Any
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.any(x -> x == 1)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_AsCollection
specifier|public
name|void
name|testIterable_AsCollection
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); return l.asCollection() === l"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_AsList
specifier|public
name|void
name|testIterable_AsList
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); return l.asList() === l"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"Set l = new HashSet(); l.add(5); return l.asList()[0]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_Each
specifier|public
name|void
name|testIterable_Each
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); List l2 = new ArrayList(); l.each(l2::add); return l2.size()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_EachWithIndex
specifier|public
name|void
name|testIterable_EachWithIndex
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(2); Map m = new HashMap(); l.eachWithIndex(m::put); return m.get(2)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_Every
specifier|public
name|void
name|testIterable_Every
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); l.every(x -> x == 1)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_FindResults
specifier|public
name|void
name|testIterable_FindResults
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); l.findResults(x -> x == 1 ? x : null).size()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_GroupBy
specifier|public
name|void
name|testIterable_GroupBy
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(-1); l.groupBy(x -> x< 0 ? 'negative' : 'positive').size()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_Join
specifier|public
name|void
name|testIterable_Join
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test,ing"
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add('test'); l.add('ing'); l.join(',')"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterable_Sum
specifier|public
name|void
name|testIterable_Sum
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0D
argument_list|,
name|exec
argument_list|(
literal|"def l = [1,2]; return l.sum()"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.0D
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); l.sum(x -> x + 1)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollection_Collect
specifier|public
name|void
name|testCollection_Collect
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); l.collect(x -> x + 1)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asSet
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); l.collect(new HashSet(), x -> x + 1)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollection_Find
specifier|public
name|void
name|testCollection_Find
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); return l.find(x -> x == 2)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollection_FindAll
specifier|public
name|void
name|testCollection_FindAll
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|)
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); return l.findAll(x -> x == 2)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollection_FindResult
specifier|public
name|void
name|testCollection_FindResult
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"found"
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); return l.findResult(x -> x> 1 ? 'found' : null)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"notfound"
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); return l.findResult('notfound', x -> x> 10 ? 'found' : null)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollection_Split
specifier|public
name|void
name|testCollection_Split
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|exec
argument_list|(
literal|"List l = new ArrayList(); l.add(1); l.add(2); return l.split(x -> x == 2)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_Collect
specifier|public
name|void
name|testMap_Collect
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one1"
argument_list|,
literal|"two2"
argument_list|)
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.one = 1; m.two = 2; m.collect((key,value) -> key + value)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asSet
argument_list|(
literal|"one1"
argument_list|,
literal|"two2"
argument_list|)
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.one = 1; m.two = 2; m.collect(new HashSet(), (key,value) -> key + value)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_Count
specifier|public
name|void
name|testMap_Count
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.one = 1; m.two = 2; m.count((key,value) -> value == 2)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_Each
specifier|public
name|void
name|testMap_Each
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.one = 1; m.two = 2; Map m2 = new TreeMap(); m.each(m2::put); return m2.size()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_Every
specifier|public
name|void
name|testMap_Every
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.one = 1; m.two = 2; m.every((key,value) -> value == 2)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_Find
specifier|public
name|void
name|testMap_Find
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.one = 1; m.two = 2; return m.find((key,value) -> value == 2).key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_FindAll
specifier|public
name|void
name|testMap_FindAll
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.one = 1; m.two = 2; return m.findAll((key,value) -> value == 2)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_FindResult
specifier|public
name|void
name|testMap_FindResult
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"found"
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.one = 1; m.two = 2; return m.findResult((key,value) -> value == 2 ? 'found' : null)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"notfound"
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.one = 1; m.two = 2; "
operator|+
literal|"return m.findResult('notfound', (key,value) -> value == 10 ? 'found' : null)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_FindResults
specifier|public
name|void
name|testMap_FindResults
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"negative"
argument_list|,
literal|"positive"
argument_list|)
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.a = -1; m.b = 1; "
operator|+
literal|"return m.findResults((key,value) -> value< 0 ? 'negative' : 'positive')"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_GroupBy
specifier|public
name|void
name|testMap_GroupBy
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"JDK is JDK 9"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"negative"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"positive"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|exec
argument_list|(
literal|"Map m = new TreeMap(); m.a = -1; m.b = 1; "
operator|+
literal|"return m.groupBy((key,value) -> value< 0 ? 'negative' : 'positive')"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

