begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_comment
comment|/**  * Tests for the Elvis operator ({@code ?:}).  */
end_comment

begin_class
DECL|class|ElvisTests
specifier|public
class|class
name|ElvisTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
comment|// Basics
name|assertEquals
argument_list|(
literal|"str"
argument_list|,
name|exec
argument_list|(
literal|"return params.a ?: 'str'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"str"
argument_list|,
name|exec
argument_list|(
literal|"return params.a ?: 'str2'"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|"str"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"str"
argument_list|,
name|exec
argument_list|(
literal|"return params.a ?: 'asdf'"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|"str"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assigning to a primitive
name|assertCannotReturnPrimitive
argument_list|(
literal|"int i = params.a ?: 1; return i"
argument_list|)
expr_stmt|;
name|assertCannotReturnPrimitive
argument_list|(
literal|"Integer a = Integer.valueOf(1); int b = a ?: 2; return b"
argument_list|)
expr_stmt|;
name|assertCannotReturnPrimitive
argument_list|(
literal|"Integer a = Integer.valueOf(1); int b = a ?: Integer.valueOf(2); return b"
argument_list|)
expr_stmt|;
comment|// Assigning to an object
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"Integer i = params.a ?: Integer.valueOf(1); return i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"Integer i = params.a ?: Integer.valueOf(2); return i"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"Integer a = Integer.valueOf(1); Integer b = a ?: Integer.valueOf(2); return b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"Integer a = null; Integer b = a ?: Integer.valueOf(2); return b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Explicit casting
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return (Integer)(params.a ?: Integer.valueOf(1))"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return (Integer)(params.a ?: Integer.valueOf(2))"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertCannotReturnPrimitive
argument_list|(
literal|"return (int)(params.a ?: 1)"
argument_list|)
expr_stmt|;
comment|// Now some chains
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return params.a ?: params.a ?: 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return params.a ?: params.b ?: 'j'"
argument_list|,
name|singletonMap
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return params.a ?: params.b ?: 'j'"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Precedence
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return params.a ?: 2 + 2"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"return params.a ?: 2 + 2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return params.a + 1 ?: 2 + 2"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Yes, this is silly, but it should be valid
comment|// Weird casts
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int i = params.i;     String s = params.s; return s ?: i"
argument_list|,
name|singletonMap
argument_list|(
literal|"i"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"str"
argument_list|,
name|exec
argument_list|(
literal|"Integer i = params.i; String s = params.s; return s ?: i"
argument_list|,
name|singletonMap
argument_list|(
literal|"s"
argument_list|,
literal|"str"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Combining
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return (params.a ?: 0) + 1"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return (params.a ?: 0) + 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return (params.a ?: ['b': 10]).b + 1"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|singletonMap
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|exec
argument_list|(
literal|"return (params.a ?: ['b': 10]).b + 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithNullSafeDereferences
specifier|public
name|void
name|testWithNullSafeDereferences
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return params.a?.b ?: 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return params.a?.b ?: 2"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|singletonMap
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO This could be expanded to allow primitives where neither of the two operations allow them alone
block|}
DECL|method|testLazy
specifier|public
name|void
name|testLazy
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def fail() {throw new RuntimeException('test')} return params.a ?: fail()"
argument_list|,
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectScriptThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"def fail() {throw new RuntimeException('test')} return params.a ?: fail()"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that {@code a ?: b ?: c} is be parsed as {@code a ?: (b ?: c)} instead of {@code (a ?: b) ?: c} which is nice because the      * first one only needs one comparison if the {@code a} is non-null while the second one needs two.      */
DECL|method|testRightAssociative
specifier|public
name|void
name|testRightAssociative
parameter_list|()
block|{
name|checkOneBranch
argument_list|(
literal|"params.a ?: (params.b ?: params.c)"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkOneBranch
argument_list|(
literal|"(params.a ?: params.b) ?: params.c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkOneBranch
argument_list|(
literal|"params.a ?: params.b ?: params.c"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkOneBranch
specifier|private
name|void
name|checkOneBranch
parameter_list|(
name|String
name|code
parameter_list|,
name|boolean
name|expectOneBranch
parameter_list|)
block|{
comment|/* Sadly this is a super finicky about the output of the disassembly but I think it is worth having because it makes sure that          * the code generated for the elvis operator is as efficient as possible. */
name|String
name|disassembled
init|=
name|Debugger
operator|.
name|toString
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|int
name|firstLookup
init|=
name|disassembled
operator|.
name|indexOf
argument_list|(
literal|"INVOKEINTERFACE java/util/Map.get (Ljava/lang/Object;)Ljava/lang/Object;"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|disassembled
argument_list|,
name|firstLookup
argument_list|,
name|greaterThan
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|firstElvisDestinationLabelIndex
init|=
name|disassembled
operator|.
name|indexOf
argument_list|(
literal|"IFNONNULL L"
argument_list|,
name|firstLookup
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|disassembled
argument_list|,
name|firstElvisDestinationLabelIndex
argument_list|,
name|greaterThan
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|firstElvisDestinationLabel
init|=
name|disassembled
operator|.
name|substring
argument_list|(
name|firstElvisDestinationLabelIndex
operator|+
literal|"IFNONNULL "
operator|.
name|length
argument_list|()
argument_list|,
name|disassembled
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|,
name|firstElvisDestinationLabelIndex
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|firstElvisDestionation
init|=
name|disassembled
operator|.
name|indexOf
argument_list|(
literal|"   "
operator|+
name|firstElvisDestinationLabel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|disassembled
argument_list|,
name|firstElvisDestionation
argument_list|,
name|greaterThan
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|ifAfterFirstElvisDestination
init|=
name|disassembled
operator|.
name|indexOf
argument_list|(
literal|"IF"
argument_list|,
name|firstElvisDestionation
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectOneBranch
condition|)
block|{
name|assertThat
argument_list|(
name|disassembled
argument_list|,
name|ifAfterFirstElvisDestination
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|disassembled
argument_list|,
name|ifAfterFirstElvisDestination
argument_list|,
name|greaterThan
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|returnAfterFirstElvisDestination
init|=
name|disassembled
operator|.
name|indexOf
argument_list|(
literal|"RETURN"
argument_list|,
name|firstElvisDestionation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|disassembled
argument_list|,
name|returnAfterFirstElvisDestination
argument_list|,
name|greaterThan
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtraneous
specifier|public
name|void
name|testExtraneous
parameter_list|()
block|{
name|Exception
name|e
init|=
name|expectScriptThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"int i = params.a; return i ?: 1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Extraneous elvis operator. LHS is a primitive."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|expectScriptThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"int i = params.a; return i + 10 ?: 'ignored'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Extraneous elvis operator. LHS is a primitive."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectScriptThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"return 'cat' ?: 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Extraneous elvis operator. LHS is a constant."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectScriptThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"return null ?: 'j'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Extraneous elvis operator. LHS is null."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectScriptThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"return params.a ?: null ?: 'j'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Extraneous elvis operator. LHS is null."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectScriptThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"return params.a ?: null"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Extraneous elvis operator. RHS is null."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuestionSpaceColonIsNotElvis
specifier|public
name|void
name|testQuestionSpaceColonIsNotElvis
parameter_list|()
block|{
name|Exception
name|e
init|=
name|expectScriptThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"return params.a ? : 1"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid sequence of tokens near [':']."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCannotReturnPrimitive
specifier|private
name|void
name|assertCannotReturnPrimitive
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|Exception
name|e
init|=
name|expectScriptThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
name|script
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Evlis operator cannot return primitives"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

