begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.antlr
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ANTLRInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|BaseErrorListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|CommonTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|DiagnosticErrorListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|Recognizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|PredictionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|SourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|ScriptTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_class
DECL|class|ParserTests
specifier|public
class|class
name|ParserTests
extends|extends
name|ScriptTestCase
block|{
DECL|class|TestException
specifier|private
specifier|static
class|class
name|TestException
extends|extends
name|RuntimeException
block|{
DECL|method|TestException
name|TestException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildAntlrTree
specifier|private
name|SourceContext
name|buildAntlrTree
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|ANTLRInputStream
name|stream
init|=
operator|new
name|ANTLRInputStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|PainlessLexer
name|lexer
init|=
operator|new
name|ErrorHandlingLexer
argument_list|(
name|stream
argument_list|,
literal|"testing"
argument_list|)
decl_stmt|;
name|PainlessParser
name|parser
init|=
operator|new
name|PainlessParser
argument_list|(
operator|new
name|CommonTokenStream
argument_list|(
name|lexer
argument_list|)
argument_list|)
decl_stmt|;
name|ParserErrorStrategy
name|strategy
init|=
operator|new
name|ParserErrorStrategy
argument_list|(
literal|"testing"
argument_list|)
decl_stmt|;
name|lexer
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
name|parser
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
comment|// Diagnostic listener invokes syntaxError on other listeners for ambiguity issues,
name|parser
operator|.
name|addErrorListener
argument_list|(
operator|new
name|DiagnosticErrorListener
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// a second listener to fail the test when the above happens.
name|parser
operator|.
name|addErrorListener
argument_list|(
operator|new
name|BaseErrorListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|syntaxError
parameter_list|(
specifier|final
name|Recognizer
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|recognizer
parameter_list|,
specifier|final
name|Object
name|offendingSymbol
parameter_list|,
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|int
name|charPositionInLine
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|,
specifier|final
name|RecognitionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TestException
argument_list|(
literal|"line: "
operator|+
name|line
operator|+
literal|", offset: "
operator|+
name|charPositionInLine
operator|+
literal|", symbol:"
operator|+
name|offendingSymbol
operator|+
literal|" "
operator|+
name|msg
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Enable exact ambiguity detection (costly). we enable exact since its the default for
comment|// DiagnosticErrorListener, life is too short to think about what 'inexact ambiguity' might mean.
name|parser
operator|.
name|getInterpreter
argument_list|()
operator|.
name|setPredictionMode
argument_list|(
name|PredictionMode
operator|.
name|LL_EXACT_AMBIG_DETECTION
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|source
argument_list|()
return|;
block|}
DECL|method|testIllegalSecondary
specifier|public
name|void
name|testIllegalSecondary
parameter_list|()
block|{
comment|//TODO: Need way more corner case tests.
name|Exception
name|exception
init|=
name|expectThrows
argument_list|(
name|TestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|buildAntlrTree
argument_list|(
literal|"(x = 5).y"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"no viable alternative"
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
name|expectThrows
argument_list|(
name|TestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|buildAntlrTree
argument_list|(
literal|"((x = 5).y = 2).z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"no viable alternative"
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
name|expectThrows
argument_list|(
name|TestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|buildAntlrTree
argument_list|(
literal|"(2 + 2).z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"no viable alternative"
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|buildAntlrTree
argument_list|(
literal|"((Map)x.-x)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unexpected character"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLambdaSyntax
specifier|public
name|void
name|testLambdaSyntax
parameter_list|()
block|{
name|buildAntlrTree
argument_list|(
literal|"call(p -> {p.doSomething();});"
argument_list|)
expr_stmt|;
name|buildAntlrTree
argument_list|(
literal|"call(int p -> {p.doSomething();});"
argument_list|)
expr_stmt|;
name|buildAntlrTree
argument_list|(
literal|"call((p, u, v) -> {p.doSomething(); blah = 1;});"
argument_list|)
expr_stmt|;
name|buildAntlrTree
argument_list|(
literal|"call(1, (p, u, v) -> {p.doSomething(); blah = 1;}, 3);"
argument_list|)
expr_stmt|;
name|buildAntlrTree
argument_list|(
literal|"call((p, u, v) -> {p.doSomething(); blah = 1;});"
argument_list|)
expr_stmt|;
name|buildAntlrTree
argument_list|(
literal|"call(x, y, z, (int p, int u, int v) -> {p.doSomething(); blah = 1;});"
argument_list|)
expr_stmt|;
name|buildAntlrTree
argument_list|(
literal|"call(x, y, z, (long p, List u, String v) -> {p.doSomething(); blah = 1;});"
argument_list|)
expr_stmt|;
name|buildAntlrTree
argument_list|(
literal|"call(x, y, z, (int p, u, int v) -> {p.doSomething(); blah = 1;});"
argument_list|)
expr_stmt|;
name|buildAntlrTree
argument_list|(
literal|"call(x, (int p, u, int v) -> {p.doSomething(); blah = 1;}, z,"
operator|+
literal|" (int p, u, int v) -> {p.doSomething(); blah = 1;}, 'test');"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

