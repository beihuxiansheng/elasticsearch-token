begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|both
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|either
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_comment
comment|/** Tests for working with lists. */
end_comment

begin_class
DECL|class|ListTests
specifier|public
class|class
name|ListTests
extends|extends
name|ArrayLikeObjectTestCase
block|{
annotation|@
name|Override
DECL|method|declType
specifier|protected
name|String
name|declType
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
return|return
literal|"List"
return|;
block|}
annotation|@
name|Override
DECL|method|valueCtorCall
specifier|protected
name|String
name|valueCtorCall
parameter_list|(
name|String
name|valueType
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|String
index|[]
name|fill
init|=
operator|new
name|String
index|[
name|size
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|fill
argument_list|,
name|fillValue
argument_list|(
name|valueType
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|"["
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|fill
argument_list|)
operator|+
literal|"]"
return|;
block|}
DECL|method|fillValue
specifier|private
name|String
name|fillValue
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
switch|switch
condition|(
name|valueType
condition|)
block|{
case|case
literal|"int"
case|:
return|return
literal|"0"
return|;
case|case
literal|"long"
case|:
return|return
literal|"0L"
return|;
case|case
literal|"short"
case|:
return|return
literal|"(short) 0"
return|;
case|case
literal|"byte"
case|:
return|return
literal|"(byte) 0"
return|;
case|case
literal|"float"
case|:
return|return
literal|"0.0f"
return|;
case|case
literal|"double"
case|:
return|return
literal|"0.0"
return|;
comment|// Double is implicit for decimal constants
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|outOfBoundsExceptionMatcher
specifier|protected
name|Matcher
argument_list|<
name|?
super|super
name|IndexOutOfBoundsException
argument_list|>
name|outOfBoundsExceptionMatcher
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>
name|size
condition|)
block|{
return|return
name|hasToString
argument_list|(
literal|"java.lang.IndexOutOfBoundsException: Index: "
operator|+
name|index
operator|+
literal|", Size: "
operator|+
name|size
argument_list|)
return|;
block|}
else|else
block|{
name|Matcher
argument_list|<
name|?
super|super
name|IndexOutOfBoundsException
argument_list|>
name|m
init|=
name|both
argument_list|(
name|instanceOf
argument_list|(
name|ArrayIndexOutOfBoundsException
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|hasToString
argument_list|(
literal|"java.lang.ArrayIndexOutOfBoundsException: "
operator|+
name|index
argument_list|)
argument_list|)
decl_stmt|;
comment|// If we set -XX:-OmitStackTraceInFastThrow we wouldn't need this
name|m
operator|=
name|either
argument_list|(
name|m
argument_list|)
operator|.
name|or
argument_list|(
name|instanceOf
argument_list|(
name|ArrayIndexOutOfBoundsException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
block|}
block|}
end_class

end_unit

