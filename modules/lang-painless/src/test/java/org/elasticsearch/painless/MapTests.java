begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_comment
comment|/** Tests for working with maps. */
end_comment

begin_class
DECL|class|MapTests
specifier|public
class|class
name|MapTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|mapAccessesTestCase
specifier|private
name|void
name|mapAccessesTestCase
parameter_list|(
name|String
name|listType
parameter_list|)
block|{
name|Object
name|val
init|=
name|randomFrom
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
literal|1.3
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|decl
init|=
name|listType
operator|+
literal|" x = ['a': 1, 'b': 2, 0: 2, -5: 'slot', 123.1: 12]"
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
name|decl
operator|+
literal|"; return x.size()"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exec
argument_list|(
name|decl
operator|+
literal|"; return x[0];"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
name|decl
operator|+
literal|"; return x['a'];"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|exec
argument_list|(
name|decl
operator|+
literal|"; return x[123.1];"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|exec
argument_list|(
name|decl
operator|+
literal|"; x[ 0] = params.val; return x[ 0];"
argument_list|,
name|singletonMap
argument_list|(
literal|"val"
argument_list|,
name|val
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"slot"
argument_list|,
name|exec
argument_list|(
name|decl
operator|+
literal|"; x[ 0] = params.val; return x[-5];"
argument_list|,
name|singletonMap
argument_list|(
literal|"val"
argument_list|,
name|val
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|exec
argument_list|(
name|decl
operator|+
literal|"; x[-5] = params.val; return x[-5];"
argument_list|,
name|singletonMap
argument_list|(
literal|"val"
argument_list|,
name|val
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapInDefAccesses
specifier|public
name|void
name|testMapInDefAccesses
parameter_list|()
block|{
name|mapAccessesTestCase
argument_list|(
literal|"def"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapAccesses
specifier|public
name|void
name|testMapAccesses
parameter_list|()
block|{
name|mapAccessesTestCase
argument_list|(
literal|"Map"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

