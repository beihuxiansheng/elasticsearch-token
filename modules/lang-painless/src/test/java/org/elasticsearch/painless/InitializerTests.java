begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|InitializerTests
specifier|public
class|class
name|InitializerTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testArrayInitializers
specifier|public
name|void
name|testArrayInitializers
parameter_list|()
block|{
name|int
index|[]
name|ints
init|=
operator|(
name|int
index|[]
operator|)
name|exec
argument_list|(
literal|"new int[] {}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ints
operator|.
name|length
argument_list|)
expr_stmt|;
name|ints
operator|=
operator|(
name|int
index|[]
operator|)
name|exec
argument_list|(
literal|"new int[] {5, 7, -1, 14}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|ints
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|ints
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ints
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ints
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|ints
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ints
operator|=
operator|(
name|int
index|[]
operator|)
name|exec
argument_list|(
literal|"int y = 2; int z = 3; int[] x = new int[] {y*z, y + z, y - z, y, z}; return x;"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|ints
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|ints
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|ints
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ints
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ints
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ints
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|objects
init|=
operator|(
name|Object
index|[]
operator|)
name|exec
argument_list|(
literal|"int y = 2; List z = new ArrayList(); String s = 'aaa';"
operator|+
literal|"Object[] x = new Object[] {y, z, 1 + s, s + 'aaa'}; return x;"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|objects
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
argument_list|,
name|objects
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|objects
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1aaa"
argument_list|,
name|objects
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaaaaa"
argument_list|,
name|objects
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testListInitializers
specifier|public
name|void
name|testListInitializers
parameter_list|()
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|exec
argument_list|(
literal|"[]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|(
name|List
operator|)
name|exec
argument_list|(
literal|"[5, 7, -1, 14]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
operator|(
name|List
operator|)
name|exec
argument_list|(
literal|"int y = 2; int z = 3; def x = [y*z, y + z, y - z, y, z]; return x;"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
operator|(
name|List
operator|)
name|exec
argument_list|(
literal|"int y = 2; List z = new ArrayList(); String s = 'aaa'; List x = [y, z, 1 + s, s + 'aaa']; return x;"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1aaa"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaaaaa"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapInitializers
specifier|public
name|void
name|testMapInitializers
parameter_list|()
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|exec
argument_list|(
literal|"[:]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|exec
argument_list|(
literal|"[5 : 7, -1 : 14]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|7
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|14
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|exec
argument_list|(
literal|"int y = 2; int z = 3; Map x = [y*z : y + z, y - z : y, z : z]; return x;"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|3
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|exec
argument_list|(
literal|"int y = 2; List z = new ArrayList(); String s = 'aaa';"
operator|+
literal|"def x = [y : z, 1 + s : s + 'aaa']; return x;"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaaaaa"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"1aaa"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCrazyInitializer
specifier|public
name|void
name|testCrazyInitializer
parameter_list|()
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|exec
argument_list|(
literal|"int y = 2; int z = 3; Map x = [y*z : y + z, 's' : [y, [y : [[z], [], [:]]]], z : [z, 9]]; return x;"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list0
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list0
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|list0
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map0
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map0
operator|.
name|put
argument_list|(
literal|2
argument_list|,
name|list1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list2
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|map0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list3
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|list3
operator|.
name|add
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list2
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list3
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

