begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_comment
comment|/** Tests for or operator across all types */
end_comment

begin_class
DECL|class|ArrayTests
specifier|public
class|class
name|ArrayTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testArrayLengthHelper
specifier|public
name|void
name|testArrayLengthHelper
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertArrayLength
argument_list|(
literal|2
argument_list|,
operator|new
name|int
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|3
argument_list|,
operator|new
name|long
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|4
argument_list|,
operator|new
name|byte
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|5
argument_list|,
operator|new
name|float
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|6
argument_list|,
operator|new
name|double
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|7
argument_list|,
operator|new
name|char
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|8
argument_list|,
operator|new
name|short
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|9
argument_list|,
operator|new
name|Object
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|10
argument_list|,
operator|new
name|Integer
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|11
argument_list|,
operator|new
name|String
index|[
literal|11
index|]
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|assertArrayLength
specifier|private
name|void
name|assertArrayLength
parameter_list|(
name|int
name|length
parameter_list|,
name|Object
name|array
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
name|length
argument_list|,
operator|(
name|int
operator|)
name|Def
operator|.
name|arrayLengthGetter
argument_list|(
name|array
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|invoke
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testArrayLoadStoreInt
specifier|public
name|void
name|testArrayLoadStoreInt
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = new int[5]; return x.length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = new int[4]; x[0] = 5; return x[0];"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testArrayLoadStoreString
specifier|public
name|void
name|testArrayLoadStoreString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = new String[5]; return x.length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|exec
argument_list|(
literal|"def x = new String[4]; x[0] = 'foobar'; return x[0];"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testArrayLoadStoreDef
specifier|public
name|void
name|testArrayLoadStoreDef
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = new def[5]; return x.length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = new def[4]; x[0] = 5; return x[0];"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testArrayCompoundInt
specifier|public
name|void
name|testArrayCompoundInt
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|exec
argument_list|(
literal|"int[] x = new int[5]; x[0] = 5; x[0]++; return x[0];"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testArrayCompoundDef
specifier|public
name|void
name|testArrayCompoundDef
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|exec
argument_list|(
literal|"def x = new int[5]; x[0] = 5; x[0]++; return x[0];"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJacksCrazyExpression1
specifier|public
name|void
name|testJacksCrazyExpression1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x; def[] y = new def[1]; x = y[0] = 1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJacksCrazyExpression2
specifier|public
name|void
name|testJacksCrazyExpression2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x; def y = new def[1]; x = y[0] = 1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForLoop
specifier|public
name|void
name|testForLoop
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|999
operator|*
literal|1000
operator|/
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def a = new int[1000]; for (int x = 0; x< a.length; x++) { a[x] = x; } "
operator|+
literal|"int total = 0; for (int x = 0; x< a.length; x++) { total += a[x]; } return total;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

