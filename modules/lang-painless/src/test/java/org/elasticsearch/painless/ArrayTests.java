begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|both
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_comment
comment|/** Tests for working with arrays. */
end_comment

begin_class
DECL|class|ArrayTests
specifier|public
class|class
name|ArrayTests
extends|extends
name|ArrayLikeObjectTestCase
block|{
annotation|@
name|Override
DECL|method|declType
specifier|protected
name|String
name|declType
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
return|return
name|valueType
operator|+
literal|"[]"
return|;
block|}
annotation|@
name|Override
DECL|method|valueCtorCall
specifier|protected
name|String
name|valueCtorCall
parameter_list|(
name|String
name|valueType
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
literal|"new "
operator|+
name|valueType
operator|+
literal|"["
operator|+
name|size
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|outOfBoundsExceptionMatcher
specifier|protected
name|Matcher
argument_list|<
name|?
super|super
name|IndexOutOfBoundsException
argument_list|>
name|outOfBoundsExceptionMatcher
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|both
argument_list|(
name|instanceOf
argument_list|(
name|ArrayIndexOutOfBoundsException
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|hasToString
argument_list|(
literal|"java.lang.ArrayIndexOutOfBoundsException: "
operator|+
name|index
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testArrayLengthHelper
specifier|public
name|void
name|testArrayLengthHelper
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertArrayLength
argument_list|(
literal|2
argument_list|,
operator|new
name|int
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|3
argument_list|,
operator|new
name|long
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|4
argument_list|,
operator|new
name|byte
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|5
argument_list|,
operator|new
name|float
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|6
argument_list|,
operator|new
name|double
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|7
argument_list|,
operator|new
name|char
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|8
argument_list|,
operator|new
name|short
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|9
argument_list|,
operator|new
name|Object
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|10
argument_list|,
operator|new
name|Integer
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertArrayLength
argument_list|(
literal|11
argument_list|,
operator|new
name|String
index|[
literal|11
index|]
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|assertArrayLength
specifier|private
name|void
name|assertArrayLength
parameter_list|(
name|int
name|length
parameter_list|,
name|Object
name|array
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|MethodHandle
name|mh
init|=
name|Def
operator|.
name|arrayLengthGetter
argument_list|(
name|array
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|array
operator|.
name|getClass
argument_list|()
argument_list|,
name|mh
operator|.
name|type
argument_list|()
operator|.
name|parameterType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
operator|(
name|int
operator|)
name|mh
operator|.
name|asType
argument_list|(
name|MethodType
operator|.
name|methodType
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|invokeExact
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJacksCrazyExpression1
specifier|public
name|void
name|testJacksCrazyExpression1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x; def[] y = new def[1]; x = y[0] = 1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJacksCrazyExpression2
specifier|public
name|void
name|testJacksCrazyExpression2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x; def y = new def[1]; x = y[0] = 1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testArrayVariable
specifier|public
name|void
name|testArrayVariable
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; int[] y = new int[x]; return y.length"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForLoop
specifier|public
name|void
name|testForLoop
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|999
operator|*
literal|1000
operator|/
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def a = new int[1000]; for (int x = 0; x< a.length; x++) { a[x] = x; } "
operator|+
literal|"int total = 0; for (int x = 0; x< a.length; x++) { total += a[x]; } return total;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make sure we don't try and convert the {@code /} after the {@code ]} into a regex....      */
DECL|method|testDivideArray
specifier|public
name|void
name|testDivideArray
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def[] x = new def[1]; x[0] = 2; return x[0] / 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

