begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasEntry
import|;
end_import

begin_class
DECL|class|DebugTests
specifier|public
class|class
name|DebugTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testExplain
specifier|public
name|void
name|testExplain
parameter_list|()
block|{
name|Object
name|dummy
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|dummy
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|PainlessExplainError
name|e
init|=
name|expectScriptThrows
argument_list|(
name|Debug
operator|.
name|PainlessExplainError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"Debug.explain(params.a)"
argument_list|,
name|params
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|dummy
argument_list|,
name|e
operator|.
name|getObjectToExplain
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|hasEntry
argument_list|(
literal|"es.class"
argument_list|,
name|singletonList
argument_list|(
literal|"java.lang.Object"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|hasEntry
argument_list|(
literal|"es.to_string"
argument_list|,
name|singletonList
argument_list|(
name|dummy
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Null should be ok
name|e
operator|=
name|expectScriptThrows
argument_list|(
name|Debug
operator|.
name|PainlessExplainError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"Debug.explain(null)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|e
operator|.
name|getObjectToExplain
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|hasEntry
argument_list|(
literal|"es.class"
argument_list|,
name|singletonList
argument_list|(
literal|"null"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|hasEntry
argument_list|(
literal|"es.to_string"
argument_list|,
name|singletonList
argument_list|(
literal|"null"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// You can't catch the explain exception
name|e
operator|=
name|expectScriptThrows
argument_list|(
name|Debug
operator|.
name|PainlessExplainError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"try {\n"
operator|+
literal|"  Debug.explain(params.a)\n"
operator|+
literal|"} catch (Exception e) {\n"
operator|+
literal|"  return 1\n"
operator|+
literal|"}"
argument_list|,
name|params
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dummy
argument_list|,
name|e
operator|.
name|getObjectToExplain
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@link Debug.PainlessExplainError} doesn't serialize but the headers still make it.      */
DECL|method|testPainlessExplainErrorSerialization
specifier|public
name|void
name|testPainlessExplainErrorSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|"jumped over the moon"
argument_list|)
decl_stmt|;
name|ScriptException
name|e
init|=
name|expectThrows
argument_list|(
name|ScriptException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
literal|"Debug.explain(params.a)"
argument_list|,
name|params
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|singletonList
argument_list|(
literal|"java.lang.String"
argument_list|)
argument_list|,
name|e
operator|.
name|getMetadata
argument_list|(
literal|"es.class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singletonList
argument_list|(
literal|"jumped over the moon"
argument_list|)
argument_list|,
name|e
operator|.
name|getMetadata
argument_list|(
literal|"es.to_string"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|writeException
argument_list|(
name|e
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|ElasticsearchException
name|read
init|=
operator|(
name|ScriptException
operator|)
name|in
operator|.
name|readException
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|singletonList
argument_list|(
literal|"java.lang.String"
argument_list|)
argument_list|,
name|read
operator|.
name|getMetadata
argument_list|(
literal|"es.class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singletonList
argument_list|(
literal|"jumped over the moon"
argument_list|)
argument_list|,
name|read
operator|.
name|getMetadata
argument_list|(
literal|"es.to_string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

