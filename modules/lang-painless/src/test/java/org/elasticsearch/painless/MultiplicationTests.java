begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_comment
comment|/** Tests for multiplication operator across all types */
end_comment

begin_comment
comment|//TODO: NaN/Inf/overflow/...
end_comment

begin_class
DECL|class|MultiplicationTests
specifier|public
class|class
name|MultiplicationTests
extends|extends
name|ScriptTestCase
block|{
comment|// TODO: short,byte,char
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|exec
argument_list|(
literal|"int x = 4; char y = 2; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInt
specifier|public
name|void
name|testInt
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
operator|*
literal|1
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; int y = 1; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|3
argument_list|,
name|exec
argument_list|(
literal|"int x = 2; int y = 3; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
literal|10
argument_list|,
name|exec
argument_list|(
literal|"int x = 5; int y = 10; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
literal|1
operator|*
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; int y = 1; int z = 2; return x*y*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1
operator|*
literal|1
operator|)
operator|*
literal|2
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; int y = 1; int z = 2; return (x*y)*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
operator|(
literal|1
operator|*
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"int x = 1; int y = 1; int z = 2; return x*(y*z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|*
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = 10; int y = 0; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
literal|0
argument_list|,
name|exec
argument_list|(
literal|"int x = 0; int y = 0; return x*x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntConst
specifier|public
name|void
name|testIntConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
operator|*
literal|1
argument_list|,
name|exec
argument_list|(
literal|"return 1*1;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|3
argument_list|,
name|exec
argument_list|(
literal|"return 2*3;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
literal|10
argument_list|,
name|exec
argument_list|(
literal|"return 5*10;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
literal|1
operator|*
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return 1*1*2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1
operator|*
literal|1
operator|)
operator|*
literal|2
argument_list|,
name|exec
argument_list|(
literal|"return (1*1)*2;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
operator|(
literal|1
operator|*
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return 1*(1*2);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|*
literal|0
argument_list|,
name|exec
argument_list|(
literal|"return 10*0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
literal|0
argument_list|,
name|exec
argument_list|(
literal|"return 0*0;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testByte
specifier|public
name|void
name|testByte
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
operator|*
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|exec
argument_list|(
literal|"byte x = 1; byte y = 1; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|2
operator|*
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|exec
argument_list|(
literal|"byte x = 2; byte y = 3; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|5
operator|*
operator|(
name|byte
operator|)
literal|10
argument_list|,
name|exec
argument_list|(
literal|"byte x = 5; byte y = 10; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
operator|*
operator|(
name|byte
operator|)
literal|1
operator|*
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = 1; byte y = 1; byte z = 2; return x*y*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|byte
operator|)
literal|1
operator|*
operator|(
name|byte
operator|)
literal|1
operator|)
operator|*
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|exec
argument_list|(
literal|"byte x = 1; byte y = 1; byte z = 2; return (x*y)*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
operator|*
operator|(
operator|(
name|byte
operator|)
literal|1
operator|*
operator|(
name|byte
operator|)
literal|2
operator|)
argument_list|,
name|exec
argument_list|(
literal|"byte x = 1; byte y = 1; byte z = 2; return x*(y*z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|10
operator|*
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = 10; byte y = 0; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|0
operator|*
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|exec
argument_list|(
literal|"byte x = 0; byte y = 0; return x*x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLong
specifier|public
name|void
name|testLong
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1L
operator|*
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"long x = 1; long y = 1; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
operator|*
literal|3L
argument_list|,
name|exec
argument_list|(
literal|"long x = 2; long y = 3; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
operator|*
literal|10L
argument_list|,
name|exec
argument_list|(
literal|"long x = 5; long y = 10; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
operator|*
literal|1L
operator|*
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = 1; long y = 1; int z = 2; return x*y*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1L
operator|*
literal|1L
operator|)
operator|*
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"long x = 1; long y = 1; int z = 2; return (x*y)*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
operator|*
operator|(
literal|1L
operator|*
literal|2L
operator|)
argument_list|,
name|exec
argument_list|(
literal|"long x = 1; long y = 1; int z = 2; return x*(y*z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
operator|*
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = 10; long y = 0; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
operator|*
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"long x = 0; long y = 0; return x*x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongConst
specifier|public
name|void
name|testLongConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1L
operator|*
literal|1L
argument_list|,
name|exec
argument_list|(
literal|"return 1L*1L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
operator|*
literal|3L
argument_list|,
name|exec
argument_list|(
literal|"return 2L*3L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
operator|*
literal|10L
argument_list|,
name|exec
argument_list|(
literal|"return 5L*10L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
operator|*
literal|1L
operator|*
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"return 1L*1L*2L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1L
operator|*
literal|1L
operator|)
operator|*
literal|2L
argument_list|,
name|exec
argument_list|(
literal|"return (1L*1L)*2L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
operator|*
operator|(
literal|1L
operator|*
literal|2L
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return 1L*(1L*2L);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
operator|*
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"return 10L*0L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
operator|*
literal|0L
argument_list|,
name|exec
argument_list|(
literal|"return 0L*0L;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloat
specifier|public
name|void
name|testFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1F
operator|*
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"float x = 1; float y = 1; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
operator|*
literal|3F
argument_list|,
name|exec
argument_list|(
literal|"float x = 2; float y = 3; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5F
operator|*
literal|10F
argument_list|,
name|exec
argument_list|(
literal|"float x = 5; float y = 10; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
operator|*
literal|1F
operator|*
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = 1; float y = 1; float z = 2; return x*y*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1F
operator|*
literal|1F
operator|)
operator|*
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"float x = 1; float y = 1; float z = 2; return (x*y)*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
operator|*
operator|(
literal|1F
operator|*
literal|2F
operator|)
argument_list|,
name|exec
argument_list|(
literal|"float x = 1; float y = 1; float z = 2; return x*(y*z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10F
operator|*
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = 10; float y = 0; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
operator|*
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"float x = 0; float y = 0; return x*x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatConst
specifier|public
name|void
name|testFloatConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1F
operator|*
literal|1F
argument_list|,
name|exec
argument_list|(
literal|"return 1F*1F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2F
operator|*
literal|3F
argument_list|,
name|exec
argument_list|(
literal|"return 2F*3F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5F
operator|*
literal|10F
argument_list|,
name|exec
argument_list|(
literal|"return 5F*10F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
operator|*
literal|1F
operator|*
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"return 1F*1F*2F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1F
operator|*
literal|1F
operator|)
operator|*
literal|2F
argument_list|,
name|exec
argument_list|(
literal|"return (1F*1F)*2F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1F
operator|*
operator|(
literal|1F
operator|*
literal|2F
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return 1F*(1F*2F);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10F
operator|*
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"return 10F*0F;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0F
operator|*
literal|0F
argument_list|,
name|exec
argument_list|(
literal|"return 0F*0F;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDouble
specifier|public
name|void
name|testDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1D
operator|*
literal|1D
argument_list|,
name|exec
argument_list|(
literal|"double x = 1; double y = 1; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2D
operator|*
literal|3D
argument_list|,
name|exec
argument_list|(
literal|"double x = 2; double y = 3; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5D
operator|*
literal|10D
argument_list|,
name|exec
argument_list|(
literal|"double x = 5; double y = 10; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
operator|*
literal|1D
operator|*
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = 1; double y = 1; double z = 2; return x*y*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1D
operator|*
literal|1D
operator|)
operator|*
literal|2D
argument_list|,
name|exec
argument_list|(
literal|"double x = 1; double y = 1; double z = 2; return (x*y)*z;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1D
operator|*
operator|(
literal|1D
operator|*
literal|2D
operator|)
argument_list|,
name|exec
argument_list|(
literal|"double x = 1; double y = 1; double z = 2; return x*(y*z);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10D
operator|*
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = 10; float y = 0; return x*y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0D
operator|*
literal|0D
argument_list|,
name|exec
argument_list|(
literal|"double x = 0; float y = 0; return x*x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoubleConst
specifier|public
name|void
name|testDoubleConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1.0
operator|*
literal|1.0
argument_list|,
name|exec
argument_list|(
literal|"return 1.0*1.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
operator|*
literal|3.0
argument_list|,
name|exec
argument_list|(
literal|"return 2.0*3.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.0
operator|*
literal|10.0
argument_list|,
name|exec
argument_list|(
literal|"return 5.0*10.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
operator|*
literal|1.0
operator|*
literal|2.0
argument_list|,
name|exec
argument_list|(
literal|"return 1.0*1.0*2.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1.0
operator|*
literal|1.0
operator|)
operator|*
literal|2.0
argument_list|,
name|exec
argument_list|(
literal|"return (1.0*1.0)*2.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
operator|*
operator|(
literal|1.0
operator|*
literal|2.0
operator|)
argument_list|,
name|exec
argument_list|(
literal|"return 1.0*(1.0*2.0);"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.0
operator|*
literal|0.0
argument_list|,
name|exec
argument_list|(
literal|"return 10.0*0.0;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
operator|*
literal|0.0
argument_list|,
name|exec
argument_list|(
literal|"return 0.0*0.0;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDef
specifier|public
name|void
name|testDef
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefTypedLHS
specifier|public
name|void
name|testDefTypedLHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"byte x = (byte)2; def y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"short x = (short)2; def y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"char x = (char)2; def y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"int x = (int)2; def y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"long x = (long)2; def y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"float x = (float)2; def y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"double x = (double)2; def y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefTypedRHS
specifier|public
name|void
name|testDefTypedRHS
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)2; byte y = (byte)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)2; short y = (short)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)2; char y = (char)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def x = (int)2; int y = (int)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|exec
argument_list|(
literal|"def x = (long)2; long y = (long)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4F
argument_list|,
name|exec
argument_list|(
literal|"def x = (float)2; float y = (float)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4D
argument_list|,
name|exec
argument_list|(
literal|"def x = (double)2; double y = (double)2; return x * y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompoundAssignment
specifier|public
name|void
name|testCompoundAssignment
parameter_list|()
block|{
comment|// byte
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"byte x = 5; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|5
argument_list|,
name|exec
argument_list|(
literal|"byte x = 5; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// short
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"short x = 5; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|5
argument_list|,
name|exec
argument_list|(
literal|"short x = 5; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// char
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"char x = 5; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// int
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|exec
argument_list|(
literal|"int x = 5; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5
argument_list|,
name|exec
argument_list|(
literal|"int x = 5; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// long
name|assertEquals
argument_list|(
literal|15L
argument_list|,
name|exec
argument_list|(
literal|"long x = 5; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"long x = 5; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// float
name|assertEquals
argument_list|(
literal|15F
argument_list|,
name|exec
argument_list|(
literal|"float x = 5f; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5F
argument_list|,
name|exec
argument_list|(
literal|"float x = 5f; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// double
name|assertEquals
argument_list|(
literal|15D
argument_list|,
name|exec
argument_list|(
literal|"double x = 5.0; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5D
argument_list|,
name|exec
argument_list|(
literal|"double x = 5.0; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefCompoundAssignment
specifier|public
name|void
name|testDefCompoundAssignment
parameter_list|()
block|{
comment|// byte
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)5; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (byte)5; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// short
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)5; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = (short)5; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// char
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
literal|15
argument_list|,
name|exec
argument_list|(
literal|"def x = (char)5; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// int
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|exec
argument_list|(
literal|"def x = 5; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def x = 5; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// long
name|assertEquals
argument_list|(
literal|15L
argument_list|,
name|exec
argument_list|(
literal|"def x = 5L; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5L
argument_list|,
name|exec
argument_list|(
literal|"def x = 5L; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// float
name|assertEquals
argument_list|(
literal|15F
argument_list|,
name|exec
argument_list|(
literal|"def x = 5f; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5F
argument_list|,
name|exec
argument_list|(
literal|"def x = 5f; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// double
name|assertEquals
argument_list|(
literal|15D
argument_list|,
name|exec
argument_list|(
literal|"def x = 5.0; x *= 3; return x;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5D
argument_list|,
name|exec
argument_list|(
literal|"def x = 5.0; x *= -1; return x;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

