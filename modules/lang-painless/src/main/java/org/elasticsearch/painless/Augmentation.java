begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|ObjIntConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|ToDoubleFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_class
DECL|class|Augmentation
specifier|public
class|class
name|Augmentation
block|{
DECL|method|getLength
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|getLength
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|)
block|{
return|return
name|receiver
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|namedGroup
specifier|public
specifier|static
name|String
name|namedGroup
parameter_list|(
name|Matcher
name|receiver
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|receiver
operator|.
name|group
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|any
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|any
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|predicate
parameter_list|)
block|{
for|for
control|(
name|T
name|t
range|:
name|receiver
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|count
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|count
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|predicate
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|receiver
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|each
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|each
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|)
block|{
name|receiver
operator|.
name|forEach
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|receiver
return|;
block|}
DECL|method|eachWithIndex
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|eachWithIndex
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|,
name|ObjIntConsumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|receiver
control|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|t
argument_list|,
name|count
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|receiver
return|;
block|}
DECL|method|every
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|every
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|predicate
parameter_list|)
block|{
for|for
control|(
name|T
name|t
range|:
name|receiver
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|t
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|findResults
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|>
name|List
argument_list|<
name|U
argument_list|>
name|findResults
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
name|filter
parameter_list|)
block|{
name|List
argument_list|<
name|U
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|receiver
control|)
block|{
name|U
name|result
init|=
name|filter
operator|.
name|apply
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
DECL|method|groupBy
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|>
name|Map
argument_list|<
name|U
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
name|mapper
parameter_list|)
block|{
name|Map
argument_list|<
name|U
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|receiver
control|)
block|{
name|U
name|mapped
init|=
name|mapper
operator|.
name|apply
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|results
init|=
name|map
operator|.
name|get
argument_list|(
name|mapped
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|mapped
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|join
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|String
name|join
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|receiver
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sum
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|double
name|sum
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|receiver
parameter_list|,
name|ToDoubleFunction
argument_list|<
name|T
argument_list|>
name|function
parameter_list|)
block|{
name|double
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|receiver
control|)
block|{
name|sum
operator|+=
name|function
operator|.
name|applyAsDouble
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
block|}
end_class

end_unit

