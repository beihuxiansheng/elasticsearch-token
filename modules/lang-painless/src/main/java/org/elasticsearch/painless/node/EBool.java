begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|CompilerSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_comment
comment|/**  * Represents a boolean expression.  */
end_comment

begin_class
DECL|class|EBool
specifier|public
specifier|final
class|class
name|EBool
extends|extends
name|AExpression
block|{
DECL|field|operation
specifier|final
name|Operation
name|operation
decl_stmt|;
DECL|field|left
name|AExpression
name|left
decl_stmt|;
DECL|field|right
name|AExpression
name|right
decl_stmt|;
DECL|method|EBool
specifier|public
name|EBool
parameter_list|(
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|Operation
name|operation
parameter_list|,
specifier|final
name|AExpression
name|left
parameter_list|,
specifier|final
name|AExpression
name|right
parameter_list|)
block|{
name|super
argument_list|(
name|line
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|void
name|analyze
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|expected
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|AND
condition|)
block|{
name|constant
operator|=
operator|(
name|boolean
operator|)
name|left
operator|.
name|constant
operator|&&
operator|(
name|boolean
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|OR
condition|)
block|{
name|constant
operator|=
operator|(
name|boolean
operator|)
name|left
operator|.
name|constant
operator|||
operator|(
name|boolean
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|MethodWriter
name|adapter
parameter_list|)
block|{
if|if
condition|(
name|tru
operator|!=
literal|null
operator|||
name|fals
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|AND
condition|)
block|{
specifier|final
name|Label
name|localfals
init|=
name|fals
operator|==
literal|null
condition|?
operator|new
name|Label
argument_list|()
else|:
name|fals
decl_stmt|;
name|left
operator|.
name|fals
operator|=
name|localfals
expr_stmt|;
name|right
operator|.
name|tru
operator|=
name|tru
expr_stmt|;
name|right
operator|.
name|fals
operator|=
name|fals
expr_stmt|;
name|left
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|right
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
name|fals
operator|==
literal|null
condition|)
block|{
name|adapter
operator|.
name|mark
argument_list|(
name|localfals
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|OR
condition|)
block|{
specifier|final
name|Label
name|localtru
init|=
name|tru
operator|==
literal|null
condition|?
operator|new
name|Label
argument_list|()
else|:
name|tru
decl_stmt|;
name|left
operator|.
name|tru
operator|=
name|localtru
expr_stmt|;
name|right
operator|.
name|tru
operator|=
name|tru
expr_stmt|;
name|right
operator|.
name|fals
operator|=
name|fals
expr_stmt|;
name|left
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|right
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
name|tru
operator|==
literal|null
condition|)
block|{
name|adapter
operator|.
name|mark
argument_list|(
name|localtru
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|AND
condition|)
block|{
specifier|final
name|Label
name|localfals
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
specifier|final
name|Label
name|end
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|left
operator|.
name|fals
operator|=
name|localfals
expr_stmt|;
name|right
operator|.
name|fals
operator|=
name|localfals
expr_stmt|;
name|left
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|right
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|push
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|goTo
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|mark
argument_list|(
name|localfals
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|push
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|mark
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|OR
condition|)
block|{
specifier|final
name|Label
name|localtru
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
specifier|final
name|Label
name|localfals
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
specifier|final
name|Label
name|end
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|left
operator|.
name|tru
operator|=
name|localtru
expr_stmt|;
name|right
operator|.
name|fals
operator|=
name|localfals
expr_stmt|;
name|left
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|right
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|mark
argument_list|(
name|localtru
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|push
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|goTo
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|mark
argument_list|(
name|localfals
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|push
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|mark
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

