begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|CompilerSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|GeneratorAdapter
import|;
end_import

begin_comment
comment|/**  * Represents a catch block as part of a try-catch block.  */
end_comment

begin_class
DECL|class|STrap
specifier|public
specifier|final
class|class
name|STrap
extends|extends
name|AStatement
block|{
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|block
specifier|final
name|AStatement
name|block
decl_stmt|;
DECL|field|variable
name|Variable
name|variable
decl_stmt|;
DECL|field|begin
name|Label
name|begin
decl_stmt|;
DECL|field|end
name|Label
name|end
decl_stmt|;
DECL|field|exception
name|Label
name|exception
decl_stmt|;
DECL|method|STrap
specifier|public
name|STrap
parameter_list|(
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|AStatement
name|block
parameter_list|)
block|{
name|super
argument_list|(
name|line
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|void
name|analyze
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|variable
operator|=
name|variables
operator|.
name|addVariable
argument_list|(
name|location
argument_list|,
name|type
argument_list|,
name|name
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|variable
operator|.
name|type
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassCastException
name|cce
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Not an exception type ["
operator|+
name|variable
operator|.
name|type
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
block|{
name|block
operator|.
name|lastSource
operator|=
name|lastSource
expr_stmt|;
name|block
operator|.
name|inLoop
operator|=
name|inLoop
expr_stmt|;
name|block
operator|.
name|lastLoop
operator|=
name|lastLoop
expr_stmt|;
name|block
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|methodEscape
operator|=
name|block
operator|.
name|methodEscape
expr_stmt|;
name|loopEscape
operator|=
name|block
operator|.
name|loopEscape
expr_stmt|;
name|allEscape
operator|=
name|block
operator|.
name|allEscape
expr_stmt|;
name|anyContinue
operator|=
name|block
operator|.
name|anyContinue
expr_stmt|;
name|anyBreak
operator|=
name|block
operator|.
name|anyBreak
expr_stmt|;
name|statementCount
operator|=
name|block
operator|.
name|statementCount
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|GeneratorAdapter
name|adapter
parameter_list|)
block|{
specifier|final
name|Label
name|jump
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|mark
argument_list|(
name|jump
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|visitVarInsn
argument_list|(
name|variable
operator|.
name|type
operator|.
name|type
operator|.
name|getOpcode
argument_list|(
name|Opcodes
operator|.
name|ISTORE
argument_list|)
argument_list|,
name|variable
operator|.
name|slot
argument_list|)
expr_stmt|;
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
block|{
name|block
operator|.
name|continu
operator|=
name|continu
expr_stmt|;
name|block
operator|.
name|brake
operator|=
name|brake
expr_stmt|;
name|block
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
block|}
name|adapter
operator|.
name|visitTryCatchBlock
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|jump
argument_list|,
name|variable
operator|.
name|type
operator|.
name|type
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
operator|&&
operator|!
name|block
operator|.
name|allEscape
condition|)
block|{
name|adapter
operator|.
name|goTo
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

