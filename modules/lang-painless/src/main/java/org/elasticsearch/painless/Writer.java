begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
operator|.
name|Reserved
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|GeneratorAdapter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|BASE_CLASS_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|CLASS_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|CONSTRUCTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|EXECUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|MAP_GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|MAP_TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_comment
comment|/**  * Runs the writing phase of compilation using the Painless AST.  */
end_comment

begin_class
DECL|class|Writer
specifier|final
class|class
name|Writer
block|{
DECL|method|write
specifier|static
name|byte
index|[]
name|write
parameter_list|(
name|CompilerSettings
name|settings
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|source
parameter_list|,
name|Variables
name|variables
parameter_list|,
name|SSource
name|root
parameter_list|,
name|BitSet
name|expressions
parameter_list|)
block|{
return|return
operator|new
name|Writer
argument_list|(
name|settings
argument_list|,
name|name
argument_list|,
name|source
argument_list|,
name|variables
argument_list|,
name|root
argument_list|,
name|expressions
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
DECL|field|settings
specifier|private
specifier|final
name|CompilerSettings
name|settings
decl_stmt|;
DECL|field|scriptName
specifier|private
specifier|final
name|String
name|scriptName
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
DECL|field|variables
specifier|private
specifier|final
name|Variables
name|variables
decl_stmt|;
DECL|field|root
specifier|private
specifier|final
name|SSource
name|root
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|ClassWriter
name|writer
decl_stmt|;
DECL|field|adapter
specifier|private
specifier|final
name|MethodWriter
name|adapter
decl_stmt|;
DECL|method|Writer
specifier|private
name|Writer
parameter_list|(
name|CompilerSettings
name|settings
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|source
parameter_list|,
name|Variables
name|variables
parameter_list|,
name|SSource
name|root
parameter_list|,
name|BitSet
name|expressions
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|scriptName
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|variables
operator|=
name|variables
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|writer
operator|=
operator|new
name|ClassWriter
argument_list|(
name|ClassWriter
operator|.
name|COMPUTE_FRAMES
operator||
name|ClassWriter
operator|.
name|COMPUTE_MAXS
argument_list|)
expr_stmt|;
name|writeBegin
argument_list|()
expr_stmt|;
name|writeConstructor
argument_list|()
expr_stmt|;
name|adapter
operator|=
operator|new
name|MethodWriter
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
name|EXECUTE
argument_list|,
name|writer
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
name|writeExecute
argument_list|()
expr_stmt|;
name|writeEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|writeBegin
specifier|private
name|void
name|writeBegin
parameter_list|()
block|{
specifier|final
name|int
name|version
init|=
name|Opcodes
operator|.
name|V1_8
decl_stmt|;
specifier|final
name|int
name|access
init|=
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_SUPER
operator||
name|Opcodes
operator|.
name|ACC_FINAL
decl_stmt|;
specifier|final
name|String
name|base
init|=
name|BASE_CLASS_TYPE
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|CLASS_TYPE
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
comment|// apply marker interface NeedsScore if we use the score!
specifier|final
name|String
name|interfaces
index|[]
init|=
name|variables
operator|.
name|reserved
operator|.
name|score
condition|?
operator|new
name|String
index|[]
block|{
name|WriterConstants
operator|.
name|NEEDS_SCORE_TYPE
operator|.
name|getInternalName
argument_list|()
block|}
else|:
literal|null
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|version
argument_list|,
name|access
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|base
argument_list|,
name|interfaces
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visitSource
argument_list|(
name|Location
operator|.
name|computeSourceName
argument_list|(
name|scriptName
argument_list|,
name|source
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|writeConstructor
specifier|private
name|void
name|writeConstructor
parameter_list|()
block|{
specifier|final
name|GeneratorAdapter
name|constructor
init|=
operator|new
name|GeneratorAdapter
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
name|CONSTRUCTOR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|constructor
operator|.
name|loadThis
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|loadArgs
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|invokeConstructor
argument_list|(
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
operator|.
name|getType
argument_list|(
name|Executable
operator|.
name|class
argument_list|)
argument_list|,
name|CONSTRUCTOR
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|returnValue
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|endMethod
argument_list|()
expr_stmt|;
block|}
DECL|method|writeExecute
specifier|private
name|void
name|writeExecute
parameter_list|()
block|{
if|if
condition|(
name|variables
operator|.
name|reserved
operator|.
name|score
condition|)
block|{
comment|// if the _score value is used, we do this once:
comment|// final double _score = scorer.score();
specifier|final
name|Variable
name|scorer
init|=
name|variables
operator|.
name|getVariable
argument_list|(
literal|null
argument_list|,
name|Reserved
operator|.
name|SCORER
argument_list|)
decl_stmt|;
specifier|final
name|Variable
name|score
init|=
name|variables
operator|.
name|getVariable
argument_list|(
literal|null
argument_list|,
name|Reserved
operator|.
name|SCORE
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
name|scorer
operator|.
name|slot
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|invokeVirtual
argument_list|(
name|WriterConstants
operator|.
name|SCORER_TYPE
argument_list|,
name|WriterConstants
operator|.
name|SCORER_SCORE
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|F2D
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|DSTORE
argument_list|,
name|score
operator|.
name|slot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|variables
operator|.
name|reserved
operator|.
name|ctx
condition|)
block|{
comment|// if the _ctx value is used, we do this once:
comment|// final Map<String,Object> ctx = input.get("ctx");
specifier|final
name|Variable
name|input
init|=
name|variables
operator|.
name|getVariable
argument_list|(
literal|null
argument_list|,
name|Reserved
operator|.
name|PARAMS
argument_list|)
decl_stmt|;
specifier|final
name|Variable
name|ctx
init|=
name|variables
operator|.
name|getVariable
argument_list|(
literal|null
argument_list|,
name|Reserved
operator|.
name|CTX
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
name|input
operator|.
name|slot
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|push
argument_list|(
name|Reserved
operator|.
name|CTX
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|invokeInterface
argument_list|(
name|MAP_TYPE
argument_list|,
name|MAP_GET
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ASTORE
argument_list|,
name|ctx
operator|.
name|slot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|variables
operator|.
name|reserved
operator|.
name|loop
condition|)
block|{
comment|// if there is infinite loop protection, we do this once:
comment|// int #loop = settings.getMaxLoopCounter()
specifier|final
name|Variable
name|loop
init|=
name|variables
operator|.
name|getVariable
argument_list|(
literal|null
argument_list|,
name|Reserved
operator|.
name|LOOP
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|push
argument_list|(
name|settings
operator|.
name|getMaxLoopCounter
argument_list|()
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ISTORE
argument_list|,
name|loop
operator|.
name|slot
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|write
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|endMethod
argument_list|()
expr_stmt|;
block|}
DECL|method|writeEnd
specifier|private
name|void
name|writeEnd
parameter_list|()
block|{
name|writer
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getBytes
specifier|private
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|writer
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

