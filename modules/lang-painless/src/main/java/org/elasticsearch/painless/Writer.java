begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|ParseTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|AfterthoughtContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ArgumentsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|AssignmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BinaryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BoolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BreakContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|CastContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|CompContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ConditionalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ContinueContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DeclContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DeclarationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DecltypeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DeclvarContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DoContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|EmptyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|EmptyscopeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExprContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtbraceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtcallContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtcastContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtdotContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExternalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtfieldContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtnewContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtprecContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtstartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtstringContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtvarContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|FalseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ForContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|GenericContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|IdentifierContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|IfContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|IncrementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|InitializerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|MultipleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|NullContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|NumericContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|PostincContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|PrecedenceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|PreincContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ReturnContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|SingleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|SourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ThrowContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|TrapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|TrueContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|TryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|UnaryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|WhileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|GeneratorAdapter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|BASE_CLASS_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|CLASS_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|CONSTRUCTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|EXECUTE
import|;
end_import

begin_class
DECL|class|Writer
class|class
name|Writer
extends|extends
name|PainlessParserBaseVisitor
argument_list|<
name|Void
argument_list|>
block|{
DECL|method|write
specifier|static
name|byte
index|[]
name|write
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
specifier|final
name|Writer
name|writer
init|=
operator|new
name|Writer
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
return|return
name|writer
operator|.
name|getBytes
argument_list|()
return|;
block|}
DECL|field|metadata
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
DECL|field|root
specifier|private
specifier|final
name|ParseTree
name|root
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|CompilerSettings
name|settings
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|ClassWriter
name|writer
decl_stmt|;
DECL|field|execute
specifier|private
specifier|final
name|GeneratorAdapter
name|execute
decl_stmt|;
DECL|field|statement
specifier|private
specifier|final
name|WriterStatement
name|statement
decl_stmt|;
DECL|field|expression
specifier|private
specifier|final
name|WriterExpression
name|expression
decl_stmt|;
DECL|field|external
specifier|private
specifier|final
name|WriterExternal
name|external
decl_stmt|;
DECL|method|Writer
specifier|private
name|Writer
parameter_list|(
specifier|final
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|root
operator|=
name|metadata
operator|.
name|root
expr_stmt|;
name|source
operator|=
name|metadata
operator|.
name|source
expr_stmt|;
name|settings
operator|=
name|metadata
operator|.
name|settings
expr_stmt|;
name|writer
operator|=
operator|new
name|ClassWriter
argument_list|(
name|ClassWriter
operator|.
name|COMPUTE_FRAMES
operator||
name|ClassWriter
operator|.
name|COMPUTE_MAXS
argument_list|)
expr_stmt|;
name|writeBegin
argument_list|()
expr_stmt|;
name|writeConstructor
argument_list|()
expr_stmt|;
name|execute
operator|=
operator|new
name|GeneratorAdapter
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
name|EXECUTE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
specifier|final
name|WriterUtility
name|utility
init|=
operator|new
name|WriterUtility
argument_list|(
name|metadata
argument_list|,
name|execute
argument_list|)
decl_stmt|;
specifier|final
name|WriterCaster
name|caster
init|=
operator|new
name|WriterCaster
argument_list|(
name|execute
argument_list|)
decl_stmt|;
name|statement
operator|=
operator|new
name|WriterStatement
argument_list|(
name|metadata
argument_list|,
name|execute
argument_list|,
name|this
argument_list|,
name|utility
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|WriterExpression
argument_list|(
name|metadata
argument_list|,
name|execute
argument_list|,
name|this
argument_list|,
name|utility
argument_list|,
name|caster
argument_list|)
expr_stmt|;
name|external
operator|=
operator|new
name|WriterExternal
argument_list|(
name|metadata
argument_list|,
name|execute
argument_list|,
name|this
argument_list|,
name|utility
argument_list|,
name|caster
argument_list|)
expr_stmt|;
name|writeExecute
argument_list|()
expr_stmt|;
name|writeEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|writeBegin
specifier|private
name|void
name|writeBegin
parameter_list|()
block|{
specifier|final
name|int
name|version
init|=
name|Opcodes
operator|.
name|V1_7
decl_stmt|;
specifier|final
name|int
name|access
init|=
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_SUPER
operator||
name|Opcodes
operator|.
name|ACC_FINAL
decl_stmt|;
specifier|final
name|String
name|base
init|=
name|BASE_CLASS_TYPE
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|CLASS_TYPE
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
comment|// apply marker interface NeedsScore if we use the score!
specifier|final
name|String
name|interfaces
index|[]
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|scoreValueUsed
condition|)
block|{
name|interfaces
operator|=
operator|new
name|String
index|[]
block|{
name|WriterConstants
operator|.
name|NEEDS_SCORE_TYPE
operator|.
name|getInternalName
argument_list|()
block|}
expr_stmt|;
block|}
else|else
block|{
name|interfaces
operator|=
literal|null
expr_stmt|;
block|}
name|writer
operator|.
name|visit
argument_list|(
name|version
argument_list|,
name|access
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|base
argument_list|,
name|interfaces
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visitSource
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|writeConstructor
specifier|private
name|void
name|writeConstructor
parameter_list|()
block|{
specifier|final
name|GeneratorAdapter
name|constructor
init|=
operator|new
name|GeneratorAdapter
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
name|CONSTRUCTOR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|constructor
operator|.
name|loadThis
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|loadArgs
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|invokeConstructor
argument_list|(
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
operator|.
name|getType
argument_list|(
name|Executable
operator|.
name|class
argument_list|)
argument_list|,
name|CONSTRUCTOR
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|returnValue
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|endMethod
argument_list|()
expr_stmt|;
block|}
DECL|method|writeExecute
specifier|private
name|void
name|writeExecute
parameter_list|()
block|{
if|if
condition|(
name|metadata
operator|.
name|scoreValueUsed
condition|)
block|{
comment|// if the _score value is used, we do this once:
comment|//   float _score = scorer.score();
name|execute
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
name|metadata
operator|.
name|scorerValueSlot
argument_list|)
expr_stmt|;
name|execute
operator|.
name|invokeVirtual
argument_list|(
name|WriterConstants
operator|.
name|SCORER_TYPE
argument_list|,
name|WriterConstants
operator|.
name|SCORER_SCORE
argument_list|)
expr_stmt|;
name|execute
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|FSTORE
argument_list|,
name|metadata
operator|.
name|scoreValueSlot
argument_list|)
expr_stmt|;
block|}
name|execute
operator|.
name|push
argument_list|(
name|settings
operator|.
name|getMaxLoopCounter
argument_list|()
argument_list|)
expr_stmt|;
name|execute
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ISTORE
argument_list|,
name|metadata
operator|.
name|loopCounterSlot
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|execute
operator|.
name|endMethod
argument_list|()
expr_stmt|;
block|}
DECL|method|writeEnd
specifier|private
name|void
name|writeEnd
parameter_list|()
block|{
name|writer
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getBytes
specifier|private
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|writer
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|visitSource
specifier|public
name|Void
name|visitSource
parameter_list|(
specifier|final
name|SourceContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processSource
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitIf
specifier|public
name|Void
name|visitIf
parameter_list|(
specifier|final
name|IfContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processIf
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitWhile
specifier|public
name|Void
name|visitWhile
parameter_list|(
specifier|final
name|WhileContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processWhile
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitDo
specifier|public
name|Void
name|visitDo
parameter_list|(
specifier|final
name|DoContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processDo
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitFor
specifier|public
name|Void
name|visitFor
parameter_list|(
specifier|final
name|ForContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processFor
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitDecl
specifier|public
name|Void
name|visitDecl
parameter_list|(
specifier|final
name|DeclContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processDecl
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitContinue
specifier|public
name|Void
name|visitContinue
parameter_list|(
specifier|final
name|ContinueContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processContinue
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitBreak
specifier|public
name|Void
name|visitBreak
parameter_list|(
specifier|final
name|BreakContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processBreak
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitReturn
specifier|public
name|Void
name|visitReturn
parameter_list|(
specifier|final
name|ReturnContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processReturn
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitTry
specifier|public
name|Void
name|visitTry
parameter_list|(
specifier|final
name|TryContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processTry
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitThrow
specifier|public
name|Void
name|visitThrow
parameter_list|(
specifier|final
name|ThrowContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processThrow
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExpr
specifier|public
name|Void
name|visitExpr
parameter_list|(
specifier|final
name|ExprContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processExpr
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitMultiple
specifier|public
name|Void
name|visitMultiple
parameter_list|(
specifier|final
name|MultipleContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processMultiple
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitSingle
specifier|public
name|Void
name|visitSingle
parameter_list|(
specifier|final
name|SingleContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processSingle
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitEmpty
specifier|public
name|Void
name|visitEmpty
parameter_list|(
specifier|final
name|EmptyContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitEmptyscope
specifier|public
name|Void
name|visitEmptyscope
parameter_list|(
specifier|final
name|EmptyscopeContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitInitializer
specifier|public
name|Void
name|visitInitializer
parameter_list|(
specifier|final
name|InitializerContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processInitializer
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitAfterthought
specifier|public
name|Void
name|visitAfterthought
parameter_list|(
specifier|final
name|AfterthoughtContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processAfterthought
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitDeclaration
specifier|public
name|Void
name|visitDeclaration
parameter_list|(
name|DeclarationContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processDeclaration
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitDecltype
specifier|public
name|Void
name|visitDecltype
parameter_list|(
specifier|final
name|DecltypeContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitDeclvar
specifier|public
name|Void
name|visitDeclvar
parameter_list|(
specifier|final
name|DeclvarContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processDeclvar
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitTrap
specifier|public
name|Void
name|visitTrap
parameter_list|(
specifier|final
name|TrapContext
name|ctx
parameter_list|)
block|{
name|statement
operator|.
name|processTrap
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitIdentifier
specifier|public
name|Void
name|visitIdentifier
parameter_list|(
name|IdentifierContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitGeneric
specifier|public
name|Void
name|visitGeneric
parameter_list|(
name|GenericContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitPrecedence
specifier|public
name|Void
name|visitPrecedence
parameter_list|(
specifier|final
name|PrecedenceContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitNumeric
specifier|public
name|Void
name|visitNumeric
parameter_list|(
specifier|final
name|NumericContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processNumeric
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitTrue
specifier|public
name|Void
name|visitTrue
parameter_list|(
specifier|final
name|TrueContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processTrue
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitFalse
specifier|public
name|Void
name|visitFalse
parameter_list|(
specifier|final
name|FalseContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processFalse
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitNull
specifier|public
name|Void
name|visitNull
parameter_list|(
specifier|final
name|NullContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processNull
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExternal
specifier|public
name|Void
name|visitExternal
parameter_list|(
specifier|final
name|ExternalContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitPostinc
specifier|public
name|Void
name|visitPostinc
parameter_list|(
specifier|final
name|PostincContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processPostinc
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitPreinc
specifier|public
name|Void
name|visitPreinc
parameter_list|(
specifier|final
name|PreincContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processPreinc
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitUnary
specifier|public
name|Void
name|visitUnary
parameter_list|(
specifier|final
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processUnary
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitCast
specifier|public
name|Void
name|visitCast
parameter_list|(
specifier|final
name|CastContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processCast
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitBinary
specifier|public
name|Void
name|visitBinary
parameter_list|(
specifier|final
name|BinaryContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processBinary
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitComp
specifier|public
name|Void
name|visitComp
parameter_list|(
specifier|final
name|CompContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processComp
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitBool
specifier|public
name|Void
name|visitBool
parameter_list|(
specifier|final
name|BoolContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processBool
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitConditional
specifier|public
name|Void
name|visitConditional
parameter_list|(
specifier|final
name|ConditionalContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processConditional
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitAssignment
specifier|public
name|Void
name|visitAssignment
parameter_list|(
specifier|final
name|AssignmentContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processAssignment
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtstart
specifier|public
name|Void
name|visitExtstart
parameter_list|(
specifier|final
name|ExtstartContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtstart
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtprec
specifier|public
name|Void
name|visitExtprec
parameter_list|(
specifier|final
name|ExtprecContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtprec
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtcast
specifier|public
name|Void
name|visitExtcast
parameter_list|(
specifier|final
name|ExtcastContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtcast
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtbrace
specifier|public
name|Void
name|visitExtbrace
parameter_list|(
specifier|final
name|ExtbraceContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtbrace
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtdot
specifier|public
name|Void
name|visitExtdot
parameter_list|(
specifier|final
name|ExtdotContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtdot
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtcall
specifier|public
name|Void
name|visitExtcall
parameter_list|(
specifier|final
name|ExtcallContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtcall
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtvar
specifier|public
name|Void
name|visitExtvar
parameter_list|(
specifier|final
name|ExtvarContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtvar
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtfield
specifier|public
name|Void
name|visitExtfield
parameter_list|(
specifier|final
name|ExtfieldContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtfield
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtnew
specifier|public
name|Void
name|visitExtnew
parameter_list|(
specifier|final
name|ExtnewContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtnew
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtstring
specifier|public
name|Void
name|visitExtstring
parameter_list|(
specifier|final
name|ExtstringContext
name|ctx
parameter_list|)
block|{
name|external
operator|.
name|processExtstring
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitArguments
specifier|public
name|Void
name|visitArguments
parameter_list|(
specifier|final
name|ArgumentsContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitIncrement
specifier|public
name|Void
name|visitIncrement
parameter_list|(
specifier|final
name|IncrementContext
name|ctx
parameter_list|)
block|{
name|expression
operator|.
name|processIncrement
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

