begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Program-wide globals (initializers, synthetic methods, etc)  */
end_comment

begin_class
DECL|class|Globals
specifier|public
class|class
name|Globals
block|{
DECL|field|syntheticMethods
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SFunction
argument_list|>
name|syntheticMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|constantInitializers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Constant
argument_list|>
name|constantInitializers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|statements
specifier|private
specifier|final
name|BitSet
name|statements
decl_stmt|;
comment|/** Create a new Globals from the set of statement boundaries */
DECL|method|Globals
specifier|public
name|Globals
parameter_list|(
name|BitSet
name|statements
parameter_list|)
block|{
name|this
operator|.
name|statements
operator|=
name|statements
expr_stmt|;
block|}
comment|/** Adds a new synthetic method to be written. It must be analyzed! */
DECL|method|addSyntheticMethod
specifier|public
name|void
name|addSyntheticMethod
parameter_list|(
name|SFunction
name|function
parameter_list|)
block|{
if|if
condition|(
operator|!
name|function
operator|.
name|synthetic
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"method: "
operator|+
name|function
operator|.
name|name
operator|+
literal|" is not synthetic"
argument_list|)
throw|;
block|}
if|if
condition|(
name|syntheticMethods
operator|.
name|put
argument_list|(
name|function
operator|.
name|name
argument_list|,
name|function
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"synthetic method: "
operator|+
name|function
operator|.
name|name
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
block|}
comment|/** Adds a new constant initializer to be written */
DECL|method|addConstantInitializer
specifier|public
name|void
name|addConstantInitializer
parameter_list|(
name|Constant
name|constant
parameter_list|)
block|{
if|if
condition|(
name|constantInitializers
operator|.
name|put
argument_list|(
name|constant
operator|.
name|name
argument_list|,
name|constant
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"constant initializer: "
operator|+
name|constant
operator|.
name|name
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
block|}
comment|/** Returns the current synthetic methods */
DECL|method|getSyntheticMethods
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SFunction
argument_list|>
name|getSyntheticMethods
parameter_list|()
block|{
return|return
name|syntheticMethods
return|;
block|}
comment|/** Returns the current initializers */
DECL|method|getConstantInitializers
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Constant
argument_list|>
name|getConstantInitializers
parameter_list|()
block|{
return|return
name|constantInitializers
return|;
block|}
comment|/** Returns the set of statement boundaries */
DECL|method|getStatements
specifier|public
name|BitSet
name|getStatements
parameter_list|()
block|{
return|return
name|statements
return|;
block|}
block|}
end_class

end_unit

