begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// ANTLR GENERATED CODE: DO NOT EDIT
end_comment

begin_package
DECL|package|org.elasticsearch.painless.antlr
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|ParseTreeVisitor
import|;
end_import

begin_comment
comment|/**  * This interface defines a complete generic visitor for a parse tree produced  * by {@link PainlessParser}.  *  * @param<T> The return type of the visit operation. Use {@link Void} for  * operations with no return type.  */
end_comment

begin_interface
DECL|interface|PainlessParserVisitor
interface|interface
name|PainlessParserVisitor
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ParseTreeVisitor
argument_list|<
name|T
argument_list|>
block|{
comment|/**    * Visit a parse tree produced by {@link PainlessParser#source}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitSource
name|T
name|visitSource
parameter_list|(
name|PainlessParser
operator|.
name|SourceContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#function}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitFunction
name|T
name|visitFunction
parameter_list|(
name|PainlessParser
operator|.
name|FunctionContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#parameters}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitParameters
name|T
name|visitParameters
parameter_list|(
name|PainlessParser
operator|.
name|ParametersContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code if}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitIf
name|T
name|visitIf
parameter_list|(
name|PainlessParser
operator|.
name|IfContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code while}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitWhile
name|T
name|visitWhile
parameter_list|(
name|PainlessParser
operator|.
name|WhileContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code do}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDo
name|T
name|visitDo
parameter_list|(
name|PainlessParser
operator|.
name|DoContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code for}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitFor
name|T
name|visitFor
parameter_list|(
name|PainlessParser
operator|.
name|ForContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code each}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitEach
name|T
name|visitEach
parameter_list|(
name|PainlessParser
operator|.
name|EachContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code decl}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDecl
name|T
name|visitDecl
parameter_list|(
name|PainlessParser
operator|.
name|DeclContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code continue}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitContinue
name|T
name|visitContinue
parameter_list|(
name|PainlessParser
operator|.
name|ContinueContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code break}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitBreak
name|T
name|visitBreak
parameter_list|(
name|PainlessParser
operator|.
name|BreakContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code return}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitReturn
name|T
name|visitReturn
parameter_list|(
name|PainlessParser
operator|.
name|ReturnContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code try}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitTry
name|T
name|visitTry
parameter_list|(
name|PainlessParser
operator|.
name|TryContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code throw}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitThrow
name|T
name|visitThrow
parameter_list|(
name|PainlessParser
operator|.
name|ThrowContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code expr}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExpr
name|T
name|visitExpr
parameter_list|(
name|PainlessParser
operator|.
name|ExprContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#trailer}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitTrailer
name|T
name|visitTrailer
parameter_list|(
name|PainlessParser
operator|.
name|TrailerContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#block}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitBlock
name|T
name|visitBlock
parameter_list|(
name|PainlessParser
operator|.
name|BlockContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#empty}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitEmpty
name|T
name|visitEmpty
parameter_list|(
name|PainlessParser
operator|.
name|EmptyContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#initializer}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitInitializer
name|T
name|visitInitializer
parameter_list|(
name|PainlessParser
operator|.
name|InitializerContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#afterthought}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitAfterthought
name|T
name|visitAfterthought
parameter_list|(
name|PainlessParser
operator|.
name|AfterthoughtContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#declaration}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDeclaration
name|T
name|visitDeclaration
parameter_list|(
name|PainlessParser
operator|.
name|DeclarationContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#decltype}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDecltype
name|T
name|visitDecltype
parameter_list|(
name|PainlessParser
operator|.
name|DecltypeContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#declvar}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDeclvar
name|T
name|visitDeclvar
parameter_list|(
name|PainlessParser
operator|.
name|DeclvarContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#trap}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitTrap
name|T
name|visitTrap
parameter_list|(
name|PainlessParser
operator|.
name|TrapContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#delimiter}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDelimiter
name|T
name|visitDelimiter
parameter_list|(
name|PainlessParser
operator|.
name|DelimiterContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code single}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitSingle
name|T
name|visitSingle
parameter_list|(
name|PainlessParser
operator|.
name|SingleContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code comp}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitComp
name|T
name|visitComp
parameter_list|(
name|PainlessParser
operator|.
name|CompContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code bool}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitBool
name|T
name|visitBool
parameter_list|(
name|PainlessParser
operator|.
name|BoolContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code conditional}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitConditional
name|T
name|visitConditional
parameter_list|(
name|PainlessParser
operator|.
name|ConditionalContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code assignment}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitAssignment
name|T
name|visitAssignment
parameter_list|(
name|PainlessParser
operator|.
name|AssignmentContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code binary}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitBinary
name|T
name|visitBinary
parameter_list|(
name|PainlessParser
operator|.
name|BinaryContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code pre}    * labeled alternative in {@link PainlessParser#unary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitPre
name|T
name|visitPre
parameter_list|(
name|PainlessParser
operator|.
name|PreContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code post}    * labeled alternative in {@link PainlessParser#unary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitPost
name|T
name|visitPost
parameter_list|(
name|PainlessParser
operator|.
name|PostContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code read}    * labeled alternative in {@link PainlessParser#unary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitRead
name|T
name|visitRead
parameter_list|(
name|PainlessParser
operator|.
name|ReadContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code numeric}    * labeled alternative in {@link PainlessParser#unary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitNumeric
name|T
name|visitNumeric
parameter_list|(
name|PainlessParser
operator|.
name|NumericContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code true}    * labeled alternative in {@link PainlessParser#unary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitTrue
name|T
name|visitTrue
parameter_list|(
name|PainlessParser
operator|.
name|TrueContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code false}    * labeled alternative in {@link PainlessParser#unary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitFalse
name|T
name|visitFalse
parameter_list|(
name|PainlessParser
operator|.
name|FalseContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code null}    * labeled alternative in {@link PainlessParser#unary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitNull
name|T
name|visitNull
parameter_list|(
name|PainlessParser
operator|.
name|NullContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code operator}    * labeled alternative in {@link PainlessParser#unary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitOperator
name|T
name|visitOperator
parameter_list|(
name|PainlessParser
operator|.
name|OperatorContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code cast}    * labeled alternative in {@link PainlessParser#unary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitCast
name|T
name|visitCast
parameter_list|(
name|PainlessParser
operator|.
name|CastContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code dynamic}    * labeled alternative in {@link PainlessParser#chain}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDynamic
name|T
name|visitDynamic
parameter_list|(
name|PainlessParser
operator|.
name|DynamicContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code static}    * labeled alternative in {@link PainlessParser#chain}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitStatic
name|T
name|visitStatic
parameter_list|(
name|PainlessParser
operator|.
name|StaticContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code newarray}    * labeled alternative in {@link PainlessParser#chain}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitNewarray
name|T
name|visitNewarray
parameter_list|(
name|PainlessParser
operator|.
name|NewarrayContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code exprprec}    * labeled alternative in {@link PainlessParser#primary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExprprec
name|T
name|visitExprprec
parameter_list|(
name|PainlessParser
operator|.
name|ExprprecContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code chainprec}    * labeled alternative in {@link PainlessParser#primary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitChainprec
name|T
name|visitChainprec
parameter_list|(
name|PainlessParser
operator|.
name|ChainprecContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code string}    * labeled alternative in {@link PainlessParser#primary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitString
name|T
name|visitString
parameter_list|(
name|PainlessParser
operator|.
name|StringContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code regex}    * labeled alternative in {@link PainlessParser#primary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitRegex
name|T
name|visitRegex
parameter_list|(
name|PainlessParser
operator|.
name|RegexContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code variable}    * labeled alternative in {@link PainlessParser#primary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitVariable
name|T
name|visitVariable
parameter_list|(
name|PainlessParser
operator|.
name|VariableContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code calllocal}    * labeled alternative in {@link PainlessParser#primary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitCalllocal
name|T
name|visitCalllocal
parameter_list|(
name|PainlessParser
operator|.
name|CalllocalContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code newobject}    * labeled alternative in {@link PainlessParser#primary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitNewobject
name|T
name|visitNewobject
parameter_list|(
name|PainlessParser
operator|.
name|NewobjectContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#secondary}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitSecondary
name|T
name|visitSecondary
parameter_list|(
name|PainlessParser
operator|.
name|SecondaryContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code callinvoke}    * labeled alternative in {@link PainlessParser#dot}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitCallinvoke
name|T
name|visitCallinvoke
parameter_list|(
name|PainlessParser
operator|.
name|CallinvokeContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code fieldaccess}    * labeled alternative in {@link PainlessParser#dot}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitFieldaccess
name|T
name|visitFieldaccess
parameter_list|(
name|PainlessParser
operator|.
name|FieldaccessContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code braceaccess}    * labeled alternative in {@link PainlessParser#brace}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitBraceaccess
name|T
name|visitBraceaccess
parameter_list|(
name|PainlessParser
operator|.
name|BraceaccessContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#arguments}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitArguments
name|T
name|visitArguments
parameter_list|(
name|PainlessParser
operator|.
name|ArgumentsContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#argument}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitArgument
name|T
name|visitArgument
parameter_list|(
name|PainlessParser
operator|.
name|ArgumentContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#lambda}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitLambda
name|T
name|visitLambda
parameter_list|(
name|PainlessParser
operator|.
name|LambdaContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#lamtype}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitLamtype
name|T
name|visitLamtype
parameter_list|(
name|PainlessParser
operator|.
name|LamtypeContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#funcref}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitFuncref
name|T
name|visitFuncref
parameter_list|(
name|PainlessParser
operator|.
name|FuncrefContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#classFuncref}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitClassFuncref
name|T
name|visitClassFuncref
parameter_list|(
name|PainlessParser
operator|.
name|ClassFuncrefContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#constructorFuncref}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitConstructorFuncref
name|T
name|visitConstructorFuncref
parameter_list|(
name|PainlessParser
operator|.
name|ConstructorFuncrefContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#capturingFuncref}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitCapturingFuncref
name|T
name|visitCapturingFuncref
parameter_list|(
name|PainlessParser
operator|.
name|CapturingFuncrefContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#localFuncref}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitLocalFuncref
name|T
name|visitLocalFuncref
parameter_list|(
name|PainlessParser
operator|.
name|LocalFuncrefContext
name|ctx
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

