begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Represents a location in script code (name of script + character offset)  */
end_comment

begin_class
DECL|class|Location
specifier|public
specifier|final
class|class
name|Location
block|{
DECL|field|sourceName
specifier|private
specifier|final
name|String
name|sourceName
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
comment|/**      * Create a new Location       * @param sourceName script's name      * @param offset character offset of script element      */
DECL|method|Location
specifier|public
name|Location
parameter_list|(
name|String
name|sourceName
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|sourceName
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|sourceName
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
comment|/**      * Return the script's name      */
DECL|method|getSourceName
specifier|public
name|String
name|getSourceName
parameter_list|()
block|{
return|return
name|sourceName
return|;
block|}
comment|/**      * Return the character offset      */
DECL|method|getOffset
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**      * Augments an exception with this location's information.      */
DECL|method|createError
specifier|public
name|RuntimeException
name|createError
parameter_list|(
name|RuntimeException
name|exception
parameter_list|)
block|{
name|StackTraceElement
name|element
init|=
operator|new
name|StackTraceElement
argument_list|(
name|WriterConstants
operator|.
name|CLASS_NAME
argument_list|,
literal|"compile"
argument_list|,
name|sourceName
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
decl_stmt|;
name|StackTraceElement
index|[]
name|oldStack
init|=
name|exception
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|StackTraceElement
index|[]
name|newStack
init|=
operator|new
name|StackTraceElement
index|[
name|oldStack
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldStack
argument_list|,
literal|0
argument_list|,
name|newStack
argument_list|,
literal|1
argument_list|,
name|oldStack
operator|.
name|length
argument_list|)
expr_stmt|;
name|newStack
index|[
literal|0
index|]
operator|=
name|element
expr_stmt|;
name|exception
operator|.
name|setStackTrace
argument_list|(
name|newStack
argument_list|)
expr_stmt|;
assert|assert
name|exception
operator|.
name|getStackTrace
argument_list|()
operator|.
name|length
operator|==
name|newStack
operator|.
name|length
operator|:
literal|"non-writeable stacktrace for exception: "
operator|+
name|exception
operator|.
name|getClass
argument_list|()
assert|;
return|return
name|exception
return|;
block|}
comment|// This maximum length is theoretically 65535 bytes, but as it's CESU-8 encoded we don't know how large it is in bytes, so be safe
DECL|field|MAX_NAME_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NAME_LENGTH
init|=
literal|256
decl_stmt|;
comment|/** Computes the file name (mostly important for stacktraces) */
DECL|method|computeSourceName
specifier|public
specifier|static
name|String
name|computeSourceName
parameter_list|(
name|String
name|scriptName
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|StringBuilder
name|fileName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|scriptName
operator|.
name|equals
argument_list|(
name|PainlessScriptEngine
operator|.
name|INLINE_NAME
argument_list|)
condition|)
block|{
comment|// its an anonymous script, include at least a portion of the source to help identify which one it is
comment|// but don't create stacktraces with filenames that contain newlines or huge names.
comment|// truncate to the first newline
name|int
name|limit
init|=
name|source
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|0
condition|)
block|{
name|int
name|limit2
init|=
name|source
operator|.
name|indexOf
argument_list|(
literal|'\r'
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit2
operator|>=
literal|0
condition|)
block|{
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|limit
argument_list|,
name|limit2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|limit
operator|=
name|source
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
comment|// truncate to our limit
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|limit
argument_list|,
name|MAX_NAME_LENGTH
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|limit
argument_list|)
expr_stmt|;
comment|// if we truncated, make it obvious
if|if
condition|(
name|limit
operator|!=
name|source
operator|.
name|length
argument_list|()
condition|)
block|{
name|fileName
operator|.
name|append
argument_list|(
literal|" ..."
argument_list|)
expr_stmt|;
block|}
name|fileName
operator|.
name|append
argument_list|(
literal|" @<inline script>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// its a named script, just use the name
comment|// but don't trust this has a reasonable length!
if|if
condition|(
name|scriptName
operator|.
name|length
argument_list|()
operator|>
name|MAX_NAME_LENGTH
condition|)
block|{
name|fileName
operator|.
name|append
argument_list|(
name|scriptName
argument_list|,
literal|0
argument_list|,
name|MAX_NAME_LENGTH
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|append
argument_list|(
literal|" ..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileName
operator|.
name|append
argument_list|(
name|scriptName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fileName
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

