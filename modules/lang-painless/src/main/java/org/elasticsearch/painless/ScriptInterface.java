begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|USES_PARAMETER_METHOD_TYPE
import|;
end_import

begin_comment
comment|/**  * Information about the interface being implemented by the painless script.  */
end_comment

begin_class
DECL|class|ScriptInterface
specifier|public
class|class
name|ScriptInterface
block|{
DECL|field|iface
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|iface
decl_stmt|;
DECL|field|executeMethod
specifier|private
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|executeMethod
decl_stmt|;
DECL|field|arguments
specifier|private
specifier|final
name|List
argument_list|<
name|MethodArgument
argument_list|>
name|arguments
decl_stmt|;
DECL|field|usesMethods
specifier|private
specifier|final
name|List
argument_list|<
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|>
name|usesMethods
decl_stmt|;
DECL|method|ScriptInterface
specifier|public
name|ScriptInterface
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
block|{
name|this
operator|.
name|iface
operator|=
name|iface
expr_stmt|;
comment|// Find the main method and the uses$argName methods
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|executeMethod
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|>
name|usesMethods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|m
range|:
name|iface
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isDefault
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"execute"
argument_list|)
condition|)
block|{
if|if
condition|(
name|executeMethod
operator|==
literal|null
condition|)
block|{
name|executeMethod
operator|=
name|m
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Painless can only implement interfaces that have a single method named [execute] but ["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"] has more than one."
argument_list|)
throw|;
block|}
continue|continue;
block|}
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"uses$"
argument_list|)
condition|)
block|{
if|if
condition|(
literal|false
operator|==
name|m
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Painless can only implement uses$ methods that return boolean but ["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|"] returns ["
operator|+
name|m
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Painless can only implement uses$ methods that do not take parameters but ["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|"] does."
argument_list|)
throw|;
block|}
name|usesMethods
operator|.
name|add
argument_list|(
operator|new
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|USES_PARAMETER_METHOD_TYPE
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Painless can only implement methods named [execute] and [uses$argName] but ["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"] contains a method named ["
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|MethodType
name|methodType
init|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|executeMethod
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|executeMethod
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|executeMethod
operator|=
operator|new
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|(
name|executeMethod
operator|.
name|getName
argument_list|()
argument_list|,
name|methodType
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Look up the argument names
name|Set
argument_list|<
name|String
argument_list|>
name|argumentNames
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MethodArgument
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|argumentNamesConstant
init|=
name|readArgumentNamesConstant
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
init|=
name|executeMethod
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|argumentNamesConstant
operator|.
name|length
operator|!=
name|types
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"#ARGUMENTS] has length [2] but ["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"#execute] takes [1] argument."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|arg
init|=
literal|0
init|;
name|arg
operator|<
name|types
operator|.
name|length
condition|;
name|arg
operator|++
control|)
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|new
name|MethodArgument
argument_list|(
name|argType
argument_list|(
name|argumentNamesConstant
index|[
name|arg
index|]
argument_list|,
name|types
index|[
name|arg
index|]
argument_list|)
argument_list|,
name|argumentNamesConstant
index|[
name|arg
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|argumentNames
operator|.
name|add
argument_list|(
name|argumentNamesConstant
index|[
name|arg
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|arguments
operator|=
name|unmodifiableList
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
comment|// Validate that the uses$argName methods reference argument names
for|for
control|(
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|usesMethod
range|:
name|usesMethods
control|)
block|{
if|if
condition|(
literal|false
operator|==
name|argumentNames
operator|.
name|contains
argument_list|(
name|usesMethod
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"uses$"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Painless can only implement uses$ methods that match a parameter name but ["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|usesMethod
operator|.
name|getName
argument_list|()
operator|+
literal|"] doesn't match any of "
operator|+
name|argumentNames
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|usesMethods
operator|=
name|unmodifiableList
argument_list|(
name|usesMethods
argument_list|)
expr_stmt|;
block|}
DECL|method|getInterface
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getInterface
parameter_list|()
block|{
return|return
name|iface
return|;
block|}
DECL|method|getExecuteMethod
specifier|public
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|getExecuteMethod
parameter_list|()
block|{
return|return
name|executeMethod
return|;
block|}
DECL|method|getArguments
specifier|public
name|List
argument_list|<
name|MethodArgument
argument_list|>
name|getArguments
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
DECL|method|getUsesMethods
specifier|public
name|List
argument_list|<
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|>
name|getUsesMethods
parameter_list|()
block|{
return|return
name|usesMethods
return|;
block|}
DECL|class|MethodArgument
specifier|public
specifier|static
class|class
name|MethodArgument
block|{
DECL|field|type
specifier|private
specifier|final
name|Definition
operator|.
name|Type
name|type
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|MethodArgument
specifier|public
name|MethodArgument
parameter_list|(
name|Definition
operator|.
name|Type
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getType
specifier|public
name|Definition
operator|.
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|method|argType
specifier|private
specifier|static
name|Definition
operator|.
name|Type
name|argType
parameter_list|(
name|String
name|argName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|int
name|dimensions
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|dimensions
operator|++
expr_stmt|;
name|type
operator|=
name|type
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|Definition
operator|.
name|Struct
name|struct
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
name|struct
operator|=
name|Definition
operator|.
name|DEF_TYPE
operator|.
name|struct
expr_stmt|;
block|}
else|else
block|{
name|Definition
operator|.
name|RuntimeClass
name|runtimeClass
init|=
name|Definition
operator|.
name|getRuntimeClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|runtimeClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|argName
operator|+
literal|"] is of unknown type ["
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|". Painless interfaces can only accept arguments that are of whitelisted types."
argument_list|)
throw|;
block|}
name|struct
operator|=
name|runtimeClass
operator|.
name|getStruct
argument_list|()
expr_stmt|;
block|}
return|return
name|Definition
operator|.
name|getType
argument_list|(
name|struct
argument_list|,
name|dimensions
argument_list|)
return|;
block|}
DECL|method|readArgumentNamesConstant
specifier|private
specifier|static
name|String
index|[]
name|readArgumentNamesConstant
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
block|{
name|Field
name|argumentNamesField
decl_stmt|;
try|try
block|{
name|argumentNamesField
operator|=
name|iface
operator|.
name|getField
argument_list|(
literal|"ARGUMENTS"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Painless needs a constant [String[] ARGUMENTS] on all interfaces it implements with the "
operator|+
literal|"names of the method arguments but ["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"] doesn't have one."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
literal|false
operator|==
name|argumentNamesField
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Painless needs a constant [String[] ARGUMENTS] on all interfaces it implements with the "
operator|+
literal|"names of the method arguments but ["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"] doesn't have one."
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|argumentNamesField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error trying to read ["
operator|+
name|iface
operator|.
name|getName
argument_list|()
operator|+
literal|"#ARGUMENTS]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

