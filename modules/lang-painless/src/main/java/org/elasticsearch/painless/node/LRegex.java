begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Locals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Locals
operator|.
name|Constant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
import|;
end_import

begin_comment
comment|/**  * Represents a regex constant. All regexes are constants.  */
end_comment

begin_class
DECL|class|LRegex
specifier|public
specifier|final
class|class
name|LRegex
extends|extends
name|ALink
block|{
DECL|field|pattern
specifier|private
specifier|final
name|String
name|pattern
decl_stmt|;
DECL|field|flags
specifier|private
specifier|final
name|int
name|flags
decl_stmt|;
DECL|field|constant
specifier|private
name|Constant
name|constant
decl_stmt|;
DECL|method|LRegex
specifier|public
name|LRegex
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|flagsString
parameter_list|)
block|{
name|super
argument_list|(
name|location
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|int
name|flags
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|flagsString
operator|.
name|length
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|flags
operator||=
name|flagForChar
argument_list|(
name|flagsString
operator|.
name|charAt
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
try|try
block|{
comment|// Compile the pattern early after parsing so we can throw an error to the user with the location
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|createError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|analyze
name|ALink
name|analyze
parameter_list|(
name|Locals
name|locals
parameter_list|)
block|{
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal Regex constant ["
operator|+
name|pattern
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|store
condition|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot write to Regex constant ["
operator|+
name|pattern
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|load
condition|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Regex constant may only be read ["
operator|+
name|pattern
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|constant
operator|=
name|locals
operator|.
name|addConstant
argument_list|(
name|location
argument_list|,
name|Definition
operator|.
name|PATTERN_TYPE
argument_list|,
literal|"regexAt$"
operator|+
name|location
operator|.
name|getOffset
argument_list|()
argument_list|,
name|this
operator|::
name|initializeConstant
argument_list|)
expr_stmt|;
name|after
operator|=
name|Definition
operator|.
name|PATTERN_TYPE
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|MethodWriter
name|writer
parameter_list|)
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
DECL|method|load
name|void
name|load
parameter_list|(
name|MethodWriter
name|writer
parameter_list|)
block|{
name|writer
operator|.
name|writeDebugInfo
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|writer
operator|.
name|getStatic
argument_list|(
name|WriterConstants
operator|.
name|CLASS_TYPE
argument_list|,
name|constant
operator|.
name|name
argument_list|,
name|Definition
operator|.
name|PATTERN_TYPE
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|store
name|void
name|store
parameter_list|(
name|MethodWriter
name|writer
parameter_list|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|initializeConstant
specifier|private
name|void
name|initializeConstant
parameter_list|(
name|MethodWriter
name|writer
parameter_list|)
block|{
name|writer
operator|.
name|push
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|writer
operator|.
name|push
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|writer
operator|.
name|invokeStatic
argument_list|(
name|Definition
operator|.
name|PATTERN_TYPE
operator|.
name|type
argument_list|,
name|WriterConstants
operator|.
name|PATTERN_COMPILE
argument_list|)
expr_stmt|;
block|}
DECL|method|flagForChar
specifier|private
name|int
name|flagForChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'c'
case|:
return|return
name|Pattern
operator|.
name|CANON_EQ
return|;
case|case
literal|'i'
case|:
return|return
name|Pattern
operator|.
name|CASE_INSENSITIVE
return|;
case|case
literal|'l'
case|:
return|return
name|Pattern
operator|.
name|LITERAL
return|;
case|case
literal|'m'
case|:
return|return
name|Pattern
operator|.
name|MULTILINE
return|;
case|case
literal|'s'
case|:
return|return
name|Pattern
operator|.
name|DOTALL
return|;
case|case
literal|'U'
case|:
return|return
name|Pattern
operator|.
name|UNICODE_CHARACTER_CLASS
return|;
case|case
literal|'u'
case|:
return|return
name|Pattern
operator|.
name|UNICODE_CASE
return|;
case|case
literal|'x'
case|:
return|return
name|Pattern
operator|.
name|COMMENTS
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown flag ["
operator|+
name|c
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

