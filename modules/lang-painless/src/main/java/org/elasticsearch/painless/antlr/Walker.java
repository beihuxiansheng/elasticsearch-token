begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.antlr
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ANTLRInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|CommonTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
operator|.
name|Reserved
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|AfterthoughtContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ArgumentsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|AssignmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|BinaryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|BreakContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|CastContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ConditionalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ContinueContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|DeclContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|DeclarationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|DecltypeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|DeclvarContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|DoContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|EmptyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|EmptyscopeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ExprContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ExpressionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|LinkbraceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|LinkcallContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|LinkcastContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|LinkdotContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ReadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|LinkfieldContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|LinknewContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|LinkprecContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ChainContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|LinkstringContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|LinkvarContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|FalseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ForContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|GenericContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|IdentifierContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|IfContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|InitializerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|MultipleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|NullContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|NumericContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|PostincContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|PrecedenceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|PreincContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ReturnContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|SingleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|SourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|StatementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|ThrowContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|TrapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|TrueContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|TryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|UnaryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
operator|.
name|PainlessParser
operator|.
name|WhileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|AExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|ALink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|ANode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|AStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|EBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|EBool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|EBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|EExplicit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|EChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|EComp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|EConditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|EDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|ENull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|ENumeric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|EUnary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|LBrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|LCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|LCast
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|LField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|LNewArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|LNewObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|LString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|LVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SBreak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SContinue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SDeclBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SDo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SFor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SIfElse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SReturn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SThrow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|STrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|STry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
operator|.
name|SWhile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Converts the ANTLR tree to a Painless tree.  */
end_comment

begin_class
DECL|class|Walker
specifier|public
specifier|final
class|class
name|Walker
extends|extends
name|PainlessParserBaseVisitor
argument_list|<
name|ANode
argument_list|>
block|{
DECL|method|buildPainlessTree
specifier|public
specifier|static
name|SSource
name|buildPainlessTree
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|Reserved
name|reserved
parameter_list|)
block|{
return|return
operator|new
name|Walker
argument_list|(
name|source
argument_list|,
name|reserved
argument_list|)
operator|.
name|source
return|;
block|}
DECL|field|reserved
specifier|private
specifier|final
name|Reserved
name|reserved
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|SSource
name|source
decl_stmt|;
DECL|method|Walker
specifier|private
name|Walker
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|Reserved
name|reserved
parameter_list|)
block|{
name|this
operator|.
name|reserved
operator|=
name|reserved
expr_stmt|;
name|this
operator|.
name|source
operator|=
operator|(
name|SSource
operator|)
name|visit
argument_list|(
name|buildAntlrTree
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|buildAntlrTree
specifier|private
name|SourceContext
name|buildAntlrTree
parameter_list|(
specifier|final
name|String
name|source
parameter_list|)
block|{
specifier|final
name|ANTLRInputStream
name|stream
init|=
operator|new
name|ANTLRInputStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|PainlessLexer
name|lexer
init|=
operator|new
name|ErrorHandlingLexer
argument_list|(
name|stream
argument_list|)
decl_stmt|;
specifier|final
name|PainlessParser
name|parser
init|=
operator|new
name|PainlessParser
argument_list|(
operator|new
name|CommonTokenStream
argument_list|(
name|lexer
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ParserErrorStrategy
name|strategy
init|=
operator|new
name|ParserErrorStrategy
argument_list|()
decl_stmt|;
name|lexer
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
name|parser
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|source
argument_list|()
return|;
block|}
DECL|method|line
specifier|private
name|int
name|line
parameter_list|(
specifier|final
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|getStart
argument_list|()
operator|.
name|getLine
argument_list|()
return|;
block|}
DECL|method|location
specifier|private
name|String
name|location
parameter_list|(
specifier|final
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
literal|"[ "
operator|+
name|ctx
operator|.
name|getStart
argument_list|()
operator|.
name|getLine
argument_list|()
operator|+
literal|" : "
operator|+
name|ctx
operator|.
name|getStart
argument_list|()
operator|.
name|getCharPositionInLine
argument_list|()
operator|+
literal|" ]"
return|;
block|}
annotation|@
name|Override
DECL|method|visitSource
specifier|public
name|ANode
name|visitSource
parameter_list|(
specifier|final
name|SourceContext
name|ctx
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|AStatement
argument_list|>
name|statements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|StatementContext
name|statement
range|:
name|ctx
operator|.
name|statement
argument_list|()
control|)
block|{
name|statements
operator|.
name|add
argument_list|(
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|statement
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SSource
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|statements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitIf
specifier|public
name|ANode
name|visitIf
parameter_list|(
specifier|final
name|IfContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AExpression
name|condition
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AStatement
name|ifblock
init|=
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AStatement
name|elseblock
init|=
name|ctx
operator|.
name|block
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SIfElse
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|condition
argument_list|,
name|ifblock
argument_list|,
name|elseblock
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitWhile
specifier|public
name|ANode
name|visitWhile
parameter_list|(
specifier|final
name|WhileContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AExpression
name|condition
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AStatement
name|block
init|=
name|ctx
operator|.
name|block
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
decl_stmt|;
name|reserved
operator|.
name|usesLoop
argument_list|()
expr_stmt|;
return|return
operator|new
name|SWhile
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|condition
argument_list|,
name|block
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitDo
specifier|public
name|ANode
name|visitDo
parameter_list|(
specifier|final
name|DoContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AStatement
name|block
init|=
name|ctx
operator|.
name|block
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AExpression
name|condition
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
name|reserved
operator|.
name|usesLoop
argument_list|()
expr_stmt|;
return|return
operator|new
name|SDo
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|block
argument_list|,
name|condition
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitFor
specifier|public
name|ANode
name|visitFor
parameter_list|(
specifier|final
name|ForContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ANode
name|intializer
init|=
name|ctx
operator|.
name|initializer
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|visit
argument_list|(
name|ctx
operator|.
name|initializer
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AExpression
name|condition
init|=
name|ctx
operator|.
name|expression
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AExpression
name|afterthought
init|=
name|ctx
operator|.
name|afterthought
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|afterthought
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AStatement
name|block
init|=
name|ctx
operator|.
name|block
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
decl_stmt|;
name|reserved
operator|.
name|usesLoop
argument_list|()
expr_stmt|;
return|return
operator|new
name|SFor
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|intializer
argument_list|,
name|condition
argument_list|,
name|afterthought
argument_list|,
name|block
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitDecl
specifier|public
name|ANode
name|visitDecl
parameter_list|(
specifier|final
name|DeclContext
name|ctx
parameter_list|)
block|{
return|return
name|visit
argument_list|(
name|ctx
operator|.
name|declaration
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitContinue
specifier|public
name|ANode
name|visitContinue
parameter_list|(
specifier|final
name|ContinueContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|SContinue
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitBreak
specifier|public
name|ANode
name|visitBreak
parameter_list|(
specifier|final
name|BreakContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|SBreak
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitReturn
specifier|public
name|ANode
name|visitReturn
parameter_list|(
specifier|final
name|ReturnContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AExpression
name|expression
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SReturn
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|expression
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitTry
specifier|public
name|ANode
name|visitTry
parameter_list|(
specifier|final
name|TryContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AStatement
name|block
init|=
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|STrap
argument_list|>
name|traps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|TrapContext
name|trap
range|:
name|ctx
operator|.
name|trap
argument_list|()
control|)
block|{
name|traps
operator|.
name|add
argument_list|(
operator|(
name|STrap
operator|)
name|visit
argument_list|(
name|trap
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|STry
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|block
argument_list|,
name|traps
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitThrow
specifier|public
name|ANode
name|visitThrow
parameter_list|(
specifier|final
name|ThrowContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AExpression
name|expression
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SThrow
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|expression
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitExpr
specifier|public
name|ANode
name|visitExpr
parameter_list|(
specifier|final
name|ExprContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AExpression
name|expression
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SExpression
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|expression
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitMultiple
specifier|public
name|ANode
name|visitMultiple
parameter_list|(
specifier|final
name|MultipleContext
name|ctx
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|AStatement
argument_list|>
name|statements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|StatementContext
name|statement
range|:
name|ctx
operator|.
name|statement
argument_list|()
control|)
block|{
name|statements
operator|.
name|add
argument_list|(
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|statement
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SBlock
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|statements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitSingle
specifier|public
name|ANode
name|visitSingle
parameter_list|(
specifier|final
name|SingleContext
name|ctx
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|AStatement
argument_list|>
name|statements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|statement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SBlock
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|statements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitEmpty
specifier|public
name|ANode
name|visitEmpty
parameter_list|(
specifier|final
name|EmptyContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitEmptyscope
specifier|public
name|ANode
name|visitEmptyscope
parameter_list|(
specifier|final
name|EmptyscopeContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitInitializer
specifier|public
name|ANode
name|visitInitializer
parameter_list|(
specifier|final
name|InitializerContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|declaration
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|visit
argument_list|(
name|ctx
operator|.
name|declaration
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|expression
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitAfterthought
specifier|public
name|ANode
name|visitAfterthought
parameter_list|(
specifier|final
name|AfterthoughtContext
name|ctx
parameter_list|)
block|{
return|return
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitDeclaration
specifier|public
name|ANode
name|visitDeclaration
parameter_list|(
specifier|final
name|DeclarationContext
name|ctx
parameter_list|)
block|{
specifier|final
name|String
name|type
init|=
name|ctx
operator|.
name|decltype
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SDeclaration
argument_list|>
name|declarations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|DeclvarContext
name|declvar
range|:
name|ctx
operator|.
name|declvar
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|declvar
operator|.
name|identifier
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|AExpression
name|expression
init|=
name|declvar
operator|.
name|expression
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|declvar
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
name|declarations
operator|.
name|add
argument_list|(
operator|new
name|SDeclaration
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|type
argument_list|,
name|name
argument_list|,
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SDeclBlock
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|declarations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitDecltype
specifier|public
name|ANode
name|visitDecltype
parameter_list|(
specifier|final
name|DecltypeContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitDeclvar
specifier|public
name|ANode
name|visitDeclvar
parameter_list|(
specifier|final
name|DeclvarContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitTrap
specifier|public
name|ANode
name|visitTrap
parameter_list|(
specifier|final
name|TrapContext
name|ctx
parameter_list|)
block|{
specifier|final
name|String
name|type
init|=
name|ctx
operator|.
name|identifier
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|ctx
operator|.
name|identifier
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|AStatement
name|block
init|=
name|ctx
operator|.
name|block
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|AStatement
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|STrap
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|type
argument_list|,
name|name
argument_list|,
name|block
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitIdentifier
specifier|public
name|ANode
name|visitIdentifier
parameter_list|(
specifier|final
name|IdentifierContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitGeneric
specifier|public
name|ANode
name|visitGeneric
parameter_list|(
specifier|final
name|GenericContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitPrecedence
specifier|public
name|ANode
name|visitPrecedence
parameter_list|(
specifier|final
name|PrecedenceContext
name|ctx
parameter_list|)
block|{
return|return
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitNumeric
specifier|public
name|ANode
name|visitNumeric
parameter_list|(
specifier|final
name|NumericContext
name|ctx
parameter_list|)
block|{
specifier|final
name|boolean
name|negate
init|=
name|ctx
operator|.
name|parent
operator|instanceof
name|UnaryContext
operator|&&
operator|(
operator|(
name|UnaryContext
operator|)
name|ctx
operator|.
name|parent
operator|)
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|DECIMAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|EDecimal
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
operator|(
name|negate
condition|?
literal|"-"
else|:
literal|""
operator|)
operator|+
name|ctx
operator|.
name|DECIMAL
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|HEX
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ENumeric
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
operator|(
name|negate
condition|?
literal|"-"
else|:
literal|""
operator|)
operator|+
name|ctx
operator|.
name|HEX
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|16
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|INTEGER
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ENumeric
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
operator|(
name|negate
condition|?
literal|"-"
else|:
literal|""
operator|)
operator|+
name|ctx
operator|.
name|INTEGER
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
literal|10
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|OCTAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ENumeric
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
operator|(
name|negate
condition|?
literal|"-"
else|:
literal|""
operator|)
operator|+
name|ctx
operator|.
name|OCTAL
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|8
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitTrue
specifier|public
name|ANode
name|visitTrue
parameter_list|(
specifier|final
name|TrueContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|EBoolean
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitFalse
specifier|public
name|ANode
name|visitFalse
parameter_list|(
name|FalseContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|EBoolean
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitNull
specifier|public
name|ANode
name|visitNull
parameter_list|(
specifier|final
name|NullContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|ENull
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitPostinc
specifier|public
name|ANode
name|visitPostinc
parameter_list|(
specifier|final
name|PostincContext
name|ctx
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Operation
name|operation
decl_stmt|;
name|visitChain
argument_list|(
name|ctx
operator|.
name|chain
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|INCR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|INCR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|DECR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|DECR
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
return|return
operator|new
name|EChain
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|links
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|operation
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitPreinc
specifier|public
name|ANode
name|visitPreinc
parameter_list|(
specifier|final
name|PreincContext
name|ctx
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Operation
name|operation
decl_stmt|;
name|visitChain
argument_list|(
name|ctx
operator|.
name|chain
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|INCR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|INCR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|DECR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|DECR
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
return|return
operator|new
name|EChain
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|links
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|operation
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitRead
specifier|public
name|ANode
name|visitRead
parameter_list|(
specifier|final
name|ReadContext
name|ctx
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|visitChain
argument_list|(
name|ctx
operator|.
name|chain
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
return|return
operator|new
name|EChain
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|links
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitUnary
specifier|public
name|ANode
name|visitUnary
parameter_list|(
specifier|final
name|UnaryContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|expression
argument_list|()
operator|instanceof
name|NumericContext
condition|)
block|{
return|return
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|Operation
name|operation
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|BOOLNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|NOT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|BWNOT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|ADD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|SUB
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
return|return
operator|new
name|EUnary
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|operation
argument_list|,
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitCast
specifier|public
name|ANode
name|visitCast
parameter_list|(
specifier|final
name|CastContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|EExplicit
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|ctx
operator|.
name|decltype
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitBinary
specifier|public
name|ANode
name|visitBinary
parameter_list|(
specifier|final
name|BinaryContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AExpression
name|left
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AExpression
name|right
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Operation
name|operation
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|MUL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|MUL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|DIV
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|DIV
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|REM
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|REM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|ADD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|SUB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|LSH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|RSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|RSH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|USH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|USH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|BWAND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|XOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|XOR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|BWOR
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
return|return
operator|new
name|EBinary
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|operation
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitComp
specifier|public
name|ANode
name|visitComp
parameter_list|(
name|PainlessParser
operator|.
name|CompContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AExpression
name|left
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AExpression
name|right
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Operation
name|operation
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|LT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|LT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LTE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|LTE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|GT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|GT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|GTE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|GTE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|EQ
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|EQR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|NE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|NER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|NER
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
return|return
operator|new
name|EComp
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|operation
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitBool
specifier|public
name|ANode
name|visitBool
parameter_list|(
name|PainlessParser
operator|.
name|BoolContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AExpression
name|left
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AExpression
name|right
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Operation
name|operation
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|BOOLAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|AND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BOOLOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|OR
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
return|return
operator|new
name|EBool
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|operation
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitConditional
specifier|public
name|ANode
name|visitConditional
parameter_list|(
specifier|final
name|ConditionalContext
name|ctx
parameter_list|)
block|{
specifier|final
name|AExpression
name|condition
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AExpression
name|left
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AExpression
name|right
init|=
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|EConditional
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|condition
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visitAssignment
specifier|public
name|ANode
name|visitAssignment
parameter_list|(
specifier|final
name|AssignmentContext
name|ctx
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Operation
name|operation
decl_stmt|;
name|visitChain
argument_list|(
name|ctx
operator|.
name|chain
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|AMUL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|MUL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADIV
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|DIV
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AREM
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|REM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|ADD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ASUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|SUB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ALSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|LSH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ARSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|RSH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AUSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|USH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|BWAND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AXOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|XOR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
name|Operation
operator|.
name|BWOR
expr_stmt|;
block|}
else|else
block|{
name|operation
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|EChain
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|links
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|operation
argument_list|,
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|visitChain
specifier|private
name|void
name|visitChain
parameter_list|(
specifier|final
name|ChainContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|linkprec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkprec
argument_list|(
name|ctx
operator|.
name|linkprec
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkcast
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkcast
argument_list|(
name|ctx
operator|.
name|linkcast
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkvar
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkvar
argument_list|(
name|ctx
operator|.
name|linkvar
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linknew
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinknew
argument_list|(
name|ctx
operator|.
name|linknew
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkstring
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkstring
argument_list|(
name|ctx
operator|.
name|linkstring
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitChain
specifier|public
name|ANode
name|visitChain
parameter_list|(
specifier|final
name|ChainContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
DECL|method|visitLinkprec
specifier|private
name|void
name|visitLinkprec
parameter_list|(
specifier|final
name|LinkprecContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|linkprec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkprec
argument_list|(
name|ctx
operator|.
name|linkprec
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkcast
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkcast
argument_list|(
name|ctx
operator|.
name|linkcast
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkvar
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkvar
argument_list|(
name|ctx
operator|.
name|linkvar
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linknew
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinknew
argument_list|(
name|ctx
operator|.
name|linknew
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkstring
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkstring
argument_list|(
name|ctx
operator|.
name|linkstring
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ctx
operator|.
name|linkbrace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkbrace
argument_list|(
name|ctx
operator|.
name|linkbrace
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkdot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkdot
argument_list|(
name|ctx
operator|.
name|linkdot
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitLinkprec
specifier|public
name|ANode
name|visitLinkprec
parameter_list|(
specifier|final
name|LinkprecContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
DECL|method|visitLinkcast
specifier|private
name|void
name|visitLinkcast
parameter_list|(
specifier|final
name|LinkcastContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|linkprec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkprec
argument_list|(
name|ctx
operator|.
name|linkprec
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkcast
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkcast
argument_list|(
name|ctx
operator|.
name|linkcast
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkvar
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkvar
argument_list|(
name|ctx
operator|.
name|linkvar
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linknew
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinknew
argument_list|(
name|ctx
operator|.
name|linknew
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkstring
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkstring
argument_list|(
name|ctx
operator|.
name|linkstring
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
name|links
operator|.
name|add
argument_list|(
operator|new
name|LCast
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|ctx
operator|.
name|decltype
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|visitLinkcast
specifier|public
name|ANode
name|visitLinkcast
parameter_list|(
specifier|final
name|LinkcastContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
DECL|method|visitLinkbrace
specifier|private
name|void
name|visitLinkbrace
parameter_list|(
specifier|final
name|LinkbraceContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
name|links
operator|.
name|add
argument_list|(
operator|new
name|LBrace
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|linkbrace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkbrace
argument_list|(
name|ctx
operator|.
name|linkbrace
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkdot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkdot
argument_list|(
name|ctx
operator|.
name|linkdot
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitLinkbrace
specifier|public
name|ANode
name|visitLinkbrace
parameter_list|(
specifier|final
name|LinkbraceContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
DECL|method|visitLinkdot
specifier|private
name|void
name|visitLinkdot
parameter_list|(
specifier|final
name|LinkdotContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|linkcall
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkcall
argument_list|(
name|ctx
operator|.
name|linkcall
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkfield
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkfield
argument_list|(
name|ctx
operator|.
name|linkfield
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitLinkdot
specifier|public
name|ANode
name|visitLinkdot
parameter_list|(
specifier|final
name|LinkdotContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
DECL|method|visitLinkcall
specifier|private
name|void
name|visitLinkcall
parameter_list|(
specifier|final
name|LinkcallContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|AExpression
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ExpressionContext
name|expression
range|:
name|ctx
operator|.
name|arguments
argument_list|()
operator|.
name|expression
argument_list|()
control|)
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|links
operator|.
name|add
argument_list|(
operator|new
name|LCall
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|ctx
operator|.
name|EXTID
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
name|arguments
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|linkbrace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkbrace
argument_list|(
name|ctx
operator|.
name|linkbrace
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkdot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkdot
argument_list|(
name|ctx
operator|.
name|linkdot
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitLinkcall
specifier|public
name|ANode
name|visitLinkcall
parameter_list|(
specifier|final
name|LinkcallContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
DECL|method|visitLinkvar
specifier|private
name|void
name|visitLinkvar
parameter_list|(
specifier|final
name|LinkvarContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|ctx
operator|.
name|identifier
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|reserved
operator|.
name|markReserved
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|links
operator|.
name|add
argument_list|(
operator|new
name|LVariable
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|linkbrace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkbrace
argument_list|(
name|ctx
operator|.
name|linkbrace
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkdot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkdot
argument_list|(
name|ctx
operator|.
name|linkdot
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitLinkvar
specifier|public
name|ANode
name|visitLinkvar
parameter_list|(
specifier|final
name|LinkvarContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
DECL|method|visitLinkfield
specifier|private
name|void
name|visitLinkfield
parameter_list|(
specifier|final
name|LinkfieldContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
specifier|final
name|String
name|value
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|EXTID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|ctx
operator|.
name|EXTID
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|EXTINTEGER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|ctx
operator|.
name|EXTINTEGER
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
name|links
operator|.
name|add
argument_list|(
operator|new
name|LField
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|linkbrace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkbrace
argument_list|(
name|ctx
operator|.
name|linkbrace
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkdot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkdot
argument_list|(
name|ctx
operator|.
name|linkdot
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitLinkfield
specifier|public
name|ANode
name|visitLinkfield
parameter_list|(
specifier|final
name|LinkfieldContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
DECL|method|visitLinknew
specifier|private
name|void
name|visitLinknew
parameter_list|(
specifier|final
name|LinknewContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|AExpression
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|arguments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|ExpressionContext
name|expression
range|:
name|ctx
operator|.
name|arguments
argument_list|()
operator|.
name|expression
argument_list|()
control|)
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|links
operator|.
name|add
argument_list|(
operator|new
name|LNewObj
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|ctx
operator|.
name|identifier
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
name|arguments
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|expression
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
specifier|final
name|ExpressionContext
name|expression
range|:
name|ctx
operator|.
name|expression
argument_list|()
control|)
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
name|AExpression
operator|)
name|visit
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|links
operator|.
name|add
argument_list|(
operator|new
name|LNewArray
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|ctx
operator|.
name|identifier
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
name|arguments
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ctx
operator|.
name|linkdot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkdot
argument_list|(
name|ctx
operator|.
name|linkdot
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitLinknew
specifier|public
name|ANode
name|visitLinknew
parameter_list|(
specifier|final
name|LinknewContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
DECL|method|visitLinkstring
specifier|private
name|void
name|visitLinkstring
parameter_list|(
specifier|final
name|LinkstringContext
name|ctx
parameter_list|,
specifier|final
name|List
argument_list|<
name|ALink
argument_list|>
name|links
parameter_list|)
block|{
name|links
operator|.
name|add
argument_list|(
operator|new
name|LString
argument_list|(
name|line
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|location
argument_list|(
name|ctx
argument_list|)
argument_list|,
name|ctx
operator|.
name|STRING
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|ctx
operator|.
name|STRING
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|linkbrace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkbrace
argument_list|(
name|ctx
operator|.
name|linkbrace
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|linkdot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visitLinkdot
argument_list|(
name|ctx
operator|.
name|linkdot
argument_list|()
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|visitLinkstring
specifier|public
name|ANode
name|visitLinkstring
parameter_list|(
specifier|final
name|LinkstringContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitArguments
specifier|public
name|ANode
name|visitArguments
parameter_list|(
specifier|final
name|ArgumentsContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error "
operator|+
name|location
argument_list|(
name|ctx
argument_list|)
operator|+
literal|": Unexpected state."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

