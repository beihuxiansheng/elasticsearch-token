begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Cast
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Transform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Metadata
operator|.
name|ExpressionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|GeneratorAdapter
import|;
end_import

begin_class
DECL|class|WriterCaster
class|class
name|WriterCaster
block|{
DECL|field|execute
specifier|private
specifier|final
name|GeneratorAdapter
name|execute
decl_stmt|;
DECL|method|WriterCaster
name|WriterCaster
parameter_list|(
specifier|final
name|GeneratorAdapter
name|execute
parameter_list|)
block|{
name|this
operator|.
name|execute
operator|=
name|execute
expr_stmt|;
block|}
DECL|method|checkWriteCast
name|void
name|checkWriteCast
parameter_list|(
specifier|final
name|ExpressionMetadata
name|sort
parameter_list|)
block|{
name|checkWriteCast
argument_list|(
name|sort
operator|.
name|source
argument_list|,
name|sort
operator|.
name|cast
argument_list|)
expr_stmt|;
block|}
DECL|method|checkWriteCast
name|void
name|checkWriteCast
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|Cast
name|cast
parameter_list|)
block|{
if|if
condition|(
name|cast
operator|instanceof
name|Transform
condition|)
block|{
name|writeTransform
argument_list|(
operator|(
name|Transform
operator|)
name|cast
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cast
operator|!=
literal|null
condition|)
block|{
name|writeCast
argument_list|(
name|cast
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Unexpected cast object."
argument_list|)
throw|;
block|}
block|}
DECL|method|writeCast
specifier|private
name|void
name|writeCast
parameter_list|(
specifier|final
name|Cast
name|cast
parameter_list|)
block|{
specifier|final
name|Type
name|from
init|=
name|cast
operator|.
name|from
decl_stmt|;
specifier|final
name|Type
name|to
init|=
name|cast
operator|.
name|to
decl_stmt|;
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|from
operator|.
name|sort
operator|.
name|numeric
operator|&&
name|from
operator|.
name|sort
operator|.
name|primitive
operator|&&
name|to
operator|.
name|sort
operator|.
name|numeric
operator|&&
name|to
operator|.
name|sort
operator|.
name|primitive
condition|)
block|{
name|execute
operator|.
name|cast
argument_list|(
name|from
operator|.
name|type
argument_list|,
name|to
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|from
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|to
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
name|execute
operator|.
name|checkCast
argument_list|(
name|to
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeTransform
specifier|private
name|void
name|writeTransform
parameter_list|(
specifier|final
name|Transform
name|transform
parameter_list|)
block|{
if|if
condition|(
name|transform
operator|.
name|upcast
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|checkCast
argument_list|(
name|transform
operator|.
name|upcast
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isStatic
argument_list|(
name|transform
operator|.
name|method
operator|.
name|reflect
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|transform
operator|.
name|method
operator|.
name|owner
operator|.
name|type
argument_list|,
name|transform
operator|.
name|method
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isInterface
argument_list|(
name|transform
operator|.
name|method
operator|.
name|owner
operator|.
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|execute
operator|.
name|invokeInterface
argument_list|(
name|transform
operator|.
name|method
operator|.
name|owner
operator|.
name|type
argument_list|,
name|transform
operator|.
name|method
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|invokeVirtual
argument_list|(
name|transform
operator|.
name|method
operator|.
name|owner
operator|.
name|type
argument_list|,
name|transform
operator|.
name|method
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transform
operator|.
name|downcast
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|checkCast
argument_list|(
name|transform
operator|.
name|downcast
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

