begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Metadata
operator|.
name|ExpressionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|AssignmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BinaryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BoolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|CastContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|CharContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|CompContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ConditionalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExpressionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExternalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|FalseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|IncrementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|NullContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|NumericContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|PostincContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|PreincContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|TrueContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|UnaryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterUtility
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|GeneratorAdapter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ADD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BWAND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BWOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BWXOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DIV
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|LSH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|MUL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|REM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|RSH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|SUB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|USH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|CHECKEQUALS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_EQ_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_GTE_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_GT_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_LTE_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_LT_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_NEG_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_NOT_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|NEGATEEXACT_INT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|NEGATEEXACT_LONG
import|;
end_import

begin_class
DECL|class|WriterExpression
class|class
name|WriterExpression
block|{
DECL|field|metadata
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
DECL|field|definition
specifier|private
specifier|final
name|Definition
name|definition
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|CompilerSettings
name|settings
decl_stmt|;
DECL|field|execute
specifier|private
specifier|final
name|GeneratorAdapter
name|execute
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|Writer
name|writer
decl_stmt|;
DECL|field|utility
specifier|private
specifier|final
name|WriterUtility
name|utility
decl_stmt|;
DECL|field|caster
specifier|private
specifier|final
name|WriterCaster
name|caster
decl_stmt|;
DECL|method|WriterExpression
name|WriterExpression
parameter_list|(
specifier|final
name|Metadata
name|metadata
parameter_list|,
specifier|final
name|GeneratorAdapter
name|execute
parameter_list|,
specifier|final
name|Writer
name|writer
parameter_list|,
specifier|final
name|WriterUtility
name|utility
parameter_list|,
specifier|final
name|WriterCaster
name|caster
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|definition
operator|=
name|metadata
operator|.
name|definition
expr_stmt|;
name|settings
operator|=
name|metadata
operator|.
name|settings
expr_stmt|;
name|this
operator|.
name|execute
operator|=
name|execute
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|utility
operator|=
name|utility
expr_stmt|;
name|this
operator|.
name|caster
operator|=
name|caster
expr_stmt|;
block|}
DECL|method|processNumeric
name|void
name|processNumeric
parameter_list|(
specifier|final
name|NumericContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|numericemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|numericemd
operator|.
name|postConst
decl_stmt|;
if|if
condition|(
name|postConst
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeNumeric
argument_list|(
name|ctx
argument_list|,
name|numericemd
operator|.
name|preConst
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|numericemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|processChar
name|void
name|processChar
parameter_list|(
specifier|final
name|CharContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|charemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|charemd
operator|.
name|postConst
decl_stmt|;
if|if
condition|(
name|postConst
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeNumeric
argument_list|(
name|ctx
argument_list|,
call|(
name|int
call|)
argument_list|(
name|char
argument_list|)
name|charemd
operator|.
name|preConst
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|charemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|processTrue
name|void
name|processTrue
parameter_list|(
specifier|final
name|TrueContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|trueemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|trueemd
operator|.
name|postConst
decl_stmt|;
specifier|final
name|Branch
name|branch
init|=
name|utility
operator|.
name|getBranch
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|postConst
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeBoolean
argument_list|(
name|ctx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|trueemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|branch
operator|.
name|tru
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|goTo
argument_list|(
name|branch
operator|.
name|tru
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processFalse
name|void
name|processFalse
parameter_list|(
specifier|final
name|FalseContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|falseemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|falseemd
operator|.
name|postConst
decl_stmt|;
specifier|final
name|Branch
name|branch
init|=
name|utility
operator|.
name|getBranch
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|postConst
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeBoolean
argument_list|(
name|ctx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|falseemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|branch
operator|.
name|fals
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|goTo
argument_list|(
name|branch
operator|.
name|fals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processNull
name|void
name|processNull
parameter_list|(
specifier|final
name|NullContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|nullemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|execute
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ACONST_NULL
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|nullemd
argument_list|)
expr_stmt|;
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|processExternal
name|void
name|processExternal
parameter_list|(
specifier|final
name|ExternalContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|ctx
operator|.
name|extstart
argument_list|()
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|processPostinc
name|void
name|processPostinc
parameter_list|(
specifier|final
name|PostincContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|ctx
operator|.
name|extstart
argument_list|()
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|processPreinc
name|void
name|processPreinc
parameter_list|(
specifier|final
name|PreincContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|ctx
operator|.
name|extstart
argument_list|()
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|processUnary
name|void
name|processUnary
parameter_list|(
specifier|final
name|UnaryContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|unaryemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|unaryemd
operator|.
name|postConst
decl_stmt|;
specifier|final
name|Object
name|preConst
init|=
name|unaryemd
operator|.
name|preConst
decl_stmt|;
specifier|final
name|Branch
name|branch
init|=
name|utility
operator|.
name|getBranch
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|postConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|BOOLNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|boolean
operator|)
name|postConst
operator|&&
name|branch
operator|.
name|tru
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|goTo
argument_list|(
name|branch
operator|.
name|tru
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|boolean
operator|)
name|postConst
operator|&&
name|branch
operator|.
name|fals
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|goTo
argument_list|(
name|branch
operator|.
name|fals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|preConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|preConst
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|unaryemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|ctx
operator|.
name|expression
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|BOOLNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Branch
name|local
init|=
name|utility
operator|.
name|markBranch
argument_list|(
name|ctx
argument_list|,
name|exprctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|local
operator|.
name|fals
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
specifier|final
name|Label
name|aend
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|execute
operator|.
name|push
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|execute
operator|.
name|goTo
argument_list|(
name|aend
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|local
operator|.
name|fals
argument_list|)
expr_stmt|;
name|execute
operator|.
name|push
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|aend
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|unaryemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|local
operator|.
name|tru
operator|=
name|branch
operator|.
name|fals
expr_stmt|;
name|local
operator|.
name|fals
operator|=
name|branch
operator|.
name|tru
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|type
init|=
name|unaryemd
operator|.
name|from
operator|.
name|type
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|unaryemd
operator|.
name|from
operator|.
name|sort
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|BWNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_NOT_CALL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|execute
operator|.
name|math
argument_list|(
name|GeneratorAdapter
operator|.
name|XOR
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_NEG_CALL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|execute
operator|.
name|math
argument_list|(
name|GeneratorAdapter
operator|.
name|NEG
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|mathType
operator|.
name|type
argument_list|,
name|NEGATEEXACT_INT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|mathType
operator|.
name|type
argument_list|,
name|NEGATEEXACT_LONG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|unaryemd
argument_list|)
expr_stmt|;
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processCast
name|void
name|processCast
parameter_list|(
specifier|final
name|CastContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|castemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|castemd
operator|.
name|postConst
decl_stmt|;
if|if
condition|(
name|postConst
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|castemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|processBinary
name|void
name|processBinary
parameter_list|(
specifier|final
name|BinaryContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|binaryemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|binaryemd
operator|.
name|postConst
decl_stmt|;
specifier|final
name|Object
name|preConst
init|=
name|binaryemd
operator|.
name|preConst
decl_stmt|;
specifier|final
name|Branch
name|branch
init|=
name|utility
operator|.
name|getBranch
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|postConst
operator|!=
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|preConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|preConst
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|binaryemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|binaryemd
operator|.
name|from
operator|.
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
specifier|final
name|boolean
name|marked
init|=
name|utility
operator|.
name|containsStrings
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|marked
condition|)
block|{
name|utility
operator|.
name|writeNewStrings
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
name|utility
operator|.
name|addStrings
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
if|if
condition|(
name|utility
operator|.
name|containsStrings
argument_list|(
name|exprctx0
argument_list|)
condition|)
block|{
name|utility
operator|.
name|writeAppendStrings
argument_list|(
name|expremd0
operator|.
name|from
operator|.
name|sort
argument_list|)
expr_stmt|;
name|utility
operator|.
name|removeStrings
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
name|utility
operator|.
name|addStrings
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
if|if
condition|(
name|utility
operator|.
name|containsStrings
argument_list|(
name|exprctx1
argument_list|)
condition|)
block|{
name|utility
operator|.
name|writeAppendStrings
argument_list|(
name|expremd1
operator|.
name|from
operator|.
name|sort
argument_list|)
expr_stmt|;
name|utility
operator|.
name|removeStrings
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|marked
condition|)
block|{
name|utility
operator|.
name|removeStrings
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utility
operator|.
name|writeToStrings
argument_list|()
expr_stmt|;
block|}
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|binaryemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|type
init|=
name|binaryemd
operator|.
name|from
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|MUL
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|MUL
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|DIV
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|DIV
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|REM
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|REM
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|ADD
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|SUB
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LSH
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|LSH
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|USH
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|USH
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|RSH
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|RSH
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWAND
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|BWAND
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWXOR
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|BWXOR
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWOR
argument_list|()
operator|!=
literal|null
condition|)
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|ctx
argument_list|,
name|type
argument_list|,
name|BWOR
argument_list|)
expr_stmt|;
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|binaryemd
argument_list|)
expr_stmt|;
block|}
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|processComp
name|void
name|processComp
parameter_list|(
specifier|final
name|CompContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|compemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|compemd
operator|.
name|postConst
decl_stmt|;
specifier|final
name|Object
name|preConst
init|=
name|compemd
operator|.
name|preConst
decl_stmt|;
specifier|final
name|Branch
name|branch
init|=
name|utility
operator|.
name|getBranch
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|postConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|boolean
operator|)
name|postConst
operator|&&
name|branch
operator|.
name|tru
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|mark
argument_list|(
name|branch
operator|.
name|tru
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|boolean
operator|)
name|postConst
operator|&&
name|branch
operator|.
name|fals
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|mark
argument_list|(
name|branch
operator|.
name|fals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|preConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|preConst
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|compemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|type
init|=
name|expremd1
operator|.
name|to
operator|.
name|type
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|expremd1
operator|.
name|to
operator|.
name|sort
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expremd1
operator|.
name|isNull
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|tru
init|=
name|branch
operator|!=
literal|null
operator|&&
name|branch
operator|.
name|tru
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|fals
init|=
name|branch
operator|!=
literal|null
operator|&&
name|branch
operator|.
name|fals
operator|!=
literal|null
decl_stmt|;
specifier|final
name|Label
name|jump
init|=
name|tru
condition|?
name|branch
operator|.
name|tru
else|:
name|fals
condition|?
name|branch
operator|.
name|fals
else|:
operator|new
name|Label
argument_list|()
decl_stmt|;
specifier|final
name|Label
name|end
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|eq
init|=
operator|(
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|tru
operator|||
operator|!
name|fals
operator|)
operator|||
operator|(
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|NER
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|fals
decl_stmt|;
specifier|final
name|boolean
name|ne
init|=
operator|(
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|NER
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|tru
operator|||
operator|!
name|fals
operator|)
operator|||
operator|(
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|fals
decl_stmt|;
specifier|final
name|boolean
name|lt
init|=
name|ctx
operator|.
name|LT
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|tru
operator|||
operator|!
name|fals
operator|)
operator|||
name|ctx
operator|.
name|GTE
argument_list|()
operator|!=
literal|null
operator|&&
name|fals
decl_stmt|;
specifier|final
name|boolean
name|lte
init|=
name|ctx
operator|.
name|LTE
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|tru
operator|||
operator|!
name|fals
operator|)
operator|||
name|ctx
operator|.
name|GT
argument_list|()
operator|!=
literal|null
operator|&&
name|fals
decl_stmt|;
specifier|final
name|boolean
name|gt
init|=
name|ctx
operator|.
name|GT
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|tru
operator|||
operator|!
name|fals
operator|)
operator|||
name|ctx
operator|.
name|LTE
argument_list|()
operator|!=
literal|null
operator|&&
name|fals
decl_stmt|;
specifier|final
name|boolean
name|gte
init|=
name|ctx
operator|.
name|GTE
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|tru
operator|||
operator|!
name|fals
operator|)
operator|||
name|ctx
operator|.
name|LT
argument_list|()
operator|!=
literal|null
operator|&&
name|fals
decl_stmt|;
name|boolean
name|writejump
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|sort1
condition|)
block|{
case|case
name|VOID
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
case|case
name|BOOL
case|:
if|if
condition|(
name|eq
condition|)
name|execute
operator|.
name|ifZCmp
argument_list|(
name|GeneratorAdapter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ne
condition|)
name|execute
operator|.
name|ifZCmp
argument_list|(
name|GeneratorAdapter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
break|break;
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
if|if
condition|(
name|eq
condition|)
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ne
condition|)
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|lt
condition|)
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|LT
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|lte
condition|)
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|LE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|gt
condition|)
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|GT
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|gte
condition|)
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|GE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
break|break;
case|case
name|DEF
case|:
if|if
condition|(
name|eq
condition|)
block|{
if|if
condition|(
name|expremd1
operator|.
name|isNull
condition|)
block|{
name|execute
operator|.
name|ifNull
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|expremd0
operator|.
name|isNull
operator|&&
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_EQ_CALL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ne
condition|)
block|{
if|if
condition|(
name|expremd1
operator|.
name|isNull
condition|)
block|{
name|execute
operator|.
name|ifNonNull
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|expremd0
operator|.
name|isNull
operator|&&
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_EQ_CALL
argument_list|)
expr_stmt|;
name|execute
operator|.
name|ifZCmp
argument_list|(
name|GeneratorAdapter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lt
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_LT_CALL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lte
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_LTE_CALL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gt
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_GT_CALL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gte
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_GTE_CALL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|writejump
operator|=
name|expremd1
operator|.
name|isNull
operator|||
name|ne
operator|||
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|branch
operator|!=
literal|null
operator|&&
operator|!
name|writejump
condition|)
block|{
name|execute
operator|.
name|ifZCmp
argument_list|(
name|GeneratorAdapter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
if|if
condition|(
name|eq
condition|)
block|{
if|if
condition|(
name|expremd1
operator|.
name|isNull
condition|)
block|{
name|execute
operator|.
name|ifNull
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|CHECKEQUALS
argument_list|)
expr_stmt|;
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|ifZCmp
argument_list|(
name|GeneratorAdapter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
name|writejump
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ne
condition|)
block|{
if|if
condition|(
name|expremd1
operator|.
name|isNull
condition|)
block|{
name|execute
operator|.
name|ifNonNull
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|CHECKEQUALS
argument_list|)
expr_stmt|;
name|execute
operator|.
name|ifZCmp
argument_list|(
name|GeneratorAdapter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|ifCmp
argument_list|(
name|type
argument_list|,
name|GeneratorAdapter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|writejump
condition|)
block|{
name|execute
operator|.
name|push
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|execute
operator|.
name|goTo
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|jump
argument_list|)
expr_stmt|;
name|execute
operator|.
name|push
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|compemd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processBool
name|void
name|processBool
parameter_list|(
specifier|final
name|BoolContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|boolemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|boolemd
operator|.
name|postConst
decl_stmt|;
specifier|final
name|Object
name|preConst
init|=
name|boolemd
operator|.
name|preConst
decl_stmt|;
specifier|final
name|Branch
name|branch
init|=
name|utility
operator|.
name|getBranch
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|postConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|boolean
operator|)
name|postConst
operator|&&
name|branch
operator|.
name|tru
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|mark
argument_list|(
name|branch
operator|.
name|tru
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|boolean
operator|)
name|postConst
operator|&&
name|branch
operator|.
name|fals
operator|!=
literal|null
condition|)
block|{
name|execute
operator|.
name|mark
argument_list|(
name|branch
operator|.
name|fals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|preConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|preConst
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|boolemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|BOOLAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Branch
name|local
init|=
name|utility
operator|.
name|markBranch
argument_list|(
name|ctx
argument_list|,
name|exprctx0
argument_list|,
name|exprctx1
argument_list|)
decl_stmt|;
name|local
operator|.
name|fals
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
specifier|final
name|Label
name|end
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
name|execute
operator|.
name|push
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|execute
operator|.
name|goTo
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|local
operator|.
name|fals
argument_list|)
expr_stmt|;
name|execute
operator|.
name|push
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BOOLOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Branch
name|branch0
init|=
name|utility
operator|.
name|markBranch
argument_list|(
name|ctx
argument_list|,
name|exprctx0
argument_list|)
decl_stmt|;
name|branch0
operator|.
name|tru
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
specifier|final
name|Branch
name|branch1
init|=
name|utility
operator|.
name|markBranch
argument_list|(
name|ctx
argument_list|,
name|exprctx1
argument_list|)
decl_stmt|;
name|branch1
operator|.
name|fals
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
specifier|final
name|Label
name|aend
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|branch0
operator|.
name|tru
argument_list|)
expr_stmt|;
name|execute
operator|.
name|push
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|execute
operator|.
name|goTo
argument_list|(
name|aend
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|branch1
operator|.
name|fals
argument_list|)
expr_stmt|;
name|execute
operator|.
name|push
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|aend
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|boolemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ctx
operator|.
name|BOOLAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Branch
name|branch0
init|=
name|utility
operator|.
name|markBranch
argument_list|(
name|ctx
argument_list|,
name|exprctx0
argument_list|)
decl_stmt|;
name|branch0
operator|.
name|fals
operator|=
name|branch
operator|.
name|fals
operator|==
literal|null
condition|?
operator|new
name|Label
argument_list|()
else|:
name|branch
operator|.
name|fals
expr_stmt|;
specifier|final
name|Branch
name|branch1
init|=
name|utility
operator|.
name|markBranch
argument_list|(
name|ctx
argument_list|,
name|exprctx1
argument_list|)
decl_stmt|;
name|branch1
operator|.
name|tru
operator|=
name|branch
operator|.
name|tru
expr_stmt|;
name|branch1
operator|.
name|fals
operator|=
name|branch
operator|.
name|fals
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
if|if
condition|(
name|branch
operator|.
name|fals
operator|==
literal|null
condition|)
block|{
name|execute
operator|.
name|mark
argument_list|(
name|branch0
operator|.
name|fals
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BOOLOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Branch
name|branch0
init|=
name|utility
operator|.
name|markBranch
argument_list|(
name|ctx
argument_list|,
name|exprctx0
argument_list|)
decl_stmt|;
name|branch0
operator|.
name|tru
operator|=
name|branch
operator|.
name|tru
operator|==
literal|null
condition|?
operator|new
name|Label
argument_list|()
else|:
name|branch
operator|.
name|tru
expr_stmt|;
specifier|final
name|Branch
name|branch1
init|=
name|utility
operator|.
name|markBranch
argument_list|(
name|ctx
argument_list|,
name|exprctx1
argument_list|)
decl_stmt|;
name|branch1
operator|.
name|tru
operator|=
name|branch
operator|.
name|tru
expr_stmt|;
name|branch1
operator|.
name|fals
operator|=
name|branch
operator|.
name|fals
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
if|if
condition|(
name|branch
operator|.
name|tru
operator|==
literal|null
condition|)
block|{
name|execute
operator|.
name|mark
argument_list|(
name|branch0
operator|.
name|tru
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|processConditional
name|void
name|processConditional
parameter_list|(
specifier|final
name|ConditionalContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|condemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Branch
name|branch
init|=
name|utility
operator|.
name|getBranch
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|expr0
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|expr1
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|expr2
init|=
name|ctx
operator|.
name|expression
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Branch
name|local
init|=
name|utility
operator|.
name|markBranch
argument_list|(
name|ctx
argument_list|,
name|expr0
argument_list|)
decl_stmt|;
name|local
operator|.
name|fals
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|local
operator|.
name|end
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|utility
operator|.
name|copyBranch
argument_list|(
name|branch
argument_list|,
name|expr1
argument_list|,
name|expr2
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|visit
argument_list|(
name|expr0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|expr1
argument_list|)
expr_stmt|;
name|execute
operator|.
name|goTo
argument_list|(
name|local
operator|.
name|end
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|local
operator|.
name|fals
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|expr2
argument_list|)
expr_stmt|;
name|execute
operator|.
name|mark
argument_list|(
name|local
operator|.
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|condemd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processAssignment
name|void
name|processAssignment
parameter_list|(
specifier|final
name|AssignmentContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|ctx
operator|.
name|extstart
argument_list|()
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|processIncrement
name|void
name|processIncrement
parameter_list|(
specifier|final
name|IncrementContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|incremd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|postConst
init|=
name|incremd
operator|.
name|postConst
decl_stmt|;
if|if
condition|(
name|postConst
operator|==
literal|null
condition|)
block|{
name|utility
operator|.
name|writeNumeric
argument_list|(
name|ctx
argument_list|,
name|incremd
operator|.
name|preConst
argument_list|)
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|incremd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|postConst
argument_list|)
expr_stmt|;
block|}
name|utility
operator|.
name|checkWriteBranch
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

