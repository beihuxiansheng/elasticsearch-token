begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|LeafSearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|LeafDocLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|LeafSearchLookup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * ScriptImpl can be used as either an {@link ExecutableScript} or a {@link LeafSearchScript}  * to run a previously compiled Painless script.  */
end_comment

begin_class
DECL|class|ScriptImpl
specifier|final
class|class
name|ScriptImpl
implements|implements
name|ExecutableScript
implements|,
name|LeafSearchScript
block|{
comment|/**      * The Painless Executable script that can be run.      */
DECL|field|executable
specifier|private
specifier|final
name|Executable
name|executable
decl_stmt|;
comment|/**      * A map that can be used to access input parameters at run-time.      */
DECL|field|variables
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variables
decl_stmt|;
comment|/**      * The lookup is used to access search field values at run-time.      */
DECL|field|lookup
specifier|private
specifier|final
name|LeafSearchLookup
name|lookup
decl_stmt|;
comment|/**      * the 'doc' object accessed by the script, if available.      */
DECL|field|doc
specifier|private
specifier|final
name|LeafDocLookup
name|doc
decl_stmt|;
comment|/**      * Current scorer being used      * @see #setScorer(Scorer)      */
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
comment|/**      * Creates a ScriptImpl for the a previously compiled Painless script.      * @param executable The previously compiled Painless script.      * @param vars The initial variables to run the script with.      * @param lookup The lookup to allow search fields to be available if this is run as a search script.      */
DECL|method|ScriptImpl
name|ScriptImpl
parameter_list|(
specifier|final
name|Executable
name|executable
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|,
specifier|final
name|LeafSearchLookup
name|lookup
parameter_list|)
block|{
name|this
operator|.
name|executable
operator|=
name|executable
expr_stmt|;
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
name|this
operator|.
name|variables
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|vars
operator|!=
literal|null
condition|)
block|{
name|variables
operator|.
name|putAll
argument_list|(
name|vars
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lookup
operator|!=
literal|null
condition|)
block|{
name|variables
operator|.
name|putAll
argument_list|(
name|lookup
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|lookup
operator|.
name|doc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Set a variable for the script to be run against.      * @param name The variable name.      * @param value The variable value.      */
annotation|@
name|Override
DECL|method|setNextVar
specifier|public
name|void
name|setNextVar
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
name|variables
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Run the script.      * @return The script result.      */
annotation|@
name|Override
DECL|method|run
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|executable
operator|.
name|execute
argument_list|(
name|variables
argument_list|,
name|scorer
argument_list|,
name|doc
argument_list|)
return|;
block|}
comment|/**      * Run the script.      * @return The script result as a double.      */
annotation|@
name|Override
DECL|method|runAsDouble
specifier|public
name|double
name|runAsDouble
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|run
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
comment|/**      * Run the script.      * @return The script result as a float.      */
annotation|@
name|Override
DECL|method|runAsFloat
specifier|public
name|float
name|runAsFloat
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|run
argument_list|()
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * Run the script.      * @return The script result as a long.      */
annotation|@
name|Override
DECL|method|runAsLong
specifier|public
name|long
name|runAsLong
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|run
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|/**      * Sets the scorer to be accessible within a script.      * @param scorer The scorer used for a search.      */
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
specifier|final
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
comment|/**      * Sets the current document.      * @param doc The current document.      */
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
specifier|final
name|int
name|doc
parameter_list|)
block|{
if|if
condition|(
name|lookup
operator|!=
literal|null
condition|)
block|{
name|lookup
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the current source.      * @param source The current source.      */
annotation|@
name|Override
DECL|method|setSource
specifier|public
name|void
name|setSource
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
if|if
condition|(
name|lookup
operator|!=
literal|null
condition|)
block|{
name|lookup
operator|.
name|source
argument_list|()
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

