begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_class
DECL|class|AnalyzerPromoter
class|class
name|AnalyzerPromoter
block|{
DECL|field|definition
specifier|private
specifier|final
name|Definition
name|definition
decl_stmt|;
DECL|method|AnalyzerPromoter
name|AnalyzerPromoter
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
block|}
DECL|method|promoteNumeric
name|Type
name|promoteNumeric
parameter_list|(
specifier|final
name|Type
name|from
parameter_list|,
specifier|final
name|boolean
name|decimal
parameter_list|,
specifier|final
name|boolean
name|primitive
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|from
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort
operator|==
name|Sort
operator|.
name|NUMBER
operator|)
operator|&&
name|decimal
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|doubleType
else|:
name|definition
operator|.
name|doubleobjType
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
operator|)
operator|&&
name|decimal
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|floatType
else|:
name|definition
operator|.
name|floatobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort
operator|==
name|Sort
operator|.
name|NUMBER
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|longType
else|:
name|definition
operator|.
name|longobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|.
name|numeric
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|promoteNumeric
name|Type
name|promoteNumeric
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|,
specifier|final
name|boolean
name|decimal
parameter_list|,
specifier|final
name|boolean
name|primitive
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
if|if
condition|(
name|decimal
condition|)
block|{
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|NUMBER
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|NUMBER
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|doubleType
else|:
name|definition
operator|.
name|doubleobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|floatType
else|:
name|definition
operator|.
name|floatobjType
return|;
block|}
block|}
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|NUMBER
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|NUMBER
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|longType
else|:
name|definition
operator|.
name|longobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|promoteAdd
name|Type
name|promoteAdd
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|STRING
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
return|return
name|definition
operator|.
name|stringType
return|;
block|}
return|return
name|promoteNumeric
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|promoteXor
name|Type
name|promoteXor
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|.
name|bool
operator|||
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|definition
operator|.
name|booleanType
return|;
block|}
return|return
name|promoteNumeric
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|promoteEquality
name|Type
name|promoteEquality
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
specifier|final
name|boolean
name|primitive
init|=
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
decl_stmt|;
if|if
condition|(
name|sort0
operator|.
name|bool
operator|&&
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|booleanType
else|:
name|definition
operator|.
name|booleanobjType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
return|return
name|promoteNumeric
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|,
literal|true
argument_list|,
name|primitive
argument_list|)
return|;
block|}
return|return
name|definition
operator|.
name|objectType
return|;
block|}
DECL|method|promoteReference
name|Type
name|promoteReference
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
condition|)
block|{
if|if
condition|(
name|sort0
operator|.
name|bool
operator|&&
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|definition
operator|.
name|booleanType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
return|return
name|promoteNumeric
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
return|return
name|definition
operator|.
name|objectType
return|;
block|}
DECL|method|promoteConditional
name|Type
name|promoteConditional
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|,
specifier|final
name|Object
name|const0
parameter_list|,
specifier|final
name|Object
name|const1
parameter_list|)
block|{
if|if
condition|(
name|from0
operator|.
name|equals
argument_list|(
name|from1
argument_list|)
condition|)
block|{
return|return
name|from0
return|;
block|}
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
specifier|final
name|boolean
name|primitive
init|=
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
decl_stmt|;
if|if
condition|(
name|sort0
operator|.
name|bool
operator|&&
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|booleanType
else|:
name|definition
operator|.
name|booleanobjType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|doubleType
else|:
name|definition
operator|.
name|doubleobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|floatType
else|:
name|definition
operator|.
name|floatobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG_OBJ
condition|)
block|{
return|return
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
condition|?
name|definition
operator|.
name|longType
else|:
name|definition
operator|.
name|longobjType
return|;
block|}
else|else
block|{
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|short
name|constant
init|=
operator|(
name|short
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|short
name|constant
init|=
operator|(
name|short
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Short
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|charType
else|:
name|definition
operator|.
name|charobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Character
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Character
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Short
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Character
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Character
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
block|}
block|}
specifier|final
name|Pair
name|pair
init|=
operator|new
name|Pair
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|)
decl_stmt|;
specifier|final
name|Type
name|bound
init|=
name|definition
operator|.
name|bounds
operator|.
name|get
argument_list|(
name|pair
argument_list|)
decl_stmt|;
return|return
name|bound
operator|==
literal|null
condition|?
name|definition
operator|.
name|objectType
else|:
name|bound
return|;
block|}
block|}
end_class

end_unit

