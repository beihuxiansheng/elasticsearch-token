begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Compiler
operator|.
name|Loader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|GeneratorAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|OBJECT_TYPE
import|;
end_import

begin_comment
comment|/**  * Implementation of a ScriptEngine for the Painless language.  */
end_comment

begin_class
DECL|class|PainlessScriptEngine
specifier|public
specifier|final
class|class
name|PainlessScriptEngine
extends|extends
name|AbstractComponent
implements|implements
name|ScriptEngine
block|{
comment|/**      * Standard name of the Painless language.      */
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"painless"
decl_stmt|;
comment|/**      * Permissions context used during compilation.      */
DECL|field|COMPILATION_CONTEXT
specifier|private
specifier|static
specifier|final
name|AccessControlContext
name|COMPILATION_CONTEXT
decl_stmt|;
comment|/**      * Setup the allowed permissions.      */
static|static
block|{
specifier|final
name|Permissions
name|none
init|=
operator|new
name|Permissions
argument_list|()
decl_stmt|;
name|none
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|COMPILATION_CONTEXT
operator|=
operator|new
name|AccessControlContext
argument_list|(
operator|new
name|ProtectionDomain
index|[]
block|{
operator|new
name|ProtectionDomain
argument_list|(
literal|null
argument_list|,
name|none
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Default compiler settings to be used. Note that {@link CompilerSettings} is mutable but this instance shouldn't be mutated outside      * of {@link PainlessScriptEngine#PainlessScriptEngine(Settings, Collection)}.      */
DECL|field|defaultCompilerSettings
specifier|private
specifier|final
name|CompilerSettings
name|defaultCompilerSettings
init|=
operator|new
name|CompilerSettings
argument_list|()
decl_stmt|;
DECL|field|contextsToCompilers
specifier|private
specifier|final
name|Map
argument_list|<
name|ScriptContext
argument_list|<
name|?
argument_list|>
argument_list|,
name|Compiler
argument_list|>
name|contextsToCompilers
decl_stmt|;
comment|/**      * Constructor.      * @param settings The settings to initialize the engine with.      */
DECL|method|PainlessScriptEngine
specifier|public
name|PainlessScriptEngine
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Collection
argument_list|<
name|ScriptContext
argument_list|<
name|?
argument_list|>
argument_list|>
name|contexts
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|defaultCompilerSettings
operator|.
name|setRegexesEnabled
argument_list|(
name|CompilerSettings
operator|.
name|REGEX_ENABLED
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ScriptContext
argument_list|<
name|?
argument_list|>
argument_list|,
name|Compiler
argument_list|>
name|contextsToCompilers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptContext
argument_list|<
name|?
argument_list|>
name|context
range|:
name|contexts
control|)
block|{
if|if
condition|(
name|context
operator|.
name|instanceClazz
operator|.
name|equals
argument_list|(
name|SearchScript
operator|.
name|class
argument_list|)
operator|||
name|context
operator|.
name|instanceClazz
operator|.
name|equals
argument_list|(
name|ExecutableScript
operator|.
name|class
argument_list|)
condition|)
block|{
name|contextsToCompilers
operator|.
name|put
argument_list|(
name|context
argument_list|,
operator|new
name|Compiler
argument_list|(
name|GenericElasticsearchScript
operator|.
name|class
argument_list|,
name|Definition
operator|.
name|BUILTINS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contextsToCompilers
operator|.
name|put
argument_list|(
name|context
argument_list|,
operator|new
name|Compiler
argument_list|(
name|context
operator|.
name|instanceClazz
argument_list|,
name|Definition
operator|.
name|BUILTINS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|contextsToCompilers
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|contextsToCompilers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the type name(s) for the language.      * @return Always contains only the single name of the language.      */
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
comment|/**      * When a script is anonymous (inline), we give it this name.      */
DECL|field|INLINE_NAME
specifier|static
specifier|final
name|String
name|INLINE_NAME
init|=
literal|"<inline>"
decl_stmt|;
annotation|@
name|Override
DECL|method|compile
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|compile
parameter_list|(
name|String
name|scriptName
parameter_list|,
name|String
name|scriptSource
parameter_list|,
name|ScriptContext
argument_list|<
name|T
argument_list|>
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|instanceClazz
operator|.
name|equals
argument_list|(
name|SearchScript
operator|.
name|class
argument_list|)
condition|)
block|{
name|GenericElasticsearchScript
name|painlessScript
init|=
operator|(
name|GenericElasticsearchScript
operator|)
name|compile
argument_list|(
name|contextsToCompilers
operator|.
name|get
argument_list|(
name|context
argument_list|)
argument_list|,
name|scriptName
argument_list|,
name|scriptSource
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|SearchScript
operator|.
name|Factory
name|factory
init|=
parameter_list|(
name|p
parameter_list|,
name|lookup
parameter_list|)
lambda|->
operator|new
name|SearchScript
operator|.
name|LeafFactory
argument_list|()
block|{
block|@Override                 public SearchScript newInstance(final LeafReaderContext context
init|)
block|{
return|return
operator|new
name|ScriptImpl
argument_list|(
name|painlessScript
argument_list|,
name|p
argument_list|,
name|lookup
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needs_score
parameter_list|()
block|{
return|return
name|painlessScript
operator|.
name|needs_score
argument_list|()
return|;
block|}
block|}
empty_stmt|;
return|return
name|context
operator|.
name|factoryClazz
operator|.
name|cast
argument_list|(
name|factory
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|instanceClazz
operator|.
name|equals
argument_list|(
name|ExecutableScript
operator|.
name|class
argument_list|)
condition|)
block|{
name|GenericElasticsearchScript
name|painlessScript
init|=
operator|(
name|GenericElasticsearchScript
operator|)
name|compile
argument_list|(
name|contextsToCompilers
operator|.
name|get
argument_list|(
name|context
argument_list|)
argument_list|,
name|scriptName
argument_list|,
name|scriptSource
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|ExecutableScript
operator|.
name|Factory
name|factory
init|=
parameter_list|(
name|p
parameter_list|)
lambda|->
operator|new
name|ScriptImpl
argument_list|(
name|painlessScript
argument_list|,
name|p
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|factoryClazz
operator|.
name|cast
argument_list|(
name|factory
argument_list|)
return|;
block|}
else|else
block|{
comment|// Check we ourselves are not being called by unprivileged code.
name|SpecialPermission
operator|.
name|check
argument_list|()
expr_stmt|;
comment|// Create our loader (which loads compiled code with no permissions).
specifier|final
name|Loader
name|loader
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Loader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Loader
name|run
parameter_list|()
block|{
return|return
operator|new
name|Loader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|compile
argument_list|(
name|contextsToCompilers
operator|.
name|get
argument_list|(
name|context
argument_list|)
argument_list|,
name|loader
argument_list|,
name|scriptName
argument_list|,
name|scriptSource
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|statefulFactoryClazz
operator|!=
literal|null
condition|)
block|{
return|return
name|generateFactory
argument_list|(
name|loader
argument_list|,
name|context
argument_list|,
name|generateStatefulFactory
argument_list|(
name|loader
argument_list|,
name|context
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|generateFactory
argument_list|(
name|loader
argument_list|,
name|context
argument_list|,
name|WriterConstants
operator|.
name|CLASS_TYPE
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**      * Generates a stateful factory class that will return script instances.  Acts as a middle man between      * the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that      * the stateless factory can be used for caching and the stateful factory can act as a cache for new      * script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to      * define the factory method to create new instances of the {@link ScriptContext#instanceClazz}.      * @param loader The {@link ClassLoader} that is used to define the factory class and script class.      * @param context The {@link ScriptContext}'s semantics are used to define the factory class.      * @param<T> The factory class.      * @return A factory class that will return script instances.      */
end_comment

begin_function
DECL|method|generateStatefulFactory
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Type
name|generateStatefulFactory
parameter_list|(
name|Loader
name|loader
parameter_list|,
name|ScriptContext
argument_list|<
name|T
argument_list|>
name|context
parameter_list|)
block|{
name|int
name|classFrames
init|=
name|ClassWriter
operator|.
name|COMPUTE_FRAMES
operator||
name|ClassWriter
operator|.
name|COMPUTE_MAXS
decl_stmt|;
name|int
name|classAccess
init|=
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_SUPER
operator||
name|Opcodes
operator|.
name|ACC_FINAL
decl_stmt|;
name|String
name|interfaceBase
init|=
name|Type
operator|.
name|getType
argument_list|(
name|context
operator|.
name|statefulFactoryClazz
argument_list|)
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|interfaceBase
operator|+
literal|"$StatefulFactory"
decl_stmt|;
name|String
name|classInterfaces
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|interfaceBase
block|}
decl_stmt|;
name|ClassWriter
name|writer
init|=
operator|new
name|ClassWriter
argument_list|(
name|classFrames
argument_list|)
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|WriterConstants
operator|.
name|CLASS_VERSION
argument_list|,
name|classAccess
argument_list|,
name|className
argument_list|,
literal|null
argument_list|,
name|OBJECT_TYPE
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|classInterfaces
argument_list|)
expr_stmt|;
name|Method
name|newFactory
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|context
operator|.
name|factoryClazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"newFactory"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|newFactory
operator|=
name|method
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|newFactory
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|;
operator|++
name|count
control|)
block|{
name|writer
operator|.
name|visitField
argument_list|(
name|Opcodes
operator|.
name|ACC_PRIVATE
operator||
name|Opcodes
operator|.
name|ACC_FINAL
argument_list|,
literal|"$arg"
operator|+
name|count
argument_list|,
name|Type
operator|.
name|getType
argument_list|(
name|newFactory
operator|.
name|getParameterTypes
argument_list|()
index|[
name|count
index|]
argument_list|)
operator|.
name|getDescriptor
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
block|}
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|base
init|=
operator|new
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|(
literal|"<init>"
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|void
operator|.
name|class
argument_list|)
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|init
init|=
operator|new
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|(
literal|"<init>"
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|void
operator|.
name|class
argument_list|,
name|newFactory
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
decl_stmt|;
name|GeneratorAdapter
name|constructor
init|=
operator|new
name|GeneratorAdapter
argument_list|(
name|Opcodes
operator|.
name|ASM5
argument_list|,
name|init
argument_list|,
name|writer
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
name|init
operator|.
name|getName
argument_list|()
argument_list|,
name|init
operator|.
name|getDescriptor
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|constructor
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|loadThis
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|invokeConstructor
argument_list|(
name|OBJECT_TYPE
argument_list|,
name|base
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|newFactory
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|;
operator|++
name|count
control|)
block|{
name|constructor
operator|.
name|loadThis
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|loadArg
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|putField
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
name|className
argument_list|)
argument_list|,
literal|"$arg"
operator|+
name|count
argument_list|,
name|Type
operator|.
name|getType
argument_list|(
name|newFactory
operator|.
name|getParameterTypes
argument_list|()
index|[
name|count
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|constructor
operator|.
name|returnValue
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|endMethod
argument_list|()
expr_stmt|;
name|Method
name|newInstance
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|context
operator|.
name|statefulFactoryClazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"newInstance"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|newInstance
operator|=
name|method
expr_stmt|;
break|break;
block|}
block|}
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|instance
init|=
operator|new
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|(
name|newInstance
operator|.
name|getName
argument_list|()
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|newInstance
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|newInstance
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|newFactory
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|newInstance
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|constru
init|=
operator|new
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|(
literal|"<init>"
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|void
operator|.
name|class
argument_list|,
name|parameters
operator|.
name|toArray
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
end_function

begin_expr_stmt
unit|)
operator|.
name|toMethodDescriptorString
argument_list|()
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|GeneratorAdapter
name|adapter
init|=
operator|new
name|GeneratorAdapter
argument_list|(
name|Opcodes
operator|.
name|ASM5
argument_list|,
name|instance
argument_list|,
name|writer
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_FINAL
argument_list|,
name|instance
operator|.
name|getName
argument_list|()
argument_list|,
name|instance
operator|.
name|getDescriptor
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|adapter
operator|.
name|visitCode
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|adapter
operator|.
name|newInstance
argument_list|(
name|WriterConstants
operator|.
name|CLASS_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|adapter
operator|.
name|dup
argument_list|()
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|newFactory
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|;
operator|++
name|count
control|)
block|{
name|adapter
operator|.
name|loadThis
argument_list|()
expr_stmt|;
name|adapter
operator|.
name|getField
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
name|className
argument_list|)
argument_list|,
literal|"$arg"
operator|+
name|count
argument_list|,
name|Type
operator|.
name|getType
argument_list|(
name|newFactory
operator|.
name|getParameterTypes
argument_list|()
index|[
name|count
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|adapter
operator|.
name|loadArgs
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|adapter
operator|.
name|invokeConstructor
argument_list|(
name|WriterConstants
operator|.
name|CLASS_TYPE
argument_list|,
name|constru
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|adapter
operator|.
name|returnValue
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|adapter
operator|.
name|endMethod
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|writer
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|loader
operator|.
name|defineFactory
argument_list|(
name|className
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|writer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Type
operator|.
name|getType
argument_list|(
name|className
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/**      * Generates a factory class that will return script instances or stateful factories.      * Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method      * to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method      * to create new factories of the {@link ScriptContext#statefulFactoryClazz}.      * @param loader The {@link ClassLoader} that is used to define the factory class and script class.      * @param context The {@link ScriptContext}'s semantics are used to define the factory class.      * @param classType The type to be instaniated in the newFactory or newInstance method.  Depends      *                  on whether a {@link ScriptContext#statefulFactoryClazz} is specified.      * @param<T> The factory class.      * @return A factory class that will return script instances.      */
end_comment

begin_function
DECL|method|generateFactory
unit|private
parameter_list|<
name|T
parameter_list|>
name|T
name|generateFactory
parameter_list|(
name|Loader
name|loader
parameter_list|,
name|ScriptContext
argument_list|<
name|T
argument_list|>
name|context
parameter_list|,
name|Type
name|classType
parameter_list|)
block|{
name|int
name|classFrames
init|=
name|ClassWriter
operator|.
name|COMPUTE_FRAMES
operator||
name|ClassWriter
operator|.
name|COMPUTE_MAXS
decl_stmt|;
name|int
name|classAccess
init|=
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_SUPER
operator||
name|Opcodes
operator|.
name|ACC_FINAL
decl_stmt|;
name|String
name|interfaceBase
init|=
name|Type
operator|.
name|getType
argument_list|(
name|context
operator|.
name|factoryClazz
argument_list|)
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|interfaceBase
operator|+
literal|"$Factory"
decl_stmt|;
name|String
name|classInterfaces
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|interfaceBase
block|}
decl_stmt|;
name|ClassWriter
name|writer
init|=
operator|new
name|ClassWriter
argument_list|(
name|classFrames
argument_list|)
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|WriterConstants
operator|.
name|CLASS_VERSION
argument_list|,
name|classAccess
argument_list|,
name|className
argument_list|,
literal|null
argument_list|,
name|OBJECT_TYPE
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|classInterfaces
argument_list|)
expr_stmt|;
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|init
init|=
operator|new
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|(
literal|"<init>"
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|void
operator|.
name|class
argument_list|)
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
decl_stmt|;
name|GeneratorAdapter
name|constructor
init|=
operator|new
name|GeneratorAdapter
argument_list|(
name|Opcodes
operator|.
name|ASM5
argument_list|,
name|init
argument_list|,
name|writer
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
name|init
operator|.
name|getName
argument_list|()
argument_list|,
name|init
operator|.
name|getDescriptor
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|constructor
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|loadThis
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|invokeConstructor
argument_list|(
name|OBJECT_TYPE
argument_list|,
name|init
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|returnValue
argument_list|()
expr_stmt|;
name|constructor
operator|.
name|endMethod
argument_list|()
expr_stmt|;
name|Method
name|reflect
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|context
operator|.
name|factoryClazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"newInstance"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|reflect
operator|=
name|method
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
literal|"newFactory"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|reflect
operator|=
name|method
expr_stmt|;
break|break;
block|}
block|}
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|instance
init|=
operator|new
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|(
name|reflect
operator|.
name|getName
argument_list|()
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|reflect
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|reflect
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|constru
init|=
operator|new
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
argument_list|(
literal|"<init>"
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|void
operator|.
name|class
argument_list|,
name|reflect
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
decl_stmt|;
name|GeneratorAdapter
name|adapter
init|=
operator|new
name|GeneratorAdapter
argument_list|(
name|Opcodes
operator|.
name|ASM5
argument_list|,
name|instance
argument_list|,
name|writer
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_FINAL
argument_list|,
name|instance
operator|.
name|getName
argument_list|()
argument_list|,
name|instance
operator|.
name|getDescriptor
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|adapter
operator|.
name|newInstance
argument_list|(
name|classType
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|dup
argument_list|()
expr_stmt|;
name|adapter
operator|.
name|loadArgs
argument_list|()
expr_stmt|;
name|adapter
operator|.
name|invokeConstructor
argument_list|(
name|classType
argument_list|,
name|constru
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|returnValue
argument_list|()
expr_stmt|;
name|adapter
operator|.
name|endMethod
argument_list|()
expr_stmt|;
name|writer
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|factory
init|=
name|loader
operator|.
name|defineFactory
argument_list|(
name|className
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|writer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|context
operator|.
name|factoryClazz
operator|.
name|cast
argument_list|(
name|factory
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
comment|// Catch everything to let the user know this is something caused internally.
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An internal error occurred attempting to define the factory class ["
operator|+
name|className
operator|+
literal|"]."
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|compile
name|Object
name|compile
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|String
name|scriptName
parameter_list|,
name|String
name|source
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
specifier|final
name|CompilerSettings
name|compilerSettings
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Use the default settings.
name|compilerSettings
operator|=
name|defaultCompilerSettings
expr_stmt|;
block|}
else|else
block|{
comment|// Use custom settings specified by params.
name|compilerSettings
operator|=
operator|new
name|CompilerSettings
argument_list|()
expr_stmt|;
comment|// Except regexes enabled - this is a node level setting and can't be changed in the request.
name|compilerSettings
operator|.
name|setRegexesEnabled
argument_list|(
name|defaultCompilerSettings
operator|.
name|areRegexesEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|copy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|copy
operator|.
name|remove
argument_list|(
name|CompilerSettings
operator|.
name|MAX_LOOP_COUNTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|compilerSettings
operator|.
name|setMaxLoopCounter
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|copy
operator|.
name|remove
argument_list|(
name|CompilerSettings
operator|.
name|PICKY
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|compilerSettings
operator|.
name|setPicky
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|copy
operator|.
name|remove
argument_list|(
name|CompilerSettings
operator|.
name|INITIAL_CALL_SITE_DEPTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|compilerSettings
operator|.
name|setInitialCallSiteDepth
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|copy
operator|.
name|remove
argument_list|(
name|CompilerSettings
operator|.
name|REGEX_ENABLED
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[painless.regex.enabled] can only be set on node startup."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|copy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized compile-time parameter(s): "
operator|+
name|copy
argument_list|)
throw|;
block|}
block|}
comment|// Check we ourselves are not being called by unprivileged code.
name|SpecialPermission
operator|.
name|check
argument_list|()
expr_stmt|;
comment|// Create our loader (which loads compiled code with no permissions).
specifier|final
name|Loader
name|loader
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Loader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Loader
name|run
parameter_list|()
block|{
return|return
operator|new
name|Loader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Drop all permissions to actually compile the code itself.
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|String
name|name
init|=
name|scriptName
operator|==
literal|null
condition|?
name|INLINE_NAME
else|:
name|scriptName
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|compiler
operator|.
name|compile
argument_list|(
name|loader
argument_list|,
name|name
argument_list|,
name|source
argument_list|,
name|compilerSettings
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
comment|// Catch everything to let the user know this is something caused internally.
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An internal error occurred attempting to define the script ["
operator|+
name|name
operator|+
literal|"]."
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
name|COMPILATION_CONTEXT
argument_list|)
return|;
comment|// Note that it is safe to catch any of the following errors since Painless is stateless.
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
decl||
name|StackOverflowError
decl||
name|VerifyError
decl||
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convertToScriptException
argument_list|(
name|scriptName
operator|==
literal|null
condition|?
name|source
else|:
name|scriptName
argument_list|,
name|source
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|compile
name|void
name|compile
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|Loader
name|loader
parameter_list|,
name|String
name|scriptName
parameter_list|,
name|String
name|source
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
specifier|final
name|CompilerSettings
name|compilerSettings
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Use the default settings.
name|compilerSettings
operator|=
name|defaultCompilerSettings
expr_stmt|;
block|}
else|else
block|{
comment|// Use custom settings specified by params.
name|compilerSettings
operator|=
operator|new
name|CompilerSettings
argument_list|()
expr_stmt|;
comment|// Except regexes enabled - this is a node level setting and can't be changed in the request.
name|compilerSettings
operator|.
name|setRegexesEnabled
argument_list|(
name|defaultCompilerSettings
operator|.
name|areRegexesEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|copy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|copy
operator|.
name|remove
argument_list|(
name|CompilerSettings
operator|.
name|MAX_LOOP_COUNTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|compilerSettings
operator|.
name|setMaxLoopCounter
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|copy
operator|.
name|remove
argument_list|(
name|CompilerSettings
operator|.
name|PICKY
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|compilerSettings
operator|.
name|setPicky
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|copy
operator|.
name|remove
argument_list|(
name|CompilerSettings
operator|.
name|INITIAL_CALL_SITE_DEPTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|compilerSettings
operator|.
name|setInitialCallSiteDepth
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|copy
operator|.
name|remove
argument_list|(
name|CompilerSettings
operator|.
name|REGEX_ENABLED
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[painless.regex.enabled] can only be set on node startup."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|copy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized compile-time parameter(s): "
operator|+
name|copy
argument_list|)
throw|;
block|}
block|}
try|try
block|{
comment|// Drop all permissions to actually compile the code itself.
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|String
name|name
init|=
name|scriptName
operator|==
literal|null
condition|?
name|INLINE_NAME
else|:
name|scriptName
decl_stmt|;
name|compiler
operator|.
name|compile
argument_list|(
name|loader
argument_list|,
name|name
argument_list|,
name|source
argument_list|,
name|compilerSettings
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|COMPILATION_CONTEXT
argument_list|)
expr_stmt|;
comment|// Note that it is safe to catch any of the following errors since Painless is stateless.
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
decl||
name|StackOverflowError
decl||
name|VerifyError
decl||
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convertToScriptException
argument_list|(
name|scriptName
operator|==
literal|null
condition|?
name|source
else|:
name|scriptName
argument_list|,
name|source
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|convertToScriptException
specifier|private
name|ScriptException
name|convertToScriptException
parameter_list|(
name|String
name|scriptName
parameter_list|,
name|String
name|scriptSource
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
comment|// create a script stack: this is just the script portion
name|List
argument_list|<
name|String
argument_list|>
name|scriptStack
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|element
range|:
name|t
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
if|if
condition|(
name|WriterConstants
operator|.
name|CLASS_NAME
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
comment|// found the script portion
name|int
name|offset
init|=
name|element
operator|.
name|getLineNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|==
operator|-
literal|1
condition|)
block|{
name|scriptStack
operator|.
name|add
argument_list|(
literal|"<<< unknown portion of script>>>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|--
expr_stmt|;
comment|// offset is 1 based, line numbers must be!
name|int
name|startOffset
init|=
name|getPreviousStatement
argument_list|(
name|scriptSource
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|endOffset
init|=
name|getNextStatement
argument_list|(
name|scriptSource
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|StringBuilder
name|snippet
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|startOffset
operator|>
literal|0
condition|)
block|{
name|snippet
operator|.
name|append
argument_list|(
literal|"... "
argument_list|)
expr_stmt|;
block|}
name|snippet
operator|.
name|append
argument_list|(
name|scriptSource
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|endOffset
operator|<
name|scriptSource
operator|.
name|length
argument_list|()
condition|)
block|{
name|snippet
operator|.
name|append
argument_list|(
literal|" ..."
argument_list|)
expr_stmt|;
block|}
name|scriptStack
operator|.
name|add
argument_list|(
name|snippet
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|pointer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|startOffset
operator|>
literal|0
condition|)
block|{
name|pointer
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|startOffset
init|;
name|i
operator|<
name|offset
condition|;
name|i
operator|++
control|)
block|{
name|pointer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|pointer
operator|.
name|append
argument_list|(
literal|"^---- HERE"
argument_list|)
expr_stmt|;
name|scriptStack
operator|.
name|add
argument_list|(
name|pointer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
throw|throw
operator|new
name|ScriptException
argument_list|(
literal|"compile error"
argument_list|,
name|t
argument_list|,
name|scriptStack
argument_list|,
name|scriptSource
argument_list|,
name|PainlessScriptEngine
operator|.
name|NAME
argument_list|)
throw|;
block|}
end_function

begin_comment
comment|// very simple heuristic: +/- 25 chars. can be improved later.
end_comment

begin_function
DECL|method|getPreviousStatement
specifier|private
name|int
name|getPreviousStatement
parameter_list|(
name|String
name|scriptSource
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|offset
operator|-
literal|25
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getNextStatement
specifier|private
name|int
name|getNextStatement
parameter_list|(
name|String
name|scriptSource
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|scriptSource
operator|.
name|length
argument_list|()
argument_list|,
name|offset
operator|+
literal|25
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

