begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_comment
comment|/**  * Represents the top-level node for an expression as a statement.  */
end_comment

begin_class
DECL|class|SExpression
specifier|public
specifier|final
class|class
name|SExpression
extends|extends
name|AStatement
block|{
DECL|field|expression
name|AExpression
name|expression
decl_stmt|;
DECL|method|SExpression
specifier|public
name|SExpression
parameter_list|(
name|Location
name|location
parameter_list|,
name|AExpression
name|expression
parameter_list|)
block|{
name|super
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|void
name|analyze
parameter_list|(
name|Variables
name|variables
parameter_list|)
block|{
name|expression
operator|.
name|read
operator|=
name|lastSource
expr_stmt|;
name|expression
operator|.
name|analyze
argument_list|(
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lastSource
operator|&&
operator|!
name|expression
operator|.
name|statement
condition|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a statement."
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|rtn
init|=
name|lastSource
operator|&&
name|expression
operator|.
name|actual
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
decl_stmt|;
name|expression
operator|.
name|expected
operator|=
name|rtn
condition|?
name|Definition
operator|.
name|OBJECT_TYPE
else|:
name|expression
operator|.
name|actual
expr_stmt|;
name|expression
operator|.
name|internal
operator|=
name|rtn
expr_stmt|;
name|expression
operator|=
name|expression
operator|.
name|cast
argument_list|(
name|variables
argument_list|)
expr_stmt|;
name|methodEscape
operator|=
name|rtn
expr_stmt|;
name|loopEscape
operator|=
name|rtn
expr_stmt|;
name|allEscape
operator|=
name|rtn
expr_stmt|;
name|statementCount
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|MethodWriter
name|writer
parameter_list|)
block|{
name|writer
operator|.
name|writeStatementOffset
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|expression
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|methodEscape
condition|)
block|{
name|writer
operator|.
name|returnValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writePop
argument_list|(
name|expression
operator|.
name|expected
operator|.
name|sort
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

