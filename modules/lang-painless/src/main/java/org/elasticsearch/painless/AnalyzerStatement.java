begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Metadata
operator|.
name|ExpressionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Metadata
operator|.
name|StatementMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|AfterthoughtContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BlockContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BreakContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ContinueContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DeclContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DeclarationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DecltypeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DeclvarContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DoContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExprContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExpressionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ForContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|IfContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|InitializerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|MultipleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ReturnContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|SingleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|SourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|StatementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ThrowContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|TrapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|TryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|WhileContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|AnalyzerStatement
class|class
name|AnalyzerStatement
block|{
DECL|field|metadata
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
DECL|field|definition
specifier|private
specifier|final
name|Definition
name|definition
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
DECL|field|utility
specifier|private
specifier|final
name|AnalyzerUtility
name|utility
decl_stmt|;
DECL|field|caster
specifier|private
specifier|final
name|AnalyzerCaster
name|caster
decl_stmt|;
DECL|method|AnalyzerStatement
name|AnalyzerStatement
parameter_list|(
specifier|final
name|Metadata
name|metadata
parameter_list|,
specifier|final
name|Analyzer
name|analyzer
parameter_list|,
specifier|final
name|AnalyzerUtility
name|utility
parameter_list|,
specifier|final
name|AnalyzerCaster
name|caster
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|definition
operator|=
name|metadata
operator|.
name|definition
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|this
operator|.
name|utility
operator|=
name|utility
expr_stmt|;
name|this
operator|.
name|caster
operator|=
name|caster
expr_stmt|;
block|}
DECL|method|processSource
name|void
name|processSource
parameter_list|(
specifier|final
name|SourceContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|sourcesmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statectxs
init|=
name|ctx
operator|.
name|statement
argument_list|()
decl_stmt|;
specifier|final
name|StatementContext
name|lastctx
init|=
name|statectxs
operator|.
name|get
argument_list|(
name|statectxs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|utility
operator|.
name|incrementScope
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|StatementContext
name|statectx
range|:
name|statectxs
control|)
block|{
if|if
condition|(
name|sourcesmd
operator|.
name|allLast
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|statectx
argument_list|)
operator|+
literal|"Statement will never be executed because all prior paths escape."
argument_list|)
throw|;
block|}
specifier|final
name|StatementMetadata
name|statesmd
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|statectx
argument_list|)
decl_stmt|;
name|statesmd
operator|.
name|lastSource
operator|=
name|statectx
operator|==
name|lastctx
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|statectx
argument_list|)
expr_stmt|;
name|sourcesmd
operator|.
name|methodEscape
operator|=
name|statesmd
operator|.
name|methodEscape
expr_stmt|;
name|sourcesmd
operator|.
name|allLast
operator|=
name|statesmd
operator|.
name|allLast
expr_stmt|;
block|}
name|utility
operator|.
name|decrementScope
argument_list|()
expr_stmt|;
block|}
DECL|method|processIf
name|void
name|processIf
parameter_list|(
specifier|final
name|IfContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|ifsmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"If statement is not necessary."
argument_list|)
throw|;
block|}
specifier|final
name|BlockContext
name|blockctx0
init|=
name|ctx
operator|.
name|block
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|StatementMetadata
name|blocksmd0
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx0
argument_list|)
decl_stmt|;
name|blocksmd0
operator|.
name|lastSource
operator|=
name|ifsmd
operator|.
name|lastSource
expr_stmt|;
name|blocksmd0
operator|.
name|inLoop
operator|=
name|ifsmd
operator|.
name|inLoop
expr_stmt|;
name|blocksmd0
operator|.
name|lastLoop
operator|=
name|ifsmd
operator|.
name|lastLoop
expr_stmt|;
name|utility
operator|.
name|incrementScope
argument_list|()
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|blockctx0
argument_list|)
expr_stmt|;
name|utility
operator|.
name|decrementScope
argument_list|()
expr_stmt|;
name|ifsmd
operator|.
name|anyContinue
operator|=
name|blocksmd0
operator|.
name|anyContinue
expr_stmt|;
name|ifsmd
operator|.
name|anyBreak
operator|=
name|blocksmd0
operator|.
name|anyBreak
expr_stmt|;
name|ifsmd
operator|.
name|count
operator|=
name|blocksmd0
operator|.
name|count
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|ELSE
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|BlockContext
name|blockctx1
init|=
name|ctx
operator|.
name|block
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|StatementMetadata
name|blocksmd1
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx1
argument_list|)
decl_stmt|;
name|blocksmd1
operator|.
name|lastSource
operator|=
name|ifsmd
operator|.
name|lastSource
expr_stmt|;
name|utility
operator|.
name|incrementScope
argument_list|()
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|blockctx1
argument_list|)
expr_stmt|;
name|utility
operator|.
name|decrementScope
argument_list|()
expr_stmt|;
name|ifsmd
operator|.
name|methodEscape
operator|=
name|blocksmd0
operator|.
name|methodEscape
operator|&&
name|blocksmd1
operator|.
name|methodEscape
expr_stmt|;
name|ifsmd
operator|.
name|loopEscape
operator|=
name|blocksmd0
operator|.
name|loopEscape
operator|&&
name|blocksmd1
operator|.
name|loopEscape
expr_stmt|;
name|ifsmd
operator|.
name|allLast
operator|=
name|blocksmd0
operator|.
name|allLast
operator|&&
name|blocksmd1
operator|.
name|allLast
expr_stmt|;
name|ifsmd
operator|.
name|anyContinue
operator||=
name|blocksmd1
operator|.
name|anyContinue
expr_stmt|;
name|ifsmd
operator|.
name|anyBreak
operator||=
name|blocksmd1
operator|.
name|anyBreak
expr_stmt|;
name|ifsmd
operator|.
name|count
operator|=
name|Math
operator|.
name|max
argument_list|(
name|ifsmd
operator|.
name|count
argument_list|,
name|blocksmd1
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processWhile
name|void
name|processWhile
parameter_list|(
specifier|final
name|WhileContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|whilesmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|utility
operator|.
name|incrementScope
argument_list|()
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|boolean
name|continuous
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
name|continuous
operator|=
operator|(
name|boolean
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
if|if
condition|(
operator|!
name|continuous
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never be executed."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ctx
operator|.
name|empty
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never exit."
argument_list|)
throw|;
block|}
block|}
specifier|final
name|BlockContext
name|blockctx
init|=
name|ctx
operator|.
name|block
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StatementMetadata
name|blocksmd
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx
argument_list|)
decl_stmt|;
name|blocksmd
operator|.
name|beginLoop
operator|=
literal|true
expr_stmt|;
name|blocksmd
operator|.
name|inLoop
operator|=
literal|true
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|blockctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocksmd
operator|.
name|loopEscape
operator|&&
operator|!
name|blocksmd
operator|.
name|anyContinue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths escape so the loop is not necessary."
argument_list|)
throw|;
block|}
if|if
condition|(
name|continuous
operator|&&
operator|!
name|blocksmd
operator|.
name|anyBreak
condition|)
block|{
name|whilesmd
operator|.
name|methodEscape
operator|=
literal|true
expr_stmt|;
name|whilesmd
operator|.
name|allLast
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|whilesmd
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|utility
operator|.
name|decrementScope
argument_list|()
expr_stmt|;
block|}
DECL|method|processDo
name|void
name|processDo
parameter_list|(
specifier|final
name|DoContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|dosmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|utility
operator|.
name|incrementScope
argument_list|()
expr_stmt|;
specifier|final
name|BlockContext
name|blockctx
init|=
name|ctx
operator|.
name|block
argument_list|()
decl_stmt|;
specifier|final
name|StatementMetadata
name|blocksmd
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx
argument_list|)
decl_stmt|;
name|blocksmd
operator|.
name|beginLoop
operator|=
literal|true
expr_stmt|;
name|blocksmd
operator|.
name|inLoop
operator|=
literal|true
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|blockctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocksmd
operator|.
name|loopEscape
operator|&&
operator|!
name|blocksmd
operator|.
name|anyContinue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths escape so the loop is not necessary."
argument_list|)
throw|;
block|}
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|continuous
init|=
operator|(
name|boolean
operator|)
name|expremd
operator|.
name|postConst
decl_stmt|;
if|if
condition|(
operator|!
name|continuous
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths escape so the loop is not necessary."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|blocksmd
operator|.
name|anyBreak
condition|)
block|{
name|dosmd
operator|.
name|methodEscape
operator|=
literal|true
expr_stmt|;
name|dosmd
operator|.
name|allLast
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|dosmd
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|utility
operator|.
name|decrementScope
argument_list|()
expr_stmt|;
block|}
DECL|method|processFor
name|void
name|processFor
parameter_list|(
specifier|final
name|ForContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|forsmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|boolean
name|continuous
init|=
literal|false
decl_stmt|;
name|utility
operator|.
name|incrementScope
argument_list|()
expr_stmt|;
specifier|final
name|InitializerContext
name|initctx
init|=
name|ctx
operator|.
name|initializer
argument_list|()
decl_stmt|;
if|if
condition|(
name|initctx
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|initctx
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|initctx
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
name|continuous
operator|=
operator|(
name|boolean
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
if|if
condition|(
operator|!
name|continuous
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never be executed."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ctx
operator|.
name|empty
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop is continuous."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|continuous
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|AfterthoughtContext
name|atctx
init|=
name|ctx
operator|.
name|afterthought
argument_list|()
decl_stmt|;
if|if
condition|(
name|atctx
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|atctx
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|atctx
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockContext
name|blockctx
init|=
name|ctx
operator|.
name|block
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StatementMetadata
name|blocksmd
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx
argument_list|)
decl_stmt|;
name|blocksmd
operator|.
name|beginLoop
operator|=
literal|true
expr_stmt|;
name|blocksmd
operator|.
name|inLoop
operator|=
literal|true
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|blockctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocksmd
operator|.
name|loopEscape
operator|&&
operator|!
name|blocksmd
operator|.
name|anyContinue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths escape so the loop is not necessary."
argument_list|)
throw|;
block|}
if|if
condition|(
name|continuous
operator|&&
operator|!
name|blocksmd
operator|.
name|anyBreak
condition|)
block|{
name|forsmd
operator|.
name|methodEscape
operator|=
literal|true
expr_stmt|;
name|forsmd
operator|.
name|allLast
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|forsmd
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|utility
operator|.
name|decrementScope
argument_list|()
expr_stmt|;
block|}
DECL|method|processDecl
name|void
name|processDecl
parameter_list|(
specifier|final
name|DeclContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|declsmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|DeclarationContext
name|declctx
init|=
name|ctx
operator|.
name|declaration
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|declctx
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|declctx
argument_list|)
expr_stmt|;
name|declsmd
operator|.
name|count
operator|=
literal|1
expr_stmt|;
block|}
DECL|method|processContinue
name|void
name|processContinue
parameter_list|(
specifier|final
name|ContinueContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|continuesmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|continuesmd
operator|.
name|inLoop
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot have a continue statement outside of a loop."
argument_list|)
throw|;
block|}
if|if
condition|(
name|continuesmd
operator|.
name|lastLoop
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unnecessary continue statement at the end of a loop."
argument_list|)
throw|;
block|}
name|continuesmd
operator|.
name|allLast
operator|=
literal|true
expr_stmt|;
name|continuesmd
operator|.
name|anyContinue
operator|=
literal|true
expr_stmt|;
name|continuesmd
operator|.
name|count
operator|=
literal|1
expr_stmt|;
block|}
DECL|method|processBreak
name|void
name|processBreak
parameter_list|(
specifier|final
name|BreakContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|breaksmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|breaksmd
operator|.
name|inLoop
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot have a break statement outside of a loop."
argument_list|)
throw|;
block|}
name|breaksmd
operator|.
name|loopEscape
operator|=
literal|true
expr_stmt|;
name|breaksmd
operator|.
name|allLast
operator|=
literal|true
expr_stmt|;
name|breaksmd
operator|.
name|anyBreak
operator|=
literal|true
expr_stmt|;
name|breaksmd
operator|.
name|count
operator|=
literal|1
expr_stmt|;
block|}
DECL|method|processReturn
name|void
name|processReturn
parameter_list|(
specifier|final
name|ReturnContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|returnsmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|objectType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|returnsmd
operator|.
name|methodEscape
operator|=
literal|true
expr_stmt|;
name|returnsmd
operator|.
name|loopEscape
operator|=
literal|true
expr_stmt|;
name|returnsmd
operator|.
name|allLast
operator|=
literal|true
expr_stmt|;
name|returnsmd
operator|.
name|count
operator|=
literal|1
expr_stmt|;
block|}
DECL|method|processTry
name|void
name|processTry
parameter_list|(
specifier|final
name|TryContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|trysmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|BlockContext
name|blockctx
init|=
name|ctx
operator|.
name|block
argument_list|()
decl_stmt|;
specifier|final
name|StatementMetadata
name|blocksmd
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx
argument_list|)
decl_stmt|;
name|blocksmd
operator|.
name|lastSource
operator|=
name|trysmd
operator|.
name|lastSource
expr_stmt|;
name|blocksmd
operator|.
name|inLoop
operator|=
name|trysmd
operator|.
name|inLoop
expr_stmt|;
name|blocksmd
operator|.
name|lastLoop
operator|=
name|trysmd
operator|.
name|lastLoop
expr_stmt|;
name|utility
operator|.
name|incrementScope
argument_list|()
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|blockctx
argument_list|)
expr_stmt|;
name|utility
operator|.
name|decrementScope
argument_list|()
expr_stmt|;
name|trysmd
operator|.
name|methodEscape
operator|=
name|blocksmd
operator|.
name|methodEscape
expr_stmt|;
name|trysmd
operator|.
name|loopEscape
operator|=
name|blocksmd
operator|.
name|loopEscape
expr_stmt|;
name|trysmd
operator|.
name|allLast
operator|=
name|blocksmd
operator|.
name|allLast
expr_stmt|;
name|trysmd
operator|.
name|anyContinue
operator|=
name|blocksmd
operator|.
name|anyContinue
expr_stmt|;
name|trysmd
operator|.
name|anyBreak
operator|=
name|blocksmd
operator|.
name|anyBreak
expr_stmt|;
name|int
name|trapcount
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|TrapContext
name|trapctx
range|:
name|ctx
operator|.
name|trap
argument_list|()
control|)
block|{
specifier|final
name|StatementMetadata
name|trapsmd
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|trapctx
argument_list|)
decl_stmt|;
name|trapsmd
operator|.
name|lastSource
operator|=
name|trysmd
operator|.
name|lastSource
expr_stmt|;
name|trapsmd
operator|.
name|inLoop
operator|=
name|trysmd
operator|.
name|inLoop
expr_stmt|;
name|trapsmd
operator|.
name|lastLoop
operator|=
name|trysmd
operator|.
name|lastLoop
expr_stmt|;
name|utility
operator|.
name|incrementScope
argument_list|()
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|trapctx
argument_list|)
expr_stmt|;
name|utility
operator|.
name|decrementScope
argument_list|()
expr_stmt|;
name|trysmd
operator|.
name|methodEscape
operator|&=
name|trapsmd
operator|.
name|methodEscape
expr_stmt|;
name|trysmd
operator|.
name|loopEscape
operator|&=
name|trapsmd
operator|.
name|loopEscape
expr_stmt|;
name|trysmd
operator|.
name|allLast
operator|&=
name|trapsmd
operator|.
name|allLast
expr_stmt|;
name|trysmd
operator|.
name|anyContinue
operator||=
name|trapsmd
operator|.
name|anyContinue
expr_stmt|;
name|trysmd
operator|.
name|anyBreak
operator||=
name|trapsmd
operator|.
name|anyBreak
expr_stmt|;
name|trapcount
operator|=
name|Math
operator|.
name|max
argument_list|(
name|trapcount
argument_list|,
name|trapsmd
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
name|trysmd
operator|.
name|count
operator|=
name|blocksmd
operator|.
name|count
operator|+
name|trapcount
expr_stmt|;
block|}
DECL|method|processThrow
name|void
name|processThrow
parameter_list|(
specifier|final
name|ThrowContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|throwsmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|exceptionType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|throwsmd
operator|.
name|methodEscape
operator|=
literal|true
expr_stmt|;
name|throwsmd
operator|.
name|loopEscape
operator|=
literal|true
expr_stmt|;
name|throwsmd
operator|.
name|allLast
operator|=
literal|true
expr_stmt|;
name|throwsmd
operator|.
name|count
operator|=
literal|1
expr_stmt|;
block|}
DECL|method|processExpr
name|void
name|processExpr
parameter_list|(
specifier|final
name|ExprContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|exprsmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|read
operator|=
name|exprsmd
operator|.
name|lastSource
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expremd
operator|.
name|statement
operator|&&
operator|!
name|exprsmd
operator|.
name|lastSource
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Not a statement."
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|rtn
init|=
name|exprsmd
operator|.
name|lastSource
operator|&&
name|expremd
operator|.
name|from
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
decl_stmt|;
name|exprsmd
operator|.
name|methodEscape
operator|=
name|rtn
expr_stmt|;
name|exprsmd
operator|.
name|loopEscape
operator|=
name|rtn
expr_stmt|;
name|exprsmd
operator|.
name|allLast
operator|=
name|rtn
expr_stmt|;
name|expremd
operator|.
name|to
operator|=
name|rtn
condition|?
name|definition
operator|.
name|objectType
else|:
name|expremd
operator|.
name|from
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|exprsmd
operator|.
name|count
operator|=
literal|1
expr_stmt|;
block|}
DECL|method|processMultiple
name|void
name|processMultiple
parameter_list|(
specifier|final
name|MultipleContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|multiplesmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statectxs
init|=
name|ctx
operator|.
name|statement
argument_list|()
decl_stmt|;
specifier|final
name|StatementContext
name|lastctx
init|=
name|statectxs
operator|.
name|get
argument_list|(
name|statectxs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|StatementContext
name|statectx
range|:
name|statectxs
control|)
block|{
if|if
condition|(
name|multiplesmd
operator|.
name|allLast
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|statectx
argument_list|)
operator|+
literal|"Statement will never be executed because all prior paths escape."
argument_list|)
throw|;
block|}
specifier|final
name|StatementMetadata
name|statesmd
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|statectx
argument_list|)
decl_stmt|;
name|statesmd
operator|.
name|lastSource
operator|=
name|multiplesmd
operator|.
name|lastSource
operator|&&
name|statectx
operator|==
name|lastctx
expr_stmt|;
name|statesmd
operator|.
name|inLoop
operator|=
name|multiplesmd
operator|.
name|inLoop
expr_stmt|;
name|statesmd
operator|.
name|lastLoop
operator|=
operator|(
name|multiplesmd
operator|.
name|beginLoop
operator|||
name|multiplesmd
operator|.
name|lastLoop
operator|)
operator|&&
name|statectx
operator|==
name|lastctx
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|statectx
argument_list|)
expr_stmt|;
name|multiplesmd
operator|.
name|methodEscape
operator|=
name|statesmd
operator|.
name|methodEscape
expr_stmt|;
name|multiplesmd
operator|.
name|loopEscape
operator|=
name|statesmd
operator|.
name|loopEscape
expr_stmt|;
name|multiplesmd
operator|.
name|allLast
operator|=
name|statesmd
operator|.
name|allLast
expr_stmt|;
name|multiplesmd
operator|.
name|anyContinue
operator||=
name|statesmd
operator|.
name|anyContinue
expr_stmt|;
name|multiplesmd
operator|.
name|anyBreak
operator||=
name|statesmd
operator|.
name|anyBreak
expr_stmt|;
name|multiplesmd
operator|.
name|count
operator|+=
name|statesmd
operator|.
name|count
expr_stmt|;
block|}
block|}
DECL|method|processSingle
name|void
name|processSingle
parameter_list|(
specifier|final
name|SingleContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|singlesmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|StatementContext
name|statectx
init|=
name|ctx
operator|.
name|statement
argument_list|()
decl_stmt|;
specifier|final
name|StatementMetadata
name|statesmd
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|statectx
argument_list|)
decl_stmt|;
name|statesmd
operator|.
name|lastSource
operator|=
name|singlesmd
operator|.
name|lastSource
expr_stmt|;
name|statesmd
operator|.
name|inLoop
operator|=
name|singlesmd
operator|.
name|inLoop
expr_stmt|;
name|statesmd
operator|.
name|lastLoop
operator|=
name|singlesmd
operator|.
name|beginLoop
operator|||
name|singlesmd
operator|.
name|lastLoop
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|statectx
argument_list|)
expr_stmt|;
name|singlesmd
operator|.
name|methodEscape
operator|=
name|statesmd
operator|.
name|methodEscape
expr_stmt|;
name|singlesmd
operator|.
name|loopEscape
operator|=
name|statesmd
operator|.
name|loopEscape
expr_stmt|;
name|singlesmd
operator|.
name|allLast
operator|=
name|statesmd
operator|.
name|allLast
expr_stmt|;
name|singlesmd
operator|.
name|anyContinue
operator|=
name|statesmd
operator|.
name|anyContinue
expr_stmt|;
name|singlesmd
operator|.
name|anyBreak
operator|=
name|statesmd
operator|.
name|anyBreak
expr_stmt|;
name|singlesmd
operator|.
name|count
operator|=
name|statesmd
operator|.
name|count
expr_stmt|;
block|}
DECL|method|processInitializer
name|void
name|processInitializer
parameter_list|(
name|InitializerContext
name|ctx
parameter_list|)
block|{
specifier|final
name|DeclarationContext
name|declctx
init|=
name|ctx
operator|.
name|declaration
argument_list|()
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|declctx
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|declctx
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|declctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|read
operator|=
literal|false
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|expremd
operator|.
name|to
operator|=
name|expremd
operator|.
name|from
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expremd
operator|.
name|statement
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|exprctx
argument_list|)
operator|+
literal|"The initializer of a for loop must be a statement."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
DECL|method|processAfterthought
name|void
name|processAfterthought
parameter_list|(
name|AfterthoughtContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|read
operator|=
literal|false
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|expremd
operator|.
name|to
operator|=
name|expremd
operator|.
name|from
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expremd
operator|.
name|statement
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|exprctx
argument_list|)
operator|+
literal|"The afterthought of a for loop must be a statement."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|processDeclaration
name|void
name|processDeclaration
parameter_list|(
specifier|final
name|DeclarationContext
name|ctx
parameter_list|)
block|{
specifier|final
name|DecltypeContext
name|decltypectx
init|=
name|ctx
operator|.
name|decltype
argument_list|()
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|decltypeemd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|decltypectx
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|decltypectx
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|DeclvarContext
name|declvarctx
range|:
name|ctx
operator|.
name|declvar
argument_list|()
control|)
block|{
specifier|final
name|ExpressionMetadata
name|declvaremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|declvarctx
argument_list|)
decl_stmt|;
name|declvaremd
operator|.
name|to
operator|=
name|decltypeemd
operator|.
name|from
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|declvarctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processDecltype
name|void
name|processDecltype
parameter_list|(
specifier|final
name|DecltypeContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|decltypeemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|ctx
operator|.
name|getText
argument_list|()
decl_stmt|;
name|decltypeemd
operator|.
name|from
operator|=
name|definition
operator|.
name|getType
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|processDeclvar
name|void
name|processDeclvar
parameter_list|(
specifier|final
name|DeclvarContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|declvaremd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|ctx
operator|.
name|ID
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|declvaremd
operator|.
name|postConst
operator|=
name|utility
operator|.
name|addVariable
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|,
name|declvaremd
operator|.
name|to
argument_list|)
operator|.
name|slot
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|declvaremd
operator|.
name|to
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processTrap
name|void
name|processTrap
parameter_list|(
specifier|final
name|TrapContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|trapsmd
init|=
name|metadata
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|ctx
operator|.
name|TYPE
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|trapsmd
operator|.
name|exception
operator|=
name|definition
operator|.
name|getType
argument_list|(
name|type
argument_list|)
expr_stmt|;
try|try
block|{
name|trapsmd
operator|.
name|exception
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassCastException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid exception type ["
operator|+
name|trapsmd
operator|.
name|exception
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|String
name|id
init|=
name|ctx
operator|.
name|ID
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|trapsmd
operator|.
name|slot
operator|=
name|utility
operator|.
name|addVariable
argument_list|(
name|ctx
argument_list|,
name|id
argument_list|,
name|trapsmd
operator|.
name|exception
argument_list|)
operator|.
name|slot
expr_stmt|;
specifier|final
name|BlockContext
name|blockctx
init|=
name|ctx
operator|.
name|block
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StatementMetadata
name|blocksmd
init|=
name|metadata
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx
argument_list|)
decl_stmt|;
name|blocksmd
operator|.
name|lastSource
operator|=
name|trapsmd
operator|.
name|lastSource
expr_stmt|;
name|blocksmd
operator|.
name|inLoop
operator|=
name|trapsmd
operator|.
name|inLoop
expr_stmt|;
name|blocksmd
operator|.
name|lastLoop
operator|=
name|trapsmd
operator|.
name|lastLoop
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|blockctx
argument_list|)
expr_stmt|;
name|trapsmd
operator|.
name|methodEscape
operator|=
name|blocksmd
operator|.
name|methodEscape
expr_stmt|;
name|trapsmd
operator|.
name|loopEscape
operator|=
name|blocksmd
operator|.
name|loopEscape
expr_stmt|;
name|trapsmd
operator|.
name|allLast
operator|=
name|blocksmd
operator|.
name|allLast
expr_stmt|;
name|trapsmd
operator|.
name|anyContinue
operator|=
name|blocksmd
operator|.
name|anyContinue
expr_stmt|;
name|trapsmd
operator|.
name|anyBreak
operator|=
name|blocksmd
operator|.
name|anyBreak
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|emptyscope
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

