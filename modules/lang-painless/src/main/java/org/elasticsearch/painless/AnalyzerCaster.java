begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Cast
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Transform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_comment
comment|/**  * Used during the analysis phase to collect legal type casts and promotions  * for type-checking and later to write necessary casts in the bytecode.  */
end_comment

begin_class
DECL|class|AnalyzerCaster
specifier|public
specifier|final
class|class
name|AnalyzerCaster
block|{
DECL|method|getLegalCast
specifier|public
specifier|static
name|Cast
name|getLegalCast
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|Type
name|actual
parameter_list|,
specifier|final
name|Type
name|expected
parameter_list|,
specifier|final
name|boolean
name|explicit
parameter_list|)
block|{
specifier|final
name|Cast
name|cast
init|=
operator|new
name|Cast
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|actual
operator|.
name|sort
operator|==
name|Sort
operator|.
name|DEF
operator|&&
name|expected
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
operator|||
name|actual
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
operator|&&
name|expected
operator|.
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
specifier|final
name|Transform
name|transform
init|=
name|definition
operator|.
name|transformsMap
operator|.
name|get
argument_list|(
name|cast
argument_list|)
decl_stmt|;
if|if
condition|(
name|transform
operator|!=
literal|null
condition|)
block|{
return|return
name|transform
return|;
block|}
return|return
name|cast
return|;
block|}
switch|switch
condition|(
name|actual
operator|.
name|sort
condition|)
block|{
case|case
name|BOOL
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|OBJECT
case|:
case|case
name|BOOL_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
block|}
break|break;
case|case
name|BYTE
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|CHAR
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|SHORT
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|CHAR
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|CHAR
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|STRING
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|INT
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|LONG
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|FLOAT
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|DOUBLE
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|BOOL_OBJ
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|BOOL
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
block|}
break|break;
case|case
name|BYTE_OBJ
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|CHAR
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|SHORT_OBJ
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|CHAR
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|CHAR_OBJ
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|STRING
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|INT_OBJ
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|LONG_OBJ
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|FLOAT_OBJ
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|DOUBLE_OBJ
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|DOUBLE
case|:
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|STRING
case|:
switch|switch
condition|(
name|expected
operator|.
name|sort
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|definition
argument_list|,
name|location
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
block|}
try|try
block|{
name|actual
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|expected
operator|.
name|clazz
argument_list|)
expr_stmt|;
return|return
name|cast
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassCastException
name|cce0
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|explicit
condition|)
block|{
name|expected
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|actual
operator|.
name|clazz
argument_list|)
expr_stmt|;
return|return
name|cast
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Error"
operator|+
name|location
operator|+
literal|": Cannot cast from ["
operator|+
name|actual
operator|.
name|name
operator|+
literal|"] to ["
operator|+
name|expected
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassCastException
name|cce1
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Error"
operator|+
name|location
operator|+
literal|": Cannot cast from ["
operator|+
name|actual
operator|.
name|name
operator|+
literal|"] to ["
operator|+
name|expected
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|checkTransform
specifier|private
specifier|static
name|Transform
name|checkTransform
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|Cast
name|cast
parameter_list|)
block|{
specifier|final
name|Transform
name|transform
init|=
name|definition
operator|.
name|transformsMap
operator|.
name|get
argument_list|(
name|cast
argument_list|)
decl_stmt|;
if|if
condition|(
name|transform
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Error"
operator|+
name|location
operator|+
literal|": Cannot cast from ["
operator|+
name|cast
operator|.
name|from
operator|.
name|name
operator|+
literal|"] to ["
operator|+
name|cast
operator|.
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
return|return
name|transform
return|;
block|}
DECL|method|constCast
specifier|public
specifier|static
name|Object
name|constCast
parameter_list|(
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|Object
name|constant
parameter_list|,
specifier|final
name|Cast
name|cast
parameter_list|)
block|{
if|if
condition|(
name|cast
operator|instanceof
name|Transform
condition|)
block|{
specifier|final
name|Transform
name|transform
init|=
operator|(
name|Transform
operator|)
name|cast
decl_stmt|;
return|return
name|invokeTransform
argument_list|(
name|location
argument_list|,
name|transform
argument_list|,
name|constant
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|Sort
name|fsort
init|=
name|cast
operator|.
name|from
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|tsort
init|=
name|cast
operator|.
name|to
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|fsort
operator|==
name|tsort
condition|)
block|{
return|return
name|constant
return|;
block|}
elseif|else
if|if
condition|(
name|fsort
operator|.
name|numeric
operator|&&
name|tsort
operator|.
name|numeric
condition|)
block|{
name|Number
name|number
decl_stmt|;
if|if
condition|(
name|fsort
operator|==
name|Sort
operator|.
name|CHAR
condition|)
block|{
name|number
operator|=
call|(
name|int
call|)
argument_list|(
name|char
argument_list|)
name|constant
expr_stmt|;
block|}
else|else
block|{
name|number
operator|=
operator|(
name|Number
operator|)
name|constant
expr_stmt|;
block|}
switch|switch
condition|(
name|tsort
condition|)
block|{
case|case
name|BYTE
case|:
return|return
name|number
operator|.
name|byteValue
argument_list|()
return|;
case|case
name|SHORT
case|:
return|return
name|number
operator|.
name|shortValue
argument_list|()
return|;
case|case
name|CHAR
case|:
return|return
operator|(
name|char
operator|)
name|number
operator|.
name|intValue
argument_list|()
return|;
case|case
name|INT
case|:
return|return
name|number
operator|.
name|intValue
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
name|number
operator|.
name|longValue
argument_list|()
return|;
case|case
name|FLOAT
case|:
return|return
name|number
operator|.
name|floatValue
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
name|number
operator|.
name|doubleValue
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error"
operator|+
name|location
operator|+
literal|": Cannot cast from "
operator|+
literal|"["
operator|+
name|cast
operator|.
name|from
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"] to ["
operator|+
name|cast
operator|.
name|to
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error"
operator|+
name|location
operator|+
literal|": Cannot cast from "
operator|+
literal|"["
operator|+
name|cast
operator|.
name|from
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"] to ["
operator|+
name|cast
operator|.
name|to
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|invokeTransform
specifier|private
specifier|static
name|Object
name|invokeTransform
parameter_list|(
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|Transform
name|transform
parameter_list|,
specifier|final
name|Object
name|object
parameter_list|)
block|{
specifier|final
name|Method
name|method
init|=
name|transform
operator|.
name|method
decl_stmt|;
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|jmethod
init|=
name|method
operator|.
name|reflect
decl_stmt|;
specifier|final
name|int
name|modifiers
init|=
name|jmethod
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
return|return
name|jmethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|object
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|jmethod
operator|.
name|invoke
argument_list|(
name|object
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
decl||
name|NullPointerException
decl||
name|ExceptionInInitializerError
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Error"
operator|+
name|location
operator|+
literal|": Cannot cast from ["
operator|+
name|transform
operator|.
name|from
operator|.
name|name
operator|+
literal|"] to ["
operator|+
name|transform
operator|.
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
DECL|method|promoteNumeric
specifier|public
specifier|static
name|Type
name|promoteNumeric
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Type
name|from
parameter_list|,
specifier|final
name|boolean
name|decimal
parameter_list|,
specifier|final
name|boolean
name|primitive
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|from
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|)
operator|&&
name|decimal
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|doubleType
else|:
name|definition
operator|.
name|doubleobjType
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
operator|)
operator|&&
name|decimal
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|floatType
else|:
name|definition
operator|.
name|floatobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort
operator|==
name|Sort
operator|.
name|LONG_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|longType
else|:
name|definition
operator|.
name|longobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort
operator|==
name|Sort
operator|.
name|INT_OBJ
operator|||
name|sort
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort
operator|==
name|Sort
operator|.
name|CHAR_OBJ
operator|||
name|sort
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort
operator|==
name|Sort
operator|.
name|SHORT_OBJ
operator|||
name|sort
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|promoteNumeric
specifier|public
specifier|static
name|Type
name|promoteNumeric
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|,
specifier|final
name|boolean
name|decimal
parameter_list|,
specifier|final
name|boolean
name|primitive
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
if|if
condition|(
name|decimal
condition|)
block|{
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|doubleType
else|:
name|definition
operator|.
name|doubleobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|floatType
else|:
name|definition
operator|.
name|floatobjType
return|;
block|}
block|}
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|longType
else|:
name|definition
operator|.
name|longobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|INT_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|CHAR_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|SHORT_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|BYTE_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|promoteAdd
specifier|public
specifier|static
name|Type
name|promoteAdd
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|STRING
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
return|return
name|definition
operator|.
name|stringType
return|;
block|}
return|return
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|from0
argument_list|,
name|from1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|promoteXor
specifier|public
specifier|static
name|Type
name|promoteXor
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|.
name|bool
operator|||
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|definition
operator|.
name|booleanType
return|;
block|}
return|return
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|from0
argument_list|,
name|from1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|promoteEquality
specifier|public
specifier|static
name|Type
name|promoteEquality
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
specifier|final
name|boolean
name|primitive
init|=
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
decl_stmt|;
if|if
condition|(
name|sort0
operator|.
name|bool
operator|&&
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|booleanType
else|:
name|definition
operator|.
name|booleanobjType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
return|return
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|from0
argument_list|,
name|from1
argument_list|,
literal|true
argument_list|,
name|primitive
argument_list|)
return|;
block|}
return|return
name|definition
operator|.
name|objectType
return|;
block|}
DECL|method|promoteReference
specifier|public
specifier|static
name|Type
name|promoteReference
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
condition|)
block|{
if|if
condition|(
name|sort0
operator|.
name|bool
operator|&&
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|definition
operator|.
name|booleanType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
return|return
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|from0
argument_list|,
name|from1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
return|return
name|definition
operator|.
name|objectType
return|;
block|}
DECL|method|promoteConditional
specifier|public
specifier|static
name|Type
name|promoteConditional
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|,
specifier|final
name|Object
name|const0
parameter_list|,
specifier|final
name|Object
name|const1
parameter_list|)
block|{
if|if
condition|(
name|from0
operator|.
name|equals
argument_list|(
name|from1
argument_list|)
condition|)
block|{
return|return
name|from0
return|;
block|}
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
specifier|final
name|boolean
name|primitive
init|=
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
decl_stmt|;
if|if
condition|(
name|sort0
operator|.
name|bool
operator|&&
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|booleanType
else|:
name|definition
operator|.
name|booleanobjType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|doubleType
else|:
name|definition
operator|.
name|doubleobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|floatType
else|:
name|definition
operator|.
name|floatobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG_OBJ
condition|)
block|{
return|return
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
condition|?
name|definition
operator|.
name|longType
else|:
name|definition
operator|.
name|longobjType
return|;
block|}
else|else
block|{
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|short
name|constant
init|=
operator|(
name|short
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|short
name|constant
init|=
operator|(
name|short
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Short
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|charType
else|:
name|definition
operator|.
name|charobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Character
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Character
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Short
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Character
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Character
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
block|}
block|}
comment|// TODO: In the rare case we still haven't reached a correct promotion we need
comment|//       to calculate the highest upper bound for the two types and return that.
comment|//       However, for now we just return objectType that may require an extra cast.
return|return
name|definition
operator|.
name|objectType
return|;
block|}
DECL|method|AnalyzerCaster
specifier|private
name|AnalyzerCaster
parameter_list|()
block|{}
block|}
end_class

end_unit

