begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Locals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Represents a field load/store and defers to a child subnode.  */
end_comment

begin_class
DECL|class|PField
specifier|public
specifier|final
class|class
name|PField
extends|extends
name|AStoreable
block|{
DECL|field|nullSafe
specifier|private
specifier|final
name|boolean
name|nullSafe
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|field|sub
specifier|private
name|AStoreable
name|sub
init|=
literal|null
decl_stmt|;
DECL|method|PField
specifier|public
name|PField
parameter_list|(
name|Location
name|location
parameter_list|,
name|AExpression
name|prefix
parameter_list|,
name|boolean
name|nullSafe
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|location
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullSafe
operator|=
name|nullSafe
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractVariables
name|void
name|extractVariables
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|variables
parameter_list|)
block|{
name|prefix
operator|.
name|extractVariables
argument_list|(
name|variables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|void
name|analyze
parameter_list|(
name|Locals
name|locals
parameter_list|)
block|{
name|prefix
operator|.
name|analyze
argument_list|(
name|locals
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|expected
operator|=
name|prefix
operator|.
name|actual
expr_stmt|;
name|prefix
operator|=
name|prefix
operator|.
name|cast
argument_list|(
name|locals
argument_list|)
expr_stmt|;
name|Sort
name|sort
init|=
name|prefix
operator|.
name|actual
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|ARRAY
condition|)
block|{
name|sub
operator|=
operator|new
name|PSubArrayLength
argument_list|(
name|location
argument_list|,
name|prefix
operator|.
name|actual
operator|.
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
name|sub
operator|=
operator|new
name|PSubDefField
argument_list|(
name|location
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Struct
name|struct
init|=
name|prefix
operator|.
name|actual
operator|.
name|struct
decl_stmt|;
name|Field
name|field
init|=
name|prefix
operator|instanceof
name|EStatic
condition|?
name|struct
operator|.
name|staticMembers
operator|.
name|get
argument_list|(
name|value
argument_list|)
else|:
name|struct
operator|.
name|members
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|sub
operator|=
operator|new
name|PSubField
argument_list|(
name|location
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Method
name|getter
init|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"get"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|getter
operator|==
literal|null
condition|)
block|{
name|getter
operator|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"is"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Method
name|setter
init|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"set"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
operator|||
name|setter
operator|!=
literal|null
condition|)
block|{
name|sub
operator|=
operator|new
name|PSubShortcut
argument_list|(
name|location
argument_list|,
name|value
argument_list|,
name|prefix
operator|.
name|actual
operator|.
name|name
argument_list|,
name|getter
argument_list|,
name|setter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EConstant
name|index
init|=
operator|new
name|EConstant
argument_list|(
name|location
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|index
operator|.
name|analyze
argument_list|(
name|locals
argument_list|)
expr_stmt|;
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|prefix
operator|.
name|actual
operator|.
name|clazz
argument_list|)
condition|)
block|{
name|sub
operator|=
operator|new
name|PSubMapShortcut
argument_list|(
name|location
argument_list|,
name|struct
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|prefix
operator|.
name|actual
operator|.
name|clazz
argument_list|)
condition|)
block|{
name|sub
operator|=
operator|new
name|PSubListShortcut
argument_list|(
name|location
argument_list|,
name|struct
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|sub
operator|==
literal|null
condition|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown field ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|prefix
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|nullSafe
condition|)
block|{
name|sub
operator|=
operator|new
name|PSubNullSafeField
argument_list|(
name|location
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|write
operator|=
name|write
expr_stmt|;
name|sub
operator|.
name|read
operator|=
name|read
expr_stmt|;
name|sub
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
name|sub
operator|.
name|explicit
operator|=
name|explicit
expr_stmt|;
name|sub
operator|.
name|analyze
argument_list|(
name|locals
argument_list|)
expr_stmt|;
name|actual
operator|=
name|sub
operator|.
name|actual
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
name|prefix
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
name|sub
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isDefOptimized
name|boolean
name|isDefOptimized
parameter_list|()
block|{
return|return
name|sub
operator|.
name|isDefOptimized
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|updateActual
name|void
name|updateActual
parameter_list|(
name|Type
name|actual
parameter_list|)
block|{
name|sub
operator|.
name|updateActual
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|this
operator|.
name|actual
operator|=
name|actual
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accessElementCount
name|int
name|accessElementCount
parameter_list|()
block|{
return|return
name|sub
operator|.
name|accessElementCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setup
name|void
name|setup
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
name|prefix
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setup
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
name|void
name|load
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
name|sub
operator|.
name|load
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|store
name|void
name|store
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
name|sub
operator|.
name|store
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|nullSafe
condition|)
block|{
return|return
name|singleLineToString
argument_list|(
literal|"nullSafe"
argument_list|,
name|prefix
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
name|singleLineToString
argument_list|(
name|prefix
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

