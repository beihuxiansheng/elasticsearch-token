begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Locals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|max
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_comment
comment|/**  * The superclass for all nodes.  */
end_comment

begin_class
DECL|class|ANode
specifier|public
specifier|abstract
class|class
name|ANode
block|{
comment|/**      * The identifier of the script and character offset used for debugging and errors.      */
DECL|field|location
specifier|final
name|Location
name|location
decl_stmt|;
comment|/**      * Standard constructor with location used for error tracking.      */
DECL|method|ANode
name|ANode
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds all variable names referenced to the variable set.      *<p>      * This can be called at any time, e.g. to support lambda capture.      * @param variables set of variables referenced (any scope)      */
DECL|method|extractVariables
specifier|abstract
name|void
name|extractVariables
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|variables
parameter_list|)
function_decl|;
comment|/**      * Checks for errors and collects data for the writing phase.      */
DECL|method|analyze
specifier|abstract
name|void
name|analyze
parameter_list|(
name|Locals
name|locals
parameter_list|)
function_decl|;
comment|/**      * Writes ASM based on the data collected during the analysis phase.      */
DECL|method|write
specifier|abstract
name|void
name|write
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
function_decl|;
comment|/**      * Create an error with location information pointing to this node.      */
DECL|method|createError
name|RuntimeException
name|createError
parameter_list|(
name|RuntimeException
name|exception
parameter_list|)
block|{
return|return
name|location
operator|.
name|createError
argument_list|(
name|exception
argument_list|)
return|;
block|}
comment|/**      * Subclasses should implement this with a method like {@link #singleLineToString(Object...)} or      * {@link #multilineToString(Collection, Collection)}.      */
DECL|method|toString
specifier|public
specifier|abstract
name|String
name|toString
parameter_list|()
function_decl|;
comment|// Below are utilities for building the toString
comment|/**      * Build {@link #toString()} for a node without inserting line breaks between the sub-nodes.      */
DECL|method|singleLineToString
specifier|protected
name|String
name|singleLineToString
parameter_list|(
name|Object
modifier|...
name|subs
parameter_list|)
block|{
return|return
name|singleLineToString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|subs
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Build {@link #toString()} for a node without inserting line breaks between the sub-nodes.      */
DECL|method|singleLineToString
specifier|protected
name|String
name|singleLineToString
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|subs
parameter_list|)
block|{
return|return
name|joinWithName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|subs
argument_list|,
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Build {@link #toString()} for a node that optionally ends in {@code (Args some arguments here)}. Usually function calls.      */
DECL|method|singleLineToStringWithOptionalArgs
specifier|protected
name|String
name|singleLineToStringWithOptionalArgs
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|ANode
argument_list|>
name|arguments
parameter_list|,
name|Object
modifier|...
name|restOfSubs
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|subs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|subs
argument_list|,
name|restOfSubs
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subs
operator|.
name|add
argument_list|(
name|joinWithName
argument_list|(
literal|"Args"
argument_list|,
name|arguments
argument_list|,
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|singleLineToString
argument_list|(
name|subs
argument_list|)
return|;
block|}
comment|/**      * Build {@link #toString()} for a node that should have new lines after some of its sub-nodes.      */
DECL|method|multilineToString
specifier|protected
name|String
name|multilineToString
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|sameLine
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|ownLine
parameter_list|)
block|{
return|return
name|joinWithName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|sameLine
argument_list|,
name|ownLine
argument_list|)
return|;
block|}
comment|/**      * Zip two (potentially uneven) lists together into for {@link #toString()}.      */
DECL|method|pairwiseToString
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|pairwiseToString
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|lefts
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|rights
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|max
argument_list|(
name|lefts
operator|.
name|size
argument_list|()
argument_list|,
name|rights
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|left
init|=
name|lefts
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|right
init|=
name|rights
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|left
operator|.
name|hasNext
argument_list|()
operator|||
name|right
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|pairs
operator|.
name|add
argument_list|(
name|joinWithName
argument_list|(
literal|"Pair"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|left
operator|.
name|hasNext
argument_list|()
condition|?
name|left
operator|.
name|next
argument_list|()
else|:
literal|"<uneven>"
argument_list|,
name|right
operator|.
name|hasNext
argument_list|()
condition|?
name|right
operator|.
name|next
argument_list|()
else|:
literal|"<uneven>"
argument_list|)
argument_list|,
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pairs
return|;
block|}
comment|/**      * Build a {@link #toString()} for some expressions. Usually best to use {@link #singleLineToString(Object...)} or      * {@link #multilineToString(Collection, Collection)} instead because they include the name of the node by default.      */
DECL|method|joinWithName
specifier|protected
name|String
name|joinWithName
parameter_list|(
name|String
name|name
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|sameLine
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|ownLine
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|sub
range|:
name|sameLine
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ownLine
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|sameLine
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|ownLine
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Object
name|sub
range|:
name|ownLine
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|append
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|sub
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

