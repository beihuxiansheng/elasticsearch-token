begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|AnalyzerCaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|CompilerSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
import|;
end_import

begin_comment
comment|/**  * Represents a binary math expression.  */
end_comment

begin_class
DECL|class|EBinary
specifier|public
specifier|final
class|class
name|EBinary
extends|extends
name|AExpression
block|{
DECL|field|operation
specifier|final
name|Operation
name|operation
decl_stmt|;
DECL|field|left
name|AExpression
name|left
decl_stmt|;
DECL|field|right
name|AExpression
name|right
decl_stmt|;
DECL|field|cat
name|boolean
name|cat
init|=
literal|false
decl_stmt|;
DECL|method|EBinary
specifier|public
name|EBinary
parameter_list|(
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|Operation
name|operation
parameter_list|,
specifier|final
name|AExpression
name|left
parameter_list|,
specifier|final
name|AExpression
name|right
parameter_list|)
block|{
name|super
argument_list|(
name|line
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|void
name|analyze
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|MUL
condition|)
block|{
name|analyzeMul
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|DIV
condition|)
block|{
name|analyzeDiv
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|REM
condition|)
block|{
name|analyzeRem
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|ADD
condition|)
block|{
name|analyzeAdd
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|SUB
condition|)
block|{
name|analyzeSub
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|LSH
condition|)
block|{
name|analyzeLSH
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|RSH
condition|)
block|{
name|analyzeRSH
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|USH
condition|)
block|{
name|analyzeUSH
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|BWAND
condition|)
block|{
name|analyzeBWAnd
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|XOR
condition|)
block|{
name|analyzeXor
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|BWOR
condition|)
block|{
name|analyzeBWOr
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|analyzeMul
specifier|private
name|void
name|analyzeMul
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply multiply [*] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|overflow
init|=
name|settings
operator|.
name|getNumericOverflow
argument_list|()
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|*
operator|(
name|int
operator|)
name|right
operator|.
name|constant
else|:
name|Math
operator|.
name|multiplyExact
argument_list|(
operator|(
name|int
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|int
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|*
operator|(
name|long
operator|)
name|right
operator|.
name|constant
else|:
name|Math
operator|.
name|multiplyExact
argument_list|(
operator|(
name|long
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|long
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|*
operator|(
name|float
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|float
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|*
operator|(
name|double
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|double
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeDiv
specifier|private
name|void
name|analyzeDiv
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply divide [/] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|overflow
init|=
name|settings
operator|.
name|getNumericOverflow
argument_list|()
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|/
operator|(
name|int
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|int
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|int
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|/
operator|(
name|long
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|long
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|long
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|/
operator|(
name|float
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|float
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|/
operator|(
name|double
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|double
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeRem
specifier|private
name|void
name|analyzeRem
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply remainder [%] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|overflow
init|=
name|settings
operator|.
name|getNumericOverflow
argument_list|()
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|%
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|%
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|%
operator|(
name|float
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|float
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|%
operator|(
name|double
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|double
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeAdd
specifier|private
name|void
name|analyzeAdd
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteAdd
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply add [+] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
name|left
operator|.
name|expected
operator|=
name|left
operator|.
name|actual
expr_stmt|;
if|if
condition|(
name|left
operator|instanceof
name|EBinary
operator|&&
operator|(
operator|(
name|EBinary
operator|)
name|left
operator|)
operator|.
name|operation
operator|==
name|Operation
operator|.
name|ADD
operator|&&
name|left
operator|.
name|actual
operator|.
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
operator|(
operator|(
name|EBinary
operator|)
name|left
operator|)
operator|.
name|cat
operator|=
literal|true
expr_stmt|;
block|}
name|right
operator|.
name|expected
operator|=
name|right
operator|.
name|actual
expr_stmt|;
if|if
condition|(
name|right
operator|instanceof
name|EBinary
operator|&&
operator|(
operator|(
name|EBinary
operator|)
name|right
operator|)
operator|.
name|operation
operator|==
name|Operation
operator|.
name|ADD
operator|&&
name|right
operator|.
name|actual
operator|.
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
operator|(
operator|(
name|EBinary
operator|)
name|right
operator|)
operator|.
name|cat
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
block|}
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|overflow
init|=
name|settings
operator|.
name|getNumericOverflow
argument_list|()
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|+
operator|(
name|int
operator|)
name|right
operator|.
name|constant
else|:
name|Math
operator|.
name|addExact
argument_list|(
operator|(
name|int
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|int
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|+
operator|(
name|long
operator|)
name|right
operator|.
name|constant
else|:
name|Math
operator|.
name|addExact
argument_list|(
operator|(
name|long
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|long
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|+
operator|(
name|float
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|float
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|+
operator|(
name|double
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|double
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
name|constant
operator|=
literal|""
operator|+
name|left
operator|.
name|constant
operator|+
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeSub
specifier|private
name|void
name|analyzeSub
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply subtract [-] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|overflow
init|=
name|settings
operator|.
name|getNumericOverflow
argument_list|()
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|-
operator|(
name|int
operator|)
name|right
operator|.
name|constant
else|:
name|Math
operator|.
name|subtractExact
argument_list|(
operator|(
name|int
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|int
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|-
operator|(
name|long
operator|)
name|right
operator|.
name|constant
else|:
name|Math
operator|.
name|subtractExact
argument_list|(
operator|(
name|long
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|long
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|-
operator|(
name|float
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|float
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
name|overflow
condition|?
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|-
operator|(
name|double
operator|)
name|right
operator|.
name|constant
else|:
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|left
operator|.
name|constant
argument_list|,
operator|(
name|double
operator|)
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeLSH
specifier|private
name|void
name|analyzeLSH
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply left shift [<<] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
name|right
operator|.
name|explicit
operator|=
literal|true
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|<<
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|<<
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeRSH
specifier|private
name|void
name|analyzeRSH
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply right shift [>>] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
name|right
operator|.
name|explicit
operator|=
literal|true
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|>>
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|>>
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeUSH
specifier|private
name|void
name|analyzeUSH
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply unsigned shift [>>>] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
name|right
operator|.
name|explicit
operator|=
literal|true
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|>>>
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|>>>
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeBWAnd
specifier|private
name|void
name|analyzeBWAnd
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply and [&] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|&
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|&
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeXor
specifier|private
name|void
name|analyzeXor
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteXor
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply xor [^] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|constant
operator|=
operator|(
name|boolean
operator|)
name|left
operator|.
name|constant
operator|^
operator|(
name|boolean
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|^
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|^
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
DECL|method|analyzeBWOr
specifier|private
name|void
name|analyzeBWOr
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply or [|] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator||
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator||
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|promote
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|MethodWriter
name|adapter
parameter_list|)
block|{
if|if
condition|(
name|actual
operator|.
name|sort
operator|==
name|Sort
operator|.
name|STRING
operator|&&
name|operation
operator|==
name|Operation
operator|.
name|ADD
condition|)
block|{
if|if
condition|(
operator|!
name|cat
condition|)
block|{
name|adapter
operator|.
name|writeNewStrings
argument_list|()
expr_stmt|;
block|}
name|left
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|left
operator|instanceof
name|EBinary
operator|)
operator|||
operator|(
operator|(
name|EBinary
operator|)
name|left
operator|)
operator|.
name|operation
operator|!=
name|Operation
operator|.
name|ADD
operator|||
name|left
operator|.
name|actual
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|STRING
condition|)
block|{
name|adapter
operator|.
name|writeAppendStrings
argument_list|(
name|left
operator|.
name|actual
operator|.
name|sort
argument_list|)
expr_stmt|;
block|}
name|right
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|right
operator|instanceof
name|EBinary
operator|)
operator|||
operator|(
operator|(
name|EBinary
operator|)
name|right
operator|)
operator|.
name|operation
operator|!=
name|Operation
operator|.
name|ADD
operator|||
name|right
operator|.
name|actual
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|STRING
condition|)
block|{
name|adapter
operator|.
name|writeAppendStrings
argument_list|(
name|right
operator|.
name|actual
operator|.
name|sort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cat
condition|)
block|{
name|adapter
operator|.
name|writeToStrings
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|left
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|right
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|writeBinaryInstruction
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|location
argument_list|,
name|actual
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
name|adapter
operator|.
name|writeBranch
argument_list|(
name|tru
argument_list|,
name|fals
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

