begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
import|;
end_import

begin_class
DECL|class|SDefEach
specifier|public
class|class
name|SDefEach
extends|extends
name|AStatement
block|{
DECL|field|maxLoopCounter
specifier|final
name|int
name|maxLoopCounter
decl_stmt|;
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|expression
name|AExpression
name|expression
decl_stmt|;
DECL|field|block
name|AStatement
name|block
decl_stmt|;
DECL|method|SDefEach
specifier|public
name|SDefEach
parameter_list|(
name|Location
name|location
parameter_list|,
name|int
name|maxLoopCounter
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|AExpression
name|expression
parameter_list|,
name|SBlock
name|block
parameter_list|)
block|{
name|super
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLoopCounter
operator|=
name|maxLoopCounter
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|AStatement
name|analyze
parameter_list|(
name|Variables
name|variables
parameter_list|)
block|{
comment|// Note that we do not need to analyze the expression as this must already be done
comment|// in the parent to determine that the for each target type is def.
throw|throw
name|location
operator|.
name|createError
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot execute for each against def type."
argument_list|)
argument_list|)
throw|;
comment|/*         try {             type = Definition.getType(this.type);         } catch (IllegalArgumentException exception) {             throw createError(new IllegalArgumentException("Not a type [" + this.type + "]."));         }          variables.incrementScope();          Type itr = Definition.getType("Iterator");          variable = variables.addVariable(location, type, name, true, false);          // We must store the iterator as a variable for securing a slot on the stack, and         // also add the location offset to make the name unique in case of nested for each loops.         iterator = variables.addVariable(location, itr, "#itr" + location.getOffset(), true, false);          method = expression.actual.struct.methods.get(new MethodKey("iterator", 0));          if (method == null) {             throw location.createError(new IllegalArgumentException(                 "Unable to create iterator for the type [" + expression.actual.name + "]."));         }          hasNext = itr.struct.methods.get(new MethodKey("hasNext", 0));          if (hasNext == null) {             throw location.createError(new IllegalArgumentException("Method [hasNext] does not exist for type [Iterator]."));         } else if (hasNext.rtn.sort != Sort.BOOL) {             throw location.createError(new IllegalArgumentException("Method [hasNext] does not return type [boolean]."));         }          next = itr.struct.methods.get(new MethodKey("next", 0));          if (next == null) {             throw location.createError(new IllegalArgumentException("Method [next] does not exist for type [Iterator]."));         } else if (next.rtn.sort != Sort.DEF) {             throw location.createError(new IllegalArgumentException("Method [next] does not return type [def]."));         }          cast = AnalyzerCaster.getLegalCast(location, Definition.DEF_TYPE, type, true, true);          if (block == null) {             throw location.createError(new IllegalArgumentException("Extraneous for each loop."));         }          block.beginLoop = true;         block.inLoop = true;         block = block.analyze(variables);         block.statementCount = Math.max(1, block.statementCount);          if (block.loopEscape&& !block.anyContinue) {             throw createError(new IllegalArgumentException("Extraneous for loop."));         }          statementCount = 1;          if (maxLoopCounter> 0) {             loopCounterSlot = variables.getVariable(location, "#loop").slot;         }          variables.decrementScope();          return this;         */
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|MethodWriter
name|writer
parameter_list|)
block|{
throw|throw
name|location
operator|.
name|createError
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
comment|/*         writer.writeStatementOffset(location);          expression.write(writer);          if (java.lang.reflect.Modifier.isInterface(method.owner.clazz.getModifiers())) {             writer.invokeInterface(method.owner.type, method.method);         } else {             writer.invokeVirtual(method.owner.type, method.method);         }          writer.visitVarInsn(iterator.type.type.getOpcode(Opcodes.ISTORE), iterator.slot);          Label begin = new Label();         Label end = new Label();          writer.mark(begin);          writer.visitVarInsn(iterator.type.type.getOpcode(Opcodes.ILOAD), iterator.slot);         writer.invokeInterface(hasNext.owner.type, hasNext.method);         writer.ifZCmp(MethodWriter.EQ, end);          writer.visitVarInsn(iterator.type.type.getOpcode(Opcodes.ILOAD), iterator.slot);         writer.invokeInterface(next.owner.type, next.method);         writer.writeCast(cast);         writer.visitVarInsn(variable.type.type.getOpcode(Opcodes.ISTORE), variable.slot);          block.write(writer);          writer.goTo(begin);         writer.mark(end);         */
block|}
block|}
end_class

end_unit

