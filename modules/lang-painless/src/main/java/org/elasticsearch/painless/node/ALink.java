begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|CompilerSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|GeneratorAdapter
import|;
end_import

begin_comment
comment|/**  * The superclass for all L* (link) nodes.  */
end_comment

begin_class
DECL|class|ALink
specifier|public
specifier|abstract
class|class
name|ALink
extends|extends
name|ANode
block|{
comment|/**      * Size is set to a value based on this link's size on the stack.  This is      * used during the writing phase to dup stack values from this link as      * necessary during certain store operations.      */
DECL|field|size
specifier|final
name|int
name|size
decl_stmt|;
comment|/**      * Set to false only if the link is not going to be read from.      */
DECL|field|load
name|boolean
name|load
init|=
literal|true
decl_stmt|;
comment|/**      * Set to true only if the link is going to be written to and      * is the final link in a chain.      */
DECL|field|store
name|boolean
name|store
init|=
literal|false
decl_stmt|;
comment|/**      * Set to true if this link represents a statik type to be accessed.      */
DECL|field|statik
name|boolean
name|statik
init|=
literal|false
decl_stmt|;
comment|/**      * Set by the parent chain to type of the previous link or null if      * there was no previous link.      */
DECL|field|before
name|Type
name|before
init|=
literal|null
decl_stmt|;
comment|/**      * Set by the link to be the type after the link has been loaded/stored.      */
DECL|field|after
name|Type
name|after
init|=
literal|null
decl_stmt|;
comment|/**      * Set to true if this link could be a stand-alone statement.      */
DECL|field|statement
name|boolean
name|statement
init|=
literal|false
decl_stmt|;
comment|/**      * Used by {@link LString} to set the value of the String constant.  Also      * used by shortcuts to represent a constant key.      */
DECL|field|string
name|String
name|string
init|=
literal|null
decl_stmt|;
DECL|method|ALink
name|ALink
parameter_list|(
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|line
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/**      * Checks for errors and collects data for the writing phase.      * @return Possibly returns a different {@link ALink} node if a type is      * def or a shortcut is used. Otherwise, returns itself.  This will be      * updated into the {@link EChain} node's list of links.      */
DECL|method|analyze
specifier|abstract
name|ALink
name|analyze
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
function_decl|;
comment|/**      * Write values before a load/store occurs such as an array index.      */
DECL|method|write
specifier|abstract
name|void
name|write
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|GeneratorAdapter
name|adapter
parameter_list|)
function_decl|;
comment|/**      * Write a load for the specific link type.      */
DECL|method|load
specifier|abstract
name|void
name|load
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|GeneratorAdapter
name|adapter
parameter_list|)
function_decl|;
comment|/**      * Write a store for the specific link type.      */
DECL|method|store
specifier|abstract
name|void
name|store
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|GeneratorAdapter
name|adapter
parameter_list|)
function_decl|;
comment|/**      * Used to copy link data from one to another during analysis in the case of replacement.      */
DECL|method|copy
specifier|final
name|ALink
name|copy
parameter_list|(
specifier|final
name|ALink
name|link
parameter_list|)
block|{
name|load
operator|=
name|link
operator|.
name|load
expr_stmt|;
name|store
operator|=
name|link
operator|.
name|store
expr_stmt|;
name|statik
operator|=
name|link
operator|.
name|statik
expr_stmt|;
name|before
operator|=
name|link
operator|.
name|before
expr_stmt|;
name|after
operator|=
name|link
operator|.
name|after
expr_stmt|;
name|statement
operator|=
name|link
operator|.
name|statement
expr_stmt|;
name|string
operator|=
name|link
operator|.
name|string
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

