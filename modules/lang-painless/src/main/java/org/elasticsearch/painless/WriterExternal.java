begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Metadata
operator|.
name|ExpressionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Metadata
operator|.
name|ExtNodeMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Metadata
operator|.
name|ExternalMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExpressionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtbraceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtcallContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtcastContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtdotContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtfieldContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtnewContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtprecContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtstartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtstringContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtvarContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|GeneratorAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ADD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DIV
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|MUL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|REM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|SUB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOBYTEEXACT_INT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOBYTEEXACT_LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOBYTEWOOVERFLOW_DOUBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOBYTEWOOVERFLOW_FLOAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOCHAREXACT_INT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOCHAREXACT_LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOCHARWOOVERFLOW_DOUBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOCHARWOOVERFLOW_FLOAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOFLOATWOOVERFLOW_DOUBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOINTEXACT_LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOINTWOOVERFLOW_DOUBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOINTWOOVERFLOW_FLOAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOLONGWOOVERFLOW_DOUBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOLONGWOOVERFLOW_FLOAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOSHORTEXACT_INT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOSHORTEXACT_LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOSHORTWOOVERFLOW_DOUBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|TOSHORTWOOVERFLOW_FLOAT
import|;
end_import

begin_class
DECL|class|WriterExternal
class|class
name|WriterExternal
block|{
DECL|field|metadata
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
DECL|field|definition
specifier|private
specifier|final
name|Definition
name|definition
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|CompilerSettings
name|settings
decl_stmt|;
DECL|field|execute
specifier|private
specifier|final
name|GeneratorAdapter
name|execute
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|Writer
name|writer
decl_stmt|;
DECL|field|utility
specifier|private
specifier|final
name|WriterUtility
name|utility
decl_stmt|;
DECL|field|caster
specifier|private
specifier|final
name|WriterCaster
name|caster
decl_stmt|;
DECL|method|WriterExternal
name|WriterExternal
parameter_list|(
specifier|final
name|Metadata
name|metadata
parameter_list|,
specifier|final
name|GeneratorAdapter
name|execute
parameter_list|,
specifier|final
name|Writer
name|writer
parameter_list|,
specifier|final
name|WriterUtility
name|utility
parameter_list|,
specifier|final
name|WriterCaster
name|caster
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|definition
operator|=
name|metadata
operator|.
name|definition
expr_stmt|;
name|settings
operator|=
name|metadata
operator|.
name|settings
expr_stmt|;
name|this
operator|.
name|execute
operator|=
name|execute
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|utility
operator|=
name|utility
expr_stmt|;
name|this
operator|.
name|caster
operator|=
name|caster
expr_stmt|;
block|}
DECL|method|processExtstart
name|void
name|processExtstart
parameter_list|(
specifier|final
name|ExtstartContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExternalMetadata
name|startemd
init|=
name|metadata
operator|.
name|getExternalMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|startemd
operator|.
name|token
operator|==
name|ADD
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|storeemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|startemd
operator|.
name|storeExpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|startemd
operator|.
name|current
operator|.
name|sort
operator|==
name|Sort
operator|.
name|STRING
operator|||
name|storeemd
operator|.
name|from
operator|.
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
name|utility
operator|.
name|writeNewStrings
argument_list|()
expr_stmt|;
name|utility
operator|.
name|addStrings
argument_list|(
name|startemd
operator|.
name|storeExpr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ExtprecContext
name|precctx
init|=
name|ctx
operator|.
name|extprec
argument_list|()
decl_stmt|;
specifier|final
name|ExtcastContext
name|castctx
init|=
name|ctx
operator|.
name|extcast
argument_list|()
decl_stmt|;
specifier|final
name|ExtvarContext
name|varctx
init|=
name|ctx
operator|.
name|extvar
argument_list|()
decl_stmt|;
specifier|final
name|ExtnewContext
name|newctx
init|=
name|ctx
operator|.
name|extnew
argument_list|()
decl_stmt|;
specifier|final
name|ExtstringContext
name|stringctx
init|=
name|ctx
operator|.
name|extstring
argument_list|()
decl_stmt|;
if|if
condition|(
name|precctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|precctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|castctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|castctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|varctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|newctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stringctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|stringctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
DECL|method|processExtprec
name|void
name|processExtprec
parameter_list|(
specifier|final
name|ExtprecContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtprecContext
name|precctx
init|=
name|ctx
operator|.
name|extprec
argument_list|()
decl_stmt|;
specifier|final
name|ExtcastContext
name|castctx
init|=
name|ctx
operator|.
name|extcast
argument_list|()
decl_stmt|;
specifier|final
name|ExtvarContext
name|varctx
init|=
name|ctx
operator|.
name|extvar
argument_list|()
decl_stmt|;
specifier|final
name|ExtnewContext
name|newctx
init|=
name|ctx
operator|.
name|extnew
argument_list|()
decl_stmt|;
specifier|final
name|ExtstringContext
name|stringctx
init|=
name|ctx
operator|.
name|extstring
argument_list|()
decl_stmt|;
if|if
condition|(
name|precctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|precctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|castctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|castctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|varctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|newctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stringctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|stringctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processExtcast
name|void
name|processExtcast
parameter_list|(
specifier|final
name|ExtcastContext
name|ctx
parameter_list|)
block|{
name|ExtNodeMetadata
name|castenmd
init|=
name|metadata
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExtprecContext
name|precctx
init|=
name|ctx
operator|.
name|extprec
argument_list|()
decl_stmt|;
specifier|final
name|ExtcastContext
name|castctx
init|=
name|ctx
operator|.
name|extcast
argument_list|()
decl_stmt|;
specifier|final
name|ExtvarContext
name|varctx
init|=
name|ctx
operator|.
name|extvar
argument_list|()
decl_stmt|;
specifier|final
name|ExtnewContext
name|newctx
init|=
name|ctx
operator|.
name|extnew
argument_list|()
decl_stmt|;
specifier|final
name|ExtstringContext
name|stringctx
init|=
name|ctx
operator|.
name|extstring
argument_list|()
decl_stmt|;
if|if
condition|(
name|precctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|precctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|castctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|castctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|varctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|newctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stringctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|stringctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|ctx
argument_list|,
name|castenmd
operator|.
name|castTo
argument_list|)
expr_stmt|;
block|}
DECL|method|processExtbrace
name|void
name|processExtbrace
parameter_list|(
specifier|final
name|ExtbraceContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|ctx
operator|.
name|expression
argument_list|()
decl_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|writeLoadStoreExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processExtdot
name|void
name|processExtdot
parameter_list|(
specifier|final
name|ExtdotContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtcallContext
name|callctx
init|=
name|ctx
operator|.
name|extcall
argument_list|()
decl_stmt|;
specifier|final
name|ExtfieldContext
name|fieldctx
init|=
name|ctx
operator|.
name|extfield
argument_list|()
decl_stmt|;
if|if
condition|(
name|callctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|callctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|fieldctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processExtcall
name|void
name|processExtcall
parameter_list|(
specifier|final
name|ExtcallContext
name|ctx
parameter_list|)
block|{
name|writeCallExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processExtvar
name|void
name|processExtvar
parameter_list|(
specifier|final
name|ExtvarContext
name|ctx
parameter_list|)
block|{
name|writeLoadStoreExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processExtfield
name|void
name|processExtfield
parameter_list|(
specifier|final
name|ExtfieldContext
name|ctx
parameter_list|)
block|{
name|writeLoadStoreExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processExtnew
name|void
name|processExtnew
parameter_list|(
specifier|final
name|ExtnewContext
name|ctx
parameter_list|)
block|{
name|writeNewExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processExtstring
name|void
name|processExtstring
parameter_list|(
specifier|final
name|ExtstringContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|stringenmd
init|=
name|metadata
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|utility
operator|.
name|writeConstant
argument_list|(
name|ctx
argument_list|,
name|stringenmd
operator|.
name|target
argument_list|)
expr_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeLoadStoreExternal
specifier|private
name|void
name|writeLoadStoreExternal
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|sourceenmd
init|=
name|metadata
operator|.
name|getExtNodeMetadata
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|metadata
operator|.
name|getExternalMetadata
argument_list|(
name|sourceenmd
operator|.
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceenmd
operator|.
name|target
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|boolean
name|length
init|=
literal|"#length"
operator|.
name|equals
argument_list|(
name|sourceenmd
operator|.
name|target
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|array
init|=
literal|"#brace"
operator|.
name|equals
argument_list|(
name|sourceenmd
operator|.
name|target
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|name
init|=
name|sourceenmd
operator|.
name|target
operator|instanceof
name|String
operator|&&
operator|!
name|length
operator|&&
operator|!
name|array
decl_stmt|;
specifier|final
name|boolean
name|variable
init|=
name|sourceenmd
operator|.
name|target
operator|instanceof
name|Integer
decl_stmt|;
specifier|final
name|boolean
name|field
init|=
name|sourceenmd
operator|.
name|target
operator|instanceof
name|Field
decl_stmt|;
specifier|final
name|boolean
name|shortcut
init|=
name|sourceenmd
operator|.
name|target
operator|instanceof
name|Object
index|[]
decl_stmt|;
if|if
condition|(
operator|!
name|length
operator|&&
operator|!
name|variable
operator|&&
operator|!
name|field
operator|&&
operator|!
name|array
operator|&&
operator|!
name|name
operator|&&
operator|!
name|shortcut
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Target not found for load/store."
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|maplist
init|=
name|shortcut
operator|&&
call|(
name|boolean
call|)
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|sourceenmd
operator|.
name|target
argument_list|)
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|Object
name|constant
init|=
name|shortcut
condition|?
operator|(
operator|(
name|Object
index|[]
operator|)
name|sourceenmd
operator|.
name|target
operator|)
index|[
literal|3
index|]
else|:
literal|null
decl_stmt|;
specifier|final
name|boolean
name|x1
init|=
name|field
operator|||
name|name
operator|||
operator|(
name|shortcut
operator|&&
operator|!
name|maplist
operator|)
decl_stmt|;
specifier|final
name|boolean
name|x2
init|=
name|array
operator|||
operator|(
name|shortcut
operator|&&
name|maplist
operator|)
decl_stmt|;
if|if
condition|(
name|length
condition|)
block|{
name|execute
operator|.
name|arrayLength
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceenmd
operator|.
name|last
operator|&&
name|parentemd
operator|.
name|storeExpr
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|parentemd
operator|.
name|storeExpr
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|cat
init|=
name|utility
operator|.
name|containsStrings
argument_list|(
name|parentemd
operator|.
name|storeExpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|cat
condition|)
block|{
if|if
condition|(
name|field
operator|||
name|name
operator|||
name|shortcut
condition|)
block|{
name|execute
operator|.
name|dupX1
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|array
condition|)
block|{
name|execute
operator|.
name|dup2X1
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maplist
condition|)
block|{
if|if
condition|(
name|constant
operator|!=
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|source
argument_list|,
name|constant
argument_list|)
expr_stmt|;
block|}
name|execute
operator|.
name|dupX2
argument_list|()
expr_stmt|;
block|}
name|writeLoadStoreInstruction
argument_list|(
name|source
argument_list|,
literal|false
argument_list|,
name|variable
argument_list|,
name|field
argument_list|,
name|name
argument_list|,
name|array
argument_list|,
name|shortcut
argument_list|)
expr_stmt|;
name|utility
operator|.
name|writeAppendStrings
argument_list|(
name|sourceenmd
operator|.
name|type
operator|.
name|sort
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|parentemd
operator|.
name|storeExpr
argument_list|)
expr_stmt|;
if|if
condition|(
name|utility
operator|.
name|containsStrings
argument_list|(
name|parentemd
operator|.
name|storeExpr
argument_list|)
condition|)
block|{
name|utility
operator|.
name|writeAppendStrings
argument_list|(
name|expremd
operator|.
name|to
operator|.
name|sort
argument_list|)
expr_stmt|;
name|utility
operator|.
name|removeStrings
argument_list|(
name|parentemd
operator|.
name|storeExpr
argument_list|)
expr_stmt|;
block|}
name|utility
operator|.
name|writeToStrings
argument_list|()
expr_stmt|;
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|source
argument_list|,
name|sourceenmd
operator|.
name|castTo
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|read
condition|)
block|{
name|utility
operator|.
name|writeDup
argument_list|(
name|sourceenmd
operator|.
name|type
operator|.
name|sort
operator|.
name|size
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
block|}
name|writeLoadStoreInstruction
argument_list|(
name|source
argument_list|,
literal|true
argument_list|,
name|variable
argument_list|,
name|field
argument_list|,
name|name
argument_list|,
name|array
argument_list|,
name|shortcut
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parentemd
operator|.
name|token
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|token
init|=
name|parentemd
operator|.
name|token
decl_stmt|;
if|if
condition|(
name|field
operator|||
name|name
operator|||
name|shortcut
condition|)
block|{
name|execute
operator|.
name|dup
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|array
condition|)
block|{
name|execute
operator|.
name|dup2
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maplist
condition|)
block|{
if|if
condition|(
name|constant
operator|!=
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|source
argument_list|,
name|constant
argument_list|)
expr_stmt|;
block|}
name|execute
operator|.
name|dupX1
argument_list|()
expr_stmt|;
block|}
name|writeLoadStoreInstruction
argument_list|(
name|source
argument_list|,
literal|false
argument_list|,
name|variable
argument_list|,
name|field
argument_list|,
name|name
argument_list|,
name|array
argument_list|,
name|shortcut
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|read
operator|&&
name|parentemd
operator|.
name|post
condition|)
block|{
name|utility
operator|.
name|writeDup
argument_list|(
name|sourceenmd
operator|.
name|type
operator|.
name|sort
operator|.
name|size
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
block|}
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|source
argument_list|,
name|sourceenmd
operator|.
name|castFrom
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|parentemd
operator|.
name|storeExpr
argument_list|)
expr_stmt|;
name|utility
operator|.
name|writeBinaryInstruction
argument_list|(
name|source
argument_list|,
name|sourceenmd
operator|.
name|promote
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|boolean
name|exact
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|settings
operator|.
name|getNumericOverflow
argument_list|()
operator|&&
name|expremd
operator|.
name|typesafe
operator|&&
name|sourceenmd
operator|.
name|type
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
operator|&&
operator|(
name|token
operator|==
name|MUL
operator|||
name|token
operator|==
name|DIV
operator|||
name|token
operator|==
name|REM
operator|||
name|token
operator|==
name|ADD
operator|||
name|token
operator|==
name|SUB
operator|)
condition|)
block|{
name|exact
operator|=
name|writeExactInstruction
argument_list|(
name|sourceenmd
operator|.
name|type
operator|.
name|sort
argument_list|,
name|sourceenmd
operator|.
name|promote
operator|.
name|sort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exact
condition|)
block|{
name|caster
operator|.
name|checkWriteCast
argument_list|(
name|source
argument_list|,
name|sourceenmd
operator|.
name|castTo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentemd
operator|.
name|read
operator|&&
operator|!
name|parentemd
operator|.
name|post
condition|)
block|{
name|utility
operator|.
name|writeDup
argument_list|(
name|sourceenmd
operator|.
name|type
operator|.
name|sort
operator|.
name|size
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
block|}
name|writeLoadStoreInstruction
argument_list|(
name|source
argument_list|,
literal|true
argument_list|,
name|variable
argument_list|,
name|field
argument_list|,
name|name
argument_list|,
name|array
argument_list|,
name|shortcut
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|constant
operator|!=
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|source
argument_list|,
name|constant
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|visit
argument_list|(
name|parentemd
operator|.
name|storeExpr
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|read
condition|)
block|{
name|utility
operator|.
name|writeDup
argument_list|(
name|sourceenmd
operator|.
name|type
operator|.
name|sort
operator|.
name|size
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
block|}
name|writeLoadStoreInstruction
argument_list|(
name|source
argument_list|,
literal|true
argument_list|,
name|variable
argument_list|,
name|field
argument_list|,
name|name
argument_list|,
name|array
argument_list|,
name|shortcut
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|constant
operator|!=
literal|null
condition|)
block|{
name|utility
operator|.
name|writeConstant
argument_list|(
name|source
argument_list|,
name|constant
argument_list|)
expr_stmt|;
block|}
name|writeLoadStoreInstruction
argument_list|(
name|source
argument_list|,
literal|false
argument_list|,
name|variable
argument_list|,
name|field
argument_list|,
name|name
argument_list|,
name|array
argument_list|,
name|shortcut
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeLoadStoreInstruction
specifier|private
name|void
name|writeLoadStoreInstruction
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|boolean
name|store
parameter_list|,
specifier|final
name|boolean
name|variable
parameter_list|,
specifier|final
name|boolean
name|field
parameter_list|,
specifier|final
name|boolean
name|name
parameter_list|,
specifier|final
name|boolean
name|array
parameter_list|,
specifier|final
name|boolean
name|shortcut
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|sourceemd
init|=
name|metadata
operator|.
name|getExtNodeMetadata
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|variable
condition|)
block|{
name|writeLoadStoreVariable
argument_list|(
name|source
argument_list|,
name|store
argument_list|,
name|sourceemd
operator|.
name|type
argument_list|,
operator|(
name|int
operator|)
name|sourceemd
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
condition|)
block|{
name|writeLoadStoreField
argument_list|(
name|store
argument_list|,
operator|(
name|Field
operator|)
name|sourceemd
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
condition|)
block|{
name|writeLoadStoreField
argument_list|(
name|source
argument_list|,
name|store
argument_list|,
operator|(
name|String
operator|)
name|sourceemd
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|array
condition|)
block|{
name|writeLoadStoreArray
argument_list|(
name|source
argument_list|,
name|store
argument_list|,
name|sourceemd
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shortcut
condition|)
block|{
name|Object
index|[]
name|targets
init|=
operator|(
name|Object
index|[]
operator|)
name|sourceemd
operator|.
name|target
decl_stmt|;
name|writeLoadStoreShortcut
argument_list|(
name|store
argument_list|,
operator|(
name|Method
operator|)
name|targets
index|[
literal|0
index|]
argument_list|,
operator|(
name|Method
operator|)
name|targets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Load/Store requires a variable, field, or array."
argument_list|)
throw|;
block|}
block|}
DECL|method|writeLoadStoreVariable
specifier|private
name|void
name|writeLoadStoreVariable
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|boolean
name|store
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|sort
operator|==
name|Sort
operator|.
name|VOID
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Cannot load/store void type."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|metadata
operator|.
name|scoreValueUsed
operator|&&
name|slot
operator|>
name|metadata
operator|.
name|scoreValueSlot
condition|)
block|{
operator|--
name|slot
expr_stmt|;
block|}
if|if
condition|(
name|store
condition|)
block|{
name|execute
operator|.
name|visitVarInsn
argument_list|(
name|type
operator|.
name|type
operator|.
name|getOpcode
argument_list|(
name|Opcodes
operator|.
name|ISTORE
argument_list|)
argument_list|,
name|slot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|visitVarInsn
argument_list|(
name|type
operator|.
name|type
operator|.
name|getOpcode
argument_list|(
name|Opcodes
operator|.
name|ILOAD
argument_list|)
argument_list|,
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeLoadStoreField
specifier|private
name|void
name|writeLoadStoreField
parameter_list|(
specifier|final
name|boolean
name|store
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|)
block|{
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|reflect
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|store
condition|)
block|{
name|execute
operator|.
name|putStatic
argument_list|(
name|field
operator|.
name|owner
operator|.
name|type
argument_list|,
name|field
operator|.
name|reflect
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|type
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|getStatic
argument_list|(
name|field
operator|.
name|owner
operator|.
name|type
argument_list|,
name|field
operator|.
name|reflect
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|type
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|generic
operator|.
name|clazz
operator|.
name|equals
argument_list|(
name|field
operator|.
name|type
operator|.
name|clazz
argument_list|)
condition|)
block|{
name|execute
operator|.
name|checkCast
argument_list|(
name|field
operator|.
name|generic
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|store
condition|)
block|{
name|execute
operator|.
name|putField
argument_list|(
name|field
operator|.
name|owner
operator|.
name|type
argument_list|,
name|field
operator|.
name|reflect
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|type
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|getField
argument_list|(
name|field
operator|.
name|owner
operator|.
name|type
argument_list|,
name|field
operator|.
name|reflect
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|type
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|generic
operator|.
name|clazz
operator|.
name|equals
argument_list|(
name|field
operator|.
name|type
operator|.
name|clazz
argument_list|)
condition|)
block|{
name|execute
operator|.
name|checkCast
argument_list|(
name|field
operator|.
name|generic
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|writeLoadStoreField
specifier|private
name|void
name|writeLoadStoreField
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|boolean
name|store
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|store
condition|)
block|{
name|execute
operator|.
name|visitInvokeDynamicInsn
argument_list|(
name|name
argument_list|,
name|WriterConstants
operator|.
name|DEF_DYNAMIC_STORE_FIELD_DESC
argument_list|,
name|WriterConstants
operator|.
name|DEF_BOOTSTRAP_HANDLE
argument_list|,
operator|new
name|Object
index|[]
block|{
name|DynamicCallSite
operator|.
name|STORE
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|visitInvokeDynamicInsn
argument_list|(
name|name
argument_list|,
name|WriterConstants
operator|.
name|DEF_DYNAMIC_LOAD_FIELD_DESC
argument_list|,
name|WriterConstants
operator|.
name|DEF_BOOTSTRAP_HANDLE
argument_list|,
operator|new
name|Object
index|[]
block|{
name|DynamicCallSite
operator|.
name|LOAD
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeLoadStoreArray
specifier|private
name|void
name|writeLoadStoreArray
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|boolean
name|store
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|sort
operator|==
name|Sort
operator|.
name|VOID
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Cannot load/store void type."
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|.
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
if|if
condition|(
name|store
condition|)
block|{
name|execute
operator|.
name|visitInvokeDynamicInsn
argument_list|(
literal|"arrayStore"
argument_list|,
name|WriterConstants
operator|.
name|DEF_DYNAMIC_ARRAY_STORE_DESC
argument_list|,
name|WriterConstants
operator|.
name|DEF_BOOTSTRAP_HANDLE
argument_list|,
operator|new
name|Object
index|[]
block|{
name|DynamicCallSite
operator|.
name|ARRAY_STORE
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|visitInvokeDynamicInsn
argument_list|(
literal|"arrayLoad"
argument_list|,
name|WriterConstants
operator|.
name|DEF_DYNAMIC_ARRAY_LOAD_DESC
argument_list|,
name|WriterConstants
operator|.
name|DEF_BOOTSTRAP_HANDLE
argument_list|,
operator|new
name|Object
index|[]
block|{
name|DynamicCallSite
operator|.
name|ARRAY_LOAD
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|store
condition|)
block|{
name|execute
operator|.
name|arrayStore
argument_list|(
name|type
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|arrayLoad
argument_list|(
name|type
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeLoadStoreShortcut
specifier|private
name|void
name|writeLoadStoreShortcut
parameter_list|(
specifier|final
name|boolean
name|store
parameter_list|,
specifier|final
name|Method
name|getter
parameter_list|,
specifier|final
name|Method
name|setter
parameter_list|)
block|{
specifier|final
name|Method
name|method
init|=
name|store
condition|?
name|setter
else|:
name|getter
decl_stmt|;
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isInterface
argument_list|(
name|getter
operator|.
name|owner
operator|.
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|execute
operator|.
name|invokeInterface
argument_list|(
name|method
operator|.
name|owner
operator|.
name|type
argument_list|,
name|method
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|invokeVirtual
argument_list|(
name|method
operator|.
name|owner
operator|.
name|type
argument_list|,
name|method
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|store
condition|)
block|{
name|utility
operator|.
name|writePop
argument_list|(
name|method
operator|.
name|rtn
operator|.
name|type
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|method
operator|.
name|rtn
operator|.
name|clazz
operator|.
name|equals
argument_list|(
name|method
operator|.
name|handle
operator|.
name|type
argument_list|()
operator|.
name|returnType
argument_list|()
argument_list|)
condition|)
block|{
name|execute
operator|.
name|checkCast
argument_list|(
name|method
operator|.
name|rtn
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called for any compound assignment (including increment/decrement instructions).      * We have to be stricter than writeBinary, and do overflow checks against the original type's size      * instead of the promoted type's size, since the result will be implicitly cast back.      *      * @return This will be true if an instruction is written, false otherwise.      */
DECL|method|writeExactInstruction
specifier|private
name|boolean
name|writeExactInstruction
parameter_list|(
specifier|final
name|Sort
name|osort
parameter_list|,
specifier|final
name|Sort
name|psort
parameter_list|)
block|{
if|if
condition|(
name|psort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOFLOATWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOFLOATWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|floatobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOLONGWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|LONG_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOLONGWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|longobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOINTWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOINTWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|intobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|CHAR
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOCHARWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOCHARWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|charobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|SHORT
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOSHORTWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOSHORTWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|shortobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|BYTE
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOBYTEWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOBYTEWOOVERFLOW_DOUBLE
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|byteobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|psort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOLONGWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|LONG_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOLONGWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|longobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOINTWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOINTWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|intobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|CHAR
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOCHARWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOCHARWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|charobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|SHORT
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOSHORTWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOSHORTWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|shortobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|BYTE
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOBYTEWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOBYTEWOOVERFLOW_FLOAT
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|byteobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|psort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|mathType
operator|.
name|type
argument_list|,
name|TOINTEXACT_LONG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|mathType
operator|.
name|type
argument_list|,
name|TOINTEXACT_LONG
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|intobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|CHAR
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOCHAREXACT_LONG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOCHAREXACT_LONG
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|charobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|SHORT
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOSHORTEXACT_LONG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOSHORTEXACT_LONG
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|shortobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|BYTE
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOBYTEEXACT_LONG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOBYTEEXACT_LONG
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|byteobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|psort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|CHAR
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOCHAREXACT_INT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOCHAREXACT_INT
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|charobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|SHORT
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOSHORTEXACT_INT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOSHORTEXACT_INT
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|shortobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|BYTE
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOBYTEEXACT_INT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osort
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|TOBYTEEXACT_INT
argument_list|)
expr_stmt|;
name|execute
operator|.
name|checkCast
argument_list|(
name|definition
operator|.
name|byteobjType
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|writeNewExternal
specifier|private
name|void
name|writeNewExternal
parameter_list|(
specifier|final
name|ExtnewContext
name|source
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|sourceenmd
init|=
name|metadata
operator|.
name|getExtNodeMetadata
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|metadata
operator|.
name|getExternalMetadata
argument_list|(
name|sourceenmd
operator|.
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|makearray
init|=
literal|"#makearray"
operator|.
name|equals
argument_list|(
name|sourceenmd
operator|.
name|target
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|constructor
init|=
name|sourceenmd
operator|.
name|target
operator|instanceof
name|Constructor
decl_stmt|;
if|if
condition|(
operator|!
name|makearray
operator|&&
operator|!
name|constructor
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Target not found for new call."
argument_list|)
throw|;
block|}
if|if
condition|(
name|makearray
condition|)
block|{
for|for
control|(
specifier|final
name|ExpressionContext
name|exprctx
range|:
name|source
operator|.
name|expression
argument_list|()
control|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sourceenmd
operator|.
name|type
operator|.
name|sort
operator|==
name|Sort
operator|.
name|ARRAY
condition|)
block|{
name|execute
operator|.
name|visitMultiANewArrayInsn
argument_list|(
name|sourceenmd
operator|.
name|type
operator|.
name|type
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|sourceenmd
operator|.
name|type
operator|.
name|type
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|newArray
argument_list|(
name|sourceenmd
operator|.
name|type
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|execute
operator|.
name|newInstance
argument_list|(
name|sourceenmd
operator|.
name|type
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|read
condition|)
block|{
name|execute
operator|.
name|dup
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|ExpressionContext
name|exprctx
range|:
name|source
operator|.
name|arguments
argument_list|()
operator|.
name|expression
argument_list|()
control|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Constructor
name|target
init|=
operator|(
name|Constructor
operator|)
name|sourceenmd
operator|.
name|target
decl_stmt|;
name|execute
operator|.
name|invokeConstructor
argument_list|(
name|target
operator|.
name|owner
operator|.
name|type
argument_list|,
name|target
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeCallExternal
specifier|private
name|void
name|writeCallExternal
parameter_list|(
specifier|final
name|ExtcallContext
name|source
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|sourceenmd
init|=
name|metadata
operator|.
name|getExtNodeMetadata
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|method
init|=
name|sourceenmd
operator|.
name|target
operator|instanceof
name|Method
decl_stmt|;
specifier|final
name|boolean
name|def
init|=
name|sourceenmd
operator|.
name|target
operator|instanceof
name|String
decl_stmt|;
if|if
condition|(
operator|!
name|method
operator|&&
operator|!
name|def
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|WriterUtility
operator|.
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Target not found for call."
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|arguments
init|=
name|source
operator|.
name|arguments
argument_list|()
operator|.
name|expression
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
condition|)
block|{
for|for
control|(
specifier|final
name|ExpressionContext
name|exprctx
range|:
name|arguments
control|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Method
name|target
init|=
operator|(
name|Method
operator|)
name|sourceenmd
operator|.
name|target
decl_stmt|;
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isStatic
argument_list|(
name|target
operator|.
name|reflect
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|execute
operator|.
name|invokeStatic
argument_list|(
name|target
operator|.
name|owner
operator|.
name|type
argument_list|,
name|target
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isInterface
argument_list|(
name|target
operator|.
name|owner
operator|.
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|execute
operator|.
name|invokeInterface
argument_list|(
name|target
operator|.
name|owner
operator|.
name|type
argument_list|,
name|target
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execute
operator|.
name|invokeVirtual
argument_list|(
name|target
operator|.
name|owner
operator|.
name|type
argument_list|,
name|target
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|target
operator|.
name|rtn
operator|.
name|clazz
operator|.
name|equals
argument_list|(
name|target
operator|.
name|handle
operator|.
name|type
argument_list|()
operator|.
name|returnType
argument_list|()
argument_list|)
condition|)
block|{
name|execute
operator|.
name|checkCast
argument_list|(
name|target
operator|.
name|rtn
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeDynamicCallExternal
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeDynamicCallExternal
specifier|private
name|void
name|writeDynamicCallExternal
parameter_list|(
specifier|final
name|ExtcallContext
name|source
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|sourceenmd
init|=
name|metadata
operator|.
name|getExtNodeMetadata
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|arguments
init|=
name|source
operator|.
name|arguments
argument_list|()
operator|.
name|expression
argument_list|()
decl_stmt|;
name|StringBuilder
name|signature
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|signature
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
comment|// first parameter is the receiver, we never know its type: always Object
name|signature
operator|.
name|append
argument_list|(
name|WriterConstants
operator|.
name|OBJECT_TYPE
operator|.
name|getDescriptor
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: remove our explicit conversions and feed more type information for args/return value,
comment|// it can avoid some unnecessary boxing etc.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|signature
operator|.
name|append
argument_list|(
name|WriterConstants
operator|.
name|OBJECT_TYPE
operator|.
name|getDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|visit
argument_list|(
name|arguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|signature
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
comment|// return value
name|signature
operator|.
name|append
argument_list|(
name|WriterConstants
operator|.
name|OBJECT_TYPE
operator|.
name|getDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|execute
operator|.
name|visitInvokeDynamicInsn
argument_list|(
operator|(
name|String
operator|)
name|sourceenmd
operator|.
name|target
argument_list|,
name|signature
operator|.
name|toString
argument_list|()
argument_list|,
name|WriterConstants
operator|.
name|DEF_BOOTSTRAP_HANDLE
argument_list|,
operator|new
name|Object
index|[]
block|{
name|DynamicCallSite
operator|.
name|METHOD_CALL
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

