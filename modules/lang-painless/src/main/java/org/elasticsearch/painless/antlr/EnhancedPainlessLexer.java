begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.antlr
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|CharStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|Lexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|LexerNoViableAltException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|TokenSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Location
import|;
end_import

begin_comment
comment|/**  * A lexer that is customized for painless. It:  *<ul>  *<li>Overrides the default error behavior to fail on the first error.  *<li>Stores the last token in case we need to do lookbehind for semicolon insertion and regex vs division detection.  *<li>Implements the regex vs division detection.  *<li>Insert semicolons where they'd improve the language's readability. Rather than hack this into the parser and create a ton of  * ambiguity we hack them here where we can use heuristics to do it quickly.  *<li>Enhances the error message when a string contains invalid escape sequences to include a list of valid escape sequences.  *</ul>  */
end_comment

begin_class
DECL|class|EnhancedPainlessLexer
specifier|final
class|class
name|EnhancedPainlessLexer
extends|extends
name|PainlessLexer
block|{
DECL|field|sourceName
specifier|final
name|String
name|sourceName
decl_stmt|;
DECL|field|stashedNext
specifier|private
name|Token
name|stashedNext
init|=
literal|null
decl_stmt|;
DECL|field|previous
specifier|private
name|Token
name|previous
init|=
literal|null
decl_stmt|;
DECL|method|EnhancedPainlessLexer
name|EnhancedPainlessLexer
parameter_list|(
name|CharStream
name|charStream
parameter_list|,
name|String
name|sourceName
parameter_list|)
block|{
name|super
argument_list|(
name|charStream
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourceName
operator|=
name|sourceName
expr_stmt|;
block|}
DECL|method|getPreviousToken
specifier|public
name|Token
name|getPreviousToken
parameter_list|()
block|{
return|return
name|previous
return|;
block|}
annotation|@
name|Override
DECL|method|nextToken
specifier|public
name|Token
name|nextToken
parameter_list|()
block|{
if|if
condition|(
name|stashedNext
operator|!=
literal|null
condition|)
block|{
name|previous
operator|=
name|stashedNext
expr_stmt|;
name|stashedNext
operator|=
literal|null
expr_stmt|;
return|return
name|previous
return|;
block|}
name|Token
name|next
init|=
name|super
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|insertSemicolon
argument_list|(
name|previous
argument_list|,
name|next
argument_list|)
condition|)
block|{
name|stashedNext
operator|=
name|next
expr_stmt|;
name|previous
operator|=
name|_factory
operator|.
name|create
argument_list|(
operator|new
name|Pair
argument_list|<
name|TokenSource
argument_list|,
name|CharStream
argument_list|>
argument_list|(
name|this
argument_list|,
name|_input
argument_list|)
argument_list|,
name|PainlessLexer
operator|.
name|SEMICOLON
argument_list|,
literal|";"
argument_list|,
name|Lexer
operator|.
name|DEFAULT_TOKEN_CHANNEL
argument_list|,
name|next
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|next
operator|.
name|getStopIndex
argument_list|()
argument_list|,
name|next
operator|.
name|getLine
argument_list|()
argument_list|,
name|next
operator|.
name|getCharPositionInLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|previous
return|;
block|}
else|else
block|{
name|previous
operator|=
name|next
expr_stmt|;
return|return
name|next
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|recover
specifier|public
name|void
name|recover
parameter_list|(
specifier|final
name|LexerNoViableAltException
name|lnvae
parameter_list|)
block|{
specifier|final
name|CharStream
name|charStream
init|=
name|lnvae
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
specifier|final
name|int
name|startIndex
init|=
name|lnvae
operator|.
name|getStartIndex
argument_list|()
decl_stmt|;
specifier|final
name|String
name|text
init|=
name|charStream
operator|.
name|getText
argument_list|(
name|Interval
operator|.
name|of
argument_list|(
name|startIndex
argument_list|,
name|charStream
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Location
name|location
init|=
operator|new
name|Location
argument_list|(
name|sourceName
argument_list|,
name|_tokenStartCharIndex
argument_list|)
decl_stmt|;
name|String
name|message
init|=
literal|"unexpected character ["
operator|+
name|getErrorDisplay
argument_list|(
name|text
argument_list|)
operator|+
literal|"]."
decl_stmt|;
name|char
name|firstChar
init|=
name|text
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|firstChar
operator|==
literal|'\''
operator|||
name|firstChar
operator|==
literal|'"'
operator|)
operator|&&
name|text
operator|.
name|length
argument_list|()
operator|-
literal|2
operator|>
literal|0
operator|&&
name|text
operator|.
name|charAt
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
comment|/* Use a simple heuristic to guess if the unrecognized characters were trying to be a string but has a broken escape sequence.              * If it was add an extra message about valid string escape sequences. */
name|message
operator|+=
literal|" The only valid escape sequences in strings starting with ["
operator|+
name|firstChar
operator|+
literal|"] are [\\\\] and [\\"
operator|+
name|firstChar
operator|+
literal|"]."
expr_stmt|;
block|}
throw|throw
name|location
operator|.
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|,
name|lnvae
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSimpleType
specifier|protected
name|boolean
name|isSimpleType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Definition
operator|.
name|isSimpleType
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|slashIsRegex
specifier|protected
name|boolean
name|slashIsRegex
parameter_list|()
block|{
name|Token
name|lastToken
init|=
name|getPreviousToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastToken
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
switch|switch
condition|(
name|lastToken
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|PainlessLexer
operator|.
name|RBRACE
case|:
case|case
name|PainlessLexer
operator|.
name|RP
case|:
case|case
name|PainlessLexer
operator|.
name|OCTAL
case|:
case|case
name|PainlessLexer
operator|.
name|HEX
case|:
case|case
name|PainlessLexer
operator|.
name|INTEGER
case|:
case|case
name|PainlessLexer
operator|.
name|DECIMAL
case|:
case|case
name|PainlessLexer
operator|.
name|ID
case|:
case|case
name|PainlessLexer
operator|.
name|DOTINTEGER
case|:
case|case
name|PainlessLexer
operator|.
name|DOTID
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
DECL|method|insertSemicolon
specifier|private
specifier|static
name|boolean
name|insertSemicolon
parameter_list|(
name|Token
name|previous
parameter_list|,
name|Token
name|next
parameter_list|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|next
operator|.
name|getType
argument_list|()
operator|!=
name|PainlessLexer
operator|.
name|RBRACK
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|previous
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|PainlessLexer
operator|.
name|RBRACK
case|:
comment|// };} would be weird!
case|case
name|PainlessLexer
operator|.
name|SEMICOLON
case|:
comment|// already have a semicolon, no need to add one
case|case
name|PainlessLexer
operator|.
name|LBRACK
case|:
comment|// empty blocks don't need a semicolon
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

