begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|ParseTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExpressionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|IdentifierContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|PrecedenceContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
DECL|class|AnalyzerUtility
class|class
name|AnalyzerUtility
block|{
DECL|class|Variable
specifier|static
class|class
name|Variable
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|slot
specifier|final
name|int
name|slot
decl_stmt|;
DECL|method|Variable
specifier|private
name|Variable
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|,
specifier|final
name|int
name|slot
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|slot
operator|=
name|slot
expr_stmt|;
block|}
block|}
comment|/**      * A utility method to output consistent error messages.      * @param ctx The ANTLR node the error occurred in.      * @return The error message with tacked on line number and character position.      */
DECL|method|error
specifier|static
name|String
name|error
parameter_list|(
specifier|final
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
literal|"Analyzer Error ["
operator|+
name|ctx
operator|.
name|getStart
argument_list|()
operator|.
name|getLine
argument_list|()
operator|+
literal|":"
operator|+
name|ctx
operator|.
name|getStart
argument_list|()
operator|.
name|getCharPositionInLine
argument_list|()
operator|+
literal|"]: "
return|;
block|}
comment|/**      * A utility method to output consistent error messages for invalid types.      * @param ctx The ANTLR node the error occurred in.      * @param type The invalid type.      * @return The error message with tacked on line number and character position.      */
DECL|method|typeError
specifier|static
name|String
name|typeError
parameter_list|(
specifier|final
name|ParserRuleContext
name|ctx
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
block|{
return|return
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid type ["
operator|+
name|type
operator|+
literal|"]."
return|;
block|}
comment|/**      * A utility method to output consistent error messages for invalid identifiers.      * @param ctx The ANTLR node the error occurred in.      * @param identifier The invalid identifier.      * @return The error message with tacked on line number and character position.      */
DECL|method|identifierError
specifier|static
name|String
name|identifierError
parameter_list|(
specifier|final
name|ParserRuleContext
name|ctx
parameter_list|,
specifier|final
name|String
name|identifier
parameter_list|)
block|{
return|return
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid identifier ["
operator|+
name|identifier
operator|+
literal|"]."
return|;
block|}
comment|/**      * The ANTLR parse tree is modified in one single case; a parent node needs to check a child node to see if it's      * a precedence node, and if so, it must be removed from the tree permanently.  Once the ANTLR tree is built,      * precedence nodes are no longer necessary to maintain the correct ordering of the tree, so they only      * add a level of indirection where complicated decisions about metadata passing would have to be made.  This      * method removes the need for those decisions.      * @param source The child ANTLR node to check for precedence.      * @return The updated child ANTLR node.      */
DECL|method|updateExpressionTree
specifier|static
name|ExpressionContext
name|updateExpressionTree
parameter_list|(
name|ExpressionContext
name|source
parameter_list|)
block|{
comment|// Check to see if the ANTLR node is a precedence node.
if|if
condition|(
name|source
operator|instanceof
name|PainlessParser
operator|.
name|PrecedenceContext
condition|)
block|{
specifier|final
name|ParserRuleContext
name|parent
init|=
name|source
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// Mark the index of the source node within the list of child nodes from the parent.
for|for
control|(
specifier|final
name|ParseTree
name|child
range|:
name|parent
operator|.
name|children
control|)
block|{
if|if
condition|(
name|child
operator|==
name|source
condition|)
block|{
break|break;
block|}
operator|++
name|index
expr_stmt|;
block|}
comment|// If there are multiple precedence nodes in a row, remove them all.
while|while
condition|(
name|source
operator|instanceof
name|PrecedenceContext
condition|)
block|{
name|source
operator|=
operator|(
operator|(
name|PrecedenceContext
operator|)
name|source
operator|)
operator|.
name|expression
argument_list|()
expr_stmt|;
block|}
comment|// Update the parent node with the child of the precedence node.
name|parent
operator|.
name|children
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|source
return|;
block|}
DECL|field|definition
specifier|private
specifier|final
name|Definition
name|definition
decl_stmt|;
DECL|field|scopes
specifier|private
specifier|final
name|Deque
argument_list|<
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|variables
specifier|private
specifier|final
name|Deque
argument_list|<
name|Variable
argument_list|>
name|variables
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|AnalyzerUtility
name|AnalyzerUtility
parameter_list|(
specifier|final
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|metadata
operator|.
name|definition
expr_stmt|;
block|}
DECL|method|incrementScope
name|void
name|incrementScope
parameter_list|()
block|{
name|scopes
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|decrementScope
name|void
name|decrementScope
parameter_list|()
block|{
name|int
name|remove
init|=
name|scopes
operator|.
name|pop
argument_list|()
decl_stmt|;
while|while
condition|(
name|remove
operator|>
literal|0
condition|)
block|{
name|variables
operator|.
name|pop
argument_list|()
expr_stmt|;
operator|--
name|remove
expr_stmt|;
block|}
block|}
DECL|method|getVariable
name|Variable
name|getVariable
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Variable
argument_list|>
name|itr
init|=
name|variables
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Variable
name|variable
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|variable
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|variable
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|addVariable
name|Variable
name|addVariable
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|getVariable
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument name ["
operator|+
name|name
operator|+
literal|"] already defined within the scope."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Variable name ["
operator|+
name|name
operator|+
literal|"] already defined within the scope."
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Variable
name|previous
init|=
name|variables
operator|.
name|peekFirst
argument_list|()
decl_stmt|;
name|int
name|slot
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|slot
operator|+=
name|previous
operator|.
name|slot
operator|+
name|previous
operator|.
name|type
operator|.
name|type
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Variable
name|variable
init|=
operator|new
name|Variable
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|variables
operator|.
name|push
argument_list|(
name|variable
argument_list|)
expr_stmt|;
specifier|final
name|int
name|update
init|=
name|scopes
operator|.
name|pop
argument_list|()
operator|+
literal|1
decl_stmt|;
name|scopes
operator|.
name|push
argument_list|(
name|update
argument_list|)
expr_stmt|;
return|return
name|variable
return|;
block|}
DECL|method|isValidType
name|boolean
name|isValidType
parameter_list|(
specifier|final
name|IdentifierContext
name|idctx
parameter_list|,
specifier|final
name|boolean
name|error
parameter_list|)
block|{
name|boolean
name|valid
init|=
name|definition
operator|.
name|structs
operator|.
name|containsKey
argument_list|(
name|idctx
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|valid
operator|&&
name|error
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|typeError
argument_list|(
name|idctx
argument_list|,
name|idctx
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|valid
return|;
block|}
DECL|method|isValidIdentifier
name|boolean
name|isValidIdentifier
parameter_list|(
specifier|final
name|IdentifierContext
name|idctx
parameter_list|,
specifier|final
name|boolean
name|error
parameter_list|)
block|{
name|boolean
name|valid
init|=
operator|!
name|definition
operator|.
name|structs
operator|.
name|containsKey
argument_list|(
name|idctx
operator|.
name|getText
argument_list|()
argument_list|)
operator|&&
name|idctx
operator|.
name|generic
argument_list|()
operator|==
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|valid
operator|&&
name|error
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|identifierError
argument_list|(
name|idctx
argument_list|,
name|idctx
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|valid
return|;
block|}
block|}
end_class

end_unit

