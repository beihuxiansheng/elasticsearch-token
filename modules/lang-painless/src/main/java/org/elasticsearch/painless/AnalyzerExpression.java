begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Metadata
operator|.
name|ExpressionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Metadata
operator|.
name|ExternalMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|AssignmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BinaryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BoolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|CastContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|CharContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|CompContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ConditionalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DecltypeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExpressionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExternalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ExtstartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|FalseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|IncrementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|NullContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|NumericContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|PostincContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|PreincContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|TrueContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|UnaryContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|ADD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BWAND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BWOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|BWXOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|DIV
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|LSH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|MUL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|REM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|RSH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|SUB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|PainlessParser
operator|.
name|USH
import|;
end_import

begin_class
DECL|class|AnalyzerExpression
class|class
name|AnalyzerExpression
block|{
DECL|field|metadata
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
DECL|field|definition
specifier|private
specifier|final
name|Definition
name|definition
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|CompilerSettings
name|settings
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
DECL|field|caster
specifier|private
specifier|final
name|AnalyzerCaster
name|caster
decl_stmt|;
DECL|field|promoter
specifier|private
specifier|final
name|AnalyzerPromoter
name|promoter
decl_stmt|;
DECL|method|AnalyzerExpression
name|AnalyzerExpression
parameter_list|(
specifier|final
name|Metadata
name|metadata
parameter_list|,
specifier|final
name|Analyzer
name|analyzer
parameter_list|,
specifier|final
name|AnalyzerCaster
name|caster
parameter_list|,
specifier|final
name|AnalyzerPromoter
name|promoter
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|definition
operator|=
name|metadata
operator|.
name|definition
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|metadata
operator|.
name|settings
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|this
operator|.
name|caster
operator|=
name|caster
expr_stmt|;
name|this
operator|.
name|promoter
operator|=
name|promoter
expr_stmt|;
block|}
DECL|method|processNumeric
name|void
name|processNumeric
parameter_list|(
specifier|final
name|NumericContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|numericemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|negate
init|=
name|ctx
operator|.
name|parent
operator|instanceof
name|UnaryContext
operator|&&
operator|(
operator|(
name|UnaryContext
operator|)
name|ctx
operator|.
name|parent
operator|)
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|DECIMAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|svalue
init|=
operator|(
name|negate
condition|?
literal|"-"
else|:
literal|""
operator|)
operator|+
name|ctx
operator|.
name|DECIMAL
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"f"
argument_list|)
operator|||
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"F"
argument_list|)
condition|)
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|floatType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|svalue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|svalue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid float constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|doubleType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|svalue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid double constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|String
name|svalue
init|=
name|negate
condition|?
literal|"-"
else|:
literal|""
decl_stmt|;
name|int
name|radix
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|OCTAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|svalue
operator|+=
name|ctx
operator|.
name|OCTAL
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
name|radix
operator|=
literal|8
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|INTEGER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|svalue
operator|+=
name|ctx
operator|.
name|INTEGER
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
name|radix
operator|=
literal|10
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|HEX
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|svalue
operator|+=
name|ctx
operator|.
name|HEX
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
name|radix
operator|=
literal|16
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
if|if
condition|(
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"d"
argument_list|)
operator|||
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"D"
argument_list|)
condition|)
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|doubleType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|svalue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|svalue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid float constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"f"
argument_list|)
operator|||
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"F"
argument_list|)
condition|)
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|floatType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|svalue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|svalue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid float constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"l"
argument_list|)
operator|||
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"L"
argument_list|)
condition|)
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|longType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|svalue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|svalue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|radix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid long constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
specifier|final
name|Type
name|type
init|=
name|numericemd
operator|.
name|to
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|type
operator|==
literal|null
condition|?
name|Sort
operator|.
name|INT
else|:
name|type
operator|.
name|sort
decl_stmt|;
specifier|final
name|int
name|value
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|svalue
argument_list|,
name|radix
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BYTE
operator|&&
name|value
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|value
operator|<=
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|byteType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|CHAR
operator|&&
name|value
operator|>=
name|Character
operator|.
name|MIN_VALUE
operator|&&
name|value
operator|<=
name|Character
operator|.
name|MAX_VALUE
condition|)
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|charType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
operator|(
name|char
operator|)
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|SHORT
operator|&&
name|value
operator|>=
name|Short
operator|.
name|MIN_VALUE
operator|&&
name|value
operator|<=
name|Short
operator|.
name|MAX_VALUE
condition|)
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|shortType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
operator|(
name|short
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|value
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid int constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|processChar
name|void
name|processChar
parameter_list|(
specifier|final
name|CharContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|charemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|CHAR
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|charemd
operator|.
name|preConst
operator|=
name|ctx
operator|.
name|CHAR
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|charemd
operator|.
name|from
operator|=
name|definition
operator|.
name|charType
expr_stmt|;
block|}
DECL|method|processTrue
name|void
name|processTrue
parameter_list|(
specifier|final
name|TrueContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|trueemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|TRUE
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|trueemd
operator|.
name|preConst
operator|=
literal|true
expr_stmt|;
name|trueemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
block|}
DECL|method|processFalse
name|void
name|processFalse
parameter_list|(
specifier|final
name|FalseContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|falseemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|FALSE
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|falseemd
operator|.
name|preConst
operator|=
literal|false
expr_stmt|;
name|falseemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
block|}
DECL|method|processNull
name|void
name|processNull
parameter_list|(
specifier|final
name|NullContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|nullemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|NULL
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
name|nullemd
operator|.
name|isNull
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|nullemd
operator|.
name|to
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nullemd
operator|.
name|to
operator|.
name|sort
operator|.
name|primitive
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot cast null to a primitive type ["
operator|+
name|nullemd
operator|.
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|nullemd
operator|.
name|from
operator|=
name|nullemd
operator|.
name|to
expr_stmt|;
block|}
else|else
block|{
name|nullemd
operator|.
name|from
operator|=
name|definition
operator|.
name|objectType
expr_stmt|;
block|}
block|}
DECL|method|processExternal
name|void
name|processExternal
parameter_list|(
specifier|final
name|ExternalContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|extemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExtstartContext
name|extstartctx
init|=
name|ctx
operator|.
name|extstart
argument_list|()
decl_stmt|;
specifier|final
name|ExternalMetadata
name|extstartemd
init|=
name|metadata
operator|.
name|createExternalMetadata
argument_list|(
name|extstartctx
argument_list|)
decl_stmt|;
name|extstartemd
operator|.
name|read
operator|=
name|extemd
operator|.
name|read
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|extstartctx
argument_list|)
expr_stmt|;
name|extemd
operator|.
name|statement
operator|=
name|extstartemd
operator|.
name|statement
expr_stmt|;
name|extemd
operator|.
name|preConst
operator|=
name|extstartemd
operator|.
name|constant
expr_stmt|;
name|extemd
operator|.
name|from
operator|=
name|extstartemd
operator|.
name|current
expr_stmt|;
name|extemd
operator|.
name|typesafe
operator|=
name|extstartemd
operator|.
name|current
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
block|}
DECL|method|processPostinc
name|void
name|processPostinc
parameter_list|(
specifier|final
name|PostincContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|postincemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExtstartContext
name|extstartctx
init|=
name|ctx
operator|.
name|extstart
argument_list|()
decl_stmt|;
specifier|final
name|ExternalMetadata
name|extstartemd
init|=
name|metadata
operator|.
name|createExternalMetadata
argument_list|(
name|extstartctx
argument_list|)
decl_stmt|;
name|extstartemd
operator|.
name|read
operator|=
name|postincemd
operator|.
name|read
expr_stmt|;
name|extstartemd
operator|.
name|storeExpr
operator|=
name|ctx
operator|.
name|increment
argument_list|()
expr_stmt|;
name|extstartemd
operator|.
name|token
operator|=
name|ADD
expr_stmt|;
name|extstartemd
operator|.
name|post
operator|=
literal|true
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|extstartctx
argument_list|)
expr_stmt|;
name|postincemd
operator|.
name|statement
operator|=
literal|true
expr_stmt|;
name|postincemd
operator|.
name|from
operator|=
name|extstartemd
operator|.
name|read
condition|?
name|extstartemd
operator|.
name|current
else|:
name|definition
operator|.
name|voidType
expr_stmt|;
name|postincemd
operator|.
name|typesafe
operator|=
name|extstartemd
operator|.
name|current
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
block|}
DECL|method|processPreinc
name|void
name|processPreinc
parameter_list|(
specifier|final
name|PreincContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|preincemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExtstartContext
name|extstartctx
init|=
name|ctx
operator|.
name|extstart
argument_list|()
decl_stmt|;
specifier|final
name|ExternalMetadata
name|extstartemd
init|=
name|metadata
operator|.
name|createExternalMetadata
argument_list|(
name|extstartctx
argument_list|)
decl_stmt|;
name|extstartemd
operator|.
name|read
operator|=
name|preincemd
operator|.
name|read
expr_stmt|;
name|extstartemd
operator|.
name|storeExpr
operator|=
name|ctx
operator|.
name|increment
argument_list|()
expr_stmt|;
name|extstartemd
operator|.
name|token
operator|=
name|ADD
expr_stmt|;
name|extstartemd
operator|.
name|pre
operator|=
literal|true
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|extstartctx
argument_list|)
expr_stmt|;
name|preincemd
operator|.
name|statement
operator|=
literal|true
expr_stmt|;
name|preincemd
operator|.
name|from
operator|=
name|extstartemd
operator|.
name|read
condition|?
name|extstartemd
operator|.
name|current
else|:
name|definition
operator|.
name|voidType
expr_stmt|;
name|preincemd
operator|.
name|typesafe
operator|=
name|extstartemd
operator|.
name|current
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
block|}
DECL|method|processUnary
name|void
name|processUnary
parameter_list|(
specifier|final
name|UnaryContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|unaryemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|BOOLNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|!
operator|(
name|boolean
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
name|unaryemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWNOT
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|promoter
operator|.
name|promoteNumeric
argument_list|(
name|expremd
operator|.
name|from
argument_list|,
name|ctx
operator|.
name|BWNOT
argument_list|()
operator|==
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot apply ["
operator|+
name|ctx
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|+
literal|"] "
operator|+
literal|"operation to type ["
operator|+
name|expremd
operator|.
name|from
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|expremd
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|BWNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|~
operator|(
name|int
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|~
operator|(
name|long
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exprctx
operator|instanceof
name|NumericContext
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|-
operator|(
name|int
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|unaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|negateExact
argument_list|(
operator|(
name|int
operator|)
name|expremd
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|-
operator|(
name|long
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|unaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|negateExact
argument_list|(
operator|(
name|long
operator|)
name|expremd
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|-
operator|(
name|float
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|-
operator|(
name|double
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|+
operator|(
name|int
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|+
operator|(
name|long
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|+
operator|(
name|float
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|+
operator|(
name|double
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
name|unaryemd
operator|.
name|from
operator|=
name|promote
expr_stmt|;
name|unaryemd
operator|.
name|typesafe
operator|=
name|expremd
operator|.
name|typesafe
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
DECL|method|processCast
name|void
name|processCast
parameter_list|(
specifier|final
name|CastContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|castemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|DecltypeContext
name|decltypectx
init|=
name|ctx
operator|.
name|decltype
argument_list|()
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|decltypemd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|decltypectx
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|decltypectx
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|type
init|=
name|decltypemd
operator|.
name|from
decl_stmt|;
name|castemd
operator|.
name|from
operator|=
name|type
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|type
expr_stmt|;
name|expremd
operator|.
name|explicit
operator|=
literal|true
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
name|castemd
operator|.
name|preConst
operator|=
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
name|castemd
operator|.
name|typesafe
operator|=
name|expremd
operator|.
name|typesafe
operator|&&
name|castemd
operator|.
name|from
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
block|}
DECL|method|processBinary
name|void
name|processBinary
parameter_list|(
specifier|final
name|BinaryContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|binaryemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|decimal
init|=
name|ctx
operator|.
name|MUL
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|DIV
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|REM
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|add
init|=
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|xor
init|=
name|ctx
operator|.
name|BWXOR
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|Type
name|promote
init|=
name|add
condition|?
name|promoter
operator|.
name|promoteAdd
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|)
else|:
name|xor
condition|?
name|promoter
operator|.
name|promoteXor
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|)
else|:
name|promoter
operator|.
name|promoteNumeric
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|,
name|decimal
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot apply ["
operator|+
name|ctx
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
operator|+
literal|"] "
operator|+
literal|"operation to types ["
operator|+
name|expremd0
operator|.
name|from
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|expremd1
operator|.
name|from
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
name|expremd0
operator|.
name|to
operator|=
name|add
operator|&&
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|?
name|expremd0
operator|.
name|from
else|:
name|promote
expr_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|add
operator|&&
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|?
name|expremd1
operator|.
name|from
else|:
name|promote
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd0
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|postConst
operator|!=
literal|null
operator|&&
name|expremd1
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|MUL
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|*
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|multiplyExact
argument_list|(
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|*
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|multiplyExact
argument_list|(
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|*
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|*
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|DIV
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|/
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|/
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|/
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|/
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|REM
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|%
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|%
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|%
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|%
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|+
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|addExact
argument_list|(
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|+
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|addExact
argument_list|(
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|+
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|+
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
literal|""
operator|+
name|expremd0
operator|.
name|postConst
operator|+
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|-
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|subtractExact
argument_list|(
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|-
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|subtractExact
argument_list|(
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|-
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|-
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|<<
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|<<
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|RSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|>>
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|>>
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|USH
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|>>>
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|>>>
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|&
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|&
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWXOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|^
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|^
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|^
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator||
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator||
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
name|binaryemd
operator|.
name|from
operator|=
name|promote
expr_stmt|;
name|binaryemd
operator|.
name|typesafe
operator|=
name|expremd0
operator|.
name|typesafe
operator|&&
name|expremd1
operator|.
name|typesafe
expr_stmt|;
block|}
DECL|method|processComp
name|void
name|processComp
parameter_list|(
specifier|final
name|CompContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|compemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|equality
init|=
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|reference
init|=
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|NER
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|isNull
operator|&&
name|expremd1
operator|.
name|isNull
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unnecessary comparison of null constants."
argument_list|)
throw|;
block|}
specifier|final
name|Type
name|promote
init|=
name|equality
condition|?
name|promoter
operator|.
name|promoteEquality
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|)
else|:
name|reference
condition|?
name|promoter
operator|.
name|promoteReference
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|)
else|:
name|promoter
operator|.
name|promoteNumeric
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot apply ["
operator|+
name|ctx
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
operator|+
literal|"] "
operator|+
literal|"operation to types ["
operator|+
name|expremd0
operator|.
name|from
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|expremd1
operator|.
name|from
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|expremd0
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd0
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|postConst
operator|!=
literal|null
operator|&&
name|expremd1
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|expremd0
operator|.
name|isNull
operator|&&
operator|!
name|expremd1
operator|.
name|isNull
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
name|expremd0
operator|.
name|postConst
operator|.
name|equals
argument_list|(
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
name|expremd0
operator|.
name|postConst
operator|==
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|NER
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|expremd0
operator|.
name|isNull
operator|&&
operator|!
name|expremd1
operator|.
name|isNull
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
name|expremd0
operator|.
name|postConst
operator|.
name|equals
argument_list|(
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|NER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
name|expremd0
operator|.
name|postConst
operator|==
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|GTE
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|>=
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|>=
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|>=
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|>=
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|GT
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|>
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|>
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|>
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|>
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LTE
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|<=
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|<=
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|<=
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|<=
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LT
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|<
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|<
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|<
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|<
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
name|compemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|compemd
operator|.
name|typesafe
operator|=
name|expremd0
operator|.
name|typesafe
operator|&&
name|expremd1
operator|.
name|typesafe
expr_stmt|;
block|}
DECL|method|processBool
name|void
name|processBool
parameter_list|(
specifier|final
name|BoolContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|boolemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
name|expremd0
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd0
argument_list|)
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|postConst
operator|!=
literal|null
operator|&&
name|expremd1
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|BOOLAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|&&
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BOOLOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|||
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected state."
argument_list|)
throw|;
block|}
block|}
name|boolemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|boolemd
operator|.
name|typesafe
operator|=
name|expremd0
operator|.
name|typesafe
operator|&&
name|expremd1
operator|.
name|typesafe
expr_stmt|;
block|}
DECL|method|processConditional
name|void
name|processConditional
parameter_list|(
specifier|final
name|ConditionalContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|condemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
name|expremd0
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd0
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AnalyzerUtility
operator|.
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unnecessary conditional statement."
argument_list|)
throw|;
block|}
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|condemd
operator|.
name|to
expr_stmt|;
name|expremd1
operator|.
name|explicit
operator|=
name|condemd
operator|.
name|explicit
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx2
init|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd2
init|=
name|metadata
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx2
argument_list|)
decl_stmt|;
name|expremd2
operator|.
name|to
operator|=
name|condemd
operator|.
name|to
expr_stmt|;
name|expremd2
operator|.
name|explicit
operator|=
name|condemd
operator|.
name|explicit
expr_stmt|;
name|analyzer
operator|.
name|visit
argument_list|(
name|exprctx2
argument_list|)
expr_stmt|;
if|if
condition|(
name|condemd
operator|.
name|to
operator|==
literal|null
condition|)
block|{
specifier|final
name|Type
name|promote
init|=
name|promoter
operator|.
name|promoteConditional
argument_list|(
name|expremd1
operator|.
name|from
argument_list|,
name|expremd2
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|preConst
argument_list|,
name|expremd2
operator|.
name|preConst
argument_list|)
decl_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|expremd2
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|condemd
operator|.
name|from
operator|=
name|promote
expr_stmt|;
block|}
else|else
block|{
name|condemd
operator|.
name|from
operator|=
name|condemd
operator|.
name|to
expr_stmt|;
block|}
name|caster
operator|.
name|markCast
argument_list|(
name|expremd1
argument_list|)
expr_stmt|;
name|caster
operator|.
name|markCast
argument_list|(
name|expremd2
argument_list|)
expr_stmt|;
name|condemd
operator|.
name|typesafe
operator|=
name|expremd0
operator|.
name|typesafe
operator|&&
name|expremd1
operator|.
name|typesafe
expr_stmt|;
block|}
DECL|method|processAssignment
name|void
name|processAssignment
parameter_list|(
specifier|final
name|AssignmentContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|assignemd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExtstartContext
name|extstartctx
init|=
name|ctx
operator|.
name|extstart
argument_list|()
decl_stmt|;
specifier|final
name|ExternalMetadata
name|extstartemd
init|=
name|metadata
operator|.
name|createExternalMetadata
argument_list|(
name|extstartctx
argument_list|)
decl_stmt|;
name|extstartemd
operator|.
name|read
operator|=
name|assignemd
operator|.
name|read
expr_stmt|;
name|extstartemd
operator|.
name|storeExpr
operator|=
name|AnalyzerUtility
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|AMUL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|MUL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADIV
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|DIV
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AREM
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|REM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|ADD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ASUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|SUB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ALSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|LSH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AUSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|USH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ARSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|RSH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|BWAND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AXOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|BWXOR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|BWOR
expr_stmt|;
block|}
name|analyzer
operator|.
name|visit
argument_list|(
name|extstartctx
argument_list|)
expr_stmt|;
name|assignemd
operator|.
name|statement
operator|=
literal|true
expr_stmt|;
name|assignemd
operator|.
name|from
operator|=
name|extstartemd
operator|.
name|read
condition|?
name|extstartemd
operator|.
name|current
else|:
name|definition
operator|.
name|voidType
expr_stmt|;
name|assignemd
operator|.
name|typesafe
operator|=
name|extstartemd
operator|.
name|current
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
block|}
DECL|method|processIncrement
name|void
name|processIncrement
parameter_list|(
specifier|final
name|IncrementContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|incremd
init|=
name|metadata
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|incremd
operator|.
name|to
operator|==
literal|null
condition|?
literal|null
else|:
name|incremd
operator|.
name|to
operator|.
name|sort
decl_stmt|;
specifier|final
name|boolean
name|positive
init|=
name|ctx
operator|.
name|INCR
argument_list|()
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|incremd
operator|.
name|to
operator|==
literal|null
condition|)
block|{
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|sort
condition|)
block|{
case|case
name|LONG
case|:
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1L
else|:
operator|-
literal|1L
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|longType
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1.0F
else|:
operator|-
literal|1.0F
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|floatType
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1.0
else|:
operator|-
literal|1.0
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|doubleType
expr_stmt|;
break|break;
default|default:
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

