begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Locals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Represents instanceof operator.  *<p>  * Unlike java's, this works for primitive types too.  */
end_comment

begin_class
DECL|class|EInstanceof
specifier|public
class|class
name|EInstanceof
extends|extends
name|AExpression
block|{
DECL|field|expression
name|AExpression
name|expression
decl_stmt|;
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|resolvedType
name|Class
argument_list|<
name|?
argument_list|>
name|resolvedType
decl_stmt|;
DECL|field|expressionType
name|Class
argument_list|<
name|?
argument_list|>
name|expressionType
decl_stmt|;
DECL|field|primitiveExpression
name|boolean
name|primitiveExpression
decl_stmt|;
DECL|method|EInstanceof
specifier|public
name|EInstanceof
parameter_list|(
name|Location
name|location
parameter_list|,
name|AExpression
name|expression
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractVariables
name|void
name|extractVariables
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|variables
parameter_list|)
block|{
name|expression
operator|.
name|extractVariables
argument_list|(
name|variables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|void
name|analyze
parameter_list|(
name|Locals
name|locals
parameter_list|)
block|{
name|Definition
operator|.
name|Type
name|raw
init|=
name|Definition
operator|.
name|getType
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// map to wrapped type for primitive types
name|resolvedType
operator|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|raw
operator|.
name|clazz
argument_list|)
operator|.
name|wrap
argument_list|()
operator|.
name|returnType
argument_list|()
expr_stmt|;
name|expression
operator|.
name|analyze
argument_list|(
name|locals
argument_list|)
expr_stmt|;
name|actual
operator|=
name|Definition
operator|.
name|BOOLEAN_TYPE
expr_stmt|;
name|Definition
operator|.
name|Type
name|expressionRaw
init|=
name|expression
operator|.
name|actual
decl_stmt|;
if|if
condition|(
name|expressionRaw
operator|==
literal|null
condition|)
block|{
name|expressionRaw
operator|=
name|Definition
operator|.
name|DEF_TYPE
expr_stmt|;
block|}
comment|// record if the expression returns a primitive
name|primitiveExpression
operator|=
name|expressionRaw
operator|.
name|clazz
operator|.
name|isPrimitive
argument_list|()
expr_stmt|;
comment|// map to wrapped type for primitive types
name|expressionType
operator|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|expressionRaw
operator|.
name|clazz
argument_list|)
operator|.
name|wrap
argument_list|()
operator|.
name|returnType
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
comment|// primitive types
if|if
condition|(
name|primitiveExpression
condition|)
block|{
comment|// run the expression anyway (who knows what it does)
name|expression
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
comment|// discard its result
name|writer
operator|.
name|writePop
argument_list|(
name|expression
operator|.
name|actual
operator|.
name|type
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// push our result: its a primitive so it cannot be null.
name|writer
operator|.
name|push
argument_list|(
name|resolvedType
operator|==
name|Object
operator|.
name|class
operator|||
name|resolvedType
operator|==
name|expressionType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ordinary instanceof
name|expression
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
name|writer
operator|.
name|instanceOf
argument_list|(
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
operator|.
name|getType
argument_list|(
name|resolvedType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

