begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|CompilerSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|AnalyzerCaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|CHECKEQUALS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_EQ_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_GTE_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_GT_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_LTE_CALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|DEF_LT_CALL
import|;
end_import

begin_comment
comment|/**  * Represents a comparison expression.  */
end_comment

begin_class
DECL|class|EComp
specifier|public
specifier|final
class|class
name|EComp
extends|extends
name|AExpression
block|{
DECL|field|operation
specifier|final
name|Operation
name|operation
decl_stmt|;
DECL|field|left
name|AExpression
name|left
decl_stmt|;
DECL|field|right
name|AExpression
name|right
decl_stmt|;
DECL|method|EComp
specifier|public
name|EComp
parameter_list|(
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|Operation
name|operation
parameter_list|,
specifier|final
name|AExpression
name|left
parameter_list|,
specifier|final
name|AExpression
name|right
parameter_list|)
block|{
name|super
argument_list|(
name|line
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|void
name|analyze
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|EQ
condition|)
block|{
name|analyzeEq
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|EQR
condition|)
block|{
name|analyzeEqR
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|NE
condition|)
block|{
name|analyzeNE
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|NER
condition|)
block|{
name|analyzeNER
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|GTE
condition|)
block|{
name|analyzeGTE
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|GT
condition|)
block|{
name|analyzeGT
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|LTE
condition|)
block|{
name|analyzeLTE
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|LT
condition|)
block|{
name|analyzeLT
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|analyzeEq
specifier|private
name|void
name|analyzeEq
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteEquality
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply equals [==] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|isNull
operator|&&
name|right
operator|.
name|isNull
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
literal|"Extraneous comparison of null constants."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|||
name|left
operator|.
name|isNull
operator|)
operator|&&
operator|(
name|right
operator|.
name|constant
operator|!=
literal|null
operator|||
name|right
operator|.
name|isNull
operator|)
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|constant
operator|=
operator|(
name|boolean
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|boolean
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|float
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|double
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|left
operator|.
name|isNull
condition|)
block|{
name|constant
operator|=
name|left
operator|.
name|constant
operator|.
name|equals
argument_list|(
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|right
operator|.
name|isNull
condition|)
block|{
name|constant
operator|=
name|right
operator|.
name|constant
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|Definition
operator|.
name|booleanType
expr_stmt|;
block|}
DECL|method|analyzeEqR
specifier|private
name|void
name|analyzeEqR
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteReference
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply reference equals [===] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|isNull
operator|&&
name|right
operator|.
name|isNull
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
literal|"Extraneous comparison of null constants."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|||
name|left
operator|.
name|isNull
operator|)
operator|&&
operator|(
name|right
operator|.
name|constant
operator|!=
literal|null
operator|||
name|right
operator|.
name|isNull
operator|)
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|constant
operator|=
operator|(
name|boolean
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|boolean
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|float
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|==
operator|(
name|double
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
name|constant
operator|=
name|left
operator|.
name|constant
operator|==
name|right
operator|.
name|constant
expr_stmt|;
block|}
block|}
name|actual
operator|=
name|Definition
operator|.
name|booleanType
expr_stmt|;
block|}
DECL|method|analyzeNE
specifier|private
name|void
name|analyzeNE
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteEquality
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply not equals [!=] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|isNull
operator|&&
name|right
operator|.
name|isNull
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
literal|"Extraneous comparison of null constants."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|||
name|left
operator|.
name|isNull
operator|)
operator|&&
operator|(
name|right
operator|.
name|constant
operator|!=
literal|null
operator|||
name|right
operator|.
name|isNull
operator|)
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|constant
operator|=
operator|(
name|boolean
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|boolean
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|float
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|double
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|left
operator|.
name|isNull
condition|)
block|{
name|constant
operator|=
operator|!
name|left
operator|.
name|constant
operator|.
name|equals
argument_list|(
name|right
operator|.
name|constant
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|right
operator|.
name|isNull
condition|)
block|{
name|constant
operator|=
operator|!
name|right
operator|.
name|constant
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|Definition
operator|.
name|booleanType
expr_stmt|;
block|}
DECL|method|analyzeNER
specifier|private
name|void
name|analyzeNER
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteReference
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply reference not equals [!==] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|isNull
operator|&&
name|right
operator|.
name|isNull
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
literal|"Extraneous comparison of null constants."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|||
name|left
operator|.
name|isNull
operator|)
operator|&&
operator|(
name|right
operator|.
name|constant
operator|!=
literal|null
operator|||
name|right
operator|.
name|isNull
operator|)
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|constant
operator|=
operator|(
name|boolean
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|boolean
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|float
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|!=
operator|(
name|double
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
name|constant
operator|=
name|left
operator|.
name|constant
operator|!=
name|right
operator|.
name|constant
expr_stmt|;
block|}
block|}
name|actual
operator|=
name|Definition
operator|.
name|booleanType
expr_stmt|;
block|}
DECL|method|analyzeGTE
specifier|private
name|void
name|analyzeGTE
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply greater than or equals [>=] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|>=
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|>=
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|>=
operator|(
name|float
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|>=
operator|(
name|double
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|Definition
operator|.
name|booleanType
expr_stmt|;
block|}
DECL|method|analyzeGT
specifier|private
name|void
name|analyzeGT
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply greater than [>] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|>
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|>
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|>
operator|(
name|float
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|>
operator|(
name|double
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|Definition
operator|.
name|booleanType
expr_stmt|;
block|}
DECL|method|analyzeLTE
specifier|private
name|void
name|analyzeLTE
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply less than or equals [<=] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|<=
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|<=
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|<=
operator|(
name|float
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|<=
operator|(
name|double
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|Definition
operator|.
name|booleanType
expr_stmt|;
block|}
DECL|method|analyzeLT
specifier|private
name|void
name|analyzeLT
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
name|left
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|.
name|analyze
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|AnalyzerCaster
operator|.
name|promoteNumeric
argument_list|(
name|definition
argument_list|,
name|left
operator|.
name|actual
argument_list|,
name|right
operator|.
name|actual
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
literal|"Cannot apply less than [>=] to types "
operator|+
literal|"["
operator|+
name|left
operator|.
name|actual
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|right
operator|.
name|actual
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
name|left
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|right
operator|.
name|expected
operator|=
name|promote
expr_stmt|;
name|left
operator|=
name|left
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|right
operator|=
name|right
operator|.
name|cast
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|constant
operator|!=
literal|null
operator|&&
name|right
operator|.
name|constant
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|constant
operator|=
operator|(
name|int
operator|)
name|left
operator|.
name|constant
operator|<
operator|(
name|int
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|constant
operator|=
operator|(
name|long
operator|)
name|left
operator|.
name|constant
operator|<
operator|(
name|long
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|constant
operator|=
operator|(
name|float
operator|)
name|left
operator|.
name|constant
operator|<
operator|(
name|float
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|constant
operator|=
operator|(
name|double
operator|)
name|left
operator|.
name|constant
operator|<
operator|(
name|double
operator|)
name|right
operator|.
name|constant
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|actual
operator|=
name|Definition
operator|.
name|booleanType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
specifier|final
name|CompilerSettings
name|settings
parameter_list|,
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|MethodWriter
name|adapter
parameter_list|)
block|{
specifier|final
name|boolean
name|branch
init|=
name|tru
operator|!=
literal|null
operator|||
name|fals
operator|!=
literal|null
decl_stmt|;
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|rtype
init|=
name|right
operator|.
name|actual
operator|.
name|type
decl_stmt|;
specifier|final
name|Sort
name|rsort
init|=
name|right
operator|.
name|actual
operator|.
name|sort
decl_stmt|;
name|left
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|right
operator|.
name|isNull
condition|)
block|{
name|right
operator|.
name|write
argument_list|(
name|settings
argument_list|,
name|definition
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Label
name|jump
init|=
name|tru
operator|!=
literal|null
condition|?
name|tru
else|:
name|fals
operator|!=
literal|null
condition|?
name|fals
else|:
operator|new
name|Label
argument_list|()
decl_stmt|;
specifier|final
name|Label
name|end
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|eq
init|=
operator|(
name|operation
operator|==
name|Operation
operator|.
name|EQ
operator|||
name|operation
operator|==
name|Operation
operator|.
name|EQR
operator|)
operator|&&
operator|(
name|tru
operator|!=
literal|null
operator|||
name|fals
operator|==
literal|null
operator|)
operator|||
operator|(
name|operation
operator|==
name|Operation
operator|.
name|NE
operator|||
name|operation
operator|==
name|Operation
operator|.
name|NER
operator|)
operator|&&
name|fals
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|ne
init|=
operator|(
name|operation
operator|==
name|Operation
operator|.
name|NE
operator|||
name|operation
operator|==
name|Operation
operator|.
name|NER
operator|)
operator|&&
operator|(
name|tru
operator|!=
literal|null
operator|||
name|fals
operator|==
literal|null
operator|)
operator|||
operator|(
name|operation
operator|==
name|Operation
operator|.
name|EQ
operator|||
name|operation
operator|==
name|Operation
operator|.
name|EQR
operator|)
operator|&&
name|fals
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|lt
init|=
name|operation
operator|==
name|Operation
operator|.
name|LT
operator|&&
operator|(
name|tru
operator|!=
literal|null
operator|||
name|fals
operator|==
literal|null
operator|)
operator|||
name|operation
operator|==
name|Operation
operator|.
name|GTE
operator|&&
name|fals
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|lte
init|=
name|operation
operator|==
name|Operation
operator|.
name|LTE
operator|&&
operator|(
name|tru
operator|!=
literal|null
operator|||
name|fals
operator|==
literal|null
operator|)
operator|||
name|operation
operator|==
name|Operation
operator|.
name|GT
operator|&&
name|fals
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|gt
init|=
name|operation
operator|==
name|Operation
operator|.
name|GT
operator|&&
operator|(
name|tru
operator|!=
literal|null
operator|||
name|fals
operator|==
literal|null
operator|)
operator|||
name|operation
operator|==
name|Operation
operator|.
name|LTE
operator|&&
name|fals
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|gte
init|=
name|operation
operator|==
name|Operation
operator|.
name|GTE
operator|&&
operator|(
name|tru
operator|!=
literal|null
operator|||
name|fals
operator|==
literal|null
operator|)
operator|||
name|operation
operator|==
name|Operation
operator|.
name|LT
operator|&&
name|fals
operator|!=
literal|null
decl_stmt|;
name|boolean
name|writejump
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|rsort
condition|)
block|{
case|case
name|VOID
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
case|case
name|BOOL
case|:
if|if
condition|(
name|eq
condition|)
name|adapter
operator|.
name|ifZCmp
argument_list|(
name|MethodWriter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ne
condition|)
name|adapter
operator|.
name|ifZCmp
argument_list|(
name|MethodWriter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
break|break;
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
if|if
condition|(
name|eq
condition|)
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ne
condition|)
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|lt
condition|)
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|LT
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|lte
condition|)
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|LE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|gt
condition|)
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|GT
argument_list|,
name|jump
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|gte
condition|)
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|GE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
break|break;
case|case
name|DEF
case|:
if|if
condition|(
name|eq
condition|)
block|{
if|if
condition|(
name|right
operator|.
name|isNull
condition|)
block|{
name|adapter
operator|.
name|ifNull
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|left
operator|.
name|isNull
operator|&&
name|operation
operator|==
name|Operation
operator|.
name|EQ
condition|)
block|{
name|adapter
operator|.
name|invokeStatic
argument_list|(
name|Definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_EQ_CALL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ne
condition|)
block|{
if|if
condition|(
name|right
operator|.
name|isNull
condition|)
block|{
name|adapter
operator|.
name|ifNonNull
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|left
operator|.
name|isNull
operator|&&
name|operation
operator|==
name|Operation
operator|.
name|NE
condition|)
block|{
name|adapter
operator|.
name|invokeStatic
argument_list|(
name|Definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_EQ_CALL
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|ifZCmp
argument_list|(
name|MethodWriter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lt
condition|)
block|{
name|adapter
operator|.
name|invokeStatic
argument_list|(
name|Definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_LT_CALL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lte
condition|)
block|{
name|adapter
operator|.
name|invokeStatic
argument_list|(
name|Definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_LTE_CALL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gt
condition|)
block|{
name|adapter
operator|.
name|invokeStatic
argument_list|(
name|Definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_GT_CALL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gte
condition|)
block|{
name|adapter
operator|.
name|invokeStatic
argument_list|(
name|Definition
operator|.
name|defobjType
operator|.
name|type
argument_list|,
name|DEF_GTE_CALL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
name|writejump
operator|=
name|left
operator|.
name|isNull
operator|||
name|ne
operator|||
name|operation
operator|==
name|Operation
operator|.
name|EQR
expr_stmt|;
if|if
condition|(
name|branch
operator|&&
operator|!
name|writejump
condition|)
block|{
name|adapter
operator|.
name|ifZCmp
argument_list|(
name|MethodWriter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
if|if
condition|(
name|eq
condition|)
block|{
if|if
condition|(
name|right
operator|.
name|isNull
condition|)
block|{
name|adapter
operator|.
name|ifNull
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|EQ
condition|)
block|{
name|adapter
operator|.
name|invokeStatic
argument_list|(
name|Definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|CHECKEQUALS
argument_list|)
expr_stmt|;
if|if
condition|(
name|branch
condition|)
block|{
name|adapter
operator|.
name|ifZCmp
argument_list|(
name|MethodWriter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
name|writejump
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ne
condition|)
block|{
if|if
condition|(
name|right
operator|.
name|isNull
condition|)
block|{
name|adapter
operator|.
name|ifNonNull
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|Operation
operator|.
name|NE
condition|)
block|{
name|adapter
operator|.
name|invokeStatic
argument_list|(
name|Definition
operator|.
name|utilityType
operator|.
name|type
argument_list|,
name|CHECKEQUALS
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|ifZCmp
argument_list|(
name|MethodWriter
operator|.
name|EQ
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adapter
operator|.
name|ifCmp
argument_list|(
name|rtype
argument_list|,
name|MethodWriter
operator|.
name|NE
argument_list|,
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|branch
operator|&&
name|writejump
condition|)
block|{
name|adapter
operator|.
name|push
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|goTo
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|mark
argument_list|(
name|jump
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|push
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|mark
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

