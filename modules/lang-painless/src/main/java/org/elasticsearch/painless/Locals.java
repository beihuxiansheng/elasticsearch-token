begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|MethodKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tracks user defined methods and variables across compilation phases.  */
end_comment

begin_class
DECL|class|Locals
specifier|public
specifier|final
class|class
name|Locals
block|{
comment|/** Reserved word: params map parameter */
DECL|field|PARAMS
specifier|public
specifier|static
specifier|final
name|String
name|PARAMS
init|=
literal|"params"
decl_stmt|;
comment|/** Reserved word: Lucene scorer parameter */
DECL|field|SCORER
specifier|public
specifier|static
specifier|final
name|String
name|SCORER
init|=
literal|"#scorer"
decl_stmt|;
comment|/** Reserved word: _value variable for aggregations */
DECL|field|VALUE
specifier|public
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"_value"
decl_stmt|;
comment|/** Reserved word: _score variable for search scripts */
DECL|field|SCORE
specifier|public
specifier|static
specifier|final
name|String
name|SCORE
init|=
literal|"_score"
decl_stmt|;
comment|/** Reserved word: ctx map for executable scripts */
DECL|field|CTX
specifier|public
specifier|static
specifier|final
name|String
name|CTX
init|=
literal|"ctx"
decl_stmt|;
comment|/** Reserved word: loop counter */
DECL|field|LOOP
specifier|public
specifier|static
specifier|final
name|String
name|LOOP
init|=
literal|"#loop"
decl_stmt|;
comment|/** Reserved word: unused */
DECL|field|THIS
specifier|public
specifier|static
specifier|final
name|String
name|THIS
init|=
literal|"#this"
decl_stmt|;
comment|/** Reserved word: unused */
DECL|field|DOC
specifier|public
specifier|static
specifier|final
name|String
name|DOC
init|=
literal|"doc"
decl_stmt|;
comment|/** Map of always reserved keywords */
DECL|field|KEYWORDS
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|KEYWORDS
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|THIS
argument_list|,
name|PARAMS
argument_list|,
name|SCORER
argument_list|,
name|DOC
argument_list|,
name|VALUE
argument_list|,
name|SCORE
argument_list|,
name|CTX
argument_list|,
name|LOOP
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Creates a new local variable scope (e.g. loop) inside the current scope */
DECL|method|newLocalScope
specifier|public
specifier|static
name|Locals
name|newLocalScope
parameter_list|(
name|Locals
name|currentScope
parameter_list|)
block|{
return|return
operator|new
name|Locals
argument_list|(
name|currentScope
argument_list|)
return|;
block|}
comment|/**       * Creates a new lambda scope inside the current scope      *<p>      * This is just like {@link #newFunctionScope}, except the captured parameters are made read-only.      */
DECL|method|newLambdaScope
specifier|public
specifier|static
name|Locals
name|newLambdaScope
parameter_list|(
name|Locals
name|programScope
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
parameter_list|,
name|int
name|captureCount
parameter_list|,
name|int
name|maxLoopCounter
parameter_list|)
block|{
name|Locals
name|locals
init|=
operator|new
name|Locals
argument_list|(
name|programScope
argument_list|,
name|returnType
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Parameter
name|parameter
init|=
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// TODO: allow non-captures to be r/w:
comment|// boolean isCapture = i< captureCount;
comment|// currently, this cannot be allowed, as we swap in real types,
comment|// but that can prevent a store of a different type...
name|boolean
name|isCapture
init|=
literal|true
decl_stmt|;
name|locals
operator|.
name|addVariable
argument_list|(
name|parameter
operator|.
name|location
argument_list|,
name|parameter
operator|.
name|type
argument_list|,
name|parameter
operator|.
name|name
argument_list|,
name|isCapture
argument_list|)
expr_stmt|;
block|}
comment|// Loop counter to catch infinite loops.  Internal use only.
if|if
condition|(
name|maxLoopCounter
operator|>
literal|0
condition|)
block|{
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|INT_TYPE
argument_list|,
name|LOOP
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|locals
return|;
block|}
comment|/** Creates a new function scope inside the current scope */
DECL|method|newFunctionScope
specifier|public
specifier|static
name|Locals
name|newFunctionScope
parameter_list|(
name|Locals
name|programScope
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
parameter_list|,
name|int
name|maxLoopCounter
parameter_list|)
block|{
name|Locals
name|locals
init|=
operator|new
name|Locals
argument_list|(
name|programScope
argument_list|,
name|returnType
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|parameter
range|:
name|parameters
control|)
block|{
name|locals
operator|.
name|addVariable
argument_list|(
name|parameter
operator|.
name|location
argument_list|,
name|parameter
operator|.
name|type
argument_list|,
name|parameter
operator|.
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Loop counter to catch infinite loops.  Internal use only.
if|if
condition|(
name|maxLoopCounter
operator|>
literal|0
condition|)
block|{
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|INT_TYPE
argument_list|,
name|LOOP
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|locals
return|;
block|}
comment|/** Creates a new main method scope */
DECL|method|newMainMethodScope
specifier|public
specifier|static
name|Locals
name|newMainMethodScope
parameter_list|(
name|Locals
name|programScope
parameter_list|,
name|boolean
name|usesScore
parameter_list|,
name|boolean
name|usesCtx
parameter_list|,
name|int
name|maxLoopCounter
parameter_list|)
block|{
name|Locals
name|locals
init|=
operator|new
name|Locals
argument_list|(
name|programScope
argument_list|,
name|Definition
operator|.
name|OBJECT_TYPE
argument_list|)
decl_stmt|;
comment|// This reference.  Internal use only.
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|getType
argument_list|(
literal|"Object"
argument_list|)
argument_list|,
name|THIS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Input map of variables passed to the script.
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|getType
argument_list|(
literal|"Map"
argument_list|)
argument_list|,
name|PARAMS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Scorer parameter passed to the script.  Internal use only.
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|DEF_TYPE
argument_list|,
name|SCORER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Doc parameter passed to the script. TODO: Currently working as a Map, we can do better?
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|getType
argument_list|(
literal|"Map"
argument_list|)
argument_list|,
name|DOC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Aggregation _value parameter passed to the script.
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|DEF_TYPE
argument_list|,
name|VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Shortcut variables.
comment|// Document's score as a read-only double.
if|if
condition|(
name|usesScore
condition|)
block|{
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|DOUBLE_TYPE
argument_list|,
name|SCORE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// The ctx map set by executable scripts as a read-only map.
if|if
condition|(
name|usesCtx
condition|)
block|{
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|getType
argument_list|(
literal|"Map"
argument_list|)
argument_list|,
name|CTX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Loop counter to catch infinite loops.  Internal use only.
if|if
condition|(
name|maxLoopCounter
operator|>
literal|0
condition|)
block|{
name|locals
operator|.
name|defineVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|INT_TYPE
argument_list|,
name|LOOP
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|locals
return|;
block|}
comment|/** Creates a new program scope: the list of methods. It is the parent for all methods */
DECL|method|newProgramScope
specifier|public
specifier|static
name|Locals
name|newProgramScope
parameter_list|(
name|Collection
argument_list|<
name|Method
argument_list|>
name|methods
parameter_list|)
block|{
name|Locals
name|locals
init|=
operator|new
name|Locals
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|locals
operator|.
name|addMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
return|return
name|locals
return|;
block|}
comment|/** Checks if a variable exists or not, in this scope or any parents. */
DECL|method|hasVariable
specifier|public
name|boolean
name|hasVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Variable
name|variable
init|=
name|lookupVariable
argument_list|(
literal|null
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|variable
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
name|parent
operator|.
name|hasVariable
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Accesses a variable. This will throw IAE if the variable does not exist */
DECL|method|getVariable
specifier|public
name|Variable
name|getVariable
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Variable
name|variable
init|=
name|lookupVariable
argument_list|(
name|location
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|variable
operator|!=
literal|null
condition|)
block|{
return|return
name|variable
return|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
name|parent
operator|.
name|getVariable
argument_list|(
name|location
argument_list|,
name|name
argument_list|)
return|;
block|}
throw|throw
name|location
operator|.
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable ["
operator|+
name|name
operator|+
literal|"] is not defined."
argument_list|)
argument_list|)
throw|;
block|}
comment|/** Looks up a method. Returns null if the method does not exist. */
DECL|method|getMethod
specifier|public
name|Method
name|getMethod
parameter_list|(
name|MethodKey
name|key
parameter_list|)
block|{
name|Method
name|method
init|=
name|lookupMethod
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
return|return
name|method
return|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
name|parent
operator|.
name|getMethod
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Creates a new variable. Throws IAE if the variable has already been defined (even in a parent) or reserved. */
DECL|method|addVariable
specifier|public
name|Variable
name|addVariable
parameter_list|(
name|Location
name|location
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|readonly
parameter_list|)
block|{
if|if
condition|(
name|hasVariable
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
name|location
operator|.
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable ["
operator|+
name|name
operator|+
literal|"] is already defined."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|KEYWORDS
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
name|location
operator|.
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable ["
operator|+
name|name
operator|+
literal|"] is reserved."
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|defineVariable
argument_list|(
name|location
argument_list|,
name|type
argument_list|,
name|name
argument_list|,
name|readonly
argument_list|)
return|;
block|}
comment|/** Return type of this scope (e.g. int, if inside a function that returns int) */
DECL|method|getReturnType
specifier|public
name|Type
name|getReturnType
parameter_list|()
block|{
return|return
name|returnType
return|;
block|}
comment|/** Returns the top-level program scope. */
DECL|method|getProgramScope
specifier|public
name|Locals
name|getProgramScope
parameter_list|()
block|{
name|Locals
name|locals
init|=
name|this
decl_stmt|;
while|while
condition|(
name|locals
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|locals
operator|=
name|locals
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|locals
return|;
block|}
comment|///// private impl
comment|// parent scope
DECL|field|parent
specifier|private
specifier|final
name|Locals
name|parent
decl_stmt|;
comment|// return type of this scope
DECL|field|returnType
specifier|private
specifier|final
name|Type
name|returnType
decl_stmt|;
comment|// next slot number to assign
DECL|field|nextSlotNumber
specifier|private
name|int
name|nextSlotNumber
decl_stmt|;
comment|// variable name -> variable
DECL|field|variables
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Variable
argument_list|>
name|variables
decl_stmt|;
comment|// method name+arity -> methods
DECL|field|methods
specifier|private
name|Map
argument_list|<
name|MethodKey
argument_list|,
name|Method
argument_list|>
name|methods
decl_stmt|;
comment|/**      * Create a new Locals      */
DECL|method|Locals
specifier|private
name|Locals
parameter_list|(
name|Locals
name|parent
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
name|parent
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new Locals with specified return type      */
DECL|method|Locals
specifier|private
name|Locals
parameter_list|(
name|Locals
name|parent
parameter_list|,
name|Type
name|returnType
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|returnType
operator|=
name|returnType
expr_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|nextSlotNumber
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nextSlotNumber
operator|=
name|parent
operator|.
name|getNextSlot
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Returns the parent scope */
DECL|method|getParent
specifier|private
name|Locals
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
comment|/** Looks up a variable at this scope only. Returns null if the variable does not exist. */
DECL|method|lookupVariable
specifier|private
name|Variable
name|lookupVariable
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|variables
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|variables
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Looks up a method at this scope only. Returns null if the method does not exist. */
DECL|method|lookupMethod
specifier|private
name|Method
name|lookupMethod
parameter_list|(
name|MethodKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|methods
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|methods
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/** Defines a variable at this scope internally. */
DECL|method|defineVariable
specifier|private
name|Variable
name|defineVariable
parameter_list|(
name|Location
name|location
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|readonly
parameter_list|)
block|{
if|if
condition|(
name|variables
operator|==
literal|null
condition|)
block|{
name|variables
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|Variable
name|variable
init|=
operator|new
name|Variable
argument_list|(
name|location
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|getNextSlot
argument_list|()
argument_list|,
name|readonly
argument_list|)
decl_stmt|;
name|variables
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|variable
argument_list|)
expr_stmt|;
comment|// TODO: check result
name|nextSlotNumber
operator|+=
name|type
operator|.
name|type
operator|.
name|getSize
argument_list|()
expr_stmt|;
return|return
name|variable
return|;
block|}
DECL|method|addMethod
specifier|private
name|void
name|addMethod
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|methods
operator|==
literal|null
condition|)
block|{
name|methods
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|methods
operator|.
name|put
argument_list|(
operator|new
name|MethodKey
argument_list|(
name|method
operator|.
name|name
argument_list|,
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|method
argument_list|)
expr_stmt|;
comment|// TODO: check result
block|}
DECL|method|getNextSlot
specifier|private
name|int
name|getNextSlot
parameter_list|()
block|{
return|return
name|nextSlotNumber
return|;
block|}
DECL|class|Variable
specifier|public
specifier|static
specifier|final
class|class
name|Variable
block|{
DECL|field|location
specifier|public
specifier|final
name|Location
name|location
decl_stmt|;
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|public
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|readonly
specifier|public
specifier|final
name|boolean
name|readonly
decl_stmt|;
DECL|field|slot
specifier|private
specifier|final
name|int
name|slot
decl_stmt|;
DECL|method|Variable
specifier|public
name|Variable
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|name
parameter_list|,
name|Type
name|type
parameter_list|,
name|int
name|slot
parameter_list|,
name|boolean
name|readonly
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|slot
operator|=
name|slot
expr_stmt|;
name|this
operator|.
name|readonly
operator|=
name|readonly
expr_stmt|;
block|}
DECL|method|getSlot
specifier|public
name|int
name|getSlot
parameter_list|()
block|{
return|return
name|slot
return|;
block|}
block|}
DECL|class|Parameter
specifier|public
specifier|static
specifier|final
class|class
name|Parameter
block|{
DECL|field|location
specifier|public
specifier|final
name|Location
name|location
decl_stmt|;
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|public
specifier|final
name|Type
name|type
decl_stmt|;
DECL|method|Parameter
specifier|public
name|Parameter
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|name
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

