begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|MethodKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Tracks user defined methods and variables across compilation phases.  */
end_comment

begin_class
DECL|class|Locals
specifier|public
specifier|final
class|class
name|Locals
block|{
comment|/**      * Tracks reserved variables.  Must be given to any source of input      * prior to beginning the analysis phase so that reserved variables      * are known ahead of time to assign appropriate slots without      * being wasteful.      */
DECL|interface|Reserved
specifier|public
interface|interface
name|Reserved
block|{
DECL|method|markReserved
name|void
name|markReserved
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
DECL|method|isReserved
name|boolean
name|isReserved
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
DECL|method|setMaxLoopCounter
name|void
name|setMaxLoopCounter
parameter_list|(
name|int
name|max
parameter_list|)
function_decl|;
DECL|method|getMaxLoopCounter
name|int
name|getMaxLoopCounter
parameter_list|()
function_decl|;
block|}
DECL|class|ExecuteReserved
specifier|public
specifier|static
specifier|final
class|class
name|ExecuteReserved
implements|implements
name|Reserved
block|{
DECL|field|THIS
specifier|public
specifier|static
specifier|final
name|String
name|THIS
init|=
literal|"#this"
decl_stmt|;
DECL|field|PARAMS
specifier|public
specifier|static
specifier|final
name|String
name|PARAMS
init|=
literal|"params"
decl_stmt|;
DECL|field|SCORER
specifier|public
specifier|static
specifier|final
name|String
name|SCORER
init|=
literal|"#scorer"
decl_stmt|;
DECL|field|DOC
specifier|public
specifier|static
specifier|final
name|String
name|DOC
init|=
literal|"doc"
decl_stmt|;
DECL|field|VALUE
specifier|public
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"_value"
decl_stmt|;
DECL|field|SCORE
specifier|public
specifier|static
specifier|final
name|String
name|SCORE
init|=
literal|"_score"
decl_stmt|;
DECL|field|CTX
specifier|public
specifier|static
specifier|final
name|String
name|CTX
init|=
literal|"ctx"
decl_stmt|;
DECL|field|LOOP
specifier|public
specifier|static
specifier|final
name|String
name|LOOP
init|=
literal|"#loop"
decl_stmt|;
DECL|field|score
specifier|private
name|boolean
name|score
init|=
literal|false
decl_stmt|;
DECL|field|ctx
specifier|private
name|boolean
name|ctx
init|=
literal|false
decl_stmt|;
DECL|field|maxLoopCounter
specifier|private
name|int
name|maxLoopCounter
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|markReserved
specifier|public
name|void
name|markReserved
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|SCORE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|score
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CTX
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|ctx
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isReserved
specifier|public
name|boolean
name|isReserved
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
name|THIS
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|PARAMS
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|SCORER
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|DOC
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|SCORE
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|CTX
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|LOOP
argument_list|)
return|;
block|}
DECL|method|usesScore
specifier|public
name|boolean
name|usesScore
parameter_list|()
block|{
return|return
name|score
return|;
block|}
DECL|method|usesCtx
specifier|public
name|boolean
name|usesCtx
parameter_list|()
block|{
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
DECL|method|setMaxLoopCounter
specifier|public
name|void
name|setMaxLoopCounter
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|maxLoopCounter
operator|=
name|max
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaxLoopCounter
specifier|public
name|int
name|getMaxLoopCounter
parameter_list|()
block|{
return|return
name|maxLoopCounter
return|;
block|}
block|}
DECL|class|FunctionReserved
specifier|public
specifier|static
specifier|final
class|class
name|FunctionReserved
implements|implements
name|Reserved
block|{
DECL|field|THIS
specifier|public
specifier|static
specifier|final
name|String
name|THIS
init|=
literal|"#this"
decl_stmt|;
DECL|field|LOOP
specifier|public
specifier|static
specifier|final
name|String
name|LOOP
init|=
literal|"#loop"
decl_stmt|;
DECL|field|maxLoopCounter
specifier|private
name|int
name|maxLoopCounter
init|=
literal|0
decl_stmt|;
DECL|method|markReserved
specifier|public
name|void
name|markReserved
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// Do nothing.
block|}
DECL|method|isReserved
specifier|public
name|boolean
name|isReserved
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
name|THIS
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|LOOP
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setMaxLoopCounter
specifier|public
name|void
name|setMaxLoopCounter
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|maxLoopCounter
operator|=
name|max
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaxLoopCounter
specifier|public
name|int
name|getMaxLoopCounter
parameter_list|()
block|{
return|return
name|maxLoopCounter
return|;
block|}
block|}
DECL|class|Variable
specifier|public
specifier|static
specifier|final
class|class
name|Variable
block|{
DECL|field|location
specifier|public
specifier|final
name|Location
name|location
decl_stmt|;
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|public
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|slot
specifier|public
specifier|final
name|int
name|slot
decl_stmt|;
DECL|field|readonly
specifier|public
specifier|final
name|boolean
name|readonly
decl_stmt|;
DECL|field|read
specifier|public
name|boolean
name|read
init|=
literal|false
decl_stmt|;
DECL|method|Variable
specifier|private
name|Variable
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|name
parameter_list|,
name|Type
name|type
parameter_list|,
name|int
name|slot
parameter_list|,
name|boolean
name|readonly
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|slot
operator|=
name|slot
expr_stmt|;
name|this
operator|.
name|readonly
operator|=
name|readonly
expr_stmt|;
block|}
block|}
DECL|class|Parameter
specifier|public
specifier|static
specifier|final
class|class
name|Parameter
block|{
DECL|field|location
specifier|public
specifier|final
name|Location
name|location
decl_stmt|;
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|public
specifier|final
name|Type
name|type
decl_stmt|;
DECL|method|Parameter
specifier|public
name|Parameter
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|name
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
DECL|field|reserved
specifier|private
specifier|final
name|Reserved
name|reserved
decl_stmt|;
DECL|field|methods
specifier|private
specifier|final
name|Map
argument_list|<
name|MethodKey
argument_list|,
name|Method
argument_list|>
name|methods
decl_stmt|;
DECL|field|rtnType
specifier|private
specifier|final
name|Type
name|rtnType
decl_stmt|;
comment|// TODO: this datastructure runs in linear time for nearly all operations. use linkedhashset instead?
DECL|field|scopes
specifier|private
specifier|final
name|Deque
argument_list|<
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|variables
specifier|private
specifier|final
name|Deque
argument_list|<
name|Variable
argument_list|>
name|variables
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Locals
specifier|public
name|Locals
parameter_list|(
name|ExecuteReserved
name|reserved
parameter_list|,
name|Map
argument_list|<
name|MethodKey
argument_list|,
name|Method
argument_list|>
name|methods
parameter_list|)
block|{
name|this
operator|.
name|reserved
operator|=
name|reserved
expr_stmt|;
name|this
operator|.
name|methods
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|methods
argument_list|)
expr_stmt|;
name|this
operator|.
name|rtnType
operator|=
name|Definition
operator|.
name|OBJECT_TYPE
expr_stmt|;
name|incrementScope
argument_list|()
expr_stmt|;
comment|// Method variables.
comment|// This reference.  Internal use only.
name|addVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|getType
argument_list|(
literal|"Object"
argument_list|)
argument_list|,
name|ExecuteReserved
operator|.
name|THIS
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Input map of variables passed to the script.
name|addVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|getType
argument_list|(
literal|"Map"
argument_list|)
argument_list|,
name|ExecuteReserved
operator|.
name|PARAMS
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Scorer parameter passed to the script.  Internal use only.
name|addVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|DEF_TYPE
argument_list|,
name|ExecuteReserved
operator|.
name|SCORER
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Doc parameter passed to the script. TODO: Currently working as a Map, we can do better?
name|addVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|getType
argument_list|(
literal|"Map"
argument_list|)
argument_list|,
name|ExecuteReserved
operator|.
name|DOC
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Aggregation _value parameter passed to the script.
name|addVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|DEF_TYPE
argument_list|,
name|ExecuteReserved
operator|.
name|VALUE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Shortcut variables.
comment|// Document's score as a read-only double.
if|if
condition|(
name|reserved
operator|.
name|usesScore
argument_list|()
condition|)
block|{
name|addVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|DOUBLE_TYPE
argument_list|,
name|ExecuteReserved
operator|.
name|SCORE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// The ctx map set by executable scripts as a read-only map.
if|if
condition|(
name|reserved
operator|.
name|usesCtx
argument_list|()
condition|)
block|{
name|addVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|getType
argument_list|(
literal|"Map"
argument_list|)
argument_list|,
name|ExecuteReserved
operator|.
name|CTX
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Loop counter to catch infinite loops.  Internal use only.
if|if
condition|(
name|reserved
operator|.
name|getMaxLoopCounter
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|INT_TYPE
argument_list|,
name|ExecuteReserved
operator|.
name|LOOP
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|Locals
specifier|public
name|Locals
parameter_list|(
name|FunctionReserved
name|reserved
parameter_list|,
name|Locals
name|locals
parameter_list|,
name|Type
name|rtnType
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|reserved
operator|=
name|reserved
expr_stmt|;
name|this
operator|.
name|methods
operator|=
name|locals
operator|.
name|methods
expr_stmt|;
name|this
operator|.
name|rtnType
operator|=
name|rtnType
expr_stmt|;
name|incrementScope
argument_list|()
expr_stmt|;
for|for
control|(
name|Parameter
name|parameter
range|:
name|parameters
control|)
block|{
name|addVariable
argument_list|(
name|parameter
operator|.
name|location
argument_list|,
name|parameter
operator|.
name|type
argument_list|,
name|parameter
operator|.
name|name
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Loop counter to catch infinite loops.  Internal use only.
if|if
condition|(
name|reserved
operator|.
name|getMaxLoopCounter
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addVariable
argument_list|(
literal|null
argument_list|,
name|Definition
operator|.
name|INT_TYPE
argument_list|,
name|ExecuteReserved
operator|.
name|LOOP
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMaxLoopCounter
specifier|public
name|int
name|getMaxLoopCounter
parameter_list|()
block|{
return|return
name|reserved
operator|.
name|getMaxLoopCounter
argument_list|()
return|;
block|}
DECL|method|getMethod
specifier|public
name|Method
name|getMethod
parameter_list|(
name|MethodKey
name|key
parameter_list|)
block|{
return|return
name|methods
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getReturnType
specifier|public
name|Type
name|getReturnType
parameter_list|()
block|{
return|return
name|rtnType
return|;
block|}
DECL|method|incrementScope
specifier|public
name|void
name|incrementScope
parameter_list|()
block|{
name|scopes
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|decrementScope
specifier|public
name|void
name|decrementScope
parameter_list|()
block|{
name|int
name|remove
init|=
name|scopes
operator|.
name|pop
argument_list|()
decl_stmt|;
while|while
condition|(
name|remove
operator|>
literal|0
condition|)
block|{
name|Variable
name|variable
init|=
name|variables
operator|.
name|pop
argument_list|()
decl_stmt|;
comment|// This checks whether or not a variable is used when exiting a local scope.
if|if
condition|(
name|variable
operator|.
name|read
condition|)
block|{
throw|throw
name|variable
operator|.
name|location
operator|.
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable ["
operator|+
name|variable
operator|.
name|name
operator|+
literal|"] is never used."
argument_list|)
argument_list|)
throw|;
block|}
operator|--
name|remove
expr_stmt|;
block|}
block|}
DECL|method|getVariable
specifier|public
name|Variable
name|getVariable
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Variable
argument_list|>
name|itr
init|=
name|variables
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Variable
name|variable
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|variable
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|variable
return|;
block|}
block|}
throw|throw
name|location
operator|.
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable ["
operator|+
name|name
operator|+
literal|"] is not defined."
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|isVariable
specifier|public
name|boolean
name|isVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Variable
argument_list|>
name|itr
init|=
name|variables
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Variable
name|variable
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|variable
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|addVariable
specifier|public
name|Variable
name|addVariable
parameter_list|(
name|Location
name|location
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|readonly
parameter_list|,
name|boolean
name|reserved
parameter_list|)
block|{
if|if
condition|(
operator|!
name|reserved
operator|&&
name|this
operator|.
name|reserved
operator|.
name|isReserved
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
name|location
operator|.
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable ["
operator|+
name|name
operator|+
literal|"] is reserved."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|isVariable
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
name|location
operator|.
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable ["
operator|+
name|name
operator|+
literal|"] is already defined."
argument_list|)
argument_list|)
throw|;
block|}
name|Variable
name|previous
init|=
name|variables
operator|.
name|peekFirst
argument_list|()
decl_stmt|;
name|int
name|slot
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|slot
operator|=
name|previous
operator|.
name|slot
operator|+
name|previous
operator|.
name|type
operator|.
name|type
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
name|Variable
name|variable
init|=
operator|new
name|Variable
argument_list|(
name|location
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|slot
argument_list|,
name|readonly
argument_list|)
decl_stmt|;
name|variables
operator|.
name|push
argument_list|(
name|variable
argument_list|)
expr_stmt|;
name|int
name|update
init|=
name|scopes
operator|.
name|pop
argument_list|()
operator|+
literal|1
decl_stmt|;
name|scopes
operator|.
name|push
argument_list|(
name|update
argument_list|)
expr_stmt|;
return|return
name|variable
return|;
block|}
block|}
end_class

end_unit

