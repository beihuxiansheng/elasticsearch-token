begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|api
operator|.
name|Augmentation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|CLASS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|H_INVOKEINTERFACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|H_INVOKESTATIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|H_INVOKEVIRTUAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
operator|.
name|H_NEWINVOKESPECIAL
import|;
end_import

begin_comment
comment|/**  * Reference to a function or lambda.  *<p>  * Once you have created one of these, you have "everything you need" to call {@link LambdaBootstrap}  * either statically from bytecode with invokedynamic, or at runtime from Java.  */
end_comment

begin_class
DECL|class|FunctionRef
specifier|public
class|class
name|FunctionRef
block|{
comment|/** functional interface method name */
DECL|field|interfaceMethodName
specifier|public
specifier|final
name|String
name|interfaceMethodName
decl_stmt|;
comment|/** factory (CallSite) method signature */
DECL|field|factoryMethodType
specifier|public
specifier|final
name|MethodType
name|factoryMethodType
decl_stmt|;
comment|/** functional interface method signature */
DECL|field|interfaceMethodType
specifier|public
specifier|final
name|MethodType
name|interfaceMethodType
decl_stmt|;
comment|/** class of the delegate method to be called */
DECL|field|delegateClassName
specifier|public
specifier|final
name|String
name|delegateClassName
decl_stmt|;
comment|/** the invocation type of the delegate method */
DECL|field|delegateInvokeType
specifier|public
specifier|final
name|int
name|delegateInvokeType
decl_stmt|;
comment|/** the name of the delegate method */
DECL|field|delegateMethodName
specifier|public
specifier|final
name|String
name|delegateMethodName
decl_stmt|;
comment|/** delegate method signature */
DECL|field|delegateMethodType
specifier|public
specifier|final
name|MethodType
name|delegateMethodType
decl_stmt|;
comment|/** interface method */
DECL|field|interfaceMethod
specifier|public
specifier|final
name|Method
name|interfaceMethod
decl_stmt|;
comment|/** delegate method */
DECL|field|delegateMethod
specifier|public
specifier|final
name|Method
name|delegateMethod
decl_stmt|;
comment|/** factory method type descriptor */
DECL|field|factoryDescriptor
specifier|public
specifier|final
name|String
name|factoryDescriptor
decl_stmt|;
comment|/** functional interface method as type */
DECL|field|interfaceType
specifier|public
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|interfaceType
decl_stmt|;
comment|/** delegate method type method as type */
DECL|field|delegateType
specifier|public
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|delegateType
decl_stmt|;
comment|/**      * Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist.      * @param definition the whitelist against which this script is being compiled      * @param expected functional interface type to implement.      * @param type the left hand side of a method reference expression      * @param call the right hand side of a method reference expression      * @param numCaptures number of captured arguments      */
DECL|method|FunctionRef
specifier|public
name|FunctionRef
parameter_list|(
name|Definition
name|definition
parameter_list|,
name|Type
name|expected
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|call
parameter_list|,
name|int
name|numCaptures
parameter_list|)
block|{
name|this
argument_list|(
name|expected
argument_list|,
name|expected
operator|.
name|struct
operator|.
name|getFunctionalMethod
argument_list|()
argument_list|,
name|lookup
argument_list|(
name|definition
argument_list|,
name|expected
argument_list|,
name|type
argument_list|,
name|call
argument_list|,
name|numCaptures
operator|>
literal|0
argument_list|)
argument_list|,
name|numCaptures
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new FunctionRef (already resolved)      * @param expected functional interface type to implement      * @param interfaceMethod functional interface method      * @param delegateMethod implementation method      * @param numCaptures number of captured arguments      */
DECL|method|FunctionRef
specifier|public
name|FunctionRef
parameter_list|(
name|Type
name|expected
parameter_list|,
name|Method
name|interfaceMethod
parameter_list|,
name|Method
name|delegateMethod
parameter_list|,
name|int
name|numCaptures
parameter_list|)
block|{
name|MethodType
name|delegateMethodType
init|=
name|delegateMethod
operator|.
name|getMethodType
argument_list|()
decl_stmt|;
name|interfaceMethodName
operator|=
name|interfaceMethod
operator|.
name|name
expr_stmt|;
name|factoryMethodType
operator|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|expected
operator|.
name|clazz
argument_list|,
name|delegateMethodType
operator|.
name|dropParameterTypes
argument_list|(
name|numCaptures
argument_list|,
name|delegateMethodType
operator|.
name|parameterCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|interfaceMethodType
operator|=
name|interfaceMethod
operator|.
name|getMethodType
argument_list|()
operator|.
name|dropParameterTypes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// the Painless$Script class can be inferred if owner is null
if|if
condition|(
name|delegateMethod
operator|.
name|owner
operator|==
literal|null
condition|)
block|{
name|delegateClassName
operator|=
name|CLASS_NAME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delegateMethod
operator|.
name|augmentation
condition|)
block|{
name|delegateClassName
operator|=
name|Augmentation
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|delegateClassName
operator|=
name|delegateMethod
operator|.
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"<init>"
operator|.
name|equals
argument_list|(
name|delegateMethod
operator|.
name|name
argument_list|)
condition|)
block|{
name|delegateInvokeType
operator|=
name|H_NEWINVOKESPECIAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|delegateMethod
operator|.
name|modifiers
argument_list|)
condition|)
block|{
name|delegateInvokeType
operator|=
name|H_INVOKESTATIC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delegateMethod
operator|.
name|owner
operator|.
name|clazz
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|delegateInvokeType
operator|=
name|H_INVOKEINTERFACE
expr_stmt|;
block|}
else|else
block|{
name|delegateInvokeType
operator|=
name|H_INVOKEVIRTUAL
expr_stmt|;
block|}
name|delegateMethodName
operator|=
name|delegateMethod
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|delegateMethodType
operator|=
name|delegateMethodType
operator|.
name|dropParameterTypes
argument_list|(
literal|0
argument_list|,
name|numCaptures
argument_list|)
expr_stmt|;
name|this
operator|.
name|interfaceMethod
operator|=
name|interfaceMethod
expr_stmt|;
name|this
operator|.
name|delegateMethod
operator|=
name|delegateMethod
expr_stmt|;
name|factoryDescriptor
operator|=
name|factoryMethodType
operator|.
name|toMethodDescriptorString
argument_list|()
expr_stmt|;
name|interfaceType
operator|=
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
operator|.
name|getMethodType
argument_list|(
name|interfaceMethodType
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
expr_stmt|;
name|delegateType
operator|=
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
operator|.
name|getMethodType
argument_list|(
name|this
operator|.
name|delegateMethodType
operator|.
name|toMethodDescriptorString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new FunctionRef (low level).      * It is for runtime use only.      */
DECL|method|FunctionRef
specifier|public
name|FunctionRef
parameter_list|(
name|Type
name|expected
parameter_list|,
name|Method
name|interfaceMethod
parameter_list|,
name|String
name|delegateMethodName
parameter_list|,
name|MethodType
name|delegateMethodType
parameter_list|,
name|int
name|numCaptures
parameter_list|)
block|{
name|interfaceMethodName
operator|=
name|interfaceMethod
operator|.
name|name
expr_stmt|;
name|factoryMethodType
operator|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|expected
operator|.
name|clazz
argument_list|,
name|delegateMethodType
operator|.
name|dropParameterTypes
argument_list|(
name|numCaptures
argument_list|,
name|delegateMethodType
operator|.
name|parameterCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|interfaceMethodType
operator|=
name|interfaceMethod
operator|.
name|getMethodType
argument_list|()
operator|.
name|dropParameterTypes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|delegateClassName
operator|=
name|CLASS_NAME
expr_stmt|;
name|delegateInvokeType
operator|=
name|H_INVOKESTATIC
expr_stmt|;
name|this
operator|.
name|delegateMethodName
operator|=
name|delegateMethodName
expr_stmt|;
name|this
operator|.
name|delegateMethodType
operator|=
name|delegateMethodType
operator|.
name|dropParameterTypes
argument_list|(
literal|0
argument_list|,
name|numCaptures
argument_list|)
expr_stmt|;
name|this
operator|.
name|interfaceMethod
operator|=
literal|null
expr_stmt|;
name|delegateMethod
operator|=
literal|null
expr_stmt|;
name|factoryDescriptor
operator|=
literal|null
expr_stmt|;
name|interfaceType
operator|=
literal|null
expr_stmt|;
name|delegateType
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Looks up {@code type::call} from the whitelist, and returns a matching method.      */
DECL|method|lookup
specifier|private
specifier|static
name|Definition
operator|.
name|Method
name|lookup
parameter_list|(
name|Definition
name|definition
parameter_list|,
name|Definition
operator|.
name|Type
name|expected
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|call
parameter_list|,
name|boolean
name|receiverCaptured
parameter_list|)
block|{
comment|// check its really a functional interface
comment|// for e.g. Comparable
name|Method
name|method
init|=
name|expected
operator|.
name|struct
operator|.
name|getFunctionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert function reference ["
operator|+
name|type
operator|+
literal|"::"
operator|+
name|call
operator|+
literal|"] "
operator|+
literal|"to ["
operator|+
name|expected
operator|.
name|name
operator|+
literal|"], not a functional interface"
argument_list|)
throw|;
block|}
comment|// lookup requested method
name|Definition
operator|.
name|Struct
name|struct
init|=
name|definition
operator|.
name|getType
argument_list|(
name|type
argument_list|)
operator|.
name|struct
decl_stmt|;
specifier|final
name|Definition
operator|.
name|Method
name|impl
decl_stmt|;
comment|// ctor ref
if|if
condition|(
literal|"new"
operator|.
name|equals
argument_list|(
name|call
argument_list|)
condition|)
block|{
name|impl
operator|=
name|struct
operator|.
name|constructors
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"<init>"
argument_list|,
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// look for a static impl first
name|Definition
operator|.
name|Method
name|staticImpl
init|=
name|struct
operator|.
name|staticMethods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
name|call
argument_list|,
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|staticImpl
operator|==
literal|null
condition|)
block|{
comment|// otherwise a virtual impl
specifier|final
name|int
name|arity
decl_stmt|;
if|if
condition|(
name|receiverCaptured
condition|)
block|{
comment|// receiver captured
name|arity
operator|=
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// receiver passed
name|arity
operator|=
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|impl
operator|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
name|call
argument_list|,
name|arity
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|impl
operator|=
name|staticImpl
expr_stmt|;
block|}
block|}
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown reference ["
operator|+
name|type
operator|+
literal|"::"
operator|+
name|call
operator|+
literal|"] matching "
operator|+
literal|"["
operator|+
name|expected
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|impl
return|;
block|}
block|}
end_class

end_unit

