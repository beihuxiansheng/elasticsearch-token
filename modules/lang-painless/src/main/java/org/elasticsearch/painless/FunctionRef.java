begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Handle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_comment
comment|/**   * Reference to a function or lambda.   *<p>  * Once you have created one of these, you have "everything you need" to call LambdaMetaFactory  * either statically from bytecode with invokedynamic, or at runtime from Java.    */
end_comment

begin_class
DECL|class|FunctionRef
specifier|public
class|class
name|FunctionRef
block|{
comment|/** Function Object's method name */
DECL|field|invokedName
specifier|public
specifier|final
name|String
name|invokedName
decl_stmt|;
comment|/** CallSite signature */
DECL|field|invokedType
specifier|public
specifier|final
name|MethodType
name|invokedType
decl_stmt|;
comment|/** Implementation method */
DECL|field|implMethod
specifier|public
specifier|final
name|MethodHandle
name|implMethod
decl_stmt|;
comment|/** Function Object's method signature */
DECL|field|samMethodType
specifier|public
specifier|final
name|MethodType
name|samMethodType
decl_stmt|;
comment|/** When bridging is required, request this bridge interface */
DECL|field|interfaceMethodType
specifier|public
specifier|final
name|MethodType
name|interfaceMethodType
decl_stmt|;
comment|/** ASM "Handle" to the method, for the constant pool */
DECL|field|implMethodASM
specifier|public
specifier|final
name|Handle
name|implMethodASM
decl_stmt|;
comment|/**      * Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist.      * @param expected interface type to implement.      * @param type the left hand side of a method reference expression      * @param call the right hand side of a method reference expression      * @param captures captured arguments      */
DECL|method|FunctionRef
specifier|public
name|FunctionRef
parameter_list|(
name|Definition
operator|.
name|Type
name|expected
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|call
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|captures
parameter_list|)
block|{
name|this
argument_list|(
name|expected
argument_list|,
name|expected
operator|.
name|struct
operator|.
name|getFunctionalMethod
argument_list|()
argument_list|,
name|lookup
argument_list|(
name|expected
argument_list|,
name|type
argument_list|,
name|call
argument_list|,
name|captures
operator|.
name|length
operator|>
literal|0
argument_list|)
argument_list|,
name|captures
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new FunctionRef (already resolved)      * @param expected interface type to implement      * @param method functional interface method      * @param impl implementation method      * @param captures captured arguments      */
DECL|method|FunctionRef
specifier|public
name|FunctionRef
parameter_list|(
name|Definition
operator|.
name|Type
name|expected
parameter_list|,
name|Definition
operator|.
name|Method
name|method
parameter_list|,
name|Definition
operator|.
name|Method
name|impl
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|captures
parameter_list|)
block|{
comment|// e.g. compareTo
name|invokedName
operator|=
name|method
operator|.
name|name
expr_stmt|;
comment|// e.g. (Object)Comparator
name|invokedType
operator|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|expected
operator|.
name|clazz
argument_list|,
name|captures
argument_list|)
expr_stmt|;
comment|// e.g. (Object,Object)int
name|interfaceMethodType
operator|=
name|method
operator|.
name|getMethodType
argument_list|()
operator|.
name|dropParameterTypes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|tag
decl_stmt|;
if|if
condition|(
literal|"<init>"
operator|.
name|equals
argument_list|(
name|impl
operator|.
name|name
argument_list|)
condition|)
block|{
name|tag
operator|=
name|Opcodes
operator|.
name|H_NEWINVOKESPECIAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|impl
operator|.
name|modifiers
argument_list|)
condition|)
block|{
name|tag
operator|=
name|Opcodes
operator|.
name|H_INVOKESTATIC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|impl
operator|.
name|owner
operator|.
name|clazz
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|tag
operator|=
name|Opcodes
operator|.
name|H_INVOKEINTERFACE
expr_stmt|;
block|}
else|else
block|{
name|tag
operator|=
name|Opcodes
operator|.
name|H_INVOKEVIRTUAL
expr_stmt|;
block|}
specifier|final
name|String
name|owner
decl_stmt|;
specifier|final
name|boolean
name|ownerIsInterface
decl_stmt|;
if|if
condition|(
name|impl
operator|.
name|owner
operator|==
literal|null
condition|)
block|{
comment|// owner == null: script class itself
name|ownerIsInterface
operator|=
literal|false
expr_stmt|;
name|owner
operator|=
name|WriterConstants
operator|.
name|CLASS_TYPE
operator|.
name|getInternalName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ownerIsInterface
operator|=
name|impl
operator|.
name|owner
operator|.
name|clazz
operator|.
name|isInterface
argument_list|()
expr_stmt|;
name|owner
operator|=
name|impl
operator|.
name|owner
operator|.
name|type
operator|.
name|getInternalName
argument_list|()
expr_stmt|;
block|}
name|implMethodASM
operator|=
operator|new
name|Handle
argument_list|(
name|tag
argument_list|,
name|owner
argument_list|,
name|impl
operator|.
name|name
argument_list|,
name|impl
operator|.
name|method
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|ownerIsInterface
argument_list|)
expr_stmt|;
name|implMethod
operator|=
name|impl
operator|.
name|handle
expr_stmt|;
comment|// remove any prepended captured arguments for the 'natural' signature.
name|samMethodType
operator|=
name|impl
operator|.
name|getMethodType
argument_list|()
operator|.
name|dropParameterTypes
argument_list|(
literal|0
argument_list|,
name|captures
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**       * Looks up {@code type::call} from the whitelist, and returns a matching method.      */
DECL|method|lookup
specifier|private
specifier|static
name|Definition
operator|.
name|Method
name|lookup
parameter_list|(
name|Definition
operator|.
name|Type
name|expected
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|call
parameter_list|,
name|boolean
name|receiverCaptured
parameter_list|)
block|{
comment|// check its really a functional interface
comment|// for e.g. Comparable
name|Method
name|method
init|=
name|expected
operator|.
name|struct
operator|.
name|getFunctionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert function reference ["
operator|+
name|type
operator|+
literal|"::"
operator|+
name|call
operator|+
literal|"] "
operator|+
literal|"to ["
operator|+
name|expected
operator|.
name|name
operator|+
literal|"], not a functional interface"
argument_list|)
throw|;
block|}
comment|// lookup requested method
name|Definition
operator|.
name|Struct
name|struct
init|=
name|Definition
operator|.
name|getType
argument_list|(
name|type
argument_list|)
operator|.
name|struct
decl_stmt|;
specifier|final
name|Definition
operator|.
name|Method
name|impl
decl_stmt|;
comment|// ctor ref
if|if
condition|(
literal|"new"
operator|.
name|equals
argument_list|(
name|call
argument_list|)
condition|)
block|{
name|impl
operator|=
name|struct
operator|.
name|constructors
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"<init>"
argument_list|,
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// look for a static impl first
name|Definition
operator|.
name|Method
name|staticImpl
init|=
name|struct
operator|.
name|staticMethods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
name|call
argument_list|,
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|staticImpl
operator|==
literal|null
condition|)
block|{
comment|// otherwise a virtual impl
specifier|final
name|int
name|arity
decl_stmt|;
if|if
condition|(
name|receiverCaptured
condition|)
block|{
comment|// receiver captured
name|arity
operator|=
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// receiver passed
name|arity
operator|=
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|impl
operator|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
name|call
argument_list|,
name|arity
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|impl
operator|=
name|staticImpl
expr_stmt|;
block|}
block|}
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown reference ["
operator|+
name|type
operator|+
literal|"::"
operator|+
name|call
operator|+
literal|"] matching "
operator|+
literal|"["
operator|+
name|expected
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|impl
return|;
block|}
comment|/** Returns true if you should ask LambdaMetaFactory to construct a bridge for the interface signature */
DECL|method|needsBridges
specifier|public
name|boolean
name|needsBridges
parameter_list|()
block|{
comment|// currently if the interface differs, we ask for a bridge, but maybe we should do smarter checking?
comment|// either way, stuff will fail if its wrong :)
return|return
name|interfaceMethodType
operator|.
name|equals
argument_list|(
name|samMethodType
argument_list|)
operator|==
literal|false
return|;
block|}
block|}
end_class

end_unit

