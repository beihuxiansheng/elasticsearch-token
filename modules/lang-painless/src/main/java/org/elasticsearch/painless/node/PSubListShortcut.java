begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Locals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Represents a list load/store shortcut.  (Internal only.)  */
end_comment

begin_class
DECL|class|PSubListShortcut
specifier|final
class|class
name|PSubListShortcut
extends|extends
name|AStoreable
block|{
DECL|field|struct
specifier|private
specifier|final
name|Struct
name|struct
decl_stmt|;
DECL|field|index
specifier|private
name|AExpression
name|index
decl_stmt|;
DECL|field|getter
specifier|private
name|Method
name|getter
decl_stmt|;
DECL|field|setter
specifier|private
name|Method
name|setter
decl_stmt|;
DECL|method|PSubListShortcut
name|PSubListShortcut
parameter_list|(
name|Location
name|location
parameter_list|,
name|Struct
name|struct
parameter_list|,
name|AExpression
name|index
parameter_list|)
block|{
name|super
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|struct
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractVariables
name|void
name|extractVariables
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|variables
parameter_list|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal tree structure."
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|void
name|analyze
parameter_list|(
name|Locals
name|locals
parameter_list|)
block|{
name|getter
operator|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"get"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|setter
operator|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"set"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
operator|(
name|getter
operator|.
name|rtn
operator|.
name|sort
operator|==
name|Sort
operator|.
name|VOID
operator|||
name|getter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|getter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|INT
operator|)
condition|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal list get shortcut for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
operator|(
name|setter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|||
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|INT
operator|)
condition|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal list set shortcut for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
name|setter
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|getter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|getter
operator|.
name|rtn
operator|.
name|equals
argument_list|(
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Shortcut argument types must match."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|read
operator|||
name|write
operator|)
operator|&&
operator|(
operator|!
name|read
operator|||
name|getter
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|write
operator|||
name|setter
operator|!=
literal|null
operator|)
condition|)
block|{
name|index
operator|.
name|expected
operator|=
name|Definition
operator|.
name|INT_TYPE
expr_stmt|;
name|index
operator|.
name|analyze
argument_list|(
name|locals
argument_list|)
expr_stmt|;
name|index
operator|=
name|index
operator|.
name|cast
argument_list|(
name|locals
argument_list|)
expr_stmt|;
name|actual
operator|=
name|setter
operator|!=
literal|null
condition|?
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
else|:
name|getter
operator|.
name|rtn
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|createError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal list shortcut for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
name|setup
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accessElementCount
name|int
name|accessElementCount
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
DECL|method|isDefOptimized
name|boolean
name|isDefOptimized
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|updateActual
name|void
name|updateActual
parameter_list|(
name|Type
name|actual
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal tree structure."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setup
name|void
name|setup
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
name|index
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|globals
argument_list|)
expr_stmt|;
name|writeIndexFlip
argument_list|(
name|writer
argument_list|,
name|w
lambda|->
block|{
name|w
operator|.
name|invokeInterface
argument_list|(
name|WriterConstants
operator|.
name|COLLECTION_TYPE
argument_list|,
name|WriterConstants
operator|.
name|COLLECTION_SIZE
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
name|void
name|load
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
name|writer
operator|.
name|writeDebugInfo
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|getter
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getter
operator|.
name|rtn
operator|.
name|clazz
operator|.
name|equals
argument_list|(
name|getter
operator|.
name|handle
operator|.
name|type
argument_list|()
operator|.
name|returnType
argument_list|()
argument_list|)
condition|)
block|{
name|writer
operator|.
name|checkCast
argument_list|(
name|getter
operator|.
name|rtn
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|store
name|void
name|store
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
name|writer
operator|.
name|writeDebugInfo
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|setter
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writePop
argument_list|(
name|setter
operator|.
name|rtn
operator|.
name|sort
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|singleLineToString
argument_list|(
name|prefix
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

