begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|AnalyzerCaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|MethodKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|FunctionRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Locals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|VOID_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|WriterConstants
operator|.
name|LAMBDA_BOOTSTRAP_HANDLE
import|;
end_import

begin_comment
comment|/**  * Represents a function reference.  */
end_comment

begin_class
DECL|class|EFunctionRef
specifier|public
specifier|final
class|class
name|EFunctionRef
extends|extends
name|AExpression
implements|implements
name|ILambda
block|{
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|call
specifier|private
specifier|final
name|String
name|call
decl_stmt|;
DECL|field|ref
specifier|private
name|FunctionRef
name|ref
decl_stmt|;
DECL|field|defPointer
specifier|private
name|String
name|defPointer
decl_stmt|;
DECL|method|EFunctionRef
specifier|public
name|EFunctionRef
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|call
parameter_list|)
block|{
name|super
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|call
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractVariables
name|void
name|extractVariables
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|variables
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|analyze
name|void
name|analyze
parameter_list|(
name|Locals
name|locals
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
literal|null
expr_stmt|;
name|actual
operator|=
name|locals
operator|.
name|getDefinition
argument_list|()
operator|.
name|getType
argument_list|(
literal|"String"
argument_list|)
expr_stmt|;
name|defPointer
operator|=
literal|"S"
operator|+
name|type
operator|+
literal|"."
operator|+
name|call
operator|+
literal|",0"
expr_stmt|;
block|}
else|else
block|{
name|defPointer
operator|=
literal|null
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|"this"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// user's own function
name|Method
name|interfaceMethod
init|=
name|expected
operator|.
name|struct
operator|.
name|getFunctionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|interfaceMethod
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert function reference ["
operator|+
name|type
operator|+
literal|"::"
operator|+
name|call
operator|+
literal|"] "
operator|+
literal|"to ["
operator|+
name|expected
operator|.
name|name
operator|+
literal|"], not a functional interface"
argument_list|)
throw|;
block|}
name|Method
name|delegateMethod
init|=
name|locals
operator|.
name|getMethod
argument_list|(
operator|new
name|MethodKey
argument_list|(
name|call
argument_list|,
name|interfaceMethod
operator|.
name|arguments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|delegateMethod
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert function reference ["
operator|+
name|type
operator|+
literal|"::"
operator|+
name|call
operator|+
literal|"] "
operator|+
literal|"to ["
operator|+
name|expected
operator|.
name|name
operator|+
literal|"], function not found"
argument_list|)
throw|;
block|}
name|ref
operator|=
operator|new
name|FunctionRef
argument_list|(
name|expected
argument_list|,
name|interfaceMethod
argument_list|,
name|delegateMethod
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check casts between the interface method and the delegate method are legal
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaceMethod
operator|.
name|arguments
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Definition
operator|.
name|Type
name|from
init|=
name|interfaceMethod
operator|.
name|arguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Definition
operator|.
name|Type
name|to
init|=
name|delegateMethod
operator|.
name|arguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|AnalyzerCaster
operator|.
name|getLegalCast
argument_list|(
name|location
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|interfaceMethod
operator|.
name|rtn
operator|!=
name|VOID_TYPE
condition|)
block|{
name|AnalyzerCaster
operator|.
name|getLegalCast
argument_list|(
name|location
argument_list|,
name|delegateMethod
operator|.
name|rtn
argument_list|,
name|interfaceMethod
operator|.
name|rtn
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// whitelist lookup
name|ref
operator|=
operator|new
name|FunctionRef
argument_list|(
name|locals
operator|.
name|getDefinition
argument_list|()
argument_list|,
name|expected
argument_list|,
name|type
argument_list|,
name|call
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|createError
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|actual
operator|=
name|expected
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|MethodWriter
name|writer
parameter_list|,
name|Globals
name|globals
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeDebugInfo
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|writer
operator|.
name|invokeDynamic
argument_list|(
name|ref
operator|.
name|interfaceMethodName
argument_list|,
name|ref
operator|.
name|factoryDescriptor
argument_list|,
name|LAMBDA_BOOTSTRAP_HANDLE
argument_list|,
name|ref
operator|.
name|interfaceType
argument_list|,
name|ref
operator|.
name|delegateClassName
argument_list|,
name|ref
operator|.
name|delegateInvokeType
argument_list|,
name|ref
operator|.
name|delegateMethodName
argument_list|,
name|ref
operator|.
name|delegateType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: don't do this: its just to cutover :)
name|writer
operator|.
name|push
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPointer
specifier|public
name|String
name|getPointer
parameter_list|()
block|{
return|return
name|defPointer
return|;
block|}
annotation|@
name|Override
DECL|method|getCaptures
specifier|public
name|Type
index|[]
name|getCaptures
parameter_list|()
block|{
return|return
operator|new
name|Type
index|[
literal|0
index|]
return|;
comment|// no captures
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|singleLineToString
argument_list|(
name|type
argument_list|,
name|call
argument_list|)
return|;
block|}
block|}
end_class

end_unit

