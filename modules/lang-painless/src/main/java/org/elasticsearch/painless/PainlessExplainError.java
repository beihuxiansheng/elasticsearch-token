begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|api
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_comment
comment|/**  * Thrown by {@link Debug#explain(Object)} to explain an object. Subclass of {@linkplain Error} so it cannot be caught by painless  * scripts.  */
end_comment

begin_class
DECL|class|PainlessExplainError
specifier|public
class|class
name|PainlessExplainError
extends|extends
name|Error
block|{
DECL|field|objectToExplain
specifier|private
specifier|final
name|Object
name|objectToExplain
decl_stmt|;
DECL|method|PainlessExplainError
specifier|public
name|PainlessExplainError
parameter_list|(
name|Object
name|objectToExplain
parameter_list|)
block|{
name|this
operator|.
name|objectToExplain
operator|=
name|objectToExplain
expr_stmt|;
block|}
DECL|method|getObjectToExplain
name|Object
name|getObjectToExplain
parameter_list|()
block|{
return|return
name|objectToExplain
return|;
block|}
comment|/**      * Headers to be added to the {@link ScriptException} for structured rendering.      */
DECL|method|getHeaders
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getHeaders
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|toString
init|=
literal|"null"
decl_stmt|;
name|String
name|javaClassName
init|=
literal|null
decl_stmt|;
name|String
name|painlessClassName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|objectToExplain
operator|!=
literal|null
condition|)
block|{
name|toString
operator|=
name|objectToExplain
operator|.
name|toString
argument_list|()
expr_stmt|;
name|javaClassName
operator|=
name|objectToExplain
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Definition
operator|.
name|RuntimeClass
name|runtimeClass
init|=
name|Definition
operator|.
name|getRuntimeClass
argument_list|(
name|objectToExplain
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|runtimeClass
operator|!=
literal|null
condition|)
block|{
name|painlessClassName
operator|=
name|runtimeClass
operator|.
name|getStruct
argument_list|()
operator|.
name|name
expr_stmt|;
block|}
block|}
name|headers
operator|.
name|put
argument_list|(
literal|"es.to_string"
argument_list|,
name|singletonList
argument_list|(
name|toString
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|painlessClassName
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"es.painless_class"
argument_list|,
name|singletonList
argument_list|(
name|painlessClassName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|javaClassName
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"es.java_class"
argument_list|,
name|singletonList
argument_list|(
name|javaClassName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
block|}
end_class

end_unit

