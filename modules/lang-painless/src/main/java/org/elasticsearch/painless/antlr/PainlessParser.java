begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// ANTLR GENERATED CODE: DO NOT EDIT
end_comment

begin_package
DECL|package|org.elasticsearch.painless.antlr
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|dfa
operator|.
name|DFA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"all"
block|,
literal|"warnings"
block|,
literal|"unchecked"
block|,
literal|"unused"
block|,
literal|"cast"
block|}
argument_list|)
DECL|class|PainlessParser
class|class
name|PainlessParser
extends|extends
name|Parser
block|{
static|static
block|{
name|RuntimeMetaData
operator|.
name|checkVersion
argument_list|(
literal|"4.5.1"
argument_list|,
name|RuntimeMetaData
operator|.
name|VERSION
argument_list|)
expr_stmt|;
block|}
DECL|field|_decisionToDFA
specifier|protected
specifier|static
specifier|final
name|DFA
index|[]
name|_decisionToDFA
decl_stmt|;
DECL|field|_sharedContextCache
specifier|protected
specifier|static
specifier|final
name|PredictionContextCache
name|_sharedContextCache
init|=
operator|new
name|PredictionContextCache
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|WS
DECL|field|COMMENT
DECL|field|LBRACK
DECL|field|RBRACK
DECL|field|LBRACE
DECL|field|RBRACE
DECL|field|LP
DECL|field|RP
DECL|field|DOT
name|WS
init|=
literal|1
decl_stmt|,
name|COMMENT
init|=
literal|2
decl_stmt|,
name|LBRACK
init|=
literal|3
decl_stmt|,
name|RBRACK
init|=
literal|4
decl_stmt|,
name|LBRACE
init|=
literal|5
decl_stmt|,
name|RBRACE
init|=
literal|6
decl_stmt|,
name|LP
init|=
literal|7
decl_stmt|,
name|RP
init|=
literal|8
decl_stmt|,
name|DOT
init|=
literal|9
decl_stmt|,
DECL|field|COMMA
DECL|field|SEMICOLON
DECL|field|IF
DECL|field|ELSE
DECL|field|WHILE
DECL|field|DO
DECL|field|FOR
DECL|field|CONTINUE
name|COMMA
init|=
literal|10
decl_stmt|,
name|SEMICOLON
init|=
literal|11
decl_stmt|,
name|IF
init|=
literal|12
decl_stmt|,
name|ELSE
init|=
literal|13
decl_stmt|,
name|WHILE
init|=
literal|14
decl_stmt|,
name|DO
init|=
literal|15
decl_stmt|,
name|FOR
init|=
literal|16
decl_stmt|,
name|CONTINUE
init|=
literal|17
decl_stmt|,
DECL|field|BREAK
DECL|field|RETURN
DECL|field|NEW
DECL|field|TRY
DECL|field|CATCH
DECL|field|THROW
DECL|field|BOOLNOT
DECL|field|BWNOT
name|BREAK
init|=
literal|18
decl_stmt|,
name|RETURN
init|=
literal|19
decl_stmt|,
name|NEW
init|=
literal|20
decl_stmt|,
name|TRY
init|=
literal|21
decl_stmt|,
name|CATCH
init|=
literal|22
decl_stmt|,
name|THROW
init|=
literal|23
decl_stmt|,
name|BOOLNOT
init|=
literal|24
decl_stmt|,
name|BWNOT
init|=
literal|25
decl_stmt|,
DECL|field|MUL
DECL|field|DIV
DECL|field|REM
DECL|field|ADD
DECL|field|SUB
DECL|field|LSH
DECL|field|RSH
DECL|field|USH
DECL|field|LT
name|MUL
init|=
literal|26
decl_stmt|,
name|DIV
init|=
literal|27
decl_stmt|,
name|REM
init|=
literal|28
decl_stmt|,
name|ADD
init|=
literal|29
decl_stmt|,
name|SUB
init|=
literal|30
decl_stmt|,
name|LSH
init|=
literal|31
decl_stmt|,
name|RSH
init|=
literal|32
decl_stmt|,
name|USH
init|=
literal|33
decl_stmt|,
name|LT
init|=
literal|34
decl_stmt|,
DECL|field|LTE
DECL|field|GT
DECL|field|GTE
DECL|field|EQ
DECL|field|EQR
DECL|field|NE
DECL|field|NER
DECL|field|BWAND
DECL|field|XOR
name|LTE
init|=
literal|35
decl_stmt|,
name|GT
init|=
literal|36
decl_stmt|,
name|GTE
init|=
literal|37
decl_stmt|,
name|EQ
init|=
literal|38
decl_stmt|,
name|EQR
init|=
literal|39
decl_stmt|,
name|NE
init|=
literal|40
decl_stmt|,
name|NER
init|=
literal|41
decl_stmt|,
name|BWAND
init|=
literal|42
decl_stmt|,
name|XOR
init|=
literal|43
decl_stmt|,
DECL|field|BWOR
DECL|field|BOOLAND
DECL|field|BOOLOR
DECL|field|COND
DECL|field|COLON
DECL|field|REF
DECL|field|ARROW
DECL|field|INCR
name|BWOR
init|=
literal|44
decl_stmt|,
name|BOOLAND
init|=
literal|45
decl_stmt|,
name|BOOLOR
init|=
literal|46
decl_stmt|,
name|COND
init|=
literal|47
decl_stmt|,
name|COLON
init|=
literal|48
decl_stmt|,
name|REF
init|=
literal|49
decl_stmt|,
name|ARROW
init|=
literal|50
decl_stmt|,
name|INCR
init|=
literal|51
decl_stmt|,
DECL|field|DECR
DECL|field|ASSIGN
DECL|field|AADD
DECL|field|ASUB
DECL|field|AMUL
DECL|field|ADIV
DECL|field|AREM
DECL|field|AAND
name|DECR
init|=
literal|52
decl_stmt|,
name|ASSIGN
init|=
literal|53
decl_stmt|,
name|AADD
init|=
literal|54
decl_stmt|,
name|ASUB
init|=
literal|55
decl_stmt|,
name|AMUL
init|=
literal|56
decl_stmt|,
name|ADIV
init|=
literal|57
decl_stmt|,
name|AREM
init|=
literal|58
decl_stmt|,
name|AAND
init|=
literal|59
decl_stmt|,
DECL|field|AXOR
DECL|field|AOR
DECL|field|ALSH
DECL|field|ARSH
DECL|field|AUSH
DECL|field|OCTAL
DECL|field|HEX
DECL|field|INTEGER
name|AXOR
init|=
literal|60
decl_stmt|,
name|AOR
init|=
literal|61
decl_stmt|,
name|ALSH
init|=
literal|62
decl_stmt|,
name|ARSH
init|=
literal|63
decl_stmt|,
name|AUSH
init|=
literal|64
decl_stmt|,
name|OCTAL
init|=
literal|65
decl_stmt|,
name|HEX
init|=
literal|66
decl_stmt|,
name|INTEGER
init|=
literal|67
decl_stmt|,
DECL|field|DECIMAL
DECL|field|STRING
DECL|field|TRUE
DECL|field|FALSE
DECL|field|NULL
DECL|field|TYPE
DECL|field|ID
DECL|field|DOTINTEGER
name|DECIMAL
init|=
literal|68
decl_stmt|,
name|STRING
init|=
literal|69
decl_stmt|,
name|TRUE
init|=
literal|70
decl_stmt|,
name|FALSE
init|=
literal|71
decl_stmt|,
name|NULL
init|=
literal|72
decl_stmt|,
name|TYPE
init|=
literal|73
decl_stmt|,
name|ID
init|=
literal|74
decl_stmt|,
name|DOTINTEGER
init|=
literal|75
decl_stmt|,
DECL|field|DOTID
name|DOTID
init|=
literal|76
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|RULE_source
DECL|field|RULE_function
DECL|field|RULE_parameters
DECL|field|RULE_statement
name|RULE_source
init|=
literal|0
decl_stmt|,
name|RULE_function
init|=
literal|1
decl_stmt|,
name|RULE_parameters
init|=
literal|2
decl_stmt|,
name|RULE_statement
init|=
literal|3
decl_stmt|,
DECL|field|RULE_trailer
DECL|field|RULE_block
DECL|field|RULE_empty
DECL|field|RULE_initializer
name|RULE_trailer
init|=
literal|4
decl_stmt|,
name|RULE_block
init|=
literal|5
decl_stmt|,
name|RULE_empty
init|=
literal|6
decl_stmt|,
name|RULE_initializer
init|=
literal|7
decl_stmt|,
DECL|field|RULE_afterthought
DECL|field|RULE_declaration
DECL|field|RULE_decltype
DECL|field|RULE_declvar
name|RULE_afterthought
init|=
literal|8
decl_stmt|,
name|RULE_declaration
init|=
literal|9
decl_stmt|,
name|RULE_decltype
init|=
literal|10
decl_stmt|,
name|RULE_declvar
init|=
literal|11
decl_stmt|,
DECL|field|RULE_trap
DECL|field|RULE_delimiter
DECL|field|RULE_expression
DECL|field|RULE_unary
name|RULE_trap
init|=
literal|12
decl_stmt|,
name|RULE_delimiter
init|=
literal|13
decl_stmt|,
name|RULE_expression
init|=
literal|14
decl_stmt|,
name|RULE_unary
init|=
literal|15
decl_stmt|,
DECL|field|RULE_chain
DECL|field|RULE_primary
DECL|field|RULE_secondary
DECL|field|RULE_dot
name|RULE_chain
init|=
literal|16
decl_stmt|,
name|RULE_primary
init|=
literal|17
decl_stmt|,
name|RULE_secondary
init|=
literal|18
decl_stmt|,
name|RULE_dot
init|=
literal|19
decl_stmt|,
DECL|field|RULE_brace
DECL|field|RULE_arguments
DECL|field|RULE_argument
DECL|field|RULE_lambda
name|RULE_brace
init|=
literal|20
decl_stmt|,
name|RULE_arguments
init|=
literal|21
decl_stmt|,
name|RULE_argument
init|=
literal|22
decl_stmt|,
name|RULE_lambda
init|=
literal|23
decl_stmt|,
DECL|field|RULE_lamtype
DECL|field|RULE_funcref
name|RULE_lamtype
init|=
literal|24
decl_stmt|,
name|RULE_funcref
init|=
literal|25
decl_stmt|;
DECL|field|ruleNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ruleNames
init|=
block|{
literal|"source"
block|,
literal|"function"
block|,
literal|"parameters"
block|,
literal|"statement"
block|,
literal|"trailer"
block|,
literal|"block"
block|,
literal|"empty"
block|,
literal|"initializer"
block|,
literal|"afterthought"
block|,
literal|"declaration"
block|,
literal|"decltype"
block|,
literal|"declvar"
block|,
literal|"trap"
block|,
literal|"delimiter"
block|,
literal|"expression"
block|,
literal|"unary"
block|,
literal|"chain"
block|,
literal|"primary"
block|,
literal|"secondary"
block|,
literal|"dot"
block|,
literal|"brace"
block|,
literal|"arguments"
block|,
literal|"argument"
block|,
literal|"lambda"
block|,
literal|"lamtype"
block|,
literal|"funcref"
block|}
decl_stmt|;
DECL|field|_LITERAL_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|_LITERAL_NAMES
init|=
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|"'{'"
block|,
literal|"'}'"
block|,
literal|"'['"
block|,
literal|"']'"
block|,
literal|"'('"
block|,
literal|"')'"
block|,
literal|"'.'"
block|,
literal|"','"
block|,
literal|"';'"
block|,
literal|"'if'"
block|,
literal|"'else'"
block|,
literal|"'while'"
block|,
literal|"'do'"
block|,
literal|"'for'"
block|,
literal|"'continue'"
block|,
literal|"'break'"
block|,
literal|"'return'"
block|,
literal|"'new'"
block|,
literal|"'try'"
block|,
literal|"'catch'"
block|,
literal|"'throw'"
block|,
literal|"'!'"
block|,
literal|"'~'"
block|,
literal|"'*'"
block|,
literal|"'/'"
block|,
literal|"'%'"
block|,
literal|"'+'"
block|,
literal|"'-'"
block|,
literal|"'<<'"
block|,
literal|"'>>'"
block|,
literal|"'>>>'"
block|,
literal|"'<'"
block|,
literal|"'<='"
block|,
literal|"'>'"
block|,
literal|"'>='"
block|,
literal|"'=='"
block|,
literal|"'==='"
block|,
literal|"'!='"
block|,
literal|"'!=='"
block|,
literal|"'&'"
block|,
literal|"'^'"
block|,
literal|"'|'"
block|,
literal|"'&&'"
block|,
literal|"'||'"
block|,
literal|"'?'"
block|,
literal|"':'"
block|,
literal|"'::'"
block|,
literal|"'->'"
block|,
literal|"'++'"
block|,
literal|"'--'"
block|,
literal|"'='"
block|,
literal|"'+='"
block|,
literal|"'-='"
block|,
literal|"'*='"
block|,
literal|"'/='"
block|,
literal|"'%='"
block|,
literal|"'&='"
block|,
literal|"'^='"
block|,
literal|"'|='"
block|,
literal|"'<<='"
block|,
literal|"'>>='"
block|,
literal|"'>>>='"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|"'true'"
block|,
literal|"'false'"
block|,
literal|"'null'"
block|}
decl_stmt|;
DECL|field|_SYMBOLIC_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|_SYMBOLIC_NAMES
init|=
block|{
literal|null
block|,
literal|"WS"
block|,
literal|"COMMENT"
block|,
literal|"LBRACK"
block|,
literal|"RBRACK"
block|,
literal|"LBRACE"
block|,
literal|"RBRACE"
block|,
literal|"LP"
block|,
literal|"RP"
block|,
literal|"DOT"
block|,
literal|"COMMA"
block|,
literal|"SEMICOLON"
block|,
literal|"IF"
block|,
literal|"ELSE"
block|,
literal|"WHILE"
block|,
literal|"DO"
block|,
literal|"FOR"
block|,
literal|"CONTINUE"
block|,
literal|"BREAK"
block|,
literal|"RETURN"
block|,
literal|"NEW"
block|,
literal|"TRY"
block|,
literal|"CATCH"
block|,
literal|"THROW"
block|,
literal|"BOOLNOT"
block|,
literal|"BWNOT"
block|,
literal|"MUL"
block|,
literal|"DIV"
block|,
literal|"REM"
block|,
literal|"ADD"
block|,
literal|"SUB"
block|,
literal|"LSH"
block|,
literal|"RSH"
block|,
literal|"USH"
block|,
literal|"LT"
block|,
literal|"LTE"
block|,
literal|"GT"
block|,
literal|"GTE"
block|,
literal|"EQ"
block|,
literal|"EQR"
block|,
literal|"NE"
block|,
literal|"NER"
block|,
literal|"BWAND"
block|,
literal|"XOR"
block|,
literal|"BWOR"
block|,
literal|"BOOLAND"
block|,
literal|"BOOLOR"
block|,
literal|"COND"
block|,
literal|"COLON"
block|,
literal|"REF"
block|,
literal|"ARROW"
block|,
literal|"INCR"
block|,
literal|"DECR"
block|,
literal|"ASSIGN"
block|,
literal|"AADD"
block|,
literal|"ASUB"
block|,
literal|"AMUL"
block|,
literal|"ADIV"
block|,
literal|"AREM"
block|,
literal|"AAND"
block|,
literal|"AXOR"
block|,
literal|"AOR"
block|,
literal|"ALSH"
block|,
literal|"ARSH"
block|,
literal|"AUSH"
block|,
literal|"OCTAL"
block|,
literal|"HEX"
block|,
literal|"INTEGER"
block|,
literal|"DECIMAL"
block|,
literal|"STRING"
block|,
literal|"TRUE"
block|,
literal|"FALSE"
block|,
literal|"NULL"
block|,
literal|"TYPE"
block|,
literal|"ID"
block|,
literal|"DOTINTEGER"
block|,
literal|"DOTID"
block|}
decl_stmt|;
DECL|field|VOCABULARY
specifier|public
specifier|static
specifier|final
name|Vocabulary
name|VOCABULARY
init|=
operator|new
name|VocabularyImpl
argument_list|(
name|_LITERAL_NAMES
argument_list|,
name|_SYMBOLIC_NAMES
argument_list|)
decl_stmt|;
comment|/**    * @deprecated Use {@link #VOCABULARY} instead.    */
annotation|@
name|Deprecated
DECL|field|tokenNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|tokenNames
decl_stmt|;
static|static
block|{
name|tokenNames
operator|=
operator|new
name|String
index|[
name|_SYMBOLIC_NAMES
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokenNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tokenNames
index|[
name|i
index|]
operator|=
name|VOCABULARY
operator|.
name|getLiteralName
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenNames
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|tokenNames
index|[
name|i
index|]
operator|=
name|VOCABULARY
operator|.
name|getSymbolicName
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenNames
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|tokenNames
index|[
name|i
index|]
operator|=
literal|"<INVALID>"
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|getTokenNames
specifier|public
name|String
index|[]
name|getTokenNames
parameter_list|()
block|{
return|return
name|tokenNames
return|;
block|}
annotation|@
name|Override
DECL|method|getVocabulary
specifier|public
name|Vocabulary
name|getVocabulary
parameter_list|()
block|{
return|return
name|VOCABULARY
return|;
block|}
annotation|@
name|Override
DECL|method|getGrammarFileName
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"PainlessParser.g4"
return|;
block|}
annotation|@
name|Override
DECL|method|getRuleNames
specifier|public
name|String
index|[]
name|getRuleNames
parameter_list|()
block|{
return|return
name|ruleNames
return|;
block|}
annotation|@
name|Override
DECL|method|getSerializedATN
specifier|public
name|String
name|getSerializedATN
parameter_list|()
block|{
return|return
name|_serializedATN
return|;
block|}
annotation|@
name|Override
DECL|method|getATN
specifier|public
name|ATN
name|getATN
parameter_list|()
block|{
return|return
name|_ATN
return|;
block|}
DECL|method|PainlessParser
specifier|public
name|PainlessParser
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|_interp
operator|=
operator|new
name|ParserATNSimulator
argument_list|(
name|this
argument_list|,
name|_ATN
argument_list|,
name|_decisionToDFA
argument_list|,
name|_sharedContextCache
argument_list|)
expr_stmt|;
block|}
DECL|class|SourceContext
specifier|public
specifier|static
class|class
name|SourceContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|function
specifier|public
name|List
argument_list|<
name|FunctionContext
argument_list|>
name|function
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|FunctionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|function
specifier|public
name|FunctionContext
name|function
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|FunctionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statement
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|StatementContext
name|statement
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|SourceContext
specifier|public
name|SourceContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_source
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitSource
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|source
specifier|public
specifier|final
name|SourceContext
name|source
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|SourceContext
name|_localctx
init|=
operator|new
name|SourceContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|0
argument_list|,
name|RULE_source
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|0
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|52
argument_list|)
expr_stmt|;
name|function
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|57
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|0
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
name|setState
argument_list|(
literal|61
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|1
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|58
argument_list|)
expr_stmt|;
name|statement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|63
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|1
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
name|setState
argument_list|(
literal|64
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EOF
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|FunctionContext
specifier|public
specifier|static
class|class
name|FunctionContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|parameters
specifier|public
name|ParametersContext
name|parameters
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ParametersContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|FunctionContext
specifier|public
name|FunctionContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_function
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFunction
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|function
specifier|public
specifier|final
name|FunctionContext
name|function
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|FunctionContext
name|_localctx
init|=
operator|new
name|FunctionContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|,
name|RULE_function
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|66
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|67
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|68
argument_list|)
expr_stmt|;
name|parameters
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|69
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ParametersContext
specifier|public
specifier|static
class|class
name|ParametersContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|decltype
specifier|public
name|List
argument_list|<
name|DecltypeContext
argument_list|>
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|ID
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|COMMA
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|TerminalNode
name|COMMA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|ParametersContext
specifier|public
name|ParametersContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_parameters
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitParameters
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|parameters
specifier|public
specifier|final
name|ParametersContext
name|parameters
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|ParametersContext
name|_localctx
init|=
operator|new
name|ParametersContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|,
name|RULE_parameters
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|71
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|83
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|_la
operator|==
name|TYPE
condition|)
block|{
block|{
name|setState
argument_list|(
literal|72
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|73
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|COMMA
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|74
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|75
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|76
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|82
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|85
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|StatementContext
specifier|public
specifier|static
class|class
name|StatementContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|StatementContext
specifier|public
name|StatementContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_statement
return|;
block|}
DECL|method|StatementContext
specifier|public
name|StatementContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeclContext
specifier|public
specifier|static
class|class
name|DeclContext
extends|extends
name|StatementContext
block|{
DECL|method|declaration
specifier|public
name|DeclarationContext
name|declaration
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DeclarationContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DeclContext
specifier|public
name|DeclContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDecl
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|BreakContext
specifier|public
specifier|static
class|class
name|BreakContext
extends|extends
name|StatementContext
block|{
DECL|method|BREAK
specifier|public
name|TerminalNode
name|BREAK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BREAK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BreakContext
specifier|public
name|BreakContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBreak
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ThrowContext
specifier|public
specifier|static
class|class
name|ThrowContext
extends|extends
name|StatementContext
block|{
DECL|method|THROW
specifier|public
name|TerminalNode
name|THROW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|THROW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ThrowContext
specifier|public
name|ThrowContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitThrow
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ContinueContext
specifier|public
specifier|static
class|class
name|ContinueContext
extends|extends
name|StatementContext
block|{
DECL|method|CONTINUE
specifier|public
name|TerminalNode
name|CONTINUE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|CONTINUE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ContinueContext
specifier|public
name|ContinueContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitContinue
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ForContext
specifier|public
specifier|static
class|class
name|ForContext
extends|extends
name|StatementContext
block|{
DECL|method|FOR
specifier|public
name|TerminalNode
name|FOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|FOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|TrailerContext
name|trailer
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|empty
specifier|public
name|EmptyContext
name|empty
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|EmptyContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|initializer
specifier|public
name|InitializerContext
name|initializer
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|InitializerContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|afterthought
specifier|public
name|AfterthoughtContext
name|afterthought
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|AfterthoughtContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ForContext
specifier|public
name|ForContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFor
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|TryContext
specifier|public
specifier|static
class|class
name|TryContext
extends|extends
name|StatementContext
block|{
DECL|method|TRY
specifier|public
name|TerminalNode
name|TRY
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TRY
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trap
specifier|public
name|List
argument_list|<
name|TrapContext
argument_list|>
name|trap
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|TrapContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|trap
specifier|public
name|TrapContext
name|trap
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|TrapContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|TryContext
specifier|public
name|TryContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTry
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ExprContext
specifier|public
specifier|static
class|class
name|ExprContext
extends|extends
name|StatementContext
block|{
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ExprContext
specifier|public
name|ExprContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitExpr
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|DoContext
specifier|public
specifier|static
class|class
name|DoContext
extends|extends
name|StatementContext
block|{
DECL|method|DO
specifier|public
name|TerminalNode
name|DO
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DO
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|WHILE
specifier|public
name|TerminalNode
name|WHILE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|WHILE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DoContext
specifier|public
name|DoContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDo
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|WhileContext
specifier|public
specifier|static
class|class
name|WhileContext
extends|extends
name|StatementContext
block|{
DECL|method|WHILE
specifier|public
name|TerminalNode
name|WHILE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|WHILE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|TrailerContext
name|trailer
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|empty
specifier|public
name|EmptyContext
name|empty
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|EmptyContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|WhileContext
specifier|public
name|WhileContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitWhile
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|IfContext
specifier|public
specifier|static
class|class
name|IfContext
extends|extends
name|StatementContext
block|{
DECL|method|IF
specifier|public
name|TerminalNode
name|IF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|IF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|List
argument_list|<
name|TrailerContext
argument_list|>
name|trailer
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|TrailerContext
name|trailer
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|ELSE
specifier|public
name|TerminalNode
name|ELSE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ELSE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|IfContext
specifier|public
name|IfContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitIf
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|EachContext
specifier|public
specifier|static
class|class
name|EachContext
extends|extends
name|StatementContext
block|{
DECL|method|FOR
specifier|public
name|TerminalNode
name|FOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|FOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|COLON
specifier|public
name|TerminalNode
name|COLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|TrailerContext
name|trailer
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EachContext
specifier|public
name|EachContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitEach
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ReturnContext
specifier|public
specifier|static
class|class
name|ReturnContext
extends|extends
name|StatementContext
block|{
DECL|method|RETURN
specifier|public
name|TerminalNode
name|RETURN
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RETURN
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ReturnContext
specifier|public
name|ReturnContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitReturn
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|statement
specifier|public
specifier|final
name|StatementContext
name|statement
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|StatementContext
name|_localctx
init|=
operator|new
name|StatementContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|6
argument_list|,
name|RULE_statement
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|setState
argument_list|(
literal|165
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|11
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|IfContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|87
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|IF
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|88
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|89
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|91
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|95
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|4
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|92
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ELSE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|93
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|94
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|!=
name|ELSE
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" _input.LA(1) != ELSE "
argument_list|)
throw|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|WhileContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|97
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WHILE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|98
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|99
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|103
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|5
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|102
argument_list|)
expr_stmt|;
name|empty
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|3
case|:
name|_localctx
operator|=
operator|new
name|DoContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|105
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DO
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|106
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|107
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WHILE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|108
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|109
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|110
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|111
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
name|_localctx
operator|=
operator|new
name|ForContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|113
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|114
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|116
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|6
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|115
argument_list|)
expr_stmt|;
name|initializer
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
name|setState
argument_list|(
literal|118
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|120
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|7
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|119
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|setState
argument_list|(
literal|122
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|124
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|8
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|afterthought
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
name|setState
argument_list|(
literal|126
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|129
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|9
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|127
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|empty
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|5
case|:
name|_localctx
operator|=
operator|new
name|EachContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|131
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|132
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|133
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|134
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|135
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|136
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|137
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|138
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
name|_localctx
operator|=
operator|new
name|DeclContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|140
argument_list|)
expr_stmt|;
name|declaration
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|141
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
name|_localctx
operator|=
operator|new
name|ContinueContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|143
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONTINUE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|144
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
name|_localctx
operator|=
operator|new
name|BreakContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|145
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BREAK
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|146
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
name|_localctx
operator|=
operator|new
name|ReturnContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|147
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RETURN
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|148
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|149
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
name|_localctx
operator|=
operator|new
name|TryContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|151
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TRY
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|152
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|154
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
literal|1
expr_stmt|;
do|do
block|{
switch|switch
condition|(
name|_alt
condition|)
block|{
case|case
literal|1
case|:
block|{
block|{
name|setState
argument_list|(
literal|153
argument_list|)
expr_stmt|;
name|trap
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
name|setState
argument_list|(
literal|156
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|10
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
do|;
block|}
break|break;
case|case
literal|11
case|:
name|_localctx
operator|=
operator|new
name|ThrowContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|158
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|THROW
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|159
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|160
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
name|_localctx
operator|=
operator|new
name|ExprContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|162
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|163
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|TrailerContext
specifier|public
specifier|static
class|class
name|TrailerContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|StatementContext
name|statement
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TrailerContext
specifier|public
name|TrailerContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_trailer
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTrailer
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|trailer
specifier|public
specifier|final
name|TrailerContext
name|trailer
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|TrailerContext
name|_localctx
init|=
operator|new
name|TrailerContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|8
argument_list|,
name|RULE_trailer
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|169
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|12
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|167
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|168
argument_list|)
expr_stmt|;
name|statement
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|BlockContext
specifier|public
specifier|static
class|class
name|BlockContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LBRACK
specifier|public
name|TerminalNode
name|LBRACK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RBRACK
specifier|public
name|TerminalNode
name|RBRACK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statement
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|StatementContext
name|statement
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|BlockContext
specifier|public
name|BlockContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_block
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBlock
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|block
specifier|public
specifier|final
name|BlockContext
name|block
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BlockContext
name|_localctx
init|=
operator|new
name|BlockContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|10
argument_list|,
name|RULE_block
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|171
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACK
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|175
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|13
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|172
argument_list|)
expr_stmt|;
name|statement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|177
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|13
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
name|setState
argument_list|(
literal|178
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|EmptyContext
specifier|public
specifier|static
class|class
name|EmptyContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EmptyContext
specifier|public
name|EmptyContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_empty
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitEmpty
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|empty
specifier|public
specifier|final
name|EmptyContext
name|empty
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|EmptyContext
name|_localctx
init|=
operator|new
name|EmptyContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|12
argument_list|,
name|RULE_empty
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|InitializerContext
specifier|public
specifier|static
class|class
name|InitializerContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|declaration
specifier|public
name|DeclarationContext
name|declaration
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DeclarationContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|InitializerContext
specifier|public
name|InitializerContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_initializer
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitInitializer
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|initializer
specifier|public
specifier|final
name|InitializerContext
name|initializer
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|InitializerContext
name|_localctx
init|=
operator|new
name|InitializerContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|14
argument_list|,
name|RULE_initializer
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|184
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|14
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|182
argument_list|)
expr_stmt|;
name|declaration
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|183
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|AfterthoughtContext
specifier|public
specifier|static
class|class
name|AfterthoughtContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AfterthoughtContext
specifier|public
name|AfterthoughtContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_afterthought
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitAfterthought
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|afterthought
specifier|public
specifier|final
name|AfterthoughtContext
name|afterthought
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|AfterthoughtContext
name|_localctx
init|=
operator|new
name|AfterthoughtContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|16
argument_list|,
name|RULE_afterthought
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|186
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DeclarationContext
specifier|public
specifier|static
class|class
name|DeclarationContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|declvar
specifier|public
name|List
argument_list|<
name|DeclvarContext
argument_list|>
name|declvar
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|DeclvarContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|declvar
specifier|public
name|DeclvarContext
name|declvar
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|DeclvarContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|COMMA
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|TerminalNode
name|COMMA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|DeclarationContext
specifier|public
name|DeclarationContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_declaration
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDeclaration
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|declaration
specifier|public
specifier|final
name|DeclarationContext
name|declaration
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DeclarationContext
name|_localctx
init|=
operator|new
name|DeclarationContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|18
argument_list|,
name|RULE_declaration
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|188
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|189
argument_list|)
expr_stmt|;
name|declvar
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|194
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|COMMA
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|190
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|191
argument_list|)
expr_stmt|;
name|declvar
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|196
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DecltypeContext
specifier|public
specifier|static
class|class
name|DecltypeContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|LBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|TerminalNode
name|LBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|RBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|TerminalNode
name|RBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|DecltypeContext
specifier|public
name|DecltypeContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_decltype
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDecltype
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|decltype
specifier|public
specifier|final
name|DecltypeContext
name|decltype
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DecltypeContext
name|_localctx
init|=
operator|new
name|DecltypeContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|20
argument_list|,
name|RULE_decltype
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|197
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|202
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|LBRACE
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|198
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|199
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|204
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DeclvarContext
specifier|public
specifier|static
class|class
name|DeclvarContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ASSIGN
specifier|public
name|TerminalNode
name|ASSIGN
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ASSIGN
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DeclvarContext
specifier|public
name|DeclvarContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_declvar
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDeclvar
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|declvar
specifier|public
specifier|final
name|DeclvarContext
name|declvar
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DeclvarContext
name|_localctx
init|=
operator|new
name|DeclvarContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|22
argument_list|,
name|RULE_declvar
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|205
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|208
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|_la
operator|==
name|ASSIGN
condition|)
block|{
block|{
name|setState
argument_list|(
literal|206
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|207
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|TrapContext
specifier|public
specifier|static
class|class
name|TrapContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|CATCH
specifier|public
name|TerminalNode
name|CATCH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|CATCH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TrapContext
specifier|public
name|TrapContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_trap
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTrap
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|trap
specifier|public
specifier|final
name|TrapContext
name|trap
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|TrapContext
name|_localctx
init|=
operator|new
name|TrapContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|24
argument_list|,
name|RULE_trap
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|210
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CATCH
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|211
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|212
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|213
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|214
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|215
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DelimiterContext
specifier|public
specifier|static
class|class
name|DelimiterContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DelimiterContext
specifier|public
name|DelimiterContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_delimiter
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDelimiter
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|delimiter
specifier|public
specifier|final
name|DelimiterContext
name|delimiter
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DelimiterContext
name|_localctx
init|=
operator|new
name|DelimiterContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|26
argument_list|,
name|RULE_delimiter
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|217
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EOF
operator|||
name|_la
operator|==
name|SEMICOLON
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ExpressionContext
specifier|public
specifier|static
class|class
name|ExpressionContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|s
specifier|public
name|boolean
name|s
init|=
literal|true
decl_stmt|;
DECL|method|ExpressionContext
specifier|public
name|ExpressionContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_expression
return|;
block|}
DECL|method|ExpressionContext
specifier|public
name|ExpressionContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|ctx
operator|.
name|s
expr_stmt|;
block|}
block|}
DECL|class|SingleContext
specifier|public
specifier|static
class|class
name|SingleContext
extends|extends
name|ExpressionContext
block|{
DECL|field|u
specifier|public
name|UnaryContext
name|u
decl_stmt|;
DECL|method|unary
specifier|public
name|UnaryContext
name|unary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|UnaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SingleContext
specifier|public
name|SingleContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitSingle
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|CompContext
specifier|public
specifier|static
class|class
name|CompContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|LT
specifier|public
name|TerminalNode
name|LT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LTE
specifier|public
name|TerminalNode
name|LTE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LTE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|GT
specifier|public
name|TerminalNode
name|GT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|GT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|GTE
specifier|public
name|TerminalNode
name|GTE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|GTE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EQ
specifier|public
name|TerminalNode
name|EQ
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EQ
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EQR
specifier|public
name|TerminalNode
name|EQR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EQR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NE
specifier|public
name|TerminalNode
name|NE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NER
specifier|public
name|TerminalNode
name|NER
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NER
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|CompContext
specifier|public
name|CompContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitComp
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|BoolContext
specifier|public
specifier|static
class|class
name|BoolContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|BOOLAND
specifier|public
name|TerminalNode
name|BOOLAND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BOOLAND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BOOLOR
specifier|public
name|TerminalNode
name|BOOLOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BOOLOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BoolContext
specifier|public
name|BoolContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBool
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ConditionalContext
specifier|public
specifier|static
class|class
name|ConditionalContext
extends|extends
name|ExpressionContext
block|{
DECL|field|e0
specifier|public
name|ExpressionContext
name|e0
decl_stmt|;
DECL|field|e1
specifier|public
name|ExpressionContext
name|e1
decl_stmt|;
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COND
specifier|public
name|TerminalNode
name|COND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|COLON
specifier|public
name|TerminalNode
name|COLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ConditionalContext
specifier|public
name|ConditionalContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitConditional
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|AssignmentContext
specifier|public
specifier|static
class|class
name|AssignmentContext
extends|extends
name|ExpressionContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ASSIGN
specifier|public
name|TerminalNode
name|ASSIGN
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ASSIGN
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AADD
specifier|public
name|TerminalNode
name|AADD
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AADD
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ASUB
specifier|public
name|TerminalNode
name|ASUB
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ASUB
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AMUL
specifier|public
name|TerminalNode
name|AMUL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AMUL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ADIV
specifier|public
name|TerminalNode
name|ADIV
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ADIV
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AREM
specifier|public
name|TerminalNode
name|AREM
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AREM
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AAND
specifier|public
name|TerminalNode
name|AAND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AAND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AXOR
specifier|public
name|TerminalNode
name|AXOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AXOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AOR
specifier|public
name|TerminalNode
name|AOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ALSH
specifier|public
name|TerminalNode
name|ALSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ALSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ARSH
specifier|public
name|TerminalNode
name|ARSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ARSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AUSH
specifier|public
name|TerminalNode
name|AUSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AUSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AssignmentContext
specifier|public
name|AssignmentContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitAssignment
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|BinaryContext
specifier|public
specifier|static
class|class
name|BinaryContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|MUL
specifier|public
name|TerminalNode
name|MUL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|MUL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DIV
specifier|public
name|TerminalNode
name|DIV
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DIV
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|REM
specifier|public
name|TerminalNode
name|REM
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|REM
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ADD
specifier|public
name|TerminalNode
name|ADD
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ADD
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SUB
specifier|public
name|TerminalNode
name|SUB
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SUB
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LSH
specifier|public
name|TerminalNode
name|LSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RSH
specifier|public
name|TerminalNode
name|RSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|USH
specifier|public
name|TerminalNode
name|USH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|USH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BWAND
specifier|public
name|TerminalNode
name|BWAND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BWAND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|XOR
specifier|public
name|TerminalNode
name|XOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|XOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BWOR
specifier|public
name|TerminalNode
name|BWOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BWOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BinaryContext
specifier|public
name|BinaryContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBinary
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|expression
specifier|public
specifier|final
name|ExpressionContext
name|expression
parameter_list|()
throws|throws
name|RecognitionException
block|{
return|return
name|expression
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|private
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|_p
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|ParserRuleContext
name|_parentctx
init|=
name|_ctx
decl_stmt|;
name|int
name|_parentState
init|=
name|getState
argument_list|()
decl_stmt|;
name|ExpressionContext
name|_localctx
init|=
operator|new
name|ExpressionContext
argument_list|(
name|_ctx
argument_list|,
name|_parentState
argument_list|)
decl_stmt|;
name|ExpressionContext
name|_prevctx
init|=
name|_localctx
decl_stmt|;
name|int
name|_startState
init|=
literal|28
decl_stmt|;
name|enterRecursionRule
argument_list|(
name|_localctx
argument_list|,
literal|28
argument_list|,
name|RULE_expression
argument_list|,
name|_p
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|228
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|18
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|_localctx
operator|=
operator|new
name|AssignmentContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|220
argument_list|)
expr_stmt|;
name|chain
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|221
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|53
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|53
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|ASSIGN
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|AADD
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ASUB
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|AMUL
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ADIV
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|AREM
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|AAND
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|AXOR
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|AOR
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ALSH
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ARSH
operator|-
literal|53
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|AUSH
operator|-
literal|53
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|222
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AssignmentContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|_localctx
operator|=
operator|new
name|SingleContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|225
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SingleContext
operator|)
name|_localctx
operator|)
operator|.
name|u
operator|=
name|unary
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SingleContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
operator|(
operator|(
name|SingleContext
operator|)
name|_localctx
operator|)
operator|.
name|u
operator|.
name|s
expr_stmt|;
block|}
break|break;
block|}
name|_ctx
operator|.
name|stop
operator|=
name|_input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|289
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|20
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|_parseListeners
operator|!=
literal|null
condition|)
name|triggerExitRuleEvent
argument_list|()
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
block|{
name|setState
argument_list|(
literal|287
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|19
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|230
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|12
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 12)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|231
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|MUL
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DIV
operator|)
operator||
operator|(
literal|1L
operator|<<
name|REM
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|232
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|13
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|235
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|11
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 11)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|236
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|ADD
operator|||
name|_la
operator|==
name|SUB
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|237
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|12
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|240
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|10
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 10)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|241
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|RSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|USH
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|242
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|11
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
block|{
name|_localctx
operator|=
operator|new
name|CompContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|245
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|9
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 9)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|246
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|LTE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|GT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|GTE
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|247
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|10
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
block|{
name|_localctx
operator|=
operator|new
name|CompContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|250
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|8
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 8)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|251
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|EQ
operator|)
operator||
operator|(
literal|1L
operator|<<
name|EQR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NER
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|252
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|9
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|255
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|7
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 7)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BWAND
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|257
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|8
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|260
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|6
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 6)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|261
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|262
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|7
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|265
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|5
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 5)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|266
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BWOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|267
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|6
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
block|{
name|_localctx
operator|=
operator|new
name|BoolContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|270
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|4
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 4)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|271
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BOOLAND
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|272
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|5
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BoolContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
block|{
name|_localctx
operator|=
operator|new
name|BoolContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|275
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|3
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 3)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|276
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BOOLOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|277
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|4
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BoolContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
block|{
name|_localctx
operator|=
operator|new
name|ConditionalContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|280
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|2
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 2)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|281
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COND
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|282
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|e0
operator|=
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|283
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|284
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|e1
operator|=
name|expression
argument_list|(
literal|2
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|e0
operator|.
name|s
operator|&&
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|e1
operator|.
name|s
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
name|setState
argument_list|(
literal|291
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|20
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unrollRecursionContexts
argument_list|(
name|_parentctx
argument_list|)
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|UnaryContext
specifier|public
specifier|static
class|class
name|UnaryContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|c
specifier|public
name|boolean
name|c
decl_stmt|;
DECL|field|s
specifier|public
name|boolean
name|s
init|=
literal|true
decl_stmt|;
DECL|method|UnaryContext
specifier|public
name|UnaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|UnaryContext
specifier|public
name|UnaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|,
name|boolean
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_unary
return|;
block|}
DECL|method|UnaryContext
specifier|public
name|UnaryContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|ctx
operator|.
name|c
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|ctx
operator|.
name|s
expr_stmt|;
block|}
block|}
DECL|class|CastContext
specifier|public
specifier|static
class|class
name|CastContext
extends|extends
name|UnaryContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|unary
specifier|public
name|UnaryContext
name|unary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|UnaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|CastContext
specifier|public
name|CastContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitCast
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|PreContext
specifier|public
specifier|static
class|class
name|PreContext
extends|extends
name|UnaryContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|INCR
specifier|public
name|TerminalNode
name|INCR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|INCR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DECR
specifier|public
name|TerminalNode
name|DECR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DECR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|PreContext
specifier|public
name|PreContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitPre
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ReadContext
specifier|public
specifier|static
class|class
name|ReadContext
extends|extends
name|UnaryContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ReadContext
specifier|public
name|ReadContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitRead
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|PostContext
specifier|public
specifier|static
class|class
name|PostContext
extends|extends
name|UnaryContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|INCR
specifier|public
name|TerminalNode
name|INCR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|INCR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DECR
specifier|public
name|TerminalNode
name|DECR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DECR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|PostContext
specifier|public
name|PostContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitPost
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NullContext
specifier|public
specifier|static
class|class
name|NullContext
extends|extends
name|UnaryContext
block|{
DECL|method|NULL
specifier|public
name|TerminalNode
name|NULL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NULL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NullContext
specifier|public
name|NullContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNull
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|TrueContext
specifier|public
specifier|static
class|class
name|TrueContext
extends|extends
name|UnaryContext
block|{
DECL|method|TRUE
specifier|public
name|TerminalNode
name|TRUE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TRUE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TrueContext
specifier|public
name|TrueContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTrue
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|FalseContext
specifier|public
specifier|static
class|class
name|FalseContext
extends|extends
name|UnaryContext
block|{
DECL|method|FALSE
specifier|public
name|TerminalNode
name|FALSE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|FALSE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|FalseContext
specifier|public
name|FalseContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFalse
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NumericContext
specifier|public
specifier|static
class|class
name|NumericContext
extends|extends
name|UnaryContext
block|{
DECL|method|OCTAL
specifier|public
name|TerminalNode
name|OCTAL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|OCTAL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|HEX
specifier|public
name|TerminalNode
name|HEX
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|HEX
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|INTEGER
specifier|public
name|TerminalNode
name|INTEGER
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|INTEGER
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DECIMAL
specifier|public
name|TerminalNode
name|DECIMAL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DECIMAL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NumericContext
specifier|public
name|NumericContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNumeric
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|OperatorContext
specifier|public
specifier|static
class|class
name|OperatorContext
extends|extends
name|UnaryContext
block|{
DECL|method|unary
specifier|public
name|UnaryContext
name|unary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|UnaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BOOLNOT
specifier|public
name|TerminalNode
name|BOOLNOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BOOLNOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BWNOT
specifier|public
name|TerminalNode
name|BWNOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BWNOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ADD
specifier|public
name|TerminalNode
name|ADD
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ADD
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SUB
specifier|public
name|TerminalNode
name|SUB
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SUB
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|OperatorContext
specifier|public
name|OperatorContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitOperator
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|unary
specifier|public
specifier|final
name|UnaryContext
name|unary
parameter_list|(
name|boolean
name|c
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|UnaryContext
name|_localctx
init|=
operator|new
name|UnaryContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|30
argument_list|,
name|RULE_unary
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|321
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|21
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|PreContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|292
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|293
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|INCR
operator|||
name|_la
operator|==
name|DECR
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|294
argument_list|)
expr_stmt|;
name|chain
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|PostContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|295
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|296
argument_list|)
expr_stmt|;
name|chain
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|297
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|INCR
operator|||
name|_la
operator|==
name|DECR
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|3
case|:
name|_localctx
operator|=
operator|new
name|ReadContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|299
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|chain
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
name|_localctx
operator|=
operator|new
name|NumericContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|301
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|302
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|65
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|65
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|OCTAL
operator|-
literal|65
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|HEX
operator|-
literal|65
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|INTEGER
operator|-
literal|65
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|DECIMAL
operator|-
literal|65
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|NumericContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
name|_localctx
operator|=
operator|new
name|TrueContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|304
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|305
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TrueContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
name|_localctx
operator|=
operator|new
name|FalseContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|307
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|308
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|FalseContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
name|_localctx
operator|=
operator|new
name|NullContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|310
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|311
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NullContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
name|_localctx
operator|=
operator|new
name|OperatorContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|313
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|314
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|BOOLNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BWNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|SUB
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|315
argument_list|)
expr_stmt|;
name|unary
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
name|_localctx
operator|=
operator|new
name|CastContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|316
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|317
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|318
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|319
argument_list|)
expr_stmt|;
name|unary
argument_list|(
name|_localctx
operator|.
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ChainContext
specifier|public
specifier|static
class|class
name|ChainContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|c
specifier|public
name|boolean
name|c
decl_stmt|;
DECL|method|ChainContext
specifier|public
name|ChainContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|ChainContext
specifier|public
name|ChainContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|,
name|boolean
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_chain
return|;
block|}
DECL|method|ChainContext
specifier|public
name|ChainContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|ChainContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|ctx
operator|.
name|c
expr_stmt|;
block|}
block|}
DECL|class|StaticContext
specifier|public
specifier|static
class|class
name|StaticContext
extends|extends
name|ChainContext
block|{
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|dot
specifier|public
name|DotContext
name|dot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|List
argument_list|<
name|SecondaryContext
argument_list|>
name|secondary
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|SecondaryContext
name|secondary
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|StaticContext
specifier|public
name|StaticContext
parameter_list|(
name|ChainContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitStatic
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|DynamicContext
specifier|public
specifier|static
class|class
name|DynamicContext
extends|extends
name|ChainContext
block|{
DECL|field|p
specifier|public
name|PrimaryContext
name|p
decl_stmt|;
DECL|method|primary
specifier|public
name|PrimaryContext
name|primary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|PrimaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|List
argument_list|<
name|SecondaryContext
argument_list|>
name|secondary
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|SecondaryContext
name|secondary
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|DynamicContext
specifier|public
name|DynamicContext
parameter_list|(
name|ChainContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDynamic
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NewarrayContext
specifier|public
specifier|static
class|class
name|NewarrayContext
extends|extends
name|ChainContext
block|{
DECL|method|NEW
specifier|public
name|TerminalNode
name|NEW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NEW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|LBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|TerminalNode
name|LBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|RBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|TerminalNode
name|RBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|dot
specifier|public
name|DotContext
name|dot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|List
argument_list|<
name|SecondaryContext
argument_list|>
name|secondary
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|SecondaryContext
name|secondary
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|NewarrayContext
specifier|public
name|NewarrayContext
parameter_list|(
name|ChainContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNewarray
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|chain
specifier|public
specifier|final
name|ChainContext
name|chain
parameter_list|(
name|boolean
name|c
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|ChainContext
name|_localctx
init|=
operator|new
name|ChainContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|32
argument_list|,
name|RULE_chain
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|setState
argument_list|(
literal|357
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|27
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|DynamicContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|323
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DynamicContext
operator|)
name|_localctx
operator|)
operator|.
name|p
operator|=
name|primary
argument_list|(
name|_localctx
operator|.
name|c
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|327
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|22
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|324
argument_list|)
expr_stmt|;
name|secondary
argument_list|(
operator|(
operator|(
name|DynamicContext
operator|)
name|_localctx
operator|)
operator|.
name|p
operator|.
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|329
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|22
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|StaticContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|330
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|331
argument_list|)
expr_stmt|;
name|dot
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|335
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|23
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|332
argument_list|)
expr_stmt|;
name|secondary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|337
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|23
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|3
case|:
name|_localctx
operator|=
operator|new
name|NewarrayContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|338
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NEW
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|339
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|344
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
literal|1
expr_stmt|;
do|do
block|{
switch|switch
condition|(
name|_alt
condition|)
block|{
case|case
literal|1
case|:
block|{
block|{
name|setState
argument_list|(
literal|340
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|341
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|342
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
name|setState
argument_list|(
literal|346
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|24
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
do|;
name|setState
argument_list|(
literal|355
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|26
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|348
argument_list|)
expr_stmt|;
name|dot
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|352
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|25
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|349
argument_list|)
expr_stmt|;
name|secondary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|354
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|25
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|PrimaryContext
specifier|public
specifier|static
class|class
name|PrimaryContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|c
specifier|public
name|boolean
name|c
decl_stmt|;
DECL|field|s
specifier|public
name|boolean
name|s
init|=
literal|true
decl_stmt|;
DECL|method|PrimaryContext
specifier|public
name|PrimaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|PrimaryContext
specifier|public
name|PrimaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|,
name|boolean
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_primary
return|;
block|}
DECL|method|PrimaryContext
specifier|public
name|PrimaryContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|ctx
operator|.
name|c
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|ctx
operator|.
name|s
expr_stmt|;
block|}
block|}
DECL|class|StringContext
specifier|public
specifier|static
class|class
name|StringContext
extends|extends
name|PrimaryContext
block|{
DECL|method|STRING
specifier|public
name|TerminalNode
name|STRING
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|STRING
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|StringContext
specifier|public
name|StringContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitString
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|CalllocalContext
specifier|public
specifier|static
class|class
name|CalllocalContext
extends|extends
name|PrimaryContext
block|{
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|arguments
specifier|public
name|ArgumentsContext
name|arguments
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ArgumentsContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|CalllocalContext
specifier|public
name|CalllocalContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitCalllocal
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|VariableContext
specifier|public
specifier|static
class|class
name|VariableContext
extends|extends
name|PrimaryContext
block|{
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|VariableContext
specifier|public
name|VariableContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitVariable
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ExprprecContext
specifier|public
specifier|static
class|class
name|ExprprecContext
extends|extends
name|PrimaryContext
block|{
DECL|field|e
specifier|public
name|ExpressionContext
name|e
decl_stmt|;
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ExprprecContext
specifier|public
name|ExprprecContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitExprprec
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NewobjectContext
specifier|public
specifier|static
class|class
name|NewobjectContext
extends|extends
name|PrimaryContext
block|{
DECL|method|NEW
specifier|public
name|TerminalNode
name|NEW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NEW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|arguments
specifier|public
name|ArgumentsContext
name|arguments
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ArgumentsContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NewobjectContext
specifier|public
name|NewobjectContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNewobject
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ChainprecContext
specifier|public
specifier|static
class|class
name|ChainprecContext
extends|extends
name|PrimaryContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|unary
specifier|public
name|UnaryContext
name|unary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|UnaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ChainprecContext
specifier|public
name|ChainprecContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitChainprec
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|primary
specifier|public
specifier|final
name|PrimaryContext
name|primary
parameter_list|(
name|boolean
name|c
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|PrimaryContext
name|_localctx
init|=
operator|new
name|PrimaryContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|34
argument_list|,
name|RULE_primary
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|377
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|28
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|ExprprecContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|359
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|360
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|361
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExprprecContext
operator|)
name|_localctx
operator|)
operator|.
name|e
operator|=
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|362
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExprprecContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
operator|(
operator|(
name|ExprprecContext
operator|)
name|_localctx
operator|)
operator|.
name|e
operator|.
name|s
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|ChainprecContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|365
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" $c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|366
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|367
argument_list|)
expr_stmt|;
name|unary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|368
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
name|_localctx
operator|=
operator|new
name|StringContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|370
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
name|_localctx
operator|=
operator|new
name|VariableContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|371
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
name|_localctx
operator|=
operator|new
name|CalllocalContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|372
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|373
argument_list|)
expr_stmt|;
name|arguments
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
name|_localctx
operator|=
operator|new
name|NewobjectContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|374
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NEW
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|375
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|376
argument_list|)
expr_stmt|;
name|arguments
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|SecondaryContext
specifier|public
specifier|static
class|class
name|SecondaryContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|s
specifier|public
name|boolean
name|s
decl_stmt|;
DECL|method|dot
specifier|public
name|DotContext
name|dot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|brace
specifier|public
name|BraceContext
name|brace
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BraceContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SecondaryContext
specifier|public
name|SecondaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|SecondaryContext
specifier|public
name|SecondaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|,
name|boolean
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_secondary
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitSecondary
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|secondary
specifier|public
specifier|final
name|SecondaryContext
name|secondary
parameter_list|(
name|boolean
name|s
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|SecondaryContext
name|_localctx
init|=
operator|new
name|SecondaryContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|36
argument_list|,
name|RULE_secondary
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|383
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|29
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|379
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_localctx
operator|.
name|s
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" $s "
argument_list|)
throw|;
name|setState
argument_list|(
literal|380
argument_list|)
expr_stmt|;
name|dot
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|381
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_localctx
operator|.
name|s
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" $s "
argument_list|)
throw|;
name|setState
argument_list|(
literal|382
argument_list|)
expr_stmt|;
name|brace
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DotContext
specifier|public
specifier|static
class|class
name|DotContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|DotContext
specifier|public
name|DotContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_dot
return|;
block|}
DECL|method|DotContext
specifier|public
name|DotContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|DotContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CallinvokeContext
specifier|public
specifier|static
class|class
name|CallinvokeContext
extends|extends
name|DotContext
block|{
DECL|method|DOT
specifier|public
name|TerminalNode
name|DOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DOTID
specifier|public
name|TerminalNode
name|DOTID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOTID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|arguments
specifier|public
name|ArgumentsContext
name|arguments
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ArgumentsContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|CallinvokeContext
specifier|public
name|CallinvokeContext
parameter_list|(
name|DotContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitCallinvoke
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|FieldaccessContext
specifier|public
specifier|static
class|class
name|FieldaccessContext
extends|extends
name|DotContext
block|{
DECL|method|DOT
specifier|public
name|TerminalNode
name|DOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DOTID
specifier|public
name|TerminalNode
name|DOTID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOTID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DOTINTEGER
specifier|public
name|TerminalNode
name|DOTINTEGER
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOTINTEGER
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|FieldaccessContext
specifier|public
name|FieldaccessContext
parameter_list|(
name|DotContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFieldaccess
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|dot
specifier|public
specifier|final
name|DotContext
name|dot
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DotContext
name|_localctx
init|=
operator|new
name|DotContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|38
argument_list|,
name|RULE_dot
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|390
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|30
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|CallinvokeContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|385
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|386
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOTID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|387
argument_list|)
expr_stmt|;
name|arguments
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|FieldaccessContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|388
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|389
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|DOTINTEGER
operator|||
name|_la
operator|==
name|DOTID
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|BraceContext
specifier|public
specifier|static
class|class
name|BraceContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|BraceContext
specifier|public
name|BraceContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_brace
return|;
block|}
DECL|method|BraceContext
specifier|public
name|BraceContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|BraceContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BraceaccessContext
specifier|public
specifier|static
class|class
name|BraceaccessContext
extends|extends
name|BraceContext
block|{
DECL|method|LBRACE
specifier|public
name|TerminalNode
name|LBRACE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|TerminalNode
name|RBRACE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BraceaccessContext
specifier|public
name|BraceaccessContext
parameter_list|(
name|BraceContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBraceaccess
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|brace
specifier|public
specifier|final
name|BraceContext
name|brace
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BraceContext
name|_localctx
init|=
operator|new
name|BraceContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|40
argument_list|,
name|RULE_brace
argument_list|)
expr_stmt|;
try|try
block|{
name|_localctx
operator|=
operator|new
name|BraceaccessContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|392
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|393
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|394
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ArgumentsContext
specifier|public
specifier|static
class|class
name|ArgumentsContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|argument
specifier|public
name|List
argument_list|<
name|ArgumentContext
argument_list|>
name|argument
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ArgumentContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|argument
specifier|public
name|ArgumentContext
name|argument
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ArgumentContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|COMMA
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|TerminalNode
name|COMMA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|ArgumentsContext
specifier|public
name|ArgumentsContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_arguments
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitArguments
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|arguments
specifier|public
specifier|final
name|ArgumentsContext
name|arguments
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|ArgumentsContext
name|_localctx
init|=
operator|new
name|ArgumentsContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|42
argument_list|,
name|RULE_arguments
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
block|{
name|setState
argument_list|(
literal|396
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|405
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|32
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|397
argument_list|)
expr_stmt|;
name|argument
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|402
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|COMMA
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|398
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|399
argument_list|)
expr_stmt|;
name|argument
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|404
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
name|setState
argument_list|(
literal|407
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ArgumentContext
specifier|public
specifier|static
class|class
name|ArgumentContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|lambda
specifier|public
name|LambdaContext
name|lambda
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LambdaContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|funcref
specifier|public
name|FuncrefContext
name|funcref
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|FuncrefContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ArgumentContext
specifier|public
name|ArgumentContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_argument
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitArgument
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|argument
specifier|public
specifier|final
name|ArgumentContext
name|argument
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|ArgumentContext
name|_localctx
init|=
operator|new
name|ArgumentContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|44
argument_list|,
name|RULE_argument
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|412
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|33
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|409
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|410
argument_list|)
expr_stmt|;
name|lambda
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|411
argument_list|)
expr_stmt|;
name|funcref
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LambdaContext
specifier|public
specifier|static
class|class
name|LambdaContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|ARROW
specifier|public
name|TerminalNode
name|ARROW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ARROW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|lamtype
specifier|public
name|List
argument_list|<
name|LamtypeContext
argument_list|>
name|lamtype
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|LamtypeContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|lamtype
specifier|public
name|LamtypeContext
name|lamtype
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|LamtypeContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|COMMA
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|TerminalNode
name|COMMA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|LambdaContext
specifier|public
name|LambdaContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_lambda
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLambda
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|lambda
specifier|public
specifier|final
name|LambdaContext
name|lambda
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LambdaContext
name|_localctx
init|=
operator|new
name|LambdaContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|46
argument_list|,
name|RULE_lambda
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|427
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TYPE
case|:
case|case
name|ID
case|:
block|{
name|setState
argument_list|(
literal|414
argument_list|)
expr_stmt|;
name|lamtype
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|LP
case|:
block|{
name|setState
argument_list|(
literal|415
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|424
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|_la
operator|==
name|TYPE
operator|||
name|_la
operator|==
name|ID
condition|)
block|{
block|{
name|setState
argument_list|(
literal|416
argument_list|)
expr_stmt|;
name|lamtype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|421
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|COMMA
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|417
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|418
argument_list|)
expr_stmt|;
name|lamtype
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|423
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|426
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
name|setState
argument_list|(
literal|429
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARROW
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|430
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LamtypeContext
specifier|public
specifier|static
class|class
name|LamtypeContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LamtypeContext
specifier|public
name|LamtypeContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_lamtype
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLamtype
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|lamtype
specifier|public
specifier|final
name|LamtypeContext
name|lamtype
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LamtypeContext
name|_localctx
init|=
operator|new
name|LamtypeContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|48
argument_list|,
name|RULE_lamtype
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|433
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|_la
operator|==
name|TYPE
condition|)
block|{
block|{
name|setState
argument_list|(
literal|432
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|435
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|FuncrefContext
specifier|public
specifier|static
class|class
name|FuncrefContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|REF
specifier|public
name|TerminalNode
name|REF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|REF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|ID
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|NEW
specifier|public
name|TerminalNode
name|NEW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NEW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|FuncrefContext
specifier|public
name|FuncrefContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_funcref
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFuncref
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|funcref
specifier|public
specifier|final
name|FuncrefContext
name|funcref
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|FuncrefContext
name|_localctx
init|=
operator|new
name|FuncrefContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|50
argument_list|,
name|RULE_funcref
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|443
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TYPE
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|437
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|438
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|REF
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|439
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|NEW
operator|||
name|_la
operator|==
name|ID
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|ID
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|440
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|441
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|REF
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|442
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|method|sempred
specifier|public
name|boolean
name|sempred
parameter_list|(
name|RuleContext
name|_localctx
parameter_list|,
name|int
name|ruleIndex
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|ruleIndex
condition|)
block|{
case|case
literal|3
case|:
return|return
name|statement_sempred
argument_list|(
operator|(
name|StatementContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
case|case
literal|14
case|:
return|return
name|expression_sempred
argument_list|(
operator|(
name|ExpressionContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
case|case
literal|15
case|:
return|return
name|unary_sempred
argument_list|(
operator|(
name|UnaryContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
case|case
literal|17
case|:
return|return
name|primary_sempred
argument_list|(
operator|(
name|PrimaryContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
case|case
literal|18
case|:
return|return
name|secondary_sempred
argument_list|(
operator|(
name|SecondaryContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|statement_sempred
specifier|private
name|boolean
name|statement_sempred
parameter_list|(
name|StatementContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|!=
name|ELSE
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|expression_sempred
specifier|private
name|boolean
name|expression_sempred
parameter_list|(
name|ExpressionContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|1
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|12
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|11
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|10
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|9
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|8
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|7
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|6
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|5
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|4
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|3
argument_list|)
return|;
case|case
literal|11
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|2
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|unary_sempred
specifier|private
name|boolean
name|unary_sempred
parameter_list|(
name|UnaryContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|12
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|13
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|14
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|15
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|16
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|17
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|18
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|19
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|primary_sempred
specifier|private
name|boolean
name|primary_sempred
parameter_list|(
name|PrimaryContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|20
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|21
case|:
return|return
name|_localctx
operator|.
name|c
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|secondary_sempred
specifier|private
name|boolean
name|secondary_sempred
parameter_list|(
name|SecondaryContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|22
case|:
return|return
name|_localctx
operator|.
name|s
return|;
case|case
literal|23
case|:
return|return
name|_localctx
operator|.
name|s
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|field|_serializedATN
specifier|public
specifier|static
specifier|final
name|String
name|_serializedATN
init|=
literal|"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3N\u01c0\4\2\t\2\4"
operator|+
literal|"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"
operator|+
literal|"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"
operator|+
literal|"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"
operator|+
literal|"\4\32\t\32\4\33\t\33\3\2\7\28\n\2\f\2\16\2;\13\2\3\2\7\2>\n\2\f\2\16\2"
operator|+
literal|"A\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4Q\n"
operator|+
literal|"\4\f\4\16\4T\13\4\5\4V\n\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5"
operator|+
literal|"b\n\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5j\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"
operator|+
literal|"\3\5\3\5\3\5\5\5w\n\5\3\5\3\5\5\5{\n\5\3\5\3\5\5\5\177\n\5\3\5\3\5\3\5"
operator|+
literal|"\5\5\u0084\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"
operator|+
literal|"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\6\5\u009d\n\5\r\5\16\5\u009e\3\5"
operator|+
literal|"\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00a8\n\5\3\6\3\6\5\6\u00ac\n\6\3\7\3\7\7"
operator|+
literal|"\7\u00b0\n\7\f\7\16\7\u00b3\13\7\3\7\3\7\3\b\3\b\3\t\3\t\5\t\u00bb\n\t"
operator|+
literal|"\3\n\3\n\3\13\3\13\3\13\3\13\7\13\u00c3\n\13\f\13\16\13\u00c6\13\13\3"
operator|+
literal|"\f\3\f\3\f\7\f\u00cb\n\f\f\f\16\f\u00ce\13\f\3\r\3\r\3\r\5\r\u00d3\n\r"
operator|+
literal|"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\20\3\20"
operator|+
literal|"\3\20\3\20\3\20\3\20\5\20\u00e7\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"
operator|+
literal|"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"
operator|+
literal|"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"
operator|+
literal|"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"
operator|+
literal|"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u0122\n\20\f\20\16\20\u0125"
operator|+
literal|"\13\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21"
operator|+
literal|"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21"
operator|+
literal|"\3\21\3\21\5\21\u0144\n\21\3\22\3\22\7\22\u0148\n\22\f\22\16\22\u014b"
operator|+
literal|"\13\22\3\22\3\22\3\22\7\22\u0150\n\22\f\22\16\22\u0153\13\22\3\22\3\22"
operator|+
literal|"\3\22\3\22\3\22\3\22\6\22\u015b\n\22\r\22\16\22\u015c\3\22\3\22\7\22\u0161"
operator|+
literal|"\n\22\f\22\16\22\u0164\13\22\5\22\u0166\n\22\5\22\u0168\n\22\3\23\3\23"
operator|+
literal|"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"
operator|+
literal|"\3\23\3\23\5\23\u017c\n\23\3\24\3\24\3\24\3\24\5\24\u0182\n\24\3\25\3"
operator|+
literal|"\25\3\25\3\25\3\25\5\25\u0189\n\25\3\26\3\26\3\26\3\26\3\27\3\27\3\27"
operator|+
literal|"\3\27\7\27\u0193\n\27\f\27\16\27\u0196\13\27\5\27\u0198\n\27\3\27\3\27"
operator|+
literal|"\3\30\3\30\3\30\5\30\u019f\n\30\3\31\3\31\3\31\3\31\3\31\7\31\u01a6\n"
operator|+
literal|"\31\f\31\16\31\u01a9\13\31\5\31\u01ab\n\31\3\31\5\31\u01ae\n\31\3\31\3"
operator|+
literal|"\31\3\31\3\32\5\32\u01b4\n\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33"
operator|+
literal|"\5\33\u01be\n\33\3\33\2\3\36\34\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36"
operator|+
literal|" \"$&(*,.\60\62\64\2\16\3\3\r\r\3\2\67B\3\2\34\36\3\2\37 \3\2!#\3\2$\'"
operator|+
literal|"\3\2(+\3\2\65\66\3\2CF\4\2\32\33\37 \3\2MN\4\2\26\26LL\u01ec\29\3\2\2"
operator|+
literal|"\2\4D\3\2\2\2\6I\3\2\2\2\b\u00a7\3\2\2\2\n\u00ab\3\2\2\2\f\u00ad\3\2\2"
operator|+
literal|"\2\16\u00b6\3\2\2\2\20\u00ba\3\2\2\2\22\u00bc\3\2\2\2\24\u00be\3\2\2\2"
operator|+
literal|"\26\u00c7\3\2\2\2\30\u00cf\3\2\2\2\32\u00d4\3\2\2\2\34\u00db\3\2\2\2\36"
operator|+
literal|"\u00e6\3\2\2\2 \u0143\3\2\2\2\"\u0167\3\2\2\2$\u017b\3\2\2\2&\u0181\3"
operator|+
literal|"\2\2\2(\u0188\3\2\2\2*\u018a\3\2\2\2,\u018e\3\2\2\2.\u019e\3\2\2\2\60"
operator|+
literal|"\u01ad\3\2\2\2\62\u01b3\3\2\2\2\64\u01bd\3\2\2\2\668\5\4\3\2\67\66\3\2"
operator|+
literal|"\2\28;\3\2\2\29\67\3\2\2\29:\3\2\2\2:?\3\2\2\2;9\3\2\2\2<>\5\b\5\2=<\3"
operator|+
literal|"\2\2\2>A\3\2\2\2?=\3\2\2\2?@\3\2\2\2@B\3\2\2\2A?\3\2\2\2BC\7\2\2\3C\3"
operator|+
literal|"\3\2\2\2DE\5\26\f\2EF\7L\2\2FG\5\6\4\2GH\5\f\7\2H\5\3\2\2\2IU\7\t\2\2"
operator|+
literal|"JK\5\26\f\2KR\7L\2\2LM\7\f\2\2MN\5\26\f\2NO\7L\2\2OQ\3\2\2\2PL\3\2\2\2"
operator|+
literal|"QT\3\2\2\2RP\3\2\2\2RS\3\2\2\2SV\3\2\2\2TR\3\2\2\2UJ\3\2\2\2UV\3\2\2\2"
operator|+
literal|"VW\3\2\2\2WX\7\n\2\2X\7\3\2\2\2YZ\7\16\2\2Z[\7\t\2\2[\\\5\36\20\2\\]\7"
operator|+
literal|"\n\2\2]a\5\n\6\2^_\7\17\2\2_b\5\n\6\2`b\6\5\2\2a^\3\2\2\2a`\3\2\2\2b\u00a8"
operator|+
literal|"\3\2\2\2cd\7\20\2\2de\7\t\2\2ef\5\36\20\2fi\7\n\2\2gj\5\n\6\2hj\5\16\b"
operator|+
literal|"\2ig\3\2\2\2ih\3\2\2\2j\u00a8\3\2\2\2kl\7\21\2\2lm\5\f\7\2mn\7\20\2\2"
operator|+
literal|"no\7\t\2\2op\5\36\20\2pq\7\n\2\2qr\5\34\17\2r\u00a8\3\2\2\2st\7\22\2\2"
operator|+
literal|"tv\7\t\2\2uw\5\20\t\2vu\3\2\2\2vw\3\2\2\2wx\3\2\2\2xz\7\r\2\2y{\5\36\20"
operator|+
literal|"\2zy\3\2\2\2z{\3\2\2\2{|\3\2\2\2|~\7\r\2\2}\177\5\22\n\2~}\3\2\2\2~\177"
operator|+
literal|"\3\2\2\2\177\u0080\3\2\2\2\u0080\u0083\7\n\2\2\u0081\u0084\5\n\6\2\u0082"
operator|+
literal|"\u0084\5\16\b\2\u0083\u0081\3\2\2\2\u0083\u0082\3\2\2\2\u0084\u00a8\3"
operator|+
literal|"\2\2\2\u0085\u0086\7\22\2\2\u0086\u0087\7\t\2\2\u0087\u0088\5\26\f\2\u0088"
operator|+
literal|"\u0089\7L\2\2\u0089\u008a\7\62\2\2\u008a\u008b\5\36\20\2\u008b\u008c\7"
operator|+
literal|"\n\2\2\u008c\u008d\5\n\6\2\u008d\u00a8\3\2\2\2\u008e\u008f\5\24\13\2\u008f"
operator|+
literal|"\u0090\5\34\17\2\u0090\u00a8\3\2\2\2\u0091\u0092\7\23\2\2\u0092\u00a8"
operator|+
literal|"\5\34\17\2\u0093\u0094\7\24\2\2\u0094\u00a8\5\34\17\2\u0095\u0096\7\25"
operator|+
literal|"\2\2\u0096\u0097\5\36\20\2\u0097\u0098\5\34\17\2\u0098\u00a8\3\2\2\2\u0099"
operator|+
literal|"\u009a\7\27\2\2\u009a\u009c\5\f\7\2\u009b\u009d\5\32\16\2\u009c\u009b"
operator|+
literal|"\3\2\2\2\u009d\u009e\3\2\2\2\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f"
operator|+
literal|"\u00a8\3\2\2\2\u00a0\u00a1\7\31\2\2\u00a1\u00a2\5\36\20\2\u00a2\u00a3"
operator|+
literal|"\5\34\17\2\u00a3\u00a8\3\2\2\2\u00a4\u00a5\5\36\20\2\u00a5\u00a6\5\34"
operator|+
literal|"\17\2\u00a6\u00a8\3\2\2\2\u00a7Y\3\2\2\2\u00a7c\3\2\2\2\u00a7k\3\2\2\2"
operator|+
literal|"\u00a7s\3\2\2\2\u00a7\u0085\3\2\2\2\u00a7\u008e\3\2\2\2\u00a7\u0091\3"
operator|+
literal|"\2\2\2\u00a7\u0093\3\2\2\2\u00a7\u0095\3\2\2\2\u00a7\u0099\3\2\2\2\u00a7"
operator|+
literal|"\u00a0\3\2\2\2\u00a7\u00a4\3\2\2\2\u00a8\t\3\2\2\2\u00a9\u00ac\5\f\7\2"
operator|+
literal|"\u00aa\u00ac\5\b\5\2\u00ab\u00a9\3\2\2\2\u00ab\u00aa\3\2\2\2\u00ac\13"
operator|+
literal|"\3\2\2\2\u00ad\u00b1\7\5\2\2\u00ae\u00b0\5\b\5\2\u00af\u00ae\3\2\2\2\u00b0"
operator|+
literal|"\u00b3\3\2\2\2\u00b1\u00af\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b4\3\2"
operator|+
literal|"\2\2\u00b3\u00b1\3\2\2\2\u00b4\u00b5\7\6\2\2\u00b5\r\3\2\2\2\u00b6\u00b7"
operator|+
literal|"\7\r\2\2\u00b7\17\3\2\2\2\u00b8\u00bb\5\24\13\2\u00b9\u00bb\5\36\20\2"
operator|+
literal|"\u00ba\u00b8\3\2\2\2\u00ba\u00b9\3\2\2\2\u00bb\21\3\2\2\2\u00bc\u00bd"
operator|+
literal|"\5\36\20\2\u00bd\23\3\2\2\2\u00be\u00bf\5\26\f\2\u00bf\u00c4\5\30\r\2"
operator|+
literal|"\u00c0\u00c1\7\f\2\2\u00c1\u00c3\5\30\r\2\u00c2\u00c0\3\2\2\2\u00c3\u00c6"
operator|+
literal|"\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\25\3\2\2\2\u00c6"
operator|+
literal|"\u00c4\3\2\2\2\u00c7\u00cc\7K\2\2\u00c8\u00c9\7\7\2\2\u00c9\u00cb\7\b"
operator|+
literal|"\2\2\u00ca\u00c8\3\2\2\2\u00cb\u00ce\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cc"
operator|+
literal|"\u00cd\3\2\2\2\u00cd\27\3\2\2\2\u00ce\u00cc\3\2\2\2\u00cf\u00d2\7L\2\2"
operator|+
literal|"\u00d0\u00d1\7\67\2\2\u00d1\u00d3\5\36\20\2\u00d2\u00d0\3\2\2\2\u00d2"
operator|+
literal|"\u00d3\3\2\2\2\u00d3\31\3\2\2\2\u00d4\u00d5\7\30\2\2\u00d5\u00d6\7\t\2"
operator|+
literal|"\2\u00d6\u00d7\7K\2\2\u00d7\u00d8\7L\2\2\u00d8\u00d9\7\n\2\2\u00d9\u00da"
operator|+
literal|"\5\f\7\2\u00da\33\3\2\2\2\u00db\u00dc\t\2\2\2\u00dc\35\3\2\2\2\u00dd\u00de"
operator|+
literal|"\b\20\1\2\u00de\u00df\5\"\22\2\u00df\u00e0\t\3\2\2\u00e0\u00e1\5\36\20"
operator|+
literal|"\3\u00e1\u00e2\b\20\1\2\u00e2\u00e7\3\2\2\2\u00e3\u00e4\5 \21\2\u00e4"
operator|+
literal|"\u00e5\b\20\1\2\u00e5\u00e7\3\2\2\2\u00e6\u00dd\3\2\2\2\u00e6\u00e3\3"
operator|+
literal|"\2\2\2\u00e7\u0123\3\2\2\2\u00e8\u00e9\f\16\2\2\u00e9\u00ea\t\4\2\2\u00ea"
operator|+
literal|"\u00eb\5\36\20\17\u00eb\u00ec\b\20\1\2\u00ec\u0122\3\2\2\2\u00ed\u00ee"
operator|+
literal|"\f\r\2\2\u00ee\u00ef\t\5\2\2\u00ef\u00f0\5\36\20\16\u00f0\u00f1\b\20\1"
operator|+
literal|"\2\u00f1\u0122\3\2\2\2\u00f2\u00f3\f\f\2\2\u00f3\u00f4\t\6\2\2\u00f4\u00f5"
operator|+
literal|"\5\36\20\r\u00f5\u00f6\b\20\1\2\u00f6\u0122\3\2\2\2\u00f7\u00f8\f\13\2"
operator|+
literal|"\2\u00f8\u00f9\t\7\2\2\u00f9\u00fa\5\36\20\f\u00fa\u00fb\b\20\1\2\u00fb"
operator|+
literal|"\u0122\3\2\2\2\u00fc\u00fd\f\n\2\2\u00fd\u00fe\t\b\2\2\u00fe\u00ff\5\36"
operator|+
literal|"\20\13\u00ff\u0100\b\20\1\2\u0100\u0122\3\2\2\2\u0101\u0102\f\t\2\2\u0102"
operator|+
literal|"\u0103\7,\2\2\u0103\u0104\5\36\20\n\u0104\u0105\b\20\1\2\u0105\u0122\3"
operator|+
literal|"\2\2\2\u0106\u0107\f\b\2\2\u0107\u0108\7-\2\2\u0108\u0109\5\36\20\t\u0109"
operator|+
literal|"\u010a\b\20\1\2\u010a\u0122\3\2\2\2\u010b\u010c\f\7\2\2\u010c\u010d\7"
operator|+
literal|".\2\2\u010d\u010e\5\36\20\b\u010e\u010f\b\20\1\2\u010f\u0122\3\2\2\2\u0110"
operator|+
literal|"\u0111\f\6\2\2\u0111\u0112\7/\2\2\u0112\u0113\5\36\20\7\u0113\u0114\b"
operator|+
literal|"\20\1\2\u0114\u0122\3\2\2\2\u0115\u0116\f\5\2\2\u0116\u0117\7\60\2\2\u0117"
operator|+
literal|"\u0118\5\36\20\6\u0118\u0119\b\20\1\2\u0119\u0122\3\2\2\2\u011a\u011b"
operator|+
literal|"\f\4\2\2\u011b\u011c\7\61\2\2\u011c\u011d\5\36\20\2\u011d\u011e\7\62\2"
operator|+
literal|"\2\u011e\u011f\5\36\20\4\u011f\u0120\b\20\1\2\u0120\u0122\3\2\2\2\u0121"
operator|+
literal|"\u00e8\3\2\2\2\u0121\u00ed\3\2\2\2\u0121\u00f2\3\2\2\2\u0121\u00f7\3\2"
operator|+
literal|"\2\2\u0121\u00fc\3\2\2\2\u0121\u0101\3\2\2\2\u0121\u0106\3\2\2\2\u0121"
operator|+
literal|"\u010b\3\2\2\2\u0121\u0110\3\2\2\2\u0121\u0115\3\2\2\2\u0121\u011a\3\2"
operator|+
literal|"\2\2\u0122\u0125\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2\2\2\u0124"
operator|+
literal|"\37\3\2\2\2\u0125\u0123\3\2\2\2\u0126\u0127\6\21\16\3\u0127\u0128\t\t"
operator|+
literal|"\2\2\u0128\u0144\5\"\22\2\u0129\u012a\6\21\17\3\u012a\u012b\5\"\22\2\u012b"
operator|+
literal|"\u012c\t\t\2\2\u012c\u0144\3\2\2\2\u012d\u012e\6\21\20\3\u012e\u0144\5"
operator|+
literal|"\"\22\2\u012f\u0130\6\21\21\3\u0130\u0131\t\n\2\2\u0131\u0144\b\21\1\2"
operator|+
literal|"\u0132\u0133\6\21\22\3\u0133\u0134\7H\2\2\u0134\u0144\b\21\1\2\u0135\u0136"
operator|+
literal|"\6\21\23\3\u0136\u0137\7I\2\2\u0137\u0144\b\21\1\2\u0138\u0139\6\21\24"
operator|+
literal|"\3\u0139\u013a\7J\2\2\u013a\u0144\b\21\1\2\u013b\u013c\6\21\25\3\u013c"
operator|+
literal|"\u013d\t\13\2\2\u013d\u0144\5 \21\2\u013e\u013f\7\t\2\2\u013f\u0140\5"
operator|+
literal|"\26\f\2\u0140\u0141\7\n\2\2\u0141\u0142\5 \21\2\u0142\u0144\3\2\2\2\u0143"
operator|+
literal|"\u0126\3\2\2\2\u0143\u0129\3\2\2\2\u0143\u012d\3\2\2\2\u0143\u012f\3\2"
operator|+
literal|"\2\2\u0143\u0132\3\2\2\2\u0143\u0135\3\2\2\2\u0143\u0138\3\2\2\2\u0143"
operator|+
literal|"\u013b\3\2\2\2\u0143\u013e\3\2\2\2\u0144!\3\2\2\2\u0145\u0149\5$\23\2"
operator|+
literal|"\u0146\u0148\5&\24\2\u0147\u0146\3\2\2\2\u0148\u014b\3\2\2\2\u0149\u0147"
operator|+
literal|"\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u0168\3\2\2\2\u014b\u0149\3\2\2\2\u014c"
operator|+
literal|"\u014d\5\26\f\2\u014d\u0151\5(\25\2\u014e\u0150\5&\24\2\u014f\u014e\3"
operator|+
literal|"\2\2\2\u0150\u0153\3\2\2\2\u0151\u014f\3\2\2\2\u0151\u0152\3\2\2\2\u0152"
operator|+
literal|"\u0168\3\2\2\2\u0153\u0151\3\2\2\2\u0154\u0155\7\26\2\2\u0155\u015a\7"
operator|+
literal|"K\2\2\u0156\u0157\7\7\2\2\u0157\u0158\5\36\20\2\u0158\u0159\7\b\2\2\u0159"
operator|+
literal|"\u015b\3\2\2\2\u015a\u0156\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015a\3\2"
operator|+
literal|"\2\2\u015c\u015d\3\2\2\2\u015d\u0165\3\2\2\2\u015e\u0162\5(\25\2\u015f"
operator|+
literal|"\u0161\5&\24\2\u0160\u015f\3\2\2\2\u0161\u0164\3\2\2\2\u0162\u0160\3\2"
operator|+
literal|"\2\2\u0162\u0163\3\2\2\2\u0163\u0166\3\2\2\2\u0164\u0162\3\2\2\2\u0165"
operator|+
literal|"\u015e\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0168\3\2\2\2\u0167\u0145\3\2"
operator|+
literal|"\2\2\u0167\u014c\3\2\2\2\u0167\u0154\3\2\2\2\u0168#\3\2\2\2\u0169\u016a"
operator|+
literal|"\6\23\26\3\u016a\u016b\7\t\2\2\u016b\u016c\5\36\20\2\u016c\u016d\7\n\2"
operator|+
literal|"\2\u016d\u016e\b\23\1\2\u016e\u017c\3\2\2\2\u016f\u0170\6\23\27\3\u0170"
operator|+
literal|"\u0171\7\t\2\2\u0171\u0172\5 \21\2\u0172\u0173\7\n\2\2\u0173\u017c\3\2"
operator|+
literal|"\2\2\u0174\u017c\7G\2\2\u0175\u017c\7L\2\2\u0176\u0177\7L\2\2\u0177\u017c"
operator|+
literal|"\5,\27\2\u0178\u0179\7\26\2\2\u0179\u017a\7K\2\2\u017a\u017c\5,\27\2\u017b"
operator|+
literal|"\u0169\3\2\2\2\u017b\u016f\3\2\2\2\u017b\u0174\3\2\2\2\u017b\u0175\3\2"
operator|+
literal|"\2\2\u017b\u0176\3\2\2\2\u017b\u0178\3\2\2\2\u017c%\3\2\2\2\u017d\u017e"
operator|+
literal|"\6\24\30\3\u017e\u0182\5(\25\2\u017f\u0180\6\24\31\3\u0180\u0182\5*\26"
operator|+
literal|"\2\u0181\u017d\3\2\2\2\u0181\u017f\3\2\2\2\u0182\'\3\2\2\2\u0183\u0184"
operator|+
literal|"\7\13\2\2\u0184\u0185\7N\2\2\u0185\u0189\5,\27\2\u0186\u0187\7\13\2\2"
operator|+
literal|"\u0187\u0189\t\f\2\2\u0188\u0183\3\2\2\2\u0188\u0186\3\2\2\2\u0189)\3"
operator|+
literal|"\2\2\2\u018a\u018b\7\7\2\2\u018b\u018c\5\36\20\2\u018c\u018d\7\b\2\2\u018d"
operator|+
literal|"+\3\2\2\2\u018e\u0197\7\t\2\2\u018f\u0194\5.\30\2\u0190\u0191\7\f\2\2"
operator|+
literal|"\u0191\u0193\5.\30\2\u0192\u0190\3\2\2\2\u0193\u0196\3\2\2\2\u0194\u0192"
operator|+
literal|"\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194\3\2\2\2\u0197"
operator|+
literal|"\u018f\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019a\7\n"
operator|+
literal|"\2\2\u019a-\3\2\2\2\u019b\u019f\5\36\20\2\u019c\u019f\5\60\31\2\u019d"
operator|+
literal|"\u019f\5\64\33\2\u019e\u019b\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019d\3"
operator|+
literal|"\2\2\2\u019f/\3\2\2\2\u01a0\u01ae\5\62\32\2\u01a1\u01aa\7\t\2\2\u01a2"
operator|+
literal|"\u01a7\5\62\32\2\u01a3\u01a4\7\f\2\2\u01a4\u01a6\5\62\32\2\u01a5\u01a3"
operator|+
literal|"\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8"
operator|+
literal|"\u01ab\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01a2\3\2\2\2\u01aa\u01ab\3\2"
operator|+
literal|"\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ae\7\n\2\2\u01ad\u01a0\3\2\2\2\u01ad"
operator|+
literal|"\u01a1\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0\7\64\2\2\u01b0\u01b1\5"
operator|+
literal|"\f\7\2\u01b1\61\3\2\2\2\u01b2\u01b4\5\26\f\2\u01b3\u01b2\3\2\2\2\u01b3"
operator|+
literal|"\u01b4\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b6\7L\2\2\u01b6\63\3\2\2\2"
operator|+
literal|"\u01b7\u01b8\7K\2\2\u01b8\u01b9\7\63\2\2\u01b9\u01be\t\r\2\2\u01ba\u01bb"
operator|+
literal|"\7L\2\2\u01bb\u01bc\7\63\2\2\u01bc\u01be\7L\2\2\u01bd\u01b7\3\2\2\2\u01bd"
operator|+
literal|"\u01ba\3\2\2\2\u01be\65\3\2\2\2)9?RUaivz~\u0083\u009e\u00a7\u00ab\u00b1"
operator|+
literal|"\u00ba\u00c4\u00cc\u00d2\u00e6\u0121\u0123\u0143\u0149\u0151\u015c\u0162"
operator|+
literal|"\u0165\u0167\u017b\u0181\u0188\u0194\u0197\u019e\u01a7\u01aa\u01ad\u01b3"
operator|+
literal|"\u01bd"
decl_stmt|;
DECL|field|_ATN
specifier|public
specifier|static
specifier|final
name|ATN
name|_ATN
init|=
operator|new
name|ATNDeserializer
argument_list|()
operator|.
name|deserialize
argument_list|(
name|_serializedATN
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
name|_decisionToDFA
operator|=
operator|new
name|DFA
index|[
name|_ATN
operator|.
name|getNumberOfDecisions
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_ATN
operator|.
name|getNumberOfDecisions
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|_decisionToDFA
index|[
name|i
index|]
operator|=
operator|new
name|DFA
argument_list|(
name|_ATN
operator|.
name|getDecisionState
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

