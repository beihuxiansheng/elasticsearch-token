begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// ANTLR GENERATED CODE: DO NOT EDIT
end_comment

begin_package
DECL|package|org.elasticsearch.painless.antlr
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|dfa
operator|.
name|DFA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"all"
block|,
literal|"warnings"
block|,
literal|"unchecked"
block|,
literal|"unused"
block|,
literal|"cast"
block|}
argument_list|)
DECL|class|PainlessParser
class|class
name|PainlessParser
extends|extends
name|Parser
block|{
static|static
block|{
name|RuntimeMetaData
operator|.
name|checkVersion
argument_list|(
literal|"4.5.1"
argument_list|,
name|RuntimeMetaData
operator|.
name|VERSION
argument_list|)
expr_stmt|;
block|}
DECL|field|_decisionToDFA
specifier|protected
specifier|static
specifier|final
name|DFA
index|[]
name|_decisionToDFA
decl_stmt|;
DECL|field|_sharedContextCache
specifier|protected
specifier|static
specifier|final
name|PredictionContextCache
name|_sharedContextCache
init|=
operator|new
name|PredictionContextCache
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|WS
DECL|field|COMMENT
DECL|field|LBRACK
DECL|field|RBRACK
DECL|field|LBRACE
DECL|field|RBRACE
DECL|field|LP
DECL|field|RP
DECL|field|DOT
name|WS
init|=
literal|1
decl_stmt|,
name|COMMENT
init|=
literal|2
decl_stmt|,
name|LBRACK
init|=
literal|3
decl_stmt|,
name|RBRACK
init|=
literal|4
decl_stmt|,
name|LBRACE
init|=
literal|5
decl_stmt|,
name|RBRACE
init|=
literal|6
decl_stmt|,
name|LP
init|=
literal|7
decl_stmt|,
name|RP
init|=
literal|8
decl_stmt|,
name|DOT
init|=
literal|9
decl_stmt|,
DECL|field|COMMA
DECL|field|SEMICOLON
DECL|field|IF
DECL|field|ELSE
DECL|field|WHILE
DECL|field|DO
DECL|field|FOR
DECL|field|CONTINUE
name|COMMA
init|=
literal|10
decl_stmt|,
name|SEMICOLON
init|=
literal|11
decl_stmt|,
name|IF
init|=
literal|12
decl_stmt|,
name|ELSE
init|=
literal|13
decl_stmt|,
name|WHILE
init|=
literal|14
decl_stmt|,
name|DO
init|=
literal|15
decl_stmt|,
name|FOR
init|=
literal|16
decl_stmt|,
name|CONTINUE
init|=
literal|17
decl_stmt|,
DECL|field|BREAK
DECL|field|RETURN
DECL|field|NEW
DECL|field|TRY
DECL|field|CATCH
DECL|field|THROW
DECL|field|BOOLNOT
DECL|field|BWNOT
name|BREAK
init|=
literal|18
decl_stmt|,
name|RETURN
init|=
literal|19
decl_stmt|,
name|NEW
init|=
literal|20
decl_stmt|,
name|TRY
init|=
literal|21
decl_stmt|,
name|CATCH
init|=
literal|22
decl_stmt|,
name|THROW
init|=
literal|23
decl_stmt|,
name|BOOLNOT
init|=
literal|24
decl_stmt|,
name|BWNOT
init|=
literal|25
decl_stmt|,
DECL|field|MUL
DECL|field|DIV
DECL|field|REM
DECL|field|ADD
DECL|field|SUB
DECL|field|LSH
DECL|field|RSH
DECL|field|USH
DECL|field|LT
name|MUL
init|=
literal|26
decl_stmt|,
name|DIV
init|=
literal|27
decl_stmt|,
name|REM
init|=
literal|28
decl_stmt|,
name|ADD
init|=
literal|29
decl_stmt|,
name|SUB
init|=
literal|30
decl_stmt|,
name|LSH
init|=
literal|31
decl_stmt|,
name|RSH
init|=
literal|32
decl_stmt|,
name|USH
init|=
literal|33
decl_stmt|,
name|LT
init|=
literal|34
decl_stmt|,
DECL|field|LTE
DECL|field|GT
DECL|field|GTE
DECL|field|EQ
DECL|field|EQR
DECL|field|NE
DECL|field|NER
DECL|field|BWAND
DECL|field|XOR
name|LTE
init|=
literal|35
decl_stmt|,
name|GT
init|=
literal|36
decl_stmt|,
name|GTE
init|=
literal|37
decl_stmt|,
name|EQ
init|=
literal|38
decl_stmt|,
name|EQR
init|=
literal|39
decl_stmt|,
name|NE
init|=
literal|40
decl_stmt|,
name|NER
init|=
literal|41
decl_stmt|,
name|BWAND
init|=
literal|42
decl_stmt|,
name|XOR
init|=
literal|43
decl_stmt|,
DECL|field|BWOR
DECL|field|BOOLAND
DECL|field|BOOLOR
DECL|field|COND
DECL|field|COLON
DECL|field|INCR
DECL|field|DECR
DECL|field|ASSIGN
name|BWOR
init|=
literal|44
decl_stmt|,
name|BOOLAND
init|=
literal|45
decl_stmt|,
name|BOOLOR
init|=
literal|46
decl_stmt|,
name|COND
init|=
literal|47
decl_stmt|,
name|COLON
init|=
literal|48
decl_stmt|,
name|INCR
init|=
literal|49
decl_stmt|,
name|DECR
init|=
literal|50
decl_stmt|,
name|ASSIGN
init|=
literal|51
decl_stmt|,
DECL|field|AADD
DECL|field|ASUB
DECL|field|AMUL
DECL|field|ADIV
DECL|field|AREM
DECL|field|AAND
DECL|field|AXOR
DECL|field|AOR
name|AADD
init|=
literal|52
decl_stmt|,
name|ASUB
init|=
literal|53
decl_stmt|,
name|AMUL
init|=
literal|54
decl_stmt|,
name|ADIV
init|=
literal|55
decl_stmt|,
name|AREM
init|=
literal|56
decl_stmt|,
name|AAND
init|=
literal|57
decl_stmt|,
name|AXOR
init|=
literal|58
decl_stmt|,
name|AOR
init|=
literal|59
decl_stmt|,
DECL|field|ALSH
DECL|field|ARSH
DECL|field|AUSH
DECL|field|OCTAL
DECL|field|HEX
DECL|field|INTEGER
DECL|field|DECIMAL
DECL|field|STRING
name|ALSH
init|=
literal|60
decl_stmt|,
name|ARSH
init|=
literal|61
decl_stmt|,
name|AUSH
init|=
literal|62
decl_stmt|,
name|OCTAL
init|=
literal|63
decl_stmt|,
name|HEX
init|=
literal|64
decl_stmt|,
name|INTEGER
init|=
literal|65
decl_stmt|,
name|DECIMAL
init|=
literal|66
decl_stmt|,
name|STRING
init|=
literal|67
decl_stmt|,
DECL|field|TRUE
DECL|field|FALSE
DECL|field|NULL
DECL|field|ID
DECL|field|EXTINTEGER
DECL|field|EXTID
name|TRUE
init|=
literal|68
decl_stmt|,
name|FALSE
init|=
literal|69
decl_stmt|,
name|NULL
init|=
literal|70
decl_stmt|,
name|ID
init|=
literal|71
decl_stmt|,
name|EXTINTEGER
init|=
literal|72
decl_stmt|,
name|EXTID
init|=
literal|73
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|RULE_source
DECL|field|RULE_statement
DECL|field|RULE_block
DECL|field|RULE_empty
DECL|field|RULE_emptyscope
name|RULE_source
init|=
literal|0
decl_stmt|,
name|RULE_statement
init|=
literal|1
decl_stmt|,
name|RULE_block
init|=
literal|2
decl_stmt|,
name|RULE_empty
init|=
literal|3
decl_stmt|,
name|RULE_emptyscope
init|=
literal|4
decl_stmt|,
DECL|field|RULE_initializer
DECL|field|RULE_afterthought
DECL|field|RULE_declaration
DECL|field|RULE_decltype
name|RULE_initializer
init|=
literal|5
decl_stmt|,
name|RULE_afterthought
init|=
literal|6
decl_stmt|,
name|RULE_declaration
init|=
literal|7
decl_stmt|,
name|RULE_decltype
init|=
literal|8
decl_stmt|,
DECL|field|RULE_declvar
DECL|field|RULE_trap
DECL|field|RULE_identifier
DECL|field|RULE_generic
name|RULE_declvar
init|=
literal|9
decl_stmt|,
name|RULE_trap
init|=
literal|10
decl_stmt|,
name|RULE_identifier
init|=
literal|11
decl_stmt|,
name|RULE_generic
init|=
literal|12
decl_stmt|,
DECL|field|RULE_expression
DECL|field|RULE_chain
DECL|field|RULE_linkprec
DECL|field|RULE_linkcast
name|RULE_expression
init|=
literal|13
decl_stmt|,
name|RULE_chain
init|=
literal|14
decl_stmt|,
name|RULE_linkprec
init|=
literal|15
decl_stmt|,
name|RULE_linkcast
init|=
literal|16
decl_stmt|,
DECL|field|RULE_linkbrace
DECL|field|RULE_linkdot
DECL|field|RULE_linkcall
DECL|field|RULE_linkvar
name|RULE_linkbrace
init|=
literal|17
decl_stmt|,
name|RULE_linkdot
init|=
literal|18
decl_stmt|,
name|RULE_linkcall
init|=
literal|19
decl_stmt|,
name|RULE_linkvar
init|=
literal|20
decl_stmt|,
DECL|field|RULE_linkfield
DECL|field|RULE_linknew
DECL|field|RULE_linkstring
DECL|field|RULE_arguments
name|RULE_linkfield
init|=
literal|21
decl_stmt|,
name|RULE_linknew
init|=
literal|22
decl_stmt|,
name|RULE_linkstring
init|=
literal|23
decl_stmt|,
name|RULE_arguments
init|=
literal|24
decl_stmt|;
DECL|field|ruleNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ruleNames
init|=
block|{
literal|"source"
block|,
literal|"statement"
block|,
literal|"block"
block|,
literal|"empty"
block|,
literal|"emptyscope"
block|,
literal|"initializer"
block|,
literal|"afterthought"
block|,
literal|"declaration"
block|,
literal|"decltype"
block|,
literal|"declvar"
block|,
literal|"trap"
block|,
literal|"identifier"
block|,
literal|"generic"
block|,
literal|"expression"
block|,
literal|"chain"
block|,
literal|"linkprec"
block|,
literal|"linkcast"
block|,
literal|"linkbrace"
block|,
literal|"linkdot"
block|,
literal|"linkcall"
block|,
literal|"linkvar"
block|,
literal|"linkfield"
block|,
literal|"linknew"
block|,
literal|"linkstring"
block|,
literal|"arguments"
block|}
decl_stmt|;
DECL|field|_LITERAL_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|_LITERAL_NAMES
init|=
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|"'{'"
block|,
literal|"'}'"
block|,
literal|"'['"
block|,
literal|"']'"
block|,
literal|"'('"
block|,
literal|"')'"
block|,
literal|"'.'"
block|,
literal|"','"
block|,
literal|"';'"
block|,
literal|"'if'"
block|,
literal|"'else'"
block|,
literal|"'while'"
block|,
literal|"'do'"
block|,
literal|"'for'"
block|,
literal|"'continue'"
block|,
literal|"'break'"
block|,
literal|"'return'"
block|,
literal|"'new'"
block|,
literal|"'try'"
block|,
literal|"'catch'"
block|,
literal|"'throw'"
block|,
literal|"'!'"
block|,
literal|"'~'"
block|,
literal|"'*'"
block|,
literal|"'/'"
block|,
literal|"'%'"
block|,
literal|"'+'"
block|,
literal|"'-'"
block|,
literal|"'<<'"
block|,
literal|"'>>'"
block|,
literal|"'>>>'"
block|,
literal|"'<'"
block|,
literal|"'<='"
block|,
literal|"'>'"
block|,
literal|"'>='"
block|,
literal|"'=='"
block|,
literal|"'==='"
block|,
literal|"'!='"
block|,
literal|"'!=='"
block|,
literal|"'&'"
block|,
literal|"'^'"
block|,
literal|"'|'"
block|,
literal|"'&&'"
block|,
literal|"'||'"
block|,
literal|"'?'"
block|,
literal|"':'"
block|,
literal|"'++'"
block|,
literal|"'--'"
block|,
literal|"'='"
block|,
literal|"'+='"
block|,
literal|"'-='"
block|,
literal|"'*='"
block|,
literal|"'/='"
block|,
literal|"'%='"
block|,
literal|"'&='"
block|,
literal|"'^='"
block|,
literal|"'|='"
block|,
literal|"'<<='"
block|,
literal|"'>>='"
block|,
literal|"'>>>='"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|"'true'"
block|,
literal|"'false'"
block|,
literal|"'null'"
block|}
decl_stmt|;
DECL|field|_SYMBOLIC_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|_SYMBOLIC_NAMES
init|=
block|{
literal|null
block|,
literal|"WS"
block|,
literal|"COMMENT"
block|,
literal|"LBRACK"
block|,
literal|"RBRACK"
block|,
literal|"LBRACE"
block|,
literal|"RBRACE"
block|,
literal|"LP"
block|,
literal|"RP"
block|,
literal|"DOT"
block|,
literal|"COMMA"
block|,
literal|"SEMICOLON"
block|,
literal|"IF"
block|,
literal|"ELSE"
block|,
literal|"WHILE"
block|,
literal|"DO"
block|,
literal|"FOR"
block|,
literal|"CONTINUE"
block|,
literal|"BREAK"
block|,
literal|"RETURN"
block|,
literal|"NEW"
block|,
literal|"TRY"
block|,
literal|"CATCH"
block|,
literal|"THROW"
block|,
literal|"BOOLNOT"
block|,
literal|"BWNOT"
block|,
literal|"MUL"
block|,
literal|"DIV"
block|,
literal|"REM"
block|,
literal|"ADD"
block|,
literal|"SUB"
block|,
literal|"LSH"
block|,
literal|"RSH"
block|,
literal|"USH"
block|,
literal|"LT"
block|,
literal|"LTE"
block|,
literal|"GT"
block|,
literal|"GTE"
block|,
literal|"EQ"
block|,
literal|"EQR"
block|,
literal|"NE"
block|,
literal|"NER"
block|,
literal|"BWAND"
block|,
literal|"XOR"
block|,
literal|"BWOR"
block|,
literal|"BOOLAND"
block|,
literal|"BOOLOR"
block|,
literal|"COND"
block|,
literal|"COLON"
block|,
literal|"INCR"
block|,
literal|"DECR"
block|,
literal|"ASSIGN"
block|,
literal|"AADD"
block|,
literal|"ASUB"
block|,
literal|"AMUL"
block|,
literal|"ADIV"
block|,
literal|"AREM"
block|,
literal|"AAND"
block|,
literal|"AXOR"
block|,
literal|"AOR"
block|,
literal|"ALSH"
block|,
literal|"ARSH"
block|,
literal|"AUSH"
block|,
literal|"OCTAL"
block|,
literal|"HEX"
block|,
literal|"INTEGER"
block|,
literal|"DECIMAL"
block|,
literal|"STRING"
block|,
literal|"TRUE"
block|,
literal|"FALSE"
block|,
literal|"NULL"
block|,
literal|"ID"
block|,
literal|"EXTINTEGER"
block|,
literal|"EXTID"
block|}
decl_stmt|;
DECL|field|VOCABULARY
specifier|public
specifier|static
specifier|final
name|Vocabulary
name|VOCABULARY
init|=
operator|new
name|VocabularyImpl
argument_list|(
name|_LITERAL_NAMES
argument_list|,
name|_SYMBOLIC_NAMES
argument_list|)
decl_stmt|;
comment|/**    * @deprecated Use {@link #VOCABULARY} instead.    */
annotation|@
name|Deprecated
DECL|field|tokenNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|tokenNames
decl_stmt|;
static|static
block|{
name|tokenNames
operator|=
operator|new
name|String
index|[
name|_SYMBOLIC_NAMES
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokenNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tokenNames
index|[
name|i
index|]
operator|=
name|VOCABULARY
operator|.
name|getLiteralName
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenNames
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|tokenNames
index|[
name|i
index|]
operator|=
name|VOCABULARY
operator|.
name|getSymbolicName
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenNames
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|tokenNames
index|[
name|i
index|]
operator|=
literal|"<INVALID>"
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|getTokenNames
specifier|public
name|String
index|[]
name|getTokenNames
parameter_list|()
block|{
return|return
name|tokenNames
return|;
block|}
annotation|@
name|Override
DECL|method|getVocabulary
specifier|public
name|Vocabulary
name|getVocabulary
parameter_list|()
block|{
return|return
name|VOCABULARY
return|;
block|}
annotation|@
name|Override
DECL|method|getGrammarFileName
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"PainlessParser.g4"
return|;
block|}
annotation|@
name|Override
DECL|method|getRuleNames
specifier|public
name|String
index|[]
name|getRuleNames
parameter_list|()
block|{
return|return
name|ruleNames
return|;
block|}
annotation|@
name|Override
DECL|method|getSerializedATN
specifier|public
name|String
name|getSerializedATN
parameter_list|()
block|{
return|return
name|_serializedATN
return|;
block|}
annotation|@
name|Override
DECL|method|getATN
specifier|public
name|ATN
name|getATN
parameter_list|()
block|{
return|return
name|_ATN
return|;
block|}
DECL|method|PainlessParser
specifier|public
name|PainlessParser
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|_interp
operator|=
operator|new
name|ParserATNSimulator
argument_list|(
name|this
argument_list|,
name|_ATN
argument_list|,
name|_decisionToDFA
argument_list|,
name|_sharedContextCache
argument_list|)
expr_stmt|;
block|}
DECL|class|SourceContext
specifier|public
specifier|static
class|class
name|SourceContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statement
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|StatementContext
name|statement
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|SourceContext
specifier|public
name|SourceContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_source
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitSource
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|source
specifier|public
specifier|final
name|SourceContext
name|source
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|SourceContext
name|_localctx
init|=
operator|new
name|SourceContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|0
argument_list|,
name|RULE_source
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|51
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
do|do
block|{
block|{
block|{
name|setState
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|statement
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|53
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LP
operator|)
operator||
operator|(
literal|1L
operator|<<
name|IF
operator|)
operator||
operator|(
literal|1L
operator|<<
name|WHILE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DO
operator|)
operator||
operator|(
literal|1L
operator|<<
name|FOR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|CONTINUE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BREAK
operator|)
operator||
operator|(
literal|1L
operator|<<
name|RETURN
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NEW
operator|)
operator||
operator|(
literal|1L
operator|<<
name|TRY
operator|)
operator||
operator|(
literal|1L
operator|<<
name|THROW
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BOOLNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BWNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|SUB
operator|)
operator||
operator|(
literal|1L
operator|<<
name|INCR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DECR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|OCTAL
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|||
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|HEX
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|INTEGER
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|DECIMAL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|STRING
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|TRUE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|FALSE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|NULL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ID
operator|-
literal|64
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
condition|)
do|;
name|setState
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EOF
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|StatementContext
specifier|public
specifier|static
class|class
name|StatementContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|StatementContext
specifier|public
name|StatementContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_statement
return|;
block|}
DECL|method|StatementContext
specifier|public
name|StatementContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeclContext
specifier|public
specifier|static
class|class
name|DeclContext
extends|extends
name|StatementContext
block|{
DECL|method|declaration
specifier|public
name|DeclarationContext
name|declaration
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DeclarationContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DeclContext
specifier|public
name|DeclContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDecl
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|BreakContext
specifier|public
specifier|static
class|class
name|BreakContext
extends|extends
name|StatementContext
block|{
DECL|method|BREAK
specifier|public
name|TerminalNode
name|BREAK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BREAK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BreakContext
specifier|public
name|BreakContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBreak
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ThrowContext
specifier|public
specifier|static
class|class
name|ThrowContext
extends|extends
name|StatementContext
block|{
DECL|method|THROW
specifier|public
name|TerminalNode
name|THROW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|THROW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ThrowContext
specifier|public
name|ThrowContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitThrow
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ContinueContext
specifier|public
specifier|static
class|class
name|ContinueContext
extends|extends
name|StatementContext
block|{
DECL|method|CONTINUE
specifier|public
name|TerminalNode
name|CONTINUE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|CONTINUE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ContinueContext
specifier|public
name|ContinueContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitContinue
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ForContext
specifier|public
specifier|static
class|class
name|ForContext
extends|extends
name|StatementContext
block|{
DECL|method|FOR
specifier|public
name|TerminalNode
name|FOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|FOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|empty
specifier|public
name|EmptyContext
name|empty
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|EmptyContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|initializer
specifier|public
name|InitializerContext
name|initializer
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|InitializerContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|afterthought
specifier|public
name|AfterthoughtContext
name|afterthought
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|AfterthoughtContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ForContext
specifier|public
name|ForContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFor
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|TryContext
specifier|public
specifier|static
class|class
name|TryContext
extends|extends
name|StatementContext
block|{
DECL|method|TRY
specifier|public
name|TerminalNode
name|TRY
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TRY
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trap
specifier|public
name|List
argument_list|<
name|TrapContext
argument_list|>
name|trap
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|TrapContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|trap
specifier|public
name|TrapContext
name|trap
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|TrapContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|TryContext
specifier|public
name|TryContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTry
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ExprContext
specifier|public
specifier|static
class|class
name|ExprContext
extends|extends
name|StatementContext
block|{
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ExprContext
specifier|public
name|ExprContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitExpr
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|DoContext
specifier|public
specifier|static
class|class
name|DoContext
extends|extends
name|StatementContext
block|{
DECL|method|DO
specifier|public
name|TerminalNode
name|DO
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DO
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|WHILE
specifier|public
name|TerminalNode
name|WHILE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|WHILE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DoContext
specifier|public
name|DoContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDo
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|WhileContext
specifier|public
specifier|static
class|class
name|WhileContext
extends|extends
name|StatementContext
block|{
DECL|method|WHILE
specifier|public
name|TerminalNode
name|WHILE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|WHILE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|empty
specifier|public
name|EmptyContext
name|empty
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|EmptyContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|WhileContext
specifier|public
name|WhileContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitWhile
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|IfContext
specifier|public
specifier|static
class|class
name|IfContext
extends|extends
name|StatementContext
block|{
DECL|method|IF
specifier|public
name|TerminalNode
name|IF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|IF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|List
argument_list|<
name|BlockContext
argument_list|>
name|block
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|ELSE
specifier|public
name|TerminalNode
name|ELSE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ELSE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|IfContext
specifier|public
name|IfContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitIf
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ReturnContext
specifier|public
specifier|static
class|class
name|ReturnContext
extends|extends
name|StatementContext
block|{
DECL|method|RETURN
specifier|public
name|TerminalNode
name|RETURN
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RETURN
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ReturnContext
specifier|public
name|ReturnContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitReturn
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|statement
specifier|public
specifier|final
name|StatementContext
name|statement
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|StatementContext
name|_localctx
init|=
operator|new
name|StatementContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|,
name|RULE_statement
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|setState
argument_list|(
literal|125
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|8
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|IfContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|57
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|IF
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|58
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|59
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|61
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|64
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|1
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|62
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ELSE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|63
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|WhileContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|66
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WHILE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|67
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|68
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|69
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|72
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|2
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|71
argument_list|)
expr_stmt|;
name|empty
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|3
case|:
name|_localctx
operator|=
operator|new
name|DoContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|74
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DO
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|75
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|76
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WHILE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|77
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|78
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|79
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EOF
operator|||
name|_la
operator|==
name|SEMICOLON
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|4
case|:
name|_localctx
operator|=
operator|new
name|ForContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|82
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|83
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|85
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LP
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NEW
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BOOLNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BWNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|SUB
operator|)
operator||
operator|(
literal|1L
operator|<<
name|INCR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DECR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|OCTAL
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|||
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|HEX
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|INTEGER
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|DECIMAL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|STRING
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|TRUE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|FALSE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|NULL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ID
operator|-
literal|64
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
block|{
name|setState
argument_list|(
literal|84
argument_list|)
expr_stmt|;
name|initializer
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|87
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|89
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LP
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NEW
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BOOLNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BWNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|SUB
operator|)
operator||
operator|(
literal|1L
operator|<<
name|INCR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DECR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|OCTAL
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|||
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|HEX
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|INTEGER
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|DECIMAL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|STRING
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|TRUE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|FALSE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|NULL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ID
operator|-
literal|64
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
block|{
name|setState
argument_list|(
literal|88
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|91
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|93
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LP
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NEW
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BOOLNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BWNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|SUB
operator|)
operator||
operator|(
literal|1L
operator|<<
name|INCR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DECR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|OCTAL
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|||
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|HEX
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|INTEGER
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|DECIMAL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|STRING
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|TRUE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|FALSE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|NULL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ID
operator|-
literal|64
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
block|{
name|setState
argument_list|(
literal|92
argument_list|)
expr_stmt|;
name|afterthought
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|98
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|6
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|96
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|97
argument_list|)
expr_stmt|;
name|empty
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|5
case|:
name|_localctx
operator|=
operator|new
name|DeclContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|declaration
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EOF
operator|||
name|_la
operator|==
name|SEMICOLON
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|6
case|:
name|_localctx
operator|=
operator|new
name|ContinueContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|103
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONTINUE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|104
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EOF
operator|||
name|_la
operator|==
name|SEMICOLON
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|7
case|:
name|_localctx
operator|=
operator|new
name|BreakContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|105
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BREAK
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|106
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EOF
operator|||
name|_la
operator|==
name|SEMICOLON
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|8
case|:
name|_localctx
operator|=
operator|new
name|ReturnContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|107
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RETURN
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|108
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|109
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EOF
operator|||
name|_la
operator|==
name|SEMICOLON
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|9
case|:
name|_localctx
operator|=
operator|new
name|TryContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|111
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TRY
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|112
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|114
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
literal|1
expr_stmt|;
do|do
block|{
switch|switch
condition|(
name|_alt
condition|)
block|{
case|case
literal|1
case|:
block|{
block|{
name|setState
argument_list|(
literal|113
argument_list|)
expr_stmt|;
name|trap
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
name|setState
argument_list|(
literal|116
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|7
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
do|;
block|}
break|break;
case|case
literal|10
case|:
name|_localctx
operator|=
operator|new
name|ThrowContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|118
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|THROW
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|119
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EOF
operator|||
name|_la
operator|==
name|SEMICOLON
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|11
case|:
name|_localctx
operator|=
operator|new
name|ExprContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|122
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EOF
operator|||
name|_la
operator|==
name|SEMICOLON
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|BlockContext
specifier|public
specifier|static
class|class
name|BlockContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|BlockContext
specifier|public
name|BlockContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_block
return|;
block|}
DECL|method|BlockContext
specifier|public
name|BlockContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|BlockContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SingleContext
specifier|public
specifier|static
class|class
name|SingleContext
extends|extends
name|BlockContext
block|{
DECL|method|statement
specifier|public
name|StatementContext
name|statement
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SingleContext
specifier|public
name|SingleContext
parameter_list|(
name|BlockContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitSingle
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|MultipleContext
specifier|public
specifier|static
class|class
name|MultipleContext
extends|extends
name|BlockContext
block|{
DECL|method|LBRACK
specifier|public
name|TerminalNode
name|LBRACK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RBRACK
specifier|public
name|TerminalNode
name|RBRACK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statement
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|StatementContext
name|statement
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|MultipleContext
specifier|public
name|MultipleContext
parameter_list|(
name|BlockContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitMultiple
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|block
specifier|public
specifier|final
name|BlockContext
name|block
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BlockContext
name|_localctx
init|=
operator|new
name|BlockContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|,
name|RULE_block
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|136
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LBRACK
case|:
name|_localctx
operator|=
operator|new
name|MultipleContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|127
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACK
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|129
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
do|do
block|{
block|{
block|{
name|setState
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|statement
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|131
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LP
operator|)
operator||
operator|(
literal|1L
operator|<<
name|IF
operator|)
operator||
operator|(
literal|1L
operator|<<
name|WHILE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DO
operator|)
operator||
operator|(
literal|1L
operator|<<
name|FOR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|CONTINUE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BREAK
operator|)
operator||
operator|(
literal|1L
operator|<<
name|RETURN
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NEW
operator|)
operator||
operator|(
literal|1L
operator|<<
name|TRY
operator|)
operator||
operator|(
literal|1L
operator|<<
name|THROW
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BOOLNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BWNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|SUB
operator|)
operator||
operator|(
literal|1L
operator|<<
name|INCR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DECR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|OCTAL
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|||
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|HEX
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|INTEGER
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|DECIMAL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|STRING
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|TRUE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|FALSE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|NULL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ID
operator|-
literal|64
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
condition|)
do|;
name|setState
argument_list|(
literal|133
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACK
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LP
case|:
case|case
name|IF
case|:
case|case
name|WHILE
case|:
case|case
name|DO
case|:
case|case
name|FOR
case|:
case|case
name|CONTINUE
case|:
case|case
name|BREAK
case|:
case|case
name|RETURN
case|:
case|case
name|NEW
case|:
case|case
name|TRY
case|:
case|case
name|THROW
case|:
case|case
name|BOOLNOT
case|:
case|case
name|BWNOT
case|:
case|case
name|ADD
case|:
case|case
name|SUB
case|:
case|case
name|INCR
case|:
case|case
name|DECR
case|:
case|case
name|OCTAL
case|:
case|case
name|HEX
case|:
case|case
name|INTEGER
case|:
case|case
name|DECIMAL
case|:
case|case
name|STRING
case|:
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|NULL
case|:
case|case
name|ID
case|:
name|_localctx
operator|=
operator|new
name|SingleContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|135
argument_list|)
expr_stmt|;
name|statement
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|EmptyContext
specifier|public
specifier|static
class|class
name|EmptyContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|emptyscope
specifier|public
name|EmptyscopeContext
name|emptyscope
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|EmptyscopeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EmptyContext
specifier|public
name|EmptyContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_empty
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitEmpty
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|empty
specifier|public
specifier|final
name|EmptyContext
name|empty
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|EmptyContext
name|_localctx
init|=
operator|new
name|EmptyContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|6
argument_list|,
name|RULE_empty
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|140
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LBRACK
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|138
argument_list|)
expr_stmt|;
name|emptyscope
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|SEMICOLON
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|139
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|EmptyscopeContext
specifier|public
specifier|static
class|class
name|EmptyscopeContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LBRACK
specifier|public
name|TerminalNode
name|LBRACK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RBRACK
specifier|public
name|TerminalNode
name|RBRACK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EmptyscopeContext
specifier|public
name|EmptyscopeContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_emptyscope
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitEmptyscope
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|emptyscope
specifier|public
specifier|final
name|EmptyscopeContext
name|emptyscope
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|EmptyscopeContext
name|_localctx
init|=
operator|new
name|EmptyscopeContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|8
argument_list|,
name|RULE_emptyscope
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|142
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACK
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|143
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|InitializerContext
specifier|public
specifier|static
class|class
name|InitializerContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|declaration
specifier|public
name|DeclarationContext
name|declaration
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DeclarationContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|InitializerContext
specifier|public
name|InitializerContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_initializer
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitInitializer
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|initializer
specifier|public
specifier|final
name|InitializerContext
name|initializer
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|InitializerContext
name|_localctx
init|=
operator|new
name|InitializerContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|10
argument_list|,
name|RULE_initializer
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|147
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|12
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|145
argument_list|)
expr_stmt|;
name|declaration
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|146
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|AfterthoughtContext
specifier|public
specifier|static
class|class
name|AfterthoughtContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AfterthoughtContext
specifier|public
name|AfterthoughtContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_afterthought
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitAfterthought
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|afterthought
specifier|public
specifier|final
name|AfterthoughtContext
name|afterthought
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|AfterthoughtContext
name|_localctx
init|=
operator|new
name|AfterthoughtContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|12
argument_list|,
name|RULE_afterthought
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|149
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DeclarationContext
specifier|public
specifier|static
class|class
name|DeclarationContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|declvar
specifier|public
name|List
argument_list|<
name|DeclvarContext
argument_list|>
name|declvar
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|DeclvarContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|declvar
specifier|public
name|DeclvarContext
name|declvar
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|DeclvarContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|COMMA
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|TerminalNode
name|COMMA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|DeclarationContext
specifier|public
name|DeclarationContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_declaration
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDeclaration
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|declaration
specifier|public
specifier|final
name|DeclarationContext
name|declaration
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DeclarationContext
name|_localctx
init|=
operator|new
name|DeclarationContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|14
argument_list|,
name|RULE_declaration
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|151
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|152
argument_list|)
expr_stmt|;
name|declvar
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|157
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|COMMA
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|153
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|154
argument_list|)
expr_stmt|;
name|declvar
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|159
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DecltypeContext
specifier|public
specifier|static
class|class
name|DecltypeContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|identifier
specifier|public
name|IdentifierContext
name|identifier
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|IdentifierContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|LBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|TerminalNode
name|LBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|RBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|TerminalNode
name|RBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|DecltypeContext
specifier|public
name|DecltypeContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_decltype
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDecltype
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|decltype
specifier|public
specifier|final
name|DecltypeContext
name|decltype
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DecltypeContext
name|_localctx
init|=
operator|new
name|DecltypeContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|16
argument_list|,
name|RULE_decltype
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|160
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|165
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|LBRACE
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|161
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|162
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|167
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DeclvarContext
specifier|public
specifier|static
class|class
name|DeclvarContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|identifier
specifier|public
name|IdentifierContext
name|identifier
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|IdentifierContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ASSIGN
specifier|public
name|TerminalNode
name|ASSIGN
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ASSIGN
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DeclvarContext
specifier|public
name|DeclvarContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_declvar
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDeclvar
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|declvar
specifier|public
specifier|final
name|DeclvarContext
name|declvar
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DeclvarContext
name|_localctx
init|=
operator|new
name|DeclvarContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|18
argument_list|,
name|RULE_declvar
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|168
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|171
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|_la
operator|==
name|ASSIGN
condition|)
block|{
block|{
name|setState
argument_list|(
literal|169
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|170
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|TrapContext
specifier|public
specifier|static
class|class
name|TrapContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|CATCH
specifier|public
name|TerminalNode
name|CATCH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|CATCH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|identifier
specifier|public
name|List
argument_list|<
name|IdentifierContext
argument_list|>
name|identifier
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|IdentifierContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|identifier
specifier|public
name|IdentifierContext
name|identifier
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|IdentifierContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|emptyscope
specifier|public
name|EmptyscopeContext
name|emptyscope
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|EmptyscopeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TrapContext
specifier|public
name|TrapContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_trap
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTrap
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|trap
specifier|public
specifier|final
name|TrapContext
name|trap
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|TrapContext
name|_localctx
init|=
operator|new
name|TrapContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|20
argument_list|,
name|RULE_trap
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|173
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CATCH
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|174
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|175
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|176
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|178
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|181
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|16
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|179
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|emptyscope
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|IdentifierContext
specifier|public
specifier|static
class|class
name|IdentifierContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|generic
specifier|public
name|GenericContext
name|generic
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|GenericContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|IdentifierContext
specifier|public
name|IdentifierContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_identifier
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitIdentifier
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|identifier
specifier|public
specifier|final
name|IdentifierContext
name|identifier
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|IdentifierContext
name|_localctx
init|=
operator|new
name|IdentifierContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|22
argument_list|,
name|RULE_identifier
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|183
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|185
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|17
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|184
argument_list|)
expr_stmt|;
name|generic
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|GenericContext
specifier|public
specifier|static
class|class
name|GenericContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LT
specifier|public
name|TerminalNode
name|LT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|identifier
specifier|public
name|List
argument_list|<
name|IdentifierContext
argument_list|>
name|identifier
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|IdentifierContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|identifier
specifier|public
name|IdentifierContext
name|identifier
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|IdentifierContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|GT
specifier|public
name|TerminalNode
name|GT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|GT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|COMMA
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|TerminalNode
name|COMMA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|GenericContext
specifier|public
name|GenericContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_generic
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitGeneric
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|generic
specifier|public
specifier|final
name|GenericContext
name|generic
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|GenericContext
name|_localctx
init|=
operator|new
name|GenericContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|24
argument_list|,
name|RULE_generic
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|187
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|188
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|193
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|COMMA
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|189
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|190
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|195
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|setState
argument_list|(
literal|196
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ExpressionContext
specifier|public
specifier|static
class|class
name|ExpressionContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|ExpressionContext
specifier|public
name|ExpressionContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_expression
return|;
block|}
DECL|method|ExpressionContext
specifier|public
name|ExpressionContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CompContext
specifier|public
specifier|static
class|class
name|CompContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|LT
specifier|public
name|TerminalNode
name|LT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LTE
specifier|public
name|TerminalNode
name|LTE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LTE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|GT
specifier|public
name|TerminalNode
name|GT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|GT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|GTE
specifier|public
name|TerminalNode
name|GTE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|GTE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EQ
specifier|public
name|TerminalNode
name|EQ
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EQ
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EQR
specifier|public
name|TerminalNode
name|EQR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EQR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NE
specifier|public
name|TerminalNode
name|NE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NER
specifier|public
name|TerminalNode
name|NER
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NER
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|CompContext
specifier|public
name|CompContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitComp
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ReadContext
specifier|public
specifier|static
class|class
name|ReadContext
extends|extends
name|ExpressionContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ReadContext
specifier|public
name|ReadContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitRead
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|BoolContext
specifier|public
specifier|static
class|class
name|BoolContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|BOOLAND
specifier|public
name|TerminalNode
name|BOOLAND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BOOLAND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BOOLOR
specifier|public
name|TerminalNode
name|BOOLOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BOOLOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BoolContext
specifier|public
name|BoolContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBool
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ConditionalContext
specifier|public
specifier|static
class|class
name|ConditionalContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COND
specifier|public
name|TerminalNode
name|COND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|COLON
specifier|public
name|TerminalNode
name|COLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ConditionalContext
specifier|public
name|ConditionalContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitConditional
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|AssignmentContext
specifier|public
specifier|static
class|class
name|AssignmentContext
extends|extends
name|ExpressionContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ASSIGN
specifier|public
name|TerminalNode
name|ASSIGN
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ASSIGN
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AADD
specifier|public
name|TerminalNode
name|AADD
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AADD
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ASUB
specifier|public
name|TerminalNode
name|ASUB
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ASUB
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AMUL
specifier|public
name|TerminalNode
name|AMUL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AMUL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ADIV
specifier|public
name|TerminalNode
name|ADIV
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ADIV
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AREM
specifier|public
name|TerminalNode
name|AREM
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AREM
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AAND
specifier|public
name|TerminalNode
name|AAND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AAND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AXOR
specifier|public
name|TerminalNode
name|AXOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AXOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AOR
specifier|public
name|TerminalNode
name|AOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ALSH
specifier|public
name|TerminalNode
name|ALSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ALSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ARSH
specifier|public
name|TerminalNode
name|ARSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ARSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AUSH
specifier|public
name|TerminalNode
name|AUSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AUSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AssignmentContext
specifier|public
name|AssignmentContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitAssignment
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|FalseContext
specifier|public
specifier|static
class|class
name|FalseContext
extends|extends
name|ExpressionContext
block|{
DECL|method|FALSE
specifier|public
name|TerminalNode
name|FALSE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|FALSE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|FalseContext
specifier|public
name|FalseContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFalse
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NumericContext
specifier|public
specifier|static
class|class
name|NumericContext
extends|extends
name|ExpressionContext
block|{
DECL|method|OCTAL
specifier|public
name|TerminalNode
name|OCTAL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|OCTAL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|HEX
specifier|public
name|TerminalNode
name|HEX
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|HEX
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|INTEGER
specifier|public
name|TerminalNode
name|INTEGER
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|INTEGER
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DECIMAL
specifier|public
name|TerminalNode
name|DECIMAL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DECIMAL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NumericContext
specifier|public
name|NumericContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNumeric
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|UnaryContext
specifier|public
specifier|static
class|class
name|UnaryContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BOOLNOT
specifier|public
name|TerminalNode
name|BOOLNOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BOOLNOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BWNOT
specifier|public
name|TerminalNode
name|BWNOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BWNOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ADD
specifier|public
name|TerminalNode
name|ADD
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ADD
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SUB
specifier|public
name|TerminalNode
name|SUB
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SUB
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|UnaryContext
specifier|public
name|UnaryContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitUnary
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|PrecedenceContext
specifier|public
specifier|static
class|class
name|PrecedenceContext
extends|extends
name|ExpressionContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|PrecedenceContext
specifier|public
name|PrecedenceContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitPrecedence
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|PreincContext
specifier|public
specifier|static
class|class
name|PreincContext
extends|extends
name|ExpressionContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|INCR
specifier|public
name|TerminalNode
name|INCR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|INCR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DECR
specifier|public
name|TerminalNode
name|DECR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DECR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|PreincContext
specifier|public
name|PreincContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitPreinc
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|PostincContext
specifier|public
specifier|static
class|class
name|PostincContext
extends|extends
name|ExpressionContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|INCR
specifier|public
name|TerminalNode
name|INCR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|INCR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DECR
specifier|public
name|TerminalNode
name|DECR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DECR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|PostincContext
specifier|public
name|PostincContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitPostinc
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|CastContext
specifier|public
specifier|static
class|class
name|CastContext
extends|extends
name|ExpressionContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|CastContext
specifier|public
name|CastContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitCast
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NullContext
specifier|public
specifier|static
class|class
name|NullContext
extends|extends
name|ExpressionContext
block|{
DECL|method|NULL
specifier|public
name|TerminalNode
name|NULL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NULL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NullContext
specifier|public
name|NullContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNull
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|BinaryContext
specifier|public
specifier|static
class|class
name|BinaryContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|MUL
specifier|public
name|TerminalNode
name|MUL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|MUL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DIV
specifier|public
name|TerminalNode
name|DIV
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DIV
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|REM
specifier|public
name|TerminalNode
name|REM
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|REM
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ADD
specifier|public
name|TerminalNode
name|ADD
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ADD
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SUB
specifier|public
name|TerminalNode
name|SUB
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SUB
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LSH
specifier|public
name|TerminalNode
name|LSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RSH
specifier|public
name|TerminalNode
name|RSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|USH
specifier|public
name|TerminalNode
name|USH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|USH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BWAND
specifier|public
name|TerminalNode
name|BWAND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BWAND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|XOR
specifier|public
name|TerminalNode
name|XOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|XOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BWOR
specifier|public
name|TerminalNode
name|BWOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BWOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BinaryContext
specifier|public
name|BinaryContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBinary
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|TrueContext
specifier|public
specifier|static
class|class
name|TrueContext
extends|extends
name|ExpressionContext
block|{
DECL|method|TRUE
specifier|public
name|TerminalNode
name|TRUE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TRUE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TrueContext
specifier|public
name|TrueContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTrue
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|expression
specifier|public
specifier|final
name|ExpressionContext
name|expression
parameter_list|()
throws|throws
name|RecognitionException
block|{
return|return
name|expression
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|private
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|_p
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|ParserRuleContext
name|_parentctx
init|=
name|_ctx
decl_stmt|;
name|int
name|_parentState
init|=
name|getState
argument_list|()
decl_stmt|;
name|ExpressionContext
name|_localctx
init|=
operator|new
name|ExpressionContext
argument_list|(
name|_ctx
argument_list|,
name|_parentState
argument_list|)
decl_stmt|;
name|ExpressionContext
name|_prevctx
init|=
name|_localctx
decl_stmt|;
name|int
name|_startState
init|=
literal|26
decl_stmt|;
name|enterRecursionRule
argument_list|(
name|_localctx
argument_list|,
literal|26
argument_list|,
name|RULE_expression
argument_list|,
name|_p
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|224
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|19
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|_localctx
operator|=
operator|new
name|UnaryContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|199
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|BOOLNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BWNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|SUB
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|14
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|_localctx
operator|=
operator|new
name|CastContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|201
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|202
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|203
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|204
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|13
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
block|{
name|_localctx
operator|=
operator|new
name|AssignmentContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|206
argument_list|)
expr_stmt|;
name|chain
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|207
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|ASSIGN
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ASUB
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AMUL
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADIV
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AREM
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AAND
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AXOR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AOR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ALSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ARSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AUSH
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|208
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
block|{
name|_localctx
operator|=
operator|new
name|PrecedenceContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|210
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|211
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|212
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
block|{
name|_localctx
operator|=
operator|new
name|NumericContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|214
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|63
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|63
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|OCTAL
operator|-
literal|63
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|HEX
operator|-
literal|63
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|INTEGER
operator|-
literal|63
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|DECIMAL
operator|-
literal|63
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|6
case|:
block|{
name|_localctx
operator|=
operator|new
name|TrueContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|215
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
block|{
name|_localctx
operator|=
operator|new
name|FalseContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|216
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
block|{
name|_localctx
operator|=
operator|new
name|NullContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|217
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
block|{
name|_localctx
operator|=
operator|new
name|PostincContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|218
argument_list|)
expr_stmt|;
name|chain
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|219
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|INCR
operator|||
name|_la
operator|==
name|DECR
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|10
case|:
block|{
name|_localctx
operator|=
operator|new
name|PreincContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|221
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|INCR
operator|||
name|_la
operator|==
name|DECR
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|222
argument_list|)
expr_stmt|;
name|chain
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
block|{
name|_localctx
operator|=
operator|new
name|ReadContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|223
argument_list|)
expr_stmt|;
name|chain
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
name|_ctx
operator|.
name|stop
operator|=
name|_input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|264
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|21
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|_parseListeners
operator|!=
literal|null
condition|)
name|triggerExitRuleEvent
argument_list|()
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
block|{
name|setState
argument_list|(
literal|262
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|20
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|226
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|12
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 12)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|227
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|MUL
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DIV
operator|)
operator||
operator|(
literal|1L
operator|<<
name|REM
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|228
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|13
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|229
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|11
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 11)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|230
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|ADD
operator|||
name|_la
operator|==
name|SUB
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|231
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|12
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|232
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|10
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 10)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|233
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|RSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|USH
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|234
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|11
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
block|{
name|_localctx
operator|=
operator|new
name|CompContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|235
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|9
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 9)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|236
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|LTE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|GT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|GTE
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|237
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
block|{
name|_localctx
operator|=
operator|new
name|CompContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|238
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|8
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 8)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|239
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|EQ
operator|)
operator||
operator|(
literal|1L
operator|<<
name|EQR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NER
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|240
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|241
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|7
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 7)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|242
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BWAND
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|243
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|244
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|6
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 6)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|245
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|246
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|247
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|5
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 5)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|248
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BWOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|249
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
block|{
name|_localctx
operator|=
operator|new
name|BoolContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|250
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|4
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 4)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|251
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BOOLAND
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|252
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
block|{
name|_localctx
operator|=
operator|new
name|BoolContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|253
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|3
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 3)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|254
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BOOLOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|255
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
block|{
name|_localctx
operator|=
operator|new
name|ConditionalContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|256
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|2
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 2)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|257
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COND
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|258
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|259
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|260
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
name|setState
argument_list|(
literal|266
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|21
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unrollRecursionContexts
argument_list|(
name|_parentctx
argument_list|)
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ChainContext
specifier|public
specifier|static
class|class
name|ChainContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|linkprec
specifier|public
name|LinkprecContext
name|linkprec
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkprecContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkcast
specifier|public
name|LinkcastContext
name|linkcast
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkcastContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkvar
specifier|public
name|LinkvarContext
name|linkvar
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkvarContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linknew
specifier|public
name|LinknewContext
name|linknew
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinknewContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkstring
specifier|public
name|LinkstringContext
name|linkstring
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkstringContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ChainContext
specifier|public
name|ChainContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_chain
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitChain
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|chain
specifier|public
specifier|final
name|ChainContext
name|chain
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|ChainContext
name|_localctx
init|=
operator|new
name|ChainContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|28
argument_list|,
name|RULE_chain
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|272
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|22
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|267
argument_list|)
expr_stmt|;
name|linkprec
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|268
argument_list|)
expr_stmt|;
name|linkcast
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|269
argument_list|)
expr_stmt|;
name|linkvar
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|270
argument_list|)
expr_stmt|;
name|linknew
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|271
argument_list|)
expr_stmt|;
name|linkstring
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LinkprecContext
specifier|public
specifier|static
class|class
name|LinkprecContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkprec
specifier|public
name|LinkprecContext
name|linkprec
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkprecContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkcast
specifier|public
name|LinkcastContext
name|linkcast
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkcastContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkvar
specifier|public
name|LinkvarContext
name|linkvar
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkvarContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linknew
specifier|public
name|LinknewContext
name|linknew
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinknewContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkstring
specifier|public
name|LinkstringContext
name|linkstring
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkstringContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkdot
specifier|public
name|LinkdotContext
name|linkdot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkdotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkbrace
specifier|public
name|LinkbraceContext
name|linkbrace
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkbraceContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LinkprecContext
specifier|public
name|LinkprecContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_linkprec
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLinkprec
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|linkprec
specifier|public
specifier|final
name|LinkprecContext
name|linkprec
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LinkprecContext
name|_localctx
init|=
operator|new
name|LinkprecContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|30
argument_list|,
name|RULE_linkprec
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|274
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|280
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|23
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|275
argument_list|)
expr_stmt|;
name|linkprec
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|276
argument_list|)
expr_stmt|;
name|linkcast
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
block|{
name|setState
argument_list|(
literal|277
argument_list|)
expr_stmt|;
name|linkvar
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
block|{
name|setState
argument_list|(
literal|278
argument_list|)
expr_stmt|;
name|linknew
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
block|{
name|setState
argument_list|(
literal|279
argument_list|)
expr_stmt|;
name|linkstring
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
name|setState
argument_list|(
literal|282
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|285
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|24
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|283
argument_list|)
expr_stmt|;
name|linkdot
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|284
argument_list|)
expr_stmt|;
name|linkbrace
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LinkcastContext
specifier|public
specifier|static
class|class
name|LinkcastContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkprec
specifier|public
name|LinkprecContext
name|linkprec
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkprecContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkcast
specifier|public
name|LinkcastContext
name|linkcast
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkcastContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkvar
specifier|public
name|LinkvarContext
name|linkvar
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkvarContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linknew
specifier|public
name|LinknewContext
name|linknew
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinknewContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkstring
specifier|public
name|LinkstringContext
name|linkstring
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkstringContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LinkcastContext
specifier|public
name|LinkcastContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_linkcast
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLinkcast
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|linkcast
specifier|public
specifier|final
name|LinkcastContext
name|linkcast
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LinkcastContext
name|_localctx
init|=
operator|new
name|LinkcastContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|32
argument_list|,
name|RULE_linkcast
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|287
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|288
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|289
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|295
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|25
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|290
argument_list|)
expr_stmt|;
name|linkprec
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|291
argument_list|)
expr_stmt|;
name|linkcast
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
block|{
name|setState
argument_list|(
literal|292
argument_list|)
expr_stmt|;
name|linkvar
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
block|{
name|setState
argument_list|(
literal|293
argument_list|)
expr_stmt|;
name|linknew
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
block|{
name|setState
argument_list|(
literal|294
argument_list|)
expr_stmt|;
name|linkstring
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LinkbraceContext
specifier|public
specifier|static
class|class
name|LinkbraceContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LBRACE
specifier|public
name|TerminalNode
name|LBRACE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|TerminalNode
name|RBRACE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkdot
specifier|public
name|LinkdotContext
name|linkdot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkdotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkbrace
specifier|public
name|LinkbraceContext
name|linkbrace
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkbraceContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LinkbraceContext
specifier|public
name|LinkbraceContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_linkbrace
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLinkbrace
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|linkbrace
specifier|public
specifier|final
name|LinkbraceContext
name|linkbrace
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LinkbraceContext
name|_localctx
init|=
operator|new
name|LinkbraceContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|34
argument_list|,
name|RULE_linkbrace
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|297
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|298
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|299
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|302
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|26
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|linkdot
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|301
argument_list|)
expr_stmt|;
name|linkbrace
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LinkdotContext
specifier|public
specifier|static
class|class
name|LinkdotContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|DOT
specifier|public
name|TerminalNode
name|DOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkcall
specifier|public
name|LinkcallContext
name|linkcall
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkcallContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkfield
specifier|public
name|LinkfieldContext
name|linkfield
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkfieldContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LinkdotContext
specifier|public
name|LinkdotContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_linkdot
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLinkdot
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|linkdot
specifier|public
specifier|final
name|LinkdotContext
name|linkdot
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LinkdotContext
name|_localctx
init|=
operator|new
name|LinkdotContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|36
argument_list|,
name|RULE_linkdot
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|304
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|307
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|27
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|305
argument_list|)
expr_stmt|;
name|linkcall
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|306
argument_list|)
expr_stmt|;
name|linkfield
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LinkcallContext
specifier|public
specifier|static
class|class
name|LinkcallContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|EXTID
specifier|public
name|TerminalNode
name|EXTID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EXTID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|arguments
specifier|public
name|ArgumentsContext
name|arguments
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ArgumentsContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkdot
specifier|public
name|LinkdotContext
name|linkdot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkdotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkbrace
specifier|public
name|LinkbraceContext
name|linkbrace
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkbraceContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LinkcallContext
specifier|public
name|LinkcallContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_linkcall
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLinkcall
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|linkcall
specifier|public
specifier|final
name|LinkcallContext
name|linkcall
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LinkcallContext
name|_localctx
init|=
operator|new
name|LinkcallContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|38
argument_list|,
name|RULE_linkcall
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|309
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EXTID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|310
argument_list|)
expr_stmt|;
name|arguments
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|313
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|28
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|311
argument_list|)
expr_stmt|;
name|linkdot
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|312
argument_list|)
expr_stmt|;
name|linkbrace
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LinkvarContext
specifier|public
specifier|static
class|class
name|LinkvarContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|identifier
specifier|public
name|IdentifierContext
name|identifier
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|IdentifierContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkdot
specifier|public
name|LinkdotContext
name|linkdot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkdotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkbrace
specifier|public
name|LinkbraceContext
name|linkbrace
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkbraceContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LinkvarContext
specifier|public
name|LinkvarContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_linkvar
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLinkvar
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|linkvar
specifier|public
specifier|final
name|LinkvarContext
name|linkvar
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LinkvarContext
name|_localctx
init|=
operator|new
name|LinkvarContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|40
argument_list|,
name|RULE_linkvar
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|315
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|318
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|29
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|316
argument_list|)
expr_stmt|;
name|linkdot
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|317
argument_list|)
expr_stmt|;
name|linkbrace
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LinkfieldContext
specifier|public
specifier|static
class|class
name|LinkfieldContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|EXTID
specifier|public
name|TerminalNode
name|EXTID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EXTID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EXTINTEGER
specifier|public
name|TerminalNode
name|EXTINTEGER
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EXTINTEGER
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkdot
specifier|public
name|LinkdotContext
name|linkdot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkdotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkbrace
specifier|public
name|LinkbraceContext
name|linkbrace
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkbraceContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LinkfieldContext
specifier|public
name|LinkfieldContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_linkfield
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLinkfield
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|linkfield
specifier|public
specifier|final
name|LinkfieldContext
name|linkfield
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LinkfieldContext
name|_localctx
init|=
operator|new
name|LinkfieldContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|42
argument_list|,
name|RULE_linkfield
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|320
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EXTINTEGER
operator|||
name|_la
operator|==
name|EXTID
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|323
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|30
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|321
argument_list|)
expr_stmt|;
name|linkdot
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|322
argument_list|)
expr_stmt|;
name|linkbrace
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LinknewContext
specifier|public
specifier|static
class|class
name|LinknewContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|NEW
specifier|public
name|TerminalNode
name|NEW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NEW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|identifier
specifier|public
name|IdentifierContext
name|identifier
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|IdentifierContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|arguments
specifier|public
name|ArgumentsContext
name|arguments
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ArgumentsContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkdot
specifier|public
name|LinkdotContext
name|linkdot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkdotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|LBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|TerminalNode
name|LBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|RBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|TerminalNode
name|RBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|LinknewContext
specifier|public
name|LinknewContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_linknew
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLinknew
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|linknew
specifier|public
specifier|final
name|LinknewContext
name|linknew
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LinknewContext
name|_localctx
init|=
operator|new
name|LinknewContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|44
argument_list|,
name|RULE_linknew
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|325
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NEW
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|326
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|342
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LP
case|:
block|{
block|{
name|setState
argument_list|(
literal|327
argument_list|)
expr_stmt|;
name|arguments
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|329
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|31
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|328
argument_list|)
expr_stmt|;
name|linkdot
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
break|break;
case|case
name|LBRACE
case|:
block|{
block|{
name|setState
argument_list|(
literal|335
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
literal|1
expr_stmt|;
do|do
block|{
switch|switch
condition|(
name|_alt
condition|)
block|{
case|case
literal|1
case|:
block|{
block|{
name|setState
argument_list|(
literal|331
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|332
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|333
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
name|setState
argument_list|(
literal|337
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|32
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
do|;
name|setState
argument_list|(
literal|340
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|33
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|339
argument_list|)
expr_stmt|;
name|linkdot
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|LinkstringContext
specifier|public
specifier|static
class|class
name|LinkstringContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|STRING
specifier|public
name|TerminalNode
name|STRING
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|STRING
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkdot
specifier|public
name|LinkdotContext
name|linkdot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkdotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|linkbrace
specifier|public
name|LinkbraceContext
name|linkbrace
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|LinkbraceContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LinkstringContext
specifier|public
name|LinkstringContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_linkstring
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitLinkstring
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|linkstring
specifier|public
specifier|final
name|LinkstringContext
name|linkstring
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|LinkstringContext
name|_localctx
init|=
operator|new
name|LinkstringContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|46
argument_list|,
name|RULE_linkstring
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|344
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|347
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|35
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|345
argument_list|)
expr_stmt|;
name|linkdot
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|346
argument_list|)
expr_stmt|;
name|linkbrace
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ArgumentsContext
specifier|public
specifier|static
class|class
name|ArgumentsContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|COMMA
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|TerminalNode
name|COMMA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|ArgumentsContext
specifier|public
name|ArgumentsContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_arguments
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitArguments
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|arguments
specifier|public
specifier|final
name|ArgumentsContext
name|arguments
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|ArgumentsContext
name|_localctx
init|=
operator|new
name|ArgumentsContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|48
argument_list|,
name|RULE_arguments
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
block|{
name|setState
argument_list|(
literal|349
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|358
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LP
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NEW
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BOOLNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BWNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|SUB
operator|)
operator||
operator|(
literal|1L
operator|<<
name|INCR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DECR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|OCTAL
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|||
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|HEX
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|INTEGER
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|DECIMAL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|STRING
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|TRUE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|FALSE
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|NULL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|ID
operator|-
literal|64
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
block|{
name|setState
argument_list|(
literal|350
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|355
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|COMMA
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|351
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|352
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|357
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|360
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|method|sempred
specifier|public
name|boolean
name|sempred
parameter_list|(
name|RuleContext
name|_localctx
parameter_list|,
name|int
name|ruleIndex
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|ruleIndex
condition|)
block|{
case|case
literal|13
case|:
return|return
name|expression_sempred
argument_list|(
operator|(
name|ExpressionContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|expression_sempred
specifier|private
name|boolean
name|expression_sempred
parameter_list|(
name|ExpressionContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|12
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|11
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|10
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|9
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|8
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|7
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|6
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|5
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|4
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|3
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|2
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|field|_serializedATN
specifier|public
specifier|static
specifier|final
name|String
name|_serializedATN
init|=
literal|"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3K\u016d\4\2\t\2\4"
operator|+
literal|"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"
operator|+
literal|"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"
operator|+
literal|"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"
operator|+
literal|"\4\32\t\32\3\2\6\2\66\n\2\r\2\16\2\67\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3"
operator|+
literal|"\3\3\5\3C\n\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3K\n\3\3\3\3\3\3\3\3\3\3\3\3\3"
operator|+
literal|"\3\3\3\3\3\3\3\3\3\3\5\3X\n\3\3\3\3\3\5\3\\\n\3\3\3\3\3\5\3`\n\3\3\3\3"
operator|+
literal|"\3\3\3\5\3e\n\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"
operator|+
literal|"\3\6\3u\n\3\r\3\16\3v\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0080\n\3\3\4\3"
operator|+
literal|"\4\6\4\u0084\n\4\r\4\16\4\u0085\3\4\3\4\3\4\5\4\u008b\n\4\3\5\3\5\5\5"
operator|+
literal|"\u008f\n\5\3\6\3\6\3\6\3\7\3\7\5\7\u0096\n\7\3\b\3\b\3\t\3\t\3\t\3\t\7"
operator|+
literal|"\t\u009e\n\t\f\t\16\t\u00a1\13\t\3\n\3\n\3\n\7\n\u00a6\n\n\f\n\16\n\u00a9"
operator|+
literal|"\13\n\3\13\3\13\3\13\5\13\u00ae\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5"
operator|+
literal|"\f\u00b8\n\f\3\r\3\r\5\r\u00bc\n\r\3\16\3\16\3\16\3\16\7\16\u00c2\n\16"
operator|+
literal|"\f\16\16\16\u00c5\13\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3"
operator|+
literal|"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3"
operator|+
literal|"\17\3\17\3\17\3\17\3\17\5\17\u00e3\n\17\3\17\3\17\3\17\3\17\3\17\3\17"
operator|+
literal|"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"
operator|+
literal|"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"
operator|+
literal|"\3\17\3\17\7\17\u0109\n\17\f\17\16\17\u010c\13\17\3\20\3\20\3\20\3\20"
operator|+
literal|"\3\20\5\20\u0113\n\20\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u011b\n\21\3"
operator|+
literal|"\21\3\21\3\21\5\21\u0120\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22"
operator|+
literal|"\5\22\u012a\n\22\3\23\3\23\3\23\3\23\3\23\5\23\u0131\n\23\3\24\3\24\3"
operator|+
literal|"\24\5\24\u0136\n\24\3\25\3\25\3\25\3\25\5\25\u013c\n\25\3\26\3\26\3\26"
operator|+
literal|"\5\26\u0141\n\26\3\27\3\27\3\27\5\27\u0146\n\27\3\30\3\30\3\30\3\30\5"
operator|+
literal|"\30\u014c\n\30\3\30\3\30\3\30\3\30\6\30\u0152\n\30\r\30\16\30\u0153\3"
operator|+
literal|"\30\5\30\u0157\n\30\5\30\u0159\n\30\3\31\3\31\3\31\5\31\u015e\n\31\3\32"
operator|+
literal|"\3\32\3\32\3\32\7\32\u0164\n\32\f\32\16\32\u0167\13\32\5\32\u0169\n\32"
operator|+
literal|"\3\32\3\32\3\32\2\3\34\33\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&"
operator|+
literal|"(*,.\60\62\2\r\3\3\r\r\4\2\32\33\37 \3\2\65@\3\2AD\3\2\63\64\3\2\34\36"
operator|+
literal|"\3\2\37 \3\2!#\3\2$\'\3\2(+\3\2JK\u01a3\2\65\3\2\2\2\4\177\3\2\2\2\6\u008a"
operator|+
literal|"\3\2\2\2\b\u008e\3\2\2\2\n\u0090\3\2\2\2\f\u0095\3\2\2\2\16\u0097\3\2"
operator|+
literal|"\2\2\20\u0099\3\2\2\2\22\u00a2\3\2\2\2\24\u00aa\3\2\2\2\26\u00af\3\2\2"
operator|+
literal|"\2\30\u00b9\3\2\2\2\32\u00bd\3\2\2\2\34\u00e2\3\2\2\2\36\u0112\3\2\2\2"
operator|+
literal|" \u0114\3\2\2\2\"\u0121\3\2\2\2$\u012b\3\2\2\2&\u0132\3\2\2\2(\u0137\3"
operator|+
literal|"\2\2\2*\u013d\3\2\2\2,\u0142\3\2\2\2.\u0147\3\2\2\2\60\u015a\3\2\2\2\62"
operator|+
literal|"\u015f\3\2\2\2\64\66\5\4\3\2\65\64\3\2\2\2\66\67\3\2\2\2\67\65\3\2\2\2"
operator|+
literal|"\678\3\2\2\289\3\2\2\29:\7\2\2\3:\3\3\2\2\2;<\7\16\2\2<=\7\t\2\2=>\5\34"
operator|+
literal|"\17\2>?\7\n\2\2?B\5\6\4\2@A\7\17\2\2AC\5\6\4\2B@\3\2\2\2BC\3\2\2\2C\u0080"
operator|+
literal|"\3\2\2\2DE\7\20\2\2EF\7\t\2\2FG\5\34\17\2GJ\7\n\2\2HK\5\6\4\2IK\5\b\5"
operator|+
literal|"\2JH\3\2\2\2JI\3\2\2\2K\u0080\3\2\2\2LM\7\21\2\2MN\5\6\4\2NO\7\20\2\2"
operator|+
literal|"OP\7\t\2\2PQ\5\34\17\2QR\7\n\2\2RS\t\2\2\2S\u0080\3\2\2\2TU\7\22\2\2U"
operator|+
literal|"W\7\t\2\2VX\5\f\7\2WV\3\2\2\2WX\3\2\2\2XY\3\2\2\2Y[\7\r\2\2Z\\\5\34\17"
operator|+
literal|"\2[Z\3\2\2\2[\\\3\2\2\2\\]\3\2\2\2]_\7\r\2\2^`\5\16\b\2_^\3\2\2\2_`\3"
operator|+
literal|"\2\2\2`a\3\2\2\2ad\7\n\2\2be\5\6\4\2ce\5\b\5\2db\3\2\2\2dc\3\2\2\2e\u0080"
operator|+
literal|"\3\2\2\2fg\5\20\t\2gh\t\2\2\2h\u0080\3\2\2\2ij\7\23\2\2j\u0080\t\2\2\2"
operator|+
literal|"kl\7\24\2\2l\u0080\t\2\2\2mn\7\25\2\2no\5\34\17\2op\t\2\2\2p\u0080\3\2"
operator|+
literal|"\2\2qr\7\27\2\2rt\5\6\4\2su\5\26\f\2ts\3\2\2\2uv\3\2\2\2vt\3\2\2\2vw\3"
operator|+
literal|"\2\2\2w\u0080\3\2\2\2xy\7\31\2\2yz\5\34\17\2z{\t\2\2\2{\u0080\3\2\2\2"
operator|+
literal|"|}\5\34\17\2}~\t\2\2\2~\u0080\3\2\2\2\177;\3\2\2\2\177D\3\2\2\2\177L\3"
operator|+
literal|"\2\2\2\177T\3\2\2\2\177f\3\2\2\2\177i\3\2\2\2\177k\3\2\2\2\177m\3\2\2"
operator|+
literal|"\2\177q\3\2\2\2\177x\3\2\2\2\177|\3\2\2\2\u0080\5\3\2\2\2\u0081\u0083"
operator|+
literal|"\7\5\2\2\u0082\u0084\5\4\3\2\u0083\u0082\3\2\2\2\u0084\u0085\3\2\2\2\u0085"
operator|+
literal|"\u0083\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0087\3\2\2\2\u0087\u0088\7\6"
operator|+
literal|"\2\2\u0088\u008b\3\2\2\2\u0089\u008b\5\4\3\2\u008a\u0081\3\2\2\2\u008a"
operator|+
literal|"\u0089\3\2\2\2\u008b\7\3\2\2\2\u008c\u008f\5\n\6\2\u008d\u008f\7\r\2\2"
operator|+
literal|"\u008e\u008c\3\2\2\2\u008e\u008d\3\2\2\2\u008f\t\3\2\2\2\u0090\u0091\7"
operator|+
literal|"\5\2\2\u0091\u0092\7\6\2\2\u0092\13\3\2\2\2\u0093\u0096\5\20\t\2\u0094"
operator|+
literal|"\u0096\5\34\17\2\u0095\u0093\3\2\2\2\u0095\u0094\3\2\2\2\u0096\r\3\2\2"
operator|+
literal|"\2\u0097\u0098\5\34\17\2\u0098\17\3\2\2\2\u0099\u009a\5\22\n\2\u009a\u009f"
operator|+
literal|"\5\24\13\2\u009b\u009c\7\f\2\2\u009c\u009e\5\24\13\2\u009d\u009b\3\2\2"
operator|+
literal|"\2\u009e\u00a1\3\2\2\2\u009f\u009d\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\21"
operator|+
literal|"\3\2\2\2\u00a1\u009f\3\2\2\2\u00a2\u00a7\5\30\r\2\u00a3\u00a4\7\7\2\2"
operator|+
literal|"\u00a4\u00a6\7\b\2\2\u00a5\u00a3\3\2\2\2\u00a6\u00a9\3\2\2\2\u00a7\u00a5"
operator|+
literal|"\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\23\3\2\2\2\u00a9\u00a7\3\2\2\2\u00aa"
operator|+
literal|"\u00ad\5\30\r\2\u00ab\u00ac\7\65\2\2\u00ac\u00ae\5\34\17\2\u00ad\u00ab"
operator|+
literal|"\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\25\3\2\2\2\u00af\u00b0\7\30\2\2\u00b0"
operator|+
literal|"\u00b1\7\t\2\2\u00b1\u00b2\5\30\r\2\u00b2\u00b3\5\30\r\2\u00b3\u00b4\3"
operator|+
literal|"\2\2\2\u00b4\u00b7\7\n\2\2\u00b5\u00b8\5\6\4\2\u00b6\u00b8\5\n\6\2\u00b7"
operator|+
literal|"\u00b5\3\2\2\2\u00b7\u00b6\3\2\2\2\u00b8\27\3\2\2\2\u00b9\u00bb\7I\2\2"
operator|+
literal|"\u00ba\u00bc\5\32\16\2\u00bb\u00ba\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\31"
operator|+
literal|"\3\2\2\2\u00bd\u00be\7$\2\2\u00be\u00c3\5\30\r\2\u00bf\u00c0\7\f\2\2\u00c0"
operator|+
literal|"\u00c2\5\30\r\2\u00c1\u00bf\3\2\2\2\u00c2\u00c5\3\2\2\2\u00c3\u00c1\3"
operator|+
literal|"\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c6\3\2\2\2\u00c5\u00c3\3\2\2\2\u00c6"
operator|+
literal|"\u00c7\7&\2\2\u00c7\33\3\2\2\2\u00c8\u00c9\b\17\1\2\u00c9\u00ca\t\3\2"
operator|+
literal|"\2\u00ca\u00e3\5\34\17\20\u00cb\u00cc\7\t\2\2\u00cc\u00cd\5\22\n\2\u00cd"
operator|+
literal|"\u00ce\7\n\2\2\u00ce\u00cf\5\34\17\17\u00cf\u00e3\3\2\2\2\u00d0\u00d1"
operator|+
literal|"\5\36\20\2\u00d1\u00d2\t\4\2\2\u00d2\u00d3\5\34\17\3\u00d3\u00e3\3\2\2"
operator|+
literal|"\2\u00d4\u00d5\7\t\2\2\u00d5\u00d6\5\34\17\2\u00d6\u00d7\7\n\2\2\u00d7"
operator|+
literal|"\u00e3\3\2\2\2\u00d8\u00e3\t\5\2\2\u00d9\u00e3\7F\2\2\u00da\u00e3\7G\2"
operator|+
literal|"\2\u00db\u00e3\7H\2\2\u00dc\u00dd\5\36\20\2\u00dd\u00de\t\6\2\2\u00de"
operator|+
literal|"\u00e3\3\2\2\2\u00df\u00e0\t\6\2\2\u00e0\u00e3\5\36\20\2\u00e1\u00e3\5"
operator|+
literal|"\36\20\2\u00e2\u00c8\3\2\2\2\u00e2\u00cb\3\2\2\2\u00e2\u00d0\3\2\2\2\u00e2"
operator|+
literal|"\u00d4\3\2\2\2\u00e2\u00d8\3\2\2\2\u00e2\u00d9\3\2\2\2\u00e2\u00da\3\2"
operator|+
literal|"\2\2\u00e2\u00db\3\2\2\2\u00e2\u00dc\3\2\2\2\u00e2\u00df\3\2\2\2\u00e2"
operator|+
literal|"\u00e1\3\2\2\2\u00e3\u010a\3\2\2\2\u00e4\u00e5\f\16\2\2\u00e5\u00e6\t"
operator|+
literal|"\7\2\2\u00e6\u0109\5\34\17\17\u00e7\u00e8\f\r\2\2\u00e8\u00e9\t\b\2\2"
operator|+
literal|"\u00e9\u0109\5\34\17\16\u00ea\u00eb\f\f\2\2\u00eb\u00ec\t\t\2\2\u00ec"
operator|+
literal|"\u0109\5\34\17\r\u00ed\u00ee\f\13\2\2\u00ee\u00ef\t\n\2\2\u00ef\u0109"
operator|+
literal|"\5\34\17\f\u00f0\u00f1\f\n\2\2\u00f1\u00f2\t\13\2\2\u00f2\u0109\5\34\17"
operator|+
literal|"\13\u00f3\u00f4\f\t\2\2\u00f4\u00f5\7,\2\2\u00f5\u0109\5\34\17\n\u00f6"
operator|+
literal|"\u00f7\f\b\2\2\u00f7\u00f8\7-\2\2\u00f8\u0109\5\34\17\t\u00f9\u00fa\f"
operator|+
literal|"\7\2\2\u00fa\u00fb\7.\2\2\u00fb\u0109\5\34\17\b\u00fc\u00fd\f\6\2\2\u00fd"
operator|+
literal|"\u00fe\7/\2\2\u00fe\u0109\5\34\17\7\u00ff\u0100\f\5\2\2\u0100\u0101\7"
operator|+
literal|"\60\2\2\u0101\u0109\5\34\17\6\u0102\u0103\f\4\2\2\u0103\u0104\7\61\2\2"
operator|+
literal|"\u0104\u0105\5\34\17\2\u0105\u0106\7\62\2\2\u0106\u0107\5\34\17\4\u0107"
operator|+
literal|"\u0109\3\2\2\2\u0108\u00e4\3\2\2\2\u0108\u00e7\3\2\2\2\u0108\u00ea\3\2"
operator|+
literal|"\2\2\u0108\u00ed\3\2\2\2\u0108\u00f0\3\2\2\2\u0108\u00f3\3\2\2\2\u0108"
operator|+
literal|"\u00f6\3\2\2\2\u0108\u00f9\3\2\2\2\u0108\u00fc\3\2\2\2\u0108\u00ff\3\2"
operator|+
literal|"\2\2\u0108\u0102\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u0108\3\2\2\2\u010a"
operator|+
literal|"\u010b\3\2\2\2\u010b\35\3\2\2\2\u010c\u010a\3\2\2\2\u010d\u0113\5 \21"
operator|+
literal|"\2\u010e\u0113\5\"\22\2\u010f\u0113\5*\26\2\u0110\u0113\5.\30\2\u0111"
operator|+
literal|"\u0113\5\60\31\2\u0112\u010d\3\2\2\2\u0112\u010e\3\2\2\2\u0112\u010f\3"
operator|+
literal|"\2\2\2\u0112\u0110\3\2\2\2\u0112\u0111\3\2\2\2\u0113\37\3\2\2\2\u0114"
operator|+
literal|"\u011a\7\t\2\2\u0115\u011b\5 \21\2\u0116\u011b\5\"\22\2\u0117\u011b\5"
operator|+
literal|"*\26\2\u0118\u011b\5.\30\2\u0119\u011b\5\60\31\2\u011a\u0115\3\2\2\2\u011a"
operator|+
literal|"\u0116\3\2\2\2\u011a\u0117\3\2\2\2\u011a\u0118\3\2\2\2\u011a\u0119\3\2"
operator|+
literal|"\2\2\u011b\u011c\3\2\2\2\u011c\u011f\7\n\2\2\u011d\u0120\5&\24\2\u011e"
operator|+
literal|"\u0120\5$\23\2\u011f\u011d\3\2\2\2\u011f\u011e\3\2\2\2\u011f\u0120\3\2"
operator|+
literal|"\2\2\u0120!\3\2\2\2\u0121\u0122\7\t\2\2\u0122\u0123\5\22\n\2\u0123\u0129"
operator|+
literal|"\7\n\2\2\u0124\u012a\5 \21\2\u0125\u012a\5\"\22\2\u0126\u012a\5*\26\2"
operator|+
literal|"\u0127\u012a\5.\30\2\u0128\u012a\5\60\31\2\u0129\u0124\3\2\2\2\u0129\u0125"
operator|+
literal|"\3\2\2\2\u0129\u0126\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u0128\3\2\2\2\u012a"
operator|+
literal|"#\3\2\2\2\u012b\u012c\7\7\2\2\u012c\u012d\5\34\17\2\u012d\u0130\7\b\2"
operator|+
literal|"\2\u012e\u0131\5&\24\2\u012f\u0131\5$\23\2\u0130\u012e\3\2\2\2\u0130\u012f"
operator|+
literal|"\3\2\2\2\u0130\u0131\3\2\2\2\u0131%\3\2\2\2\u0132\u0135\7\13\2\2\u0133"
operator|+
literal|"\u0136\5(\25\2\u0134\u0136\5,\27\2\u0135\u0133\3\2\2\2\u0135\u0134\3\2"
operator|+
literal|"\2\2\u0136\'\3\2\2\2\u0137\u0138\7K\2\2\u0138\u013b\5\62\32\2\u0139\u013c"
operator|+
literal|"\5&\24\2\u013a\u013c\5$\23\2\u013b\u0139\3\2\2\2\u013b\u013a\3\2\2\2\u013b"
operator|+
literal|"\u013c\3\2\2\2\u013c)\3\2\2\2\u013d\u0140\5\30\r\2\u013e\u0141\5&\24\2"
operator|+
literal|"\u013f\u0141\5$\23\2\u0140\u013e\3\2\2\2\u0140\u013f\3\2\2\2\u0140\u0141"
operator|+
literal|"\3\2\2\2\u0141+\3\2\2\2\u0142\u0145\t\f\2\2\u0143\u0146\5&\24\2\u0144"
operator|+
literal|"\u0146\5$\23\2\u0145\u0143\3\2\2\2\u0145\u0144\3\2\2\2\u0145\u0146\3\2"
operator|+
literal|"\2\2\u0146-\3\2\2\2\u0147\u0148\7\26\2\2\u0148\u0158\5\30\r\2\u0149\u014b"
operator|+
literal|"\5\62\32\2\u014a\u014c\5&\24\2\u014b\u014a\3\2\2\2\u014b\u014c\3\2\2\2"
operator|+
literal|"\u014c\u0159\3\2\2\2\u014d\u014e\7\7\2\2\u014e\u014f\5\34\17\2\u014f\u0150"
operator|+
literal|"\7\b\2\2\u0150\u0152\3\2\2\2\u0151\u014d\3\2\2\2\u0152\u0153\3\2\2\2\u0153"
operator|+
literal|"\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0156\3\2\2\2\u0155\u0157\5&"
operator|+
literal|"\24\2\u0156\u0155\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0159\3\2\2\2\u0158"
operator|+
literal|"\u0149\3\2\2\2\u0158\u0151\3\2\2\2\u0159/\3\2\2\2\u015a\u015d\7E\2\2\u015b"
operator|+
literal|"\u015e\5&\24\2\u015c\u015e\5$\23\2\u015d\u015b\3\2\2\2\u015d\u015c\3\2"
operator|+
literal|"\2\2\u015d\u015e\3\2\2\2\u015e\61\3\2\2\2\u015f\u0168\7\t\2\2\u0160\u0165"
operator|+
literal|"\5\34\17\2\u0161\u0162\7\f\2\2\u0162\u0164\5\34\17\2\u0163\u0161\3\2\2"
operator|+
literal|"\2\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0169"
operator|+
literal|"\3\2\2\2\u0167\u0165\3\2\2\2\u0168\u0160\3\2\2\2\u0168\u0169\3\2\2\2\u0169"
operator|+
literal|"\u016a\3\2\2\2\u016a\u016b\7\n\2\2\u016b\63\3\2\2\2(\67BJW[_dv\177\u0085"
operator|+
literal|"\u008a\u008e\u0095\u009f\u00a7\u00ad\u00b7\u00bb\u00c3\u00e2\u0108\u010a"
operator|+
literal|"\u0112\u011a\u011f\u0129\u0130\u0135\u013b\u0140\u0145\u014b\u0153\u0156"
operator|+
literal|"\u0158\u015d\u0165\u0168"
decl_stmt|;
DECL|field|_ATN
specifier|public
specifier|static
specifier|final
name|ATN
name|_ATN
init|=
operator|new
name|ATNDeserializer
argument_list|()
operator|.
name|deserialize
argument_list|(
name|_serializedATN
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
name|_decisionToDFA
operator|=
operator|new
name|DFA
index|[
name|_ATN
operator|.
name|getNumberOfDecisions
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_ATN
operator|.
name|getNumberOfDecisions
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|_decisionToDFA
index|[
name|i
index|]
operator|=
operator|new
name|DFA
argument_list|(
name|_ATN
operator|.
name|getDecisionState
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

