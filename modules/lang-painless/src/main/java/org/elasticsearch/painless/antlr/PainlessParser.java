begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// ANTLR GENERATED CODE: DO NOT EDIT
end_comment

begin_package
DECL|package|org.elasticsearch.painless.antlr
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|antlr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|dfa
operator|.
name|DFA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"all"
block|,
literal|"warnings"
block|,
literal|"unchecked"
block|,
literal|"unused"
block|,
literal|"cast"
block|}
argument_list|)
DECL|class|PainlessParser
class|class
name|PainlessParser
extends|extends
name|Parser
block|{
static|static
block|{
name|RuntimeMetaData
operator|.
name|checkVersion
argument_list|(
literal|"4.5.1"
argument_list|,
name|RuntimeMetaData
operator|.
name|VERSION
argument_list|)
expr_stmt|;
block|}
DECL|field|_decisionToDFA
specifier|protected
specifier|static
specifier|final
name|DFA
index|[]
name|_decisionToDFA
decl_stmt|;
DECL|field|_sharedContextCache
specifier|protected
specifier|static
specifier|final
name|PredictionContextCache
name|_sharedContextCache
init|=
operator|new
name|PredictionContextCache
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|WS
DECL|field|COMMENT
DECL|field|LBRACK
DECL|field|RBRACK
DECL|field|LBRACE
DECL|field|RBRACE
DECL|field|LP
DECL|field|RP
DECL|field|DOT
name|WS
init|=
literal|1
decl_stmt|,
name|COMMENT
init|=
literal|2
decl_stmt|,
name|LBRACK
init|=
literal|3
decl_stmt|,
name|RBRACK
init|=
literal|4
decl_stmt|,
name|LBRACE
init|=
literal|5
decl_stmt|,
name|RBRACE
init|=
literal|6
decl_stmt|,
name|LP
init|=
literal|7
decl_stmt|,
name|RP
init|=
literal|8
decl_stmt|,
name|DOT
init|=
literal|9
decl_stmt|,
DECL|field|COMMA
DECL|field|SEMICOLON
DECL|field|IF
DECL|field|ELSE
DECL|field|WHILE
DECL|field|DO
DECL|field|FOR
DECL|field|CONTINUE
name|COMMA
init|=
literal|10
decl_stmt|,
name|SEMICOLON
init|=
literal|11
decl_stmt|,
name|IF
init|=
literal|12
decl_stmt|,
name|ELSE
init|=
literal|13
decl_stmt|,
name|WHILE
init|=
literal|14
decl_stmt|,
name|DO
init|=
literal|15
decl_stmt|,
name|FOR
init|=
literal|16
decl_stmt|,
name|CONTINUE
init|=
literal|17
decl_stmt|,
DECL|field|BREAK
DECL|field|RETURN
DECL|field|NEW
DECL|field|TRY
DECL|field|CATCH
DECL|field|THROW
DECL|field|BOOLNOT
DECL|field|BWNOT
name|BREAK
init|=
literal|18
decl_stmt|,
name|RETURN
init|=
literal|19
decl_stmt|,
name|NEW
init|=
literal|20
decl_stmt|,
name|TRY
init|=
literal|21
decl_stmt|,
name|CATCH
init|=
literal|22
decl_stmt|,
name|THROW
init|=
literal|23
decl_stmt|,
name|BOOLNOT
init|=
literal|24
decl_stmt|,
name|BWNOT
init|=
literal|25
decl_stmt|,
DECL|field|MUL
DECL|field|DIV
DECL|field|REM
DECL|field|ADD
DECL|field|SUB
DECL|field|LSH
DECL|field|RSH
DECL|field|USH
DECL|field|LT
name|MUL
init|=
literal|26
decl_stmt|,
name|DIV
init|=
literal|27
decl_stmt|,
name|REM
init|=
literal|28
decl_stmt|,
name|ADD
init|=
literal|29
decl_stmt|,
name|SUB
init|=
literal|30
decl_stmt|,
name|LSH
init|=
literal|31
decl_stmt|,
name|RSH
init|=
literal|32
decl_stmt|,
name|USH
init|=
literal|33
decl_stmt|,
name|LT
init|=
literal|34
decl_stmt|,
DECL|field|LTE
DECL|field|GT
DECL|field|GTE
DECL|field|EQ
DECL|field|EQR
DECL|field|NE
DECL|field|NER
DECL|field|BWAND
DECL|field|XOR
name|LTE
init|=
literal|35
decl_stmt|,
name|GT
init|=
literal|36
decl_stmt|,
name|GTE
init|=
literal|37
decl_stmt|,
name|EQ
init|=
literal|38
decl_stmt|,
name|EQR
init|=
literal|39
decl_stmt|,
name|NE
init|=
literal|40
decl_stmt|,
name|NER
init|=
literal|41
decl_stmt|,
name|BWAND
init|=
literal|42
decl_stmt|,
name|XOR
init|=
literal|43
decl_stmt|,
DECL|field|BWOR
DECL|field|BOOLAND
DECL|field|BOOLOR
DECL|field|COND
DECL|field|COLON
DECL|field|REF
DECL|field|INCR
DECL|field|DECR
name|BWOR
init|=
literal|44
decl_stmt|,
name|BOOLAND
init|=
literal|45
decl_stmt|,
name|BOOLOR
init|=
literal|46
decl_stmt|,
name|COND
init|=
literal|47
decl_stmt|,
name|COLON
init|=
literal|48
decl_stmt|,
name|REF
init|=
literal|49
decl_stmt|,
name|INCR
init|=
literal|50
decl_stmt|,
name|DECR
init|=
literal|51
decl_stmt|,
DECL|field|ASSIGN
DECL|field|AADD
DECL|field|ASUB
DECL|field|AMUL
DECL|field|ADIV
DECL|field|AREM
DECL|field|AAND
DECL|field|AXOR
name|ASSIGN
init|=
literal|52
decl_stmt|,
name|AADD
init|=
literal|53
decl_stmt|,
name|ASUB
init|=
literal|54
decl_stmt|,
name|AMUL
init|=
literal|55
decl_stmt|,
name|ADIV
init|=
literal|56
decl_stmt|,
name|AREM
init|=
literal|57
decl_stmt|,
name|AAND
init|=
literal|58
decl_stmt|,
name|AXOR
init|=
literal|59
decl_stmt|,
DECL|field|AOR
DECL|field|ALSH
DECL|field|ARSH
DECL|field|AUSH
DECL|field|OCTAL
DECL|field|HEX
DECL|field|INTEGER
DECL|field|DECIMAL
name|AOR
init|=
literal|60
decl_stmt|,
name|ALSH
init|=
literal|61
decl_stmt|,
name|ARSH
init|=
literal|62
decl_stmt|,
name|AUSH
init|=
literal|63
decl_stmt|,
name|OCTAL
init|=
literal|64
decl_stmt|,
name|HEX
init|=
literal|65
decl_stmt|,
name|INTEGER
init|=
literal|66
decl_stmt|,
name|DECIMAL
init|=
literal|67
decl_stmt|,
DECL|field|STRING
DECL|field|TRUE
DECL|field|FALSE
DECL|field|NULL
DECL|field|TYPE
DECL|field|ID
DECL|field|DOTINTEGER
name|STRING
init|=
literal|68
decl_stmt|,
name|TRUE
init|=
literal|69
decl_stmt|,
name|FALSE
init|=
literal|70
decl_stmt|,
name|NULL
init|=
literal|71
decl_stmt|,
name|TYPE
init|=
literal|72
decl_stmt|,
name|ID
init|=
literal|73
decl_stmt|,
name|DOTINTEGER
init|=
literal|74
decl_stmt|,
DECL|field|DOTID
name|DOTID
init|=
literal|75
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|RULE_source
DECL|field|RULE_statement
DECL|field|RULE_trailer
DECL|field|RULE_block
name|RULE_source
init|=
literal|0
decl_stmt|,
name|RULE_statement
init|=
literal|1
decl_stmt|,
name|RULE_trailer
init|=
literal|2
decl_stmt|,
name|RULE_block
init|=
literal|3
decl_stmt|,
DECL|field|RULE_empty
DECL|field|RULE_initializer
DECL|field|RULE_afterthought
DECL|field|RULE_declaration
name|RULE_empty
init|=
literal|4
decl_stmt|,
name|RULE_initializer
init|=
literal|5
decl_stmt|,
name|RULE_afterthought
init|=
literal|6
decl_stmt|,
name|RULE_declaration
init|=
literal|7
decl_stmt|,
DECL|field|RULE_decltype
DECL|field|RULE_funcref
DECL|field|RULE_declvar
DECL|field|RULE_trap
name|RULE_decltype
init|=
literal|8
decl_stmt|,
name|RULE_funcref
init|=
literal|9
decl_stmt|,
name|RULE_declvar
init|=
literal|10
decl_stmt|,
name|RULE_trap
init|=
literal|11
decl_stmt|,
DECL|field|RULE_delimiter
DECL|field|RULE_expression
DECL|field|RULE_unary
DECL|field|RULE_chain
name|RULE_delimiter
init|=
literal|12
decl_stmt|,
name|RULE_expression
init|=
literal|13
decl_stmt|,
name|RULE_unary
init|=
literal|14
decl_stmt|,
name|RULE_chain
init|=
literal|15
decl_stmt|,
DECL|field|RULE_primary
DECL|field|RULE_secondary
DECL|field|RULE_dot
DECL|field|RULE_brace
name|RULE_primary
init|=
literal|16
decl_stmt|,
name|RULE_secondary
init|=
literal|17
decl_stmt|,
name|RULE_dot
init|=
literal|18
decl_stmt|,
name|RULE_brace
init|=
literal|19
decl_stmt|,
DECL|field|RULE_arguments
DECL|field|RULE_argument
name|RULE_arguments
init|=
literal|20
decl_stmt|,
name|RULE_argument
init|=
literal|21
decl_stmt|;
DECL|field|ruleNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ruleNames
init|=
block|{
literal|"source"
block|,
literal|"statement"
block|,
literal|"trailer"
block|,
literal|"block"
block|,
literal|"empty"
block|,
literal|"initializer"
block|,
literal|"afterthought"
block|,
literal|"declaration"
block|,
literal|"decltype"
block|,
literal|"funcref"
block|,
literal|"declvar"
block|,
literal|"trap"
block|,
literal|"delimiter"
block|,
literal|"expression"
block|,
literal|"unary"
block|,
literal|"chain"
block|,
literal|"primary"
block|,
literal|"secondary"
block|,
literal|"dot"
block|,
literal|"brace"
block|,
literal|"arguments"
block|,
literal|"argument"
block|}
decl_stmt|;
DECL|field|_LITERAL_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|_LITERAL_NAMES
init|=
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|"'{'"
block|,
literal|"'}'"
block|,
literal|"'['"
block|,
literal|"']'"
block|,
literal|"'('"
block|,
literal|"')'"
block|,
literal|"'.'"
block|,
literal|"','"
block|,
literal|"';'"
block|,
literal|"'if'"
block|,
literal|"'else'"
block|,
literal|"'while'"
block|,
literal|"'do'"
block|,
literal|"'for'"
block|,
literal|"'continue'"
block|,
literal|"'break'"
block|,
literal|"'return'"
block|,
literal|"'new'"
block|,
literal|"'try'"
block|,
literal|"'catch'"
block|,
literal|"'throw'"
block|,
literal|"'!'"
block|,
literal|"'~'"
block|,
literal|"'*'"
block|,
literal|"'/'"
block|,
literal|"'%'"
block|,
literal|"'+'"
block|,
literal|"'-'"
block|,
literal|"'<<'"
block|,
literal|"'>>'"
block|,
literal|"'>>>'"
block|,
literal|"'<'"
block|,
literal|"'<='"
block|,
literal|"'>'"
block|,
literal|"'>='"
block|,
literal|"'=='"
block|,
literal|"'==='"
block|,
literal|"'!='"
block|,
literal|"'!=='"
block|,
literal|"'&'"
block|,
literal|"'^'"
block|,
literal|"'|'"
block|,
literal|"'&&'"
block|,
literal|"'||'"
block|,
literal|"'?'"
block|,
literal|"':'"
block|,
literal|"'::'"
block|,
literal|"'++'"
block|,
literal|"'--'"
block|,
literal|"'='"
block|,
literal|"'+='"
block|,
literal|"'-='"
block|,
literal|"'*='"
block|,
literal|"'/='"
block|,
literal|"'%='"
block|,
literal|"'&='"
block|,
literal|"'^='"
block|,
literal|"'|='"
block|,
literal|"'<<='"
block|,
literal|"'>>='"
block|,
literal|"'>>>='"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|"'true'"
block|,
literal|"'false'"
block|,
literal|"'null'"
block|}
decl_stmt|;
DECL|field|_SYMBOLIC_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|_SYMBOLIC_NAMES
init|=
block|{
literal|null
block|,
literal|"WS"
block|,
literal|"COMMENT"
block|,
literal|"LBRACK"
block|,
literal|"RBRACK"
block|,
literal|"LBRACE"
block|,
literal|"RBRACE"
block|,
literal|"LP"
block|,
literal|"RP"
block|,
literal|"DOT"
block|,
literal|"COMMA"
block|,
literal|"SEMICOLON"
block|,
literal|"IF"
block|,
literal|"ELSE"
block|,
literal|"WHILE"
block|,
literal|"DO"
block|,
literal|"FOR"
block|,
literal|"CONTINUE"
block|,
literal|"BREAK"
block|,
literal|"RETURN"
block|,
literal|"NEW"
block|,
literal|"TRY"
block|,
literal|"CATCH"
block|,
literal|"THROW"
block|,
literal|"BOOLNOT"
block|,
literal|"BWNOT"
block|,
literal|"MUL"
block|,
literal|"DIV"
block|,
literal|"REM"
block|,
literal|"ADD"
block|,
literal|"SUB"
block|,
literal|"LSH"
block|,
literal|"RSH"
block|,
literal|"USH"
block|,
literal|"LT"
block|,
literal|"LTE"
block|,
literal|"GT"
block|,
literal|"GTE"
block|,
literal|"EQ"
block|,
literal|"EQR"
block|,
literal|"NE"
block|,
literal|"NER"
block|,
literal|"BWAND"
block|,
literal|"XOR"
block|,
literal|"BWOR"
block|,
literal|"BOOLAND"
block|,
literal|"BOOLOR"
block|,
literal|"COND"
block|,
literal|"COLON"
block|,
literal|"REF"
block|,
literal|"INCR"
block|,
literal|"DECR"
block|,
literal|"ASSIGN"
block|,
literal|"AADD"
block|,
literal|"ASUB"
block|,
literal|"AMUL"
block|,
literal|"ADIV"
block|,
literal|"AREM"
block|,
literal|"AAND"
block|,
literal|"AXOR"
block|,
literal|"AOR"
block|,
literal|"ALSH"
block|,
literal|"ARSH"
block|,
literal|"AUSH"
block|,
literal|"OCTAL"
block|,
literal|"HEX"
block|,
literal|"INTEGER"
block|,
literal|"DECIMAL"
block|,
literal|"STRING"
block|,
literal|"TRUE"
block|,
literal|"FALSE"
block|,
literal|"NULL"
block|,
literal|"TYPE"
block|,
literal|"ID"
block|,
literal|"DOTINTEGER"
block|,
literal|"DOTID"
block|}
decl_stmt|;
DECL|field|VOCABULARY
specifier|public
specifier|static
specifier|final
name|Vocabulary
name|VOCABULARY
init|=
operator|new
name|VocabularyImpl
argument_list|(
name|_LITERAL_NAMES
argument_list|,
name|_SYMBOLIC_NAMES
argument_list|)
decl_stmt|;
comment|/**    * @deprecated Use {@link #VOCABULARY} instead.    */
annotation|@
name|Deprecated
DECL|field|tokenNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|tokenNames
decl_stmt|;
static|static
block|{
name|tokenNames
operator|=
operator|new
name|String
index|[
name|_SYMBOLIC_NAMES
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokenNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tokenNames
index|[
name|i
index|]
operator|=
name|VOCABULARY
operator|.
name|getLiteralName
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenNames
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|tokenNames
index|[
name|i
index|]
operator|=
name|VOCABULARY
operator|.
name|getSymbolicName
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenNames
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|tokenNames
index|[
name|i
index|]
operator|=
literal|"<INVALID>"
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|getTokenNames
specifier|public
name|String
index|[]
name|getTokenNames
parameter_list|()
block|{
return|return
name|tokenNames
return|;
block|}
annotation|@
name|Override
DECL|method|getVocabulary
specifier|public
name|Vocabulary
name|getVocabulary
parameter_list|()
block|{
return|return
name|VOCABULARY
return|;
block|}
annotation|@
name|Override
DECL|method|getGrammarFileName
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"PainlessParser.g4"
return|;
block|}
annotation|@
name|Override
DECL|method|getRuleNames
specifier|public
name|String
index|[]
name|getRuleNames
parameter_list|()
block|{
return|return
name|ruleNames
return|;
block|}
annotation|@
name|Override
DECL|method|getSerializedATN
specifier|public
name|String
name|getSerializedATN
parameter_list|()
block|{
return|return
name|_serializedATN
return|;
block|}
annotation|@
name|Override
DECL|method|getATN
specifier|public
name|ATN
name|getATN
parameter_list|()
block|{
return|return
name|_ATN
return|;
block|}
DECL|method|PainlessParser
specifier|public
name|PainlessParser
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|_interp
operator|=
operator|new
name|ParserATNSimulator
argument_list|(
name|this
argument_list|,
name|_ATN
argument_list|,
name|_decisionToDFA
argument_list|,
name|_sharedContextCache
argument_list|)
expr_stmt|;
block|}
DECL|class|SourceContext
specifier|public
specifier|static
class|class
name|SourceContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statement
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|StatementContext
name|statement
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|SourceContext
specifier|public
name|SourceContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_source
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitSource
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|source
specifier|public
specifier|final
name|SourceContext
name|source
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|SourceContext
name|_localctx
init|=
operator|new
name|SourceContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|0
argument_list|,
name|RULE_source
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|47
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|0
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|44
argument_list|)
expr_stmt|;
name|statement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|49
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|0
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
name|setState
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EOF
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|StatementContext
specifier|public
specifier|static
class|class
name|StatementContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|StatementContext
specifier|public
name|StatementContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_statement
return|;
block|}
DECL|method|StatementContext
specifier|public
name|StatementContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeclContext
specifier|public
specifier|static
class|class
name|DeclContext
extends|extends
name|StatementContext
block|{
DECL|method|declaration
specifier|public
name|DeclarationContext
name|declaration
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DeclarationContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DeclContext
specifier|public
name|DeclContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDecl
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|BreakContext
specifier|public
specifier|static
class|class
name|BreakContext
extends|extends
name|StatementContext
block|{
DECL|method|BREAK
specifier|public
name|TerminalNode
name|BREAK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BREAK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BreakContext
specifier|public
name|BreakContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBreak
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ThrowContext
specifier|public
specifier|static
class|class
name|ThrowContext
extends|extends
name|StatementContext
block|{
DECL|method|THROW
specifier|public
name|TerminalNode
name|THROW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|THROW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ThrowContext
specifier|public
name|ThrowContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitThrow
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ContinueContext
specifier|public
specifier|static
class|class
name|ContinueContext
extends|extends
name|StatementContext
block|{
DECL|method|CONTINUE
specifier|public
name|TerminalNode
name|CONTINUE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|CONTINUE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ContinueContext
specifier|public
name|ContinueContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitContinue
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ForContext
specifier|public
specifier|static
class|class
name|ForContext
extends|extends
name|StatementContext
block|{
DECL|method|FOR
specifier|public
name|TerminalNode
name|FOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|FOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|)
return|;
block|}
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|TrailerContext
name|trailer
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|empty
specifier|public
name|EmptyContext
name|empty
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|EmptyContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|initializer
specifier|public
name|InitializerContext
name|initializer
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|InitializerContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|afterthought
specifier|public
name|AfterthoughtContext
name|afterthought
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|AfterthoughtContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ForContext
specifier|public
name|ForContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFor
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|TryContext
specifier|public
specifier|static
class|class
name|TryContext
extends|extends
name|StatementContext
block|{
DECL|method|TRY
specifier|public
name|TerminalNode
name|TRY
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TRY
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trap
specifier|public
name|List
argument_list|<
name|TrapContext
argument_list|>
name|trap
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|TrapContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|trap
specifier|public
name|TrapContext
name|trap
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|TrapContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|TryContext
specifier|public
name|TryContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTry
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ExprContext
specifier|public
specifier|static
class|class
name|ExprContext
extends|extends
name|StatementContext
block|{
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ExprContext
specifier|public
name|ExprContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitExpr
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|DoContext
specifier|public
specifier|static
class|class
name|DoContext
extends|extends
name|StatementContext
block|{
DECL|method|DO
specifier|public
name|TerminalNode
name|DO
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DO
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|WHILE
specifier|public
name|TerminalNode
name|WHILE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|WHILE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DoContext
specifier|public
name|DoContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDo
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|WhileContext
specifier|public
specifier|static
class|class
name|WhileContext
extends|extends
name|StatementContext
block|{
DECL|method|WHILE
specifier|public
name|TerminalNode
name|WHILE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|WHILE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|TrailerContext
name|trailer
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|empty
specifier|public
name|EmptyContext
name|empty
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|EmptyContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|WhileContext
specifier|public
name|WhileContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitWhile
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|IfContext
specifier|public
specifier|static
class|class
name|IfContext
extends|extends
name|StatementContext
block|{
DECL|method|IF
specifier|public
name|TerminalNode
name|IF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|IF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|List
argument_list|<
name|TrailerContext
argument_list|>
name|trailer
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|TrailerContext
name|trailer
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|ELSE
specifier|public
name|TerminalNode
name|ELSE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ELSE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|IfContext
specifier|public
name|IfContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitIf
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|EachContext
specifier|public
specifier|static
class|class
name|EachContext
extends|extends
name|StatementContext
block|{
DECL|method|FOR
specifier|public
name|TerminalNode
name|FOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|FOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|COLON
specifier|public
name|TerminalNode
name|COLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|trailer
specifier|public
name|TrailerContext
name|trailer
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|TrailerContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EachContext
specifier|public
name|EachContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitEach
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ReturnContext
specifier|public
specifier|static
class|class
name|ReturnContext
extends|extends
name|StatementContext
block|{
DECL|method|RETURN
specifier|public
name|TerminalNode
name|RETURN
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RETURN
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|delimiter
specifier|public
name|DelimiterContext
name|delimiter
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DelimiterContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ReturnContext
specifier|public
name|ReturnContext
parameter_list|(
name|StatementContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitReturn
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|statement
specifier|public
specifier|final
name|StatementContext
name|statement
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|StatementContext
name|_localctx
init|=
operator|new
name|StatementContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|,
name|RULE_statement
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|setState
argument_list|(
literal|130
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|8
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|IfContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|52
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|IF
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|53
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|54
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|56
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|60
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|1
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|57
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ELSE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|58
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|59
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|!=
name|ELSE
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" _input.LA(1) != ELSE "
argument_list|)
throw|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|WhileContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|62
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WHILE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|63
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|64
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|68
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|2
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|66
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|67
argument_list|)
expr_stmt|;
name|empty
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|3
case|:
name|_localctx
operator|=
operator|new
name|DoContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DO
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|71
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|72
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WHILE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|73
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|74
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|75
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|76
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
name|_localctx
operator|=
operator|new
name|ForContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|78
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|79
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|81
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|3
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|initializer
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
name|setState
argument_list|(
literal|83
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|85
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|4
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|84
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|setState
argument_list|(
literal|87
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|89
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|5
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|88
argument_list|)
expr_stmt|;
name|afterthought
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
name|setState
argument_list|(
literal|91
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|94
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|6
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|92
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|setState
argument_list|(
literal|93
argument_list|)
expr_stmt|;
name|empty
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
literal|5
case|:
name|_localctx
operator|=
operator|new
name|EachContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|96
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|97
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|98
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|99
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|102
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|103
argument_list|)
expr_stmt|;
name|trailer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
name|_localctx
operator|=
operator|new
name|DeclContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|105
argument_list|)
expr_stmt|;
name|declaration
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|106
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
name|_localctx
operator|=
operator|new
name|ContinueContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|108
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONTINUE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|109
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
name|_localctx
operator|=
operator|new
name|BreakContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|110
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BREAK
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|111
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
name|_localctx
operator|=
operator|new
name|ReturnContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|112
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RETURN
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|113
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|114
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
name|_localctx
operator|=
operator|new
name|TryContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|116
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TRY
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|117
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|119
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
literal|1
expr_stmt|;
do|do
block|{
switch|switch
condition|(
name|_alt
condition|)
block|{
case|case
literal|1
case|:
block|{
block|{
name|setState
argument_list|(
literal|118
argument_list|)
expr_stmt|;
name|trap
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
name|setState
argument_list|(
literal|121
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|7
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
do|;
block|}
break|break;
case|case
literal|11
case|:
name|_localctx
operator|=
operator|new
name|ThrowContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|THROW
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|124
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|125
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
name|_localctx
operator|=
operator|new
name|ExprContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|127
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|delimiter
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|TrailerContext
specifier|public
specifier|static
class|class
name|TrailerContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|StatementContext
name|statement
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TrailerContext
specifier|public
name|TrailerContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_trailer
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTrailer
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|trailer
specifier|public
specifier|final
name|TrailerContext
name|trailer
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|TrailerContext
name|_localctx
init|=
operator|new
name|TrailerContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|,
name|RULE_trailer
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|134
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|9
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|132
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|133
argument_list|)
expr_stmt|;
name|statement
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|BlockContext
specifier|public
specifier|static
class|class
name|BlockContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LBRACK
specifier|public
name|TerminalNode
name|LBRACK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RBRACK
specifier|public
name|TerminalNode
name|RBRACK
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACK
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statement
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|statement
specifier|public
name|StatementContext
name|statement
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|StatementContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|BlockContext
specifier|public
name|BlockContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_block
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBlock
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|block
specifier|public
specifier|final
name|BlockContext
name|block
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BlockContext
name|_localctx
init|=
operator|new
name|BlockContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|6
argument_list|,
name|RULE_block
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|136
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACK
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|140
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|10
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|137
argument_list|)
expr_stmt|;
name|statement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|142
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|10
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
name|setState
argument_list|(
literal|143
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|EmptyContext
specifier|public
specifier|static
class|class
name|EmptyContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EmptyContext
specifier|public
name|EmptyContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_empty
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitEmpty
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|empty
specifier|public
specifier|final
name|EmptyContext
name|empty
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|EmptyContext
name|_localctx
init|=
operator|new
name|EmptyContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|8
argument_list|,
name|RULE_empty
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|145
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|InitializerContext
specifier|public
specifier|static
class|class
name|InitializerContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|declaration
specifier|public
name|DeclarationContext
name|declaration
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DeclarationContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|InitializerContext
specifier|public
name|InitializerContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_initializer
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitInitializer
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|initializer
specifier|public
specifier|final
name|InitializerContext
name|initializer
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|InitializerContext
name|_localctx
init|=
operator|new
name|InitializerContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|10
argument_list|,
name|RULE_initializer
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|149
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|11
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|147
argument_list|)
expr_stmt|;
name|declaration
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|148
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|AfterthoughtContext
specifier|public
specifier|static
class|class
name|AfterthoughtContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AfterthoughtContext
specifier|public
name|AfterthoughtContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_afterthought
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitAfterthought
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|afterthought
specifier|public
specifier|final
name|AfterthoughtContext
name|afterthought
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|AfterthoughtContext
name|_localctx
init|=
operator|new
name|AfterthoughtContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|12
argument_list|,
name|RULE_afterthought
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|151
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DeclarationContext
specifier|public
specifier|static
class|class
name|DeclarationContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|declvar
specifier|public
name|List
argument_list|<
name|DeclvarContext
argument_list|>
name|declvar
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|DeclvarContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|declvar
specifier|public
name|DeclvarContext
name|declvar
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|DeclvarContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|COMMA
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|TerminalNode
name|COMMA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|DeclarationContext
specifier|public
name|DeclarationContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_declaration
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDeclaration
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|declaration
specifier|public
specifier|final
name|DeclarationContext
name|declaration
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DeclarationContext
name|_localctx
init|=
operator|new
name|DeclarationContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|14
argument_list|,
name|RULE_declaration
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|153
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|154
argument_list|)
expr_stmt|;
name|declvar
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|159
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|COMMA
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|155
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|156
argument_list|)
expr_stmt|;
name|declvar
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|161
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DecltypeContext
specifier|public
specifier|static
class|class
name|DecltypeContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|LBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|TerminalNode
name|LBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|RBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|TerminalNode
name|RBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|DecltypeContext
specifier|public
name|DecltypeContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_decltype
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDecltype
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|decltype
specifier|public
specifier|final
name|DecltypeContext
name|decltype
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DecltypeContext
name|_localctx
init|=
operator|new
name|DecltypeContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|16
argument_list|,
name|RULE_decltype
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|162
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|167
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|LBRACE
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|163
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|164
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|169
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|FuncrefContext
specifier|public
specifier|static
class|class
name|FuncrefContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|REF
specifier|public
name|TerminalNode
name|REF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|REF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|FuncrefContext
specifier|public
name|FuncrefContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_funcref
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFuncref
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|funcref
specifier|public
specifier|final
name|FuncrefContext
name|funcref
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|FuncrefContext
name|_localctx
init|=
operator|new
name|FuncrefContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|18
argument_list|,
name|RULE_funcref
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|170
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|171
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|REF
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|172
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DeclvarContext
specifier|public
specifier|static
class|class
name|DeclvarContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ASSIGN
specifier|public
name|TerminalNode
name|ASSIGN
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ASSIGN
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DeclvarContext
specifier|public
name|DeclvarContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_declvar
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDeclvar
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|declvar
specifier|public
specifier|final
name|DeclvarContext
name|declvar
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DeclvarContext
name|_localctx
init|=
operator|new
name|DeclvarContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|20
argument_list|,
name|RULE_declvar
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|174
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|177
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|_la
operator|==
name|ASSIGN
condition|)
block|{
block|{
name|setState
argument_list|(
literal|175
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|176
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|TrapContext
specifier|public
specifier|static
class|class
name|TrapContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|CATCH
specifier|public
name|TerminalNode
name|CATCH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|CATCH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|block
specifier|public
name|BlockContext
name|block
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BlockContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TrapContext
specifier|public
name|TrapContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_trap
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTrap
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|trap
specifier|public
specifier|final
name|TrapContext
name|trap
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|TrapContext
name|_localctx
init|=
operator|new
name|TrapContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|22
argument_list|,
name|RULE_trap
argument_list|)
expr_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|179
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CATCH
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|181
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|182
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|183
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|184
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DelimiterContext
specifier|public
specifier|static
class|class
name|DelimiterContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|SEMICOLON
specifier|public
name|TerminalNode
name|SEMICOLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SEMICOLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EOF
specifier|public
name|TerminalNode
name|EOF
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EOF
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DelimiterContext
specifier|public
name|DelimiterContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_delimiter
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDelimiter
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|delimiter
specifier|public
specifier|final
name|DelimiterContext
name|delimiter
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DelimiterContext
name|_localctx
init|=
operator|new
name|DelimiterContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|24
argument_list|,
name|RULE_delimiter
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|186
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|EOF
operator|||
name|_la
operator|==
name|SEMICOLON
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ExpressionContext
specifier|public
specifier|static
class|class
name|ExpressionContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|s
specifier|public
name|boolean
name|s
init|=
literal|true
decl_stmt|;
DECL|method|ExpressionContext
specifier|public
name|ExpressionContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_expression
return|;
block|}
DECL|method|ExpressionContext
specifier|public
name|ExpressionContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|ctx
operator|.
name|s
expr_stmt|;
block|}
block|}
DECL|class|SingleContext
specifier|public
specifier|static
class|class
name|SingleContext
extends|extends
name|ExpressionContext
block|{
DECL|field|u
specifier|public
name|UnaryContext
name|u
decl_stmt|;
DECL|method|unary
specifier|public
name|UnaryContext
name|unary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|UnaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SingleContext
specifier|public
name|SingleContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitSingle
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|CompContext
specifier|public
specifier|static
class|class
name|CompContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|LT
specifier|public
name|TerminalNode
name|LT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LTE
specifier|public
name|TerminalNode
name|LTE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LTE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|GT
specifier|public
name|TerminalNode
name|GT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|GT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|GTE
specifier|public
name|TerminalNode
name|GTE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|GTE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EQ
specifier|public
name|TerminalNode
name|EQ
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EQ
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|EQR
specifier|public
name|TerminalNode
name|EQR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|EQR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NE
specifier|public
name|TerminalNode
name|NE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NER
specifier|public
name|TerminalNode
name|NER
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NER
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|CompContext
specifier|public
name|CompContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitComp
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|BoolContext
specifier|public
specifier|static
class|class
name|BoolContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|BOOLAND
specifier|public
name|TerminalNode
name|BOOLAND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BOOLAND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BOOLOR
specifier|public
name|TerminalNode
name|BOOLOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BOOLOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BoolContext
specifier|public
name|BoolContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBool
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ConditionalContext
specifier|public
specifier|static
class|class
name|ConditionalContext
extends|extends
name|ExpressionContext
block|{
DECL|field|e0
specifier|public
name|ExpressionContext
name|e0
decl_stmt|;
DECL|field|e1
specifier|public
name|ExpressionContext
name|e1
decl_stmt|;
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COND
specifier|public
name|TerminalNode
name|COND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|COLON
specifier|public
name|TerminalNode
name|COLON
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COLON
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ConditionalContext
specifier|public
name|ConditionalContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitConditional
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|AssignmentContext
specifier|public
specifier|static
class|class
name|AssignmentContext
extends|extends
name|ExpressionContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ASSIGN
specifier|public
name|TerminalNode
name|ASSIGN
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ASSIGN
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AADD
specifier|public
name|TerminalNode
name|AADD
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AADD
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ASUB
specifier|public
name|TerminalNode
name|ASUB
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ASUB
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AMUL
specifier|public
name|TerminalNode
name|AMUL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AMUL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ADIV
specifier|public
name|TerminalNode
name|ADIV
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ADIV
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AREM
specifier|public
name|TerminalNode
name|AREM
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AREM
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AAND
specifier|public
name|TerminalNode
name|AAND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AAND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AXOR
specifier|public
name|TerminalNode
name|AXOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AXOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AOR
specifier|public
name|TerminalNode
name|AOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ALSH
specifier|public
name|TerminalNode
name|ALSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ALSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ARSH
specifier|public
name|TerminalNode
name|ARSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ARSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AUSH
specifier|public
name|TerminalNode
name|AUSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|AUSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|AssignmentContext
specifier|public
name|AssignmentContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitAssignment
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|BinaryContext
specifier|public
specifier|static
class|class
name|BinaryContext
extends|extends
name|ExpressionContext
block|{
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|MUL
specifier|public
name|TerminalNode
name|MUL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|MUL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DIV
specifier|public
name|TerminalNode
name|DIV
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DIV
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|REM
specifier|public
name|TerminalNode
name|REM
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|REM
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ADD
specifier|public
name|TerminalNode
name|ADD
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ADD
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SUB
specifier|public
name|TerminalNode
name|SUB
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SUB
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LSH
specifier|public
name|TerminalNode
name|LSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RSH
specifier|public
name|TerminalNode
name|RSH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RSH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|USH
specifier|public
name|TerminalNode
name|USH
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|USH
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BWAND
specifier|public
name|TerminalNode
name|BWAND
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BWAND
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|XOR
specifier|public
name|TerminalNode
name|XOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|XOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BWOR
specifier|public
name|TerminalNode
name|BWOR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BWOR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BinaryContext
specifier|public
name|BinaryContext
parameter_list|(
name|ExpressionContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBinary
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|expression
specifier|public
specifier|final
name|ExpressionContext
name|expression
parameter_list|()
throws|throws
name|RecognitionException
block|{
return|return
name|expression
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|private
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|_p
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|ParserRuleContext
name|_parentctx
init|=
name|_ctx
decl_stmt|;
name|int
name|_parentState
init|=
name|getState
argument_list|()
decl_stmt|;
name|ExpressionContext
name|_localctx
init|=
operator|new
name|ExpressionContext
argument_list|(
name|_ctx
argument_list|,
name|_parentState
argument_list|)
decl_stmt|;
name|ExpressionContext
name|_prevctx
init|=
name|_localctx
decl_stmt|;
name|int
name|_startState
init|=
literal|26
decl_stmt|;
name|enterRecursionRule
argument_list|(
name|_localctx
argument_list|,
literal|26
argument_list|,
name|RULE_expression
argument_list|,
name|_p
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|197
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|15
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|_localctx
operator|=
operator|new
name|AssignmentContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|189
argument_list|)
expr_stmt|;
name|chain
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|190
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|ASSIGN
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ASUB
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AMUL
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADIV
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AREM
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AAND
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AXOR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AOR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ALSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ARSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|AUSH
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|191
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AssignmentContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|_localctx
operator|=
operator|new
name|SingleContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|_ctx
operator|=
name|_localctx
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
name|setState
argument_list|(
literal|194
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SingleContext
operator|)
name|_localctx
operator|)
operator|.
name|u
operator|=
name|unary
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SingleContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
operator|(
operator|(
name|SingleContext
operator|)
name|_localctx
operator|)
operator|.
name|u
operator|.
name|s
expr_stmt|;
block|}
break|break;
block|}
name|_ctx
operator|.
name|stop
operator|=
name|_input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|258
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|17
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|_parseListeners
operator|!=
literal|null
condition|)
name|triggerExitRuleEvent
argument_list|()
expr_stmt|;
name|_prevctx
operator|=
name|_localctx
expr_stmt|;
block|{
name|setState
argument_list|(
literal|256
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|16
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|199
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|12
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 12)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|MUL
operator|)
operator||
operator|(
literal|1L
operator|<<
name|DIV
operator|)
operator||
operator|(
literal|1L
operator|<<
name|REM
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|201
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|13
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|204
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|11
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 11)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|205
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|ADD
operator|||
name|_la
operator|==
name|SUB
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|206
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|12
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|209
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|10
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 10)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|210
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|RSH
operator|)
operator||
operator|(
literal|1L
operator|<<
name|USH
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|211
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|11
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
block|{
name|_localctx
operator|=
operator|new
name|CompContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|214
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|9
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 9)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|215
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|LT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|LTE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|GT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|GTE
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|216
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|10
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
block|{
name|_localctx
operator|=
operator|new
name|CompContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|219
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|8
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 8)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|220
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|EQ
operator|)
operator||
operator|(
literal|1L
operator|<<
name|EQR
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NE
operator|)
operator||
operator|(
literal|1L
operator|<<
name|NER
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|221
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|9
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|224
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|7
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 7)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|225
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BWAND
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|226
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|8
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|229
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|6
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 6)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|230
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|231
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|7
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
block|{
name|_localctx
operator|=
operator|new
name|BinaryContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|234
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|5
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 5)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|235
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BWOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|236
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|6
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BinaryContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
block|{
name|_localctx
operator|=
operator|new
name|BoolContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|239
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|4
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 4)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|240
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BOOLAND
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|241
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|5
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BoolContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
block|{
name|_localctx
operator|=
operator|new
name|BoolContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|244
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|3
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 3)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|245
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BOOLOR
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|246
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|4
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BoolContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
block|{
name|_localctx
operator|=
operator|new
name|ConditionalContext
argument_list|(
operator|new
name|ExpressionContext
argument_list|(
name|_parentctx
argument_list|,
name|_parentState
argument_list|)
argument_list|)
expr_stmt|;
name|pushNewRecursionContext
argument_list|(
name|_localctx
argument_list|,
name|_startState
argument_list|,
name|RULE_expression
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|249
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|2
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|"precpred(_ctx, 2)"
argument_list|)
throw|;
name|setState
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COND
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|251
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|e0
operator|=
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|252
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|253
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|e1
operator|=
name|expression
argument_list|(
literal|2
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|e0
operator|.
name|s
operator|&&
operator|(
operator|(
name|ConditionalContext
operator|)
name|_localctx
operator|)
operator|.
name|e1
operator|.
name|s
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
name|setState
argument_list|(
literal|260
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|17
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unrollRecursionContexts
argument_list|(
name|_parentctx
argument_list|)
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|UnaryContext
specifier|public
specifier|static
class|class
name|UnaryContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|c
specifier|public
name|boolean
name|c
decl_stmt|;
DECL|field|s
specifier|public
name|boolean
name|s
init|=
literal|true
decl_stmt|;
DECL|method|UnaryContext
specifier|public
name|UnaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|UnaryContext
specifier|public
name|UnaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|,
name|boolean
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_unary
return|;
block|}
DECL|method|UnaryContext
specifier|public
name|UnaryContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|ctx
operator|.
name|c
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|ctx
operator|.
name|s
expr_stmt|;
block|}
block|}
DECL|class|CastContext
specifier|public
specifier|static
class|class
name|CastContext
extends|extends
name|UnaryContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|unary
specifier|public
name|UnaryContext
name|unary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|UnaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|CastContext
specifier|public
name|CastContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitCast
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|PreContext
specifier|public
specifier|static
class|class
name|PreContext
extends|extends
name|UnaryContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|INCR
specifier|public
name|TerminalNode
name|INCR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|INCR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DECR
specifier|public
name|TerminalNode
name|DECR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DECR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|PreContext
specifier|public
name|PreContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitPre
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ReadContext
specifier|public
specifier|static
class|class
name|ReadContext
extends|extends
name|UnaryContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ReadContext
specifier|public
name|ReadContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitRead
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|PostContext
specifier|public
specifier|static
class|class
name|PostContext
extends|extends
name|UnaryContext
block|{
DECL|method|chain
specifier|public
name|ChainContext
name|chain
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ChainContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|INCR
specifier|public
name|TerminalNode
name|INCR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|INCR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DECR
specifier|public
name|TerminalNode
name|DECR
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DECR
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|PostContext
specifier|public
name|PostContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitPost
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NullContext
specifier|public
specifier|static
class|class
name|NullContext
extends|extends
name|UnaryContext
block|{
DECL|method|NULL
specifier|public
name|TerminalNode
name|NULL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NULL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NullContext
specifier|public
name|NullContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNull
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|TrueContext
specifier|public
specifier|static
class|class
name|TrueContext
extends|extends
name|UnaryContext
block|{
DECL|method|TRUE
specifier|public
name|TerminalNode
name|TRUE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TRUE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TrueContext
specifier|public
name|TrueContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitTrue
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|FalseContext
specifier|public
specifier|static
class|class
name|FalseContext
extends|extends
name|UnaryContext
block|{
DECL|method|FALSE
specifier|public
name|TerminalNode
name|FALSE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|FALSE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|FalseContext
specifier|public
name|FalseContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFalse
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NumericContext
specifier|public
specifier|static
class|class
name|NumericContext
extends|extends
name|UnaryContext
block|{
DECL|method|OCTAL
specifier|public
name|TerminalNode
name|OCTAL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|OCTAL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|HEX
specifier|public
name|TerminalNode
name|HEX
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|HEX
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|INTEGER
specifier|public
name|TerminalNode
name|INTEGER
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|INTEGER
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DECIMAL
specifier|public
name|TerminalNode
name|DECIMAL
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DECIMAL
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NumericContext
specifier|public
name|NumericContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNumeric
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|OperatorContext
specifier|public
specifier|static
class|class
name|OperatorContext
extends|extends
name|UnaryContext
block|{
DECL|method|unary
specifier|public
name|UnaryContext
name|unary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|UnaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BOOLNOT
specifier|public
name|TerminalNode
name|BOOLNOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BOOLNOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BWNOT
specifier|public
name|TerminalNode
name|BWNOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|BWNOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ADD
specifier|public
name|TerminalNode
name|ADD
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ADD
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SUB
specifier|public
name|TerminalNode
name|SUB
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|SUB
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|OperatorContext
specifier|public
name|OperatorContext
parameter_list|(
name|UnaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitOperator
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|unary
specifier|public
specifier|final
name|UnaryContext
name|unary
parameter_list|(
name|boolean
name|c
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|UnaryContext
name|_localctx
init|=
operator|new
name|UnaryContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|28
argument_list|,
name|RULE_unary
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|290
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|18
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|PreContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|261
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|262
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|INCR
operator|||
name|_la
operator|==
name|DECR
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|263
argument_list|)
expr_stmt|;
name|chain
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|PostContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|264
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|265
argument_list|)
expr_stmt|;
name|chain
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|266
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|INCR
operator|||
name|_la
operator|==
name|DECR
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|3
case|:
name|_localctx
operator|=
operator|new
name|ReadContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|268
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|269
argument_list|)
expr_stmt|;
name|chain
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
name|_localctx
operator|=
operator|new
name|NumericContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|270
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|271
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|_la
operator|-
literal|64
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
operator|(
name|OCTAL
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|HEX
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|INTEGER
operator|-
literal|64
operator|)
operator|)
operator||
operator|(
literal|1L
operator|<<
operator|(
name|DECIMAL
operator|-
literal|64
operator|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|NumericContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
name|_localctx
operator|=
operator|new
name|TrueContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|273
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|274
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TrueContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
name|_localctx
operator|=
operator|new
name|FalseContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|276
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|277
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|FalseContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
name|_localctx
operator|=
operator|new
name|NullContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|279
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|280
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NullContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
name|_localctx
operator|=
operator|new
name|OperatorContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|282
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|283
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|_la
operator|)
operator|&
operator|~
literal|0x3f
operator|)
operator|==
literal|0
operator|&&
operator|(
operator|(
literal|1L
operator|<<
name|_la
operator|)
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|BOOLNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|BWNOT
operator|)
operator||
operator|(
literal|1L
operator|<<
name|ADD
operator|)
operator||
operator|(
literal|1L
operator|<<
name|SUB
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
name|setState
argument_list|(
literal|284
argument_list|)
expr_stmt|;
name|unary
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
name|_localctx
operator|=
operator|new
name|CastContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|285
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|286
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|287
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|288
argument_list|)
expr_stmt|;
name|unary
argument_list|(
name|_localctx
operator|.
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ChainContext
specifier|public
specifier|static
class|class
name|ChainContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|c
specifier|public
name|boolean
name|c
decl_stmt|;
DECL|method|ChainContext
specifier|public
name|ChainContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|ChainContext
specifier|public
name|ChainContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|,
name|boolean
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_chain
return|;
block|}
DECL|method|ChainContext
specifier|public
name|ChainContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|ChainContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|ctx
operator|.
name|c
expr_stmt|;
block|}
block|}
DECL|class|StaticContext
specifier|public
specifier|static
class|class
name|StaticContext
extends|extends
name|ChainContext
block|{
DECL|method|decltype
specifier|public
name|DecltypeContext
name|decltype
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DecltypeContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|dot
specifier|public
name|DotContext
name|dot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|List
argument_list|<
name|SecondaryContext
argument_list|>
name|secondary
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|SecondaryContext
name|secondary
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|StaticContext
specifier|public
name|StaticContext
parameter_list|(
name|ChainContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitStatic
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|DynamicContext
specifier|public
specifier|static
class|class
name|DynamicContext
extends|extends
name|ChainContext
block|{
DECL|field|p
specifier|public
name|PrimaryContext
name|p
decl_stmt|;
DECL|method|primary
specifier|public
name|PrimaryContext
name|primary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|PrimaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|List
argument_list|<
name|SecondaryContext
argument_list|>
name|secondary
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|SecondaryContext
name|secondary
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|DynamicContext
specifier|public
name|DynamicContext
parameter_list|(
name|ChainContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitDynamic
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NewarrayContext
specifier|public
specifier|static
class|class
name|NewarrayContext
extends|extends
name|ChainContext
block|{
DECL|method|NEW
specifier|public
name|TerminalNode
name|NEW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NEW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|LBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|)
return|;
block|}
DECL|method|LBRACE
specifier|public
name|TerminalNode
name|LBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|expression
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|RBRACE
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|TerminalNode
name|RBRACE
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|dot
specifier|public
name|DotContext
name|dot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|List
argument_list|<
name|SecondaryContext
argument_list|>
name|secondary
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|secondary
specifier|public
name|SecondaryContext
name|secondary
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|SecondaryContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|NewarrayContext
specifier|public
name|NewarrayContext
parameter_list|(
name|ChainContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNewarray
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|chain
specifier|public
specifier|final
name|ChainContext
name|chain
parameter_list|(
name|boolean
name|c
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|ChainContext
name|_localctx
init|=
operator|new
name|ChainContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|30
argument_list|,
name|RULE_chain
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|_alt
decl_stmt|;
name|setState
argument_list|(
literal|326
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|24
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|DynamicContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|292
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DynamicContext
operator|)
name|_localctx
operator|)
operator|.
name|p
operator|=
name|primary
argument_list|(
name|_localctx
operator|.
name|c
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|296
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|19
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|293
argument_list|)
expr_stmt|;
name|secondary
argument_list|(
operator|(
operator|(
name|DynamicContext
operator|)
name|_localctx
operator|)
operator|.
name|p
operator|.
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|298
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|19
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|StaticContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|299
argument_list|)
expr_stmt|;
name|decltype
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|dot
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|304
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|20
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|301
argument_list|)
expr_stmt|;
name|secondary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|306
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|20
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|3
case|:
name|_localctx
operator|=
operator|new
name|NewarrayContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|307
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NEW
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|308
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|313
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
literal|1
expr_stmt|;
do|do
block|{
switch|switch
condition|(
name|_alt
condition|)
block|{
case|case
literal|1
case|:
block|{
block|{
name|setState
argument_list|(
literal|309
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|310
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|311
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|this
argument_list|)
throw|;
block|}
name|setState
argument_list|(
literal|315
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|21
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
do|;
name|setState
argument_list|(
literal|324
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|23
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|317
argument_list|)
expr_stmt|;
name|dot
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|321
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|22
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
while|while
condition|(
name|_alt
operator|!=
literal|2
operator|&&
name|_alt
operator|!=
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|atn
operator|.
name|ATN
operator|.
name|INVALID_ALT_NUMBER
condition|)
block|{
if|if
condition|(
name|_alt
operator|==
literal|1
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|318
argument_list|)
expr_stmt|;
name|secondary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setState
argument_list|(
literal|323
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_alt
operator|=
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|22
argument_list|,
name|_ctx
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|PrimaryContext
specifier|public
specifier|static
class|class
name|PrimaryContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|c
specifier|public
name|boolean
name|c
decl_stmt|;
DECL|field|s
specifier|public
name|boolean
name|s
init|=
literal|true
decl_stmt|;
DECL|method|PrimaryContext
specifier|public
name|PrimaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|PrimaryContext
specifier|public
name|PrimaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|,
name|boolean
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_primary
return|;
block|}
DECL|method|PrimaryContext
specifier|public
name|PrimaryContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|ctx
operator|.
name|c
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|ctx
operator|.
name|s
expr_stmt|;
block|}
block|}
DECL|class|StringContext
specifier|public
specifier|static
class|class
name|StringContext
extends|extends
name|PrimaryContext
block|{
DECL|method|STRING
specifier|public
name|TerminalNode
name|STRING
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|STRING
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|StringContext
specifier|public
name|StringContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitString
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|VariableContext
specifier|public
specifier|static
class|class
name|VariableContext
extends|extends
name|PrimaryContext
block|{
DECL|method|ID
specifier|public
name|TerminalNode
name|ID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|VariableContext
specifier|public
name|VariableContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitVariable
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ExprprecContext
specifier|public
specifier|static
class|class
name|ExprprecContext
extends|extends
name|PrimaryContext
block|{
DECL|field|e
specifier|public
name|ExpressionContext
name|e
decl_stmt|;
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ExprprecContext
specifier|public
name|ExprprecContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitExprprec
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NewobjectContext
specifier|public
specifier|static
class|class
name|NewobjectContext
extends|extends
name|PrimaryContext
block|{
DECL|method|NEW
specifier|public
name|TerminalNode
name|NEW
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|NEW
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|TYPE
specifier|public
name|TerminalNode
name|TYPE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|TYPE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|arguments
specifier|public
name|ArgumentsContext
name|arguments
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ArgumentsContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NewobjectContext
specifier|public
name|NewobjectContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitNewobject
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|ChainprecContext
specifier|public
specifier|static
class|class
name|ChainprecContext
extends|extends
name|PrimaryContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|unary
specifier|public
name|UnaryContext
name|unary
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|UnaryContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ChainprecContext
specifier|public
name|ChainprecContext
parameter_list|(
name|PrimaryContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitChainprec
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|primary
specifier|public
specifier|final
name|PrimaryContext
name|primary
parameter_list|(
name|boolean
name|c
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|PrimaryContext
name|_localctx
init|=
operator|new
name|PrimaryContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|32
argument_list|,
name|RULE_primary
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|344
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|25
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|ExprprecContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|328
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" !$c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|329
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|330
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExprprecContext
operator|)
name|_localctx
operator|)
operator|.
name|e
operator|=
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|331
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExprprecContext
operator|)
name|_localctx
operator|)
operator|.
name|s
operator|=
operator|(
operator|(
name|ExprprecContext
operator|)
name|_localctx
operator|)
operator|.
name|e
operator|.
name|s
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|ChainprecContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|334
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_localctx
operator|.
name|c
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" $c "
argument_list|)
throw|;
name|setState
argument_list|(
literal|335
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|336
argument_list|)
expr_stmt|;
name|unary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|337
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
name|_localctx
operator|=
operator|new
name|StringContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|339
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
name|_localctx
operator|=
operator|new
name|VariableContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|340
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
name|_localctx
operator|=
operator|new
name|NewobjectContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|341
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NEW
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|342
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|343
argument_list|)
expr_stmt|;
name|arguments
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|SecondaryContext
specifier|public
specifier|static
class|class
name|SecondaryContext
extends|extends
name|ParserRuleContext
block|{
DECL|field|s
specifier|public
name|boolean
name|s
decl_stmt|;
DECL|method|dot
specifier|public
name|DotContext
name|dot
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|DotContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|brace
specifier|public
name|BraceContext
name|brace
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|BraceContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|SecondaryContext
specifier|public
name|SecondaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|SecondaryContext
specifier|public
name|SecondaryContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|,
name|boolean
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_secondary
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitSecondary
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|secondary
specifier|public
specifier|final
name|SecondaryContext
name|secondary
parameter_list|(
name|boolean
name|s
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|SecondaryContext
name|_localctx
init|=
operator|new
name|SecondaryContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|34
argument_list|,
name|RULE_secondary
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|350
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|26
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|346
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_localctx
operator|.
name|s
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" $s "
argument_list|)
throw|;
name|setState
argument_list|(
literal|347
argument_list|)
expr_stmt|;
name|dot
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|348
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_localctx
operator|.
name|s
operator|)
condition|)
throw|throw
operator|new
name|FailedPredicateException
argument_list|(
name|this
argument_list|,
literal|" $s "
argument_list|)
throw|;
name|setState
argument_list|(
literal|349
argument_list|)
expr_stmt|;
name|brace
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|DotContext
specifier|public
specifier|static
class|class
name|DotContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|DotContext
specifier|public
name|DotContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_dot
return|;
block|}
DECL|method|DotContext
specifier|public
name|DotContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|DotContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CallinvokeContext
specifier|public
specifier|static
class|class
name|CallinvokeContext
extends|extends
name|DotContext
block|{
DECL|method|DOT
specifier|public
name|TerminalNode
name|DOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DOTID
specifier|public
name|TerminalNode
name|DOTID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOTID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|arguments
specifier|public
name|ArgumentsContext
name|arguments
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ArgumentsContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|CallinvokeContext
specifier|public
name|CallinvokeContext
parameter_list|(
name|DotContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitCallinvoke
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|FieldaccessContext
specifier|public
specifier|static
class|class
name|FieldaccessContext
extends|extends
name|DotContext
block|{
DECL|method|DOT
specifier|public
name|TerminalNode
name|DOT
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOT
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DOTID
specifier|public
name|TerminalNode
name|DOTID
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOTID
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|DOTINTEGER
specifier|public
name|TerminalNode
name|DOTINTEGER
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|DOTINTEGER
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|FieldaccessContext
specifier|public
name|FieldaccessContext
parameter_list|(
name|DotContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitFieldaccess
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|dot
specifier|public
specifier|final
name|DotContext
name|dot
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|DotContext
name|_localctx
init|=
operator|new
name|DotContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|36
argument_list|,
name|RULE_dot
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|357
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|27
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|_localctx
operator|=
operator|new
name|CallinvokeContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|352
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|353
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOTID
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|354
argument_list|)
expr_stmt|;
name|arguments
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|_localctx
operator|=
operator|new
name|FieldaccessContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|355
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|356
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_la
operator|==
name|DOTINTEGER
operator|||
name|_la
operator|==
name|DOTID
operator|)
condition|)
block|{
name|_errHandler
operator|.
name|recoverInline
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|BraceContext
specifier|public
specifier|static
class|class
name|BraceContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|BraceContext
specifier|public
name|BraceContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_brace
return|;
block|}
DECL|method|BraceContext
specifier|public
name|BraceContext
parameter_list|()
block|{ }
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|BraceContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BraceaccessContext
specifier|public
specifier|static
class|class
name|BraceaccessContext
extends|extends
name|BraceContext
block|{
DECL|method|LBRACE
specifier|public
name|TerminalNode
name|LBRACE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LBRACE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RBRACE
specifier|public
name|TerminalNode
name|RBRACE
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RBRACE
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|BraceaccessContext
specifier|public
name|BraceaccessContext
parameter_list|(
name|BraceContext
name|ctx
parameter_list|)
block|{
name|copyFrom
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitBraceaccess
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|brace
specifier|public
specifier|final
name|BraceContext
name|brace
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BraceContext
name|_localctx
init|=
operator|new
name|BraceContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|38
argument_list|,
name|RULE_brace
argument_list|)
expr_stmt|;
try|try
block|{
name|_localctx
operator|=
operator|new
name|BraceaccessContext
argument_list|(
name|_localctx
argument_list|)
expr_stmt|;
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|359
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LBRACE
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|360
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|361
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ArgumentsContext
specifier|public
specifier|static
class|class
name|ArgumentsContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|LP
specifier|public
name|TerminalNode
name|LP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|LP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|RP
specifier|public
name|TerminalNode
name|RP
parameter_list|()
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|RP
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|argument
specifier|public
name|List
argument_list|<
name|ArgumentContext
argument_list|>
name|argument
parameter_list|()
block|{
return|return
name|getRuleContexts
argument_list|(
name|ArgumentContext
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|argument
specifier|public
name|ArgumentContext
name|argument
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getRuleContext
argument_list|(
name|ArgumentContext
operator|.
name|class
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|List
argument_list|<
name|TerminalNode
argument_list|>
name|COMMA
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|)
return|;
block|}
DECL|method|COMMA
specifier|public
name|TerminalNode
name|COMMA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|PainlessParser
operator|.
name|COMMA
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|ArgumentsContext
specifier|public
name|ArgumentsContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_arguments
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitArguments
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|arguments
specifier|public
specifier|final
name|ArgumentsContext
name|arguments
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|ArgumentsContext
name|_localctx
init|=
operator|new
name|ArgumentsContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|40
argument_list|,
name|RULE_arguments
argument_list|)
expr_stmt|;
name|int
name|_la
decl_stmt|;
try|try
block|{
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
block|{
name|setState
argument_list|(
literal|363
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LP
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|372
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|29
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
block|{
name|setState
argument_list|(
literal|364
argument_list|)
expr_stmt|;
name|argument
argument_list|()
expr_stmt|;
name|setState
argument_list|(
literal|369
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_la
operator|==
name|COMMA
condition|)
block|{
block|{
block|{
name|setState
argument_list|(
literal|365
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|setState
argument_list|(
literal|366
argument_list|)
expr_stmt|;
name|argument
argument_list|()
expr_stmt|;
block|}
block|}
name|setState
argument_list|(
literal|371
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|sync
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_la
operator|=
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
name|setState
argument_list|(
literal|374
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|class|ArgumentContext
specifier|public
specifier|static
class|class
name|ArgumentContext
extends|extends
name|ParserRuleContext
block|{
DECL|method|expression
specifier|public
name|ExpressionContext
name|expression
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|ExpressionContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|funcref
specifier|public
name|FuncrefContext
name|funcref
parameter_list|()
block|{
return|return
name|getRuleContext
argument_list|(
name|FuncrefContext
operator|.
name|class
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ArgumentContext
specifier|public
name|ArgumentContext
parameter_list|(
name|ParserRuleContext
name|parent
parameter_list|,
name|int
name|invokingState
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|invokingState
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleIndex
annotation|@
name|Override
specifier|public
name|int
name|getRuleIndex
parameter_list|()
block|{
return|return
name|RULE_argument
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|ParseTreeVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|PainlessParserVisitor
condition|)
return|return
operator|(
operator|(
name|PainlessParserVisitor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|visitor
operator|)
operator|.
name|visitArgument
argument_list|(
name|this
argument_list|)
return|;
else|else
return|return
name|visitor
operator|.
name|visitChildren
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|argument
specifier|public
specifier|final
name|ArgumentContext
name|argument
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|ArgumentContext
name|_localctx
init|=
operator|new
name|ArgumentContext
argument_list|(
name|_ctx
argument_list|,
name|getState
argument_list|()
argument_list|)
decl_stmt|;
name|enterRule
argument_list|(
name|_localctx
argument_list|,
literal|42
argument_list|,
name|RULE_argument
argument_list|)
expr_stmt|;
try|try
block|{
name|setState
argument_list|(
literal|378
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getInterpreter
argument_list|()
operator|.
name|adaptivePredict
argument_list|(
name|_input
argument_list|,
literal|30
argument_list|,
name|_ctx
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|376
argument_list|)
expr_stmt|;
name|expression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|enterOuterAlt
argument_list|(
name|_localctx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|setState
argument_list|(
literal|377
argument_list|)
expr_stmt|;
name|funcref
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|_localctx
operator|.
name|exception
operator|=
name|re
expr_stmt|;
name|_errHandler
operator|.
name|reportError
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|_errHandler
operator|.
name|recover
argument_list|(
name|this
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exitRule
argument_list|()
expr_stmt|;
block|}
return|return
name|_localctx
return|;
block|}
DECL|method|sempred
specifier|public
name|boolean
name|sempred
parameter_list|(
name|RuleContext
name|_localctx
parameter_list|,
name|int
name|ruleIndex
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|ruleIndex
condition|)
block|{
case|case
literal|1
case|:
return|return
name|statement_sempred
argument_list|(
operator|(
name|StatementContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
case|case
literal|13
case|:
return|return
name|expression_sempred
argument_list|(
operator|(
name|ExpressionContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
case|case
literal|14
case|:
return|return
name|unary_sempred
argument_list|(
operator|(
name|UnaryContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
case|case
literal|16
case|:
return|return
name|primary_sempred
argument_list|(
operator|(
name|PrimaryContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
case|case
literal|17
case|:
return|return
name|secondary_sempred
argument_list|(
operator|(
name|SecondaryContext
operator|)
name|_localctx
argument_list|,
name|predIndex
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|statement_sempred
specifier|private
name|boolean
name|statement_sempred
parameter_list|(
name|StatementContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|_input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|!=
name|ELSE
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|expression_sempred
specifier|private
name|boolean
name|expression_sempred
parameter_list|(
name|ExpressionContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|1
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|12
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|11
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|10
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|9
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|8
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|7
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|6
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|5
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|4
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|3
argument_list|)
return|;
case|case
literal|11
case|:
return|return
name|precpred
argument_list|(
name|_ctx
argument_list|,
literal|2
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|unary_sempred
specifier|private
name|boolean
name|unary_sempred
parameter_list|(
name|UnaryContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|12
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|13
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|14
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|15
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|16
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|17
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|18
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|19
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|primary_sempred
specifier|private
name|boolean
name|primary_sempred
parameter_list|(
name|PrimaryContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|20
case|:
return|return
operator|!
name|_localctx
operator|.
name|c
return|;
case|case
literal|21
case|:
return|return
name|_localctx
operator|.
name|c
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|secondary_sempred
specifier|private
name|boolean
name|secondary_sempred
parameter_list|(
name|SecondaryContext
name|_localctx
parameter_list|,
name|int
name|predIndex
parameter_list|)
block|{
switch|switch
condition|(
name|predIndex
condition|)
block|{
case|case
literal|22
case|:
return|return
name|_localctx
operator|.
name|s
return|;
case|case
literal|23
case|:
return|return
name|_localctx
operator|.
name|s
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|field|_serializedATN
specifier|public
specifier|static
specifier|final
name|String
name|_serializedATN
init|=
literal|"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3M\u017f\4\2\t\2\4"
operator|+
literal|"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"
operator|+
literal|"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"
operator|+
literal|"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\3\2\7\2\60\n\2\f\2"
operator|+
literal|"\16\2\63\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3?\n\3\3\3\3\3"
operator|+
literal|"\3\3\3\3\3\3\3\3\5\3G\n\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"
operator|+
literal|"\5\3T\n\3\3\3\3\3\5\3X\n\3\3\3\3\3\5\3\\\n\3\3\3\3\3\3\3\5\3a\n\3\3\3"
operator|+
literal|"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"
operator|+
literal|"\3\3\3\3\3\3\3\3\3\6\3z\n\3\r\3\16\3{\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3"
operator|+
literal|"\u0085\n\3\3\4\3\4\5\4\u0089\n\4\3\5\3\5\7\5\u008d\n\5\f\5\16\5\u0090"
operator|+
literal|"\13\5\3\5\3\5\3\6\3\6\3\7\3\7\5\7\u0098\n\7\3\b\3\b\3\t\3\t\3\t\3\t\7"
operator|+
literal|"\t\u00a0\n\t\f\t\16\t\u00a3\13\t\3\n\3\n\3\n\7\n\u00a8\n\n\f\n\16\n\u00ab"
operator|+
literal|"\13\n\3\13\3\13\3\13\3\13\3\f\3\f\3\f\5\f\u00b4\n\f\3\r\3\r\3\r\3\r\3"
operator|+
literal|"\r\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17"
operator|+
literal|"\u00c8\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"
operator|+
literal|"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"
operator|+
literal|"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"
operator|+
literal|"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"
operator|+
literal|"\3\17\3\17\3\17\7\17\u0103\n\17\f\17\16\17\u0106\13\17\3\20\3\20\3\20"
operator|+
literal|"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"
operator|+
literal|"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0125"
operator|+
literal|"\n\20\3\21\3\21\7\21\u0129\n\21\f\21\16\21\u012c\13\21\3\21\3\21\3\21"
operator|+
literal|"\7\21\u0131\n\21\f\21\16\21\u0134\13\21\3\21\3\21\3\21\3\21\3\21\3\21"
operator|+
literal|"\6\21\u013c\n\21\r\21\16\21\u013d\3\21\3\21\7\21\u0142\n\21\f\21\16\21"
operator|+
literal|"\u0145\13\21\5\21\u0147\n\21\5\21\u0149\n\21\3\22\3\22\3\22\3\22\3\22"
operator|+
literal|"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u015b\n\22"
operator|+
literal|"\3\23\3\23\3\23\3\23\5\23\u0161\n\23\3\24\3\24\3\24\3\24\3\24\5\24\u0168"
operator|+
literal|"\n\24\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\7\26\u0172\n\26\f\26\16"
operator|+
literal|"\26\u0175\13\26\5\26\u0177\n\26\3\26\3\26\3\27\3\27\5\27\u017d\n\27\3"
operator|+
literal|"\27\2\3\34\30\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,\2\r\3\3\r"
operator|+
literal|"\r\3\2\66A\3\2\34\36\3\2\37 \3\2!#\3\2$\'\3\2(+\3\2\64\65\3\2BE\4\2\32"
operator|+
literal|"\33\37 \3\2LM\u01a5\2\61\3\2\2\2\4\u0084\3\2\2\2\6\u0088\3\2\2\2\b\u008a"
operator|+
literal|"\3\2\2\2\n\u0093\3\2\2\2\f\u0097\3\2\2\2\16\u0099\3\2\2\2\20\u009b\3\2"
operator|+
literal|"\2\2\22\u00a4\3\2\2\2\24\u00ac\3\2\2\2\26\u00b0\3\2\2\2\30\u00b5\3\2\2"
operator|+
literal|"\2\32\u00bc\3\2\2\2\34\u00c7\3\2\2\2\36\u0124\3\2\2\2 \u0148\3\2\2\2\""
operator|+
literal|"\u015a\3\2\2\2$\u0160\3\2\2\2&\u0167\3\2\2\2(\u0169\3\2\2\2*\u016d\3\2"
operator|+
literal|"\2\2,\u017c\3\2\2\2.\60\5\4\3\2/.\3\2\2\2\60\63\3\2\2\2\61/\3\2\2\2\61"
operator|+
literal|"\62\3\2\2\2\62\64\3\2\2\2\63\61\3\2\2\2\64\65\7\2\2\3\65\3\3\2\2\2\66"
operator|+
literal|"\67\7\16\2\2\678\7\t\2\289\5\34\17\29:\7\n\2\2:>\5\6\4\2;<\7\17\2\2<?"
operator|+
literal|"\5\6\4\2=?\6\3\2\2>;\3\2\2\2>=\3\2\2\2?\u0085\3\2\2\2@A\7\20\2\2AB\7\t"
operator|+
literal|"\2\2BC\5\34\17\2CF\7\n\2\2DG\5\6\4\2EG\5\n\6\2FD\3\2\2\2FE\3\2\2\2G\u0085"
operator|+
literal|"\3\2\2\2HI\7\21\2\2IJ\5\b\5\2JK\7\20\2\2KL\7\t\2\2LM\5\34\17\2MN\7\n\2"
operator|+
literal|"\2NO\5\32\16\2O\u0085\3\2\2\2PQ\7\22\2\2QS\7\t\2\2RT\5\f\7\2SR\3\2\2\2"
operator|+
literal|"ST\3\2\2\2TU\3\2\2\2UW\7\r\2\2VX\5\34\17\2WV\3\2\2\2WX\3\2\2\2XY\3\2\2"
operator|+
literal|"\2Y[\7\r\2\2Z\\\5\16\b\2[Z\3\2\2\2[\\\3\2\2\2\\]\3\2\2\2]`\7\n\2\2^a\5"
operator|+
literal|"\6\4\2_a\5\n\6\2`^\3\2\2\2`_\3\2\2\2a\u0085\3\2\2\2bc\7\22\2\2cd\7\t\2"
operator|+
literal|"\2de\5\22\n\2ef\7K\2\2fg\7\62\2\2gh\5\34\17\2hi\7\n\2\2ij\5\6\4\2j\u0085"
operator|+
literal|"\3\2\2\2kl\5\20\t\2lm\5\32\16\2m\u0085\3\2\2\2no\7\23\2\2o\u0085\5\32"
operator|+
literal|"\16\2pq\7\24\2\2q\u0085\5\32\16\2rs\7\25\2\2st\5\34\17\2tu\5\32\16\2u"
operator|+
literal|"\u0085\3\2\2\2vw\7\27\2\2wy\5\b\5\2xz\5\30\r\2yx\3\2\2\2z{\3\2\2\2{y\3"
operator|+
literal|"\2\2\2{|\3\2\2\2|\u0085\3\2\2\2}~\7\31\2\2~\177\5\34\17\2\177\u0080\5"
operator|+
literal|"\32\16\2\u0080\u0085\3\2\2\2\u0081\u0082\5\34\17\2\u0082\u0083\5\32\16"
operator|+
literal|"\2\u0083\u0085\3\2\2\2\u0084\66\3\2\2\2\u0084@\3\2\2\2\u0084H\3\2\2\2"
operator|+
literal|"\u0084P\3\2\2\2\u0084b\3\2\2\2\u0084k\3\2\2\2\u0084n\3\2\2\2\u0084p\3"
operator|+
literal|"\2\2\2\u0084r\3\2\2\2\u0084v\3\2\2\2\u0084}\3\2\2\2\u0084\u0081\3\2\2"
operator|+
literal|"\2\u0085\5\3\2\2\2\u0086\u0089\5\b\5\2\u0087\u0089\5\4\3\2\u0088\u0086"
operator|+
literal|"\3\2\2\2\u0088\u0087\3\2\2\2\u0089\7\3\2\2\2\u008a\u008e\7\5\2\2\u008b"
operator|+
literal|"\u008d\5\4\3\2\u008c\u008b\3\2\2\2\u008d\u0090\3\2\2\2\u008e\u008c\3\2"
operator|+
literal|"\2\2\u008e\u008f\3\2\2\2\u008f\u0091\3\2\2\2\u0090\u008e\3\2\2\2\u0091"
operator|+
literal|"\u0092\7\6\2\2\u0092\t\3\2\2\2\u0093\u0094\7\r\2\2\u0094\13\3\2\2\2\u0095"
operator|+
literal|"\u0098\5\20\t\2\u0096\u0098\5\34\17\2\u0097\u0095\3\2\2\2\u0097\u0096"
operator|+
literal|"\3\2\2\2\u0098\r\3\2\2\2\u0099\u009a\5\34\17\2\u009a\17\3\2\2\2\u009b"
operator|+
literal|"\u009c\5\22\n\2\u009c\u00a1\5\26\f\2\u009d\u009e\7\f\2\2\u009e\u00a0\5"
operator|+
literal|"\26\f\2\u009f\u009d\3\2\2\2\u00a0\u00a3\3\2\2\2\u00a1\u009f\3\2\2\2\u00a1"
operator|+
literal|"\u00a2\3\2\2\2\u00a2\21\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a4\u00a9\7J\2\2"
operator|+
literal|"\u00a5\u00a6\7\7\2\2\u00a6\u00a8\7\b\2\2\u00a7\u00a5\3\2\2\2\u00a8\u00ab"
operator|+
literal|"\3\2\2\2\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\23\3\2\2\2\u00ab"
operator|+
literal|"\u00a9\3\2\2\2\u00ac\u00ad\7J\2\2\u00ad\u00ae\7\63\2\2\u00ae\u00af\7K"
operator|+
literal|"\2\2\u00af\25\3\2\2\2\u00b0\u00b3\7K\2\2\u00b1\u00b2\7\66\2\2\u00b2\u00b4"
operator|+
literal|"\5\34\17\2\u00b3\u00b1\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4\27\3\2\2\2\u00b5"
operator|+
literal|"\u00b6\7\30\2\2\u00b6\u00b7\7\t\2\2\u00b7\u00b8\7J\2\2\u00b8\u00b9\7K"
operator|+
literal|"\2\2\u00b9\u00ba\7\n\2\2\u00ba\u00bb\5\b\5\2\u00bb\31\3\2\2\2\u00bc\u00bd"
operator|+
literal|"\t\2\2\2\u00bd\33\3\2\2\2\u00be\u00bf\b\17\1\2\u00bf\u00c0\5 \21\2\u00c0"
operator|+
literal|"\u00c1\t\3\2\2\u00c1\u00c2\5\34\17\3\u00c2\u00c3\b\17\1\2\u00c3\u00c8"
operator|+
literal|"\3\2\2\2\u00c4\u00c5\5\36\20\2\u00c5\u00c6\b\17\1\2\u00c6\u00c8\3\2\2"
operator|+
literal|"\2\u00c7\u00be\3\2\2\2\u00c7\u00c4\3\2\2\2\u00c8\u0104\3\2\2\2\u00c9\u00ca"
operator|+
literal|"\f\16\2\2\u00ca\u00cb\t\4\2\2\u00cb\u00cc\5\34\17\17\u00cc\u00cd\b\17"
operator|+
literal|"\1\2\u00cd\u0103\3\2\2\2\u00ce\u00cf\f\r\2\2\u00cf\u00d0\t\5\2\2\u00d0"
operator|+
literal|"\u00d1\5\34\17\16\u00d1\u00d2\b\17\1\2\u00d2\u0103\3\2\2\2\u00d3\u00d4"
operator|+
literal|"\f\f\2\2\u00d4\u00d5\t\6\2\2\u00d5\u00d6\5\34\17\r\u00d6\u00d7\b\17\1"
operator|+
literal|"\2\u00d7\u0103\3\2\2\2\u00d8\u00d9\f\13\2\2\u00d9\u00da\t\7\2\2\u00da"
operator|+
literal|"\u00db\5\34\17\f\u00db\u00dc\b\17\1\2\u00dc\u0103\3\2\2\2\u00dd\u00de"
operator|+
literal|"\f\n\2\2\u00de\u00df\t\b\2\2\u00df\u00e0\5\34\17\13\u00e0\u00e1\b\17\1"
operator|+
literal|"\2\u00e1\u0103\3\2\2\2\u00e2\u00e3\f\t\2\2\u00e3\u00e4\7,\2\2\u00e4\u00e5"
operator|+
literal|"\5\34\17\n\u00e5\u00e6\b\17\1\2\u00e6\u0103\3\2\2\2\u00e7\u00e8\f\b\2"
operator|+
literal|"\2\u00e8\u00e9\7-\2\2\u00e9\u00ea\5\34\17\t\u00ea\u00eb\b\17\1\2\u00eb"
operator|+
literal|"\u0103\3\2\2\2\u00ec\u00ed\f\7\2\2\u00ed\u00ee\7.\2\2\u00ee\u00ef\5\34"
operator|+
literal|"\17\b\u00ef\u00f0\b\17\1\2\u00f0\u0103\3\2\2\2\u00f1\u00f2\f\6\2\2\u00f2"
operator|+
literal|"\u00f3\7/\2\2\u00f3\u00f4\5\34\17\7\u00f4\u00f5\b\17\1\2\u00f5\u0103\3"
operator|+
literal|"\2\2\2\u00f6\u00f7\f\5\2\2\u00f7\u00f8\7\60\2\2\u00f8\u00f9\5\34\17\6"
operator|+
literal|"\u00f9\u00fa\b\17\1\2\u00fa\u0103\3\2\2\2\u00fb\u00fc\f\4\2\2\u00fc\u00fd"
operator|+
literal|"\7\61\2\2\u00fd\u00fe\5\34\17\2\u00fe\u00ff\7\62\2\2\u00ff\u0100\5\34"
operator|+
literal|"\17\4\u0100\u0101\b\17\1\2\u0101\u0103\3\2\2\2\u0102\u00c9\3\2\2\2\u0102"
operator|+
literal|"\u00ce\3\2\2\2\u0102\u00d3\3\2\2\2\u0102\u00d8\3\2\2\2\u0102\u00dd\3\2"
operator|+
literal|"\2\2\u0102\u00e2\3\2\2\2\u0102\u00e7\3\2\2\2\u0102\u00ec\3\2\2\2\u0102"
operator|+
literal|"\u00f1\3\2\2\2\u0102\u00f6\3\2\2\2\u0102\u00fb\3\2\2\2\u0103\u0106\3\2"
operator|+
literal|"\2\2\u0104\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105\35\3\2\2\2\u0106\u0104"
operator|+
literal|"\3\2\2\2\u0107\u0108\6\20\16\3\u0108\u0109\t\t\2\2\u0109\u0125\5 \21\2"
operator|+
literal|"\u010a\u010b\6\20\17\3\u010b\u010c\5 \21\2\u010c\u010d\t\t\2\2\u010d\u0125"
operator|+
literal|"\3\2\2\2\u010e\u010f\6\20\20\3\u010f\u0125\5 \21\2\u0110\u0111\6\20\21"
operator|+
literal|"\3\u0111\u0112\t\n\2\2\u0112\u0125\b\20\1\2\u0113\u0114\6\20\22\3\u0114"
operator|+
literal|"\u0115\7G\2\2\u0115\u0125\b\20\1\2\u0116\u0117\6\20\23\3\u0117\u0118\7"
operator|+
literal|"H\2\2\u0118\u0125\b\20\1\2\u0119\u011a\6\20\24\3\u011a\u011b\7I\2\2\u011b"
operator|+
literal|"\u0125\b\20\1\2\u011c\u011d\6\20\25\3\u011d\u011e\t\13\2\2\u011e\u0125"
operator|+
literal|"\5\36\20\2\u011f\u0120\7\t\2\2\u0120\u0121\5\22\n\2\u0121\u0122\7\n\2"
operator|+
literal|"\2\u0122\u0123\5\36\20\2\u0123\u0125\3\2\2\2\u0124\u0107\3\2\2\2\u0124"
operator|+
literal|"\u010a\3\2\2\2\u0124\u010e\3\2\2\2\u0124\u0110\3\2\2\2\u0124\u0113\3\2"
operator|+
literal|"\2\2\u0124\u0116\3\2\2\2\u0124\u0119\3\2\2\2\u0124\u011c\3\2\2\2\u0124"
operator|+
literal|"\u011f\3\2\2\2\u0125\37\3\2\2\2\u0126\u012a\5\"\22\2\u0127\u0129\5$\23"
operator|+
literal|"\2\u0128\u0127\3\2\2\2\u0129\u012c\3\2\2\2\u012a\u0128\3\2\2\2\u012a\u012b"
operator|+
literal|"\3\2\2\2\u012b\u0149\3\2\2\2\u012c\u012a\3\2\2\2\u012d\u012e\5\22\n\2"
operator|+
literal|"\u012e\u0132\5&\24\2\u012f\u0131\5$\23\2\u0130\u012f\3\2\2\2\u0131\u0134"
operator|+
literal|"\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0149\3\2\2\2\u0134"
operator|+
literal|"\u0132\3\2\2\2\u0135\u0136\7\26\2\2\u0136\u013b\7J\2\2\u0137\u0138\7\7"
operator|+
literal|"\2\2\u0138\u0139\5\34\17\2\u0139\u013a\7\b\2\2\u013a\u013c\3\2\2\2\u013b"
operator|+
literal|"\u0137\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2"
operator|+
literal|"\2\2\u013e\u0146\3\2\2\2\u013f\u0143\5&\24\2\u0140\u0142\5$\23\2\u0141"
operator|+
literal|"\u0140\3\2\2\2\u0142\u0145\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3\2"
operator|+
literal|"\2\2\u0144\u0147\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u013f\3\2\2\2\u0146"
operator|+
literal|"\u0147\3\2\2\2\u0147\u0149\3\2\2\2\u0148\u0126\3\2\2\2\u0148\u012d\3\2"
operator|+
literal|"\2\2\u0148\u0135\3\2\2\2\u0149!\3\2\2\2\u014a\u014b\6\22\26\3\u014b\u014c"
operator|+
literal|"\7\t\2\2\u014c\u014d\5\34\17\2\u014d\u014e\7\n\2\2\u014e\u014f\b\22\1"
operator|+
literal|"\2\u014f\u015b\3\2\2\2\u0150\u0151\6\22\27\3\u0151\u0152\7\t\2\2\u0152"
operator|+
literal|"\u0153\5\36\20\2\u0153\u0154\7\n\2\2\u0154\u015b\3\2\2\2\u0155\u015b\7"
operator|+
literal|"F\2\2\u0156\u015b\7K\2\2\u0157\u0158\7\26\2\2\u0158\u0159\7J\2\2\u0159"
operator|+
literal|"\u015b\5*\26\2\u015a\u014a\3\2\2\2\u015a\u0150\3\2\2\2\u015a\u0155\3\2"
operator|+
literal|"\2\2\u015a\u0156\3\2\2\2\u015a\u0157\3\2\2\2\u015b#\3\2\2\2\u015c\u015d"
operator|+
literal|"\6\23\30\3\u015d\u0161\5&\24\2\u015e\u015f\6\23\31\3\u015f\u0161\5(\25"
operator|+
literal|"\2\u0160\u015c\3\2\2\2\u0160\u015e\3\2\2\2\u0161%\3\2\2\2\u0162\u0163"
operator|+
literal|"\7\13\2\2\u0163\u0164\7M\2\2\u0164\u0168\5*\26\2\u0165\u0166\7\13\2\2"
operator|+
literal|"\u0166\u0168\t\f\2\2\u0167\u0162\3\2\2\2\u0167\u0165\3\2\2\2\u0168\'\3"
operator|+
literal|"\2\2\2\u0169\u016a\7\7\2\2\u016a\u016b\5\34\17\2\u016b\u016c\7\b\2\2\u016c"
operator|+
literal|")\3\2\2\2\u016d\u0176\7\t\2\2\u016e\u0173\5,\27\2\u016f\u0170\7\f\2\2"
operator|+
literal|"\u0170\u0172\5,\27\2\u0171\u016f\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0171"
operator|+
literal|"\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2\u0176"
operator|+
literal|"\u016e\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\7\n"
operator|+
literal|"\2\2\u0179+\3\2\2\2\u017a\u017d\5\34\17\2\u017b\u017d\5\24\13\2\u017c"
operator|+
literal|"\u017a\3\2\2\2\u017c\u017b\3\2\2\2\u017d-\3\2\2\2!\61>FSW[`{\u0084\u0088"
operator|+
literal|"\u008e\u0097\u00a1\u00a9\u00b3\u00c7\u0102\u0104\u0124\u012a\u0132\u013d"
operator|+
literal|"\u0143\u0146\u0148\u015a\u0160\u0167\u0173\u0176\u017c"
decl_stmt|;
DECL|field|_ATN
specifier|public
specifier|static
specifier|final
name|ATN
name|_ATN
init|=
operator|new
name|ATNDeserializer
argument_list|()
operator|.
name|deserialize
argument_list|(
name|_serializedATN
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
name|_decisionToDFA
operator|=
operator|new
name|DFA
index|[
name|_ATN
operator|.
name|getNumberOfDecisions
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_ATN
operator|.
name|getNumberOfDecisions
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|_decisionToDFA
index|[
name|i
index|]
operator|=
operator|new
name|DFA
argument_list|(
name|_ATN
operator|.
name|getDecisionState
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

