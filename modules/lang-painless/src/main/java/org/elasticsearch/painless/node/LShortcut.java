begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Definition
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|painless
operator|.
name|MethodWriter
import|;
end_import

begin_comment
comment|/**  * Represents a field load/store shortcut.  (Internal only.)  */
end_comment

begin_class
DECL|class|LShortcut
specifier|final
class|class
name|LShortcut
extends|extends
name|ALink
block|{
DECL|field|value
specifier|final
name|String
name|value
decl_stmt|;
DECL|field|getter
name|Method
name|getter
init|=
literal|null
decl_stmt|;
DECL|field|setter
name|Method
name|setter
init|=
literal|null
decl_stmt|;
DECL|method|LShortcut
name|LShortcut
parameter_list|(
name|int
name|line
parameter_list|,
name|int
name|offset
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|line
argument_list|,
name|offset
argument_list|,
name|location
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|analyze
name|ALink
name|analyze
parameter_list|(
name|Variables
name|variables
parameter_list|)
block|{
name|Struct
name|struct
init|=
name|before
operator|.
name|struct
decl_stmt|;
name|getter
operator|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"get"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getter
operator|==
literal|null
condition|)
block|{
name|getter
operator|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"is"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setter
operator|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
operator|new
name|Definition
operator|.
name|MethodKey
argument_list|(
literal|"set"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
operator|(
name|getter
operator|.
name|rtn
operator|.
name|sort
operator|==
name|Sort
operator|.
name|VOID
operator|||
operator|!
name|getter
operator|.
name|arguments
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
literal|"Illegal get shortcut on field ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
operator|(
name|setter
operator|.
name|rtn
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
operator|||
name|setter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
literal|"Illegal set shortcut on field ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
name|setter
operator|!=
literal|null
operator|&&
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
name|getter
operator|.
name|rtn
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
literal|"Shortcut argument types must match."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|getter
operator|!=
literal|null
operator|||
name|setter
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|load
operator|||
name|getter
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|store
operator|||
name|setter
operator|!=
literal|null
operator|)
condition|)
block|{
name|after
operator|=
name|setter
operator|!=
literal|null
condition|?
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|getter
operator|.
name|rtn
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
literal|"Illegal shortcut on field ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|MethodWriter
name|writer
parameter_list|)
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
DECL|method|load
name|void
name|load
parameter_list|(
name|MethodWriter
name|writer
parameter_list|)
block|{
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isInterface
argument_list|(
name|getter
operator|.
name|owner
operator|.
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|writer
operator|.
name|invokeInterface
argument_list|(
name|getter
operator|.
name|owner
operator|.
name|type
argument_list|,
name|getter
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|invokeVirtual
argument_list|(
name|getter
operator|.
name|owner
operator|.
name|type
argument_list|,
name|getter
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getter
operator|.
name|rtn
operator|.
name|clazz
operator|.
name|equals
argument_list|(
name|getter
operator|.
name|handle
operator|.
name|type
argument_list|()
operator|.
name|returnType
argument_list|()
argument_list|)
condition|)
block|{
name|writer
operator|.
name|checkCast
argument_list|(
name|getter
operator|.
name|rtn
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|store
name|void
name|store
parameter_list|(
name|MethodWriter
name|writer
parameter_list|)
block|{
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isInterface
argument_list|(
name|setter
operator|.
name|owner
operator|.
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|writer
operator|.
name|invokeInterface
argument_list|(
name|setter
operator|.
name|owner
operator|.
name|type
argument_list|,
name|setter
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|invokeVirtual
argument_list|(
name|setter
operator|.
name|owner
operator|.
name|type
argument_list|,
name|setter
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writePop
argument_list|(
name|setter
operator|.
name|rtn
operator|.
name|sort
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

