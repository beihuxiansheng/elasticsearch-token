begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.script.expression
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|expression
package|;
end_package

begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_comment
comment|/**  * Expressions API for date fields.  */
end_comment

begin_class
DECL|class|DateField
specifier|final
class|class
name|DateField
block|{
comment|// no instance
DECL|method|DateField
specifier|private
name|DateField
parameter_list|()
block|{}
comment|// supported variables
DECL|field|VALUE_VARIABLE
specifier|static
specifier|final
name|String
name|VALUE_VARIABLE
init|=
literal|"value"
decl_stmt|;
DECL|field|EMPTY_VARIABLE
specifier|static
specifier|final
name|String
name|EMPTY_VARIABLE
init|=
literal|"empty"
decl_stmt|;
comment|// supported methods
DECL|field|MINIMUM_METHOD
specifier|static
specifier|final
name|String
name|MINIMUM_METHOD
init|=
literal|"min"
decl_stmt|;
DECL|field|MAXIMUM_METHOD
specifier|static
specifier|final
name|String
name|MAXIMUM_METHOD
init|=
literal|"max"
decl_stmt|;
DECL|field|AVERAGE_METHOD
specifier|static
specifier|final
name|String
name|AVERAGE_METHOD
init|=
literal|"avg"
decl_stmt|;
DECL|field|MEDIAN_METHOD
specifier|static
specifier|final
name|String
name|MEDIAN_METHOD
init|=
literal|"median"
decl_stmt|;
DECL|field|SUM_METHOD
specifier|static
specifier|final
name|String
name|SUM_METHOD
init|=
literal|"sum"
decl_stmt|;
DECL|field|COUNT_METHOD
specifier|static
specifier|final
name|String
name|COUNT_METHOD
init|=
literal|"count"
decl_stmt|;
DECL|field|GET_YEAR_METHOD
specifier|static
specifier|final
name|String
name|GET_YEAR_METHOD
init|=
literal|"getYear"
decl_stmt|;
DECL|field|GET_MONTH_METHOD
specifier|static
specifier|final
name|String
name|GET_MONTH_METHOD
init|=
literal|"getMonth"
decl_stmt|;
DECL|field|GET_DAY_OF_MONTH_METHOD
specifier|static
specifier|final
name|String
name|GET_DAY_OF_MONTH_METHOD
init|=
literal|"getDayOfMonth"
decl_stmt|;
DECL|field|GET_HOUR_OF_DAY_METHOD
specifier|static
specifier|final
name|String
name|GET_HOUR_OF_DAY_METHOD
init|=
literal|"getHourOfDay"
decl_stmt|;
DECL|field|GET_MINUTES_METHOD
specifier|static
specifier|final
name|String
name|GET_MINUTES_METHOD
init|=
literal|"getMinutes"
decl_stmt|;
DECL|field|GET_SECONDS_METHOD
specifier|static
specifier|final
name|String
name|GET_SECONDS_METHOD
init|=
literal|"getSeconds"
decl_stmt|;
DECL|method|getVariable
specifier|static
name|ValueSource
name|getVariable
parameter_list|(
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|fieldData
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|variable
parameter_list|)
block|{
switch|switch
condition|(
name|variable
condition|)
block|{
case|case
name|VALUE_VARIABLE
case|:
return|return
operator|new
name|FieldDataValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|)
return|;
case|case
name|EMPTY_VARIABLE
case|:
return|return
operator|new
name|EmptyMemberValueSource
argument_list|(
name|fieldData
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Member variable ["
operator|+
name|variable
operator|+
literal|"] does not exist for date field ["
operator|+
name|fieldName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
DECL|method|getMethod
specifier|static
name|ValueSource
name|getMethod
parameter_list|(
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|fieldData
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|method
parameter_list|)
block|{
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|MINIMUM_METHOD
case|:
return|return
operator|new
name|FieldDataValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|)
return|;
case|case
name|MAXIMUM_METHOD
case|:
return|return
operator|new
name|FieldDataValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MAX
argument_list|)
return|;
case|case
name|AVERAGE_METHOD
case|:
return|return
operator|new
name|FieldDataValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|AVG
argument_list|)
return|;
case|case
name|MEDIAN_METHOD
case|:
return|return
operator|new
name|FieldDataValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MEDIAN
argument_list|)
return|;
case|case
name|SUM_METHOD
case|:
return|return
operator|new
name|FieldDataValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|SUM
argument_list|)
return|;
case|case
name|COUNT_METHOD
case|:
return|return
operator|new
name|CountMethodValueSource
argument_list|(
name|fieldData
argument_list|)
return|;
case|case
name|GET_YEAR_METHOD
case|:
return|return
operator|new
name|DateMethodValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|,
name|method
argument_list|,
name|Calendar
operator|.
name|YEAR
argument_list|)
return|;
case|case
name|GET_MONTH_METHOD
case|:
return|return
operator|new
name|DateMethodValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|,
name|method
argument_list|,
name|Calendar
operator|.
name|MONTH
argument_list|)
return|;
case|case
name|GET_DAY_OF_MONTH_METHOD
case|:
return|return
operator|new
name|DateMethodValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|,
name|method
argument_list|,
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
return|;
case|case
name|GET_HOUR_OF_DAY_METHOD
case|:
return|return
operator|new
name|DateMethodValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|,
name|method
argument_list|,
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
return|;
case|case
name|GET_MINUTES_METHOD
case|:
return|return
operator|new
name|DateMethodValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|,
name|method
argument_list|,
name|Calendar
operator|.
name|MINUTE
argument_list|)
return|;
case|case
name|GET_SECONDS_METHOD
case|:
return|return
operator|new
name|DateMethodValueSource
argument_list|(
name|fieldData
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|,
name|method
argument_list|,
name|Calendar
operator|.
name|SECOND
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Member method ["
operator|+
name|method
operator|+
literal|"] does not exist for date field ["
operator|+
name|fieldName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

