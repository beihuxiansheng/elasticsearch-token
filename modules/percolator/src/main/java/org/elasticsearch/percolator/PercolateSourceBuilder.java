begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|PipelineAggregatorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|ScoreSortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Builder to create the percolate request body.  *  * @deprecated Instead use search API with {@link PercolateQueryBuilder}  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|PercolateSourceBuilder
specifier|public
class|class
name|PercolateSourceBuilder
extends|extends
name|ToXContentToBytes
block|{
DECL|field|docBuilder
specifier|private
name|DocBuilder
name|docBuilder
decl_stmt|;
DECL|field|queryBuilder
specifier|private
name|QueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|size
specifier|private
name|Integer
name|size
decl_stmt|;
DECL|field|sorts
specifier|private
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sorts
decl_stmt|;
DECL|field|trackScores
specifier|private
name|Boolean
name|trackScores
decl_stmt|;
DECL|field|highlightBuilder
specifier|private
name|HighlightBuilder
name|highlightBuilder
decl_stmt|;
DECL|field|aggregationBuilders
specifier|private
name|List
argument_list|<
name|AggregationBuilder
argument_list|>
name|aggregationBuilders
decl_stmt|;
DECL|field|pipelineAggregationBuilders
specifier|private
name|List
argument_list|<
name|PipelineAggregatorBuilder
argument_list|>
name|pipelineAggregationBuilders
decl_stmt|;
comment|/**      * Sets the document to run the percolate queries against.      */
DECL|method|setDoc
specifier|public
name|PercolateSourceBuilder
name|setDoc
parameter_list|(
name|DocBuilder
name|docBuilder
parameter_list|)
block|{
name|this
operator|.
name|docBuilder
operator|=
name|docBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a query to reduce the number of percolate queries to be evaluated and score the queries that match based      * on this query.      */
DECL|method|setQueryBuilder
specifier|public
name|PercolateSourceBuilder
name|setQueryBuilder
parameter_list|(
name|QueryBuilder
name|queryBuilder
parameter_list|)
block|{
name|this
operator|.
name|queryBuilder
operator|=
name|queryBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Limits the maximum number of percolate query matches to be returned.      */
DECL|method|setSize
specifier|public
name|PercolateSourceBuilder
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Similar as {@link #setTrackScores(boolean)}, but whether to sort by the score descending.      */
DECL|method|setSort
specifier|public
name|PercolateSourceBuilder
name|setSort
parameter_list|(
name|boolean
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sort
condition|)
block|{
name|addSort
argument_list|(
operator|new
name|ScoreSortBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|sorts
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Adds a sort builder. Only sorting by score desc is supported.      *      * By default the matching percolator queries are returned in an undefined order.      */
DECL|method|addSort
specifier|public
name|PercolateSourceBuilder
name|addSort
parameter_list|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sorts
operator|==
literal|null
condition|)
block|{
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|sorts
operator|.
name|add
argument_list|(
name|sort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Whether to compute a score for each match and include it in the response. The score is based on      * {@link #setQueryBuilder(QueryBuilder)}.      */
DECL|method|setTrackScores
specifier|public
name|PercolateSourceBuilder
name|setTrackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|this
operator|.
name|trackScores
operator|=
name|trackScores
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enables highlighting for the percolate document. Per matched percolate query highlight the percolate document.      */
DECL|method|setHighlightBuilder
specifier|public
name|PercolateSourceBuilder
name|setHighlightBuilder
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|)
block|{
name|this
operator|.
name|highlightBuilder
operator|=
name|highlightBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add an aggregation definition.      */
DECL|method|addAggregation
specifier|public
name|PercolateSourceBuilder
name|addAggregation
parameter_list|(
name|AggregationBuilder
name|aggregationBuilder
parameter_list|)
block|{
if|if
condition|(
name|aggregationBuilders
operator|==
literal|null
condition|)
block|{
name|aggregationBuilders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|aggregationBuilders
operator|.
name|add
argument_list|(
name|aggregationBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add an aggregation definition.      */
DECL|method|addAggregation
specifier|public
name|PercolateSourceBuilder
name|addAggregation
parameter_list|(
name|PipelineAggregatorBuilder
name|aggregationBuilder
parameter_list|)
block|{
if|if
condition|(
name|pipelineAggregationBuilders
operator|==
literal|null
condition|)
block|{
name|pipelineAggregationBuilders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|pipelineAggregationBuilders
operator|.
name|add
argument_list|(
name|aggregationBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|docBuilder
operator|!=
literal|null
condition|)
block|{
name|docBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sorts
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"sort"
argument_list|)
expr_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
range|:
name|sorts
control|)
block|{
name|sort
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trackScores
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"track_scores"
argument_list|,
name|trackScores
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlightBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|HIGHLIGHT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|highlightBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aggregationBuilders
operator|!=
literal|null
operator|||
name|pipelineAggregationBuilders
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"aggregations"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|aggregationBuilders
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AggregationBuilder
name|aggregation
range|:
name|aggregationBuilders
control|)
block|{
name|aggregation
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pipelineAggregationBuilders
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PipelineAggregatorBuilder
name|aggregation
range|:
name|pipelineAggregationBuilders
control|)
block|{
name|aggregation
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * @return A new {@link DocBuilder} instance.      */
DECL|method|docBuilder
specifier|public
specifier|static
name|DocBuilder
name|docBuilder
parameter_list|()
block|{
return|return
operator|new
name|DocBuilder
argument_list|()
return|;
block|}
comment|/**      * A builder for defining the document to be percolated in various ways.      */
DECL|class|DocBuilder
specifier|public
specifier|static
class|class
name|DocBuilder
implements|implements
name|ToXContent
block|{
DECL|field|doc
specifier|private
name|BytesReference
name|doc
decl_stmt|;
comment|/**          * Sets the document to be percolated.          */
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|BytesReference
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the document to be percolated.          */
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|setDoc
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the document to be percolated.          */
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|String
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
operator|new
name|BytesArray
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the document to be percolated.          */
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|XContentBuilder
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
operator|.
name|bytes
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the document to be percolated.          */
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|Map
name|doc
parameter_list|)
block|{
return|return
name|setDoc
argument_list|(
name|doc
argument_list|,
name|Requests
operator|.
name|CONTENT_TYPE
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|Map
name|doc
parameter_list|,
name|XContentType
name|contentType
parameter_list|)
block|{
try|try
block|{
return|return
name|setDoc
argument_list|(
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
operator|.
name|map
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|doc
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|builder
operator|.
name|rawField
argument_list|(
literal|"doc"
argument_list|,
name|doc
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

