begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PrefixCodedTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|BlendedTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CommonTermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DisjunctionMaxQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SynonymQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanFirstQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNotQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanOrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|RandomScoreFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|ExtractQueryTermsService
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|ExtractQueryTermsService
operator|.
name|EXTRACTION_COMPLETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|ExtractQueryTermsService
operator|.
name|EXTRACTION_FAILED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|ExtractQueryTermsService
operator|.
name|EXTRACTION_PARTIAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|ExtractQueryTermsService
operator|.
name|UnsupportedQueryException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|ExtractQueryTermsService
operator|.
name|extractQueryTerms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|ExtractQueryTermsService
operator|.
name|createQueryTermsQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|ExtractQueryTermsService
operator|.
name|selectTermListWithTheLongestShortestTerm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_class
DECL|class|ExtractQueryTermsServiceTests
specifier|public
class|class
name|ExtractQueryTermsServiceTests
extends|extends
name|ESTestCase
block|{
DECL|field|QUERY_TERMS_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_TERMS_FIELD
init|=
literal|"extracted_terms"
decl_stmt|;
DECL|field|EXTRACTION_RESULT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|EXTRACTION_RESULT_FIELD
init|=
literal|"extraction_result"
decl_stmt|;
DECL|field|QUERY_TERMS_FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|FieldType
name|QUERY_TERMS_FIELD_TYPE
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|QUERY_TERMS_FIELD_TYPE
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QUERY_TERMS_FIELD_TYPE
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|QUERY_TERMS_FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata
specifier|public
name|void
name|testExtractQueryMetadata
parameter_list|()
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"term1"
argument_list|)
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field2"
argument_list|,
literal|"term2"
argument_list|)
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|termQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|ParseContext
operator|.
name|Document
name|document
init|=
operator|new
name|ParseContext
operator|.
name|Document
argument_list|()
decl_stmt|;
name|extractQueryTerms
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|,
name|document
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|,
name|EXTRACTION_RESULT_FIELD
argument_list|,
name|QUERY_TERMS_FIELD_TYPE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getField
argument_list|(
name|EXTRACTION_RESULT_FIELD
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|EXTRACTION_COMPLETE
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexableField
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|document
operator|.
name|getFields
argument_list|(
name|QUERY_TERMS_FIELD
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|fields
argument_list|,
parameter_list|(
name|field1
parameter_list|,
name|field2
parameter_list|)
lambda|->
name|field1
operator|.
name|binaryValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|field2
operator|.
name|binaryValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|QUERY_TERMS_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|binaryValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field1\u0000term1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|QUERY_TERMS_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|binaryValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field2\u0000term2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_unsupported
specifier|public
name|void
name|testExtractQueryMetadata_unsupported
parameter_list|()
block|{
name|TermRangeQuery
name|query
init|=
operator|new
name|TermRangeQuery
argument_list|(
literal|"field1"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"z"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ParseContext
operator|.
name|Document
name|document
init|=
operator|new
name|ParseContext
operator|.
name|Document
argument_list|()
decl_stmt|;
name|extractQueryTerms
argument_list|(
name|query
argument_list|,
name|document
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|,
name|EXTRACTION_RESULT_FIELD
argument_list|,
name|QUERY_TERMS_FIELD_TYPE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getField
argument_list|(
name|EXTRACTION_RESULT_FIELD
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|EXTRACTION_FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_notVerified
specifier|public
name|void
name|testExtractQueryMetadata_notVerified
parameter_list|()
block|{
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"term"
argument_list|)
decl_stmt|;
name|ParseContext
operator|.
name|Document
name|document
init|=
operator|new
name|ParseContext
operator|.
name|Document
argument_list|()
decl_stmt|;
name|extractQueryTerms
argument_list|(
name|phraseQuery
argument_list|,
name|document
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|,
name|EXTRACTION_RESULT_FIELD
argument_list|,
name|QUERY_TERMS_FIELD_TYPE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|QUERY_TERMS_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|binaryValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field\u0000term"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getField
argument_list|(
name|EXTRACTION_RESULT_FIELD
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|EXTRACTION_PARTIAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_termQuery
specifier|public
name|void
name|testExtractQueryMetadata_termQuery
parameter_list|()
block|{
name|TermQuery
name|termQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term"
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|termQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_termsQuery
specifier|public
name|void
name|testExtractQueryMetadata_termsQuery
parameter_list|()
block|{
name|TermsQuery
name|termsQuery
init|=
operator|new
name|TermsQuery
argument_list|(
literal|"_field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"_term1"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"_term2"
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|termsQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_term1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_term2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with different fields
name|termsQuery
operator|=
operator|new
name|TermsQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field1"
argument_list|,
literal|"_term1"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_field2"
argument_list|,
literal|"_term2"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|termsQuery
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|terms
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_term1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_term2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_phraseQuery
specifier|public
name|void
name|testExtractQueryMetadata_phraseQuery
parameter_list|()
block|{
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|"_field"
argument_list|,
literal|"_term1"
argument_list|,
literal|"term2"
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|phraseQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
index|[
literal|0
index|]
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
index|[
literal|0
index|]
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_booleanQuery
specifier|public
name|void
name|testExtractQueryMetadata_booleanQuery
parameter_list|()
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|"_field"
argument_list|,
literal|"_term1"
argument_list|,
literal|"term2"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|phraseQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|subBuilder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|TermQuery
name|termQuery2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field1"
argument_list|,
literal|"_term"
argument_list|)
argument_list|)
decl_stmt|;
name|subBuilder
operator|.
name|add
argument_list|(
name|termQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery3
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field3"
argument_list|,
literal|"_long_term"
argument_list|)
argument_list|)
decl_stmt|;
name|subBuilder
operator|.
name|add
argument_list|(
name|termQuery3
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|subBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|booleanQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Should clause with phrase query isn't verified, so entire query can't be verified"
argument_list|,
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
index|[
literal|0
index|]
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
index|[
literal|0
index|]
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery3
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery3
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_booleanQuery_onlyShould
specifier|public
name|void
name|testExtractQueryMetadata_booleanQuery_onlyShould
parameter_list|()
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term1"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term2"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|subBuilder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|TermQuery
name|termQuery3
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field1"
argument_list|,
literal|"_term"
argument_list|)
argument_list|)
decl_stmt|;
name|subBuilder
operator|.
name|add
argument_list|(
name|termQuery3
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery4
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field3"
argument_list|,
literal|"_long_term"
argument_list|)
argument_list|)
decl_stmt|;
name|subBuilder
operator|.
name|add
argument_list|(
name|termQuery4
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|subBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|booleanQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery2
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery2
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery3
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery3
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery4
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery4
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_booleanQueryWithMustNot
specifier|public
name|void
name|testExtractQueryMetadata_booleanQueryWithMustNot
parameter_list|()
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|"_field"
argument_list|,
literal|"_term1"
argument_list|,
literal|"term2"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|phraseQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|booleanQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
index|[
literal|0
index|]
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
index|[
literal|0
index|]
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExactMatch_booleanQuery
specifier|public
name|void
name|testExactMatch_booleanQuery
parameter_list|()
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term1"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term2"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"All clauses are exact, so candidate matches are verified"
argument_list|,
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery1
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|"_field"
argument_list|,
literal|"_term1"
argument_list|,
literal|"_term2"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|phraseQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Clause isn't exact, so candidate matches are not verified"
argument_list|,
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|phraseQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery2
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|"_field"
argument_list|,
literal|"_term3"
argument_list|,
literal|"_term4"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|phraseQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"No clause is exact, so candidate matches are not verified"
argument_list|,
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"There is a must_not clause, so candidate matches are not verified"
argument_list|,
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Minimum match is>= 1, so candidate matches are not verified"
argument_list|,
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
else|:
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Single required clause, so candidate matches are verified"
argument_list|,
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
else|:
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery2
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
else|:
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Two or more required clauses, so candidate matches are not verified"
argument_list|,
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
else|:
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Required and prohibited clauses, so candidate matches are not verified"
argument_list|,
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_constantScoreQuery
specifier|public
name|void
name|testExtractQueryMetadata_constantScoreQuery
parameter_list|()
block|{
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term"
argument_list|)
argument_list|)
decl_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|termQuery1
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|constantScoreQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_boostQuery
specifier|public
name|void
name|testExtractQueryMetadata_boostQuery
parameter_list|()
block|{
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term"
argument_list|)
argument_list|)
decl_stmt|;
name|BoostQuery
name|constantScoreQuery
init|=
operator|new
name|BoostQuery
argument_list|(
name|termQuery1
argument_list|,
literal|1f
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|constantScoreQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_commonTermsQuery
specifier|public
name|void
name|testExtractQueryMetadata_commonTermsQuery
parameter_list|()
block|{
name|CommonTermsQuery
name|commonTermsQuery
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|commonTermsQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term1"
argument_list|)
argument_list|)
expr_stmt|;
name|commonTermsQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term2"
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|commonTermsQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_term1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_term2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_blendedTermQuery
specifier|public
name|void
name|testExtractQueryMetadata_blendedTermQuery
parameter_list|()
block|{
name|Term
index|[]
name|termsArr
init|=
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term1"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term2"
argument_list|)
block|}
decl_stmt|;
name|BlendedTermQuery
name|commonTermsQuery
init|=
name|BlendedTermQuery
operator|.
name|booleanBlendedQuery
argument_list|(
name|termsArr
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|commonTermsQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_term1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_term2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_spanTermQuery
specifier|public
name|void
name|testExtractQueryMetadata_spanTermQuery
parameter_list|()
block|{
comment|// the following span queries aren't exposed in the query dsl and are therefor not supported:
comment|// 1) SpanPositionRangeQuery
comment|// 2) PayloadScoreQuery
comment|// 3) SpanBoostQuery
comment|// The following span queries can't be supported because of how these queries work:
comment|// 1) SpanMultiTermQueryWrapper, not supported, because there is no support for MTQ typed queries yet.
comment|// 2) SpanContainingQuery, is kind of range of spans and we don't know what is between the little and big terms
comment|// 3) SpanWithinQuery, same reason as SpanContainingQuery
comment|// 4) FieldMaskingSpanQuery is a tricky query so we shouldn't optimize this
name|SpanTermQuery
name|spanTermQuery1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_short_term"
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|spanTermQuery1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
name|spanTermQuery1
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_spanNearQuery
specifier|public
name|void
name|testExtractQueryMetadata_spanNearQuery
parameter_list|()
block|{
name|SpanTermQuery
name|spanTermQuery1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_short_term"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|spanTermQuery2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_very_long_term"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|new
name|SpanNearQuery
operator|.
name|Builder
argument_list|(
literal|"_field"
argument_list|,
literal|true
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery1
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|spanNearQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
name|spanTermQuery2
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_spanOrQuery
specifier|public
name|void
name|testExtractQueryMetadata_spanOrQuery
parameter_list|()
block|{
name|SpanTermQuery
name|spanTermQuery1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_short_term"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|spanTermQuery2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_very_long_term"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|new
name|SpanOrQuery
argument_list|(
name|spanTermQuery1
argument_list|,
name|spanTermQuery2
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|spanOrQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
name|spanTermQuery1
operator|.
name|getTerm
argument_list|()
argument_list|,
name|spanTermQuery2
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_spanFirstQuery
specifier|public
name|void
name|testExtractQueryMetadata_spanFirstQuery
parameter_list|()
block|{
name|SpanTermQuery
name|spanTermQuery1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_short_term"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanFirstQuery
name|spanFirstQuery
init|=
operator|new
name|SpanFirstQuery
argument_list|(
name|spanTermQuery1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|spanFirstQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
name|spanTermQuery1
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_spanNotQuery
specifier|public
name|void
name|testExtractQueryMetadata_spanNotQuery
parameter_list|()
block|{
name|SpanTermQuery
name|spanTermQuery1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_short_term"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|spanTermQuery2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_very_long_term"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNotQuery
name|spanNotQuery
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|spanTermQuery1
argument_list|,
name|spanTermQuery2
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|spanNotQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
name|spanTermQuery1
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_matchNoDocsQuery
specifier|public
name|void
name|testExtractQueryMetadata_matchNoDocsQuery
parameter_list|()
block|{
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"sometimes there is no reason at all"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|terms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"sometimes there is no reason at all"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|terms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bq
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"sometimes there is no reason at all"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"sometimes there is no reason at all"
argument_list|)
argument_list|)
argument_list|,
literal|1f
argument_list|)
decl_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|disjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_matchAllDocsQuery
specifier|public
name|void
name|testExtractQueryMetadata_matchAllDocsQuery
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|UnsupportedQueryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|extractQueryTerms
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq1
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedQueryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|extractQueryTerms
argument_list|(
name|bq1
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq2
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedQueryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|extractQueryTerms
argument_list|(
name|bq2
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq3
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedQueryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|extractQueryTerms
argument_list|(
name|bq3
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq4
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedQueryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|extractQueryTerms
argument_list|(
name|bq4
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq5
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedQueryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|extractQueryTerms
argument_list|(
name|bq5
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_unsupportedQuery
specifier|public
name|void
name|testExtractQueryMetadata_unsupportedQuery
parameter_list|()
block|{
name|TermRangeQuery
name|termRangeQuery
init|=
operator|new
name|TermRangeQuery
argument_list|(
literal|"_field"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|UnsupportedQueryException
name|e
init|=
name|expectThrows
argument_list|(
name|UnsupportedQueryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|extractQueryTerms
argument_list|(
name|termRangeQuery
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getUnsupportedQuery
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|termRangeQuery
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term"
argument_list|)
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termRangeQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|UnsupportedQueryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|extractQueryTerms
argument_list|(
name|bq
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getUnsupportedQuery
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|termRangeQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_unsupportedQueryInBoolQueryWithMustClauses
specifier|public
name|void
name|testExtractQueryMetadata_unsupportedQueryInBoolQueryWithMustClauses
parameter_list|()
block|{
name|TermRangeQuery
name|unsupportedQuery
init|=
operator|new
name|TermRangeQuery
argument_list|(
literal|"_field"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term"
argument_list|)
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|unsupportedQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq1
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|bq1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
name|termQuery1
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_longer_term"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|termQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|unsupportedQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq1
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|bq1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
name|termQuery2
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|unsupportedQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|unsupportedQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq2
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|UnsupportedQueryException
name|e
init|=
name|expectThrows
argument_list|(
name|UnsupportedQueryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|extractQueryTerms
argument_list|(
name|bq2
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getUnsupportedQuery
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|unsupportedQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractQueryMetadata_disjunctionMaxQuery
specifier|public
name|void
name|testExtractQueryMetadata_disjunctionMaxQuery
parameter_list|()
block|{
name|TermQuery
name|termQuery1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term1"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|termQuery2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term2"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|termQuery3
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term3"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|termQuery4
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_term4"
argument_list|)
argument_list|)
decl_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|termQuery1
argument_list|,
name|termQuery2
argument_list|,
name|termQuery3
argument_list|,
name|termQuery4
argument_list|)
argument_list|,
literal|0.1f
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|disjunctionMaxQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery2
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery2
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery3
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery3
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery4
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery4
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disjunctionMaxQuery
operator|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|termQuery1
argument_list|,
name|termQuery2
argument_list|,
name|termQuery3
argument_list|,
operator|new
name|PhraseQuery
argument_list|(
literal|"_field"
argument_list|,
literal|"_term4"
argument_list|)
argument_list|)
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|disjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|terms
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
operator|.
name|terms
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery1
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery2
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery2
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery3
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery3
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery4
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termQuery4
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSynonymQuery
specifier|public
name|void
name|testSynonymQuery
parameter_list|()
block|{
name|SynonymQuery
name|query
init|=
operator|new
name|SynonymQuery
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|terms
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_value1"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_value2"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_value1"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_value2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFunctionScoreQuery
specifier|public
name|void
name|testFunctionScoreQuery
parameter_list|()
block|{
name|TermQuery
name|termQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_value"
argument_list|)
argument_list|)
decl_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|new
name|FunctionScoreQuery
argument_list|(
name|termQuery
argument_list|,
operator|new
name|RandomScoreFunction
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|extractQueryTerms
argument_list|(
name|functionScoreQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_value"
argument_list|)
argument_list|)
expr_stmt|;
name|functionScoreQuery
operator|=
operator|new
name|FunctionScoreQuery
argument_list|(
name|termQuery
argument_list|,
operator|new
name|RandomScoreFunction
argument_list|()
argument_list|,
literal|1f
argument_list|,
literal|null
argument_list|,
literal|10f
argument_list|)
expr_stmt|;
name|result
operator|=
name|extractQueryTerms
argument_list|(
name|functionScoreQuery
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|verified
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermsEqual
argument_list|(
name|result
operator|.
name|terms
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_field"
argument_list|,
literal|"_value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateQueryMetadataQuery
specifier|public
name|void
name|testCreateQueryMetadataQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryIndex
name|memoryIndex
init|=
operator|new
name|MemoryIndex
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|memoryIndex
operator|.
name|addField
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|memoryIndex
operator|.
name|addField
argument_list|(
literal|"field2"
argument_list|,
literal|"some more text"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|memoryIndex
operator|.
name|addField
argument_list|(
literal|"_field3"
argument_list|,
literal|"unhide me"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|memoryIndex
operator|.
name|addField
argument_list|(
literal|"field4"
argument_list|,
literal|"123"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|indexReader
init|=
name|memoryIndex
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|TermsQuery
name|query
init|=
operator|(
name|TermsQuery
operator|)
name|createQueryTermsQuery
argument_list|(
name|indexReader
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|,
operator|new
name|Term
argument_list|(
name|EXTRACTION_RESULT_FIELD
argument_list|,
name|EXTRACTION_FAILED
argument_list|)
argument_list|)
decl_stmt|;
name|PrefixCodedTerms
name|terms
init|=
name|query
operator|.
name|getTermData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|15L
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixCodedTerms
operator|.
name|TermIterator
name|termIterator
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"_field3\u0000me"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"_field3\u0000unhide"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field1\u0000brown"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field1\u0000dog"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field1\u0000fox"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field1\u0000jumps"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field1\u0000lazy"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field1\u0000over"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field1\u0000quick"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field1\u0000the"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field2\u0000more"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field2\u0000some"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field2\u0000text"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
literal|"field4\u0000123"
argument_list|,
name|QUERY_TERMS_FIELD
argument_list|)
expr_stmt|;
name|assertTermIterator
argument_list|(
name|termIterator
argument_list|,
name|EXTRACTION_FAILED
argument_list|,
name|EXTRACTION_RESULT_FIELD
argument_list|)
expr_stmt|;
block|}
DECL|method|testSelectTermsListWithHighestSumOfTermLength
specifier|public
name|void
name|testSelectTermsListWithHighestSumOfTermLength
parameter_list|()
block|{
name|Set
argument_list|<
name|Term
argument_list|>
name|terms1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|shortestTerms1Length
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|sumTermLength
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|128
argument_list|)
decl_stmt|;
while|while
condition|(
name|sumTermLength
operator|>
literal|0
condition|)
block|{
name|int
name|length
init|=
name|randomInt
argument_list|(
name|sumTermLength
argument_list|)
decl_stmt|;
name|shortestTerms1Length
operator|=
name|Math
operator|.
name|min
argument_list|(
name|shortestTerms1Length
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|terms1
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|randomAsciiOfLength
argument_list|(
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sumTermLength
operator|-=
name|length
expr_stmt|;
block|}
name|Set
argument_list|<
name|Term
argument_list|>
name|terms2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|shortestTerms2Length
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|sumTermLength
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|128
argument_list|)
expr_stmt|;
while|while
condition|(
name|sumTermLength
operator|>
literal|0
condition|)
block|{
name|int
name|length
init|=
name|randomInt
argument_list|(
name|sumTermLength
argument_list|)
decl_stmt|;
name|shortestTerms2Length
operator|=
name|Math
operator|.
name|min
argument_list|(
name|shortestTerms2Length
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|terms2
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|randomAsciiOfLength
argument_list|(
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sumTermLength
operator|-=
name|length
expr_stmt|;
block|}
name|Set
argument_list|<
name|Term
argument_list|>
name|result
init|=
name|selectTermListWithTheLongestShortestTerm
argument_list|(
name|terms1
argument_list|,
name|terms2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Term
argument_list|>
name|expected
init|=
name|shortestTerms1Length
operator|>=
name|shortestTerms2Length
condition|?
name|terms1
else|:
name|terms2
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|sameInstance
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTermIterator
specifier|private
name|void
name|assertTermIterator
parameter_list|(
name|PrefixCodedTerms
operator|.
name|TermIterator
name|termIterator
parameter_list|,
name|String
name|expectedValue
parameter_list|,
name|String
name|expectedField
parameter_list|)
block|{
name|assertThat
argument_list|(
name|termIterator
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termIterator
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedField
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTermsEqual
specifier|private
specifier|static
name|void
name|assertTermsEqual
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|actual
parameter_list|,
name|Term
modifier|...
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|)
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

