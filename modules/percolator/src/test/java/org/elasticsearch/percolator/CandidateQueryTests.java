begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|BlendedTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CommonTermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreWeight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilterScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredDocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNotQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanOrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|CandidateQueryTests
specifier|public
class|class
name|CandidateQueryTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|field|directory
specifier|private
name|Directory
name|directory
decl_stmt|;
DECL|field|indexWriter
specifier|private
name|IndexWriter
name|indexWriter
decl_stmt|;
DECL|field|documentMapper
specifier|private
name|DocumentMapper
name|documentMapper
decl_stmt|;
DECL|field|directoryReader
specifier|private
name|DirectoryReader
name|directoryReader
decl_stmt|;
DECL|field|mapperService
specifier|private
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|fieldMapper
specifier|private
name|PercolatorFieldMapper
name|fieldMapper
decl_stmt|;
DECL|field|fieldType
specifier|private
name|PercolatorFieldMapper
operator|.
name|FieldType
name|fieldType
decl_stmt|;
DECL|field|queries
specifier|private
name|List
argument_list|<
name|Query
argument_list|>
name|queries
decl_stmt|;
DECL|field|queryStore
specifier|private
name|PercolateQuery
operator|.
name|QueryStore
name|queryStore
decl_stmt|;
annotation|@
name|Override
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|PercolatorPlugin
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|directory
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|IndexWriterConfig
name|config
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|String
name|indexName
init|=
literal|"test"
decl_stmt|;
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
name|indexName
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|mapperService
operator|=
name|indexService
operator|.
name|mapperService
argument_list|()
expr_stmt|;
name|String
name|mapper
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"int_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"long_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"half_float_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"half_float"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"float_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"float"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"double_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"ip_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"ip"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|documentMapper
operator|=
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapper
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|queryField
init|=
literal|"query_field"
decl_stmt|;
name|String
name|percolatorMapper
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|queryField
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"percolator"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|percolatorMapper
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fieldMapper
operator|=
operator|(
name|PercolatorFieldMapper
operator|)
name|mapperService
operator|.
name|documentMapper
argument_list|(
literal|"type"
argument_list|)
operator|.
name|mappers
argument_list|()
operator|.
name|getMapper
argument_list|(
name|queryField
argument_list|)
expr_stmt|;
name|fieldType
operator|=
operator|(
name|PercolatorFieldMapper
operator|.
name|FieldType
operator|)
name|fieldMapper
operator|.
name|fieldType
argument_list|()
expr_stmt|;
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|queryStore
operator|=
name|ctx
lambda|->
name|docId
lambda|->
name|this
operator|.
name|queries
operator|.
name|get
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|deinit
specifier|public
name|void
name|deinit
parameter_list|()
throws|throws
name|Exception
block|{
name|directoryReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDuel
specifier|public
name|void
name|testDuel
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Function
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
argument_list|>
name|queryFunctions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
operator|+
literal|"*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
operator|new
name|CustomQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"no reason"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CustomQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"no reason"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CustomQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"no reason"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"no reason"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CustomQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
expr_stmt|;
name|queryFunctions
operator|.
name|add
argument_list|(
parameter_list|(
name|id
parameter_list|)
lambda|->
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"no reason at all"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
name|queryFunctions
operator|.
name|size
argument_list|()
argument_list|,
name|queryFunctions
operator|.
name|size
argument_list|()
operator|*
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ParseContext
operator|.
name|Document
argument_list|>
name|documents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryFunctions
operator|.
name|get
argument_list|(
name|i
operator|%
name|queryFunctions
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|addQuery
argument_list|(
name|query
argument_list|,
name|documents
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|addDocuments
argument_list|(
name|documents
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|directoryReader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IndexSearcher
name|shardSearcher
init|=
name|newSearcher
argument_list|(
name|directoryReader
argument_list|)
decl_stmt|;
comment|// Disable query cache, because ControlQuery cannot be cached...
name|shardSearcher
operator|.
name|setQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
init|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
decl_stmt|;
name|MemoryIndex
name|memoryIndex
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|duelRun
argument_list|(
name|queryStore
argument_list|,
name|memoryIndex
argument_list|,
name|shardSearcher
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
init|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
decl_stmt|;
name|MemoryIndex
name|memoryIndex
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|duelRun
argument_list|(
name|queryStore
argument_list|,
name|memoryIndex
argument_list|,
name|shardSearcher
argument_list|)
expr_stmt|;
comment|// Empty percolator doc:
name|memoryIndex
operator|=
operator|new
name|MemoryIndex
argument_list|()
expr_stmt|;
name|duelRun
argument_list|(
name|queryStore
argument_list|,
name|memoryIndex
argument_list|,
name|shardSearcher
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuelSpecificQueries
specifier|public
name|void
name|testDuelSpecificQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ParseContext
operator|.
name|Document
argument_list|>
name|documents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CommonTermsQuery
name|commonTermsQuery
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|commonTermsQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
expr_stmt|;
name|commonTermsQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"brown"
argument_list|)
argument_list|)
expr_stmt|;
name|commonTermsQuery
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
expr_stmt|;
name|addQuery
argument_list|(
name|commonTermsQuery
argument_list|,
name|documents
argument_list|)
expr_stmt|;
name|BlendedTermQuery
name|blendedTermQuery
init|=
name|BlendedTermQuery
operator|.
name|dismaxBlendedQuery
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"quick"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"brown"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"fox"
argument_list|)
block|}
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|addQuery
argument_list|(
name|blendedTermQuery
argument_list|,
name|documents
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|new
name|SpanNearQuery
operator|.
name|Builder
argument_list|(
literal|"field"
argument_list|,
literal|true
argument_list|)
operator|.
name|addClause
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addClause
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"brown"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addClause
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addQuery
argument_list|(
name|spanNearQuery
argument_list|,
name|documents
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery2
init|=
operator|new
name|SpanNearQuery
operator|.
name|Builder
argument_list|(
literal|"field"
argument_list|,
literal|true
argument_list|)
operator|.
name|addClause
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"the"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addClause
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"lazy"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addClause
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"doc"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|new
name|SpanOrQuery
argument_list|(
name|spanNearQuery
argument_list|,
name|spanNearQuery2
argument_list|)
decl_stmt|;
name|addQuery
argument_list|(
name|spanOrQuery
argument_list|,
name|documents
argument_list|)
expr_stmt|;
name|SpanNotQuery
name|spanNotQuery
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|spanNearQuery
argument_list|,
name|spanNearQuery
argument_list|)
decl_stmt|;
name|addQuery
argument_list|(
name|spanNotQuery
argument_list|,
name|documents
argument_list|)
expr_stmt|;
name|long
name|lowerLong
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|long
name|upperLong
init|=
name|lowerLong
operator|+
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|addQuery
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"long_field"
argument_list|,
name|lowerLong
argument_list|,
name|upperLong
argument_list|)
argument_list|,
name|documents
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocuments
argument_list|(
name|documents
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|directoryReader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IndexSearcher
name|shardSearcher
init|=
name|newSearcher
argument_list|(
name|directoryReader
argument_list|)
decl_stmt|;
comment|// Disable query cache, because ControlQuery cannot be cached...
name|shardSearcher
operator|.
name|setQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|randomLong
init|=
name|randomIntBetween
argument_list|(
operator|(
name|int
operator|)
name|lowerLong
argument_list|,
operator|(
name|int
operator|)
name|upperLong
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"long_field"
argument_list|,
name|randomLong
argument_list|)
argument_list|)
expr_stmt|;
name|MemoryIndex
name|memoryIndex
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|document
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|duelRun
argument_list|(
name|queryStore
argument_list|,
name|memoryIndex
argument_list|,
name|shardSearcher
argument_list|)
expr_stmt|;
block|}
DECL|method|duelRun
specifier|private
name|void
name|duelRun
parameter_list|(
name|PercolateQuery
operator|.
name|QueryStore
name|queryStore
parameter_list|,
name|MemoryIndex
name|memoryIndex
parameter_list|,
name|IndexSearcher
name|shardSearcher
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|requireScore
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|IndexSearcher
name|percolateSearcher
init|=
name|memoryIndex
operator|.
name|createSearcher
argument_list|()
decl_stmt|;
name|Query
name|percolateQuery
init|=
name|fieldType
operator|.
name|percolateQuery
argument_list|(
literal|"type"
argument_list|,
name|queryStore
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
name|percolateSearcher
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|requireScore
condition|?
name|percolateQuery
else|:
operator|new
name|ConstantScoreQuery
argument_list|(
name|percolateQuery
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|shardSearcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Query
name|controlQuery
init|=
operator|new
name|ControlQuery
argument_list|(
name|memoryIndex
argument_list|,
name|queryStore
argument_list|)
decl_stmt|;
name|controlQuery
operator|=
name|requireScore
condition|?
name|controlQuery
else|:
operator|new
name|ConstantScoreQuery
argument_list|(
name|controlQuery
argument_list|)
expr_stmt|;
name|TopDocs
name|controlTopDocs
init|=
name|shardSearcher
operator|.
name|search
argument_list|(
name|controlQuery
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|controlTopDocs
operator|.
name|totalHits
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|controlTopDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
argument_list|,
name|equalTo
argument_list|(
name|controlTopDocs
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|score
argument_list|,
name|equalTo
argument_list|(
name|controlTopDocs
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|score
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requireScore
condition|)
block|{
name|Explanation
name|explain1
init|=
name|shardSearcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
name|topDocs
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|Explanation
name|explain2
init|=
name|shardSearcher
operator|.
name|explain
argument_list|(
name|controlQuery
argument_list|,
name|controlTopDocs
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|explain1
operator|.
name|isMatch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|explain2
operator|.
name|isMatch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explain1
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|explain2
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addQuery
specifier|private
name|void
name|addQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|List
argument_list|<
name|ParseContext
operator|.
name|Document
argument_list|>
name|docs
parameter_list|)
throws|throws
name|IOException
block|{
name|ParseContext
operator|.
name|InternalParseContext
name|parseContext
init|=
operator|new
name|ParseContext
operator|.
name|InternalParseContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|mapperService
operator|.
name|documentMapperParser
argument_list|()
argument_list|,
name|documentMapper
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fieldMapper
operator|.
name|processQuery
argument_list|(
name|query
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|parseContext
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|class|CustomQuery
specifier|private
specifier|static
specifier|final
class|class
name|CustomQuery
extends|extends
name|Query
block|{
DECL|field|term
specifier|private
specifier|final
name|Term
name|term
decl_stmt|;
DECL|method|CustomQuery
specifier|private
name|CustomQuery
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"custom{"
operator|+
name|field
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|sameClassAs
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|classHash
argument_list|()
return|;
block|}
block|}
DECL|class|ControlQuery
specifier|private
specifier|static
specifier|final
class|class
name|ControlQuery
extends|extends
name|Query
block|{
DECL|field|memoryIndex
specifier|private
specifier|final
name|MemoryIndex
name|memoryIndex
decl_stmt|;
DECL|field|queryStore
specifier|private
specifier|final
name|PercolateQuery
operator|.
name|QueryStore
name|queryStore
decl_stmt|;
DECL|method|ControlQuery
specifier|private
name|ControlQuery
parameter_list|(
name|MemoryIndex
name|memoryIndex
parameter_list|,
name|PercolateQuery
operator|.
name|QueryStore
name|queryStore
parameter_list|)
block|{
name|this
operator|.
name|memoryIndex
operator|=
name|memoryIndex
expr_stmt|;
name|this
operator|.
name|queryStore
operator|=
name|queryStore
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
return|return
operator|new
name|Weight
argument_list|(
name|this
argument_list|)
block|{
name|float
name|_score
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|scorer
init|=
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|!=
literal|null
condition|)
block|{
name|int
name|result
init|=
name|scorer
operator|.
name|iterator
argument_list|()
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|doc
condition|)
block|{
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|,
literal|"ControlQuery"
argument_list|)
return|;
block|}
block|}
return|return
name|Explanation
operator|.
name|noMatch
argument_list|(
literal|"ControlQuery"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"weight("
operator|+
name|ControlQuery
operator|.
name|this
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|DocIdSetIterator
name|allDocs
init|=
name|DocIdSetIterator
operator|.
name|all
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|CheckedFunction
argument_list|<
name|Integer
argument_list|,
name|Query
argument_list|,
name|IOException
argument_list|>
name|leaf
init|=
name|queryStore
operator|.
name|getQueries
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|FilteredDocIdSetIterator
name|memoryIndexIterator
init|=
operator|new
name|FilteredDocIdSetIterator
argument_list|(
name|allDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|match
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
try|try
block|{
name|Query
name|query
init|=
name|leaf
operator|.
name|apply
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|float
name|score
init|=
name|memoryIndex
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|score
operator|!=
literal|0f
condition|)
block|{
if|if
condition|(
name|needsScores
condition|)
block|{
name|_score
operator|=
name|score
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
return|return
operator|new
name|FilterScorer
argument_list|(
operator|new
name|ConstantScoreScorer
argument_list|(
name|this
argument_list|,
literal|1f
argument_list|,
name|memoryIndexIterator
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|_score
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"control{"
operator|+
name|field
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|sameClassAs
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|classHash
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

