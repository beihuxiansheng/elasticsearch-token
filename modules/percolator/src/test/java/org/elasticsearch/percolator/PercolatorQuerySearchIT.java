begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|MultiSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bitset
operator|.
name|BitsetFilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ScriptDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchPhraseQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MultiMatchQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|LeafDocLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|smileBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|yamlBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|boolQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|commonTermsQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|multiMatchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|rangeQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|spanNearQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|spanNotQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|spanTermQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchHits
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|PercolatorQuerySearchIT
specifier|public
class|class
name|PercolatorQuerySearchIT
extends|extends
name|ESSingleNodeTestCase
block|{
annotation|@
name|Override
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|PercolatorPlugin
operator|.
name|class
argument_list|,
name|CustomScriptPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|class|CustomScriptPlugin
specifier|public
specifier|static
class|class
name|CustomScriptPlugin
extends|extends
name|MockScriptPlugin
block|{
annotation|@
name|Override
DECL|method|pluginScripts
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pluginScripts
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"1==1"
argument_list|,
name|vars
lambda|->
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"use_fielddata_please"
argument_list|,
name|vars
lambda|->
block|{
name|LeafDocLookup
name|leafDocLookup
init|=
operator|(
name|LeafDocLookup
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_doc"
argument_list|)
decl_stmt|;
name|ScriptDocValues
name|scriptDocValues
init|=
name|leafDocLookup
operator|.
name|get
argument_list|(
literal|"employees.name"
argument_list|)
decl_stmt|;
return|return
literal|"virginia_potts"
operator|.
name|equals
argument_list|(
name|scriptDocValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|scripts
return|;
block|}
block|}
DECL|method|testPercolateScriptQuery
specifier|public
name|void
name|testPercolateScriptQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"index"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"query"
argument_list|,
literal|"type=percolator"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|scriptQuery
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"1==1"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|IMMEDIATE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|response
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolatorQuery
specifier|public
name|void
name|testPercolatorQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=keyword"
argument_list|,
literal|"field2"
argument_list|,
literal|"type=keyword"
argument_list|,
literal|"query"
argument_list|,
literal|"type=percolator"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|BytesReference
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"percolating empty doc"
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"percolating doc with 1 field"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"percolating doc with 2 fields"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|2
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolatorRangeQueries
specifier|public
name|void
name|testPercolatorRangeQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=long"
argument_list|,
literal|"field2"
argument_list|,
literal|"type=double"
argument_list|,
literal|"field3"
argument_list|,
literal|"type=ip"
argument_list|,
literal|"field4"
argument_list|,
literal|"type=date"
argument_list|,
literal|"query"
argument_list|,
literal|"type=percolator"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|rangeQuery
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|from
argument_list|(
literal|10
argument_list|)
operator|.
name|to
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|rangeQuery
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|from
argument_list|(
literal|20
argument_list|)
operator|.
name|to
argument_list|(
literal|22
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|from
argument_list|(
literal|10
argument_list|)
operator|.
name|to
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|from
argument_list|(
literal|12
argument_list|)
operator|.
name|to
argument_list|(
literal|14
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|rangeQuery
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|from
argument_list|(
literal|10
argument_list|)
operator|.
name|to
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|rangeQuery
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|from
argument_list|(
literal|20
argument_list|)
operator|.
name|to
argument_list|(
literal|22
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|from
argument_list|(
literal|10
argument_list|)
operator|.
name|to
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|from
argument_list|(
literal|12
argument_list|)
operator|.
name|to
argument_list|(
literal|14
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|rangeQuery
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|from
argument_list|(
literal|"192.168.1.0"
argument_list|)
operator|.
name|to
argument_list|(
literal|"192.168.1.5"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|rangeQuery
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|from
argument_list|(
literal|"192.168.1.20"
argument_list|)
operator|.
name|to
argument_list|(
literal|"192.168.1.30"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|from
argument_list|(
literal|"192.168.1.0"
argument_list|)
operator|.
name|to
argument_list|(
literal|"192.168.1.5"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|from
argument_list|(
literal|"192.168.1.5"
argument_list|)
operator|.
name|to
argument_list|(
literal|"192.168.1.10"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2010-01-01"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2018-01-01"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2010-01-01"
argument_list|)
operator|.
name|to
argument_list|(
literal|"now"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Test long range:
name|BytesReference
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|12
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|11
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test double range:
name|source
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|12
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|11
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test IP range:
name|source
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field3"
argument_list|,
literal|"192.168.1.5"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field3"
argument_list|,
literal|"192.168.1.4"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test date range:
name|source
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field4"
argument_list|,
literal|"2016-05-15"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolatorQueryExistingDocument
specifier|public
name|void
name|testPercolatorQueryExistingDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=keyword"
argument_list|,
literal|"field2"
argument_list|,
literal|"type=keyword"
argument_list|,
literal|"query"
argument_list|,
literal|"type=percolator"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|,
literal|"field2"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"percolating empty doc"
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"percolating doc with 1 field"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"percolating doc with 2 fields"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"6"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|2
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolatorQueryExistingDocumentSourceDisabled
specifier|public
name|void
name|testPercolatorQueryExistingDocumentSourceDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"_source"
argument_list|,
literal|"enabled=false"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=keyword"
argument_list|,
literal|"query"
argument_list|,
literal|"type=percolator"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"percolating empty doc with source disabled"
argument_list|)
expr_stmt|;
name|Throwable
name|e
init|=
name|expectThrows
argument_list|(
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
argument_list|)
operator|.
name|getRootCause
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"source disabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolatorSpecificQueries
specifier|public
name|void
name|testPercolatorSpecificQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=text"
argument_list|,
literal|"field2"
argument_list|,
literal|"type=text"
argument_list|,
literal|"query"
argument_list|,
literal|"type=percolator"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown fox"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|multiMatchQuery
argument_list|(
literal|"quick brown fox"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|spanNearQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"brown"
argument_list|)
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|spanNotQuery
argument_list|(
name|spanNearQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"brown"
argument_list|)
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|(
literal|true
argument_list|)
argument_list|,
name|spanNearQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the"
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lazy"
argument_list|)
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|dist
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// doesn't match
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|spanNotQuery
argument_list|(
name|spanNearQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"brown"
argument_list|)
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|(
literal|true
argument_list|)
argument_list|,
name|spanNearQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the"
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lazy"
argument_list|)
argument_list|)
operator|.
name|addClause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|dist
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|BytesReference
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"the quick brown fox falls down into the well"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|2
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|2
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|3
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|3
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolatorQueryWithHighlighting
specifier|public
name|void
name|testPercolatorQueryWithHighlighting
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|fieldMapping
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"type=text"
argument_list|)
operator|.
name|append
argument_list|(
literal|",store="
argument_list|)
operator|.
name|append
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldMapping
operator|.
name|append
argument_list|(
literal|",term_vector=with_positions_offsets"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldMapping
operator|.
name|append
argument_list|(
literal|",index_options=offsets"
argument_list|)
expr_stmt|;
block|}
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"field1"
argument_list|,
name|fieldMapping
argument_list|,
literal|"query"
argument_list|,
literal|"type=percolator"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"brown fox"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lazy dog"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"jumps"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|BytesReference
name|document
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|document
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<em>brown</em><em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the<em>lazy</em><em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|2
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|3
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the lazy<em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|4
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown<em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTakePositionOffsetGapIntoAccount
specifier|public
name|void
name|testTakePositionOffsetGapIntoAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"field"
argument_list|,
literal|"type=text,position_increment_gap=5"
argument_list|,
literal|"query"
argument_list|,
literal|"type=percolator"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
operator|new
name|MatchPhraseQueryBuilder
argument_list|(
literal|"field"
argument_list|,
literal|"brown fox"
argument_list|)
operator|.
name|slop
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
operator|new
name|MatchPhraseQueryBuilder
argument_list|(
literal|"field"
argument_list|,
literal|"brown fox"
argument_list|)
operator|.
name|slop
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{\"field\" : [\"brown\", \"fox\"]}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testManyPercolatorFields
specifier|public
name|void
name|testManyPercolatorFields
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryFieldName
init|=
name|randomAlphaOfLength
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|queryFieldName
argument_list|,
literal|"type=percolator"
argument_list|,
literal|"field"
argument_list|,
literal|"type=keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|queryFieldName
argument_list|,
literal|"type=percolator"
argument_list|,
literal|"second_query_field"
argument_list|,
literal|"type=percolator"
argument_list|,
literal|"field"
argument_list|,
literal|"type=keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test3"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test3"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"object_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|queryFieldName
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"percolator"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithMultiplePercolatorFields
specifier|public
name|void
name|testWithMultiplePercolatorFields
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryFieldName
init|=
name|randomAlphaOfLength
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|queryFieldName
argument_list|,
literal|"type=percolator"
argument_list|,
literal|"field"
argument_list|,
literal|"type=keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"object_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|queryFieldName
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"percolator"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acceptable:
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|queryFieldName
argument_list|,
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"object_field"
argument_list|)
operator|.
name|field
argument_list|(
name|queryFieldName
argument_list|,
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|BytesReference
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
name|queryFieldName
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"object_field."
operator|+
name|queryFieldName
argument_list|,
literal|"type"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unacceptable:
name|MapperParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|MapperParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"object_field"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|queryFieldName
argument_list|,
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|queryFieldName
argument_list|,
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"a document can only contain one percolator query"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolateQueryWithNestedDocuments
specifier|public
name|void
name|testPercolateQueryWithNestedDocuments
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"percolator"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"companyname"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"employee"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"nested"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"employee"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"employee"
argument_list|,
literal|"q1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|nestedQuery
argument_list|(
literal|"employee"
argument_list|,
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"employee.name"
argument_list|,
literal|"virginia potts"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// this query should never match as it doesn't use nested query:
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"employee"
argument_list|,
literal|"q2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"employee.name"
argument_list|,
literal|"virginia"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"employee"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"companyname"
argument_list|,
literal|"stark"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"employee"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"virginia potts"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"tony stark"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_doc"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"q1"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"employee"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"companyname"
argument_list|,
literal|"notstark"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"employee"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"virginia stark"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"tony stark"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_doc"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"employee"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"companyname"
argument_list|,
literal|"notstark"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_doc"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolateQueryWithNestedDocuments_doNotLeakBitsetCacheEntries
specifier|public
name|void
name|testPercolateQueryWithNestedDocuments_doNotLeakBitsetCacheEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"companyname"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"percolator"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"employee"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"nested"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
comment|// to avoid normal document from being cached by BitsetFilterCache
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|BitsetFilterCache
operator|.
name|INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"employee"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"employee"
argument_list|,
literal|"q1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|nestedQuery
argument_list|(
literal|"employee"
argument_list|,
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"employee.name"
argument_list|,
literal|"virginia potts"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|32
condition|;
name|i
operator|++
control|)
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"employee"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"companyname"
argument_list|,
literal|"stark"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"employee"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"virginia potts"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"tony stark"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_doc"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
comment|// size 0, because other wise load bitsets for normal document in FetchPhase#findRootDocumentIfNested(...)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// We can't check via api... because BitsetCacheListener requires that it can extract shardId from index reader
comment|// and for percolator it can't do that, but that means we don't keep track of
comment|// memory for BitsetCache in case of percolator
name|long
name|bitsetSize
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getSegments
argument_list|()
operator|.
name|getBitsetMemoryInBytes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The percolator works with in-memory index and therefor shouldn't use bitset cache"
argument_list|,
literal|0L
argument_list|,
name|bitsetSize
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolateQueryWithNestedDocuments_doLeakFieldDataCacheEntries
specifier|public
name|void
name|testPercolateQueryWithNestedDocuments_doLeakFieldDataCacheEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|mapping
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
block|{
name|mapping
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"percolator"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|{
name|mapping
operator|.
name|startObject
argument_list|(
literal|"companyname"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|{
name|mapping
operator|.
name|startObject
argument_list|(
literal|"employees"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"nested"
argument_list|)
expr_stmt|;
block|{
name|mapping
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
block|{
name|mapping
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"employee"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"use_fielddata_please"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"employee"
argument_list|,
literal|"q1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|nestedQuery
argument_list|(
literal|"employees"
argument_list|,
name|QueryBuilders
operator|.
name|scriptQuery
argument_list|(
name|script
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|XContentBuilder
name|doc
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|doc
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|doc
operator|.
name|field
argument_list|(
literal|"companyname"
argument_list|,
literal|"stark"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|startArray
argument_list|(
literal|"employees"
argument_list|)
expr_stmt|;
block|{
name|doc
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|doc
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"virginia_potts"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|{
name|doc
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|doc
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"tony_stark"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|endObject
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|32
condition|;
name|i
operator|++
control|)
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"employee"
argument_list|,
name|doc
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_doc"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|long
name|fieldDataSize
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getFieldData
argument_list|()
operator|.
name|getMemorySizeInBytes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The percolator works with in-memory index and therefor shouldn't use field-data cache"
argument_list|,
literal|0L
argument_list|,
name|fieldDataSize
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolatorQueryViaMultiSearch
specifier|public
name|void
name|testPercolatorQueryViaMultiSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=text"
argument_list|,
literal|"query"
argument_list|,
literal|"type=percolator"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|MultiSearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareMultiSearch
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|yamlBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|smileBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b c"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
comment|// non existing doc, so error element
operator|.
name|setQuery
argument_list|(
operator|new
name|PercolateQueryBuilder
argument_list|(
literal|"query"
argument_list|,
literal|"type"
argument_list|,
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"6"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MultiSearchResponse
operator|.
name|Item
name|item
init|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertHitCount
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|item
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|1
index|]
expr_stmt|;
name|assertHitCount
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|"2"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|item
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|2
index|]
expr_stmt|;
name|assertHitCount
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|item
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|3
index|]
expr_stmt|;
name|assertHitCount
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|item
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|4
index|]
expr_stmt|;
name|assertHitCount
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
literal|"2"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|item
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|=
name|response
operator|.
name|getResponses
argument_list|()
index|[
literal|5
index|]
expr_stmt|;
name|assertThat
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|item
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|item
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"all shards failed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|item
operator|.
name|getFailure
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"[test/type/6] couldn't be found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

