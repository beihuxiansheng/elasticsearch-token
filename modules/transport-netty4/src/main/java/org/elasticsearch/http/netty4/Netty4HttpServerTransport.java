begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.netty4
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntSet
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|AdaptiveRecvByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|FixedRecvByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|RecvByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|oio
operator|.
name|OioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|oio
operator|.
name|OioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|ByteToMessageDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpContentCompressor
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpContentDecompressor
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpObjectAggregator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseEncoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|ReadTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|NetworkExceptionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|PortsRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|BindHttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpServerAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty4
operator|.
name|cors
operator|.
name|Netty4CorsConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty4
operator|.
name|cors
operator|.
name|Netty4CorsConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty4
operator|.
name|cors
operator|.
name|Netty4CorsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty4
operator|.
name|pipelining
operator|.
name|HttpPipeliningHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BindTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty4
operator|.
name|Netty4OpenChannelsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty4
operator|.
name|Netty4Utils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|boolSetting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|byteSizeSetting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_CORS_ALLOW_CREDENTIALS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_CORS_ALLOW_HEADERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_CORS_ALLOW_METHODS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_CORS_ALLOW_ORIGIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_CORS_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_CORS_MAX_AGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_BIND_HOST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_COMPRESSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_COMPRESSION_LEVEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_DETAILED_ERRORS_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_MAX_CHUNK_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_MAX_CONTENT_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_MAX_HEADER_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_MAX_INITIAL_LINE_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_PUBLISH_HOST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_PUBLISH_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_RESET_COOKIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_PIPELINING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
operator|.
name|SETTING_PIPELINING_MAX_EVENTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty4
operator|.
name|cors
operator|.
name|Netty4CorsHandler
operator|.
name|ANY_ORIGIN
import|;
end_import

begin_class
DECL|class|Netty4HttpServerTransport
specifier|public
class|class
name|Netty4HttpServerTransport
extends|extends
name|AbstractLifecycleComponent
implements|implements
name|HttpServerTransport
block|{
static|static
block|{
name|Netty4Utils
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
DECL|field|SETTING_HTTP_NETTY_MAX_CUMULATION_BUFFER_CAPACITY
specifier|public
specifier|static
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_NETTY_MAX_CUMULATION_BUFFER_CAPACITY
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"http.netty.max_cumulation_buffer_capacity"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS
specifier|public
specifier|static
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"http.netty.max_composite_buffer_components"
argument_list|,
operator|-
literal|1
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_WORKER_COUNT
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SETTING_HTTP_WORKER_COUNT
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"http.netty.worker_count"
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|s
argument_list|)
operator|*
literal|2
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Setting
operator|.
name|parseInt
argument_list|(
name|s
argument_list|,
literal|1
argument_list|,
literal|"http.netty.worker_count"
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_TCP_NO_DELAY
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_HTTP_TCP_NO_DELAY
init|=
name|boolSetting
argument_list|(
literal|"http.tcp_no_delay"
argument_list|,
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|TCP_NO_DELAY
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_TCP_KEEP_ALIVE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_HTTP_TCP_KEEP_ALIVE
init|=
name|boolSetting
argument_list|(
literal|"http.tcp.keep_alive"
argument_list|,
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|TCP_KEEP_ALIVE
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_TCP_BLOCKING_SERVER
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_HTTP_TCP_BLOCKING_SERVER
init|=
name|boolSetting
argument_list|(
literal|"http.tcp.blocking_server"
argument_list|,
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|TCP_BLOCKING_SERVER
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_TCP_REUSE_ADDRESS
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_HTTP_TCP_REUSE_ADDRESS
init|=
name|boolSetting
argument_list|(
literal|"http.tcp.reuse_address"
argument_list|,
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|TCP_REUSE_ADDRESS
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_TCP_SEND_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_TCP_SEND_BUFFER_SIZE
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"http.tcp.send_buffer_size"
argument_list|,
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|TCP_SEND_BUFFER_SIZE
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_TCP_RECEIVE_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_TCP_RECEIVE_BUFFER_SIZE
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"http.tcp.receive_buffer_size"
argument_list|,
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|TCP_RECEIVE_BUFFER_SIZE
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_SIZE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_SIZE
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"transport.netty.receive_predictor_size"
argument_list|,
name|settings
lambda|->
block|{
name|long
name|defaultReceiverPredictor
init|=
literal|512
operator|*
literal|1024
decl_stmt|;
if|if
condition|(
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getDirectMemoryMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// we can guess a better default...
name|long
name|l
init|=
call|(
name|long
call|)
argument_list|(
operator|(
literal|0.3
operator|*
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getDirectMemoryMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|)
operator|/
name|SETTING_HTTP_WORKER_COUNT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|defaultReceiverPredictor
operator|=
name|Math
operator|.
name|min
argument_list|(
name|defaultReceiverPredictor
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|l
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|defaultReceiverPredictor
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MIN
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MIN
init|=
name|byteSizeSetting
argument_list|(
literal|"http.netty.receive_predictor_min"
argument_list|,
name|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_SIZE
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MAX
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MAX
init|=
name|byteSizeSetting
argument_list|(
literal|"http.netty.receive_predictor_max"
argument_list|,
name|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_SIZE
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|networkService
specifier|protected
specifier|final
name|NetworkService
name|networkService
decl_stmt|;
DECL|field|bigArrays
specifier|protected
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|maxContentLength
specifier|protected
specifier|final
name|ByteSizeValue
name|maxContentLength
decl_stmt|;
DECL|field|maxInitialLineLength
specifier|protected
specifier|final
name|ByteSizeValue
name|maxInitialLineLength
decl_stmt|;
DECL|field|maxHeaderSize
specifier|protected
specifier|final
name|ByteSizeValue
name|maxHeaderSize
decl_stmt|;
DECL|field|maxChunkSize
specifier|protected
specifier|final
name|ByteSizeValue
name|maxChunkSize
decl_stmt|;
DECL|field|workerCount
specifier|protected
specifier|final
name|int
name|workerCount
decl_stmt|;
DECL|field|blockingServer
specifier|protected
specifier|final
name|boolean
name|blockingServer
decl_stmt|;
DECL|field|pipelining
specifier|protected
specifier|final
name|boolean
name|pipelining
decl_stmt|;
DECL|field|pipeliningMaxEvents
specifier|protected
specifier|final
name|int
name|pipeliningMaxEvents
decl_stmt|;
DECL|field|compression
specifier|protected
specifier|final
name|boolean
name|compression
decl_stmt|;
DECL|field|compressionLevel
specifier|protected
specifier|final
name|int
name|compressionLevel
decl_stmt|;
DECL|field|resetCookies
specifier|protected
specifier|final
name|boolean
name|resetCookies
decl_stmt|;
DECL|field|port
specifier|protected
specifier|final
name|PortsRange
name|port
decl_stmt|;
DECL|field|bindHosts
specifier|protected
specifier|final
name|String
name|bindHosts
index|[]
decl_stmt|;
DECL|field|publishHosts
specifier|protected
specifier|final
name|String
name|publishHosts
index|[]
decl_stmt|;
DECL|field|detailedErrorsEnabled
specifier|protected
specifier|final
name|boolean
name|detailedErrorsEnabled
decl_stmt|;
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|tcpNoDelay
specifier|protected
specifier|final
name|boolean
name|tcpNoDelay
decl_stmt|;
DECL|field|tcpKeepAlive
specifier|protected
specifier|final
name|boolean
name|tcpKeepAlive
decl_stmt|;
DECL|field|reuseAddress
specifier|protected
specifier|final
name|boolean
name|reuseAddress
decl_stmt|;
DECL|field|tcpSendBufferSize
specifier|protected
specifier|final
name|ByteSizeValue
name|tcpSendBufferSize
decl_stmt|;
DECL|field|tcpReceiveBufferSize
specifier|protected
specifier|final
name|ByteSizeValue
name|tcpReceiveBufferSize
decl_stmt|;
DECL|field|recvByteBufAllocator
specifier|protected
specifier|final
name|RecvByteBufAllocator
name|recvByteBufAllocator
decl_stmt|;
DECL|field|maxCumulationBufferCapacity
specifier|protected
specifier|final
name|ByteSizeValue
name|maxCumulationBufferCapacity
decl_stmt|;
DECL|field|maxCompositeBufferComponents
specifier|protected
specifier|final
name|int
name|maxCompositeBufferComponents
decl_stmt|;
DECL|field|serverBootstrap
specifier|protected
specifier|volatile
name|ServerBootstrap
name|serverBootstrap
decl_stmt|;
DECL|field|boundAddress
specifier|protected
specifier|volatile
name|BoundTransportAddress
name|boundAddress
decl_stmt|;
DECL|field|serverChannels
specifier|protected
specifier|final
name|List
argument_list|<
name|Channel
argument_list|>
name|serverChannels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// package private for testing
DECL|field|serverOpenChannels
name|Netty4OpenChannelsHandler
name|serverOpenChannels
decl_stmt|;
DECL|field|httpServerAdapter
specifier|protected
specifier|volatile
name|HttpServerAdapter
name|httpServerAdapter
decl_stmt|;
DECL|field|corsConfig
specifier|private
specifier|final
name|Netty4CorsConfig
name|corsConfig
decl_stmt|;
annotation|@
name|Inject
DECL|method|Netty4HttpServerTransport
specifier|public
name|Netty4HttpServerTransport
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NetworkService
name|networkService
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|ByteSizeValue
name|maxContentLength
init|=
name|SETTING_HTTP_MAX_CONTENT_LENGTH
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|this
operator|.
name|maxChunkSize
operator|=
name|SETTING_HTTP_MAX_CHUNK_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxHeaderSize
operator|=
name|SETTING_HTTP_MAX_HEADER_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxInitialLineLength
operator|=
name|SETTING_HTTP_MAX_INITIAL_LINE_LENGTH
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|resetCookies
operator|=
name|SETTING_HTTP_RESET_COOKIES
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCumulationBufferCapacity
operator|=
name|SETTING_HTTP_NETTY_MAX_CUMULATION_BUFFER_CAPACITY
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCompositeBufferComponents
operator|=
name|SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|workerCount
operator|=
name|SETTING_HTTP_WORKER_COUNT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockingServer
operator|=
name|SETTING_HTTP_TCP_BLOCKING_SERVER
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|SETTING_HTTP_PORT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|bindHosts
operator|=
name|SETTING_HTTP_BIND_HOST
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|this
operator|.
name|publishHosts
operator|=
name|SETTING_HTTP_PUBLISH_HOST
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpNoDelay
operator|=
name|SETTING_HTTP_TCP_NO_DELAY
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpKeepAlive
operator|=
name|SETTING_HTTP_TCP_KEEP_ALIVE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|reuseAddress
operator|=
name|SETTING_HTTP_TCP_REUSE_ADDRESS
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpSendBufferSize
operator|=
name|SETTING_HTTP_TCP_SEND_BUFFER_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpReceiveBufferSize
operator|=
name|SETTING_HTTP_TCP_RECEIVE_BUFFER_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|detailedErrorsEnabled
operator|=
name|SETTING_HTTP_DETAILED_ERRORS_ENABLED
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one
name|ByteSizeValue
name|receivePredictorMin
init|=
name|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MIN
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|ByteSizeValue
name|receivePredictorMax
init|=
name|SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MAX
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
operator|==
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
condition|)
block|{
name|recvByteBufAllocator
operator|=
operator|new
name|FixedRecvByteBufAllocator
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recvByteBufAllocator
operator|=
operator|new
name|AdaptiveRecvByteBufAllocator
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|compression
operator|=
name|SETTING_HTTP_COMPRESSION
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|compressionLevel
operator|=
name|SETTING_HTTP_COMPRESSION_LEVEL
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|pipelining
operator|=
name|SETTING_PIPELINING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|pipeliningMaxEvents
operator|=
name|SETTING_PIPELINING_MAX_EVENTS
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|corsConfig
operator|=
name|buildCorsConfig
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// validate max content length
if|if
condition|(
name|maxContentLength
operator|.
name|bytes
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"maxContentLength[{}] set to high value, resetting it to [100mb]"
argument_list|,
name|maxContentLength
argument_list|)
expr_stmt|;
name|maxContentLength
operator|=
operator|new
name|ByteSizeValue
argument_list|(
literal|100
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|maxContentLength
operator|=
name|maxContentLength
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}], "
operator|+
literal|"receive_predictor[{}->{}], pipelining[{}], pipelining_max_events[{}]"
argument_list|,
name|maxChunkSize
argument_list|,
name|maxHeaderSize
argument_list|,
name|maxInitialLineLength
argument_list|,
name|this
operator|.
name|maxContentLength
argument_list|,
name|receivePredictorMin
argument_list|,
name|receivePredictorMax
argument_list|,
name|pipelining
argument_list|,
name|pipeliningMaxEvents
argument_list|)
expr_stmt|;
block|}
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
annotation|@
name|Override
DECL|method|httpServerAdapter
specifier|public
name|void
name|httpServerAdapter
parameter_list|(
name|HttpServerAdapter
name|httpServerAdapter
parameter_list|)
block|{
name|this
operator|.
name|httpServerAdapter
operator|=
name|httpServerAdapter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|this
operator|.
name|serverOpenChannels
operator|=
operator|new
name|Netty4OpenChannelsHandler
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|()
expr_stmt|;
if|if
condition|(
name|blockingServer
condition|)
block|{
name|serverBootstrap
operator|.
name|group
argument_list|(
operator|new
name|OioEventLoopGroup
argument_list|(
name|workerCount
argument_list|,
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"http_server_worker"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|channel
argument_list|(
name|OioServerSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverBootstrap
operator|.
name|group
argument_list|(
operator|new
name|NioEventLoopGroup
argument_list|(
name|workerCount
argument_list|,
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"http_server_worker"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|serverBootstrap
operator|.
name|childHandler
argument_list|(
name|configureServerChannelHandler
argument_list|()
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|TCP_NODELAY
argument_list|,
name|SETTING_HTTP_TCP_NO_DELAY
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_KEEPALIVE
argument_list|,
name|SETTING_HTTP_TCP_KEEP_ALIVE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ByteSizeValue
name|tcpSendBufferSize
init|=
name|SETTING_HTTP_TCP_SEND_BUFFER_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_SNDBUF
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ByteSizeValue
name|tcpReceiveBufferSize
init|=
name|SETTING_HTTP_TCP_RECEIVE_BUFFER_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_RCVBUF
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serverBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|RCVBUF_ALLOCATOR
argument_list|,
name|recvByteBufAllocator
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|RCVBUF_ALLOCATOR
argument_list|,
name|recvByteBufAllocator
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|reuseAddress
init|=
name|SETTING_HTTP_TCP_REUSE_ADDRESS
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|serverBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|this
operator|.
name|boundAddress
operator|=
name|createBoundHttpAddress
argument_list|()
expr_stmt|;
block|}
DECL|method|createBoundHttpAddress
specifier|private
name|BoundTransportAddress
name|createBoundHttpAddress
parameter_list|()
block|{
comment|// Bind and start to accept incoming connections.
name|InetAddress
name|hostAddresses
index|[]
decl_stmt|;
try|try
block|{
name|hostAddresses
operator|=
name|networkService
operator|.
name|resolveBindHostAddresses
argument_list|(
name|bindHosts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindHttpException
argument_list|(
literal|"Failed to resolve host ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bindHosts
argument_list|)
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|InetSocketTransportAddress
argument_list|>
name|boundAddresses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|hostAddresses
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InetAddress
name|address
range|:
name|hostAddresses
control|)
block|{
name|boundAddresses
operator|.
name|add
argument_list|(
name|bindAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|InetAddress
name|publishInetAddress
decl_stmt|;
try|try
block|{
name|publishInetAddress
operator|=
name|networkService
operator|.
name|resolvePublishHostAddresses
argument_list|(
name|publishHosts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to resolve publish address"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|int
name|publishPort
init|=
name|resolvePublishPort
argument_list|(
name|settings
argument_list|,
name|boundAddresses
argument_list|,
name|publishInetAddress
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|publishAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|publishInetAddress
argument_list|,
name|publishPort
argument_list|)
decl_stmt|;
return|return
operator|new
name|BoundTransportAddress
argument_list|(
name|boundAddresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|InetSocketTransportAddress
argument_list|(
name|publishAddress
argument_list|)
argument_list|)
return|;
block|}
comment|// package private for tests
DECL|method|resolvePublishPort
specifier|static
name|int
name|resolvePublishPort
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|List
argument_list|<
name|InetSocketTransportAddress
argument_list|>
name|boundAddresses
parameter_list|,
name|InetAddress
name|publishInetAddress
parameter_list|)
block|{
name|int
name|publishPort
init|=
name|SETTING_HTTP_PUBLISH_PORT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|publishPort
operator|<
literal|0
condition|)
block|{
for|for
control|(
name|InetSocketTransportAddress
name|boundAddress
range|:
name|boundAddresses
control|)
block|{
name|InetAddress
name|boundInetAddress
init|=
name|boundAddress
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|boundInetAddress
operator|.
name|isAnyLocalAddress
argument_list|()
operator|||
name|boundInetAddress
operator|.
name|equals
argument_list|(
name|publishInetAddress
argument_list|)
condition|)
block|{
name|publishPort
operator|=
name|boundAddress
operator|.
name|getPort
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// if no matching boundAddress found, check if there is a unique port for all bound addresses
if|if
condition|(
name|publishPort
operator|<
literal|0
condition|)
block|{
specifier|final
name|IntSet
name|ports
init|=
operator|new
name|IntHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|InetSocketTransportAddress
name|boundAddress
range|:
name|boundAddresses
control|)
block|{
name|ports
operator|.
name|add
argument_list|(
name|boundAddress
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ports
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|publishPort
operator|=
name|ports
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|value
expr_stmt|;
block|}
block|}
if|if
condition|(
name|publishPort
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BindHttpException
argument_list|(
literal|"Failed to auto-resolve http publish port, multiple bound addresses "
operator|+
name|boundAddresses
operator|+
literal|" with distinct ports and none of them matched the publish address ("
operator|+
name|publishInetAddress
operator|+
literal|"). "
operator|+
literal|"Please specify a unique port by setting "
operator|+
name|SETTING_HTTP_PORT
operator|.
name|getKey
argument_list|()
operator|+
literal|" or "
operator|+
name|SETTING_HTTP_PUBLISH_PORT
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|publishPort
return|;
block|}
DECL|method|buildCorsConfig
specifier|private
name|Netty4CorsConfig
name|buildCorsConfig
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
if|if
condition|(
name|SETTING_CORS_ENABLED
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|Netty4CorsConfigBuilder
operator|.
name|forOrigins
argument_list|()
operator|.
name|disable
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
name|String
name|origin
init|=
name|SETTING_CORS_ALLOW_ORIGIN
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|Netty4CorsConfigBuilder
name|builder
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|origin
argument_list|)
condition|)
block|{
name|builder
operator|=
name|Netty4CorsConfigBuilder
operator|.
name|forOrigins
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|origin
operator|.
name|equals
argument_list|(
name|ANY_ORIGIN
argument_list|)
condition|)
block|{
name|builder
operator|=
name|Netty4CorsConfigBuilder
operator|.
name|forAnyOrigin
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Pattern
name|p
init|=
name|RestUtils
operator|.
name|checkCorsSettingForRegex
argument_list|(
name|origin
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|Netty4CorsConfigBuilder
operator|.
name|forOrigins
argument_list|(
name|RestUtils
operator|.
name|corsSettingAsArray
argument_list|(
name|origin
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|=
name|Netty4CorsConfigBuilder
operator|.
name|forPattern
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|SETTING_CORS_ALLOW_CREDENTIALS
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|builder
operator|.
name|allowCredentials
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|strMethods
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|SETTING_CORS_ALLOW_METHODS
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|HttpMethod
index|[]
name|methods
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|strMethods
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|HttpMethod
operator|::
name|valueOf
argument_list|)
operator|.
name|toArray
argument_list|(
name|size
lambda|->
operator|new
name|HttpMethod
index|[
name|size
index|]
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|allowedRequestMethods
argument_list|(
name|methods
argument_list|)
operator|.
name|maxAge
argument_list|(
name|SETTING_CORS_MAX_AGE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|allowedRequestHeaders
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
name|SETTING_CORS_ALLOW_HEADERS
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|shortCircuit
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|bindAddress
specifier|private
name|InetSocketTransportAddress
name|bindAddress
parameter_list|(
specifier|final
name|InetAddress
name|hostAddress
parameter_list|)
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|boundSocket
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|port
operator|.
name|iterate
argument_list|(
operator|new
name|PortsRange
operator|.
name|PortCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onPortNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|serverChannels
init|)
block|{
name|ChannelFuture
name|future
init|=
name|serverBootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|hostAddress
argument_list|,
name|portNumber
argument_list|)
argument_list|)
operator|.
name|sync
argument_list|()
decl_stmt|;
name|serverChannels
operator|.
name|add
argument_list|(
name|future
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
name|boundSocket
operator|.
name|set
argument_list|(
operator|(
name|InetSocketAddress
operator|)
name|future
operator|.
name|channel
argument_list|()
operator|.
name|localAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|BindHttpException
argument_list|(
literal|"Failed to bind to ["
operator|+
name|port
operator|+
literal|"]"
argument_list|,
name|lastException
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Bound http to address {{}}"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|boundSocket
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InetSocketTransportAddress
argument_list|(
name|boundSocket
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|serverChannels
init|)
block|{
if|if
condition|(
operator|!
name|serverChannels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|Netty4Utils
operator|.
name|closeChannels
argument_list|(
name|serverChannels
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"exception while closing channels"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|serverChannels
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serverOpenChannels
operator|!=
literal|null
condition|)
block|{
name|serverOpenChannels
operator|.
name|close
argument_list|()
expr_stmt|;
name|serverOpenChannels
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|serverBootstrap
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|config
argument_list|()
operator|.
name|group
argument_list|()
operator|.
name|shutdownGracefully
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|serverBootstrap
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|boundAddress
specifier|public
name|BoundTransportAddress
name|boundAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|boundAddress
return|;
block|}
annotation|@
name|Override
DECL|method|info
specifier|public
name|HttpInfo
name|info
parameter_list|()
block|{
name|BoundTransportAddress
name|boundTransportAddress
init|=
name|boundAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|boundTransportAddress
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|HttpInfo
argument_list|(
name|boundTransportAddress
argument_list|,
name|maxContentLength
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|HttpStats
name|stats
parameter_list|()
block|{
name|Netty4OpenChannelsHandler
name|channels
init|=
name|serverOpenChannels
decl_stmt|;
return|return
operator|new
name|HttpStats
argument_list|(
name|channels
operator|==
literal|null
condition|?
literal|0
else|:
name|channels
operator|.
name|numberOfOpenChannels
argument_list|()
argument_list|,
name|channels
operator|==
literal|null
condition|?
literal|0
else|:
name|channels
operator|.
name|totalChannels
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCorsConfig
specifier|public
name|Netty4CorsConfig
name|getCorsConfig
parameter_list|()
block|{
return|return
name|corsConfig
return|;
block|}
DECL|method|dispatchRequest
specifier|protected
name|void
name|dispatchRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|)
block|{
name|httpServerAdapter
operator|.
name|dispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|exceptionCaught
specifier|protected
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|cause
operator|instanceof
name|ReadTimeoutException
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Connection timeout [{}]"
argument_list|,
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|remoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
comment|// ignore
return|return;
block|}
if|if
condition|(
operator|!
name|NetworkExceptionHelper
operator|.
name|isCloseConnectionException
argument_list|(
name|cause
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"caught exception while handling client http traffic, closing connection {}"
argument_list|,
name|cause
argument_list|,
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"caught exception while handling client http traffic, closing connection {}"
argument_list|,
name|cause
argument_list|,
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|configureServerChannelHandler
specifier|public
name|ChannelHandler
name|configureServerChannelHandler
parameter_list|()
block|{
return|return
operator|new
name|HttpChannelHandler
argument_list|(
name|this
argument_list|,
name|detailedErrorsEnabled
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
return|;
block|}
DECL|class|HttpChannelHandler
specifier|protected
specifier|static
class|class
name|HttpChannelHandler
extends|extends
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
block|{
DECL|field|transport
specifier|private
specifier|final
name|Netty4HttpServerTransport
name|transport
decl_stmt|;
DECL|field|requestHandler
specifier|private
specifier|final
name|Netty4HttpRequestHandler
name|requestHandler
decl_stmt|;
DECL|method|HttpChannelHandler
specifier|protected
name|HttpChannelHandler
parameter_list|(
specifier|final
name|Netty4HttpServerTransport
name|transport
parameter_list|,
specifier|final
name|boolean
name|detailedErrorsEnabled
parameter_list|,
specifier|final
name|ThreadContext
name|threadContext
parameter_list|)
block|{
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|requestHandler
operator|=
operator|new
name|Netty4HttpRequestHandler
argument_list|(
name|transport
argument_list|,
name|detailedErrorsEnabled
argument_list|,
name|threadContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initChannel
specifier|protected
name|void
name|initChannel
parameter_list|(
name|Channel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"openChannels"
argument_list|,
name|transport
operator|.
name|serverOpenChannels
argument_list|)
expr_stmt|;
specifier|final
name|HttpRequestDecoder
name|decoder
init|=
operator|new
name|HttpRequestDecoder
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|transport
operator|.
name|maxInitialLineLength
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|transport
operator|.
name|maxHeaderSize
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|transport
operator|.
name|maxChunkSize
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|setCumulator
argument_list|(
name|ByteToMessageDecoder
operator|.
name|COMPOSITE_CUMULATOR
argument_list|)
expr_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"decoder"
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"decoder_compress"
argument_list|,
operator|new
name|HttpContentDecompressor
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|HttpObjectAggregator
name|aggregator
init|=
operator|new
name|HttpObjectAggregator
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|transport
operator|.
name|maxContentLength
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|transport
operator|.
name|maxCompositeBufferComponents
operator|!=
operator|-
literal|1
condition|)
block|{
name|aggregator
operator|.
name|setMaxCumulationBufferComponents
argument_list|(
name|transport
operator|.
name|maxCompositeBufferComponents
argument_list|)
expr_stmt|;
block|}
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"aggregator"
argument_list|,
name|aggregator
argument_list|)
expr_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"encoder"
argument_list|,
operator|new
name|HttpResponseEncoder
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|transport
operator|.
name|compression
condition|)
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"encoder_compress"
argument_list|,
operator|new
name|HttpContentCompressor
argument_list|(
name|transport
operator|.
name|compressionLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SETTING_CORS_ENABLED
operator|.
name|get
argument_list|(
name|transport
operator|.
name|settings
argument_list|()
argument_list|)
condition|)
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"cors"
argument_list|,
operator|new
name|Netty4CorsHandler
argument_list|(
name|transport
operator|.
name|getCorsConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transport
operator|.
name|pipelining
condition|)
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"pipelining"
argument_list|,
operator|new
name|HttpPipeliningHandler
argument_list|(
name|transport
operator|.
name|pipeliningMaxEvents
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"handler"
argument_list|,
name|requestHandler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

