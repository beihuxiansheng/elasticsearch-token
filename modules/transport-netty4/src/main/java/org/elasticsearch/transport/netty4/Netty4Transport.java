begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.netty4
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|AdaptiveRecvByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|FixedRecvByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|RecvByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|oio
operator|.
name|OioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|oio
operator|.
name|OioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|oio
operator|.
name|OioSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
operator|.
name|TcpSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectionProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportServiceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|byteSizeSetting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|intSetting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_comment
comment|/**  * There are 4 types of connections per node, low/med/high/ping. Low if for batch oriented APIs (like recovery or  * batch) with high payload that will cause regular request. (like search or single index) to take  * longer. Med is for the typical search / single doc index. And High for things like cluster state. Ping is reserved for  * sending out ping requests to other nodes.  */
end_comment

begin_class
DECL|class|Netty4Transport
specifier|public
class|class
name|Netty4Transport
extends|extends
name|TcpTransport
argument_list|<
name|Channel
argument_list|>
block|{
static|static
block|{
name|Netty4Utils
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
DECL|field|WORKER_COUNT
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|WORKER_COUNT
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"transport.netty.worker_count"
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|EsExecutors
operator|.
name|numberOfProcessors
argument_list|(
name|s
argument_list|)
operator|*
literal|2
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Setting
operator|.
name|parseInt
argument_list|(
name|s
argument_list|,
literal|1
argument_list|,
literal|"transport.netty.worker_count"
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|NETTY_MAX_CUMULATION_BUFFER_CAPACITY
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|NETTY_MAX_CUMULATION_BUFFER_CAPACITY
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"transport.netty.max_cumulation_buffer_capacity"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"transport.netty.max_composite_buffer_components"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
comment|// See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one
DECL|field|NETTY_RECEIVE_PREDICTOR_SIZE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|NETTY_RECEIVE_PREDICTOR_SIZE
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"transport.netty.receive_predictor_size"
argument_list|,
name|settings
lambda|->
block|{
name|long
name|defaultReceiverPredictor
init|=
literal|512
operator|*
literal|1024
decl_stmt|;
if|if
condition|(
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getDirectMemoryMax
argument_list|()
operator|.
name|getBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// we can guess a better default...
name|long
name|l
init|=
call|(
name|long
call|)
argument_list|(
operator|(
literal|0.3
operator|*
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getDirectMemoryMax
argument_list|()
operator|.
name|getBytes
argument_list|()
operator|)
operator|/
name|WORKER_COUNT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|defaultReceiverPredictor
operator|=
name|Math
operator|.
name|min
argument_list|(
name|defaultReceiverPredictor
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|l
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|defaultReceiverPredictor
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|NETTY_RECEIVE_PREDICTOR_MIN
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|NETTY_RECEIVE_PREDICTOR_MIN
init|=
name|byteSizeSetting
argument_list|(
literal|"transport.netty.receive_predictor_min"
argument_list|,
name|NETTY_RECEIVE_PREDICTOR_SIZE
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|NETTY_RECEIVE_PREDICTOR_MAX
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|NETTY_RECEIVE_PREDICTOR_MAX
init|=
name|byteSizeSetting
argument_list|(
literal|"transport.netty.receive_predictor_max"
argument_list|,
name|NETTY_RECEIVE_PREDICTOR_SIZE
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|NETTY_BOSS_COUNT
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|NETTY_BOSS_COUNT
init|=
name|intSetting
argument_list|(
literal|"transport.netty.boss_count"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
decl_stmt|;
DECL|field|maxCumulationBufferCapacity
specifier|protected
specifier|final
name|ByteSizeValue
name|maxCumulationBufferCapacity
decl_stmt|;
DECL|field|maxCompositeBufferComponents
specifier|protected
specifier|final
name|int
name|maxCompositeBufferComponents
decl_stmt|;
DECL|field|recvByteBufAllocator
specifier|protected
specifier|final
name|RecvByteBufAllocator
name|recvByteBufAllocator
decl_stmt|;
DECL|field|workerCount
specifier|protected
specifier|final
name|int
name|workerCount
decl_stmt|;
DECL|field|receivePredictorMin
specifier|protected
specifier|final
name|ByteSizeValue
name|receivePredictorMin
decl_stmt|;
DECL|field|receivePredictorMax
specifier|protected
specifier|final
name|ByteSizeValue
name|receivePredictorMax
decl_stmt|;
comment|// package private for testing
DECL|field|serverOpenChannels
specifier|volatile
name|Netty4OpenChannelsHandler
name|serverOpenChannels
decl_stmt|;
DECL|field|bootstrap
specifier|protected
specifier|volatile
name|Bootstrap
name|bootstrap
decl_stmt|;
DECL|field|serverBootstraps
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ServerBootstrap
argument_list|>
name|serverBootstraps
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|Netty4Transport
specifier|public
name|Netty4Transport
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|NetworkService
name|networkService
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|,
name|CircuitBreakerService
name|circuitBreakerService
parameter_list|)
block|{
name|super
argument_list|(
literal|"netty"
argument_list|,
name|settings
argument_list|,
name|threadPool
argument_list|,
name|bigArrays
argument_list|,
name|circuitBreakerService
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|networkService
argument_list|)
expr_stmt|;
name|this
operator|.
name|workerCount
operator|=
name|WORKER_COUNT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCumulationBufferCapacity
operator|=
name|NETTY_MAX_CUMULATION_BUFFER_CAPACITY
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCompositeBufferComponents
operator|=
name|NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one
name|this
operator|.
name|receivePredictorMin
operator|=
name|NETTY_RECEIVE_PREDICTOR_MIN
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|receivePredictorMax
operator|=
name|NETTY_RECEIVE_PREDICTOR_MAX
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
if|if
condition|(
name|receivePredictorMax
operator|.
name|getBytes
argument_list|()
operator|==
name|receivePredictorMin
operator|.
name|getBytes
argument_list|()
condition|)
block|{
name|recvByteBufAllocator
operator|=
operator|new
name|FixedRecvByteBufAllocator
argument_list|(
operator|(
name|int
operator|)
name|receivePredictorMax
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recvByteBufAllocator
operator|=
operator|new
name|AdaptiveRecvByteBufAllocator
argument_list|(
operator|(
name|int
operator|)
name|receivePredictorMin
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|receivePredictorMin
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|receivePredictorMax
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|transportServiceAdapter
name|TransportServiceAdapter
name|transportServiceAdapter
parameter_list|()
block|{
return|return
name|transportServiceAdapter
return|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|bootstrap
operator|=
name|createBootstrap
argument_list|()
expr_stmt|;
if|if
condition|(
name|NetworkService
operator|.
name|NETWORK_SERVER
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
specifier|final
name|Netty4OpenChannelsHandler
name|openChannels
init|=
operator|new
name|Netty4OpenChannelsHandler
argument_list|(
name|logger
argument_list|)
decl_stmt|;
name|this
operator|.
name|serverOpenChannels
operator|=
name|openChannels
expr_stmt|;
comment|// loop through all profiles and start them up, special handling for default one
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|buildProfileSettings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// merge fallback settings with default settings with profile settings so we have complete settings with default values
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|createFallbackSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createServerBootstrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|bindServer
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createBootstrap
specifier|private
name|Bootstrap
name|createBootstrap
parameter_list|()
block|{
specifier|final
name|Bootstrap
name|bootstrap
init|=
operator|new
name|Bootstrap
argument_list|()
decl_stmt|;
if|if
condition|(
name|TCP_BLOCKING_CLIENT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|bootstrap
operator|.
name|group
argument_list|(
operator|new
name|OioEventLoopGroup
argument_list|(
literal|1
argument_list|,
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
name|TRANSPORT_CLIENT_WORKER_THREAD_NAME_PREFIX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|channel
argument_list|(
name|OioSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bootstrap
operator|.
name|group
argument_list|(
operator|new
name|NioEventLoopGroup
argument_list|(
name|workerCount
argument_list|,
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
name|TRANSPORT_CLIENT_BOSS_THREAD_NAME_PREFIX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|bootstrap
operator|.
name|handler
argument_list|(
name|getClientChannelInitializer
argument_list|()
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|CONNECT_TIMEOUT_MILLIS
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|defaultConnectionProfile
operator|.
name|getConnectTimeout
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|TCP_NODELAY
argument_list|,
name|TCP_NO_DELAY
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_KEEPALIVE
argument_list|,
name|TCP_KEEP_ALIVE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ByteSizeValue
name|tcpSendBufferSize
init|=
name|TCP_SEND_BUFFER_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcpSendBufferSize
operator|.
name|getBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_SNDBUF
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|tcpSendBufferSize
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ByteSizeValue
name|tcpReceiveBufferSize
init|=
name|TCP_RECEIVE_BUFFER_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcpReceiveBufferSize
operator|.
name|getBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_RCVBUF
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|tcpReceiveBufferSize
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|RCVBUF_ALLOCATOR
argument_list|,
name|recvByteBufAllocator
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|reuseAddress
init|=
name|TCP_REUSE_ADDRESS
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|bootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|validate
argument_list|()
expr_stmt|;
return|return
name|bootstrap
return|;
block|}
DECL|method|createFallbackSettings
specifier|private
name|Settings
name|createFallbackSettings
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|fallbackSettingsBuilder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fallbackBindHost
init|=
name|TransportSettings
operator|.
name|BIND_HOST
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackBindHost
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|putArray
argument_list|(
literal|"bind_host"
argument_list|,
name|fallbackBindHost
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|fallbackPublishHost
init|=
name|TransportSettings
operator|.
name|PUBLISH_HOST
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackPublishHost
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|putArray
argument_list|(
literal|"publish_host"
argument_list|,
name|fallbackPublishHost
argument_list|)
expr_stmt|;
block|}
name|boolean
name|fallbackTcpNoDelay
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"transport.netty.tcp_no_delay"
argument_list|,
name|TcpSettings
operator|.
name|TCP_NO_DELAY
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"tcp_no_delay"
argument_list|,
name|fallbackTcpNoDelay
argument_list|)
expr_stmt|;
name|boolean
name|fallbackTcpKeepAlive
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"transport.netty.tcp_keep_alive"
argument_list|,
name|TcpSettings
operator|.
name|TCP_KEEP_ALIVE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"tcp_keep_alive"
argument_list|,
name|fallbackTcpKeepAlive
argument_list|)
expr_stmt|;
name|boolean
name|fallbackReuseAddress
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"transport.netty.reuse_address"
argument_list|,
name|TcpSettings
operator|.
name|TCP_REUSE_ADDRESS
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"reuse_address"
argument_list|,
name|fallbackReuseAddress
argument_list|)
expr_stmt|;
name|ByteSizeValue
name|fallbackTcpSendBufferSize
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.tcp_send_buffer_size"
argument_list|,
name|TCP_SEND_BUFFER_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackTcpSendBufferSize
operator|.
name|getBytes
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"tcp_send_buffer_size"
argument_list|,
name|fallbackTcpSendBufferSize
argument_list|)
expr_stmt|;
block|}
name|ByteSizeValue
name|fallbackTcpBufferSize
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.tcp_receive_buffer_size"
argument_list|,
name|TCP_RECEIVE_BUFFER_SIZE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackTcpBufferSize
operator|.
name|getBytes
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"tcp_receive_buffer_size"
argument_list|,
name|fallbackTcpBufferSize
argument_list|)
expr_stmt|;
block|}
return|return
name|fallbackSettingsBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createServerBootstrap
specifier|private
name|void
name|createServerBootstrap
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"using profile[{}], worker_count[{}], port[{}], bind_host[{}], publish_host[{}], compress[{}], "
operator|+
literal|"connect_timeout[{}], connections_per_node[{}/{}/{}/{}/{}], receive_predictor[{}->{}]"
argument_list|,
name|name
argument_list|,
name|workerCount
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"bind_host"
argument_list|)
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"publish_host"
argument_list|)
argument_list|,
name|compress
argument_list|,
name|defaultConnectionProfile
operator|.
name|getConnectTimeout
argument_list|()
argument_list|,
name|defaultConnectionProfile
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|)
argument_list|,
name|defaultConnectionProfile
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|BULK
argument_list|)
argument_list|,
name|defaultConnectionProfile
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|)
argument_list|,
name|defaultConnectionProfile
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
argument_list|)
argument_list|,
name|defaultConnectionProfile
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
argument_list|)
argument_list|,
name|receivePredictorMin
argument_list|,
name|receivePredictorMax
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ThreadFactory
name|workerFactory
init|=
name|daemonThreadFactory
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|TRANSPORT_SERVER_WORKER_THREAD_NAME_PREFIX
argument_list|,
name|name
argument_list|)
decl_stmt|;
specifier|final
name|ServerBootstrap
name|serverBootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|()
decl_stmt|;
if|if
condition|(
name|TCP_BLOCKING_SERVER
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|serverBootstrap
operator|.
name|group
argument_list|(
operator|new
name|OioEventLoopGroup
argument_list|(
name|workerCount
argument_list|,
name|workerFactory
argument_list|)
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|channel
argument_list|(
name|OioServerSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverBootstrap
operator|.
name|group
argument_list|(
operator|new
name|NioEventLoopGroup
argument_list|(
name|workerCount
argument_list|,
name|workerFactory
argument_list|)
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|serverBootstrap
operator|.
name|childHandler
argument_list|(
name|getServerChannelInitializer
argument_list|(
name|name
argument_list|,
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|TCP_NODELAY
argument_list|,
name|TCP_NO_DELAY
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_KEEPALIVE
argument_list|,
name|TCP_KEEP_ALIVE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ByteSizeValue
name|tcpSendBufferSize
init|=
name|TCP_SEND_BUFFER_SIZE
operator|.
name|getDefault
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcpSendBufferSize
operator|!=
literal|null
operator|&&
name|tcpSendBufferSize
operator|.
name|getBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_SNDBUF
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|tcpSendBufferSize
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ByteSizeValue
name|tcpReceiveBufferSize
init|=
name|TCP_RECEIVE_BUFFER_SIZE
operator|.
name|getDefault
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcpReceiveBufferSize
operator|!=
literal|null
operator|&&
name|tcpReceiveBufferSize
operator|.
name|getBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_RCVBUF
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|tcpReceiveBufferSize
operator|.
name|bytesAsInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serverBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|RCVBUF_ALLOCATOR
argument_list|,
name|recvByteBufAllocator
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|RCVBUF_ALLOCATOR
argument_list|,
name|recvByteBufAllocator
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|reuseAddress
init|=
name|TCP_REUSE_ADDRESS
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|serverBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|validate
argument_list|()
expr_stmt|;
name|serverBootstraps
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|serverBootstrap
argument_list|)
expr_stmt|;
block|}
DECL|method|getServerChannelInitializer
specifier|protected
name|ChannelHandler
name|getServerChannelInitializer
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|ServerChannelInitializer
argument_list|(
name|name
argument_list|,
name|settings
argument_list|)
return|;
block|}
DECL|method|getClientChannelInitializer
specifier|protected
name|ChannelHandler
name|getClientChannelInitializer
parameter_list|()
block|{
return|return
operator|new
name|ClientChannelInitializer
argument_list|()
return|;
block|}
DECL|method|exceptionCaught
specifier|protected
specifier|final
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Throwable
name|unwrapped
init|=
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|cause
argument_list|,
name|ElasticsearchException
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Throwable
name|t
init|=
name|unwrapped
operator|!=
literal|null
condition|?
name|unwrapped
else|:
name|cause
decl_stmt|;
name|onException
argument_list|(
name|ctx
operator|.
name|channel
argument_list|()
argument_list|,
name|t
operator|instanceof
name|Exception
condition|?
operator|(
name|Exception
operator|)
name|t
else|:
operator|new
name|ElasticsearchException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serverOpen
specifier|public
name|long
name|serverOpen
parameter_list|()
block|{
name|Netty4OpenChannelsHandler
name|channels
init|=
name|serverOpenChannels
decl_stmt|;
return|return
name|channels
operator|==
literal|null
condition|?
literal|0
else|:
name|channels
operator|.
name|numberOfOpenChannels
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|connectToChannels
specifier|protected
name|NodeChannels
name|connectToChannels
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|ConnectionProfile
name|profile
parameter_list|)
block|{
specifier|final
name|Channel
index|[]
name|channels
init|=
operator|new
name|Channel
index|[
name|profile
operator|.
name|getNumConnections
argument_list|()
index|]
decl_stmt|;
specifier|final
name|NodeChannels
name|nodeChannels
init|=
operator|new
name|NodeChannels
argument_list|(
name|channels
argument_list|,
name|profile
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|numConnections
init|=
name|channels
operator|.
name|length
decl_stmt|;
specifier|final
name|TimeValue
name|connectTimeout
decl_stmt|;
specifier|final
name|Bootstrap
name|bootstrap
decl_stmt|;
specifier|final
name|TimeValue
name|defaultConnectTimeout
init|=
name|defaultConnectionProfile
operator|.
name|getConnectTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|profile
operator|.
name|getConnectTimeout
argument_list|()
operator|!=
literal|null
operator|&&
name|profile
operator|.
name|getConnectTimeout
argument_list|()
operator|.
name|equals
argument_list|(
name|defaultConnectTimeout
argument_list|)
operator|==
literal|false
condition|)
block|{
name|bootstrap
operator|=
name|this
operator|.
name|bootstrap
operator|.
name|clone
argument_list|(
name|this
operator|.
name|bootstrap
operator|.
name|config
argument_list|()
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|CONNECT_TIMEOUT_MILLIS
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|profile
operator|.
name|getConnectTimeout
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connectTimeout
operator|=
name|profile
operator|.
name|getConnectTimeout
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connectTimeout
operator|=
name|defaultConnectTimeout
expr_stmt|;
name|bootstrap
operator|=
name|this
operator|.
name|bootstrap
expr_stmt|;
block|}
specifier|final
name|ArrayList
argument_list|<
name|ChannelFuture
argument_list|>
name|connections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numConnections
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|node
operator|.
name|getAddress
argument_list|()
operator|.
name|address
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConnections
condition|;
name|i
operator|++
control|)
block|{
name|connections
operator|.
name|add
argument_list|(
name|bootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Iterator
argument_list|<
name|ChannelFuture
argument_list|>
name|iterator
init|=
name|connections
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|channels
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|iterator
operator|.
name|hasNext
argument_list|()
assert|;
name|ChannelFuture
name|future
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|future
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|future
operator|.
name|cause
argument_list|()
argument_list|)
throw|;
block|}
name|channels
index|[
name|i
index|]
operator|=
name|future
operator|.
name|channel
argument_list|()
expr_stmt|;
name|channels
index|[
name|i
index|]
operator|.
name|closeFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|RuntimeException
name|e
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ChannelFuture
name|future
range|:
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|connections
argument_list|)
control|)
block|{
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|future
argument_list|)
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|channel
argument_list|()
operator|!=
literal|null
operator|&&
name|future
operator|.
name|channel
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
try|try
block|{
name|future
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inner
parameter_list|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
throw|throw
name|e
throw|;
block|}
name|onAfterChannelsConnected
argument_list|(
name|nodeChannels
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"exception while closing channels"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nodeChannels
return|;
block|}
comment|/**      * Allows for logic to be executed after a connection has been made on all channels. While this method is being executed, the node is      * not listed as being connected to.      * @param nodeChannels the {@link NodeChannels} that have been connected      */
DECL|method|onAfterChannelsConnected
specifier|protected
name|void
name|onAfterChannelsConnected
parameter_list|(
name|NodeChannels
name|nodeChannels
parameter_list|)
block|{     }
DECL|class|ChannelCloseListener
specifier|private
class|class
name|ChannelCloseListener
implements|implements
name|ChannelFutureListener
block|{
DECL|field|node
specifier|private
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|method|ChannelCloseListener
specifier|private
name|ChannelCloseListener
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|operationComplete
specifier|public
name|void
name|operationComplete
parameter_list|(
specifier|final
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
operator|&&
name|nodeChannels
operator|.
name|hasChannel
argument_list|(
name|future
operator|.
name|channel
argument_list|()
argument_list|)
condition|)
block|{
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|disconnectFromNode
argument_list|(
name|node
argument_list|,
name|future
operator|.
name|channel
argument_list|()
argument_list|,
literal|"channel closed event"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|sendMessage
specifier|protected
name|void
name|sendMessage
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|BytesReference
name|reference
parameter_list|,
name|Runnable
name|sendListener
parameter_list|)
block|{
specifier|final
name|ChannelFuture
name|future
init|=
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|Netty4Utils
operator|.
name|toByteBuf
argument_list|(
name|reference
argument_list|)
argument_list|)
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|f
lambda|->
name|sendListener
operator|.
name|run
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeChannels
specifier|protected
name|void
name|closeChannels
parameter_list|(
specifier|final
name|List
argument_list|<
name|Channel
argument_list|>
name|channels
parameter_list|)
throws|throws
name|IOException
block|{
name|Netty4Utils
operator|.
name|closeChannels
argument_list|(
name|channels
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLocalAddress
specifier|protected
name|InetSocketAddress
name|getLocalAddress
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
return|return
operator|(
name|InetSocketAddress
operator|)
name|channel
operator|.
name|localAddress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|bind
specifier|protected
name|Channel
name|bind
parameter_list|(
name|String
name|name
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|)
block|{
return|return
name|serverBootstraps
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|bind
argument_list|(
name|address
argument_list|)
operator|.
name|syncUninterruptibly
argument_list|()
operator|.
name|channel
argument_list|()
return|;
block|}
DECL|method|getPing
name|ScheduledPing
name|getPing
parameter_list|()
block|{
return|return
name|scheduledPing
return|;
block|}
annotation|@
name|Override
DECL|method|isOpen
specifier|protected
name|boolean
name|isOpen
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
return|return
name|channel
operator|.
name|isOpen
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"debug"
argument_list|)
DECL|method|stopInternal
specifier|protected
name|void
name|stopInternal
parameter_list|()
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|serverOpenChannels
argument_list|,
parameter_list|()
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|serverBootstrapCloseFutures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|serverBootstraps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ServerBootstrap
argument_list|>
name|entry
range|:
name|serverBootstraps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|serverBootstrapCloseFutures
operator|.
name|add
argument_list|(
name|Tuple
operator|.
name|tuple
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|config
argument_list|()
operator|.
name|group
argument_list|()
operator|.
name|shutdownGracefully
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Tuple
argument_list|<
name|String
argument_list|,
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|future
range|:
name|serverBootstrapCloseFutures
control|)
block|{
name|future
operator|.
name|v2
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|future
operator|.
name|v2
argument_list|()
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Error closing server bootstrap for profile [{}]"
argument_list|,
name|future
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|,
name|future
operator|.
name|v2
argument_list|()
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|serverBootstraps
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|bootstrap
operator|!=
literal|null
condition|)
block|{
name|bootstrap
operator|.
name|config
argument_list|()
operator|.
name|group
argument_list|()
operator|.
name|shutdownGracefully
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|bootstrap
operator|=
literal|null
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|ClientChannelInitializer
specifier|protected
class|class
name|ClientChannelInitializer
extends|extends
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|initChannel
specifier|protected
name|void
name|initChannel
parameter_list|(
name|Channel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"size"
argument_list|,
operator|new
name|Netty4SizeHeaderFrameDecoder
argument_list|()
argument_list|)
expr_stmt|;
comment|// using a dot as a prefix means this cannot come from any settings parsed
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"dispatcher"
argument_list|,
operator|new
name|Netty4MessageChannelHandler
argument_list|(
name|Netty4Transport
operator|.
name|this
argument_list|,
literal|".client"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exceptionCaught
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
name|Netty4Utils
operator|.
name|maybeDie
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|super
operator|.
name|exceptionCaught
argument_list|(
name|ctx
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ServerChannelInitializer
specifier|protected
class|class
name|ServerChannelInitializer
extends|extends
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
block|{
DECL|field|name
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|settings
specifier|protected
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|method|ServerChannelInitializer
specifier|protected
name|ServerChannelInitializer
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initChannel
specifier|protected
name|void
name|initChannel
parameter_list|(
name|Channel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"open_channels"
argument_list|,
name|Netty4Transport
operator|.
name|this
operator|.
name|serverOpenChannels
argument_list|)
expr_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"size"
argument_list|,
operator|new
name|Netty4SizeHeaderFrameDecoder
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"dispatcher"
argument_list|,
operator|new
name|Netty4MessageChannelHandler
argument_list|(
name|Netty4Transport
operator|.
name|this
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exceptionCaught
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
name|Netty4Utils
operator|.
name|maybeDie
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|super
operator|.
name|exceptionCaught
argument_list|(
name|ctx
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

