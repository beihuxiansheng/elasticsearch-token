begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.netty4
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|ByteToMessageDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|TooLongFrameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TcpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|Netty4SizeHeaderFrameDecoder
specifier|final
class|class
name|Netty4SizeHeaderFrameDecoder
extends|extends
name|ByteToMessageDecoder
block|{
annotation|@
name|Override
DECL|method|decode
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|boolean
name|continueProcessing
init|=
name|TcpTransport
operator|.
name|validateMessageHeader
argument_list|(
name|Netty4Utils
operator|.
name|toBytesReference
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ByteBuf
name|message
init|=
name|in
operator|.
name|skipBytes
argument_list|(
name|TcpHeader
operator|.
name|MARKER_BYTES_SIZE
operator|+
name|TcpHeader
operator|.
name|MESSAGE_LENGTH_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|continueProcessing
condition|)
return|return;
name|out
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TooLongFrameException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|/* decode will be called until the ByteBuf is fully consumed; when it is fully              * consumed, transport#validateMessageHeader will throw an IllegalStateException which              * is okay, it means we have finished consuming the ByteBuf and we can get out              */
block|}
block|}
block|}
end_class

end_unit

