begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ResponseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|ESRestTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|ObjectPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|RegexMatcher
operator|.
name|matches
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_class
DECL|class|Netty4BadRequestIT
specifier|public
class|class
name|Netty4BadRequestIT
extends|extends
name|ESRestTestCase
block|{
DECL|method|testBadRequest
specifier|public
name|void
name|testBadRequest
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Response
name|response
init|=
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/_nodes/settings"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|body
init|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|String
name|contentType
init|=
name|response
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
specifier|final
name|XContentType
name|xContentType
init|=
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
specifier|final
name|ObjectPath
name|objectPath
init|=
name|ObjectPath
operator|.
name|createFromXContent
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|body
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|objectPath
operator|.
name|evaluate
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|int
name|maxMaxInitialLineLength
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|httpMaxInitialLineLength
init|=
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_MAX_INITIAL_LINE_LENGTH
decl_stmt|;
specifier|final
name|String
name|key
init|=
name|httpMaxInitialLineLength
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
literal|"http."
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|settings
init|=
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"settings"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxIntialLineLength
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpSettings
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"http"
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpSettings
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|maxIntialLineLength
operator|=
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
operator|(
name|String
operator|)
name|httpSettings
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|maxIntialLineLength
operator|=
name|httpMaxInitialLineLength
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|maxIntialLineLength
operator|=
name|httpMaxInitialLineLength
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
expr_stmt|;
block|}
name|maxMaxInitialLineLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxMaxInitialLineLength
argument_list|,
name|maxIntialLineLength
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|path
init|=
literal|"/"
operator|+
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
name|maxMaxInitialLineLength
index|]
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\0'
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
specifier|final
name|ResponseException
name|e
init|=
name|expectThrows
argument_list|(
name|ResponseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
name|randomFrom
argument_list|(
literal|"GET"
argument_list|,
literal|"POST"
argument_list|,
literal|"PUT"
argument_list|)
argument_list|,
name|path
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getResponse
argument_list|()
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BAD_REQUEST
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"too_long_frame_exception"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|matches
argument_list|(
literal|"An HTTP line is larger than \\d+ bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

