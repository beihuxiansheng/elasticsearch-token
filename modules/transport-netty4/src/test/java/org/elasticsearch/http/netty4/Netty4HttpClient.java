begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.netty4
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaderNames
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpObject
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpObjectAggregator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestEncoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaderNames
operator|.
name|HOST
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_comment
comment|/**  * Tiny helper to send http requests over netty.  */
end_comment

begin_class
DECL|class|Netty4HttpClient
class|class
name|Netty4HttpClient
implements|implements
name|Closeable
block|{
DECL|method|returnHttpResponseBodies
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|returnHttpResponseBodies
parameter_list|(
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|responses
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|responses
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FullHttpResponse
name|response
range|:
name|responses
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|response
operator|.
name|content
argument_list|()
operator|.
name|toString
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|method|returnOpaqueIds
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|returnOpaqueIds
parameter_list|(
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|responses
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|responses
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HttpResponse
name|response
range|:
name|responses
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|response
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"X-Opaque-Id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|field|clientBootstrap
specifier|private
specifier|final
name|Bootstrap
name|clientBootstrap
decl_stmt|;
DECL|method|Netty4HttpClient
name|Netty4HttpClient
parameter_list|()
block|{
name|clientBootstrap
operator|=
operator|new
name|Bootstrap
argument_list|()
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|group
argument_list|(
operator|new
name|NioEventLoopGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|get
parameter_list|(
name|SocketAddress
name|remoteAddress
parameter_list|,
name|String
modifier|...
name|uris
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Collection
argument_list|<
name|HttpRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|uris
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uris
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|HttpRequest
name|httpRequest
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|uris
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|httpRequest
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|HOST
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|httpRequest
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
literal|"X-Opaque-ID"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|httpRequest
argument_list|)
expr_stmt|;
block|}
return|return
name|sendRequests
argument_list|(
name|remoteAddress
argument_list|,
name|requests
argument_list|)
return|;
block|}
annotation|@
name|SafeVarargs
comment|// Safe not because it doesn't do anything with the type parameters but because it won't leak them into other methods.
DECL|method|post
specifier|public
specifier|final
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|post
parameter_list|(
name|SocketAddress
name|remoteAddress
parameter_list|,
name|Tuple
argument_list|<
name|String
argument_list|,
name|CharSequence
argument_list|>
modifier|...
name|urisAndBodies
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|processRequestsWithBody
argument_list|(
name|HttpMethod
operator|.
name|POST
argument_list|,
name|remoteAddress
argument_list|,
name|urisAndBodies
argument_list|)
return|;
block|}
DECL|method|post
specifier|public
specifier|final
name|FullHttpResponse
name|post
parameter_list|(
name|SocketAddress
name|remoteAddress
parameter_list|,
name|FullHttpRequest
name|httpRequest
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|responses
init|=
name|sendRequests
argument_list|(
name|remoteAddress
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|httpRequest
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|responses
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|:
literal|"expected 1 and only 1 http response"
assert|;
return|return
name|responses
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|SafeVarargs
comment|// Safe not because it doesn't do anything with the type parameters but because it won't leak them into other methods.
DECL|method|put
specifier|public
specifier|final
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|put
parameter_list|(
name|SocketAddress
name|remoteAddress
parameter_list|,
name|Tuple
argument_list|<
name|String
argument_list|,
name|CharSequence
argument_list|>
modifier|...
name|urisAndBodies
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|processRequestsWithBody
argument_list|(
name|HttpMethod
operator|.
name|PUT
argument_list|,
name|remoteAddress
argument_list|,
name|urisAndBodies
argument_list|)
return|;
block|}
DECL|method|processRequestsWithBody
specifier|private
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|processRequestsWithBody
parameter_list|(
name|HttpMethod
name|method
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|,
name|Tuple
argument_list|<
name|String
argument_list|,
name|CharSequence
argument_list|>
modifier|...
name|urisAndBodies
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Collection
argument_list|<
name|HttpRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|urisAndBodies
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|String
argument_list|,
name|CharSequence
argument_list|>
name|uriAndBody
range|:
name|urisAndBodies
control|)
block|{
name|ByteBuf
name|content
init|=
name|Unpooled
operator|.
name|copiedBuffer
argument_list|(
name|uriAndBody
operator|.
name|v2
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|HttpRequest
name|request
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|method
argument_list|,
name|uriAndBody
operator|.
name|v1
argument_list|()
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|request
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|HttpHeaderNames
operator|.
name|HOST
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|request
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|HttpHeaderNames
operator|.
name|CONTENT_LENGTH
argument_list|,
name|content
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
return|return
name|sendRequests
argument_list|(
name|remoteAddress
argument_list|,
name|requests
argument_list|)
return|;
block|}
DECL|method|sendRequests
specifier|private
specifier|synchronized
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|sendRequests
parameter_list|(
specifier|final
name|SocketAddress
name|remoteAddress
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|HttpRequest
argument_list|>
name|requests
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|requests
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|content
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|requests
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|clientBootstrap
operator|.
name|handler
argument_list|(
operator|new
name|CountDownLatchHandler
argument_list|(
name|latch
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
name|ChannelFuture
name|channelFuture
init|=
literal|null
decl_stmt|;
try|try
block|{
name|channelFuture
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|remoteAddress
argument_list|)
expr_stmt|;
name|channelFuture
operator|.
name|sync
argument_list|()
expr_stmt|;
for|for
control|(
name|HttpRequest
name|request
range|:
name|requests
control|)
block|{
name|channelFuture
operator|.
name|channel
argument_list|()
operator|.
name|writeAndFlush
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|channelFuture
operator|!=
literal|null
condition|)
block|{
name|channelFuture
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|content
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|clientBootstrap
operator|.
name|config
argument_list|()
operator|.
name|group
argument_list|()
operator|.
name|shutdownGracefully
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
comment|/**      * helper factory which adds returned data to a list and uses a count down latch to decide when done      */
DECL|class|CountDownLatchHandler
specifier|private
specifier|static
class|class
name|CountDownLatchHandler
extends|extends
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|content
specifier|private
specifier|final
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|content
decl_stmt|;
DECL|method|CountDownLatchHandler
name|CountDownLatchHandler
parameter_list|(
specifier|final
name|CountDownLatch
name|latch
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|FullHttpResponse
argument_list|>
name|content
parameter_list|)
block|{
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initChannel
specifier|protected
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|maxContentLength
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|100
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
decl_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|HttpResponseDecoder
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|HttpRequestEncoder
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|HttpObjectAggregator
argument_list|(
name|maxContentLength
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|SimpleChannelInboundHandler
argument_list|<
name|HttpObject
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpObject
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FullHttpResponse
name|response
init|=
operator|(
name|FullHttpResponse
operator|)
name|msg
decl_stmt|;
name|content
operator|.
name|add
argument_list|(
name|response
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|exceptionCaught
argument_list|(
name|ctx
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

