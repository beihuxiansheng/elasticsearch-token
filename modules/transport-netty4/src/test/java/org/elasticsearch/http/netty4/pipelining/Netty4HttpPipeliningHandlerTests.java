begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.netty4.pipelining
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty4
operator|.
name|pipelining
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBufUtil
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPromise
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|embedded
operator|.
name|EmbeddedChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|LastHttpContent
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|QueryStringDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Randomness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedTransferQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaderNames
operator|.
name|CONTENT_LENGTH
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_class
DECL|class|Netty4HttpPipeliningHandlerTests
specifier|public
class|class
name|Netty4HttpPipeliningHandlerTests
extends|extends
name|ESTestCase
block|{
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|randomIntBetween
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|waitingRequests
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CountDownLatch
argument_list|>
name|waitingRequests
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|finishingRequests
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CountDownLatch
argument_list|>
name|finishingRequests
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|waitingRequests
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|finishRequest
argument_list|)
expr_stmt|;
name|shutdownExecutorService
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|finishRequest
specifier|private
name|CountDownLatch
name|finishRequest
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|waitingRequests
operator|.
name|get
argument_list|(
name|url
argument_list|)
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
name|finishingRequests
operator|.
name|get
argument_list|(
name|url
argument_list|)
return|;
block|}
DECL|method|shutdownExecutorService
specifier|private
name|void
name|shutdownExecutorService
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|executorService
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testThatPipeliningWorksWithFastSerializedRequests
specifier|public
name|void
name|testThatPipeliningWorksWithFastSerializedRequests
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|numberOfRequests
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|128
argument_list|)
decl_stmt|;
specifier|final
name|EmbeddedChannel
name|embeddedChannel
init|=
operator|new
name|EmbeddedChannel
argument_list|(
operator|new
name|HttpPipeliningHandler
argument_list|(
name|numberOfRequests
argument_list|)
argument_list|,
operator|new
name|WorkEmulatorHandler
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRequests
condition|;
name|i
operator|++
control|)
block|{
name|embeddedChannel
operator|.
name|writeInbound
argument_list|(
name|createHttpRequest
argument_list|(
literal|"/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|latches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|url
range|:
name|waitingRequests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|latches
operator|.
name|add
argument_list|(
name|finishRequest
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|CountDownLatch
name|latch
range|:
name|latches
control|)
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|embeddedChannel
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRequests
condition|;
name|i
operator|++
control|)
block|{
name|assertReadHttpMessageHasContent
argument_list|(
name|embeddedChannel
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|embeddedChannel
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatPipeliningWorksWhenSlowRequestsInDifferentOrder
specifier|public
name|void
name|testThatPipeliningWorksWhenSlowRequestsInDifferentOrder
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|numberOfRequests
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|128
argument_list|)
decl_stmt|;
specifier|final
name|EmbeddedChannel
name|embeddedChannel
init|=
operator|new
name|EmbeddedChannel
argument_list|(
operator|new
name|HttpPipeliningHandler
argument_list|(
name|numberOfRequests
argument_list|)
argument_list|,
operator|new
name|WorkEmulatorHandler
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRequests
condition|;
name|i
operator|++
control|)
block|{
name|embeddedChannel
operator|.
name|writeInbound
argument_list|(
name|createHttpRequest
argument_list|(
literal|"/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// random order execution
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|waitingRequests
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Randomness
operator|.
name|shuffle
argument_list|(
name|urls
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|latches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|url
range|:
name|urls
control|)
block|{
name|latches
operator|.
name|add
argument_list|(
name|finishRequest
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|CountDownLatch
name|latch
range|:
name|latches
control|)
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|embeddedChannel
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRequests
condition|;
name|i
operator|++
control|)
block|{
name|assertReadHttpMessageHasContent
argument_list|(
name|embeddedChannel
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|embeddedChannel
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatPipeliningWorksWithChunkedRequests
specifier|public
name|void
name|testThatPipeliningWorksWithChunkedRequests
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|numberOfRequests
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|128
argument_list|)
decl_stmt|;
specifier|final
name|EmbeddedChannel
name|embeddedChannel
init|=
operator|new
name|EmbeddedChannel
argument_list|(
operator|new
name|AggregateUrisAndHeadersHandler
argument_list|()
argument_list|,
operator|new
name|HttpPipeliningHandler
argument_list|(
name|numberOfRequests
argument_list|)
argument_list|,
operator|new
name|WorkEmulatorHandler
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRequests
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DefaultHttpRequest
name|request
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
literal|"/"
operator|+
name|i
argument_list|)
decl_stmt|;
name|embeddedChannel
operator|.
name|writeInbound
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|embeddedChannel
operator|.
name|writeInbound
argument_list|(
name|LastHttpContent
operator|.
name|EMPTY_LAST_CONTENT
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|latches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numberOfRequests
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|latches
operator|.
name|add
argument_list|(
name|finishRequest
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|CountDownLatch
name|latch
range|:
name|latches
control|)
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|embeddedChannel
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRequests
condition|;
name|i
operator|++
control|)
block|{
name|assertReadHttpMessageHasContent
argument_list|(
name|embeddedChannel
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|embeddedChannel
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatPipeliningClosesConnectionWithTooManyEvents
specifier|public
name|void
name|testThatPipeliningClosesConnectionWithTooManyEvents
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|numberOfRequests
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|128
argument_list|)
decl_stmt|;
specifier|final
name|EmbeddedChannel
name|embeddedChannel
init|=
operator|new
name|EmbeddedChannel
argument_list|(
operator|new
name|HttpPipeliningHandler
argument_list|(
name|numberOfRequests
argument_list|)
argument_list|,
operator|new
name|WorkEmulatorHandler
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
operator|+
name|numberOfRequests
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|embeddedChannel
operator|.
name|writeInbound
argument_list|(
name|createHttpRequest
argument_list|(
literal|"/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|latches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|requests
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|numberOfRequests
operator|+
literal|1
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|r
lambda|->
name|r
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Randomness
operator|.
name|shuffle
argument_list|(
name|requests
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Integer
name|request
range|:
name|requests
control|)
block|{
name|latches
operator|.
name|add
argument_list|(
name|finishRequest
argument_list|(
name|request
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|CountDownLatch
name|latch
range|:
name|latches
control|)
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|finishRequest
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|numberOfRequests
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|await
argument_list|()
expr_stmt|;
name|embeddedChannel
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|embeddedChannel
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReadHttpMessageHasContent
specifier|private
name|void
name|assertReadHttpMessageHasContent
parameter_list|(
name|EmbeddedChannel
name|embeddedChannel
parameter_list|,
name|String
name|expectedContent
parameter_list|)
block|{
name|FullHttpResponse
name|response
init|=
operator|(
name|FullHttpResponse
operator|)
name|embeddedChannel
operator|.
name|outboundMessages
argument_list|()
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected response to exist, maybe you did not wait long enough?"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected response to have content "
operator|+
name|expectedContent
argument_list|,
name|response
operator|.
name|content
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|data
init|=
operator|new
name|String
argument_list|(
name|ByteBufUtil
operator|.
name|getBytes
argument_list|(
name|response
operator|.
name|content
argument_list|()
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|data
argument_list|,
name|is
argument_list|(
name|expectedContent
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createHttpRequest
specifier|private
name|FullHttpRequest
name|createHttpRequest
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|class|AggregateUrisAndHeadersHandler
specifier|private
specifier|static
class|class
name|AggregateUrisAndHeadersHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|HttpRequest
argument_list|>
block|{
DECL|field|QUEUE_URI
specifier|static
specifier|final
name|Queue
argument_list|<
name|String
argument_list|>
name|QUEUE_URI
init|=
operator|new
name|LinkedTransferQueue
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|channelRead0
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|QUEUE_URI
operator|.
name|add
argument_list|(
name|request
operator|.
name|uri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|WorkEmulatorHandler
specifier|private
class|class
name|WorkEmulatorHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|HttpPipelinedRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|channelRead0
specifier|protected
name|void
name|channelRead0
parameter_list|(
specifier|final
name|ChannelHandlerContext
name|ctx
parameter_list|,
specifier|final
name|HttpPipelinedRequest
name|pipelinedRequest
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|QueryStringDecoder
name|decoder
decl_stmt|;
if|if
condition|(
name|pipelinedRequest
operator|.
name|last
argument_list|()
operator|instanceof
name|FullHttpRequest
condition|)
block|{
specifier|final
name|FullHttpRequest
name|fullHttpRequest
init|=
operator|(
name|FullHttpRequest
operator|)
name|pipelinedRequest
operator|.
name|last
argument_list|()
decl_stmt|;
name|decoder
operator|=
operator|new
name|QueryStringDecoder
argument_list|(
name|fullHttpRequest
operator|.
name|uri
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decoder
operator|=
operator|new
name|QueryStringDecoder
argument_list|(
name|AggregateUrisAndHeadersHandler
operator|.
name|QUEUE_URI
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|uri
init|=
name|decoder
operator|.
name|path
argument_list|()
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|ByteBuf
name|content
init|=
name|Unpooled
operator|.
name|copiedBuffer
argument_list|(
name|uri
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|DefaultFullHttpResponse
name|httpResponse
init|=
operator|new
name|DefaultFullHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|OK
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|CONTENT_LENGTH
argument_list|,
name|content
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|waitingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|waitingRequests
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|waitingLatch
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|finishingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|finishingRequests
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|finishingLatch
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|waitingLatch
operator|.
name|await
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
specifier|final
name|ChannelPromise
name|promise
init|=
name|ctx
operator|.
name|newPromise
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|write
argument_list|(
name|pipelinedRequest
operator|.
name|createHttpResponse
argument_list|(
name|httpResponse
argument_list|,
name|promise
argument_list|)
argument_list|,
name|promise
argument_list|)
expr_stmt|;
name|finishingLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

