begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.analysis.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|analysis
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchPhraseQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHighlight
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_class
DECL|class|HighlighterWithAnalyzersTests
specifier|public
class|class
name|HighlighterWithAnalyzersTests
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|CommonAnalysisPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testNgramHighlightingWithBrokenPositions
specifier|public
name|void
name|testNgramHighlightingWithBrokenPositions
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"autocomplete"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"autocomplete"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"search_autocomplete"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.max_gram"
argument_list|,
literal|20
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.min_gram"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.token_chars"
argument_list|,
literal|"letter,digit"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.type"
argument_list|,
literal|"nGram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type"
argument_list|,
literal|"word_delimiter"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.filter.wordDelimiter.type_table"
argument_list|,
literal|"& => ALPHANUM"
argument_list|,
literal|"| => ALPHANUM"
argument_list|,
literal|"! => ALPHANUM"
argument_list|,
literal|"? => ALPHANUM"
argument_list|,
literal|". => ALPHANUM"
argument_list|,
literal|"- => ALPHANUM"
argument_list|,
literal|"# => ALPHANUM"
argument_list|,
literal|"% => ALPHANUM"
argument_list|,
literal|"+ => ALPHANUM"
argument_list|,
literal|", => ALPHANUM"
argument_list|,
literal|"~ => ALPHANUM"
argument_list|,
literal|": => ALPHANUM"
argument_list|,
literal|"/ => ALPHANUM"
argument_list|,
literal|"^ => ALPHANUM"
argument_list|,
literal|"$ => ALPHANUM"
argument_list|,
literal|"@ => ALPHANUM"
argument_list|,
literal|") => ALPHANUM"
argument_list|,
literal|"( => ALPHANUM"
argument_list|,
literal|"] => ALPHANUM"
argument_list|,
literal|"[ => ALPHANUM"
argument_list|,
literal|"} => ALPHANUM"
argument_list|,
literal|"{ => ALPHANUM"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type.split_on_numerics"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_word_parts"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_number_parts"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_words"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_numbers"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_all"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.autocomplete.tokenizer"
argument_list|,
literal|"autocomplete"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.autocomplete.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"wordDelimiter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.search_autocomplete.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.search_autocomplete.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"wordDelimiter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
literal|"ARCOTEL Hotels Deutschland"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name.autocomplete"
argument_list|,
literal|"deut tel"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"name.autocomplete"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name.autocomplete"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"ARCO<em>TEL</em> Ho<em>tel</em>s<em>Deut</em>schland"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiPhraseCutoff
specifier|public
name|void
name|testMultiPhraseCutoff
parameter_list|()
throws|throws
name|IOException
block|{
comment|/*          * MultiPhraseQuery can literally kill an entire node if there are too many terms in the          * query. We cut off and extract terms if there are more than 16 terms in the query          */
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"body"
argument_list|,
literal|"type=text,analyzer=custom_analyzer,"
operator|+
literal|"search_analyzer=custom_analyzer,term_vector=with_positions_offsets"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type"
argument_list|,
literal|"word_delimiter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type.split_on_numerics"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_word_parts"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_number_parts"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_words"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_numbers"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_all"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.custom_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.custom_analyzer.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"wordDelimiter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"Test: http://www.facebook.com http://elasticsearch.org "
operator|+
literal|"http://xing.com http://cnn.com http://quora.com http://twitter.com this is "
operator|+
literal|"a test for highlighting feature Test: http://www.facebook.com "
operator|+
literal|"http://elasticsearch.org http://xing.com http://cnn.com http://quora.com "
operator|+
literal|"http://twitter.com this is a test for highlighting feature"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"Test: http://www.facebook.com "
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"body"
argument_list|,
literal|0
argument_list|,
name|startsWith
argument_list|(
literal|"<em>Test: http://www.facebook.com</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"Test: http://www.facebook.com "
operator|+
literal|"http://elasticsearch.org http://xing.com http://cnn.com "
operator|+
literal|"http://quora.com http://twitter.com this is a test for highlighting "
operator|+
literal|"feature Test: http://www.facebook.com http://elasticsearch.org "
operator|+
literal|"http://xing.com http://cnn.com http://quora.com http://twitter.com this "
operator|+
literal|"is a test for highlighting feature"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"body"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>Test</em>: "
operator|+
literal|"<em>http://www.facebook.com</em><em>http://elasticsearch.org</em> "
operator|+
literal|"<em>http://xing.com</em><em>http://cnn.com</em> http://quora.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

