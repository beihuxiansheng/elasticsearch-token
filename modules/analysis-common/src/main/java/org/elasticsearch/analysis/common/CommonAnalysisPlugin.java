begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.analysis.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|analysis
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|StopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|commongrams
operator|.
name|CommonGramsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|StopAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|UpperCaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|en
operator|.
name|KStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|en
operator|.
name|PorterStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|ASCIIFoldingFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|LengthFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|TrimFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|TruncateTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|UniqueTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterGraphFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
operator|.
name|EdgeNGramTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
operator|.
name|NGramTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|reverse
operator|.
name|ReverseStringFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|ClassicFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|HtmlStripCharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|PreConfiguredTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
operator|.
name|AnalysisProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltCacheFactory
operator|.
name|CachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|AnalysisPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|AnalysisPlugin
operator|.
name|requriesAnalysisSettings
import|;
end_import

begin_class
DECL|class|CommonAnalysisPlugin
specifier|public
class|class
name|CommonAnalysisPlugin
extends|extends
name|Plugin
implements|implements
name|AnalysisPlugin
block|{
annotation|@
name|Override
DECL|method|getTokenFilters
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|getTokenFilters
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|filters
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|put
argument_list|(
literal|"asciifolding"
argument_list|,
name|ASCIIFoldingTokenFilterFactory
operator|::
operator|new
argument_list|)
expr_stmt|;
name|filters
operator|.
name|put
argument_list|(
literal|"word_delimiter"
argument_list|,
name|WordDelimiterTokenFilterFactory
operator|::
operator|new
argument_list|)
expr_stmt|;
name|filters
operator|.
name|put
argument_list|(
literal|"word_delimiter_graph"
argument_list|,
name|WordDelimiterGraphTokenFilterFactory
operator|::
operator|new
argument_list|)
expr_stmt|;
return|return
name|filters
return|;
block|}
DECL|method|getCharFilters
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
argument_list|>
name|getCharFilters
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
argument_list|>
name|filters
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|put
argument_list|(
literal|"html_strip"
argument_list|,
name|HtmlStripCharFilterFactory
operator|::
operator|new
argument_list|)
expr_stmt|;
name|filters
operator|.
name|put
argument_list|(
literal|"pattern_replace"
argument_list|,
name|requriesAnalysisSettings
argument_list|(
name|PatternReplaceCharFilterFactory
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|put
argument_list|(
literal|"mapping"
argument_list|,
name|requriesAnalysisSettings
argument_list|(
name|MappingCharFilterFactory
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|filters
return|;
block|}
annotation|@
name|Override
DECL|method|getPreConfiguredTokenFilters
specifier|public
name|List
argument_list|<
name|PreConfiguredTokenFilter
argument_list|>
name|getPreConfiguredTokenFilters
parameter_list|()
block|{
comment|// TODO we should revisit the caching strategies.
name|List
argument_list|<
name|PreConfiguredTokenFilter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"asciifolding"
argument_list|,
literal|true
argument_list|,
name|CachingStrategy
operator|.
name|ONE
argument_list|,
name|input
lambda|->
operator|new
name|ASCIIFoldingFilter
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"classic"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|ONE
argument_list|,
name|ClassicFilter
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"common_grams"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|input
lambda|->
operator|new
name|CommonGramsFilter
argument_list|(
name|input
argument_list|,
name|CharArraySet
operator|.
name|EMPTY_SET
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"edge_ngram"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|input
lambda|->
operator|new
name|EdgeNGramTokenFilter
argument_list|(
name|input
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_MIN_GRAM_SIZE
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_MAX_GRAM_SIZE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO deprecate edgeNGram
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"edgeNGram"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|input
lambda|->
operator|new
name|EdgeNGramTokenFilter
argument_list|(
name|input
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_MIN_GRAM_SIZE
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_MAX_GRAM_SIZE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"kstem"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|ONE
argument_list|,
name|KStemFilter
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"length"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|input
lambda|->
operator|new
name|LengthFilter
argument_list|(
name|input
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO this one seems useless
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"ngram"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|NGramTokenFilter
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO deprecate nGram
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"nGram"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|NGramTokenFilter
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"porter_stem"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|ONE
argument_list|,
name|PorterStemFilter
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"reverse"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|input
lambda|->
operator|new
name|ReverseStringFilter
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The stop filter is in lucene-core but the English stop words set is in lucene-analyzers-common
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"stop"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|input
lambda|->
operator|new
name|StopFilter
argument_list|(
name|input
argument_list|,
name|StopAnalyzer
operator|.
name|ENGLISH_STOP_WORDS_SET
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"trim"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|TrimFilter
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"truncate"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|ONE
argument_list|,
name|input
lambda|->
operator|new
name|TruncateTokenFilter
argument_list|(
name|input
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"unique"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|ONE
argument_list|,
name|input
lambda|->
operator|new
name|UniqueTokenFilter
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"uppercase"
argument_list|,
literal|true
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
name|UpperCaseFilter
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"word_delimiter"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|ONE
argument_list|,
name|input
lambda|->
operator|new
name|WordDelimiterFilter
argument_list|(
name|input
argument_list|,
name|WordDelimiterFilter
operator|.
name|GENERATE_WORD_PARTS
operator||
name|WordDelimiterFilter
operator|.
name|GENERATE_NUMBER_PARTS
operator||
name|WordDelimiterFilter
operator|.
name|SPLIT_ON_CASE_CHANGE
operator||
name|WordDelimiterFilter
operator|.
name|SPLIT_ON_NUMERICS
operator||
name|WordDelimiterFilter
operator|.
name|STEM_ENGLISH_POSSESSIVE
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PreConfiguredTokenFilter
argument_list|(
literal|"word_delimiter_graph"
argument_list|,
literal|false
argument_list|,
name|CachingStrategy
operator|.
name|ONE
argument_list|,
name|input
lambda|->
operator|new
name|WordDelimiterGraphFilter
argument_list|(
name|input
argument_list|,
name|WordDelimiterGraphFilter
operator|.
name|GENERATE_WORD_PARTS
operator||
name|WordDelimiterGraphFilter
operator|.
name|GENERATE_NUMBER_PARTS
operator||
name|WordDelimiterGraphFilter
operator|.
name|SPLIT_ON_CASE_CHANGE
operator||
name|WordDelimiterGraphFilter
operator|.
name|SPLIT_ON_NUMERICS
operator||
name|WordDelimiterGraphFilter
operator|.
name|STEM_ENGLISH_POSSESSIVE
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|filters
return|;
block|}
block|}
end_class

end_unit

