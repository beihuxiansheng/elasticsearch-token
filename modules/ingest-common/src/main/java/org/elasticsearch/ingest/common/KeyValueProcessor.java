begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|AbstractProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ConfigurationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * The KeyValueProcessor parses and extracts messages of the `key=value` variety into fields with values of the keys.  */
end_comment

begin_class
DECL|class|KeyValueProcessor
specifier|public
specifier|final
class|class
name|KeyValueProcessor
extends|extends
name|AbstractProcessor
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"kv"
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|fieldSplit
specifier|private
specifier|final
name|String
name|fieldSplit
decl_stmt|;
DECL|field|valueSplit
specifier|private
specifier|final
name|String
name|valueSplit
decl_stmt|;
DECL|field|includeKeys
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|includeKeys
decl_stmt|;
DECL|field|targetField
specifier|private
specifier|final
name|String
name|targetField
decl_stmt|;
DECL|field|ignoreMissing
specifier|private
specifier|final
name|boolean
name|ignoreMissing
decl_stmt|;
DECL|method|KeyValueProcessor
name|KeyValueProcessor
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|fieldSplit
parameter_list|,
name|String
name|valueSplit
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|includeKeys
parameter_list|,
name|String
name|targetField
parameter_list|,
name|boolean
name|ignoreMissing
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|targetField
operator|=
name|targetField
expr_stmt|;
name|this
operator|.
name|fieldSplit
operator|=
name|fieldSplit
expr_stmt|;
name|this
operator|.
name|valueSplit
operator|=
name|valueSplit
expr_stmt|;
name|this
operator|.
name|includeKeys
operator|=
name|includeKeys
expr_stmt|;
name|this
operator|.
name|ignoreMissing
operator|=
name|ignoreMissing
expr_stmt|;
block|}
DECL|method|getField
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|getFieldSplit
name|String
name|getFieldSplit
parameter_list|()
block|{
return|return
name|fieldSplit
return|;
block|}
DECL|method|getValueSplit
name|String
name|getValueSplit
parameter_list|()
block|{
return|return
name|valueSplit
return|;
block|}
DECL|method|getIncludeKeys
name|List
argument_list|<
name|String
argument_list|>
name|getIncludeKeys
parameter_list|()
block|{
return|return
name|includeKeys
return|;
block|}
DECL|method|getTargetField
name|String
name|getTargetField
parameter_list|()
block|{
return|return
name|targetField
return|;
block|}
DECL|method|isIgnoreMissing
name|boolean
name|isIgnoreMissing
parameter_list|()
block|{
return|return
name|ignoreMissing
return|;
block|}
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|IngestDocument
name|document
parameter_list|,
name|String
name|targetField
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|document
operator|.
name|hasField
argument_list|(
name|targetField
argument_list|)
condition|)
block|{
name|document
operator|.
name|appendFieldValue
argument_list|(
name|targetField
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|document
operator|.
name|setFieldValue
argument_list|(
name|targetField
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|IngestDocument
name|document
parameter_list|)
block|{
name|String
name|oldVal
init|=
name|document
operator|.
name|getFieldValue
argument_list|(
name|field
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|ignoreMissing
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVal
operator|==
literal|null
operator|&&
name|ignoreMissing
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|field
operator|+
literal|"] is null, cannot extract key-value pairs."
argument_list|)
throw|;
block|}
name|String
name|fieldPathPrefix
init|=
operator|(
name|targetField
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|targetField
operator|+
literal|"."
decl_stmt|;
name|Arrays
operator|.
name|stream
argument_list|(
name|oldVal
operator|.
name|split
argument_list|(
name|fieldSplit
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|f
parameter_list|)
lambda|->
name|f
operator|.
name|split
argument_list|(
name|valueSplit
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
parameter_list|(
name|p
parameter_list|)
lambda|->
name|includeKeys
operator|==
literal|null
operator|||
name|includeKeys
operator|.
name|contains
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|p
parameter_list|)
lambda|->
name|append
argument_list|(
name|document
argument_list|,
name|fieldPathPrefix
operator|+
name|p
index|[
literal|0
index|]
argument_list|,
name|p
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|Processor
operator|.
name|Factory
block|{
annotation|@
name|Override
DECL|method|create
specifier|public
name|KeyValueProcessor
name|create
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|registry
parameter_list|,
name|String
name|processorTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|field
init|=
name|ConfigurationUtils
operator|.
name|readStringProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|String
name|targetField
init|=
name|ConfigurationUtils
operator|.
name|readOptionalStringProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"target_field"
argument_list|)
decl_stmt|;
name|String
name|fieldSplit
init|=
name|ConfigurationUtils
operator|.
name|readStringProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"field_split"
argument_list|)
decl_stmt|;
name|String
name|valueSplit
init|=
name|ConfigurationUtils
operator|.
name|readStringProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"value_split"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|includeKeys
init|=
name|ConfigurationUtils
operator|.
name|readOptionalList
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"include_keys"
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeKeys
operator|!=
literal|null
condition|)
block|{
name|includeKeys
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|includeKeys
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ignoreMissing
init|=
name|ConfigurationUtils
operator|.
name|readBooleanProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"ignore_missing"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|KeyValueProcessor
argument_list|(
name|processorTag
argument_list|,
name|field
argument_list|,
name|fieldSplit
argument_list|,
name|valueSplit
argument_list|,
name|includeKeys
argument_list|,
name|targetField
argument_list|,
name|ignoreMissing
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

