begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|AbstractProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ConfigurationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|DotExpanderProcessor
specifier|public
specifier|final
class|class
name|DotExpanderProcessor
extends|extends
name|AbstractProcessor
block|{
DECL|field|TYPE
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"dot_expander"
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|DotExpanderProcessor
name|DotExpanderProcessor
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|IngestDocument
name|ingestDocument
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|this
operator|.
name|path
operator|+
literal|"."
operator|+
name|field
expr_stmt|;
name|map
operator|=
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
name|this
operator|.
name|path
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|field
expr_stmt|;
name|map
operator|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|map
operator|.
name|remove
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
name|path
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// check whether we actually can expand the field in question into an object field.
comment|// part of the path may already exist and if part of it would be a value field (string, integer etc.)
comment|// then we can't override it with an object field and we should fail with a good reason.
comment|// IngestDocument#setFieldValue(...) would fail too, but the error isn't very understandable
for|for
control|(
name|int
name|index
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
init|;
name|index
operator|!=
operator|-
literal|1
condition|;
name|index
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|index
operator|+
literal|1
argument_list|)
control|)
block|{
name|String
name|partialPath
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
name|partialPath
argument_list|)
condition|)
block|{
name|Object
name|val
init|=
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
name|partialPath
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|val
operator|instanceof
name|Map
operator|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot expend ["
operator|+
name|path
operator|+
literal|"], because ["
operator|+
name|partialPath
operator|+
literal|"] is not an object field, but a value field"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
name|Object
name|value
init|=
name|map
operator|.
name|remove
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|path
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
DECL|method|getPath
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getField
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|class|Factory
specifier|public
specifier|static
specifier|final
class|class
name|Factory
implements|implements
name|Processor
operator|.
name|Factory
block|{
annotation|@
name|Override
DECL|method|create
specifier|public
name|Processor
name|create
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|processorFactories
parameter_list|,
name|String
name|tag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|field
init|=
name|ConfigurationUtils
operator|.
name|readStringProperty
argument_list|(
name|TYPE
argument_list|,
name|tag
argument_list|,
name|config
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
name|ConfigurationUtils
operator|.
name|newConfigurationException
argument_list|(
name|ConfigurationUtils
operator|.
name|TAG_KEY
argument_list|,
name|tag
argument_list|,
literal|"field"
argument_list|,
literal|"field does not contain a dot"
argument_list|)
throw|;
block|}
if|if
condition|(
name|field
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|==
literal|0
operator|||
name|field
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|==
name|field
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
throw|throw
name|ConfigurationUtils
operator|.
name|newConfigurationException
argument_list|(
name|ConfigurationUtils
operator|.
name|TAG_KEY
argument_list|,
name|tag
argument_list|,
literal|"field"
argument_list|,
literal|"Field can't start or end with a dot"
argument_list|)
throw|;
block|}
name|int
name|firstIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
name|field
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
init|;
name|index
operator|!=
operator|-
literal|1
condition|;
name|index
operator|=
name|field
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|index
operator|+
literal|1
argument_list|)
control|)
block|{
if|if
condition|(
name|index
operator|-
name|firstIndex
operator|==
literal|1
condition|)
block|{
throw|throw
name|ConfigurationUtils
operator|.
name|newConfigurationException
argument_list|(
name|ConfigurationUtils
operator|.
name|TAG_KEY
argument_list|,
name|tag
argument_list|,
literal|"field"
argument_list|,
literal|"No space between dots"
argument_list|)
throw|;
block|}
name|firstIndex
operator|=
name|index
expr_stmt|;
block|}
name|String
name|path
init|=
name|ConfigurationUtils
operator|.
name|readOptionalStringProperty
argument_list|(
name|TYPE
argument_list|,
name|tag
argument_list|,
name|config
argument_list|,
literal|"path"
argument_list|)
decl_stmt|;
return|return
operator|new
name|DotExpanderProcessor
argument_list|(
name|tag
argument_list|,
name|path
argument_list|,
name|field
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

