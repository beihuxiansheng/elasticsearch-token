begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ConfigurationUtils
operator|.
name|newConfigurationException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ConfigurationUtils
operator|.
name|readStringProperty
import|;
end_import

begin_comment
comment|/**  * Processor that allows to search for patterns in field content and replace them with corresponding string replacement.  * Support fields of string type only, throws exception if a field is of a different type.  */
end_comment

begin_class
DECL|class|GsubProcessor
specifier|public
specifier|final
class|class
name|GsubProcessor
extends|extends
name|AbstractStringProcessor
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"gsub"
decl_stmt|;
DECL|field|pattern
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
DECL|field|replacement
specifier|private
specifier|final
name|String
name|replacement
decl_stmt|;
DECL|method|GsubProcessor
name|GsubProcessor
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|field
parameter_list|,
name|Pattern
name|pattern
parameter_list|,
name|String
name|replacement
parameter_list|,
name|boolean
name|ignoreMissing
parameter_list|,
name|String
name|targetField
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|,
name|field
argument_list|,
name|ignoreMissing
argument_list|,
name|targetField
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|replacement
operator|=
name|replacement
expr_stmt|;
block|}
DECL|method|getPattern
name|Pattern
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
DECL|method|getReplacement
name|String
name|getReplacement
parameter_list|()
block|{
return|return
name|replacement
return|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|protected
name|String
name|process
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|replacement
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
DECL|class|Factory
specifier|public
specifier|static
specifier|final
class|class
name|Factory
extends|extends
name|AbstractStringProcessor
operator|.
name|Factory
block|{
DECL|method|Factory
specifier|public
name|Factory
parameter_list|()
block|{
name|super
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newProcessor
specifier|protected
name|AbstractStringProcessor
name|newProcessor
parameter_list|(
name|String
name|processorTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|ignoreMissing
parameter_list|,
name|String
name|targetField
parameter_list|)
block|{
name|String
name|pattern
init|=
name|readStringProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"pattern"
argument_list|)
decl_stmt|;
name|String
name|replacement
init|=
name|readStringProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"replacement"
argument_list|)
decl_stmt|;
name|Pattern
name|searchPattern
decl_stmt|;
try|try
block|{
name|searchPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|newConfigurationException
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
literal|"pattern"
argument_list|,
literal|"Invalid regex pattern. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|GsubProcessor
argument_list|(
name|processorTag
argument_list|,
name|field
argument_list|,
name|searchPattern
argument_list|,
name|replacement
argument_list|,
name|ignoreMissing
argument_list|,
name|targetField
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

