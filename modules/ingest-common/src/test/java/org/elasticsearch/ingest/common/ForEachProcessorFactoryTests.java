begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|TestProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ForEachProcessorFactoryTests
specifier|public
class|class
name|ForEachProcessorFactoryTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCreate
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
operator|new
name|TestProcessor
argument_list|(
name|ingestDocument
lambda|->
block|{ }
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"_name"
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|t
parameter_list|,
name|c
parameter_list|)
lambda|->
name|processor
argument_list|)
expr_stmt|;
name|ForEachProcessor
operator|.
name|Factory
name|forEachFactory
init|=
operator|new
name|ForEachProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"processor"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"_name"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ForEachProcessor
name|forEachProcessor
init|=
name|forEachFactory
operator|.
name|create
argument_list|(
name|registry
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|forEachProcessor
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|forEachProcessor
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|forEachProcessor
operator|.
name|getProcessor
argument_list|()
argument_list|,
name|Matchers
operator|.
name|sameInstance
argument_list|(
name|processor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateWithTooManyProcessorTypes
specifier|public
name|void
name|testCreateWithTooManyProcessorTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
operator|new
name|TestProcessor
argument_list|(
name|ingestDocument
lambda|->
block|{ }
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"_first"
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|t
parameter_list|,
name|c
parameter_list|)
lambda|->
name|processor
argument_list|)
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"_second"
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|t
parameter_list|,
name|c
parameter_list|)
lambda|->
name|processor
argument_list|)
expr_stmt|;
name|ForEachProcessor
operator|.
name|Factory
name|forEachFactory
init|=
operator|new
name|ForEachProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|processorTypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|processorTypes
operator|.
name|put
argument_list|(
literal|"_first"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|processorTypes
operator|.
name|put
argument_list|(
literal|"_second"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"processor"
argument_list|,
name|processorTypes
argument_list|)
expr_stmt|;
name|Exception
name|exception
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|forEachFactory
operator|.
name|create
argument_list|(
name|registry
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[processor] Must specify exactly one processor type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateWithNonExistingProcessorType
specifier|public
name|void
name|testCreateWithNonExistingProcessorType
parameter_list|()
throws|throws
name|Exception
block|{
name|ForEachProcessor
operator|.
name|Factory
name|forEachFactory
init|=
operator|new
name|ForEachProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"processor"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"_name"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|expectedException
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|forEachFactory
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expectedException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"No processor type exists with name [_name]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateWithMissingField
specifier|public
name|void
name|testCreateWithMissingField
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
operator|new
name|TestProcessor
argument_list|(
name|ingestDocument
lambda|->
block|{ }
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"_name"
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|t
parameter_list|,
name|c
parameter_list|)
lambda|->
name|processor
argument_list|)
expr_stmt|;
name|ForEachProcessor
operator|.
name|Factory
name|forEachFactory
init|=
operator|new
name|ForEachProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"processor"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"_name"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|exception
init|=
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|forEachFactory
operator|.
name|create
argument_list|(
name|registry
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[field] required property is missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateWithMissingProcessor
specifier|public
name|void
name|testCreateWithMissingProcessor
parameter_list|()
block|{
name|ForEachProcessor
operator|.
name|Factory
name|forEachFactory
init|=
operator|new
name|ForEachProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|Exception
name|exception
init|=
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|forEachFactory
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[processor] required property is missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

