begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|RandomDocumentPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|ScriptProcessorTests
specifier|public
class|class
name|ScriptProcessorTests
extends|extends
name|ESTestCase
block|{
DECL|method|testScripting
specifier|public
name|void
name|testScripting
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|randomBytesIn
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|int
name|randomBytesOut
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|int
name|randomBytesTotal
init|=
name|randomBytesIn
operator|+
name|randomBytesOut
decl_stmt|;
name|ScriptService
name|scriptService
init|=
name|mock
argument_list|(
name|ScriptService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
literal|"_script"
argument_list|)
decl_stmt|;
name|ExecutableScript
name|executableScript
init|=
name|mock
argument_list|(
name|ExecutableScript
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scriptService
operator|.
name|executable
argument_list|(
name|any
argument_list|(
name|Script
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|executableScript
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"bytes_in"
argument_list|,
name|randomInt
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"bytes_out"
argument_list|,
name|randomInt
argument_list|()
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"bytes_total"
argument_list|,
name|randomBytesTotal
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|executableScript
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|ScriptProcessor
name|processor
init|=
operator|new
name|ScriptProcessor
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|script
argument_list|,
name|scriptService
argument_list|)
decl_stmt|;
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|,
name|hasKey
argument_list|(
literal|"bytes_in"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|,
name|hasKey
argument_list|(
literal|"bytes_out"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|,
name|hasKey
argument_list|(
literal|"bytes_total"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"bytes_total"
argument_list|)
argument_list|,
name|is
argument_list|(
name|randomBytesTotal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

