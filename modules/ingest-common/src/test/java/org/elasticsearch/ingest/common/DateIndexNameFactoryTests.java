begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|DateIndexNameFactoryTests
specifier|public
class|class
name|DateIndexNameFactoryTests
extends|extends
name|ESTestCase
block|{
DECL|method|testDefaults
specifier|public
name|void
name|testDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|DateIndexNameProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|DateIndexNameProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"date_rounding"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|DateIndexNameProcessor
name|processor
init|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getDateFormats
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getField
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getIndexNamePrefix
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getDateRounding
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getIndexNameFormat
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTimezone
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpecifyOptionalSettings
specifier|public
name|void
name|testSpecifyOptionalSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|DateIndexNameProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|DateIndexNameProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"index_name_prefix"
argument_list|,
literal|"_prefix"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"date_rounding"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"date_formats"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"UNIX"
argument_list|,
literal|"UNIX_MS"
argument_list|)
argument_list|)
expr_stmt|;
name|DateIndexNameProcessor
name|processor
init|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getDateFormats
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"index_name_prefix"
argument_list|,
literal|"_prefix"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"date_rounding"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"index_name_format"
argument_list|,
literal|"yyyyMMdd"
argument_list|)
expr_stmt|;
name|processor
operator|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getIndexNameFormat
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"yyyyMMdd"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"index_name_prefix"
argument_list|,
literal|"_prefix"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"date_rounding"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"timezone"
argument_list|,
literal|"+02:00"
argument_list|)
expr_stmt|;
name|processor
operator|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTimezone
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"index_name_prefix"
argument_list|,
literal|"_prefix"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"date_rounding"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|processor
operator|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getIndexNamePrefix
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"_prefix"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRequiredFields
specifier|public
name|void
name|testRequiredFields
parameter_list|()
throws|throws
name|Exception
block|{
name|DateIndexNameProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|DateIndexNameProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"date_rounding"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|ElasticsearchParseException
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"[field] required property is missing"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|clear
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"[date_rounding] required property is missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

