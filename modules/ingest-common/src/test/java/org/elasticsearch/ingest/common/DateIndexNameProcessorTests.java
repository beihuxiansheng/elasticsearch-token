begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|DateIndexNameProcessorTests
specifier|public
class|class
name|DateIndexNameProcessorTests
extends|extends
name|ESTestCase
block|{
DECL|method|testJodaPattern
specifier|public
name|void
name|testJodaPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|DateTime
argument_list|>
name|function
init|=
name|DateFormat
operator|.
name|Joda
operator|.
name|getFunction
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|DateIndexNameProcessor
name|processor
init|=
operator|new
name|DateIndexNameProcessor
argument_list|(
literal|"_tag"
argument_list|,
literal|"_field"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|function
argument_list|)
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
literal|"events-"
argument_list|,
literal|"y"
argument_list|,
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|IngestDocument
name|document
init|=
operator|new
name|IngestDocument
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"_field"
argument_list|,
literal|"2016-04-25T12:24:20.101Z"
argument_list|)
argument_list|)
decl_stmt|;
name|processor
operator|.
name|execute
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"_index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<events-{20160425||/y{yyyyMMdd|UTC}}>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTAI64N
specifier|public
name|void
name|testTAI64N
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|DateTime
argument_list|>
name|function
init|=
name|DateFormat
operator|.
name|Tai64n
operator|.
name|getFunction
argument_list|(
literal|null
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DateIndexNameProcessor
name|dateProcessor
init|=
operator|new
name|DateIndexNameProcessor
argument_list|(
literal|"_tag"
argument_list|,
literal|"_field"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|function
argument_list|)
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
literal|"events-"
argument_list|,
literal|"m"
argument_list|,
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|IngestDocument
name|document
init|=
operator|new
name|IngestDocument
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"_field"
argument_list|,
operator|(
name|randomBoolean
argument_list|()
condition|?
literal|"@"
else|:
literal|""
operator|)
operator|+
literal|"4000000050d506482dbdf024"
argument_list|)
argument_list|)
decl_stmt|;
name|dateProcessor
operator|.
name|execute
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"_index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<events-{20121222||/m{yyyyMMdd|UTC}}>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnixMs
specifier|public
name|void
name|testUnixMs
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|DateTime
argument_list|>
name|function
init|=
name|DateFormat
operator|.
name|UnixMs
operator|.
name|getFunction
argument_list|(
literal|null
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DateIndexNameProcessor
name|dateProcessor
init|=
operator|new
name|DateIndexNameProcessor
argument_list|(
literal|"_tag"
argument_list|,
literal|"_field"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|function
argument_list|)
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
literal|"events-"
argument_list|,
literal|"m"
argument_list|,
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|IngestDocument
name|document
init|=
operator|new
name|IngestDocument
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"_field"
argument_list|,
literal|"1000500"
argument_list|)
argument_list|)
decl_stmt|;
name|dateProcessor
operator|.
name|execute
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"_index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<events-{19700101||/m{yyyyMMdd|UTC}}>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnix
specifier|public
name|void
name|testUnix
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|DateTime
argument_list|>
name|function
init|=
name|DateFormat
operator|.
name|Unix
operator|.
name|getFunction
argument_list|(
literal|null
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DateIndexNameProcessor
name|dateProcessor
init|=
operator|new
name|DateIndexNameProcessor
argument_list|(
literal|"_tag"
argument_list|,
literal|"_field"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|function
argument_list|)
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
literal|"events-"
argument_list|,
literal|"m"
argument_list|,
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|IngestDocument
name|document
init|=
operator|new
name|IngestDocument
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"_field"
argument_list|,
literal|"1000.5"
argument_list|)
argument_list|)
decl_stmt|;
name|dateProcessor
operator|.
name|execute
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|document
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"_index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<events-{19700101||/m{yyyyMMdd|UTC}}>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

