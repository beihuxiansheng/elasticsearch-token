begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Written by Doug Lea with assistance from members of JCP JSR-166  * Expert Group and released to the public domain, as explained at  * http://creativecommons.org/publicdomain/zero/1.0/  */
end_comment

begin_package
DECL|package|jsr166y
package|package
name|jsr166y
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * A random number generator isolated to the current thread.  Like the  * global {@link java.util.Random} generator used by the {@link  * java.lang.Math} class, a {@code ThreadLocalRandom} is initialized  * with an internally generated seed that may not otherwise be  * modified. When applicable, use of {@code ThreadLocalRandom} rather  * than shared {@code Random} objects in concurrent programs will  * typically encounter much less overhead and contention.  Use of  * {@code ThreadLocalRandom} is particularly appropriate when multiple  * tasks (for example, each a {@link ForkJoinTask}) use random numbers  * in parallel in thread pools.  *  *<p>Usages of this class should typically be of the form:  * {@code ThreadLocalRandom.current().nextX(...)} (where  * {@code X} is {@code Int}, {@code Long}, etc).  * When all usages are of this form, it is never possible to  * accidently share a {@code ThreadLocalRandom} across multiple threads.  *  *<p>This class also provides additional commonly used bounded random  * generation methods.  *  * @since 1.7  * @author Doug Lea  */
end_comment

begin_class
DECL|class|ThreadLocalRandom
specifier|public
class|class
name|ThreadLocalRandom
extends|extends
name|Random
block|{
comment|// same constants as Random, but must be redeclared because private
DECL|field|multiplier
specifier|private
specifier|static
specifier|final
name|long
name|multiplier
init|=
literal|0x5DEECE66DL
decl_stmt|;
DECL|field|addend
specifier|private
specifier|static
specifier|final
name|long
name|addend
init|=
literal|0xBL
decl_stmt|;
DECL|field|mask
specifier|private
specifier|static
specifier|final
name|long
name|mask
init|=
operator|(
literal|1L
operator|<<
literal|48
operator|)
operator|-
literal|1
decl_stmt|;
comment|/**      * The random seed. We can't use super.seed.      */
DECL|field|rnd
specifier|private
name|long
name|rnd
decl_stmt|;
comment|/**      * Initialization flag to permit calls to setSeed to succeed only      * while executing the Random constructor.  We can't allow others      * since it would cause setting seed in one part of a program to      * unintentionally impact other usages by the thread.      */
DECL|field|initialized
name|boolean
name|initialized
decl_stmt|;
comment|// Padding to help avoid memory contention among seed updates in
comment|// different TLRs in the common case that they are located near
comment|// each other.
DECL|field|pad0
DECL|field|pad1
DECL|field|pad2
DECL|field|pad3
DECL|field|pad4
DECL|field|pad5
DECL|field|pad6
DECL|field|pad7
specifier|private
name|long
name|pad0
decl_stmt|,
name|pad1
decl_stmt|,
name|pad2
decl_stmt|,
name|pad3
decl_stmt|,
name|pad4
decl_stmt|,
name|pad5
decl_stmt|,
name|pad6
decl_stmt|,
name|pad7
decl_stmt|;
comment|/**      * The actual ThreadLocal      */
DECL|field|localRandom
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|ThreadLocalRandom
argument_list|>
name|localRandom
init|=
operator|new
name|ThreadLocal
argument_list|<
name|ThreadLocalRandom
argument_list|>
argument_list|()
block|{
specifier|protected
name|ThreadLocalRandom
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|ThreadLocalRandom
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Constructor called only by localRandom.initialValue.      */
DECL|method|ThreadLocalRandom
name|ThreadLocalRandom
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Returns the current thread's {@code ThreadLocalRandom}.      *      * @return the current thread's {@code ThreadLocalRandom}      */
DECL|method|current
specifier|public
specifier|static
name|ThreadLocalRandom
name|current
parameter_list|()
block|{
return|return
name|localRandom
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Throws {@code UnsupportedOperationException}.  Setting seeds in      * this generator is not supported.      *      * @throws UnsupportedOperationException always      */
DECL|method|setSeed
specifier|public
name|void
name|setSeed
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
if|if
condition|(
name|initialized
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
name|rnd
operator|=
operator|(
name|seed
operator|^
name|multiplier
operator|)
operator|&
name|mask
expr_stmt|;
block|}
DECL|method|next
specifier|protected
name|int
name|next
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
name|rnd
operator|=
operator|(
name|rnd
operator|*
name|multiplier
operator|+
name|addend
operator|)
operator|&
name|mask
expr_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|rnd
operator|>>>
operator|(
literal|48
operator|-
name|bits
operator|)
argument_list|)
return|;
block|}
comment|/**      * Returns a pseudorandom, uniformly distributed value between the      * given least value (inclusive) and bound (exclusive).      *      * @param least the least value returned      * @param bound the upper bound (exclusive)      * @throws IllegalArgumentException if least greater than or equal      * to bound      * @return the next value      */
DECL|method|nextInt
specifier|public
name|int
name|nextInt
parameter_list|(
name|int
name|least
parameter_list|,
name|int
name|bound
parameter_list|)
block|{
if|if
condition|(
name|least
operator|>=
name|bound
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
return|return
name|nextInt
argument_list|(
name|bound
operator|-
name|least
argument_list|)
operator|+
name|least
return|;
block|}
comment|/**      * Returns a pseudorandom, uniformly distributed value      * between 0 (inclusive) and the specified value (exclusive).      *      * @param n the bound on the random number to be returned.  Must be      *        positive.      * @return the next value      * @throws IllegalArgumentException if n is not positive      */
DECL|method|nextLong
specifier|public
name|long
name|nextLong
parameter_list|(
name|long
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"n must be positive"
argument_list|)
throw|;
comment|// Divide n by two until small enough for nextInt. On each
comment|// iteration (at most 31 of them but usually much less),
comment|// randomly choose both whether to include high bit in result
comment|// (offset) and whether to continue with the lower vs upper
comment|// half (which makes a difference only if odd).
name|long
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|>=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|int
name|bits
init|=
name|next
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|long
name|half
init|=
name|n
operator|>>>
literal|1
decl_stmt|;
name|long
name|nextn
init|=
operator|(
operator|(
name|bits
operator|&
literal|2
operator|)
operator|==
literal|0
operator|)
condition|?
name|half
else|:
name|n
operator|-
name|half
decl_stmt|;
if|if
condition|(
operator|(
name|bits
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
name|offset
operator|+=
name|n
operator|-
name|nextn
expr_stmt|;
name|n
operator|=
name|nextn
expr_stmt|;
block|}
return|return
name|offset
operator|+
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|n
argument_list|)
return|;
block|}
comment|/**      * Returns a pseudorandom, uniformly distributed value between the      * given least value (inclusive) and bound (exclusive).      *      * @param least the least value returned      * @param bound the upper bound (exclusive)      * @return the next value      * @throws IllegalArgumentException if least greater than or equal      * to bound      */
DECL|method|nextLong
specifier|public
name|long
name|nextLong
parameter_list|(
name|long
name|least
parameter_list|,
name|long
name|bound
parameter_list|)
block|{
if|if
condition|(
name|least
operator|>=
name|bound
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
return|return
name|nextLong
argument_list|(
name|bound
operator|-
name|least
argument_list|)
operator|+
name|least
return|;
block|}
comment|/**      * Returns a pseudorandom, uniformly distributed {@code double} value      * between 0 (inclusive) and the specified value (exclusive).      *      * @param n the bound on the random number to be returned.  Must be      *        positive.      * @return the next value      * @throws IllegalArgumentException if n is not positive      */
DECL|method|nextDouble
specifier|public
name|double
name|nextDouble
parameter_list|(
name|double
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"n must be positive"
argument_list|)
throw|;
return|return
name|nextDouble
argument_list|()
operator|*
name|n
return|;
block|}
comment|/**      * Returns a pseudorandom, uniformly distributed value between the      * given least value (inclusive) and bound (exclusive).      *      * @param least the least value returned      * @param bound the upper bound (exclusive)      * @return the next value      * @throws IllegalArgumentException if least greater than or equal      * to bound      */
DECL|method|nextDouble
specifier|public
name|double
name|nextDouble
parameter_list|(
name|double
name|least
parameter_list|,
name|double
name|bound
parameter_list|)
block|{
if|if
condition|(
name|least
operator|>=
name|bound
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
return|return
name|nextDouble
argument_list|()
operator|*
operator|(
name|bound
operator|-
name|least
operator|)
operator|+
name|least
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5851777807851030925L
decl_stmt|;
block|}
end_class

end_unit

