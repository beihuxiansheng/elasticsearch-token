begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Written by Doug Lea and Martin Buchholz with assistance from  * members of JCP JSR-166 Expert Group and released to the public  * domain, as explained at  * http://creativecommons.org/publicdomain/zero/1.0/  */
end_comment

begin_package
DECL|package|jsr166e.extra
package|package
name|jsr166e
operator|.
name|extra
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|doubleToRawLongBits
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|longBitsToDouble
import|;
end_import

begin_comment
comment|/**  * A {@code double} value that may be updated atomically.  See the  * {@link java.util.concurrent.atomic} package specification for  * description of the properties of atomic variables.  An {@code  * AtomicDouble} is used in applications such as atomic accumulation,  * and cannot be used as a replacement for a {@link Double}.  However,  * this class does extend {@code Number} to allow uniform access by  * tools and utilities that deal with numerically-based classes.  *  *<p id="bitEquals">This class compares primitive {@code double}  * values in methods such as {@link #compareAndSet} by comparing their  * bitwise representation using {@link Double#doubleToRawLongBits},  * which differs from both the primitive double {@code ==} operator  * and from {@link Double#equals}, as if implemented by:  *<pre> {@code  * static boolean bitEquals(double x, double y) {  *   long xBits = Double.doubleToRawLongBits(x);  *   long yBits = Double.doubleToRawLongBits(y);  *   return xBits == yBits;  * }}</pre>  *  * @see jsr166e.DoubleAdder  * @see jsr166e.DoubleMaxUpdater  *  * @author Doug Lea  * @author Martin Buchholz  */
end_comment

begin_class
DECL|class|AtomicDouble
specifier|public
class|class
name|AtomicDouble
extends|extends
name|Number
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|8405198993435143622L
decl_stmt|;
DECL|field|value
specifier|private
specifier|transient
specifier|volatile
name|long
name|value
decl_stmt|;
comment|/**      * Creates a new {@code AtomicDouble} with the given initial value.      *      * @param initialValue the initial value      */
DECL|method|AtomicDouble
specifier|public
name|AtomicDouble
parameter_list|(
name|double
name|initialValue
parameter_list|)
block|{
name|value
operator|=
name|doubleToRawLongBits
argument_list|(
name|initialValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new {@code AtomicDouble} with initial value {@code 0.0}.      */
DECL|method|AtomicDouble
specifier|public
name|AtomicDouble
parameter_list|()
block|{
comment|// assert doubleToRawLongBits(0.0) == 0L;
block|}
comment|/**      * Gets the current value.      *      * @return the current value      */
DECL|method|get
specifier|public
specifier|final
name|double
name|get
parameter_list|()
block|{
return|return
name|longBitsToDouble
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Sets to the given value.      *      * @param newValue the new value      */
DECL|method|set
specifier|public
specifier|final
name|void
name|set
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
name|value
operator|=
name|next
expr_stmt|;
block|}
comment|/**      * Eventually sets to the given value.      *      * @param newValue the new value      */
DECL|method|lazySet
specifier|public
specifier|final
name|void
name|lazySet
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
name|unsafe
operator|.
name|putOrderedLong
argument_list|(
name|this
argument_list|,
name|valueOffset
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * Atomically sets to the given value and returns the old value.      *      * @param newValue the new value      * @return the previous value      */
DECL|method|getAndSet
specifier|public
specifier|final
name|double
name|getAndSet
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|current
init|=
name|value
decl_stmt|;
if|if
condition|(
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
name|this
argument_list|,
name|valueOffset
argument_list|,
name|current
argument_list|,
name|next
argument_list|)
condition|)
return|return
name|longBitsToDouble
argument_list|(
name|current
argument_list|)
return|;
block|}
block|}
comment|/**      * Atomically sets the value to the given updated value      * if the current value is<a href="#bitEquals">bitwise equal</a>      * to the expected value.      *      * @param expect the expected value      * @param update the new value      * @return {@code true} if successful. False return indicates that      * the actual value was not bitwise equal to the expected value.      */
DECL|method|compareAndSet
specifier|public
specifier|final
name|boolean
name|compareAndSet
parameter_list|(
name|double
name|expect
parameter_list|,
name|double
name|update
parameter_list|)
block|{
return|return
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
name|this
argument_list|,
name|valueOffset
argument_list|,
name|doubleToRawLongBits
argument_list|(
name|expect
argument_list|)
argument_list|,
name|doubleToRawLongBits
argument_list|(
name|update
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Atomically sets the value to the given updated value      * if the current value is<a href="#bitEquals">bitwise equal</a>      * to the expected value.      *      *<p><a      * href="http://download.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html#Spurious">      * May fail spuriously and does not provide ordering guarantees</a>,      * so is only rarely an appropriate alternative to {@code compareAndSet}.      *      * @param expect the expected value      * @param update the new value      * @return {@code true} if successful      */
DECL|method|weakCompareAndSet
specifier|public
specifier|final
name|boolean
name|weakCompareAndSet
parameter_list|(
name|double
name|expect
parameter_list|,
name|double
name|update
parameter_list|)
block|{
return|return
name|compareAndSet
argument_list|(
name|expect
argument_list|,
name|update
argument_list|)
return|;
block|}
comment|/**      * Atomically adds the given value to the current value.      *      * @param delta the value to add      * @return the previous value      */
DECL|method|getAndAdd
specifier|public
specifier|final
name|double
name|getAndAdd
parameter_list|(
name|double
name|delta
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|current
init|=
name|value
decl_stmt|;
name|double
name|currentVal
init|=
name|longBitsToDouble
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|double
name|nextVal
init|=
name|currentVal
operator|+
name|delta
decl_stmt|;
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|nextVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
name|this
argument_list|,
name|valueOffset
argument_list|,
name|current
argument_list|,
name|next
argument_list|)
condition|)
return|return
name|currentVal
return|;
block|}
block|}
comment|/**      * Atomically adds the given value to the current value.      *      * @param delta the value to add      * @return the updated value      */
DECL|method|addAndGet
specifier|public
specifier|final
name|double
name|addAndGet
parameter_list|(
name|double
name|delta
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|current
init|=
name|value
decl_stmt|;
name|double
name|currentVal
init|=
name|longBitsToDouble
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|double
name|nextVal
init|=
name|currentVal
operator|+
name|delta
decl_stmt|;
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|nextVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
name|this
argument_list|,
name|valueOffset
argument_list|,
name|current
argument_list|,
name|next
argument_list|)
condition|)
return|return
name|nextVal
return|;
block|}
block|}
comment|/**      * Returns the String representation of the current value.      * @return the String representation of the current value      */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Double
operator|.
name|toString
argument_list|(
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the value of this {@code AtomicDouble} as an {@code int}      * after a narrowing primitive conversion.      */
DECL|method|intValue
specifier|public
name|int
name|intValue
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|get
argument_list|()
return|;
block|}
comment|/**      * Returns the value of this {@code AtomicDouble} as a {@code long}      * after a narrowing primitive conversion.      */
DECL|method|longValue
specifier|public
name|long
name|longValue
parameter_list|()
block|{
return|return
operator|(
name|long
operator|)
name|get
argument_list|()
return|;
block|}
comment|/**      * Returns the value of this {@code AtomicDouble} as a {@code float}      * after a narrowing primitive conversion.      */
DECL|method|floatValue
specifier|public
name|float
name|floatValue
parameter_list|()
block|{
return|return
operator|(
name|float
operator|)
name|get
argument_list|()
return|;
block|}
comment|/**      * Returns the value of this {@code AtomicDouble} as a {@code double}.      */
DECL|method|doubleValue
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
return|return
name|get
argument_list|()
return|;
block|}
comment|/**      * Saves the state to a stream (that is, serializes it).      *      * @param s the stream      * @throws java.io.IOException if an I/O error occurs      * @serialData The current value is emitted (a {@code double}).      */
DECL|method|writeObject
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|s
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|s
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|s
operator|.
name|writeDouble
argument_list|(
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reconstitutes the instance from a stream (that is, deserializes it).      * @param s the stream      * @throws ClassNotFoundException if the class of a serialized object      *         could not be found      * @throws java.io.IOException if an I/O error occurs      */
DECL|method|readObject
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|s
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|s
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|set
argument_list|(
name|s
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Unsafe mechanics
DECL|field|unsafe
specifier|private
specifier|static
specifier|final
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|unsafe
init|=
name|getUnsafe
argument_list|()
decl_stmt|;
DECL|field|valueOffset
specifier|private
specifier|static
specifier|final
name|long
name|valueOffset
decl_stmt|;
static|static
block|{
try|try
block|{
name|valueOffset
operator|=
name|unsafe
operator|.
name|objectFieldOffset
argument_list|(
name|AtomicDouble
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a sun.misc.Unsafe.  Suitable for use in a 3rd party package.      * Replace with a simple call to Unsafe.getUnsafe when integrating      * into a jdk.      *      * @return a sun.misc.Unsafe      */
DECL|method|getUnsafe
specifier|private
specifier|static
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|getUnsafe
parameter_list|()
block|{
try|try
block|{
return|return
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|.
name|getUnsafe
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|tryReflectionInstead
parameter_list|)
block|{}
try|try
block|{
return|return
name|java
operator|.
name|security
operator|.
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
argument_list|<
name|sun
operator|.
name|misc
operator|.
name|Unsafe
argument_list|>
argument_list|()
block|{
specifier|public
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|sun
operator|.
name|misc
operator|.
name|Unsafe
argument_list|>
name|k
init|=
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|.
name|class
decl_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|f
range|:
name|k
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|x
init|=
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|isInstance
argument_list|(
name|x
argument_list|)
condition|)
return|return
name|k
operator|.
name|cast
argument_list|(
name|x
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NoSuchFieldError
argument_list|(
literal|"the Unsafe"
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not initialize intrinsics"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

