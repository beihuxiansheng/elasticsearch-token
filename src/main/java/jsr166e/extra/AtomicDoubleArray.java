begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Written by Doug Lea with assistance from members of JCP JSR-166  * Expert Group and released to the public domain, as explained at  * http://creativecommons.org/publicdomain/zero/1.0/  */
end_comment

begin_package
DECL|package|jsr166e.extra
package|package
name|jsr166e
operator|.
name|extra
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|doubleToRawLongBits
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|longBitsToDouble
import|;
end_import

begin_comment
comment|/**  * A {@code double} array in which elements may be updated atomically.  * See the {@link java.util.concurrent.atomic} package specification  * for description of the properties of atomic variables.  *  *<p id="bitEquals">This class compares primitive {@code double}  * values in methods such as {@link #compareAndSet} by comparing their  * bitwise representation using {@link Double#doubleToRawLongBits},  * which differs from both the primitive double {@code ==} operator  * and from {@link Double#equals}, as if implemented by:  *<pre> {@code  * static boolean bitEquals(double x, double y) {  *   long xBits = Double.doubleToRawLongBits(x);  *   long yBits = Double.doubleToRawLongBits(y);  *   return xBits == yBits;  * }}</pre>  *  * @author Doug Lea  * @author Martin Buchholz  */
end_comment

begin_class
DECL|class|AtomicDoubleArray
specifier|public
class|class
name|AtomicDoubleArray
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2308431214976778248L
decl_stmt|;
DECL|field|array
specifier|private
specifier|final
specifier|transient
name|long
index|[]
name|array
decl_stmt|;
DECL|method|checkedByteOffset
specifier|private
name|long
name|checkedByteOffset
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|array
operator|.
name|length
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"index "
operator|+
name|i
argument_list|)
throw|;
return|return
name|byteOffset
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|byteOffset
specifier|private
specifier|static
name|long
name|byteOffset
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
operator|(
name|long
operator|)
name|i
operator|<<
name|shift
operator|)
operator|+
name|base
return|;
block|}
comment|/**      * Creates a new {@code AtomicDoubleArray} of the given length,      * with all elements initially zero.      *      * @param length the length of the array      */
DECL|method|AtomicDoubleArray
specifier|public
name|AtomicDoubleArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|array
operator|=
operator|new
name|long
index|[
name|length
index|]
expr_stmt|;
block|}
comment|/**      * Creates a new {@code AtomicDoubleArray} with the same length      * as, and all elements copied from, the given array.      *      * @param array the array to copy elements from      * @throws NullPointerException if array is null      */
DECL|method|AtomicDoubleArray
specifier|public
name|AtomicDoubleArray
parameter_list|(
name|double
index|[]
name|array
parameter_list|)
block|{
comment|// Visibility guaranteed by final field guarantees
specifier|final
name|int
name|len
init|=
name|array
operator|.
name|length
decl_stmt|;
specifier|final
name|long
index|[]
name|a
init|=
operator|new
name|long
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
name|a
index|[
name|i
index|]
operator|=
name|doubleToRawLongBits
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|=
name|a
expr_stmt|;
block|}
comment|/**      * Returns the length of the array.      *      * @return the length of the array      */
DECL|method|length
specifier|public
specifier|final
name|int
name|length
parameter_list|()
block|{
return|return
name|array
operator|.
name|length
return|;
block|}
comment|/**      * Gets the current value at position {@code i}.      *      * @param i the index      * @return the current value      */
DECL|method|get
specifier|public
specifier|final
name|double
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|longBitsToDouble
argument_list|(
name|getRaw
argument_list|(
name|checkedByteOffset
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getRaw
specifier|private
name|long
name|getRaw
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
return|return
name|unsafe
operator|.
name|getLongVolatile
argument_list|(
name|array
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/**      * Sets the element at position {@code i} to the given value.      *      * @param i the index      * @param newValue the new value      */
DECL|method|set
specifier|public
specifier|final
name|void
name|set
parameter_list|(
name|int
name|i
parameter_list|,
name|double
name|newValue
parameter_list|)
block|{
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
name|unsafe
operator|.
name|putLongVolatile
argument_list|(
name|array
argument_list|,
name|checkedByteOffset
argument_list|(
name|i
argument_list|)
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * Eventually sets the element at position {@code i} to the given value.      *      * @param i the index      * @param newValue the new value      */
DECL|method|lazySet
specifier|public
specifier|final
name|void
name|lazySet
parameter_list|(
name|int
name|i
parameter_list|,
name|double
name|newValue
parameter_list|)
block|{
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
name|unsafe
operator|.
name|putOrderedLong
argument_list|(
name|array
argument_list|,
name|checkedByteOffset
argument_list|(
name|i
argument_list|)
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * Atomically sets the element at position {@code i} to the given value      * and returns the old value.      *      * @param i the index      * @param newValue the new value      * @return the previous value      */
DECL|method|getAndSet
specifier|public
specifier|final
name|double
name|getAndSet
parameter_list|(
name|int
name|i
parameter_list|,
name|double
name|newValue
parameter_list|)
block|{
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
name|long
name|offset
init|=
name|checkedByteOffset
argument_list|(
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|current
init|=
name|getRaw
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareAndSetRaw
argument_list|(
name|offset
argument_list|,
name|current
argument_list|,
name|next
argument_list|)
condition|)
return|return
name|longBitsToDouble
argument_list|(
name|current
argument_list|)
return|;
block|}
block|}
comment|/**      * Atomically sets the element at position {@code i} to the given      * updated value      * if the current value is<a href="#bitEquals">bitwise equal</a>      * to the expected value.      *      * @param i the index      * @param expect the expected value      * @param update the new value      * @return true if successful. False return indicates that      * the actual value was not equal to the expected value.      */
DECL|method|compareAndSet
specifier|public
specifier|final
name|boolean
name|compareAndSet
parameter_list|(
name|int
name|i
parameter_list|,
name|double
name|expect
parameter_list|,
name|double
name|update
parameter_list|)
block|{
return|return
name|compareAndSetRaw
argument_list|(
name|checkedByteOffset
argument_list|(
name|i
argument_list|)
argument_list|,
name|doubleToRawLongBits
argument_list|(
name|expect
argument_list|)
argument_list|,
name|doubleToRawLongBits
argument_list|(
name|update
argument_list|)
argument_list|)
return|;
block|}
DECL|method|compareAndSetRaw
specifier|private
name|boolean
name|compareAndSetRaw
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|expect
parameter_list|,
name|long
name|update
parameter_list|)
block|{
return|return
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|expect
argument_list|,
name|update
argument_list|)
return|;
block|}
comment|/**      * Atomically sets the element at position {@code i} to the given      * updated value      * if the current value is<a href="#bitEquals">bitwise equal</a>      * to the expected value.      *      *<p><a      * href="http://download.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html#Spurious">      * May fail spuriously and does not provide ordering guarantees</a>,      * so is only rarely an appropriate alternative to {@code compareAndSet}.      *      * @param i the index      * @param expect the expected value      * @param update the new value      * @return true if successful      */
DECL|method|weakCompareAndSet
specifier|public
specifier|final
name|boolean
name|weakCompareAndSet
parameter_list|(
name|int
name|i
parameter_list|,
name|double
name|expect
parameter_list|,
name|double
name|update
parameter_list|)
block|{
return|return
name|compareAndSet
argument_list|(
name|i
argument_list|,
name|expect
argument_list|,
name|update
argument_list|)
return|;
block|}
comment|/**      * Atomically adds the given value to the element at index {@code i}.      *      * @param i the index      * @param delta the value to add      * @return the previous value      */
DECL|method|getAndAdd
specifier|public
specifier|final
name|double
name|getAndAdd
parameter_list|(
name|int
name|i
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|long
name|offset
init|=
name|checkedByteOffset
argument_list|(
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|current
init|=
name|getRaw
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|double
name|currentVal
init|=
name|longBitsToDouble
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|double
name|nextVal
init|=
name|currentVal
operator|+
name|delta
decl_stmt|;
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|nextVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareAndSetRaw
argument_list|(
name|offset
argument_list|,
name|current
argument_list|,
name|next
argument_list|)
condition|)
return|return
name|currentVal
return|;
block|}
block|}
comment|/**      * Atomically adds the given value to the element at index {@code i}.      *      * @param i the index      * @param delta the value to add      * @return the updated value      */
DECL|method|addAndGet
specifier|public
name|double
name|addAndGet
parameter_list|(
name|int
name|i
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|long
name|offset
init|=
name|checkedByteOffset
argument_list|(
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|current
init|=
name|getRaw
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|double
name|currentVal
init|=
name|longBitsToDouble
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|double
name|nextVal
init|=
name|currentVal
operator|+
name|delta
decl_stmt|;
name|long
name|next
init|=
name|doubleToRawLongBits
argument_list|(
name|nextVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareAndSetRaw
argument_list|(
name|offset
argument_list|,
name|current
argument_list|,
name|next
argument_list|)
condition|)
return|return
name|nextVal
return|;
block|}
block|}
comment|/**      * Returns the String representation of the current values of array.      * @return the String representation of the current values of array      */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|int
name|iMax
init|=
name|array
operator|.
name|length
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|iMax
operator|==
operator|-
literal|1
condition|)
return|return
literal|"[]"
return|;
comment|// Double.toString(Math.PI).length() == 17
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
operator|(
literal|17
operator|+
literal|2
operator|)
operator|*
operator|(
name|iMax
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|longBitsToDouble
argument_list|(
name|getRaw
argument_list|(
name|byteOffset
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|iMax
condition|)
return|return
name|b
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
name|b
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Saves the state to a stream (that is, serializes it).      *      * @param s the stream      * @throws java.io.IOException if an I/O error occurs      * @serialData The length of the array is emitted (int), followed by all      *             of its elements (each a {@code double}) in the proper order.      */
DECL|method|writeObject
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|s
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|s
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
comment|// Write out array length
name|int
name|length
init|=
name|length
argument_list|()
decl_stmt|;
name|s
operator|.
name|writeInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
comment|// Write out all elements in the proper order.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|s
operator|.
name|writeDouble
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reconstitutes the instance from a stream (that is, deserializes it).      * @param s the stream      * @throws ClassNotFoundException if the class of a serialized object      *         could not be found      * @throws java.io.IOException if an I/O error occurs      */
DECL|method|readObject
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|s
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|s
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
comment|// Read in array length and allocate array
name|int
name|length
init|=
name|s
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|unsafe
operator|.
name|putObjectVolatile
argument_list|(
name|this
argument_list|,
name|arrayOffset
argument_list|,
operator|new
name|long
index|[
name|length
index|]
argument_list|)
expr_stmt|;
comment|// Read in all elements in the proper order.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|set
argument_list|(
name|i
argument_list|,
name|s
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Unsafe mechanics
DECL|field|unsafe
specifier|private
specifier|static
specifier|final
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|unsafe
init|=
name|getUnsafe
argument_list|()
decl_stmt|;
DECL|field|arrayOffset
specifier|private
specifier|static
specifier|final
name|long
name|arrayOffset
decl_stmt|;
DECL|field|base
specifier|private
specifier|static
specifier|final
name|int
name|base
init|=
name|unsafe
operator|.
name|arrayBaseOffset
argument_list|(
name|long
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
DECL|field|shift
specifier|private
specifier|static
specifier|final
name|int
name|shift
decl_stmt|;
static|static
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|k
init|=
name|AtomicDoubleArray
operator|.
name|class
decl_stmt|;
name|arrayOffset
operator|=
name|unsafe
operator|.
name|objectFieldOffset
argument_list|(
name|k
operator|.
name|getDeclaredField
argument_list|(
literal|"array"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|scale
init|=
name|unsafe
operator|.
name|arrayIndexScale
argument_list|(
name|long
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|scale
operator|&
operator|(
name|scale
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"data type scale not a power of two"
argument_list|)
throw|;
name|shift
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a sun.misc.Unsafe.  Suitable for use in a 3rd party package.      * Replace with a simple call to Unsafe.getUnsafe when integrating      * into a jdk.      *      * @return a sun.misc.Unsafe      */
DECL|method|getUnsafe
specifier|private
specifier|static
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|getUnsafe
parameter_list|()
block|{
try|try
block|{
return|return
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|.
name|getUnsafe
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|tryReflectionInstead
parameter_list|)
block|{}
try|try
block|{
return|return
name|java
operator|.
name|security
operator|.
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
argument_list|<
name|sun
operator|.
name|misc
operator|.
name|Unsafe
argument_list|>
argument_list|()
block|{
specifier|public
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|sun
operator|.
name|misc
operator|.
name|Unsafe
argument_list|>
name|k
init|=
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|.
name|class
decl_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|f
range|:
name|k
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|x
init|=
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|isInstance
argument_list|(
name|x
argument_list|)
condition|)
return|return
name|k
operator|.
name|cast
argument_list|(
name|x
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NoSuchFieldError
argument_list|(
literal|"the Unsafe"
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not initialize intrinsics"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

