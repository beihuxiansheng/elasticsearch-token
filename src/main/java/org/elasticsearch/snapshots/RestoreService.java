begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.snapshots
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntOpenHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RestoreMetaData
operator|.
name|ShardRestoreStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataIndexStateService
operator|.
name|INDEX_CLOSED_BLOCK
import|;
end_import

begin_comment
comment|/**  * Service responsible for restoring snapshots  *<p/>  * Restore operation is performed in several stages.  *<p/>  * First {@link #restoreSnapshot(RestoreRequest, RestoreSnapshotListener)}  * method reads information about snapshot and metadata from repository. In update cluster state task it checks restore  * preconditions, restores global state if needed, creates {@link RestoreMetaData} record with list of shards that needs  * to be restored and adds this shard to the routing table using {@link RoutingTable.Builder#addAsRestore(IndexMetaData, RestoreSource)}  * method.  *<p/>  * Individual shards are getting restored as part of normal recovery process in  * {@link org.elasticsearch.index.gateway.IndexShardGatewayService#recover(boolean, org.elasticsearch.index.gateway.IndexShardGatewayService.RecoveryListener)}  * method, which detects that shard should be restored from snapshot rather than recovered from gateway by looking  * at the {@link org.elasticsearch.cluster.routing.ShardRouting#restoreSource()} property. If this property is not null  * {@code recover} method uses {@link org.elasticsearch.index.snapshots.IndexShardSnapshotAndRestoreService#restore(org.elasticsearch.indices.recovery.RecoveryState)}  * method to start shard restore process.  *<p/>  * At the end of the successful restore process {@code IndexShardSnapshotAndRestoreService} calls {@link #indexShardRestoreCompleted(SnapshotId, ShardId)},  * which updates {@link RestoreMetaData} in cluster state or removes it when all shards are completed. In case of  * restore failure a normal recovery fail-over process kicks in.  */
end_comment

begin_class
DECL|class|RestoreService
specifier|public
class|class
name|RestoreService
extends|extends
name|AbstractComponent
implements|implements
name|ClusterStateListener
block|{
DECL|field|UPDATE_RESTORE_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_RESTORE_ACTION_NAME
init|=
literal|"internal:cluster/snapshot/update_restore"
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|repositoriesService
specifier|private
specifier|final
name|RepositoriesService
name|repositoriesService
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
DECL|field|createIndexService
specifier|private
specifier|final
name|MetaDataCreateIndexService
name|createIndexService
decl_stmt|;
DECL|field|listeners
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|RestoreCompletionListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|RestoreService
specifier|public
name|RestoreService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|RepositoriesService
name|repositoriesService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|AllocationService
name|allocationService
parameter_list|,
name|MetaDataCreateIndexService
name|createIndexService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|repositoriesService
operator|=
name|repositoriesService
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
name|this
operator|.
name|createIndexService
operator|=
name|createIndexService
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|UPDATE_RESTORE_ACTION_NAME
argument_list|,
operator|new
name|UpdateRestoreStateRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Restores snapshot specified in the restore request.      *      * @param request  restore request      * @param listener restore listener      */
DECL|method|restoreSnapshot
specifier|public
name|void
name|restoreSnapshot
parameter_list|(
specifier|final
name|RestoreRequest
name|request
parameter_list|,
specifier|final
name|RestoreSnapshotListener
name|listener
parameter_list|)
block|{
try|try
block|{
comment|// Read snapshot info and metadata from the repository
name|Repository
name|repository
init|=
name|repositoriesService
operator|.
name|repository
argument_list|(
name|request
operator|.
name|repository
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SnapshotId
name|snapshotId
init|=
operator|new
name|SnapshotId
argument_list|(
name|request
operator|.
name|repository
argument_list|()
argument_list|,
name|request
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Snapshot
name|snapshot
init|=
name|repository
operator|.
name|readSnapshot
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|filteredIndices
init|=
name|SnapshotUtils
operator|.
name|filterIndices
argument_list|(
name|snapshot
operator|.
name|indices
argument_list|()
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MetaData
name|metaData
init|=
name|repository
operator|.
name|readSnapshotMetaData
argument_list|(
name|snapshotId
argument_list|,
name|filteredIndices
argument_list|)
decl_stmt|;
comment|// Make sure that we can restore from this snapshot
name|validateSnapshotRestorable
argument_list|(
name|snapshotId
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
comment|// Find list of indices that we need to restore
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedIndices
init|=
name|renamedIndices
argument_list|(
name|request
argument_list|,
name|filteredIndices
argument_list|)
decl_stmt|;
comment|// Now we can start the actual restore process by adding shards to be recovered in the cluster state
comment|// and updating cluster metadata (global and index) as needed
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
name|request
operator|.
name|cause
argument_list|()
argument_list|,
operator|new
name|TimeoutClusterStateUpdateTask
argument_list|()
block|{
name|RestoreInfo
name|restoreInfo
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
comment|// Check if another restore process is already running - cannot run two restore processes at the
comment|// same time
name|RestoreMetaData
name|restoreMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|RestoreMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|restoreMetaData
operator|!=
literal|null
operator|&&
operator|!
name|restoreMetaData
operator|.
name|entries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConcurrentSnapshotExecutionException
argument_list|(
name|snapshotId
argument_list|,
literal|"Restore process is already running in this cluster"
argument_list|)
throw|;
block|}
comment|// Updating cluster state
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|blocks
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|rtBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|routingTable
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|ShardId
argument_list|,
name|RestoreMetaData
operator|.
name|ShardRestoreStatus
argument_list|>
name|shards
decl_stmt|;
if|if
condition|(
operator|!
name|renamedIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We have some indices to restore
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|RestoreMetaData
operator|.
name|ShardRestoreStatus
argument_list|>
name|shardsBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|indexEntry
range|:
name|renamedIndices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|index
init|=
name|indexEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|partial
init|=
name|checkPartial
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|RestoreSource
name|restoreSource
init|=
operator|new
name|RestoreSource
argument_list|(
name|snapshotId
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|renamedIndex
init|=
name|indexEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|IndexMetaData
name|snapshotIndexMetaData
init|=
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|// Check that the index is closed or doesn't exist
name|IndexMetaData
name|currentIndexMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|renamedIndex
argument_list|)
decl_stmt|;
name|IntSet
name|ignoreShards
init|=
operator|new
name|IntOpenHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentIndexMetaData
operator|==
literal|null
condition|)
block|{
comment|// Index doesn't exist - create it and start recovery
comment|// Make sure that the index we are about to create has a validate name
name|createIndexService
operator|.
name|validateIndexName
argument_list|(
name|renamedIndex
argument_list|,
name|currentState
argument_list|)
expr_stmt|;
name|IndexMetaData
operator|.
name|Builder
name|indexMdBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|snapshotIndexMetaData
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|index
argument_list|(
name|renamedIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|includeAliases
argument_list|()
operator|&&
operator|!
name|snapshotIndexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Remove all aliases - they shouldn't be restored
name|indexMdBuilder
operator|.
name|removeAllAliases
argument_list|()
expr_stmt|;
block|}
name|IndexMetaData
name|updatedIndexMetaData
init|=
name|indexMdBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|partial
condition|)
block|{
name|populateIgnoredShards
argument_list|(
name|index
argument_list|,
name|ignoreShards
argument_list|)
expr_stmt|;
block|}
name|rtBuilder
operator|.
name|addAsNewRestore
argument_list|(
name|updatedIndexMetaData
argument_list|,
name|restoreSource
argument_list|,
name|ignoreShards
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|put
argument_list|(
name|updatedIndexMetaData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|validateExistingIndex
argument_list|(
name|currentIndexMetaData
argument_list|,
name|snapshotIndexMetaData
argument_list|,
name|renamedIndex
argument_list|,
name|partial
argument_list|)
expr_stmt|;
comment|// Index exists and it's closed - open it in metadata and start recovery
name|IndexMetaData
operator|.
name|Builder
name|indexMdBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|snapshotIndexMetaData
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
decl_stmt|;
name|indexMdBuilder
operator|.
name|version
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|snapshotIndexMetaData
operator|.
name|version
argument_list|()
argument_list|,
name|currentIndexMetaData
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|includeAliases
argument_list|()
condition|)
block|{
comment|// Remove all snapshot aliases
if|if
condition|(
operator|!
name|snapshotIndexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexMdBuilder
operator|.
name|removeAllAliases
argument_list|()
expr_stmt|;
block|}
comment|/// Add existing aliases
for|for
control|(
name|ObjectCursor
argument_list|<
name|AliasMetaData
argument_list|>
name|alias
range|:
name|currentIndexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|indexMdBuilder
operator|.
name|putAlias
argument_list|(
name|alias
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexMetaData
name|updatedIndexMetaData
init|=
name|indexMdBuilder
operator|.
name|index
argument_list|(
name|renamedIndex
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|rtBuilder
operator|.
name|addAsRestore
argument_list|(
name|updatedIndexMetaData
argument_list|,
name|restoreSource
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|removeIndexBlock
argument_list|(
name|renamedIndex
argument_list|,
name|INDEX_CLOSED_BLOCK
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|put
argument_list|(
name|updatedIndexMetaData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|shard
init|=
literal|0
init|;
name|shard
operator|<
name|snapshotIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|shard
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|ignoreShards
operator|.
name|contains
argument_list|(
name|shard
argument_list|)
condition|)
block|{
name|shardsBuilder
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|renamedIndex
argument_list|,
name|shard
argument_list|)
argument_list|,
operator|new
name|RestoreMetaData
operator|.
name|ShardRestoreStatus
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardsBuilder
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|renamedIndex
argument_list|,
name|shard
argument_list|)
argument_list|,
operator|new
name|RestoreMetaData
operator|.
name|ShardRestoreStatus
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|,
name|RestoreMetaData
operator|.
name|State
operator|.
name|FAILURE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|shards
operator|=
name|shardsBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|RestoreMetaData
operator|.
name|Entry
name|restoreEntry
init|=
operator|new
name|RestoreMetaData
operator|.
name|Entry
argument_list|(
name|snapshotId
argument_list|,
name|RestoreMetaData
operator|.
name|State
operator|.
name|INIT
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|renamedIndices
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|shards
argument_list|)
decl_stmt|;
name|mdBuilder
operator|.
name|putCustom
argument_list|(
name|RestoreMetaData
operator|.
name|TYPE
argument_list|,
operator|new
name|RestoreMetaData
argument_list|(
name|restoreEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shards
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
comment|// Restore global state if needed
name|restoreGlobalStateIfRequested
argument_list|(
name|mdBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|completed
argument_list|(
name|shards
argument_list|)
condition|)
block|{
comment|// We don't have any indices to restore - we are done
name|restoreInfo
operator|=
operator|new
name|RestoreInfo
argument_list|(
name|request
operator|.
name|name
argument_list|()
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|copyOf
argument_list|(
name|renamedIndices
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|shards
operator|.
name|size
argument_list|()
argument_list|,
name|shards
operator|.
name|size
argument_list|()
operator|-
name|failedShards
argument_list|(
name|shards
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|updatedState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|blocks
argument_list|(
name|blocks
argument_list|)
operator|.
name|routingTable
argument_list|(
name|rtBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|routingResult
init|=
name|allocationService
operator|.
name|reroute
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|updatedState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|rtBuilder
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|updatedState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|routingResult
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|populateIgnoredShards
parameter_list|(
name|String
name|index
parameter_list|,
name|IntSet
name|ignoreShards
parameter_list|)
block|{
for|for
control|(
name|SnapshotShardFailure
name|failure
range|:
name|snapshot
operator|.
name|shardFailures
argument_list|()
control|)
block|{
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
name|failure
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|ignoreShards
operator|.
name|add
argument_list|(
name|failure
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|checkPartial
parameter_list|(
name|String
name|index
parameter_list|)
block|{
comment|// Make sure that index was fully snapshotted
if|if
condition|(
name|failed
argument_list|(
name|snapshot
argument_list|,
name|index
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|partial
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshotId
argument_list|,
literal|"index ["
operator|+
name|index
operator|+
literal|"] wasn't fully snapshotted - cannot restore"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|validateExistingIndex
parameter_list|(
name|IndexMetaData
name|currentIndexMetaData
parameter_list|,
name|IndexMetaData
name|snapshotIndexMetaData
parameter_list|,
name|String
name|renamedIndex
parameter_list|,
name|boolean
name|partial
parameter_list|)
block|{
comment|// Index exist - checking that it's closed
if|if
condition|(
name|currentIndexMetaData
operator|.
name|state
argument_list|()
operator|!=
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
comment|// TODO: Enable restore for open indices
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshotId
argument_list|,
literal|"cannot restore index ["
operator|+
name|renamedIndex
operator|+
literal|"] because it's open"
argument_list|)
throw|;
block|}
comment|// Index exist - checking if it's partial restore
if|if
condition|(
name|partial
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshotId
argument_list|,
literal|"cannot restore partial index ["
operator|+
name|renamedIndex
operator|+
literal|"] because such index already exists"
argument_list|)
throw|;
block|}
comment|// Make sure that the number of shards is the same. That's the only thing that we cannot change
if|if
condition|(
name|currentIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
operator|!=
name|snapshotIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshotId
argument_list|,
literal|"cannot restore index ["
operator|+
name|renamedIndex
operator|+
literal|"] with ["
operator|+
name|currentIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
operator|+
literal|"] shard from snapshot with ["
operator|+
name|snapshotIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
operator|+
literal|"] shards"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|restoreGlobalStateIfRequested
parameter_list|(
name|MetaData
operator|.
name|Builder
name|mdBuilder
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|includeGlobalState
argument_list|()
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mdBuilder
operator|.
name|persistentSettings
argument_list|(
name|metaData
operator|.
name|persistentSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaData
operator|.
name|templates
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: Should all existing templates be deleted first?
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|templates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|mdBuilder
operator|.
name|put
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metaData
operator|.
name|customs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MetaData
operator|.
name|Custom
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|customs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|RepositoriesMetaData
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
condition|)
block|{
comment|// Don't restore repositories while we are working with them
comment|// TODO: Should we restore them at the end?
name|mdBuilder
operator|.
name|putCustom
argument_list|(
name|cursor
operator|.
name|key
argument_list|,
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to restore snapshot"
argument_list|,
name|t
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|request
operator|.
name|masterNodeTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|restoreInfo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}][{}] failed to restore snapshot"
argument_list|,
name|e
argument_list|,
name|request
operator|.
name|repository
argument_list|()
argument_list|,
name|request
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method is used by {@link org.elasticsearch.index.snapshots.IndexShardSnapshotAndRestoreService} to notify      * {@code RestoreService} about shard restore completion.      *      * @param snapshotId snapshot id      * @param shardId    shard id      */
DECL|method|indexShardRestoreCompleted
specifier|public
name|void
name|indexShardRestoreCompleted
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] successfully restored shard  [{}]"
argument_list|,
name|snapshotId
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|UpdateIndexShardRestoreStatusRequest
name|request
init|=
operator|new
name|UpdateIndexShardRestoreStatusRequest
argument_list|(
name|snapshotId
argument_list|,
name|shardId
argument_list|,
operator|new
name|ShardRestoreStatus
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|,
name|RestoreMetaData
operator|.
name|State
operator|.
name|SUCCESS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|innerUpdateRestoreState
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|,
name|UPDATE_RESTORE_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Updates shard restore record in the cluster state.      *      * @param request update shard status request      */
DECL|method|innerUpdateRestoreState
specifier|private
name|void
name|innerUpdateRestoreState
parameter_list|(
specifier|final
name|UpdateIndexShardRestoreStatusRequest
name|request
parameter_list|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"update snapshot state"
argument_list|,
operator|new
name|ProcessedClusterStateUpdateTask
argument_list|()
block|{
specifier|private
name|RestoreInfo
name|restoreInfo
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|RestoreMetaData
name|restore
init|=
name|metaData
operator|.
name|custom
argument_list|(
name|RestoreMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|restore
operator|!=
literal|null
condition|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|ArrayList
argument_list|<
name|RestoreMetaData
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RestoreMetaData
operator|.
name|Entry
name|entry
range|:
name|restore
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|snapshotId
argument_list|()
argument_list|)
condition|)
block|{
name|HashMap
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shards
init|=
name|newHashMap
argument_list|(
name|entry
operator|.
name|shards
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] Updating shard [{}] with status [{}]"
argument_list|,
name|request
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|status
argument_list|()
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|completed
argument_list|(
name|shards
argument_list|)
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
operator|new
name|RestoreMetaData
operator|.
name|Entry
argument_list|(
name|entry
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|RestoreMetaData
operator|.
name|State
operator|.
name|STARTED
argument_list|,
name|entry
operator|.
name|indices
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|shards
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"restore [{}] is done"
argument_list|,
name|request
operator|.
name|snapshotId
argument_list|()
argument_list|)
expr_stmt|;
name|restoreInfo
operator|=
operator|new
name|RestoreInfo
argument_list|(
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|entry
operator|.
name|indices
argument_list|()
argument_list|,
name|shards
operator|.
name|size
argument_list|()
argument_list|,
name|shards
operator|.
name|size
argument_list|()
operator|-
name|failedShards
argument_list|(
name|shards
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|restore
operator|=
operator|new
name|RestoreMetaData
argument_list|(
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|RestoreMetaData
operator|.
name|Entry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|putCustom
argument_list|(
name|RestoreMetaData
operator|.
name|TYPE
argument_list|,
name|restore
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}][{}] failed to update snapshot status to [{}]"
argument_list|,
name|t
argument_list|,
name|request
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
if|if
condition|(
name|restoreInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestoreCompletionListener
name|listener
range|:
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|onRestoreCompletion
argument_list|(
name|request
operator|.
name|snapshotId
argument_list|,
name|restoreInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to update snapshot status for [{}]"
argument_list|,
name|e
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|completed
specifier|private
name|boolean
name|completed
parameter_list|(
name|Map
argument_list|<
name|ShardId
argument_list|,
name|RestoreMetaData
operator|.
name|ShardRestoreStatus
argument_list|>
name|shards
parameter_list|)
block|{
for|for
control|(
name|RestoreMetaData
operator|.
name|ShardRestoreStatus
name|status
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|status
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|failedShards
specifier|private
name|int
name|failedShards
parameter_list|(
name|Map
argument_list|<
name|ShardId
argument_list|,
name|RestoreMetaData
operator|.
name|ShardRestoreStatus
argument_list|>
name|shards
parameter_list|)
block|{
name|int
name|failedShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RestoreMetaData
operator|.
name|ShardRestoreStatus
name|status
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|status
operator|.
name|state
argument_list|()
operator|==
name|RestoreMetaData
operator|.
name|State
operator|.
name|FAILURE
condition|)
block|{
name|failedShards
operator|++
expr_stmt|;
block|}
block|}
return|return
name|failedShards
return|;
block|}
DECL|method|renamedIndices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedIndices
parameter_list|(
name|RestoreRequest
name|request
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|filteredIndices
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedIndices
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|filteredIndices
control|)
block|{
name|String
name|renamedIndex
init|=
name|index
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|renameReplacement
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|renamePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|renamedIndex
operator|=
name|index
operator|.
name|replaceAll
argument_list|(
name|request
operator|.
name|renamePattern
argument_list|()
argument_list|,
name|request
operator|.
name|renameReplacement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|previousIndex
init|=
name|renamedIndices
operator|.
name|put
argument_list|(
name|renamedIndex
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousIndex
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|request
operator|.
name|repository
argument_list|()
argument_list|,
name|request
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
literal|"indices ["
operator|+
name|index
operator|+
literal|"] and ["
operator|+
name|previousIndex
operator|+
literal|"] are renamed into the same index ["
operator|+
name|renamedIndex
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
return|return
name|renamedIndices
return|;
block|}
comment|/**      * Checks that snapshots can be restored and have compatible version      *      * @param snapshotId snapshot id      * @param snapshot   snapshot metadata      */
DECL|method|validateSnapshotRestorable
specifier|private
name|void
name|validateSnapshotRestorable
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
if|if
condition|(
operator|!
name|snapshot
operator|.
name|state
argument_list|()
operator|.
name|restorable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshotId
argument_list|,
literal|"unsupported snapshot state ["
operator|+
name|snapshot
operator|.
name|state
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Version
operator|.
name|CURRENT
operator|.
name|before
argument_list|(
name|snapshot
operator|.
name|version
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshotId
argument_list|,
literal|"the snapshot was created with Elasticsearch version ["
operator|+
name|snapshot
operator|.
name|version
argument_list|()
operator|+
literal|"] which is higher than the version of this node ["
operator|+
name|Version
operator|.
name|CURRENT
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Checks if any of the deleted indices are still recovering and fails recovery on the shards of these indices      *      * @param event cluster changed event      */
DECL|method|processDeletedIndices
specifier|private
name|void
name|processDeletedIndices
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|RestoreMetaData
name|restore
init|=
name|metaData
operator|.
name|custom
argument_list|(
name|RestoreMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|restore
operator|==
literal|null
condition|)
block|{
comment|// Not restoring - nothing to do
return|return;
block|}
if|if
condition|(
operator|!
name|event
operator|.
name|indicesDeleted
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Some indices were deleted, let's make sure all indices that we are restoring still exist
for|for
control|(
name|RestoreMetaData
operator|.
name|Entry
name|entry
range|:
name|restore
operator|.
name|entries
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ShardId
argument_list|>
name|shardsToFail
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ImmutableMap
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shard
range|:
name|entry
operator|.
name|shards
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|shard
operator|.
name|getKey
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|shardsToFail
operator|==
literal|null
condition|)
block|{
name|shardsToFail
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|shardsToFail
operator|.
name|add
argument_list|(
name|shard
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|shardsToFail
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ShardId
name|shardId
range|:
name|shardsToFail
control|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] failing running shard restore [{}]"
argument_list|,
name|entry
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|innerUpdateRestoreState
argument_list|(
operator|new
name|UpdateIndexShardRestoreStatusRequest
argument_list|(
name|entry
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|shardId
argument_list|,
operator|new
name|ShardRestoreStatus
argument_list|(
literal|null
argument_list|,
name|RestoreMetaData
operator|.
name|State
operator|.
name|FAILURE
argument_list|,
literal|"index was deleted"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Fails the given snapshot restore operation for the given shard      */
DECL|method|failRestore
specifier|public
name|void
name|failRestore
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] failed to restore shard  [{}]"
argument_list|,
name|snapshotId
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|UpdateIndexShardRestoreStatusRequest
name|request
init|=
operator|new
name|UpdateIndexShardRestoreStatusRequest
argument_list|(
name|snapshotId
argument_list|,
name|shardId
argument_list|,
operator|new
name|ShardRestoreStatus
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|,
name|RestoreMetaData
operator|.
name|State
operator|.
name|FAILURE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|innerUpdateRestoreState
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|,
name|UPDATE_RESTORE_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|failed
specifier|private
name|boolean
name|failed
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|String
name|index
parameter_list|)
block|{
for|for
control|(
name|SnapshotShardFailure
name|failure
range|:
name|snapshot
operator|.
name|shardFailures
argument_list|()
control|)
block|{
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
name|failure
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Adds restore completion listener      *<p/>      * This listener is called for each snapshot that finishes restore operation in the cluster. It's responsibility of      * the listener to decide if it's called for the appropriate snapshot or not.      *      * @param listener restore completion listener      */
DECL|method|addListener
specifier|public
name|void
name|addListener
parameter_list|(
name|RestoreCompletionListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes restore completion listener      *<p/>      * This listener is called for each snapshot that finishes restore operation in the cluster.      *      * @param listener restore completion listener      */
DECL|method|removeListener
specifier|public
name|void
name|removeListener
parameter_list|(
name|RestoreCompletionListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|event
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|processDeletedIndices
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to update restore state "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks if a repository is currently in use by one of the snapshots      *      * @param clusterState cluster state      * @param repository   repository id      * @return true if repository is currently in use by one of the running snapshots      */
DECL|method|isRepositoryInUse
specifier|public
specifier|static
name|boolean
name|isRepositoryInUse
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|repository
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|RestoreMetaData
name|snapshots
init|=
name|metaData
operator|.
name|custom
argument_list|(
name|RestoreMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestoreMetaData
operator|.
name|Entry
name|snapshot
range|:
name|snapshots
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|repository
operator|.
name|equals
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
operator|.
name|getRepository
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Restore snapshot request      */
DECL|class|RestoreRequest
specifier|public
specifier|static
class|class
name|RestoreRequest
block|{
DECL|field|cause
specifier|final
specifier|private
name|String
name|cause
decl_stmt|;
DECL|field|name
specifier|final
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|repository
specifier|final
specifier|private
name|String
name|repository
decl_stmt|;
DECL|field|indices
specifier|final
specifier|private
name|String
index|[]
name|indices
decl_stmt|;
DECL|field|renamePattern
specifier|final
specifier|private
name|String
name|renamePattern
decl_stmt|;
DECL|field|renameReplacement
specifier|final
specifier|private
name|String
name|renameReplacement
decl_stmt|;
DECL|field|indicesOptions
specifier|final
specifier|private
name|IndicesOptions
name|indicesOptions
decl_stmt|;
DECL|field|settings
specifier|final
specifier|private
name|Settings
name|settings
decl_stmt|;
DECL|field|masterNodeTimeout
specifier|final
specifier|private
name|TimeValue
name|masterNodeTimeout
decl_stmt|;
DECL|field|includeGlobalState
specifier|final
specifier|private
name|boolean
name|includeGlobalState
decl_stmt|;
DECL|field|partial
specifier|final
specifier|private
name|boolean
name|partial
decl_stmt|;
DECL|field|includeAliases
specifier|final
specifier|private
name|boolean
name|includeAliases
decl_stmt|;
comment|/**          * Constructs new restore request          *          * @param cause              cause for restoring the snapshot          * @param repository         repository name          * @param name               snapshot name          * @param indices            list of indices to restore          * @param indicesOptions     indices options          * @param renamePattern      pattern to rename indices          * @param renameReplacement  replacement for renamed indices          * @param settings           repository specific restore settings          * @param masterNodeTimeout  master node timeout          * @param includeGlobalState include global state into restore          * @param partial            allow partial restore          */
DECL|method|RestoreRequest
specifier|public
name|RestoreRequest
parameter_list|(
name|String
name|cause
parameter_list|,
name|String
name|repository
parameter_list|,
name|String
name|name
parameter_list|,
name|String
index|[]
name|indices
parameter_list|,
name|IndicesOptions
name|indicesOptions
parameter_list|,
name|String
name|renamePattern
parameter_list|,
name|String
name|renameReplacement
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|TimeValue
name|masterNodeTimeout
parameter_list|,
name|boolean
name|includeGlobalState
parameter_list|,
name|boolean
name|partial
parameter_list|,
name|boolean
name|includeAliases
parameter_list|)
block|{
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
name|this
operator|.
name|renamePattern
operator|=
name|renamePattern
expr_stmt|;
name|this
operator|.
name|renameReplacement
operator|=
name|renameReplacement
expr_stmt|;
name|this
operator|.
name|indicesOptions
operator|=
name|indicesOptions
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|masterNodeTimeout
operator|=
name|masterNodeTimeout
expr_stmt|;
name|this
operator|.
name|includeGlobalState
operator|=
name|includeGlobalState
expr_stmt|;
name|this
operator|.
name|partial
operator|=
name|partial
expr_stmt|;
name|this
operator|.
name|includeAliases
operator|=
name|includeAliases
expr_stmt|;
block|}
comment|/**          * Returns restore operation cause          *          * @return restore operation cause          */
DECL|method|cause
specifier|public
name|String
name|cause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
comment|/**          * Returns snapshot name          *          * @return snapshot name          */
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * Returns repository name          *          * @return repository name          */
DECL|method|repository
specifier|public
name|String
name|repository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
comment|/**          * Return the list of indices to be restored          *          * @return the list of indices          */
DECL|method|indices
specifier|public
name|String
index|[]
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
comment|/**          * Returns indices option flags          *          * @return indices options flags          */
DECL|method|indicesOptions
specifier|public
name|IndicesOptions
name|indicesOptions
parameter_list|()
block|{
return|return
name|indicesOptions
return|;
block|}
comment|/**          * Returns rename pattern          *          * @return rename pattern          */
DECL|method|renamePattern
specifier|public
name|String
name|renamePattern
parameter_list|()
block|{
return|return
name|renamePattern
return|;
block|}
comment|/**          * Returns replacement pattern          *          * @return replacement pattern          */
DECL|method|renameReplacement
specifier|public
name|String
name|renameReplacement
parameter_list|()
block|{
return|return
name|renameReplacement
return|;
block|}
comment|/**          * Returns repository-specific restore settings          *          * @return restore settings          */
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
comment|/**          * Returns true if global state should be restore during this restore operation          *          * @return restore global state flag          */
DECL|method|includeGlobalState
specifier|public
name|boolean
name|includeGlobalState
parameter_list|()
block|{
return|return
name|includeGlobalState
return|;
block|}
comment|/**          * Returns true if incomplete indices will be restored          *          * @return partial indices restore flag          */
DECL|method|partial
specifier|public
name|boolean
name|partial
parameter_list|()
block|{
return|return
name|partial
return|;
block|}
comment|/**          * Returns true if aliases should be restore during this restore operation          *          * @return restore aliases state flag          */
DECL|method|includeAliases
specifier|public
name|boolean
name|includeAliases
parameter_list|()
block|{
return|return
name|includeAliases
return|;
block|}
comment|/**          * Return master node timeout          *          * @return master node timeout          */
DECL|method|masterNodeTimeout
specifier|public
name|TimeValue
name|masterNodeTimeout
parameter_list|()
block|{
return|return
name|masterNodeTimeout
return|;
block|}
block|}
comment|/**      * This listener is called as soon as restore operation starts in the cluster.      *<p/>      * To receive notifications about  when operation ends in the cluster use {@link RestoreCompletionListener}      */
DECL|interface|RestoreSnapshotListener
specifier|public
specifier|static
interface|interface
name|RestoreSnapshotListener
block|{
comment|/**          * Called when restore operations successfully starts in the cluster. Not null value of {@code snapshot} parameter          * means that restore operation didn't involve any shards and therefore has already completed.          *          * @param restoreInfo if restore operation finished, contains information about restore operation, null otherwise          */
DECL|method|onResponse
name|void
name|onResponse
parameter_list|(
name|RestoreInfo
name|restoreInfo
parameter_list|)
function_decl|;
comment|/**          * Called when restore operation failed to start          *          * @param t exception that prevented the restore operation to start          */
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
comment|/**      * This listener is called every time a snapshot is restored in the cluster      */
DECL|interface|RestoreCompletionListener
specifier|public
specifier|static
interface|interface
name|RestoreCompletionListener
block|{
comment|/**          * Called for every snapshot that is completed in the cluster          *          * @param snapshotId  snapshot id          * @param restoreInfo restore completion information          */
DECL|method|onRestoreCompletion
name|void
name|onRestoreCompletion
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|RestoreInfo
name|restoreInfo
parameter_list|)
function_decl|;
block|}
comment|/**      * Internal class that is used to send notifications about finished shard restore operations to master node      */
DECL|class|UpdateIndexShardRestoreStatusRequest
specifier|private
specifier|static
class|class
name|UpdateIndexShardRestoreStatusRequest
extends|extends
name|TransportRequest
block|{
DECL|field|snapshotId
specifier|private
name|SnapshotId
name|snapshotId
decl_stmt|;
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|field|status
specifier|private
name|ShardRestoreStatus
name|status
decl_stmt|;
DECL|method|UpdateIndexShardRestoreStatusRequest
specifier|private
name|UpdateIndexShardRestoreStatusRequest
parameter_list|()
block|{          }
DECL|method|UpdateIndexShardRestoreStatusRequest
specifier|private
name|UpdateIndexShardRestoreStatusRequest
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|ShardRestoreStatus
name|status
parameter_list|)
block|{
name|this
operator|.
name|snapshotId
operator|=
name|snapshotId
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|snapshotId
operator|=
name|SnapshotId
operator|.
name|readSnapshotId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|status
operator|=
name|ShardRestoreStatus
operator|.
name|readShardRestoreStatus
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|snapshotId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|status
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|snapshotId
specifier|public
name|SnapshotId
name|snapshotId
parameter_list|()
block|{
return|return
name|snapshotId
return|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
DECL|method|status
specifier|public
name|ShardRestoreStatus
name|status
parameter_list|()
block|{
return|return
name|status
return|;
block|}
block|}
comment|/**      * Internal class that is used to send notifications about finished shard restore operations to master node      */
DECL|class|UpdateRestoreStateRequestHandler
specifier|private
class|class
name|UpdateRestoreStateRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|UpdateIndexShardRestoreStatusRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|UpdateIndexShardRestoreStatusRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|UpdateIndexShardRestoreStatusRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|UpdateIndexShardRestoreStatusRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|innerUpdateRestoreState
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
block|}
end_class

end_unit

