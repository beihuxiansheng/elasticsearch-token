begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportMessage
import|;
end_import

begin_comment
comment|/**  * Client request headers picked up from the client settings. Applied to every  * request sent by the client (both transport and node clients)  */
end_comment

begin_class
DECL|class|Headers
specifier|public
class|class
name|Headers
block|{
DECL|field|PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"request.headers"
decl_stmt|;
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|Headers
name|EMPTY
init|=
operator|new
name|Headers
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|M
extends|extends
name|TransportMessage
argument_list|<
name|?
argument_list|>
parameter_list|>
name|M
name|applyTo
parameter_list|(
name|M
name|message
parameter_list|)
block|{
return|return
name|message
return|;
block|}
block|}
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|Settings
name|headers
decl_stmt|;
annotation|@
name|Inject
DECL|method|Headers
specifier|public
name|Headers
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|headers
operator|=
name|resolveHeaders
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
DECL|method|applyTo
specifier|public
parameter_list|<
name|M
extends|extends
name|TransportMessage
argument_list|<
name|?
argument_list|>
parameter_list|>
name|M
name|applyTo
parameter_list|(
name|M
name|message
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|headers
operator|.
name|names
argument_list|()
control|)
block|{
name|message
operator|.
name|putHeader
argument_list|(
name|key
argument_list|,
name|headers
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
DECL|method|headers
specifier|public
name|Settings
name|headers
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
DECL|method|resolveHeaders
specifier|static
name|Settings
name|resolveHeaders
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Settings
name|headers
init|=
name|settings
operator|.
name|getAsSettings
argument_list|(
name|PREFIX
argument_list|)
decl_stmt|;
return|return
name|headers
operator|!=
literal|null
condition|?
name|headers
else|:
name|ImmutableSettings
operator|.
name|EMPTY
return|;
block|}
block|}
end_class

end_unit

