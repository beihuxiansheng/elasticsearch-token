begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cloud.azure
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|unicast
operator|.
name|UnicastZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|ContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|azure
operator|.
name|management
operator|.
name|AzureManagementApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|azure
operator|.
name|management
operator|.
name|AzureManagementApiMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|azure
operator|.
name|management
operator|.
name|AzureManagementAsyncApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|azure
operator|.
name|management
operator|.
name|config
operator|.
name|AzureManagementProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|azure
operator|.
name|management
operator|.
name|domain
operator|.
name|Deployment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|azure
operator|.
name|management
operator|.
name|domain
operator|.
name|HostedServiceWithDetailedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|logging
operator|.
name|LoggingModules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|rest
operator|.
name|RestContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
operator|.
name|cleanPath
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AzureComputeService
specifier|public
class|class
name|AzureComputeService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|AzureComputeService
argument_list|>
block|{
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|ENDPOINT
specifier|private
specifier|static
specifier|final
name|String
name|ENDPOINT
init|=
literal|"https://management.core.windows.net/"
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"2012-08-01"
decl_stmt|;
DECL|field|SUBSCRIPTION_ID
specifier|private
specifier|static
specifier|final
name|String
name|SUBSCRIPTION_ID
init|=
literal|"subscription_id"
decl_stmt|;
DECL|field|PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
DECL|field|CERTIFICATE
specifier|private
specifier|static
specifier|final
name|String
name|CERTIFICATE
init|=
literal|"certificate"
decl_stmt|;
DECL|field|PRIVATE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE_KEY
init|=
literal|"private_key"
decl_stmt|;
block|}
DECL|field|discoNodes
specifier|private
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoNodes
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
DECL|field|networkService
specifier|private
name|NetworkService
name|networkService
decl_stmt|;
annotation|@
name|Inject
DECL|method|AzureComputeService
specifier|public
name|AzureComputeService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|SettingsFilter
name|settingsFilter
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|NetworkService
name|networkService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|settingsFilter
operator|.
name|addFilter
argument_list|(
operator|new
name|AzureSettingsFilter
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
block|}
comment|/**      * We build the list of Nodes from Azure Management API      * @param client Azure Client      */
DECL|method|buildNodes
specifier|private
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|buildNodes
parameter_list|(
name|RestContext
argument_list|<
name|AzureManagementApi
argument_list|,
name|AzureManagementAsyncApi
argument_list|>
name|client
parameter_list|)
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|ipAddress
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InetAddress
name|inetAddress
init|=
name|networkService
operator|.
name|resolvePublishHostAddress
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|inetAddress
operator|!=
literal|null
condition|)
block|{
name|ipAddress
operator|=
name|inetAddress
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We can't find the publish host address... Hmmm. Too bad :-(
block|}
name|Set
argument_list|<
name|HostedServiceWithDetailedProperties
argument_list|>
name|response
init|=
name|client
operator|.
name|getApi
argument_list|()
operator|.
name|getHostedServiceApi
argument_list|()
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|HostedServiceWithDetailedProperties
name|hostedService
range|:
name|response
control|)
block|{
comment|// Ask Azure for each IP address
name|Deployment
name|deployment
init|=
name|client
operator|.
name|getApi
argument_list|()
operator|.
name|getHostedServiceApi
argument_list|()
operator|.
name|getDeployment
argument_list|(
name|hostedService
operator|.
name|getName
argument_list|()
argument_list|,
name|hostedService
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deployment
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|deployment
operator|.
name|getPrivateIpAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|ipAddress
argument_list|)
operator|||
name|deployment
operator|.
name|getPublicIpAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|ipAddress
argument_list|)
condition|)
block|{
comment|// We found the current node.
comment|// We can ignore it in the list of DiscoveryNode
comment|// We can now set the public Address as the publish address (if not already set)
name|String
name|publishHost
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"transport.publish_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.host"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|hasText
argument_list|(
name|publishHost
argument_list|)
operator|||
operator|!
name|deployment
operator|.
name|getPublicIpAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|publishHost
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"you should define publish_host with {}"
argument_list|,
name|deployment
operator|.
name|getPublicIpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TransportAddress
index|[]
name|addresses
init|=
name|transportService
operator|.
name|addressesFromString
argument_list|(
name|deployment
operator|.
name|getPublicIpAddress
argument_list|()
argument_list|)
decl_stmt|;
comment|// we only limit to 1 addresses, makes no sense to ping 100 ports
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|addresses
operator|.
name|length
operator|&&
name|i
operator|<
name|UnicastZenPing
operator|.
name|LIMIT_PORTS_COUNT
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"adding {}, address {}, transport_address {}"
argument_list|,
name|hostedService
operator|.
name|getName
argument_list|()
argument_list|,
name|deployment
operator|.
name|getPublicIpAddress
argument_list|()
argument_list|,
name|addresses
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|discoNodes
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"#cloud-"
operator|+
name|hostedService
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|,
name|addresses
index|[
name|i
index|]
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to add {}, address {}"
argument_list|,
name|e
argument_list|,
name|hostedService
operator|.
name|getName
argument_list|()
argument_list|,
name|deployment
operator|.
name|getPublicIpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"ignoring {}"
argument_list|,
name|hostedService
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|discoNodes
return|;
block|}
DECL|method|nodes
specifier|public
specifier|synchronized
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|discoNodes
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|discoNodes
return|;
block|}
name|String
name|PK8_PATH
init|=
name|componentSettings
operator|.
name|get
argument_list|(
name|Fields
operator|.
name|PRIVATE_KEY
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"cloud."
operator|+
name|Fields
operator|.
name|PRIVATE_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|CERTIFICATE_PATH
init|=
name|componentSettings
operator|.
name|get
argument_list|(
name|Fields
operator|.
name|CERTIFICATE
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"cloud."
operator|+
name|Fields
operator|.
name|CERTIFICATE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|PASSWORD
init|=
name|componentSettings
operator|.
name|get
argument_list|(
name|Fields
operator|.
name|PASSWORD
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"cloud"
operator|+
name|Fields
operator|.
name|PASSWORD
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|SUBSCRIPTION_ID
init|=
name|componentSettings
operator|.
name|get
argument_list|(
name|Fields
operator|.
name|SUBSCRIPTION_ID
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"cloud."
operator|+
name|Fields
operator|.
name|SUBSCRIPTION_ID
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check that we have all needed properties
if|if
condition|(
operator|!
name|checkProperty
argument_list|(
name|Fields
operator|.
name|SUBSCRIPTION_ID
argument_list|,
name|SUBSCRIPTION_ID
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|checkProperty
argument_list|(
name|Fields
operator|.
name|CERTIFICATE
argument_list|,
name|CERTIFICATE_PATH
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|checkProperty
argument_list|(
name|Fields
operator|.
name|PRIVATE_KEY
argument_list|,
name|PK8_PATH
argument_list|)
condition|)
return|return
literal|null
return|;
comment|// Reading files from local disk
name|String
name|pk8
init|=
name|readFromFile
argument_list|(
name|cleanPath
argument_list|(
name|PK8_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|cert
init|=
name|readFromFile
argument_list|(
name|cleanPath
argument_list|(
name|CERTIFICATE_PATH
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check file content
if|if
condition|(
operator|!
name|checkProperty
argument_list|(
name|Fields
operator|.
name|CERTIFICATE
argument_list|,
name|cert
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|checkProperty
argument_list|(
name|Fields
operator|.
name|PRIVATE_KEY
argument_list|,
name|pk8
argument_list|)
condition|)
return|return
literal|null
return|;
name|String
name|IDENTITY
init|=
name|pk8
operator|+
name|cert
decl_stmt|;
comment|// We set properties used to create an Azure client
name|Properties
name|overrides
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|overrides
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|PROPERTY_TRUST_ALL_CERTS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|PROPERTY_RELAX_HOSTNAME
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|setProperty
argument_list|(
literal|"azure-management.identity"
argument_list|,
name|IDENTITY
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|setProperty
argument_list|(
literal|"azure-management.credential"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|setProperty
argument_list|(
literal|"azure-management.endpoint"
argument_list|,
name|Fields
operator|.
name|ENDPOINT
operator|+
name|SUBSCRIPTION_ID
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|setProperty
argument_list|(
literal|"azure-management.api-version"
argument_list|,
name|Fields
operator|.
name|VERSION
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|setProperty
argument_list|(
literal|"azure-management.build-version"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|setProperty
argument_list|(
name|AzureManagementProperties
operator|.
name|SUBSCRIPTION_ID
argument_list|,
name|SUBSCRIPTION_ID
argument_list|)
expr_stmt|;
name|RestContext
argument_list|<
name|AzureManagementApi
argument_list|,
name|AzureManagementAsyncApi
argument_list|>
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
name|client
operator|=
name|ContextBuilder
operator|.
name|newBuilder
argument_list|(
literal|"azure-management"
argument_list|)
operator|.
name|modules
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|Module
operator|>
name|of
argument_list|(
name|LoggingModules
operator|.
name|firstOrJDKLoggingModule
argument_list|()
argument_list|)
argument_list|)
operator|.
name|overrides
argument_list|(
name|overrides
argument_list|)
operator|.
name|build
argument_list|(
name|AzureManagementApiMetadata
operator|.
name|CONTEXT_TOKEN
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"starting Azure discovery service for [{}]"
argument_list|,
name|SUBSCRIPTION_ID
argument_list|)
expr_stmt|;
name|this
operator|.
name|discoNodes
operator|=
name|buildNodes
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"error while trying to find nodes for azure service [{}]: {}"
argument_list|,
name|SUBSCRIPTION_ID
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"error found is: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// We create an empty list in that specific case.
comment|// So discovery process won't fail with NPE but this node won't join any cluster
name|this
operator|.
name|discoNodes
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"using dynamic discovery nodes {}"
argument_list|,
name|discoNodes
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|discoNodes
return|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
DECL|method|readFromFile
specifier|private
name|String
name|readFromFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"reading file content from [{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|StringBuilder
name|text
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|NL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|path
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
name|scanner
operator|.
name|nextLine
argument_list|()
operator|+
name|NL
argument_list|)
expr_stmt|;
block|}
return|return
name|text
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"file does not exist [{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkProperty
specifier|private
name|boolean
name|checkProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|hasText
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cloud.azure.{} is not set. Disabling azure discovery."
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

