begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cloud.gce
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|gce
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|compute
operator|.
name|ComputeCredential
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|javanet
operator|.
name|GoogleNetHttpTransport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|HttpTransport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|json
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|json
operator|.
name|jackson2
operator|.
name|JacksonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|Compute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|model
operator|.
name|AccessConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|model
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|model
operator|.
name|InstanceList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|model
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|unicast
operator|.
name|UnicastZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|GceComputeService
specifier|public
class|class
name|GceComputeService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|GceComputeService
argument_list|>
block|{
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|PROJECT
specifier|private
specifier|static
specifier|final
name|String
name|PROJECT
init|=
literal|"project_id"
decl_stmt|;
DECL|field|ZONE
specifier|private
specifier|static
specifier|final
name|String
name|ZONE
init|=
literal|"zone"
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"Elasticsearch/GceCloud/1.0"
decl_stmt|;
block|}
DECL|class|Status
specifier|static
specifier|final
class|class
name|Status
block|{
DECL|field|TERMINATED
specifier|private
specifier|static
specifier|final
name|String
name|TERMINATED
init|=
literal|"TERMINATED"
decl_stmt|;
block|}
DECL|field|discoNodes
specifier|private
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoNodes
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
DECL|field|networkService
specifier|private
name|NetworkService
name|networkService
decl_stmt|;
DECL|field|compute
specifier|private
name|Compute
name|compute
decl_stmt|;
DECL|field|tags
specifier|private
specifier|final
name|String
index|[]
name|tags
decl_stmt|;
comment|/** Global instance of the HTTP transport. */
DECL|field|HTTP_TRANSPORT
specifier|private
specifier|static
name|HttpTransport
name|HTTP_TRANSPORT
decl_stmt|;
comment|/** Global instance of the JSON factory. */
DECL|field|JSON_FACTORY
specifier|private
specifier|static
name|JsonFactory
name|JSON_FACTORY
decl_stmt|;
annotation|@
name|Inject
DECL|method|GceComputeService
specifier|public
name|GceComputeService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|SettingsFilter
name|settingsFilter
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|NetworkService
name|networkService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|settingsFilter
operator|.
name|addFilter
argument_list|(
operator|new
name|GceSettingsFilter
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"discovery.gce.tags"
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"using tags {}"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|this
operator|.
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * We build the list of Nodes from GCE Management API      * @param project      * @param zone      */
DECL|method|buildNodes
specifier|private
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|buildNodes
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|zone
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|ipAddress
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InetAddress
name|inetAddress
init|=
name|networkService
operator|.
name|resolvePublishHostAddress
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|inetAddress
operator|!=
literal|null
condition|)
block|{
name|ipAddress
operator|=
name|inetAddress
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We can't find the publish host address... Hmmm. Too bad :-(
block|}
name|Compute
operator|.
name|Instances
operator|.
name|List
name|list
init|=
name|compute
operator|.
name|instances
argument_list|()
operator|.
name|list
argument_list|(
name|project
argument_list|,
name|zone
argument_list|)
decl_stmt|;
name|InstanceList
name|instanceList
init|=
name|list
operator|.
name|execute
argument_list|()
decl_stmt|;
for|for
control|(
name|Instance
name|instance
range|:
name|instanceList
operator|.
name|getItems
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|instance
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|instance
operator|.
name|getMachineType
argument_list|()
decl_stmt|;
name|String
name|image
init|=
name|instance
operator|.
name|getImage
argument_list|()
decl_stmt|;
name|String
name|status
init|=
name|instance
operator|.
name|getStatus
argument_list|()
decl_stmt|;
comment|// We don't want to connect to TERMINATED status instances
comment|// See https://github.com/elasticsearch/elasticsearch-cloud-gce/issues/3
if|if
condition|(
name|Status
operator|.
name|TERMINATED
operator|.
name|equals
argument_list|(
name|status
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"node {} is TERMINATED. Ignoring"
argument_list|,
name|name
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// see if we need to filter by tag
name|boolean
name|filterByTag
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tags
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|instance
operator|.
name|getTags
argument_list|()
operator|==
literal|null
operator|||
name|instance
operator|.
name|getTags
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If this instance have no tag, we filter it
name|filterByTag
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// check that all tags listed are there on the instance
for|for
control|(
name|String
name|tag
range|:
name|tags
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|instancetag
range|:
name|instance
operator|.
name|getTags
argument_list|()
operator|.
name|getItems
argument_list|()
control|)
block|{
if|if
condition|(
name|instancetag
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|filterByTag
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|filterByTag
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"filtering out instance {} based tags {}, not part of {}"
argument_list|,
name|name
argument_list|,
name|tags
argument_list|,
name|instance
operator|.
name|getTags
argument_list|()
operator|.
name|getItems
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|ip_public
init|=
literal|null
decl_stmt|;
name|String
name|ip_private
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|NetworkInterface
argument_list|>
name|interfaces
init|=
name|instance
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|NetworkInterface
name|networkInterface
range|:
name|interfaces
control|)
block|{
if|if
condition|(
name|ip_public
operator|==
literal|null
condition|)
block|{
comment|// Trying to get Public IP Address (For future use)
for|for
control|(
name|AccessConfig
name|accessConfig
range|:
name|networkInterface
operator|.
name|getAccessConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|accessConfig
operator|.
name|getNatIP
argument_list|()
argument_list|)
condition|)
block|{
name|ip_public
operator|=
name|accessConfig
operator|.
name|getNatIP
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|ip_private
operator|==
literal|null
condition|)
block|{
name|ip_private
operator|=
name|networkInterface
operator|.
name|getNetworkIP
argument_list|()
expr_stmt|;
block|}
comment|// If we have both public and private, we can stop here
if|if
condition|(
name|ip_private
operator|!=
literal|null
operator|&&
name|ip_public
operator|!=
literal|null
condition|)
break|break;
block|}
try|try
block|{
if|if
condition|(
name|ip_private
operator|.
name|equals
argument_list|(
name|ipAddress
argument_list|)
condition|)
block|{
comment|// We found the current node.
comment|// We can ignore it in the list of DiscoveryNode
name|logger
operator|.
name|debug
argument_list|(
literal|"current node found. Ignoring {} - {}"
argument_list|,
name|name
argument_list|,
name|ip_private
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TransportAddress
index|[]
name|addresses
init|=
name|transportService
operator|.
name|addressesFromString
argument_list|(
name|ip_private
argument_list|)
decl_stmt|;
comment|// we only limit to 1 addresses, makes no sense to ping 100 ports
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|addresses
operator|.
name|length
operator|&&
name|i
operator|<
name|UnicastZenPing
operator|.
name|LIMIT_PORTS_COUNT
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"adding {}, type {}, image {}, address {}, transport_address {}, status {}"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|image
argument_list|,
name|ip_private
argument_list|,
name|addresses
index|[
name|i
index|]
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|discoNodes
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"#cloud-"
operator|+
name|name
operator|+
literal|"-"
operator|+
name|i
argument_list|,
name|addresses
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to add {}, address {}"
argument_list|,
name|e
argument_list|,
name|name
argument_list|,
name|ip_private
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|discoNodes
return|;
block|}
DECL|method|nodes
specifier|public
specifier|synchronized
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|discoNodes
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|discoNodes
return|;
block|}
try|try
block|{
name|HTTP_TRANSPORT
operator|=
name|GoogleNetHttpTransport
operator|.
name|newTrustedTransport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{          }
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{          }
name|JSON_FACTORY
operator|=
operator|new
name|JacksonFactory
argument_list|()
expr_stmt|;
name|String
name|project
init|=
name|componentSettings
operator|.
name|get
argument_list|(
name|Fields
operator|.
name|PROJECT
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"cloud."
operator|+
name|Fields
operator|.
name|PROJECT
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|zone
init|=
name|componentSettings
operator|.
name|get
argument_list|(
name|Fields
operator|.
name|ZONE
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"cloud."
operator|+
name|Fields
operator|.
name|ZONE
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check that we have all needed properties
if|if
condition|(
operator|!
name|checkProperty
argument_list|(
name|Fields
operator|.
name|PROJECT
argument_list|,
name|project
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|checkProperty
argument_list|(
name|Fields
operator|.
name|ZONE
argument_list|,
name|zone
argument_list|)
condition|)
return|return
literal|null
return|;
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"starting GCE discovery service for project [{}] on zone [{}]"
argument_list|,
name|project
argument_list|,
name|zone
argument_list|)
expr_stmt|;
name|ComputeCredential
name|credential
init|=
operator|new
name|ComputeCredential
operator|.
name|Builder
argument_list|(
name|HTTP_TRANSPORT
argument_list|,
name|JSON_FACTORY
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|credential
operator|.
name|refreshToken
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"token [{}] will expire in [{}] s"
argument_list|,
name|credential
operator|.
name|getAccessToken
argument_list|()
argument_list|,
name|credential
operator|.
name|getExpiresInSeconds
argument_list|()
argument_list|)
expr_stmt|;
comment|// Once done, let's use this token
name|compute
operator|=
operator|new
name|Compute
operator|.
name|Builder
argument_list|(
name|HTTP_TRANSPORT
argument_list|,
name|JSON_FACTORY
argument_list|,
literal|null
argument_list|)
operator|.
name|setApplicationName
argument_list|(
name|Fields
operator|.
name|VERSION
argument_list|)
operator|.
name|setHttpRequestInitializer
argument_list|(
name|credential
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|discoNodes
operator|=
name|buildNodes
argument_list|(
name|project
argument_list|,
name|zone
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"error while trying to find nodes for GCE service [{}]: {}: {}"
argument_list|,
name|project
argument_list|,
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"error found is: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// We create an empty list in that specific case.
comment|// So discovery process won't fail with NPE but this node won't join any cluster
name|this
operator|.
name|discoNodes
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"using dynamic discovery nodes {}"
argument_list|,
name|discoNodes
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|discoNodes
return|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
DECL|method|checkProperty
specifier|private
name|boolean
name|checkProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|hasText
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cloud.gce.{} is not set. Disabling gce discovery."
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

