begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings.loader
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
package|;
end_package

begin_comment
comment|/**  * A settings loader factory automatically trying to identify what type of  * {@link SettingsLoader} to use.  *  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|SettingsLoaderFactory
specifier|public
specifier|final
class|class
name|SettingsLoaderFactory
block|{
DECL|method|SettingsLoaderFactory
specifier|private
name|SettingsLoaderFactory
parameter_list|()
block|{      }
comment|/**      * Returns a {@link SettingsLoader} based on the resource name.      */
DECL|method|loaderFromResource
specifier|public
specifier|static
name|SettingsLoader
name|loaderFromResource
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
if|if
condition|(
name|resourceName
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
condition|)
block|{
return|return
operator|new
name|JsonSettingsLoader
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|resourceName
operator|.
name|endsWith
argument_list|(
literal|".yml"
argument_list|)
condition|)
block|{
return|return
operator|new
name|YamlSettingsLoader
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|resourceName
operator|.
name|endsWith
argument_list|(
literal|".properties"
argument_list|)
condition|)
block|{
return|return
operator|new
name|PropertiesSettingsLoader
argument_list|()
return|;
block|}
else|else
block|{
comment|// lets default to the json one
return|return
operator|new
name|JsonSettingsLoader
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns a {@link SettingsLoader} based on the actual settings source.      */
DECL|method|loaderFromSource
specifier|public
specifier|static
name|SettingsLoader
name|loaderFromSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
name|source
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|JsonSettingsLoader
argument_list|()
return|;
block|}
if|if
condition|(
name|source
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|YamlSettingsLoader
argument_list|()
return|;
block|}
return|return
operator|new
name|PropertiesSettingsLoader
argument_list|()
return|;
block|}
block|}
end_class

end_unit

