begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|Hex
specifier|public
class|class
name|Hex
block|{
comment|/**      * Used to build output as Hex      */
DECL|field|DIGITS_LOWER
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DIGITS_LOWER
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|}
decl_stmt|;
comment|/**      * Used to build output as Hex      */
DECL|field|DIGITS_UPPER
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DIGITS_UPPER
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|}
decl_stmt|;
comment|/**      * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.      * The returned array will be double the length of the passed array, as it takes two characters to represent any      * given byte.      *      * @param data a byte[] to convert to Hex characters      * @return A char[] containing hexadecimal characters      */
DECL|method|encodeHex
specifier|public
specifier|static
name|char
index|[]
name|encodeHex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|encodeHex
argument_list|(
name|data
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.      * The returned array will be double the length of the passed array, as it takes two characters to represent any      * given byte.      *      * @param data        a byte[] to convert to Hex characters      * @param toLowerCase<code>true</code> converts to lowercase,<code>false</code> to uppercase      * @return A char[] containing hexadecimal characters      */
DECL|method|encodeHex
specifier|public
specifier|static
name|char
index|[]
name|encodeHex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|boolean
name|toLowerCase
parameter_list|)
block|{
return|return
name|encodeHex
argument_list|(
name|data
argument_list|,
name|toLowerCase
condition|?
name|DIGITS_LOWER
else|:
name|DIGITS_UPPER
argument_list|)
return|;
block|}
comment|/**      * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.      * The returned array will be double the length of the passed array, as it takes two characters to represent any      * given byte.      *      * @param data     a byte[] to convert to Hex characters      * @param toDigits the output alphabet      * @return A char[] containing hexadecimal characters      * @since 1.4      */
DECL|method|encodeHex
specifier|protected
specifier|static
name|char
index|[]
name|encodeHex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|char
index|[]
name|toDigits
parameter_list|)
block|{
name|int
name|l
init|=
name|data
operator|.
name|length
decl_stmt|;
name|char
index|[]
name|out
init|=
operator|new
name|char
index|[
name|l
operator|<<
literal|1
index|]
decl_stmt|;
comment|// two characters form the hex value.
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|j
operator|++
index|]
operator|=
name|toDigits
index|[
operator|(
literal|0xF0
operator|&
name|data
index|[
name|i
index|]
operator|)
operator|>>>
literal|4
index|]
expr_stmt|;
name|out
index|[
name|j
operator|++
index|]
operator|=
name|toDigits
index|[
literal|0x0F
operator|&
name|data
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**      * Converts an array of bytes into a String representing the hexadecimal values of each byte in order. The returned      * String will be double the length of the passed array, as it takes two characters to represent any given byte.      *      * @param data a byte[] to convert to Hex characters      * @return A String containing hexadecimal characters      */
DECL|method|encodeHexString
specifier|public
specifier|static
name|String
name|encodeHexString
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|encodeHex
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
DECL|method|decodeHex
specifier|public
specifier|static
name|byte
index|[]
name|decodeHex
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|ElasticSearchIllegalStateException
block|{
return|return
name|decodeHex
argument_list|(
name|data
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
DECL|method|decodeHex
specifier|public
specifier|static
name|byte
index|[]
name|decodeHex
parameter_list|(
name|char
index|[]
name|data
parameter_list|)
throws|throws
name|ElasticSearchIllegalStateException
block|{
name|int
name|len
init|=
name|data
operator|.
name|length
decl_stmt|;
if|if
condition|(
operator|(
name|len
operator|&
literal|0x01
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Odd number of characters."
argument_list|)
throw|;
block|}
name|byte
index|[]
name|out
init|=
operator|new
name|byte
index|[
name|len
operator|>>
literal|1
index|]
decl_stmt|;
comment|// two characters form the hex value.
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|f
init|=
name|toDigit
argument_list|(
name|data
index|[
name|j
index|]
argument_list|,
name|j
argument_list|)
operator|<<
literal|4
decl_stmt|;
name|j
operator|++
expr_stmt|;
name|f
operator|=
name|f
operator||
name|toDigit
argument_list|(
name|data
index|[
name|j
index|]
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
name|out
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|f
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|toDigit
specifier|protected
specifier|static
name|int
name|toDigit
parameter_list|(
name|char
name|ch
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|ElasticSearchIllegalStateException
block|{
name|int
name|digit
init|=
name|Character
operator|.
name|digit
argument_list|(
name|ch
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|digit
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Illegal hexadecimal character "
operator|+
name|ch
operator|+
literal|" at index "
operator|+
name|index
argument_list|)
throw|;
block|}
return|return
name|digit
return|;
block|}
block|}
end_class

end_unit

