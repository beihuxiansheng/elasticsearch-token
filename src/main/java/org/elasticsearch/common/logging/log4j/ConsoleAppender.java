begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.logging.log4j
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|log4j
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|WriterAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|helpers
operator|.
name|LogLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * ConsoleAppender appends log events to<code>System.out</code> or  *<code>System.err</code> using a layout specified by the user. The  * default target is<code>System.out</code>.  *<p/>  *<p>Elasticsearch: Adapter from log4j to allow to disable console logging...</p>  *  * @author Ceki G&uuml;lc&uuml;  * @author Curt Arnold  * @since 1.1  */
end_comment

begin_class
DECL|class|ConsoleAppender
specifier|public
class|class
name|ConsoleAppender
extends|extends
name|WriterAppender
block|{
DECL|field|SYSTEM_OUT
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_OUT
init|=
literal|"System.out"
decl_stmt|;
DECL|field|SYSTEM_ERR
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_ERR
init|=
literal|"System.err"
decl_stmt|;
DECL|field|target
specifier|protected
name|String
name|target
init|=
name|SYSTEM_OUT
decl_stmt|;
comment|/**      * Determines if the appender honors reassignments of System.out      * or System.err made after configuration.      */
DECL|field|follow
specifier|private
name|boolean
name|follow
init|=
literal|true
decl_stmt|;
comment|/**      * Constructs an unconfigured appender.      */
DECL|method|ConsoleAppender
specifier|public
name|ConsoleAppender
parameter_list|()
block|{     }
comment|/**      * Creates a configured appender.      *      * @param layout layout, may not be null.      */
DECL|method|ConsoleAppender
specifier|public
name|ConsoleAppender
parameter_list|(
name|Layout
name|layout
parameter_list|)
block|{
name|this
argument_list|(
name|layout
argument_list|,
name|SYSTEM_OUT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a configured appender.      *      * @param layout layout, may not be null.      * @param target target, either "System.err" or "System.out".      */
DECL|method|ConsoleAppender
specifier|public
name|ConsoleAppender
parameter_list|(
name|Layout
name|layout
parameter_list|,
name|String
name|target
parameter_list|)
block|{
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|setTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|activateOptions
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the value of the<b>Target</b> option. Recognized values      * are "System.out" and "System.err". Any other value will be      * ignored.      */
DECL|method|setTarget
specifier|public
name|void
name|setTarget
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|String
name|v
init|=
name|value
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|SYSTEM_OUT
operator|.
name|equalsIgnoreCase
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|target
operator|=
name|SYSTEM_OUT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SYSTEM_ERR
operator|.
name|equalsIgnoreCase
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|target
operator|=
name|SYSTEM_ERR
expr_stmt|;
block|}
else|else
block|{
name|targetWarn
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the current value of the<b>Target</b> property. The      * default value of the option is "System.out".      *<p/>      * See also {@link #setTarget}.      */
DECL|method|getTarget
specifier|public
name|String
name|getTarget
parameter_list|()
block|{
return|return
name|target
return|;
block|}
comment|/**      * Sets whether the appender honors reassignments of System.out      * or System.err made after configuration.      *      * @param newValue if true, appender will use value of System.out or      *                 System.err in force at the time when logging events are appended.      * @since 1.2.13      */
DECL|method|setFollow
specifier|public
specifier|final
name|void
name|setFollow
parameter_list|(
specifier|final
name|boolean
name|newValue
parameter_list|)
block|{
name|follow
operator|=
name|newValue
expr_stmt|;
block|}
comment|/**      * Gets whether the appender honors reassignments of System.out      * or System.err made after configuration.      *      * @return true if appender will use value of System.out or      *         System.err in force at the time when logging events are appended.      * @since 1.2.13      */
DECL|method|getFollow
specifier|public
specifier|final
name|boolean
name|getFollow
parameter_list|()
block|{
return|return
name|follow
return|;
block|}
DECL|method|targetWarn
name|void
name|targetWarn
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|LogLog
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|val
operator|+
literal|"] should be System.out or System.err."
argument_list|)
expr_stmt|;
name|LogLog
operator|.
name|warn
argument_list|(
literal|"Using previously set target, System.out by default."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prepares the appender for use.      */
annotation|@
name|Override
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System#out"
argument_list|)
DECL|method|activateOptions
specifier|public
name|void
name|activateOptions
parameter_list|()
block|{
if|if
condition|(
name|follow
condition|)
block|{
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
name|SYSTEM_ERR
argument_list|)
condition|)
block|{
name|setWriter
argument_list|(
name|createWriter
argument_list|(
operator|new
name|SystemErrStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setWriter
argument_list|(
name|createWriter
argument_list|(
operator|new
name|SystemOutStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
name|SYSTEM_ERR
argument_list|)
condition|)
block|{
name|setWriter
argument_list|(
name|createWriter
argument_list|(
name|System
operator|.
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setWriter
argument_list|(
name|createWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|activateOptions
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|protected
DECL|method|closeWriter
specifier|final
name|void
name|closeWriter
parameter_list|()
block|{
if|if
condition|(
name|follow
condition|)
block|{
name|super
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * An implementation of OutputStream that redirects to the      * current System.err.      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System#err"
argument_list|)
DECL|class|SystemErrStream
specifier|private
specifier|static
class|class
name|SystemErrStream
extends|extends
name|OutputStream
block|{
DECL|method|SystemErrStream
specifier|public
name|SystemErrStream
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Loggers
operator|.
name|consoleLoggingEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|System
operator|.
name|err
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Loggers
operator|.
name|consoleLoggingEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|System
operator|.
name|err
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Loggers
operator|.
name|consoleLoggingEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|System
operator|.
name|err
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * An implementation of OutputStream that redirects to the      * current System.out.      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System#err"
argument_list|)
DECL|class|SystemOutStream
specifier|private
specifier|static
class|class
name|SystemOutStream
extends|extends
name|OutputStream
block|{
DECL|method|SystemOutStream
specifier|public
name|SystemOutStream
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Loggers
operator|.
name|consoleLoggingEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Loggers
operator|.
name|consoleLoggingEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Loggers
operator|.
name|consoleLoggingEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

