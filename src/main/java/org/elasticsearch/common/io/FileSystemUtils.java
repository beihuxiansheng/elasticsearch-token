begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|FileSystemUtils
specifier|public
class|class
name|FileSystemUtils
block|{
DECL|method|mkdirs
specifier|public
specifier|static
name|boolean
name|mkdirs
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
return|return
name|dir
operator|.
name|mkdirs
argument_list|()
return|;
block|}
DECL|method|hasExtensions
specifier|public
specifier|static
name|boolean
name|hasExtensions
parameter_list|(
name|File
name|root
parameter_list|,
name|String
modifier|...
name|extensions
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|root
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|boolean
name|has
init|=
name|hasExtensions
argument_list|(
name|child
argument_list|,
name|extensions
argument_list|)
decl_stmt|;
if|if
condition|(
name|has
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|extension
range|:
name|extensions
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|extension
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns true if at least one of the files exists.      */
DECL|method|exists
specifier|public
specifier|static
name|boolean
name|exists
parameter_list|(
name|File
modifier|...
name|files
parameter_list|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Deletes the given files recursively. if<tt>deleteRoots</tt> is set to<code>true</code>      * the given root files will be deleted as well. Otherwise only their content is deleted.      */
DECL|method|deleteRecursively
specifier|public
specifier|static
name|boolean
name|deleteRecursively
parameter_list|(
name|File
index|[]
name|roots
parameter_list|,
name|boolean
name|deleteRoots
parameter_list|)
block|{
name|boolean
name|deleted
init|=
literal|true
decl_stmt|;
for|for
control|(
name|File
name|root
range|:
name|roots
control|)
block|{
name|deleted
operator|&=
name|deleteRecursively
argument_list|(
name|root
argument_list|,
name|deleteRoots
argument_list|)
expr_stmt|;
block|}
return|return
name|deleted
return|;
block|}
comment|/**      * Deletes all subdirectories of the given roots recursively.      */
DECL|method|deleteSubDirectories
specifier|public
specifier|static
name|boolean
name|deleteSubDirectories
parameter_list|(
name|File
index|[]
name|roots
parameter_list|)
block|{
name|boolean
name|deleted
init|=
literal|true
decl_stmt|;
for|for
control|(
name|File
name|root
range|:
name|roots
control|)
block|{
if|if
condition|(
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|root
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|isDirectory
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|deleted
operator|&=
name|deleteRecursively
argument_list|(
name|files
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|deleted
return|;
block|}
comment|/**      * Deletes the given files recursively including the given roots.      */
DECL|method|deleteRecursively
specifier|public
specifier|static
name|boolean
name|deleteRecursively
parameter_list|(
name|File
modifier|...
name|roots
parameter_list|)
block|{
return|return
name|deleteRecursively
argument_list|(
name|roots
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Delete the supplied {@link java.io.File} - for directories,      * recursively delete any nested directories or files as well.      *      * @param root       the root<code>File</code> to delete      * @param deleteRoot whether or not to delete the root itself or just the content of the root.      * @return<code>true</code> if the<code>File</code> was deleted,      *         otherwise<code>false</code>      */
DECL|method|deleteRecursively
specifier|public
specifier|static
name|boolean
name|deleteRecursively
parameter_list|(
name|File
name|root
parameter_list|,
name|boolean
name|deleteRoot
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|root
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|aChildren
range|:
name|children
control|)
block|{
name|deleteRecursively
argument_list|(
name|aChildren
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|deleteRoot
condition|)
block|{
return|return
name|root
operator|.
name|delete
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Ensure that any writes to the given file is written to the storage device that contains it.      * @param fileToSync the file to fsync      * @param isDir if true, the given file is a directory (we open for read and ignore IOExceptions,      *  because not all file systems and operating systems allow to fsync on a directory)      */
DECL|method|syncFile
specifier|public
specifier|static
name|void
name|syncFile
parameter_list|(
name|File
name|fileToSync
parameter_list|,
name|boolean
name|isDir
parameter_list|)
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|fsync
argument_list|(
name|fileToSync
argument_list|,
name|isDir
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check that a directory exists, is a directory and is readable      * by the current user      */
DECL|method|isAccessibleDirectory
specifier|public
specifier|static
name|boolean
name|isAccessibleDirectory
parameter_list|(
name|File
name|directory
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
assert|assert
name|directory
operator|!=
literal|null
operator|&&
name|logger
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] directory does not exist."
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] should be a directory but is not."
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] directory is not readable."
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|FileSystemUtils
specifier|private
name|FileSystemUtils
parameter_list|()
block|{}
DECL|method|tryDeleteFile
specifier|public
specifier|static
name|void
name|tryDeleteFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
end_class

end_unit

