begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
operator|.
name|CONTINUE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
operator|.
name|SKIP_SUBTREE
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|FileSystemUtils
specifier|public
class|class
name|FileSystemUtils
block|{
DECL|method|mkdirs
specifier|public
specifier|static
name|boolean
name|mkdirs
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
return|return
name|dir
operator|.
name|mkdirs
argument_list|()
return|;
block|}
DECL|method|hasExtensions
specifier|public
specifier|static
name|boolean
name|hasExtensions
parameter_list|(
name|File
name|root
parameter_list|,
name|String
modifier|...
name|extensions
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|root
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|boolean
name|has
init|=
name|hasExtensions
argument_list|(
name|child
argument_list|,
name|extensions
argument_list|)
decl_stmt|;
if|if
condition|(
name|has
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|extension
range|:
name|extensions
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|extension
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns true if at least one of the files exists.      */
DECL|method|exists
specifier|public
specifier|static
name|boolean
name|exists
parameter_list|(
name|File
modifier|...
name|files
parameter_list|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns an array of {@link Path} build from the correspondent element      * in the input array using {@link java.io.File#toPath()}      * @param files the files to get paths for      */
DECL|method|toPaths
specifier|public
specifier|static
name|Path
index|[]
name|toPaths
parameter_list|(
name|File
modifier|...
name|files
parameter_list|)
block|{
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[
name|files
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
name|files
index|[
name|i
index|]
operator|.
name|toPath
argument_list|()
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
comment|/**      * Deletes all subdirectories in the given path recursively      * @throws java.lang.IllegalArgumentException if the given path is not a directory      */
DECL|method|deleteSubDirectories
specifier|public
specifier|static
name|void
name|deleteSubDirectories
parameter_list|(
name|Path
modifier|...
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|path
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|subPath
range|:
name|stream
control|)
block|{
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|subPath
argument_list|)
condition|)
block|{
name|IOUtils
operator|.
name|rm
argument_list|(
name|subPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Check that a directory exists, is a directory and is readable      * by the current user      */
DECL|method|isAccessibleDirectory
specifier|public
specifier|static
name|boolean
name|isAccessibleDirectory
parameter_list|(
name|File
name|directory
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
assert|assert
name|directory
operator|!=
literal|null
operator|&&
name|logger
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] directory does not exist."
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] should be a directory but is not."
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] directory is not readable."
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|FileSystemUtils
specifier|private
name|FileSystemUtils
parameter_list|()
block|{}
comment|/**      * This utility copy a full directory content (excluded) under      * a new directory but without overwriting existing files.      *      * When a file already exists in destination dir, the source file is copied under      * destination directory but with a suffix appended if set or source file is ignored      * if suffix is not set (null).      * @param source Source directory (for example /tmp/es/src)      * @param destination Destination directory (destination directory /tmp/es/dst)      * @param suffix When not null, files are copied with a suffix appended to the original name (eg: ".new")      *               When null, files are ignored      */
DECL|method|moveFilesWithoutOverwriting
specifier|public
specifier|static
name|void
name|moveFilesWithoutOverwriting
parameter_list|(
name|File
name|source
parameter_list|,
specifier|final
name|File
name|destination
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create destination dir
name|FileSystemUtils
operator|.
name|mkdirs
argument_list|(
name|destination
argument_list|)
expr_stmt|;
specifier|final
name|int
name|configPathRootLevel
init|=
name|source
operator|.
name|toPath
argument_list|()
operator|.
name|getNameCount
argument_list|()
decl_stmt|;
comment|// We walk through the file tree from
name|Files
operator|.
name|walkFileTree
argument_list|(
name|source
operator|.
name|toPath
argument_list|()
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
specifier|private
name|Path
name|buildPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|destination
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|preVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We are now in dir. We need to remove root of config files to have a relative path
comment|// If we are not walking in root dir, we might be able to copy its content
comment|// if it does not already exist
if|if
condition|(
name|configPathRootLevel
operator|!=
name|dir
operator|.
name|getNameCount
argument_list|()
condition|)
block|{
name|Path
name|subpath
init|=
name|dir
operator|.
name|subpath
argument_list|(
name|configPathRootLevel
argument_list|,
name|dir
operator|.
name|getNameCount
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|buildPath
argument_list|(
name|subpath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// We just move the structure to new dir
if|if
condition|(
operator|!
name|dir
operator|.
name|toFile
argument_list|()
operator|.
name|renameTo
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not move ["
operator|+
name|dir
operator|+
literal|"] to ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// We just ignore sub files from here
return|return
name|FileVisitResult
operator|.
name|SKIP_SUBTREE
return|;
block|}
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|subpath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configPathRootLevel
operator|!=
name|file
operator|.
name|getNameCount
argument_list|()
condition|)
block|{
name|subpath
operator|=
name|file
operator|.
name|subpath
argument_list|(
name|configPathRootLevel
argument_list|,
name|file
operator|.
name|getNameCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|path
init|=
name|buildPath
argument_list|(
name|subpath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// We just move the new file to new dir
name|Files
operator|.
name|move
argument_list|(
name|file
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
block|{
comment|// If it already exists we try to copy this new version appending suffix to its name
name|path
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|path
operator|.
name|toString
argument_list|()
operator|.
name|concat
argument_list|(
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
comment|// We just move the file to new dir but with a new name (appended with suffix)
name|Files
operator|.
name|move
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy recursively a dir to a new location      * @param source source dir      * @param destination destination dir      */
DECL|method|copyDirectoryRecursively
specifier|public
specifier|static
name|void
name|copyDirectoryRecursively
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|source
operator|.
name|toPath
argument_list|()
argument_list|,
operator|new
name|TreeCopier
argument_list|(
name|source
operator|.
name|toPath
argument_list|()
argument_list|,
name|destination
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TreeCopier
specifier|static
class|class
name|TreeCopier
extends|extends
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
block|{
DECL|field|source
specifier|private
specifier|final
name|Path
name|source
decl_stmt|;
DECL|field|target
specifier|private
specifier|final
name|Path
name|target
decl_stmt|;
DECL|method|TreeCopier
name|TreeCopier
parameter_list|(
name|Path
name|source
parameter_list|,
name|Path
name|target
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preVisitDirectory
specifier|public
name|FileVisitResult
name|preVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
block|{
name|Path
name|newDir
init|=
name|target
operator|.
name|resolve
argument_list|(
name|source
operator|.
name|relativize
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|copy
argument_list|(
name|dir
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|x
parameter_list|)
block|{
comment|// We ignore this
block|}
catch|catch
parameter_list|(
name|IOException
name|x
parameter_list|)
block|{
return|return
name|SKIP_SUBTREE
return|;
block|}
return|return
name|CONTINUE
return|;
block|}
annotation|@
name|Override
DECL|method|visitFile
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|newFile
init|=
name|target
operator|.
name|resolve
argument_list|(
name|source
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|copy
argument_list|(
name|file
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|x
parameter_list|)
block|{
comment|// We ignore this
block|}
return|return
name|CONTINUE
return|;
block|}
block|}
block|}
end_class

end_unit

