begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|FileSystemUtils
specifier|public
class|class
name|FileSystemUtils
block|{
DECL|field|logger
specifier|private
specifier|static
name|ESLogger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileSystemUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|mkdirsStallTimeout
specifier|private
specifier|static
specifier|final
name|long
name|mkdirsStallTimeout
init|=
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
operator|.
name|millis
argument_list|()
decl_stmt|;
DECL|field|mkdirsMutex
specifier|private
specifier|static
specifier|final
name|Object
name|mkdirsMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|mkdirsThread
specifier|private
specifier|static
specifier|volatile
name|Thread
name|mkdirsThread
decl_stmt|;
DECL|field|mkdirsStartTime
specifier|private
specifier|static
specifier|volatile
name|long
name|mkdirsStartTime
decl_stmt|;
DECL|method|mkdirs
specifier|public
specifier|static
name|boolean
name|mkdirs
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mkdirsMutex
init|)
block|{
try|try
block|{
name|mkdirsThread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
name|mkdirsStartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
return|return
name|dir
operator|.
name|mkdirs
argument_list|()
return|;
block|}
finally|finally
block|{
name|mkdirsThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkMkdirsStall
specifier|public
specifier|static
name|void
name|checkMkdirsStall
parameter_list|(
name|long
name|currentTime
parameter_list|)
block|{
name|Thread
name|mkdirsThread1
init|=
name|mkdirsThread
decl_stmt|;
name|long
name|stallTime
init|=
name|currentTime
operator|-
name|mkdirsStartTime
decl_stmt|;
if|if
condition|(
name|mkdirsThread1
operator|!=
literal|null
operator|&&
operator|(
name|stallTime
operator|>
name|mkdirsStallTimeout
operator|)
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"mkdirs stalled for {} on {}, trying to interrupt"
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|stallTime
argument_list|)
argument_list|,
name|mkdirsThread1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mkdirsThread1
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// try and interrupt it...
block|}
block|}
DECL|method|hasExtensions
specifier|public
specifier|static
name|boolean
name|hasExtensions
parameter_list|(
name|File
name|root
parameter_list|,
name|String
modifier|...
name|extensions
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|root
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|boolean
name|has
init|=
name|hasExtensions
argument_list|(
name|child
argument_list|,
name|extensions
argument_list|)
decl_stmt|;
if|if
condition|(
name|has
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|extension
range|:
name|extensions
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|extension
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns true if at least one of the files exists.      */
DECL|method|exists
specifier|public
specifier|static
name|boolean
name|exists
parameter_list|(
name|File
modifier|...
name|files
parameter_list|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|deleteRecursively
specifier|public
specifier|static
name|boolean
name|deleteRecursively
parameter_list|(
name|File
index|[]
name|roots
parameter_list|)
block|{
name|boolean
name|deleted
init|=
literal|true
decl_stmt|;
for|for
control|(
name|File
name|root
range|:
name|roots
control|)
block|{
name|deleted
operator|&=
name|deleteRecursively
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
return|return
name|deleted
return|;
block|}
DECL|method|deleteRecursively
specifier|public
specifier|static
name|boolean
name|deleteRecursively
parameter_list|(
name|File
name|root
parameter_list|)
block|{
return|return
name|deleteRecursively
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|innerDeleteRecursively
specifier|private
specifier|static
name|boolean
name|innerDeleteRecursively
parameter_list|(
name|File
name|root
parameter_list|)
block|{
return|return
name|deleteRecursively
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Delete the supplied {@link java.io.File} - for directories,      * recursively delete any nested directories or files as well.      *      * @param root       the root<code>File</code> to delete      * @param deleteRoot whether or not to delete the root itself or just the content of the root.      * @return<code>true</code> if the<code>File</code> was deleted,      *         otherwise<code>false</code>      */
DECL|method|deleteRecursively
specifier|public
specifier|static
name|boolean
name|deleteRecursively
parameter_list|(
name|File
name|root
parameter_list|,
name|boolean
name|deleteRoot
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|root
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|aChildren
range|:
name|children
control|)
block|{
name|innerDeleteRecursively
argument_list|(
name|aChildren
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|deleteRoot
condition|)
block|{
return|return
name|root
operator|.
name|delete
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
static|static
block|{
assert|assert
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|==
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
operator|.
name|LUCENE_47
operator|:
literal|"Use IOUtils#fsync instead of syncFile in Lucene 4.8"
assert|;
block|}
comment|/**      * Ensure that any writes to the given file is written to the storage device that contains it.      * @param fileToSync the file to fsync      * @param isDir if true, the given file is a directory (we open for read and ignore IOExceptions,      *  because not all file systems and operating systems allow to fsync on a directory)      */
DECL|method|syncFile
specifier|public
specifier|static
name|void
name|syncFile
parameter_list|(
name|File
name|fileToSync
parameter_list|,
name|boolean
name|isDir
parameter_list|)
throws|throws
name|IOException
block|{
name|IOException
name|exc
init|=
literal|null
decl_stmt|;
comment|// If the file is a directory we have to open read-only, for regular files we must open r/w for the fsync to have an effect.
comment|// See http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/
try|try
init|(
specifier|final
name|FileChannel
name|file
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|fileToSync
operator|.
name|toPath
argument_list|()
argument_list|,
name|isDir
condition|?
name|StandardOpenOption
operator|.
name|READ
else|:
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|retry
init|=
literal|0
init|;
name|retry
operator|<
literal|5
condition|;
name|retry
operator|++
control|)
block|{
try|try
block|{
name|file
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|exc
operator|==
literal|null
condition|)
block|{
name|exc
operator|=
name|ioe
expr_stmt|;
block|}
try|try
block|{
comment|// Pause 5 msec
name|Thread
operator|.
name|sleep
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|ThreadInterruptedException
name|ex
init|=
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
decl_stmt|;
name|ex
operator|.
name|addSuppressed
argument_list|(
name|exc
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|exc
operator|==
literal|null
condition|)
block|{
name|exc
operator|=
name|ioe
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isDir
condition|)
block|{
assert|assert
operator|(
name|Constants
operator|.
name|LINUX
operator|||
name|Constants
operator|.
name|MAC_OS_X
operator|)
operator|==
literal|false
operator|:
literal|"On Linux and MacOSX fsyncing a directory should not throw IOException, "
operator|+
literal|"we just don't want to rely on that in production (undocumented). Got: "
operator|+
name|exc
assert|;
comment|// Ignore exception if it is a directory
return|return;
block|}
comment|// Throw original exception
throw|throw
name|exc
throw|;
block|}
comment|/**      * Check that a directory exists, is a directory and is readable      * by the current user      */
DECL|method|isAccessibleDirectory
specifier|public
specifier|static
name|boolean
name|isAccessibleDirectory
parameter_list|(
name|File
name|directory
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
assert|assert
name|directory
operator|!=
literal|null
operator|&&
name|logger
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] directory does not exist."
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] should be a directory but is not."
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] directory is not readable."
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|FileSystemUtils
specifier|private
name|FileSystemUtils
parameter_list|()
block|{}
DECL|method|tryDeleteFile
specifier|public
specifier|static
name|void
name|tryDeleteFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
end_class

end_unit

