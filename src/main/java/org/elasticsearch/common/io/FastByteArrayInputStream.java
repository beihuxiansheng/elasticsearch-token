begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|FastByteArrayInputStream
specifier|public
class|class
name|FastByteArrayInputStream
extends|extends
name|InputStream
block|{
comment|/**      * An array of bytes that was provided      * by the creator of the stream. Elements<code>buf[0]</code>      * through<code>buf[count-1]</code> are the      * only bytes that can ever be read from the      * stream;  element<code>buf[pos]</code> is      * the next byte to be read.      */
DECL|field|buf
specifier|protected
name|byte
name|buf
index|[]
decl_stmt|;
comment|/**      * The index of the next character to read from the input stream buffer.      * This value should always be nonnegative      * and not larger than the value of<code>count</code>.      * The next byte to be read from the input stream buffer      * will be<code>buf[pos]</code>.      */
DECL|field|pos
specifier|protected
name|int
name|pos
decl_stmt|;
comment|/**      * The currently marked position in the stream.      * ByteArrayInputStream objects are marked at position zero by      * default when constructed.  They may be marked at another      * position within the buffer by the<code>mark()</code> method.      * The current buffer position is set to this point by the      *<code>reset()</code> method.      *<p/>      * If no mark has been set, then the value of mark is the offset      * passed to the constructor (or 0 if the offset was not supplied).      *      * @since JDK1.1      */
DECL|field|mark
specifier|protected
name|int
name|mark
init|=
literal|0
decl_stmt|;
comment|/**      * The index one greater than the last valid character in the input      * stream buffer.      * This value should always be nonnegative      * and not larger than the length of<code>buf</code>.      * It  is one greater than the position of      * the last byte within<code>buf</code> that      * can ever be read  from the input stream buffer.      */
DECL|field|count
specifier|protected
name|int
name|count
decl_stmt|;
comment|/**      * Creates a<code>ByteArrayInputStream</code>      * so that it  uses<code>buf</code> as its      * buffer array.      * The buffer array is not copied.      * The initial value of<code>pos</code>      * is<code>0</code> and the initial value      * of<code>count</code> is the length of      *<code>buf</code>.      *      * @param buf the input buffer.      */
DECL|method|FastByteArrayInputStream
specifier|public
name|FastByteArrayInputStream
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|buf
operator|.
name|length
expr_stmt|;
block|}
comment|/**      * Creates<code>ByteArrayInputStream</code>      * that uses<code>buf</code> as its      * buffer array. The initial value of<code>pos</code>      * is<code>offset</code> and the initial value      * of<code>count</code> is the minimum of<code>offset+length</code>      * and<code>buf.length</code>.      * The buffer array is not copied. The buffer's mark is      * set to the specified offset.      *      * @param buf    the input buffer.      * @param offset the offset in the buffer of the first byte to read.      * @param length the maximum number of bytes to read from the buffer.      */
DECL|method|FastByteArrayInputStream
specifier|public
name|FastByteArrayInputStream
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|Math
operator|.
name|min
argument_list|(
name|offset
operator|+
name|length
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|mark
operator|=
name|offset
expr_stmt|;
block|}
comment|/**      * Reads the next byte of data from this input stream. The value      * byte is returned as an<code>int</code> in the range      *<code>0</code> to<code>255</code>. If no byte is available      * because the end of the stream has been reached, the value      *<code>-1</code> is returned.      *<p/>      * This<code>read</code> method      * cannot block.      *      * @return the next byte of data, or<code>-1</code> if the end of the      *         stream has been reached.      */
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
block|{
return|return
operator|(
name|pos
operator|<
name|count
operator|)
condition|?
operator|(
name|buf
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
else|:
operator|-
literal|1
return|;
block|}
comment|/**      * Reads up to<code>len</code> bytes of data into an array of bytes      * from this input stream.      * If<code>pos</code> equals<code>count</code>,      * then<code>-1</code> is returned to indicate      * end of file. Otherwise, the  number<code>k</code>      * of bytes read is equal to the smaller of      *<code>len</code> and<code>count-pos</code>.      * If<code>k</code> is positive, then bytes      *<code>buf[pos]</code> through<code>buf[pos+k-1]</code>      * are copied into<code>b[off]</code>  through      *<code>b[off+k-1]</code> in the manner performed      * by<code>System.arraycopy</code>. The      * value<code>k</code> is added into<code>pos</code>      * and<code>k</code> is returned.      *<p/>      * This<code>read</code> method cannot block.      *      * @param b   the buffer into which the data is read.      * @param off the start offset in the destination array<code>b</code>      * @param len the maximum number of bytes read.      * @return the total number of bytes read into the buffer, or      *<code>-1</code> if there is no more data because the end of      *         the stream has been reached.      * @throws NullPointerException      If<code>b</code> is<code>null</code>.      * @throws IndexOutOfBoundsException If<code>off</code> is negative,      *<code>len</code> is negative, or<code>len</code> is greater than      *<code>b.length - off</code>      */
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|b
operator|.
name|length
operator|-
name|off
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|pos
operator|>=
name|count
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|pos
operator|+
name|len
operator|>
name|count
condition|)
block|{
name|len
operator|=
name|count
operator|-
name|pos
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|pos
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
comment|/**      * Skips<code>n</code> bytes of input from this input stream. Fewer      * bytes might be skipped if the end of the input stream is reached.      * The actual number<code>k</code>      * of bytes to be skipped is equal to the smaller      * of<code>n</code> and<code>count-pos</code>.      * The value<code>k</code> is added into<code>pos</code>      * and<code>k</code> is returned.      *      * @param n the number of bytes to be skipped.      * @return the actual number of bytes skipped.      */
DECL|method|skip
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|+
name|n
operator|>
name|count
condition|)
block|{
name|n
operator|=
name|count
operator|-
name|pos
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|pos
operator|+=
name|n
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**      * Returns the number of remaining bytes that can be read (or skipped over)      * from this input stream.      *<p/>      * The value returned is<code>count&nbsp;- pos</code>,      * which is the number of bytes remaining to be read from the input buffer.      *      * @return the number of remaining bytes that can be read (or skipped      *         over) from this input stream without blocking.      */
DECL|method|available
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
name|count
operator|-
name|pos
return|;
block|}
DECL|method|position
specifier|public
name|int
name|position
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
comment|/**      * Tests if this<code>InputStream</code> supports mark/reset. The      *<code>markSupported</code> method of<code>ByteArrayInputStream</code>      * always returns<code>true</code>.      *      * @since JDK1.1      */
DECL|method|markSupported
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Set the current marked position in the stream.      * ByteArrayInputStream objects are marked at position zero by      * default when constructed.  They may be marked at another      * position within the buffer by this method.      *<p/>      * If no mark has been set, then the value of the mark is the      * offset passed to the constructor (or 0 if the offset was not      * supplied).      *<p/>      *<p> Note: The<code>readAheadLimit</code> for this class      * has no meaning.      *      * @since JDK1.1      */
DECL|method|mark
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readAheadLimit
parameter_list|)
block|{
name|mark
operator|=
name|pos
expr_stmt|;
block|}
comment|/**      * Resets the buffer to the marked position.  The marked position      * is 0 unless another position was marked or an offset was specified      * in the constructor.      */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|pos
operator|=
name|mark
expr_stmt|;
block|}
comment|/**      * Closing a<tt>ByteArrayInputStream</tt> has no effect. The methods in      * this class can be called after the stream has been closed without      * generating an<tt>IOException</tt>.      *<p/>      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
end_class

end_unit

