begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|GatheringByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_class
DECL|class|Channels
specifier|public
specifier|final
class|class
name|Channels
block|{
DECL|method|Channels
specifier|private
name|Channels
parameter_list|()
block|{     }
comment|/**      * The maximum chunk size for reads in bytes      */
DECL|field|READ_CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|READ_CHUNK_SIZE
init|=
literal|16384
decl_stmt|;
comment|/**      * The maximum chunk size for writes in bytes      */
DECL|field|WRITE_CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|WRITE_CHUNK_SIZE
init|=
literal|8192
decl_stmt|;
comment|/**      * read<i>length</i> bytes from<i>position</i> of a file channel      */
DECL|method|readFromFileChannel
specifier|public
specifier|static
name|byte
index|[]
name|readFromFileChannel
parameter_list|(
name|FileChannel
name|channel
parameter_list|,
name|long
name|position
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|res
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|readFromFileChannelWithEofException
argument_list|(
name|channel
argument_list|,
name|position
argument_list|,
name|res
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/**      * read<i>length</i> bytes from<i>position</i> of a file channel. An EOFException will be thrown if you      * attempt to read beyond the end of file.      *      * @param channel         channel to read from      * @param channelPosition position to read from      * @param dest            destination byte array to put data in      * @param destOffset      offset in dest to read into      * @param length          number of bytes to read      */
DECL|method|readFromFileChannelWithEofException
specifier|public
specifier|static
name|void
name|readFromFileChannelWithEofException
parameter_list|(
name|FileChannel
name|channel
parameter_list|,
name|long
name|channelPosition
parameter_list|,
name|byte
index|[]
name|dest
parameter_list|,
name|int
name|destOffset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|readFromFileChannel
argument_list|(
name|channel
argument_list|,
name|channelPosition
argument_list|,
name|dest
argument_list|,
name|destOffset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"read past EOF. pos ["
operator|+
name|channelPosition
operator|+
literal|"] length: ["
operator|+
name|length
operator|+
literal|"] end: ["
operator|+
name|channel
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * read<i>length</i> bytes from<i>position</i> of a file channel.      *      * @param channel         channel to read from      * @param channelPosition position to read from      * @param dest            destination byte array to put data in      * @param destOffset      offset in dest to read into      * @param length          number of bytes to read      * @return total bytes read or -1 if an attempt was made to read past EOF. The method always tries to read all the bytes      * that will fit in the destination byte buffer.      */
DECL|method|readFromFileChannel
specifier|public
specifier|static
name|int
name|readFromFileChannel
parameter_list|(
name|FileChannel
name|channel
parameter_list|,
name|long
name|channelPosition
parameter_list|,
name|byte
index|[]
name|dest
parameter_list|,
name|int
name|destOffset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dest
argument_list|,
name|destOffset
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
name|readFromFileChannel
argument_list|(
name|channel
argument_list|,
name|channelPosition
argument_list|,
name|buffer
argument_list|)
return|;
block|}
comment|/**      * read from a file channel into a byte buffer, starting at a certain position.      *      * @param channel         channel to read from      * @param channelPosition position to read from      * @param dest            destination {@link java.nio.ByteBuffer} to put data in      * @return total bytes read or -1 if an attempt was made to read past EOF. The method always tries to read all the bytes      * that will fit in the destination byte buffer.      */
DECL|method|readFromFileChannel
specifier|public
specifier|static
name|int
name|readFromFileChannel
parameter_list|(
name|FileChannel
name|channel
parameter_list|,
name|long
name|channelPosition
parameter_list|,
name|ByteBuffer
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dest
operator|.
name|isDirect
argument_list|()
operator|||
operator|(
name|dest
operator|.
name|remaining
argument_list|()
operator|<
name|READ_CHUNK_SIZE
operator|)
condition|)
block|{
return|return
name|readSingleChunk
argument_list|(
name|channel
argument_list|,
name|channelPosition
argument_list|,
name|dest
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|bytesRead
init|=
literal|0
decl_stmt|;
name|int
name|bytesToRead
init|=
name|dest
operator|.
name|remaining
argument_list|()
decl_stmt|;
comment|// duplicate the buffer in order to be able to change the limit
name|ByteBuffer
name|tmpBuffer
init|=
name|dest
operator|.
name|duplicate
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|dest
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|tmpBuffer
operator|.
name|limit
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|dest
operator|.
name|limit
argument_list|()
argument_list|,
name|tmpBuffer
operator|.
name|position
argument_list|()
operator|+
name|READ_CHUNK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|read
init|=
name|readSingleChunk
argument_list|(
name|channel
argument_list|,
name|channelPosition
argument_list|,
name|tmpBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|<
literal|0
condition|)
block|{
return|return
name|read
return|;
block|}
name|bytesRead
operator|+=
name|read
expr_stmt|;
name|channelPosition
operator|+=
name|read
expr_stmt|;
name|dest
operator|.
name|position
argument_list|(
name|tmpBuffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// make sure we update byteBuffer to indicate how far we came..
name|dest
operator|.
name|position
argument_list|(
name|tmpBuffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|bytesRead
operator|==
name|bytesToRead
operator|:
literal|"failed to read an entire buffer but also didn't get an EOF (read ["
operator|+
name|bytesRead
operator|+
literal|"] needed ["
operator|+
name|bytesToRead
operator|+
literal|"]"
assert|;
return|return
name|bytesRead
return|;
block|}
block|}
DECL|method|readSingleChunk
specifier|private
specifier|static
name|int
name|readSingleChunk
parameter_list|(
name|FileChannel
name|channel
parameter_list|,
name|long
name|channelPosition
parameter_list|,
name|ByteBuffer
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|dest
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|read
init|=
name|channel
operator|.
name|read
argument_list|(
name|dest
argument_list|,
name|channelPosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|<
literal|0
condition|)
block|{
return|return
name|read
return|;
block|}
assert|assert
name|read
operator|>
literal|0
operator|:
literal|"FileChannel.read with non zero-length bb.remaining() must always read at least one byte (FileChannel is in blocking mode, see spec of ReadableByteChannel)"
assert|;
name|bytesRead
operator|+=
name|read
expr_stmt|;
name|channelPosition
operator|+=
name|read
expr_stmt|;
block|}
return|return
name|bytesRead
return|;
block|}
comment|/**      * Copies bytes from source {@link org.jboss.netty.buffer.ChannelBuffer} to a {@link java.nio.channels.GatheringByteChannel}      *      * @param source      ChannelBuffer to copy from      * @param sourceIndex index in<i>source</i> to start copying from      * @param length      how many bytes to copy      * @param channel     target GatheringByteChannel      * @throws IOException      */
DECL|method|writeToChannel
specifier|public
specifier|static
name|void
name|writeToChannel
parameter_list|(
name|ChannelBuffer
name|source
parameter_list|,
name|int
name|sourceIndex
parameter_list|,
name|int
name|length
parameter_list|,
name|GatheringByteChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|written
init|=
name|source
operator|.
name|getBytes
argument_list|(
name|sourceIndex
argument_list|,
name|channel
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|sourceIndex
operator|+=
name|written
expr_stmt|;
name|length
operator|-=
name|written
expr_stmt|;
block|}
assert|assert
name|length
operator|==
literal|0
assert|;
block|}
comment|/**      * Writes part of a byte array to a {@link java.nio.channels.WritableByteChannel}      *      * @param source  byte array to copy from      * @param channel target WritableByteChannel      * @throws IOException      */
DECL|method|writeToChannel
specifier|public
specifier|static
name|void
name|writeToChannel
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|WritableByteChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
name|writeToChannel
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes part of a byte array to a {@link java.nio.channels.WritableByteChannel}      *      * @param source  byte array to copy from      * @param offset  start copying from this offset      * @param length  how many bytes to copy      * @param channel target WritableByteChannel      * @throws IOException      */
DECL|method|writeToChannel
specifier|public
specifier|static
name|void
name|writeToChannel
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|WritableByteChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|toWrite
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|WRITE_CHUNK_SIZE
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|toWrite
argument_list|)
decl_stmt|;
name|int
name|written
init|=
name|channel
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|length
operator|-=
name|written
expr_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|toWrite
operator|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|WRITE_CHUNK_SIZE
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|+
name|toWrite
argument_list|)
expr_stmt|;
name|written
operator|=
name|channel
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|length
operator|-=
name|written
expr_stmt|;
block|}
assert|assert
name|length
operator|==
literal|0
operator|:
literal|"wrote more then expected bytes (length="
operator|+
name|length
operator|+
literal|")"
assert|;
block|}
comment|/**      * Writes a {@link java.nio.ByteBuffer} to a {@link java.nio.channels.WritableByteChannel}      *      * @param byteBuffer source buffer      * @param channel    channel to write to      * @throws IOException      */
DECL|method|writeToChannel
specifier|public
specifier|static
name|void
name|writeToChannel
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|,
name|WritableByteChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|byteBuffer
operator|.
name|isDirect
argument_list|()
operator|||
operator|(
name|byteBuffer
operator|.
name|remaining
argument_list|()
operator|<=
name|WRITE_CHUNK_SIZE
operator|)
condition|)
block|{
while|while
condition|(
name|byteBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|channel
operator|.
name|write
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// duplicate the buffer in order to be able to change the limit
name|ByteBuffer
name|tmpBuffer
init|=
name|byteBuffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|byteBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|tmpBuffer
operator|.
name|limit
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|byteBuffer
operator|.
name|limit
argument_list|()
argument_list|,
name|tmpBuffer
operator|.
name|position
argument_list|()
operator|+
name|WRITE_CHUNK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|tmpBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|channel
operator|.
name|write
argument_list|(
name|tmpBuffer
argument_list|)
expr_stmt|;
block|}
name|byteBuffer
operator|.
name|position
argument_list|(
name|tmpBuffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// make sure we update byteBuffer to indicate how far we came..
name|byteBuffer
operator|.
name|position
argument_list|(
name|tmpBuffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

