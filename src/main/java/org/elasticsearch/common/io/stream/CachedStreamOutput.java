begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|jsr166y
operator|.
name|LinkedTransferQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|CachedStreamOutput
specifier|public
class|class
name|CachedStreamOutput
block|{
DECL|method|newEntry
specifier|private
specifier|static
name|Entry
name|newEntry
parameter_list|()
block|{
name|BytesStreamOutput
name|bytes
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|HandlesStreamOutput
name|handles
init|=
operator|new
name|HandlesStreamOutput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
return|return
operator|new
name|Entry
argument_list|(
name|bytes
argument_list|,
name|handles
argument_list|)
return|;
block|}
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
block|{
DECL|field|bytes
specifier|private
specifier|final
name|BytesStreamOutput
name|bytes
decl_stmt|;
DECL|field|handles
specifier|private
specifier|final
name|HandlesStreamOutput
name|handles
decl_stmt|;
DECL|field|lzf
specifier|private
name|LZFStreamOutput
name|lzf
decl_stmt|;
DECL|method|Entry
name|Entry
parameter_list|(
name|BytesStreamOutput
name|bytes
parameter_list|,
name|HandlesStreamOutput
name|handles
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|handles
operator|=
name|handles
expr_stmt|;
block|}
comment|// lazily initialize LZF, so we won't allocate it if we don't do
comment|// any compression
DECL|method|lzf
specifier|private
name|LZFStreamOutput
name|lzf
parameter_list|()
block|{
if|if
condition|(
name|lzf
operator|==
literal|null
condition|)
block|{
name|lzf
operator|=
operator|new
name|LZFStreamOutput
argument_list|(
name|bytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|lzf
return|;
block|}
comment|/**          * Returns the underlying bytes without any resetting.          */
DECL|method|bytes
specifier|public
name|BytesStreamOutput
name|bytes
parameter_list|()
block|{
return|return
name|bytes
return|;
block|}
comment|/**          * Returns cached bytes that are also reset.          */
DECL|method|cachedBytes
specifier|public
name|BytesStreamOutput
name|cachedBytes
parameter_list|()
block|{
name|bytes
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|bytes
return|;
block|}
DECL|method|cachedLZFBytes
specifier|public
name|LZFStreamOutput
name|cachedLZFBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|LZFStreamOutput
name|lzf
init|=
name|lzf
argument_list|()
decl_stmt|;
name|lzf
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|lzf
return|;
block|}
DECL|method|cachedHandlesLzfBytes
specifier|public
name|HandlesStreamOutput
name|cachedHandlesLzfBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|LZFStreamOutput
name|lzf
init|=
name|lzf
argument_list|()
decl_stmt|;
name|handles
operator|.
name|reset
argument_list|(
name|lzf
argument_list|)
expr_stmt|;
return|return
name|handles
return|;
block|}
DECL|method|cachedHandlesBytes
specifier|public
name|HandlesStreamOutput
name|cachedHandlesBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|handles
operator|.
name|reset
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|handles
return|;
block|}
block|}
DECL|class|SoftWrapper
specifier|static
class|class
name|SoftWrapper
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|ref
specifier|private
name|SoftReference
argument_list|<
name|T
argument_list|>
name|ref
decl_stmt|;
DECL|method|SoftWrapper
specifier|public
name|SoftWrapper
parameter_list|()
block|{         }
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|T
name|ref
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
operator|new
name|SoftReference
argument_list|<
name|T
argument_list|>
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|ref
operator|==
literal|null
condition|?
literal|null
else|:
name|ref
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|ref
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|field|cache
specifier|private
specifier|static
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|Entry
argument_list|>
argument_list|>
name|cache
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|Entry
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|counter
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|BYTES_LIMIT
specifier|public
specifier|static
name|int
name|BYTES_LIMIT
init|=
literal|1
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// don't cache entries that are bigger than that...
DECL|field|COUNT_LIMIT
specifier|public
specifier|static
name|int
name|COUNT_LIMIT
init|=
literal|100
decl_stmt|;
DECL|method|clear
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|popEntry
specifier|public
specifier|static
name|Entry
name|popEntry
parameter_list|()
block|{
name|Queue
argument_list|<
name|Entry
argument_list|>
name|ref
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
name|newEntry
argument_list|()
return|;
block|}
name|Entry
name|entry
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
name|newEntry
argument_list|()
return|;
block|}
name|counter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|pushEntry
specifier|public
specifier|static
name|void
name|pushEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|bytes
argument_list|()
operator|.
name|underlyingBytes
argument_list|()
operator|.
name|length
operator|>
name|BYTES_LIMIT
condition|)
block|{
return|return;
block|}
name|Queue
argument_list|<
name|Entry
argument_list|>
name|ref
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
operator|new
name|LinkedTransferQueue
argument_list|<
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
operator|>
name|COUNT_LIMIT
condition|)
block|{
name|counter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

