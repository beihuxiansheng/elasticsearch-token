begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
operator|.
name|BufferRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
operator|.
name|ChunkEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
operator|.
name|LZFChunk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|LZFStreamOutput
specifier|public
class|class
name|LZFStreamOutput
extends|extends
name|StreamOutput
block|{
DECL|field|OUTPUT_BUFFER_SIZE
specifier|private
specifier|static
name|int
name|OUTPUT_BUFFER_SIZE
init|=
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
decl_stmt|;
DECL|field|_encoder
specifier|private
specifier|final
name|ChunkEncoder
name|_encoder
decl_stmt|;
DECL|field|_recycler
specifier|private
specifier|final
name|BufferRecycler
name|_recycler
decl_stmt|;
DECL|field|_outputStream
specifier|protected
name|StreamOutput
name|_outputStream
decl_stmt|;
DECL|field|_outputBuffer
specifier|protected
name|byte
index|[]
name|_outputBuffer
decl_stmt|;
DECL|field|_position
specifier|protected
name|int
name|_position
init|=
literal|0
decl_stmt|;
comment|/**      * Configuration setting that governs whether basic 'flush()' should      * first complete a block or not.      *<p/>      * Default value is 'true'      *      * @since 0.8      */
DECL|field|_cfgFinishBlockOnFlush
specifier|protected
name|boolean
name|_cfgFinishBlockOnFlush
init|=
literal|true
decl_stmt|;
DECL|field|neverClose
specifier|private
specifier|final
name|boolean
name|neverClose
decl_stmt|;
DECL|method|LZFStreamOutput
specifier|public
name|LZFStreamOutput
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|boolean
name|neverClose
parameter_list|)
block|{
name|this
operator|.
name|neverClose
operator|=
name|neverClose
expr_stmt|;
name|_recycler
operator|=
name|neverClose
condition|?
operator|new
name|BufferRecycler
argument_list|()
else|:
name|BufferRecycler
operator|.
name|instance
argument_list|()
expr_stmt|;
name|_encoder
operator|=
operator|new
name|ChunkEncoder
argument_list|(
name|OUTPUT_BUFFER_SIZE
argument_list|,
name|_recycler
argument_list|)
expr_stmt|;
name|_outputStream
operator|=
name|out
expr_stmt|;
name|_outputBuffer
operator|=
name|_recycler
operator|.
name|allocOutputBuffer
argument_list|(
name|OUTPUT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|int
name|singleByte
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|_position
operator|>=
name|_outputBuffer
operator|.
name|length
condition|)
block|{
name|writeCompressedBlock
argument_list|()
expr_stmt|;
block|}
name|_outputBuffer
index|[
name|_position
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|singleByte
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|_position
operator|>=
name|_outputBuffer
operator|.
name|length
condition|)
block|{
name|writeCompressedBlock
argument_list|()
expr_stmt|;
block|}
name|_outputBuffer
index|[
name|_position
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ES, check if length is 0, and don't write in this case
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|BUFFER_LEN
init|=
name|_outputBuffer
operator|.
name|length
decl_stmt|;
comment|// simple case first: buffering only (for trivially short writes)
name|int
name|free
init|=
name|BUFFER_LEN
operator|-
name|_position
decl_stmt|;
if|if
condition|(
name|free
operator|>=
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|_outputBuffer
argument_list|,
name|_position
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|_position
operator|+=
name|length
expr_stmt|;
return|return;
block|}
comment|// otherwise, copy whatever we can, flush
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|_outputBuffer
argument_list|,
name|_position
argument_list|,
name|free
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|free
expr_stmt|;
name|length
operator|-=
name|free
expr_stmt|;
name|_position
operator|+=
name|free
expr_stmt|;
name|writeCompressedBlock
argument_list|()
expr_stmt|;
comment|// then write intermediate full block, if any, without copying:
while|while
condition|(
name|length
operator|>=
name|BUFFER_LEN
condition|)
block|{
name|_encoder
operator|.
name|encodeAndWriteChunk
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|BUFFER_LEN
argument_list|,
name|_outputStream
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|BUFFER_LEN
expr_stmt|;
name|length
operator|-=
name|BUFFER_LEN
expr_stmt|;
block|}
comment|// and finally, copy leftovers in buffer, if any
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|_outputBuffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|_position
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|_cfgFinishBlockOnFlush
operator|&&
name|_position
operator|>
literal|0
condition|)
block|{
name|writeCompressedBlock
argument_list|()
expr_stmt|;
block|}
name|_outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|_position
operator|>
literal|0
condition|)
block|{
name|writeCompressedBlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|neverClose
condition|)
block|{
comment|// just reset here the LZF stream (not the underlying stream, since we might want to read from it)
name|_position
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|_outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|_encoder
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buf
init|=
name|_outputBuffer
decl_stmt|;
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
name|_outputBuffer
operator|=
literal|null
expr_stmt|;
name|_recycler
operator|.
name|releaseOutputBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|_outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|_position
operator|=
literal|0
expr_stmt|;
name|_outputStream
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|_outputStream
operator|=
name|out
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|wrappedOut
specifier|public
name|StreamOutput
name|wrappedOut
parameter_list|()
block|{
return|return
name|this
operator|.
name|_outputStream
return|;
block|}
comment|/**      * Compress and write the current block to the OutputStream      */
DECL|method|writeCompressedBlock
specifier|private
name|void
name|writeCompressedBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|left
init|=
name|_position
decl_stmt|;
name|_position
operator|=
literal|0
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
do|do
block|{
name|int
name|chunkLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|LZFChunk
operator|.
name|MAX_CHUNK_LEN
argument_list|,
name|left
argument_list|)
decl_stmt|;
name|_encoder
operator|.
name|encodeAndWriteChunk
argument_list|(
name|_outputBuffer
argument_list|,
name|offset
argument_list|,
name|chunkLen
argument_list|,
name|_outputStream
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|chunkLen
expr_stmt|;
name|left
operator|-=
name|chunkLen
expr_stmt|;
block|}
do|while
condition|(
name|left
operator|>
literal|0
condition|)
do|;
block|}
block|}
end_class

end_unit

