begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.rounding
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A strategy for rounding long values.  */
end_comment

begin_interface
DECL|interface|Rounding
specifier|public
interface|interface
name|Rounding
extends|extends
name|Streamable
block|{
DECL|method|id
name|byte
name|id
parameter_list|()
function_decl|;
comment|/**      * Rounds the given value.      *      * @param value The value to round.      * @return      The rounded value.      */
DECL|method|round
name|long
name|round
parameter_list|(
name|long
name|value
parameter_list|)
function_decl|;
comment|/**      * Given the rounded value (which was potentially generated by {@link #round(long)}, returns the next rounding value. For example, with      * interval based rounding, if the interval is 3, {@code nextRoundValue(6) = 9 }.      *      * @param value The current rounding value      * @return      The next rounding value;      */
DECL|method|nextRoundingValue
name|long
name|nextRoundingValue
parameter_list|(
name|long
name|value
parameter_list|)
function_decl|;
comment|/**      * Rounding strategy which is based on an interval      *      * {@code rounded = value - (value % interval) }      */
DECL|class|Interval
specifier|public
specifier|static
class|class
name|Interval
implements|implements
name|Rounding
block|{
DECL|field|ID
specifier|final
specifier|static
name|byte
name|ID
init|=
literal|0
decl_stmt|;
DECL|field|interval
specifier|private
name|long
name|interval
decl_stmt|;
DECL|method|Interval
specifier|public
name|Interval
parameter_list|()
block|{
comment|// for serialization
block|}
comment|/**          * Creates a new interval rounding.          *          * @param interval The interval          */
DECL|method|Interval
specifier|public
name|Interval
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
DECL|method|round
specifier|static
name|long
name|round
parameter_list|(
name|long
name|value
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|long
name|rem
init|=
name|value
operator|%
name|interval
decl_stmt|;
comment|// We need this condition because % may return a negative result on negative numbers
comment|// According to Google caliper's IntModBenchmark, using a condition is faster than attempts to use tricks to avoid
comment|// the condition. Moreover, in our case, the condition is very likely to be always true (dates, prices, distances),
comment|// so easily predictable by the CPU
if|if
condition|(
name|rem
operator|<
literal|0
condition|)
block|{
name|rem
operator|+=
name|interval
expr_stmt|;
block|}
return|return
name|value
operator|-
name|rem
return|;
block|}
annotation|@
name|Override
DECL|method|round
specifier|public
name|long
name|round
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|round
argument_list|(
name|value
argument_list|,
name|interval
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextRoundingValue
specifier|public
name|long
name|nextRoundingValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
assert|assert
name|value
operator|==
name|round
argument_list|(
name|value
argument_list|)
assert|;
return|return
name|value
operator|+
name|interval
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|interval
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Streams
specifier|public
specifier|static
class|class
name|Streams
block|{
DECL|method|write
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|Rounding
name|rounding
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|rounding
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|rounding
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|read
specifier|public
specifier|static
name|Rounding
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Rounding
name|rounding
init|=
literal|null
decl_stmt|;
name|byte
name|id
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|Interval
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|Interval
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimeZoneRounding
operator|.
name|TimeTimeZoneRoundingFloor
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|TimeTimeZoneRoundingFloor
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimeZoneRounding
operator|.
name|UTCTimeZoneRoundingFloor
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|UTCTimeZoneRoundingFloor
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimeZoneRounding
operator|.
name|DayTimeZoneRoundingFloor
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|DayTimeZoneRoundingFloor
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimeZoneRounding
operator|.
name|UTCIntervalTimeZoneRounding
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|UTCIntervalTimeZoneRounding
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimeZoneRounding
operator|.
name|TimeIntervalTimeZoneRounding
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|TimeIntervalTimeZoneRounding
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimeZoneRounding
operator|.
name|DayIntervalTimeZoneRounding
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|DayIntervalTimeZoneRounding
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimeZoneRounding
operator|.
name|FactorTimeZoneRounding
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|FactorTimeZoneRounding
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimeZoneRounding
operator|.
name|PrePostTimeZoneRounding
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|PrePostTimeZoneRounding
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unknown rounding id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|rounding
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|rounding
return|;
block|}
block|}
block|}
end_interface

end_unit

