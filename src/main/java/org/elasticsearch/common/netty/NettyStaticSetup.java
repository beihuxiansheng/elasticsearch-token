begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
operator|.
name|NettyInternalESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|logging
operator|.
name|InternalLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|logging
operator|.
name|InternalLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|ThreadNameDeterminer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|ThreadRenamingRunnable
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|NettyStaticSetup
specifier|public
class|class
name|NettyStaticSetup
block|{
DECL|field|ES_THREAD_NAME_DETERMINER
specifier|private
specifier|static
name|EsThreadNameDeterminer
name|ES_THREAD_NAME_DETERMINER
init|=
operator|new
name|EsThreadNameDeterminer
argument_list|()
decl_stmt|;
DECL|class|EsThreadNameDeterminer
specifier|public
specifier|static
class|class
name|EsThreadNameDeterminer
implements|implements
name|ThreadNameDeterminer
block|{
annotation|@
name|Override
DECL|method|determineThreadName
specifier|public
name|String
name|determineThreadName
parameter_list|(
name|String
name|currentThreadName
parameter_list|,
name|String
name|proposedThreadName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// we control the thread name with a context, so use both
return|return
name|currentThreadName
operator|+
literal|"{"
operator|+
name|proposedThreadName
operator|+
literal|"}"
return|;
block|}
block|}
static|static
block|{
name|InternalLoggerFactory
operator|.
name|setDefaultFactory
argument_list|(
operator|new
name|NettyInternalESLoggerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InternalLogger
name|newInstance
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|super
operator|.
name|newInstance
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|"org.jboss.netty."
argument_list|,
literal|"netty."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"org.jboss.netty."
argument_list|,
literal|"netty."
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ThreadRenamingRunnable
operator|.
name|setThreadNameDeterminer
argument_list|(
name|ES_THREAD_NAME_DETERMINER
argument_list|)
expr_stmt|;
block|}
DECL|method|setup
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{      }
block|}
end_class

end_unit

