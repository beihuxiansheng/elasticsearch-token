begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|CounterMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ChannelHandler
operator|.
name|Sharable
DECL|class|OpenChannelsHandler
specifier|public
class|class
name|OpenChannelsHandler
implements|implements
name|ChannelUpstreamHandler
block|{
DECL|field|openChannels
specifier|final
name|Set
argument_list|<
name|Channel
argument_list|>
name|openChannels
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
decl_stmt|;
DECL|field|openChannelsMetric
specifier|final
name|CounterMetric
name|openChannelsMetric
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|field|totalChannelsMetric
specifier|final
name|CounterMetric
name|totalChannelsMetric
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|field|logger
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|OpenChannelsHandler
specifier|public
name|OpenChannelsHandler
parameter_list|(
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
DECL|field|remover
specifier|final
name|ChannelFutureListener
name|remover
init|=
operator|new
name|ChannelFutureListener
argument_list|()
block|{
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|removed
init|=
name|openChannels
operator|.
name|remove
argument_list|(
name|future
operator|.
name|getChannel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|openChannelsMetric
operator|.
name|dec
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"channel closed: {}"
argument_list|,
name|future
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|handleUpstream
specifier|public
name|void
name|handleUpstream
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ChannelEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|e
operator|instanceof
name|ChannelStateEvent
condition|)
block|{
name|ChannelStateEvent
name|evt
init|=
operator|(
name|ChannelStateEvent
operator|)
name|e
decl_stmt|;
comment|// OPEN is also sent to when closing channel, but with FALSE on it to indicate it closes
if|if
condition|(
name|evt
operator|.
name|getState
argument_list|()
operator|==
name|ChannelState
operator|.
name|OPEN
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|evt
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"channel opened: {}"
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|added
init|=
name|openChannels
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|added
condition|)
block|{
name|openChannelsMetric
operator|.
name|inc
argument_list|()
expr_stmt|;
name|totalChannelsMetric
operator|.
name|inc
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
name|remover
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ctx
operator|.
name|sendUpstream
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|numberOfOpenChannels
specifier|public
name|long
name|numberOfOpenChannels
parameter_list|()
block|{
return|return
name|openChannelsMetric
operator|.
name|count
argument_list|()
return|;
block|}
DECL|method|totalChannels
specifier|public
name|long
name|totalChannels
parameter_list|()
block|{
return|return
name|totalChannelsMetric
operator|.
name|count
argument_list|()
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|Channel
name|channel
range|:
name|openChannels
control|)
block|{
name|channel
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

