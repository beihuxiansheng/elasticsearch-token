begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PrioritizedRunnable
specifier|public
specifier|abstract
class|class
name|PrioritizedRunnable
implements|implements
name|Runnable
implements|,
name|Comparable
argument_list|<
name|PrioritizedRunnable
argument_list|>
block|{
DECL|field|priority
specifier|private
specifier|final
name|Priority
name|priority
decl_stmt|;
DECL|method|wrap
specifier|public
specifier|static
name|PrioritizedRunnable
name|wrap
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
return|return
operator|new
name|Wrapped
argument_list|(
name|runnable
argument_list|,
name|priority
argument_list|)
return|;
block|}
DECL|method|PrioritizedRunnable
specifier|protected
name|PrioritizedRunnable
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|PrioritizedRunnable
name|pr
parameter_list|)
block|{
return|return
name|priority
operator|.
name|compareTo
argument_list|(
name|pr
operator|.
name|priority
argument_list|)
return|;
block|}
DECL|method|priority
specifier|public
name|Priority
name|priority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
DECL|class|Wrapped
specifier|static
class|class
name|Wrapped
extends|extends
name|PrioritizedRunnable
block|{
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|method|Wrapped
specifier|private
name|Wrapped
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|super
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

