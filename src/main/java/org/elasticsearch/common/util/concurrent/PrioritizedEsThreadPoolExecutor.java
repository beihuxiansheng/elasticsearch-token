begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * A prioritizing executor which uses a priority queue as a work queue. The jobs that will be submitted will be treated  * as {@link PrioritizedRunnable} and/or {@link PrioritizedCallable}, those tasks that are not instances of these two will  * be wrapped and assign a default {@link Priority#NORMAL} priority.  *  * Note, if two tasks have the same priority, the first to arrive will be executed first (FIFO style).  */
end_comment

begin_class
DECL|class|PrioritizedEsThreadPoolExecutor
specifier|public
class|class
name|PrioritizedEsThreadPoolExecutor
extends|extends
name|EsThreadPoolExecutor
block|{
DECL|field|tieBreaker
specifier|private
name|AtomicLong
name|tieBreaker
init|=
operator|new
name|AtomicLong
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
DECL|method|PrioritizedEsThreadPoolExecutor
specifier|public
name|PrioritizedEsThreadPoolExecutor
parameter_list|(
name|int
name|corePoolSize
parameter_list|,
name|int
name|maximumPoolSize
parameter_list|,
name|long
name|keepAliveTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|)
block|{
name|super
argument_list|(
name|corePoolSize
argument_list|,
name|maximumPoolSize
argument_list|,
name|keepAliveTime
argument_list|,
name|unit
argument_list|,
operator|new
name|PriorityBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|PrioritizedEsThreadPoolExecutor
specifier|public
name|PrioritizedEsThreadPoolExecutor
parameter_list|(
name|int
name|corePoolSize
parameter_list|,
name|int
name|maximumPoolSize
parameter_list|,
name|long
name|keepAliveTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|,
name|RejectedExecutionHandler
name|handler
parameter_list|)
block|{
name|super
argument_list|(
name|corePoolSize
argument_list|,
name|maximumPoolSize
argument_list|,
name|keepAliveTime
argument_list|,
name|unit
argument_list|,
operator|new
name|PriorityBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|threadFactory
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
DECL|method|PrioritizedEsThreadPoolExecutor
specifier|public
name|PrioritizedEsThreadPoolExecutor
parameter_list|(
name|int
name|corePoolSize
parameter_list|,
name|int
name|initialWorkQueuSize
parameter_list|,
name|int
name|maximumPoolSize
parameter_list|,
name|long
name|keepAliveTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|,
name|RejectedExecutionHandler
name|handler
parameter_list|)
block|{
name|super
argument_list|(
name|corePoolSize
argument_list|,
name|maximumPoolSize
argument_list|,
name|keepAliveTime
argument_list|,
name|unit
argument_list|,
operator|new
name|PriorityBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|initialWorkQueuSize
argument_list|)
argument_list|,
name|threadFactory
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|command
operator|instanceof
name|Comparable
operator|)
condition|)
block|{
name|command
operator|=
name|PrioritizedRunnable
operator|.
name|wrap
argument_list|(
name|command
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newTaskFor
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|RunnableFuture
argument_list|<
name|T
argument_list|>
name|newTaskFor
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|T
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|runnable
operator|instanceof
name|PrioritizedRunnable
operator|)
condition|)
block|{
name|runnable
operator|=
name|PrioritizedRunnable
operator|.
name|wrap
argument_list|(
name|runnable
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PrioritizedFutureTask
argument_list|<
name|T
argument_list|>
argument_list|(
operator|(
name|PrioritizedRunnable
operator|)
name|runnable
argument_list|,
name|value
argument_list|,
name|tieBreaker
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newTaskFor
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|RunnableFuture
argument_list|<
name|T
argument_list|>
name|newTaskFor
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|callable
operator|instanceof
name|PrioritizedCallable
operator|)
condition|)
block|{
name|callable
operator|=
name|PrioritizedCallable
operator|.
name|wrap
argument_list|(
name|callable
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PrioritizedFutureTask
argument_list|<
name|T
argument_list|>
argument_list|(
operator|(
name|PrioritizedCallable
argument_list|<
name|T
argument_list|>
operator|)
name|callable
argument_list|,
name|tieBreaker
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *      */
DECL|class|PrioritizedFutureTask
specifier|static
class|class
name|PrioritizedFutureTask
parameter_list|<
name|T
parameter_list|>
extends|extends
name|FutureTask
argument_list|<
name|T
argument_list|>
implements|implements
name|Comparable
argument_list|<
name|PrioritizedFutureTask
argument_list|>
block|{
DECL|field|priority
specifier|private
specifier|final
name|Priority
name|priority
decl_stmt|;
DECL|field|tieBreaker
specifier|private
specifier|final
name|long
name|tieBreaker
decl_stmt|;
DECL|method|PrioritizedFutureTask
specifier|public
name|PrioritizedFutureTask
parameter_list|(
name|PrioritizedRunnable
name|runnable
parameter_list|,
name|T
name|value
parameter_list|,
name|long
name|tieBreaker
parameter_list|)
block|{
name|super
argument_list|(
name|runnable
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|runnable
operator|.
name|priority
argument_list|()
expr_stmt|;
name|this
operator|.
name|tieBreaker
operator|=
name|tieBreaker
expr_stmt|;
block|}
DECL|method|PrioritizedFutureTask
specifier|public
name|PrioritizedFutureTask
parameter_list|(
name|PrioritizedCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|,
name|long
name|tieBreaker
parameter_list|)
block|{
name|super
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|callable
operator|.
name|priority
argument_list|()
expr_stmt|;
name|this
operator|.
name|tieBreaker
operator|=
name|tieBreaker
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|PrioritizedFutureTask
name|pft
parameter_list|)
block|{
name|int
name|res
init|=
name|priority
operator|.
name|compareTo
argument_list|(
name|pft
operator|.
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|0
condition|)
block|{
return|return
name|res
return|;
block|}
return|return
name|tieBreaker
operator|<
name|pft
operator|.
name|tieBreaker
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

