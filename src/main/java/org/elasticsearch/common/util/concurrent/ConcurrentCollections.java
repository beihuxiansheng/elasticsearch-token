begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|jsr166e
operator|.
name|ConcurrentHashMapV8
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ConcurrentCollections
specifier|public
specifier|abstract
class|class
name|ConcurrentCollections
block|{
DECL|field|useLinkedTransferQueue
specifier|private
specifier|final
specifier|static
name|boolean
name|useLinkedTransferQueue
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"es.useLinkedTransferQueue"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|aggressiveConcurrencyLevel
specifier|static
specifier|final
name|int
name|aggressiveConcurrencyLevel
decl_stmt|;
static|static
block|{
name|aggressiveConcurrencyLevel
operator|=
name|Math
operator|.
name|max
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|2
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new CHM with an aggressive concurrency level, aimed at high concurrent update rate long living maps.      */
DECL|method|newConcurrentMapWithAggressiveConcurrency
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newConcurrentMapWithAggressiveConcurrency
parameter_list|()
block|{
if|if
condition|(
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA8
condition|)
block|{
comment|// Just use JDK's impl when we are on Java8:
return|return
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
name|aggressiveConcurrencyLevel
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ConcurrentHashMapV8
argument_list|<>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
name|aggressiveConcurrencyLevel
argument_list|)
return|;
block|}
block|}
DECL|method|newConcurrentMap
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newConcurrentMap
parameter_list|()
block|{
if|if
condition|(
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA8
condition|)
block|{
comment|// Just use JDK's impl when we are on Java8:
return|return
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ConcurrentHashMapV8
argument_list|<>
argument_list|()
return|;
block|}
block|}
comment|/**      * Creates a new CHM with an aggressive concurrency level, aimed at highly updateable long living maps.      */
DECL|method|newConcurrentMapLongWithAggressiveConcurrency
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ConcurrentMapLong
argument_list|<
name|V
argument_list|>
name|newConcurrentMapLongWithAggressiveConcurrency
parameter_list|()
block|{
return|return
operator|new
name|ConcurrentHashMapLong
argument_list|<>
argument_list|(
name|ConcurrentCollections
operator|.
expr|<
name|Long
argument_list|,
name|V
operator|>
name|newConcurrentMapWithAggressiveConcurrency
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newConcurrentMapLong
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ConcurrentMapLong
argument_list|<
name|V
argument_list|>
name|newConcurrentMapLong
parameter_list|()
block|{
return|return
operator|new
name|ConcurrentHashMapLong
argument_list|<>
argument_list|(
name|ConcurrentCollections
operator|.
expr|<
name|Long
argument_list|,
name|V
operator|>
name|newConcurrentMap
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newConcurrentSet
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|Set
argument_list|<
name|V
argument_list|>
name|newConcurrentSet
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|newSetFromMap
argument_list|(
name|ConcurrentCollections
operator|.
expr|<
name|V
argument_list|,
name|Boolean
operator|>
name|newConcurrentMap
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newQueue
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queue
argument_list|<
name|T
argument_list|>
name|newQueue
parameter_list|()
block|{
if|if
condition|(
name|useLinkedTransferQueue
condition|)
block|{
return|return
operator|new
name|LinkedTransferQueue
argument_list|<>
argument_list|()
return|;
block|}
return|return
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|newDeque
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Deque
argument_list|<
name|T
argument_list|>
name|newDeque
parameter_list|()
block|{
return|return
operator|new
name|ConcurrentLinkedDeque
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|newBlockingQueue
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|BlockingQueue
argument_list|<
name|T
argument_list|>
name|newBlockingQueue
parameter_list|()
block|{
return|return
operator|new
name|LinkedTransferQueue
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|ConcurrentCollections
specifier|private
name|ConcurrentCollections
parameter_list|()
block|{      }
block|}
end_class

end_unit

