begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * A size based queue wrapping another blocking queue to provide (somewhat relaxed) capacity checks.  * Mainly makes sense to use with blocking queues that are unbounded to provide the ability to do  * capacity verification.  */
end_comment

begin_class
DECL|class|SizeBlockingQueue
specifier|public
class|class
name|SizeBlockingQueue
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractQueue
argument_list|<
name|E
argument_list|>
implements|implements
name|BlockingQueue
argument_list|<
name|E
argument_list|>
block|{
DECL|field|queue
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|queue
decl_stmt|;
DECL|field|capacity
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|AtomicInteger
name|size
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|SizeBlockingQueue
specifier|public
name|SizeBlockingQueue
parameter_list|(
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|queue
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
assert|assert
name|capacity
operator|>=
literal|0
assert|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|E
argument_list|>
name|it
init|=
name|queue
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
name|E
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|next
parameter_list|()
block|{
name|current
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|// note, we can't call #remove on the iterator because we need to know
comment|// if it was removed or not
if|if
condition|(
name|queue
operator|.
name|remove
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|peek
specifier|public
name|E
name|peek
parameter_list|()
block|{
return|return
name|queue
operator|.
name|peek
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|poll
specifier|public
name|E
name|poll
parameter_list|()
block|{
name|E
name|e
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|poll
specifier|public
name|E
name|poll
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|E
name|e
init|=
name|queue
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|boolean
name|v
init|=
name|queue
operator|.
name|remove
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
condition|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
comment|/**      * Forces adding an element to the queue, without doing size checks.      */
DECL|method|forcePut
specifier|public
name|void
name|forcePut
parameter_list|(
name|E
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|size
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|queue
operator|.
name|put
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
throw|throw
name|ie
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|offer
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|int
name|count
init|=
name|size
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|capacity
condition|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|offered
init|=
name|queue
operator|.
name|offer
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|offered
condition|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|offered
return|;
block|}
annotation|@
name|Override
DECL|method|offer
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// note, not used in ThreadPoolExecutor
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"offer with timeout not allowed on size queue"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|void
name|put
parameter_list|(
name|E
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// note, not used in ThreadPoolExecutor
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"put not allowed on size queue"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|take
specifier|public
name|E
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|E
name|e
decl_stmt|;
try|try
block|{
name|e
operator|=
name|queue
operator|.
name|take
argument_list|()
expr_stmt|;
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|ie
throw|;
block|}
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|remainingCapacity
specifier|public
name|int
name|remainingCapacity
parameter_list|()
block|{
return|return
name|capacity
operator|-
name|size
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|drainTo
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|int
name|v
init|=
name|queue
operator|.
name|drainTo
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|size
operator|.
name|addAndGet
argument_list|(
operator|-
name|v
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
annotation|@
name|Override
DECL|method|drainTo
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|,
name|int
name|maxElements
parameter_list|)
block|{
name|int
name|v
init|=
name|queue
operator|.
name|drainTo
argument_list|(
name|c
argument_list|,
name|maxElements
argument_list|)
decl_stmt|;
name|size
operator|.
name|addAndGet
argument_list|(
operator|-
name|v
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
annotation|@
name|Override
DECL|method|toArray
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|queue
operator|.
name|toArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toArray
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
return|return
operator|(
name|T
index|[]
operator|)
name|queue
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|queue
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAll
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|queue
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
end_class

end_unit

