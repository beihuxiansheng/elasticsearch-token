begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|DynamicExecutors
specifier|public
class|class
name|DynamicExecutors
block|{
comment|/**      * Creates a thread pool that creates new threads as needed, but will reuse      * previously constructed threads when they are available. Calls to      *<tt>execute</tt> will reuse previously constructed threads if      * available. If no existing thread is available, a new thread will be      * created and added to the pool. No more than<tt>max</tt> threads will      * be created. Threads that have not been used for a<tt>keepAlive</tt>      * timeout are terminated and removed from the cache. Thus, a pool that      * remains idle for long enough will not consume any resources other than      * the<tt>min</tt> specified.      *      * @param min           the number of threads to keep in the pool, even if they are      *                      idle.      * @param max           the maximum number of threads to allow in the pool.      * @param keepAliveTime when the number of threads is greater than the min,      *                      this is the maximum time that excess idle threads will wait      *                      for new tasks before terminating (in milliseconds).      * @return the newly created thread pool      */
DECL|method|newScalingThreadPool
specifier|public
specifier|static
name|ExecutorService
name|newScalingThreadPool
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|long
name|keepAliveTime
parameter_list|)
block|{
return|return
name|newScalingThreadPool
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|keepAliveTime
argument_list|,
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a thread pool, same as in      * {@link #newScalingThreadPool(int, int, long)}, using the provided      * ThreadFactory to create new threads when needed.      *      * @param min           the number of threads to keep in the pool, even if they are      *                      idle.      * @param max           the maximum number of threads to allow in the pool.      * @param keepAliveTime when the number of threads is greater than the min,      *                      this is the maximum time that excess idle threads will wait      *                      for new tasks before terminating (in milliseconds).      * @param threadFactory the factory to use when creating new threads.      * @return the newly created thread pool      */
DECL|method|newScalingThreadPool
specifier|public
specifier|static
name|ExecutorService
name|newScalingThreadPool
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|long
name|keepAliveTime
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|)
block|{
name|DynamicThreadPoolExecutor
operator|.
name|DynamicQueue
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|DynamicThreadPoolExecutor
operator|.
name|DynamicQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|DynamicThreadPoolExecutor
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|queue
argument_list|,
name|threadFactory
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setRejectedExecutionHandler
argument_list|(
operator|new
name|DynamicThreadPoolExecutor
operator|.
name|ForceQueuePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|setThreadPoolExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
comment|/**      * Creates a thread pool similar to that constructed by      * {@link #newScalingThreadPool(int, int, long)}, but blocks the call to      *<tt>execute</tt> if the queue has reached it's capacity, and all      *<tt>max</tt> threads are busy handling requests.      *<p/>      * If the wait time of this queue has elapsed, a      * {@link RejectedExecutionException} will be thrown.      *      * @param min           the number of threads to keep in the pool, even if they are      *                      idle.      * @param max           the maximum number of threads to allow in the pool.      * @param keepAliveTime when the number of threads is greater than the min,      *                      this is the maximum time that excess idle threads will wait      *                      for new tasks before terminating (in milliseconds).      * @param capacity      the fixed capacity of the underlying queue (resembles      *                      backlog).      * @param waitTime      the wait time (in milliseconds) for space to become      *                      available in the queue.      * @return the newly created thread pool      */
DECL|method|newBlockingThreadPool
specifier|public
specifier|static
name|ExecutorService
name|newBlockingThreadPool
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|long
name|keepAliveTime
parameter_list|,
name|int
name|capacity
parameter_list|,
name|long
name|waitTime
parameter_list|)
block|{
return|return
name|newBlockingThreadPool
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|keepAliveTime
argument_list|,
name|capacity
argument_list|,
name|waitTime
argument_list|,
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a thread pool, same as in      * {@link #newBlockingThreadPool(int, int, long, int, long)}, using the      * provided ThreadFactory to create new threads when needed.      *      * @param min           the number of threads to keep in the pool, even if they are      *                      idle.      * @param max           the maximum number of threads to allow in the pool.      * @param keepAliveTime when the number of threads is greater than the min,      *                      this is the maximum time that excess idle threads will wait      *                      for new tasks before terminating (in milliseconds).      * @param capacity      the fixed capacity of the underlying queue (resembles      *                      backlog).      * @param waitTime      the wait time (in milliseconds) for space to become      *                      available in the queue.      * @param threadFactory the factory to use when creating new threads.      * @return the newly created thread pool      */
DECL|method|newBlockingThreadPool
specifier|public
specifier|static
name|ExecutorService
name|newBlockingThreadPool
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|long
name|keepAliveTime
parameter_list|,
name|int
name|capacity
parameter_list|,
name|long
name|waitTime
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|)
block|{
name|DynamicThreadPoolExecutor
operator|.
name|DynamicQueue
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|DynamicThreadPoolExecutor
operator|.
name|DynamicQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|DynamicThreadPoolExecutor
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|queue
argument_list|,
name|threadFactory
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setRejectedExecutionHandler
argument_list|(
operator|new
name|DynamicThreadPoolExecutor
operator|.
name|TimedBlockingPolicy
argument_list|(
name|waitTime
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|setThreadPoolExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
block|}
end_class

end_unit

