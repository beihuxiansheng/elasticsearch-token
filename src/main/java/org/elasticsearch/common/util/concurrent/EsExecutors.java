begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|EsExecutors
specifier|public
class|class
name|EsExecutors
block|{
DECL|method|newCachedThreadPool
specifier|public
specifier|static
name|ExecutorService
name|newCachedThreadPool
parameter_list|(
name|TimeValue
name|keepAlive
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|)
block|{
return|return
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|keepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|threadFactory
argument_list|)
return|;
block|}
DECL|method|threadName
specifier|public
specifier|static
name|String
name|threadName
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|namePrefix
parameter_list|)
block|{
name|String
name|name
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"elasticsearch"
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|"elasticsearch["
operator|+
name|name
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|name
operator|+
name|namePrefix
return|;
block|}
DECL|method|daemonThreadFactory
specifier|public
specifier|static
name|ThreadFactory
name|daemonThreadFactory
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|namePrefix
parameter_list|)
block|{
return|return
name|daemonThreadFactory
argument_list|(
name|threadName
argument_list|(
name|settings
argument_list|,
name|namePrefix
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * A priority based thread factory, for all Thread priority constants:      *<tt>Thread.MIN_PRIORITY, Thread.NORM_PRIORITY, Thread.MAX_PRIORITY</tt>;      *<p/>      * This factory is used instead of Executers.DefaultThreadFactory to allow      * manipulation of priority and thread owner name.      *      * @param namePrefix a name prefix for this thread      * @return a thread factory based on given priority.      */
DECL|method|daemonThreadFactory
specifier|public
specifier|static
name|ThreadFactory
name|daemonThreadFactory
parameter_list|(
name|String
name|namePrefix
parameter_list|)
block|{
specifier|final
name|ThreadFactory
name|f
init|=
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
decl_stmt|;
specifier|final
name|String
name|o
init|=
name|namePrefix
operator|+
literal|"-"
decl_stmt|;
return|return
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
name|f
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|/*                  * Thread name: owner-pool-N-thread-M, where N is the sequence                  * number of this factory, and M is the sequence number of the                  * thread created by this factory.                  */
name|t
operator|.
name|setName
argument_list|(
name|o
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|/* override default definition t.setDaemon(false); */
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
return|;
block|}
comment|/**      * Cannot instantiate.      */
DECL|method|EsExecutors
specifier|private
name|EsExecutors
parameter_list|()
block|{     }
block|}
end_class

end_unit

