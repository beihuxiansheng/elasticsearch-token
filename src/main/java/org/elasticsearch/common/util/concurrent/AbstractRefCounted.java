begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * A basic RefCounted implementation that is initialized with a  * ref count of 1 and calls {@link #closeInternal()} once it reaches  * a 0 ref count  */
end_comment

begin_class
DECL|class|AbstractRefCounted
specifier|public
specifier|abstract
class|class
name|AbstractRefCounted
implements|implements
name|RefCounted
block|{
DECL|field|refCount
specifier|private
specifier|final
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|AbstractRefCounted
specifier|public
name|AbstractRefCounted
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incRef
specifier|public
specifier|final
name|void
name|incRef
parameter_list|()
block|{
if|if
condition|(
name|tryIncRef
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
name|name
operator|+
literal|" is already closed can't increment refCount current count ["
operator|+
name|refCount
operator|.
name|get
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|tryIncRef
specifier|public
specifier|final
name|boolean
name|tryIncRef
parameter_list|()
block|{
do|do
block|{
name|int
name|i
init|=
name|refCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
annotation|@
name|Override
DECL|method|decRef
specifier|public
specifier|final
name|void
name|decRef
parameter_list|()
block|{
name|int
name|i
init|=
name|refCount
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
assert|assert
name|i
operator|>=
literal|0
assert|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|closeInternal
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the current reference count.      */
DECL|method|refCount
specifier|public
name|int
name|refCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|refCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** gets the name of this instance */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|closeInternal
specifier|protected
specifier|abstract
name|void
name|closeInternal
parameter_list|()
function_decl|;
block|}
end_class

end_unit

