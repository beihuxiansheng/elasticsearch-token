begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|LongMath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hash
operator|.
name|MurmurHash3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * A bloom filter. Inspired by Guava bloom filter implementation though with some optimizations.  */
end_comment

begin_class
DECL|class|BloomFilter
specifier|public
class|class
name|BloomFilter
block|{
comment|/**      * A factory that can use different fpp based on size.      */
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|Factory
name|DEFAULT
init|=
name|buildDefault
argument_list|()
decl_stmt|;
DECL|method|buildDefault
specifier|private
specifier|static
name|Factory
name|buildDefault
parameter_list|()
block|{
comment|// Some numbers:
comment|// 10k =0.001: 140.4kb  , 10 Hashes
comment|// 10k =0.01 :  93.6kb  ,  6 Hashes
comment|// 100k=0.01 : 936.0kb  ,  6 Hashes
comment|// 100k=0.03 : 712.7kb  ,  5 Hashes
comment|// 500k=0.01 :   4.5mb  ,  6 Hashes
comment|// 500k=0.03 :   3.4mb  ,  5 Hashes
comment|// 500k=0.05 :   2.9mb  ,  4 Hashes
comment|//   1m=0.01 :   9.1mb  ,  6 Hashes
comment|//   1m=0.03 :   6.9mb  ,  5 Hashes
comment|//   1m=0.05 :   5.9mb  ,  4 Hashes
comment|//   5m=0.01 :  45.7mb  ,  6 Hashes
comment|//   5m=0.03 :  34.8mb  ,  5 Hashes
comment|//   5m=0.05 :  29.7mb  ,  4 Hashes
comment|//  50m=0.01 : 457.0mb  ,  6 Hashes
comment|//  50m=0.03 : 297.3mb  ,  4 Hashes
comment|//  50m=0.10 : 228.5mb  ,  3 Hashes
return|return
name|buildFromString
argument_list|(
literal|"10k=0.01,1m=0.03"
argument_list|)
return|;
block|}
comment|/**          * Supports just passing fpp, as in "0.01", and also ranges, like "50k=0.01,1m=0.05". If          * its null, returns {@link #buildDefault()}.          */
DECL|method|buildFromString
specifier|public
specifier|static
name|Factory
name|buildFromString
parameter_list|(
annotation|@
name|Nullable
name|String
name|config
parameter_list|)
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
return|return
name|buildDefault
argument_list|()
return|;
block|}
name|String
index|[]
name|sEntries
init|=
name|Strings
operator|.
name|splitStringToArray
argument_list|(
name|config
argument_list|,
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|sEntries
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|Factory
argument_list|(
operator|new
name|Entry
index|[]
block|{
operator|new
name|Entry
argument_list|(
literal|0
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|config
argument_list|)
argument_list|)
block|}
argument_list|)
return|;
block|}
return|return
name|buildDefault
argument_list|()
return|;
block|}
name|Entry
index|[]
name|entries
init|=
operator|new
name|Entry
index|[
name|sEntries
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sEntries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|sEntries
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|Entry
argument_list|(
operator|(
name|int
operator|)
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
name|sEntries
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|singles
argument_list|()
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|sEntries
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Factory
argument_list|(
name|entries
argument_list|)
return|;
block|}
DECL|field|entries
specifier|private
specifier|final
name|Entry
index|[]
name|entries
decl_stmt|;
DECL|method|Factory
specifier|public
name|Factory
parameter_list|(
name|Entry
index|[]
name|entries
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
comment|// the order is from the upper most expected insertions to the lowest
name|Arrays
operator|.
name|sort
argument_list|(
name|this
operator|.
name|entries
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
name|o1
parameter_list|,
name|Entry
name|o2
parameter_list|)
block|{
return|return
name|o2
operator|.
name|expectedInsertions
operator|-
name|o1
operator|.
name|expectedInsertions
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|createFilter
specifier|public
name|BloomFilter
name|createFilter
parameter_list|(
name|int
name|expectedInsertions
parameter_list|)
block|{
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|expectedInsertions
operator|>
name|entry
operator|.
name|expectedInsertions
condition|)
block|{
return|return
name|BloomFilter
operator|.
name|create
argument_list|(
name|expectedInsertions
argument_list|,
name|entry
operator|.
name|fpp
argument_list|)
return|;
block|}
block|}
return|return
name|BloomFilter
operator|.
name|create
argument_list|(
name|expectedInsertions
argument_list|,
literal|0.03
argument_list|)
return|;
block|}
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
block|{
DECL|field|expectedInsertions
specifier|public
specifier|final
name|int
name|expectedInsertions
decl_stmt|;
DECL|field|fpp
specifier|public
specifier|final
name|double
name|fpp
decl_stmt|;
DECL|method|Entry
name|Entry
parameter_list|(
name|int
name|expectedInsertions
parameter_list|,
name|double
name|fpp
parameter_list|)
block|{
name|this
operator|.
name|expectedInsertions
operator|=
name|expectedInsertions
expr_stmt|;
name|this
operator|.
name|fpp
operator|=
name|fpp
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates a bloom filter based on the with the expected number      * of insertions and expected false positive probability.      *      * @param expectedInsertions the number of expected insertions to the constructed      * @param fpp                the desired false positive probability (must be positive and less than 1.0)      */
DECL|method|create
specifier|public
specifier|static
name|BloomFilter
name|create
parameter_list|(
name|int
name|expectedInsertions
parameter_list|,
name|double
name|fpp
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|expectedInsertions
argument_list|,
name|fpp
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Creates a bloom filter based on the expected number of insertions, expected false positive probability,      * and number of hash functions.      *      * @param expectedInsertions the number of expected insertions to the constructed      * @param fpp                the desired false positive probability (must be positive and less than 1.0)      * @param numHashFunctions   the number of hash functions to use (must be less than or equal to 255)      */
DECL|method|create
specifier|public
specifier|static
name|BloomFilter
name|create
parameter_list|(
name|int
name|expectedInsertions
parameter_list|,
name|double
name|fpp
parameter_list|,
name|int
name|numHashFunctions
parameter_list|)
block|{
if|if
condition|(
name|expectedInsertions
operator|==
literal|0
condition|)
block|{
name|expectedInsertions
operator|=
literal|1
expr_stmt|;
block|}
comment|/*          * TODO(user): Put a warning in the javadoc about tiny fpp values,          * since the resulting size is proportional to -log(p), but there is not          * much of a point after all, e.g. optimalM(1000, 0.0000000000000001) = 76680          * which is less that 10kb. Who cares!          */
name|long
name|numBits
init|=
name|optimalNumOfBits
argument_list|(
name|expectedInsertions
argument_list|,
name|fpp
argument_list|)
decl_stmt|;
comment|// calculate the optimal number of hash functions
if|if
condition|(
name|numHashFunctions
operator|==
operator|-
literal|1
condition|)
block|{
name|numHashFunctions
operator|=
name|optimalNumOfHashFunctions
argument_list|(
name|expectedInsertions
argument_list|,
name|numBits
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|BloomFilter
argument_list|(
operator|new
name|BitArray
argument_list|(
name|numBits
argument_list|)
argument_list|,
name|numHashFunctions
argument_list|,
name|Hashing
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not create BloomFilter of "
operator|+
name|numBits
operator|+
literal|" bits"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|skipBloom
specifier|public
specifier|static
name|void
name|skipBloom
parameter_list|(
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|// we do nothing with this now..., defaults to 0
specifier|final
name|int
name|numLongs
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|in
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
name|numLongs
operator|*
literal|8
operator|)
operator|+
literal|4
operator|+
literal|4
argument_list|)
expr_stmt|;
comment|// filter + numberOfHashFunctions + hashType
block|}
DECL|method|deserialize
specifier|public
specifier|static
name|BloomFilter
name|deserialize
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|// we do nothing with this now..., defaults to 0
name|int
name|numLongs
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
name|numLongs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLongs
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|int
name|numberOfHashFunctions
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|hashType
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
return|return
operator|new
name|BloomFilter
argument_list|(
operator|new
name|BitArray
argument_list|(
name|data
argument_list|)
argument_list|,
name|numberOfHashFunctions
argument_list|,
name|Hashing
operator|.
name|fromType
argument_list|(
name|hashType
argument_list|)
argument_list|)
return|;
block|}
DECL|method|serilaize
specifier|public
specifier|static
name|void
name|serilaize
parameter_list|(
name|BloomFilter
name|filter
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// version
name|BitArray
name|bits
init|=
name|filter
operator|.
name|bits
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|bits
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
range|:
name|bits
operator|.
name|data
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|filter
operator|.
name|numHashFunctions
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|filter
operator|.
name|hashing
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
comment|// hashType
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|BloomFilter
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// we do nothing with this now..., defaults to 0
name|int
name|numLongs
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
name|numLongs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLongs
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|int
name|numberOfHashFunctions
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|int
name|hashType
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// again, nothing to do now...
return|return
operator|new
name|BloomFilter
argument_list|(
operator|new
name|BitArray
argument_list|(
name|data
argument_list|)
argument_list|,
name|numberOfHashFunctions
argument_list|,
name|Hashing
operator|.
name|fromType
argument_list|(
name|hashType
argument_list|)
argument_list|)
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|BloomFilter
name|filter
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// version
name|BitArray
name|bits
init|=
name|filter
operator|.
name|bits
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|bits
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|l
range|:
name|bits
operator|.
name|data
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|filter
operator|.
name|numHashFunctions
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|filter
operator|.
name|hashing
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
comment|// hashType
block|}
comment|/**      * The bit set of the BloomFilter (not necessarily power of 2!)      */
DECL|field|bits
specifier|final
name|BitArray
name|bits
decl_stmt|;
comment|/**      * Number of hashes per element      */
DECL|field|numHashFunctions
specifier|final
name|int
name|numHashFunctions
decl_stmt|;
DECL|field|hashing
specifier|final
name|Hashing
name|hashing
decl_stmt|;
DECL|method|BloomFilter
name|BloomFilter
parameter_list|(
name|BitArray
name|bits
parameter_list|,
name|int
name|numHashFunctions
parameter_list|,
name|Hashing
name|hashing
parameter_list|)
block|{
name|this
operator|.
name|bits
operator|=
name|bits
expr_stmt|;
name|this
operator|.
name|numHashFunctions
operator|=
name|numHashFunctions
expr_stmt|;
name|this
operator|.
name|hashing
operator|=
name|hashing
expr_stmt|;
comment|/*      * This only exists to forbid BFs that cannot use the compact persistent representation.      * If it ever throws, at a user who was not intending to use that representation, we should      * reconsider      */
if|if
condition|(
name|numHashFunctions
operator|>
literal|255
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Currently we don't allow BloomFilters that would use more than 255 hash functions"
argument_list|)
throw|;
block|}
block|}
DECL|method|put
specifier|public
name|boolean
name|put
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
return|return
name|hashing
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|numHashFunctions
argument_list|,
name|bits
argument_list|)
return|;
block|}
DECL|method|mightContain
specifier|public
name|boolean
name|mightContain
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
return|return
name|hashing
operator|.
name|mightContain
argument_list|(
name|value
argument_list|,
name|numHashFunctions
argument_list|,
name|bits
argument_list|)
return|;
block|}
DECL|method|getNumHashFunctions
specifier|public
name|int
name|getNumHashFunctions
parameter_list|()
block|{
return|return
name|this
operator|.
name|numHashFunctions
return|;
block|}
DECL|method|getSizeInBytes
specifier|public
name|long
name|getSizeInBytes
parameter_list|()
block|{
return|return
name|bits
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|bits
operator|.
name|hashCode
argument_list|()
operator|+
name|numHashFunctions
return|;
block|}
comment|/*    * Cheat sheet:    *    * m: total bits    * n: expected insertions    * b: m/n, bits per insertion     * p: expected false positive probability    *    * 1) Optimal k = b * ln2    * 2) p = (1 - e ^ (-kn/m))^k    * 3) For optimal k: p = 2 ^ (-k) ~= 0.6185^b    * 4) For optimal k: m = -nlnp / ((ln2) ^ 2)    */
comment|/**      * Computes the optimal k (number of hashes per element inserted in Bloom filter), given the      * expected insertions and total number of bits in the Bloom filter.      *<p/>      * See http://en.wikipedia.org/wiki/File:Bloom_filter_fp_probability.svg for the formula.      *      * @param n expected insertions (must be positive)      * @param m total number of bits in Bloom filter (must be positive)      */
DECL|method|optimalNumOfHashFunctions
specifier|static
name|int
name|optimalNumOfHashFunctions
parameter_list|(
name|long
name|n
parameter_list|,
name|long
name|m
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|m
operator|/
name|n
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Computes m (total bits of Bloom filter) which is expected to achieve, for the specified      * expected insertions, the required false positive probability.      *<p/>      * See http://en.wikipedia.org/wiki/Bloom_filter#Probability_of_false_positives for the formula.      *      * @param n expected insertions (must be positive)      * @param p false positive rate (must be 0< p< 1)      */
DECL|method|optimalNumOfBits
specifier|static
name|long
name|optimalNumOfBits
parameter_list|(
name|long
name|n
parameter_list|,
name|double
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
literal|0
condition|)
block|{
name|p
operator|=
name|Double
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
return|return
call|(
name|long
call|)
argument_list|(
operator|-
name|n
operator|*
name|Math
operator|.
name|log
argument_list|(
name|p
argument_list|)
operator|/
operator|(
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|)
argument_list|)
return|;
block|}
comment|// Note: We use this instead of java.util.BitSet because we need access to the long[] data field
DECL|class|BitArray
specifier|static
specifier|final
class|class
name|BitArray
block|{
DECL|field|data
specifier|final
name|long
index|[]
name|data
decl_stmt|;
DECL|field|bitSize
specifier|final
name|long
name|bitSize
decl_stmt|;
DECL|field|bitCount
name|long
name|bitCount
decl_stmt|;
DECL|method|BitArray
name|BitArray
parameter_list|(
name|long
name|bits
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|long
index|[
name|Ints
operator|.
name|checkedCast
argument_list|(
name|LongMath
operator|.
name|divide
argument_list|(
name|bits
argument_list|,
literal|64
argument_list|,
name|RoundingMode
operator|.
name|CEILING
argument_list|)
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Used by serialization
DECL|method|BitArray
name|BitArray
parameter_list|(
name|long
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|long
name|bitCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|value
range|:
name|data
control|)
block|{
name|bitCount
operator|+=
name|Long
operator|.
name|bitCount
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|bitCount
operator|=
name|bitCount
expr_stmt|;
name|this
operator|.
name|bitSize
operator|=
name|data
operator|.
name|length
operator|*
name|Long
operator|.
name|SIZE
expr_stmt|;
block|}
comment|/** Returns true if the bit changed value. */
DECL|method|set
name|boolean
name|set
parameter_list|(
name|long
name|index
parameter_list|)
block|{
if|if
condition|(
operator|!
name|get
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|data
index|[
call|(
name|int
call|)
argument_list|(
name|index
operator|>>>
literal|6
argument_list|)
index|]
operator||=
operator|(
literal|1L
operator|<<
name|index
operator|)
expr_stmt|;
name|bitCount
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|get
name|boolean
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
operator|(
name|data
index|[
call|(
name|int
call|)
argument_list|(
name|index
operator|>>>
literal|6
argument_list|)
index|]
operator|&
operator|(
literal|1L
operator|<<
name|index
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/** Number of bits */
DECL|method|bitSize
name|long
name|bitSize
parameter_list|()
block|{
return|return
name|bitSize
return|;
block|}
comment|/** Number of set bits (1s) */
DECL|method|bitCount
name|long
name|bitCount
parameter_list|()
block|{
return|return
name|bitCount
return|;
block|}
DECL|method|copy
name|BitArray
name|copy
parameter_list|()
block|{
return|return
operator|new
name|BitArray
argument_list|(
name|data
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
comment|/** Combines the two BitArrays using bitwise OR. */
DECL|method|putAll
name|void
name|putAll
parameter_list|(
name|BitArray
name|array
parameter_list|)
block|{
name|bitCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator||=
name|array
operator|.
name|data
index|[
name|i
index|]
expr_stmt|;
name|bitCount
operator|+=
name|Long
operator|.
name|bitCount
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|equals
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|BitArray
condition|)
block|{
name|BitArray
name|bitArray
init|=
operator|(
name|BitArray
operator|)
name|o
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|bitArray
operator|.
name|data
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|data
argument_list|)
return|;
block|}
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
operator|*
name|data
operator|.
name|length
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
literal|16
return|;
block|}
block|}
DECL|enum|Hashing
specifier|static
enum|enum
name|Hashing
block|{
DECL|method|V0
DECL|method|V0
name|V0
parameter_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|put
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|int
name|numHashFunctions
parameter_list|,
name|BitArray
name|bits
parameter_list|)
block|{
name|long
name|bitSize
init|=
name|bits
operator|.
name|bitSize
argument_list|()
decl_stmt|;
name|long
name|hash64
init|=
name|hash3_x64_128
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|hash1
init|=
operator|(
name|int
operator|)
name|hash64
decl_stmt|;
name|int
name|hash2
init|=
call|(
name|int
call|)
argument_list|(
name|hash64
operator|>>>
literal|32
argument_list|)
decl_stmt|;
name|boolean
name|bitsChanged
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextHash
init|=
name|hash1
operator|+
name|i
operator|*
name|hash2
decl_stmt|;
if|if
condition|(
name|nextHash
operator|<
literal|0
condition|)
block|{
name|nextHash
operator|=
operator|~
name|nextHash
expr_stmt|;
block|}
name|bitsChanged
operator||=
name|bits
operator|.
name|set
argument_list|(
name|nextHash
operator|%
name|bitSize
argument_list|)
expr_stmt|;
block|}
return|return
name|bitsChanged
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|mightContain
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|int
name|numHashFunctions
parameter_list|,
name|BitArray
name|bits
parameter_list|)
block|{
name|long
name|bitSize
init|=
name|bits
operator|.
name|bitSize
argument_list|()
decl_stmt|;
name|long
name|hash64
init|=
name|hash3_x64_128
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|hash1
init|=
operator|(
name|int
operator|)
name|hash64
decl_stmt|;
name|int
name|hash2
init|=
call|(
name|int
call|)
argument_list|(
name|hash64
operator|>>>
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextHash
init|=
name|hash1
operator|+
name|i
operator|*
name|hash2
decl_stmt|;
if|if
condition|(
name|nextHash
operator|<
literal|0
condition|)
block|{
name|nextHash
operator|=
operator|~
name|nextHash
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bits
operator|.
name|get
argument_list|(
name|nextHash
operator|%
name|bitSize
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|type
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
block|,
DECL|method|V1
DECL|method|V1
name|V1
parameter_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|put
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|int
name|numHashFunctions
parameter_list|,
name|BitArray
name|bits
parameter_list|)
block|{
name|long
name|bitSize
init|=
name|bits
operator|.
name|bitSize
argument_list|()
decl_stmt|;
name|MurmurHash3
operator|.
name|Hash128
name|hash128
init|=
name|MurmurHash3
operator|.
name|hash128
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|,
literal|0
argument_list|,
operator|new
name|MurmurHash3
operator|.
name|Hash128
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|bitsChanged
init|=
literal|false
decl_stmt|;
name|long
name|combinedHash
init|=
name|hash128
operator|.
name|h1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
comment|// Make the combined hash positive and indexable
name|bitsChanged
operator||=
name|bits
operator|.
name|set
argument_list|(
operator|(
name|combinedHash
operator|&
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|%
name|bitSize
argument_list|)
expr_stmt|;
name|combinedHash
operator|+=
name|hash128
operator|.
name|h2
expr_stmt|;
block|}
return|return
name|bitsChanged
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|mightContain
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|int
name|numHashFunctions
parameter_list|,
name|BitArray
name|bits
parameter_list|)
block|{
name|long
name|bitSize
init|=
name|bits
operator|.
name|bitSize
argument_list|()
decl_stmt|;
name|MurmurHash3
operator|.
name|Hash128
name|hash128
init|=
name|MurmurHash3
operator|.
name|hash128
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|,
literal|0
argument_list|,
operator|new
name|MurmurHash3
operator|.
name|Hash128
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|combinedHash
init|=
name|hash128
operator|.
name|h1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
comment|// Make the combined hash positive and indexable
if|if
condition|(
operator|!
name|bits
operator|.
name|get
argument_list|(
operator|(
name|combinedHash
operator|&
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|%
name|bitSize
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|combinedHash
operator|+=
name|hash128
operator|.
name|h2
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|type
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
block|;
DECL|method|put
specifier|protected
specifier|abstract
name|boolean
name|put
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|int
name|numHashFunctions
parameter_list|,
name|BitArray
name|bits
parameter_list|)
function_decl|;
DECL|method|mightContain
specifier|protected
specifier|abstract
name|boolean
name|mightContain
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|int
name|numHashFunctions
parameter_list|,
name|BitArray
name|bits
parameter_list|)
function_decl|;
DECL|method|type
specifier|protected
specifier|abstract
name|int
name|type
parameter_list|()
function_decl|;
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|Hashing
name|DEFAULT
init|=
name|Hashing
operator|.
name|V1
decl_stmt|;
DECL|method|fromType
specifier|public
specifier|static
name|Hashing
name|fromType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|0
condition|)
block|{
return|return
name|Hashing
operator|.
name|V0
return|;
block|}
if|if
condition|(
name|type
operator|==
literal|1
condition|)
block|{
return|return
name|Hashing
operator|.
name|V1
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"no hashing type matching "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
comment|// START : MURMUR 3_128 USED FOR Hashing.V0
comment|// NOTE: don't replace this code with the o.e.common.hashing.MurmurHash3 method which returns a different hash
DECL|method|getblock
specifier|protected
specifier|static
name|long
name|getblock
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|i_8
init|=
name|index
operator|<<
literal|3
decl_stmt|;
name|int
name|blockOffset
init|=
name|offset
operator|+
name|i_8
decl_stmt|;
return|return
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|blockOffset
operator|+
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|blockOffset
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|blockOffset
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|blockOffset
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|blockOffset
operator|+
literal|4
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|32
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|blockOffset
operator|+
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|40
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|blockOffset
operator|+
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|48
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|blockOffset
operator|+
literal|7
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|56
operator|)
return|;
block|}
DECL|method|rotl64
specifier|protected
specifier|static
name|long
name|rotl64
parameter_list|(
name|long
name|v
parameter_list|,
name|int
name|n
parameter_list|)
block|{
return|return
operator|(
operator|(
name|v
operator|<<
name|n
operator|)
operator||
operator|(
name|v
operator|>>>
operator|(
literal|64
operator|-
name|n
operator|)
operator|)
operator|)
return|;
block|}
DECL|method|fmix
specifier|protected
specifier|static
name|long
name|fmix
parameter_list|(
name|long
name|k
parameter_list|)
block|{
name|k
operator|^=
name|k
operator|>>>
literal|33
expr_stmt|;
name|k
operator|*=
literal|0xff51afd7ed558ccdL
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|33
expr_stmt|;
name|k
operator|*=
literal|0xc4ceb9fe1a85ec53L
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|33
expr_stmt|;
return|return
name|k
return|;
block|}
DECL|method|hash3_x64_128
specifier|public
specifier|static
name|long
name|hash3_x64_128
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
specifier|final
name|int
name|nblocks
init|=
name|length
operator|>>
literal|4
decl_stmt|;
comment|// Process as 128-bit blocks.
name|long
name|h1
init|=
name|seed
decl_stmt|;
name|long
name|h2
init|=
name|seed
decl_stmt|;
name|long
name|c1
init|=
literal|0x87c37b91114253d5L
decl_stmt|;
name|long
name|c2
init|=
literal|0x4cf5ad432745937fL
decl_stmt|;
comment|//----------
comment|// body
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nblocks
condition|;
name|i
operator|++
control|)
block|{
name|long
name|k1
init|=
name|getblock
argument_list|(
name|key
argument_list|,
name|offset
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|0
argument_list|)
decl_stmt|;
name|long
name|k2
init|=
name|getblock
argument_list|(
name|key
argument_list|,
name|offset
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|rotl64
argument_list|(
name|k1
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|rotl64
argument_list|(
name|h1
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0x52dce729
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|rotl64
argument_list|(
name|k2
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c1
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
name|h2
operator|=
name|rotl64
argument_list|(
name|h2
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h2
operator|=
name|h2
operator|*
literal|5
operator|+
literal|0x38495ab5
expr_stmt|;
block|}
comment|//----------
comment|// tail
comment|// Advance offset to the unprocessed tail of the data.
name|offset
operator|+=
name|nblocks
operator|*
literal|16
expr_stmt|;
name|long
name|k1
init|=
literal|0
decl_stmt|;
name|long
name|k2
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|length
operator|&
literal|15
condition|)
block|{
case|case
literal|15
case|:
name|k2
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|14
index|]
operator|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|14
case|:
name|k2
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|13
index|]
operator|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|13
case|:
name|k2
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|12
index|]
operator|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|12
case|:
name|k2
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|11
index|]
operator|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|11
case|:
name|k2
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|10
index|]
operator|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|10
case|:
name|k2
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|9
index|]
operator|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|9
case|:
name|k2
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|8
index|]
operator|)
operator|<<
literal|0
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|rotl64
argument_list|(
name|k2
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c1
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
case|case
literal|8
case|:
name|k1
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|7
index|]
operator|)
operator|<<
literal|56
expr_stmt|;
case|case
literal|7
case|:
name|k1
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|6
index|]
operator|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|6
case|:
name|k1
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|5
index|]
operator|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|5
case|:
name|k1
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|4
index|]
operator|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|4
case|:
name|k1
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|3
index|]
operator|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|k1
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|2
index|]
operator|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|k1
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
literal|1
index|]
operator|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|k1
operator|^=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
index|]
operator|)
expr_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|rotl64
argument_list|(
name|k1
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
comment|//----------
comment|// finalization
name|h1
operator|^=
name|length
expr_stmt|;
name|h2
operator|^=
name|length
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h1
operator|=
name|fmix
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|h2
operator|=
name|fmix
argument_list|(
name|h2
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
comment|//return (new long[]{h1, h2});
comment|// SAME AS GUAVA, they take the first long out of the 128bit
return|return
name|h1
return|;
block|}
comment|// END: MURMUR 3_128
block|}
end_class

end_unit

