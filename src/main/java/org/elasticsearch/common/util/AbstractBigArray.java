begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/** Common implementation for array lists that slice data into fixed-size blocks. */
end_comment

begin_class
DECL|class|AbstractBigArray
specifier|abstract
class|class
name|AbstractBigArray
block|{
DECL|field|pageShift
specifier|private
specifier|final
name|int
name|pageShift
decl_stmt|;
DECL|field|pageMask
specifier|private
specifier|final
name|int
name|pageMask
decl_stmt|;
DECL|field|size
specifier|protected
name|long
name|size
decl_stmt|;
DECL|method|AbstractBigArray
specifier|protected
name|AbstractBigArray
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|pageSize
operator|>=
literal|128
argument_list|,
literal|"pageSize must be>= 128"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|pageSize
operator|&
operator|(
name|pageSize
operator|-
literal|1
operator|)
operator|)
operator|==
literal|0
argument_list|,
literal|"pageSize must be a power of two"
argument_list|)
expr_stmt|;
name|this
operator|.
name|pageShift
operator|=
name|Integer
operator|.
name|numberOfTrailingZeros
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|pageMask
operator|=
name|pageSize
operator|-
literal|1
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|numPages
specifier|final
name|int
name|numPages
parameter_list|(
name|long
name|capacity
parameter_list|)
block|{
specifier|final
name|long
name|numPages
init|=
operator|(
name|capacity
operator|+
name|pageMask
operator|)
operator|>>>
name|pageShift
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numPages
operator|<=
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"pageSize="
operator|+
operator|(
name|pageMask
operator|+
literal|1
operator|)
operator|+
literal|" is too small for such as capacity: "
operator|+
name|capacity
argument_list|)
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|numPages
return|;
block|}
DECL|method|pageSize
specifier|final
name|int
name|pageSize
parameter_list|()
block|{
return|return
name|pageMask
operator|+
literal|1
return|;
block|}
DECL|method|pageIndex
specifier|final
name|int
name|pageIndex
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|index
operator|>>>
name|pageShift
argument_list|)
return|;
block|}
DECL|method|indexInPage
specifier|final
name|int
name|indexInPage
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|index
operator|&
name|pageMask
argument_list|)
return|;
block|}
DECL|method|size
specifier|public
specifier|final
name|long
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|numBytesPerElement
specifier|protected
specifier|abstract
name|int
name|numBytesPerElement
parameter_list|()
function_decl|;
DECL|method|sizeInBytes
specifier|public
specifier|final
name|long
name|sizeInBytes
parameter_list|()
block|{
comment|// rough approximate, we only take into account the size of the values, not the overhead of the array objects
return|return
operator|(
operator|(
name|long
operator|)
name|pageIndex
argument_list|(
name|size
operator|-
literal|1
argument_list|)
operator|+
literal|1
operator|)
operator|*
name|pageSize
argument_list|()
operator|*
name|numBytesPerElement
argument_list|()
return|;
block|}
block|}
end_class

end_unit

