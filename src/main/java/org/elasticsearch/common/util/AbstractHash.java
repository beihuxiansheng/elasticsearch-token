begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_comment
comment|/**  * Base implementation for {@link BytesRefHash} and {@link LongHash}, or any class that  * needs to map values to dense ords. This class is not thread-safe.  */
end_comment

begin_comment
comment|// IDs are internally stored as id + 1 so that 0 encodes for an empty slot
end_comment

begin_class
DECL|class|AbstractHash
specifier|abstract
class|class
name|AbstractHash
extends|extends
name|AbstractPagedHashMap
block|{
DECL|field|ids
name|LongArray
name|ids
decl_stmt|;
DECL|method|AbstractHash
name|AbstractHash
parameter_list|(
name|long
name|capacity
parameter_list|,
name|float
name|maxLoadFactor
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|)
block|{
name|super
argument_list|(
name|capacity
argument_list|,
name|maxLoadFactor
argument_list|,
name|bigArrays
argument_list|)
expr_stmt|;
name|ids
operator|=
name|bigArrays
operator|.
name|newLongArray
argument_list|(
name|capacity
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the id associated with key at<code>0&lt;= index&lt;= capacity()</code> or -1 if this slot is unused.      */
DECL|method|id
specifier|public
name|long
name|id
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
name|ids
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|-
literal|1
return|;
block|}
DECL|method|id
specifier|protected
specifier|final
name|long
name|id
parameter_list|(
name|long
name|index
parameter_list|,
name|long
name|id
parameter_list|)
block|{
return|return
name|ids
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|id
operator|+
literal|1
argument_list|)
operator|-
literal|1
return|;
block|}
DECL|method|resize
specifier|protected
name|void
name|resize
parameter_list|(
name|long
name|capacity
parameter_list|)
block|{
name|ids
operator|=
name|bigArrays
operator|.
name|resize
argument_list|(
name|ids
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|used
specifier|protected
name|boolean
name|used
parameter_list|(
name|long
name|bucket
parameter_list|)
block|{
return|return
name|id
argument_list|(
name|bucket
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|boolean
name|release
parameter_list|()
block|{
name|Releasables
operator|.
name|release
argument_list|(
name|ids
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

