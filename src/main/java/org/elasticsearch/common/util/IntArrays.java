begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_comment
comment|/** Utility methods to work with {@link IntArray}s. */
end_comment

begin_class
DECL|class|IntArrays
specifier|public
class|class
name|IntArrays
block|{
DECL|method|IntArrays
specifier|private
name|IntArrays
parameter_list|()
block|{}
comment|/** Return a {@link IntArray} view over the provided array. */
DECL|method|wrap
specifier|public
specifier|static
name|IntArray
name|wrap
parameter_list|(
specifier|final
name|int
index|[]
name|array
parameter_list|)
block|{
return|return
operator|new
name|IntArray
argument_list|()
block|{
specifier|private
name|void
name|checkIndex
parameter_list|(
name|long
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|long
name|index
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|checkIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|increment
parameter_list|(
name|long
name|index
parameter_list|,
name|int
name|inc
parameter_list|)
block|{
name|checkIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|+=
name|inc
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
name|checkIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
return|;
block|}
block|}
return|;
block|}
comment|/** Return a newly allocated {@link IntArray} of the given length or more. */
DECL|method|allocate
specifier|public
specifier|static
name|IntArray
name|allocate
parameter_list|(
name|long
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
name|BigIntArray
operator|.
name|DEFAULT_PAGE_SIZE
condition|)
block|{
return|return
name|wrap
argument_list|(
operator|new
name|int
index|[
operator|(
name|int
operator|)
name|length
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|BigIntArray
argument_list|(
name|length
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

