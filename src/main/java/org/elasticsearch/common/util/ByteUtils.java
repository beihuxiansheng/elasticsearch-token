begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataOutput
import|;
end_import

begin_comment
comment|/** Utility methods to do byte-level encoding. These methods are biased towards little-endian byte order because it is the most  *  common byte order and reading several bytes at once may be optimizable in the future with the help of sun.mist.Unsafe. */
end_comment

begin_enum
DECL|enum|ByteUtils
specifier|public
enum|enum
name|ByteUtils
block|{     ;
DECL|field|MAX_BYTES_VLONG
specifier|public
specifier|static
specifier|final
name|int
name|MAX_BYTES_VLONG
init|=
literal|9
decl_stmt|;
comment|/** Zig-zag decode. */
DECL|method|zigZagDecode
specifier|public
specifier|static
name|long
name|zigZagDecode
parameter_list|(
name|long
name|n
parameter_list|)
block|{
return|return
operator|(
operator|(
name|n
operator|>>>
literal|1
operator|)
operator|^
operator|-
operator|(
name|n
operator|&
literal|1
operator|)
operator|)
return|;
block|}
comment|/** Zig-zag encode: this helps transforming small signed numbers into small positive numbers. */
DECL|method|zigZagEncode
specifier|public
specifier|static
name|long
name|zigZagEncode
parameter_list|(
name|long
name|n
parameter_list|)
block|{
return|return
operator|(
name|n
operator|>>
literal|63
operator|)
operator|^
operator|(
name|n
operator|<<
literal|1
operator|)
return|;
block|}
comment|/** Write a long in little-endian format. */
DECL|method|writeLongLE
specifier|public
specifier|static
name|void
name|writeLongLE
parameter_list|(
name|long
name|l
parameter_list|,
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
block|{
name|arr
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|l
expr_stmt|;
name|l
operator|>>>=
literal|8
expr_stmt|;
block|}
assert|assert
name|l
operator|==
literal|0
assert|;
block|}
comment|/** Write a long in little-endian format. */
DECL|method|readLongLE
specifier|public
specifier|static
name|long
name|readLongLE
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|long
name|l
init|=
name|arr
index|[
name|offset
operator|++
index|]
operator|&
literal|0xFFL
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
block|{
name|l
operator||=
operator|(
name|arr
index|[
name|offset
operator|++
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
operator|(
literal|8
operator|*
name|i
operator|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/** Write an int in little-endian format. */
DECL|method|writeIntLE
specifier|public
specifier|static
name|void
name|writeIntLE
parameter_list|(
name|int
name|l
parameter_list|,
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|arr
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|l
expr_stmt|;
name|l
operator|>>>=
literal|8
expr_stmt|;
block|}
assert|assert
name|l
operator|==
literal|0
assert|;
block|}
comment|/** Read an int in little-endian format. */
DECL|method|readIntLE
specifier|public
specifier|static
name|int
name|readIntLE
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|l
init|=
name|arr
index|[
name|offset
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|l
operator||=
operator|(
name|arr
index|[
name|offset
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
operator|(
literal|8
operator|*
name|i
operator|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/** Write a double in little-endian format. */
DECL|method|writeDoubleLE
specifier|public
specifier|static
name|void
name|writeDoubleLE
parameter_list|(
name|double
name|d
parameter_list|,
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|writeLongLE
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|d
argument_list|)
argument_list|,
name|arr
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/** Read a double in little-endian format. */
DECL|method|readDoubleLE
specifier|public
specifier|static
name|double
name|readDoubleLE
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|readLongLE
argument_list|(
name|arr
argument_list|,
name|offset
argument_list|)
argument_list|)
return|;
block|}
comment|/** Write a float in little-endian format. */
DECL|method|writeFloatLE
specifier|public
specifier|static
name|void
name|writeFloatLE
parameter_list|(
name|float
name|d
parameter_list|,
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|writeIntLE
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|d
argument_list|)
argument_list|,
name|arr
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/** Read a float in little-endian format. */
DECL|method|readFloatLE
specifier|public
specifier|static
name|float
name|readFloatLE
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|readIntLE
argument_list|(
name|arr
argument_list|,
name|offset
argument_list|)
argument_list|)
return|;
block|}
comment|/** Same as DataOutput#writeVLong but accepts negative values (written on 9 bytes). */
DECL|method|writeVLong
specifier|public
specifier|static
name|void
name|writeVLong
parameter_list|(
name|ByteArrayDataOutput
name|out
parameter_list|,
name|long
name|i
parameter_list|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|8
operator|&&
operator|(
name|i
operator|&
operator|~
literal|0x7FL
operator|)
operator|!=
literal|0L
condition|;
operator|++
name|k
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x7FL
operator|)
operator||
literal|0x80L
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
comment|/** Same as DataOutput#readVLong but can read negative values (read on 9 bytes). */
DECL|method|readVLong
specifier|public
specifier|static
name|long
name|readVLong
parameter_list|(
name|ByteArrayDataInput
name|in
parameter_list|)
block|{
comment|// unwinded because of hotspot bugs, see Lucene's impl
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|b
return|;
name|long
name|i
init|=
name|b
operator|&
literal|0x7FL
decl_stmt|;
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|7
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|14
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|21
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|28
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|35
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|42
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|49
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
return|return
name|i
return|;
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0xFFL
operator|)
operator|<<
literal|56
expr_stmt|;
return|return
name|i
return|;
block|}
block|}
end_enum

end_unit

