begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|PageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreakingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
operator|.
name|Recycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/** Utility class to work with arrays. */
end_comment

begin_class
DECL|class|BigArrays
specifier|public
class|class
name|BigArrays
extends|extends
name|AbstractComponent
block|{
DECL|field|MAX_SIZE_IN_BYTES_SETTING
specifier|public
specifier|static
specifier|final
name|String
name|MAX_SIZE_IN_BYTES_SETTING
init|=
literal|"requests.memory.breaker.limit"
decl_stmt|;
DECL|field|NON_RECYCLING_INSTANCE
specifier|public
specifier|static
specifier|final
name|BigArrays
name|NON_RECYCLING_INSTANCE
init|=
operator|new
name|BigArrays
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/** Page size in bytes: 16KB */
DECL|field|PAGE_SIZE_IN_BYTES
specifier|public
specifier|static
specifier|final
name|int
name|PAGE_SIZE_IN_BYTES
init|=
literal|1
operator|<<
literal|14
decl_stmt|;
DECL|field|BYTE_PAGE_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BYTE_PAGE_SIZE
init|=
name|BigArrays
operator|.
name|PAGE_SIZE_IN_BYTES
operator|/
name|RamUsageEstimator
operator|.
name|NUM_BYTES_BYTE
decl_stmt|;
DECL|field|INT_PAGE_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|INT_PAGE_SIZE
init|=
name|BigArrays
operator|.
name|PAGE_SIZE_IN_BYTES
operator|/
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
decl_stmt|;
DECL|field|FLOAT_PAGE_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|FLOAT_PAGE_SIZE
init|=
name|BigArrays
operator|.
name|PAGE_SIZE_IN_BYTES
operator|/
name|RamUsageEstimator
operator|.
name|NUM_BYTES_FLOAT
decl_stmt|;
DECL|field|LONG_PAGE_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|LONG_PAGE_SIZE
init|=
name|BigArrays
operator|.
name|PAGE_SIZE_IN_BYTES
operator|/
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
decl_stmt|;
DECL|field|DOUBLE_PAGE_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DOUBLE_PAGE_SIZE
init|=
name|BigArrays
operator|.
name|PAGE_SIZE_IN_BYTES
operator|/
name|RamUsageEstimator
operator|.
name|NUM_BYTES_DOUBLE
decl_stmt|;
DECL|field|OBJECT_PAGE_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|OBJECT_PAGE_SIZE
init|=
name|BigArrays
operator|.
name|PAGE_SIZE_IN_BYTES
operator|/
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
decl_stmt|;
comment|/** Returns the next size to grow when working with parallel arrays that may have different page sizes or number of bytes per element. */
DECL|method|overSize
specifier|public
specifier|static
name|long
name|overSize
parameter_list|(
name|long
name|minTargetSize
parameter_list|)
block|{
return|return
name|overSize
argument_list|(
name|minTargetSize
argument_list|,
name|PAGE_SIZE_IN_BYTES
operator|/
literal|8
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/** Return the next size to grow to that is&gt;=<code>minTargetSize</code>.      *  Inspired from {@link ArrayUtil#oversize(int, int)} and adapted to play nicely with paging. */
DECL|method|overSize
specifier|public
specifier|static
name|long
name|overSize
parameter_list|(
name|long
name|minTargetSize
parameter_list|,
name|int
name|pageSize
parameter_list|,
name|int
name|bytesPerElement
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|minTargetSize
operator|>=
literal|0
argument_list|,
literal|"minTargetSize must be>= 0"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|pageSize
operator|>=
literal|0
argument_list|,
literal|"pageSize must be> 0"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|bytesPerElement
operator|>
literal|0
argument_list|,
literal|"bytesPerElement must be> 0"
argument_list|)
expr_stmt|;
name|long
name|newSize
decl_stmt|;
if|if
condition|(
name|minTargetSize
operator|<
name|pageSize
condition|)
block|{
name|newSize
operator|=
name|ArrayUtil
operator|.
name|oversize
argument_list|(
operator|(
name|int
operator|)
name|minTargetSize
argument_list|,
name|bytesPerElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newSize
operator|=
name|minTargetSize
operator|+
operator|(
name|minTargetSize
operator|>>>
literal|3
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|newSize
operator|>
name|pageSize
condition|)
block|{
comment|// round to a multiple of pageSize
name|newSize
operator|=
name|newSize
operator|-
operator|(
name|newSize
operator|%
name|pageSize
operator|)
operator|+
name|pageSize
expr_stmt|;
assert|assert
name|newSize
operator|%
name|pageSize
operator|==
literal|0
assert|;
block|}
return|return
name|newSize
return|;
block|}
DECL|method|indexIsInt
specifier|static
name|boolean
name|indexIsInt
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
name|index
operator|==
operator|(
name|int
operator|)
name|index
return|;
block|}
DECL|class|AbstractArrayWrapper
specifier|private
specifier|static
specifier|abstract
class|class
name|AbstractArrayWrapper
extends|extends
name|AbstractArray
implements|implements
name|BigArray
block|{
DECL|field|SHALLOW_SIZE
specifier|protected
specifier|static
specifier|final
name|long
name|SHALLOW_SIZE
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|ByteArrayWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|releasable
specifier|private
specifier|final
name|Releasable
name|releasable
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|long
name|size
decl_stmt|;
DECL|method|AbstractArrayWrapper
name|AbstractArrayWrapper
parameter_list|(
name|BigArrays
name|bigArrays
parameter_list|,
name|long
name|size
parameter_list|,
name|Releasable
name|releasable
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
name|super
argument_list|(
name|bigArrays
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
name|this
operator|.
name|releasable
operator|=
name|releasable
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
DECL|method|size
specifier|public
specifier|final
name|long
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|final
name|void
name|doClose
parameter_list|()
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|releasable
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ByteArrayWrapper
specifier|private
specifier|static
class|class
name|ByteArrayWrapper
extends|extends
name|AbstractArrayWrapper
implements|implements
name|ByteArray
block|{
DECL|field|array
specifier|private
specifier|final
name|byte
index|[]
name|array
decl_stmt|;
DECL|method|ByteArrayWrapper
name|ByteArrayWrapper
parameter_list|(
name|BigArrays
name|bigArrays
parameter_list|,
name|byte
index|[]
name|array
parameter_list|,
name|long
name|size
parameter_list|,
name|Recycler
operator|.
name|V
argument_list|<
name|byte
index|[]
argument_list|>
name|releasable
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
name|super
argument_list|(
name|bigArrays
argument_list|,
name|size
argument_list|,
name|releasable
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|SHALLOW_SIZE
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|byte
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|byte
name|set
parameter_list|(
name|long
name|index
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
specifier|final
name|byte
name|ret
init|=
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
decl_stmt|;
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|=
name|value
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|(
name|long
name|index
parameter_list|,
name|int
name|len
parameter_list|,
name|BytesRef
name|ref
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
name|ref
operator|.
name|bytes
operator|=
name|array
expr_stmt|;
name|ref
operator|.
name|offset
operator|=
operator|(
name|int
operator|)
name|index
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|long
name|index
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|array
argument_list|,
operator|(
name|int
operator|)
name|index
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fill
specifier|public
name|void
name|fill
parameter_list|(
name|long
name|fromIndex
parameter_list|,
name|long
name|toIndex
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|fromIndex
argument_list|)
assert|;
assert|assert
name|indexIsInt
argument_list|(
name|toIndex
argument_list|)
assert|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array
argument_list|,
operator|(
name|int
operator|)
name|fromIndex
argument_list|,
operator|(
name|int
operator|)
name|toIndex
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IntArrayWrapper
specifier|private
specifier|static
class|class
name|IntArrayWrapper
extends|extends
name|AbstractArrayWrapper
implements|implements
name|IntArray
block|{
DECL|field|array
specifier|private
specifier|final
name|int
index|[]
name|array
decl_stmt|;
DECL|method|IntArrayWrapper
name|IntArrayWrapper
parameter_list|(
name|BigArrays
name|bigArrays
parameter_list|,
name|int
index|[]
name|array
parameter_list|,
name|long
name|size
parameter_list|,
name|Recycler
operator|.
name|V
argument_list|<
name|int
index|[]
argument_list|>
name|releasable
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
name|super
argument_list|(
name|bigArrays
argument_list|,
name|size
argument_list|,
name|releasable
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|SHALLOW_SIZE
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|int
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|int
name|set
parameter_list|(
name|long
name|index
parameter_list|,
name|int
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
specifier|final
name|int
name|ret
init|=
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
decl_stmt|;
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|=
name|value
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|increment
specifier|public
name|int
name|increment
parameter_list|(
name|long
name|index
parameter_list|,
name|int
name|inc
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|+=
name|inc
return|;
block|}
annotation|@
name|Override
DECL|method|fill
specifier|public
name|void
name|fill
parameter_list|(
name|long
name|fromIndex
parameter_list|,
name|long
name|toIndex
parameter_list|,
name|int
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|fromIndex
argument_list|)
assert|;
assert|assert
name|indexIsInt
argument_list|(
name|toIndex
argument_list|)
assert|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array
argument_list|,
operator|(
name|int
operator|)
name|fromIndex
argument_list|,
operator|(
name|int
operator|)
name|toIndex
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LongArrayWrapper
specifier|private
specifier|static
class|class
name|LongArrayWrapper
extends|extends
name|AbstractArrayWrapper
implements|implements
name|LongArray
block|{
DECL|field|array
specifier|private
specifier|final
name|long
index|[]
name|array
decl_stmt|;
DECL|method|LongArrayWrapper
name|LongArrayWrapper
parameter_list|(
name|BigArrays
name|bigArrays
parameter_list|,
name|long
index|[]
name|array
parameter_list|,
name|long
name|size
parameter_list|,
name|Recycler
operator|.
name|V
argument_list|<
name|long
index|[]
argument_list|>
name|releasable
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
name|super
argument_list|(
name|bigArrays
argument_list|,
name|size
argument_list|,
name|releasable
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|SHALLOW_SIZE
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|long
name|set
parameter_list|(
name|long
name|index
parameter_list|,
name|long
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
specifier|final
name|long
name|ret
init|=
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
decl_stmt|;
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|=
name|value
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|increment
specifier|public
name|long
name|increment
parameter_list|(
name|long
name|index
parameter_list|,
name|long
name|inc
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|+=
name|inc
return|;
block|}
annotation|@
name|Override
DECL|method|fill
specifier|public
name|void
name|fill
parameter_list|(
name|long
name|fromIndex
parameter_list|,
name|long
name|toIndex
parameter_list|,
name|long
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|fromIndex
argument_list|)
assert|;
assert|assert
name|indexIsInt
argument_list|(
name|toIndex
argument_list|)
assert|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array
argument_list|,
operator|(
name|int
operator|)
name|fromIndex
argument_list|,
operator|(
name|int
operator|)
name|toIndex
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DoubleArrayWrapper
specifier|private
specifier|static
class|class
name|DoubleArrayWrapper
extends|extends
name|AbstractArrayWrapper
implements|implements
name|DoubleArray
block|{
DECL|field|array
specifier|private
specifier|final
name|double
index|[]
name|array
decl_stmt|;
DECL|method|DoubleArrayWrapper
name|DoubleArrayWrapper
parameter_list|(
name|BigArrays
name|bigArrays
parameter_list|,
name|double
index|[]
name|array
parameter_list|,
name|long
name|size
parameter_list|,
name|Recycler
operator|.
name|V
argument_list|<
name|double
index|[]
argument_list|>
name|releasable
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
name|super
argument_list|(
name|bigArrays
argument_list|,
name|size
argument_list|,
name|releasable
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|SHALLOW_SIZE
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|double
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|double
name|set
parameter_list|(
name|long
name|index
parameter_list|,
name|double
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
name|double
name|ret
init|=
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
decl_stmt|;
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|=
name|value
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|increment
specifier|public
name|double
name|increment
parameter_list|(
name|long
name|index
parameter_list|,
name|double
name|inc
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|+=
name|inc
return|;
block|}
annotation|@
name|Override
DECL|method|fill
specifier|public
name|void
name|fill
parameter_list|(
name|long
name|fromIndex
parameter_list|,
name|long
name|toIndex
parameter_list|,
name|double
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|fromIndex
argument_list|)
assert|;
assert|assert
name|indexIsInt
argument_list|(
name|toIndex
argument_list|)
assert|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array
argument_list|,
operator|(
name|int
operator|)
name|fromIndex
argument_list|,
operator|(
name|int
operator|)
name|toIndex
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FloatArrayWrapper
specifier|private
specifier|static
class|class
name|FloatArrayWrapper
extends|extends
name|AbstractArrayWrapper
implements|implements
name|FloatArray
block|{
DECL|field|array
specifier|private
specifier|final
name|float
index|[]
name|array
decl_stmt|;
DECL|method|FloatArrayWrapper
name|FloatArrayWrapper
parameter_list|(
name|BigArrays
name|bigArrays
parameter_list|,
name|float
index|[]
name|array
parameter_list|,
name|long
name|size
parameter_list|,
name|Recycler
operator|.
name|V
argument_list|<
name|float
index|[]
argument_list|>
name|releasable
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
name|super
argument_list|(
name|bigArrays
argument_list|,
name|size
argument_list|,
name|releasable
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|SHALLOW_SIZE
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|float
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|float
name|set
parameter_list|(
name|long
name|index
parameter_list|,
name|float
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
name|float
name|ret
init|=
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
decl_stmt|;
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|=
name|value
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|increment
specifier|public
name|float
name|increment
parameter_list|(
name|long
name|index
parameter_list|,
name|float
name|inc
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|+=
name|inc
return|;
block|}
annotation|@
name|Override
DECL|method|fill
specifier|public
name|void
name|fill
parameter_list|(
name|long
name|fromIndex
parameter_list|,
name|long
name|toIndex
parameter_list|,
name|float
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|fromIndex
argument_list|)
assert|;
assert|assert
name|indexIsInt
argument_list|(
name|toIndex
argument_list|)
assert|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array
argument_list|,
operator|(
name|int
operator|)
name|fromIndex
argument_list|,
operator|(
name|int
operator|)
name|toIndex
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ObjectArrayWrapper
specifier|private
specifier|static
class|class
name|ObjectArrayWrapper
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractArrayWrapper
implements|implements
name|ObjectArray
argument_list|<
name|T
argument_list|>
block|{
DECL|field|array
specifier|private
specifier|final
name|Object
index|[]
name|array
decl_stmt|;
DECL|method|ObjectArrayWrapper
name|ObjectArrayWrapper
parameter_list|(
name|BigArrays
name|bigArrays
parameter_list|,
name|Object
index|[]
name|array
parameter_list|,
name|long
name|size
parameter_list|,
name|Recycler
operator|.
name|V
argument_list|<
name|Object
index|[]
argument_list|>
name|releasable
parameter_list|)
block|{
name|super
argument_list|(
name|bigArrays
argument_list|,
name|size
argument_list|,
name|releasable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|SHALLOW_SIZE
operator|+
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|*
name|size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|get
specifier|public
name|T
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
return|return
operator|(
name|T
operator|)
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
name|T
name|set
parameter_list|(
name|long
name|index
parameter_list|,
name|T
name|value
parameter_list|)
block|{
assert|assert
name|indexIsInt
argument_list|(
name|index
argument_list|)
assert|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|ret
init|=
operator|(
name|T
operator|)
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
decl_stmt|;
name|array
index|[
operator|(
name|int
operator|)
name|index
index|]
operator|=
name|value
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
DECL|field|recycler
specifier|final
name|PageCacheRecycler
name|recycler
decl_stmt|;
DECL|field|breakerService
specifier|final
name|CircuitBreakerService
name|breakerService
decl_stmt|;
DECL|field|checkBreaker
specifier|final
name|boolean
name|checkBreaker
decl_stmt|;
annotation|@
name|Inject
DECL|method|BigArrays
specifier|public
name|BigArrays
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|PageCacheRecycler
name|recycler
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|CircuitBreakerService
name|breakerService
parameter_list|)
block|{
comment|// Checking the breaker is disabled if not specified
name|this
argument_list|(
name|settings
argument_list|,
name|recycler
argument_list|,
name|breakerService
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|BigArrays
specifier|public
name|BigArrays
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|PageCacheRecycler
name|recycler
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|CircuitBreakerService
name|breakerService
parameter_list|,
name|boolean
name|checkBreaker
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkBreaker
operator|=
name|checkBreaker
expr_stmt|;
name|this
operator|.
name|recycler
operator|=
name|recycler
expr_stmt|;
name|this
operator|.
name|breakerService
operator|=
name|breakerService
expr_stmt|;
block|}
comment|/**      * Adjust the circuit breaker with the given delta, if the delta is      * negative, or checkBreaker is false, the breaker will be adjusted      * without tripping      */
DECL|method|adjustBreaker
name|void
name|adjustBreaker
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|breakerService
operator|!=
literal|null
condition|)
block|{
name|CircuitBreaker
name|breaker
init|=
name|this
operator|.
name|breakerService
operator|.
name|getBreaker
argument_list|(
name|CircuitBreaker
operator|.
name|Name
operator|.
name|REQUEST
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|checkBreaker
operator|==
literal|true
condition|)
block|{
comment|// checking breaker means potentially tripping, but it doesn't
comment|// have to if the delta is negative
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|breaker
operator|.
name|addEstimateBytesAndMaybeBreak
argument_list|(
name|delta
argument_list|,
literal|"<reused_arrays>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CircuitBreakingException
name|e
parameter_list|)
block|{
comment|// since we've already created the data, we need to
comment|// add it so closing the stream re-adjusts properly
name|breaker
operator|.
name|addWithoutBreaking
argument_list|(
name|delta
argument_list|)
expr_stmt|;
comment|// re-throw the original exception
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
name|breaker
operator|.
name|addWithoutBreaking
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// even if we are not checking the breaker, we need to adjust
comment|// its' totals, so add without breaking
name|breaker
operator|.
name|addWithoutBreaking
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Return a new instance of this BigArrays class with circuit breaking      * explicitly enabled, instead of only accounting enabled      */
DECL|method|withCircuitBreaking
specifier|public
name|BigArrays
name|withCircuitBreaking
parameter_list|()
block|{
return|return
operator|new
name|BigArrays
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|this
operator|.
name|recycler
argument_list|,
name|this
operator|.
name|breakerService
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|resizeInPlace
specifier|private
parameter_list|<
name|T
extends|extends
name|AbstractBigArray
parameter_list|>
name|T
name|resizeInPlace
parameter_list|(
name|T
name|array
parameter_list|,
name|long
name|newSize
parameter_list|)
block|{
specifier|final
name|long
name|oldMemSize
init|=
name|array
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|adjustBreaker
argument_list|(
name|array
operator|.
name|ramBytesUsed
argument_list|()
operator|-
name|oldMemSize
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
DECL|method|validate
specifier|private
parameter_list|<
name|T
extends|extends
name|BigArray
parameter_list|>
name|T
name|validate
parameter_list|(
name|T
name|array
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|adjustBreaker
argument_list|(
name|array
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|Releasables
operator|.
name|closeWhileHandlingException
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|array
return|;
block|}
comment|/**      * Allocate a new {@link ByteArray}.      * @param size          the initial length of the array      * @param clearOnResize whether values should be set to 0 on initialization and resize      */
DECL|method|newByteArray
specifier|public
name|ByteArray
name|newByteArray
parameter_list|(
name|long
name|size
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
specifier|final
name|ByteArray
name|array
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|BYTE_PAGE_SIZE
condition|)
block|{
name|array
operator|=
operator|new
name|BigByteArray
argument_list|(
name|size
argument_list|,
name|this
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>=
name|BYTE_PAGE_SIZE
operator|/
literal|2
operator|&&
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|byte
index|[]
argument_list|>
name|page
init|=
name|recycler
operator|.
name|bytePage
argument_list|(
name|clearOnResize
argument_list|)
decl_stmt|;
name|array
operator|=
operator|new
name|ByteArrayWrapper
argument_list|(
name|this
argument_list|,
name|page
operator|.
name|v
argument_list|()
argument_list|,
name|size
argument_list|,
name|page
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|ByteArrayWrapper
argument_list|(
name|this
argument_list|,
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|size
index|]
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
return|return
name|validate
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/**      * Allocate a new {@link ByteArray} initialized with zeros.      * @param size          the initial length of the array      */
DECL|method|newByteArray
specifier|public
name|ByteArray
name|newByteArray
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
name|newByteArray
argument_list|(
name|size
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Resize the array to the exact provided size. */
DECL|method|resize
specifier|public
name|ByteArray
name|resize
parameter_list|(
name|ByteArray
name|array
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
name|array
operator|instanceof
name|BigByteArray
condition|)
block|{
return|return
name|resizeInPlace
argument_list|(
operator|(
name|BigByteArray
operator|)
name|array
argument_list|,
name|size
argument_list|)
return|;
block|}
else|else
block|{
name|AbstractArray
name|arr
init|=
operator|(
name|AbstractArray
operator|)
name|array
decl_stmt|;
specifier|final
name|ByteArray
name|newArray
init|=
name|newByteArray
argument_list|(
name|size
argument_list|,
name|arr
operator|.
name|clearOnResize
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|rawArray
init|=
operator|(
operator|(
name|ByteArrayWrapper
operator|)
name|array
operator|)
operator|.
name|array
decl_stmt|;
name|newArray
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|rawArray
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|rawArray
operator|.
name|length
argument_list|,
name|newArray
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|arr
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|newArray
return|;
block|}
block|}
comment|/** Grow an array to a size that is larger than<code>minSize</code>, preserving content, and potentially reusing part of the provided array. */
DECL|method|grow
specifier|public
name|ByteArray
name|grow
parameter_list|(
name|ByteArray
name|array
parameter_list|,
name|long
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|minSize
operator|<=
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|array
return|;
block|}
specifier|final
name|long
name|newSize
init|=
name|overSize
argument_list|(
name|minSize
argument_list|,
name|BYTE_PAGE_SIZE
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_BYTE
argument_list|)
decl_stmt|;
return|return
name|resize
argument_list|(
name|array
argument_list|,
name|newSize
argument_list|)
return|;
block|}
comment|/** @see Arrays.hashCode(byte[]) */
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|(
name|ByteArray
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|hash
init|=
literal|1
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
comment|/** @see Arrays.equals(byte[], byte[]) */
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|ByteArray
name|array
parameter_list|,
name|ByteArray
name|other
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|array
operator|.
name|size
argument_list|()
operator|!=
name|other
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Allocate a new {@link IntArray}.      * @param size          the initial length of the array      * @param clearOnResize whether values should be set to 0 on initialization and resize      */
DECL|method|newIntArray
specifier|public
name|IntArray
name|newIntArray
parameter_list|(
name|long
name|size
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
specifier|final
name|IntArray
name|array
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|INT_PAGE_SIZE
condition|)
block|{
name|array
operator|=
operator|new
name|BigIntArray
argument_list|(
name|size
argument_list|,
name|this
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>=
name|INT_PAGE_SIZE
operator|/
literal|2
operator|&&
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|int
index|[]
argument_list|>
name|page
init|=
name|recycler
operator|.
name|intPage
argument_list|(
name|clearOnResize
argument_list|)
decl_stmt|;
name|array
operator|=
operator|new
name|IntArrayWrapper
argument_list|(
name|this
argument_list|,
name|page
operator|.
name|v
argument_list|()
argument_list|,
name|size
argument_list|,
name|page
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|IntArrayWrapper
argument_list|(
name|this
argument_list|,
operator|new
name|int
index|[
operator|(
name|int
operator|)
name|size
index|]
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
return|return
name|validate
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/**      * Allocate a new {@link IntArray}.      * @param size          the initial length of the array      */
DECL|method|newIntArray
specifier|public
name|IntArray
name|newIntArray
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
name|newIntArray
argument_list|(
name|size
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Resize the array to the exact provided size. */
DECL|method|resize
specifier|public
name|IntArray
name|resize
parameter_list|(
name|IntArray
name|array
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
name|array
operator|instanceof
name|BigIntArray
condition|)
block|{
return|return
name|resizeInPlace
argument_list|(
operator|(
name|BigIntArray
operator|)
name|array
argument_list|,
name|size
argument_list|)
return|;
block|}
else|else
block|{
name|AbstractArray
name|arr
init|=
operator|(
name|AbstractArray
operator|)
name|array
decl_stmt|;
specifier|final
name|IntArray
name|newArray
init|=
name|newIntArray
argument_list|(
name|size
argument_list|,
name|arr
operator|.
name|clearOnResize
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|,
name|end
init|=
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|newArray
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|newArray
return|;
block|}
block|}
comment|/** Grow an array to a size that is larger than<code>minSize</code>, preserving content, and potentially reusing part of the provided array. */
DECL|method|grow
specifier|public
name|IntArray
name|grow
parameter_list|(
name|IntArray
name|array
parameter_list|,
name|long
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|minSize
operator|<=
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|array
return|;
block|}
specifier|final
name|long
name|newSize
init|=
name|overSize
argument_list|(
name|minSize
argument_list|,
name|INT_PAGE_SIZE
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
decl_stmt|;
return|return
name|resize
argument_list|(
name|array
argument_list|,
name|newSize
argument_list|)
return|;
block|}
comment|/**      * Allocate a new {@link LongArray}.      * @param size          the initial length of the array      * @param clearOnResize whether values should be set to 0 on initialization and resize      */
DECL|method|newLongArray
specifier|public
name|LongArray
name|newLongArray
parameter_list|(
name|long
name|size
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
specifier|final
name|LongArray
name|array
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|LONG_PAGE_SIZE
condition|)
block|{
name|array
operator|=
operator|new
name|BigLongArray
argument_list|(
name|size
argument_list|,
name|this
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>=
name|LONG_PAGE_SIZE
operator|/
literal|2
operator|&&
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|long
index|[]
argument_list|>
name|page
init|=
name|recycler
operator|.
name|longPage
argument_list|(
name|clearOnResize
argument_list|)
decl_stmt|;
name|array
operator|=
operator|new
name|LongArrayWrapper
argument_list|(
name|this
argument_list|,
name|page
operator|.
name|v
argument_list|()
argument_list|,
name|size
argument_list|,
name|page
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|LongArrayWrapper
argument_list|(
name|this
argument_list|,
operator|new
name|long
index|[
operator|(
name|int
operator|)
name|size
index|]
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
return|return
name|validate
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/**      * Allocate a new {@link LongArray}.      * @param size          the initial length of the array      */
DECL|method|newLongArray
specifier|public
name|LongArray
name|newLongArray
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
name|newLongArray
argument_list|(
name|size
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Resize the array to the exact provided size. */
DECL|method|resize
specifier|public
name|LongArray
name|resize
parameter_list|(
name|LongArray
name|array
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
name|array
operator|instanceof
name|BigLongArray
condition|)
block|{
return|return
name|resizeInPlace
argument_list|(
operator|(
name|BigLongArray
operator|)
name|array
argument_list|,
name|size
argument_list|)
return|;
block|}
else|else
block|{
name|AbstractArray
name|arr
init|=
operator|(
name|AbstractArray
operator|)
name|array
decl_stmt|;
specifier|final
name|LongArray
name|newArray
init|=
name|newLongArray
argument_list|(
name|size
argument_list|,
name|arr
operator|.
name|clearOnResize
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|,
name|end
init|=
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|newArray
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|newArray
return|;
block|}
block|}
comment|/** Grow an array to a size that is larger than<code>minSize</code>, preserving content, and potentially reusing part of the provided array. */
DECL|method|grow
specifier|public
name|LongArray
name|grow
parameter_list|(
name|LongArray
name|array
parameter_list|,
name|long
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|minSize
operator|<=
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|array
return|;
block|}
specifier|final
name|long
name|newSize
init|=
name|overSize
argument_list|(
name|minSize
argument_list|,
name|LONG_PAGE_SIZE
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|)
decl_stmt|;
return|return
name|resize
argument_list|(
name|array
argument_list|,
name|newSize
argument_list|)
return|;
block|}
comment|/**      * Allocate a new {@link DoubleArray}.      * @param size          the initial length of the array      * @param clearOnResize whether values should be set to 0 on initialization and resize      */
DECL|method|newDoubleArray
specifier|public
name|DoubleArray
name|newDoubleArray
parameter_list|(
name|long
name|size
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
specifier|final
name|DoubleArray
name|arr
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|DOUBLE_PAGE_SIZE
condition|)
block|{
name|arr
operator|=
operator|new
name|BigDoubleArray
argument_list|(
name|size
argument_list|,
name|this
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>=
name|DOUBLE_PAGE_SIZE
operator|/
literal|2
operator|&&
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|double
index|[]
argument_list|>
name|page
init|=
name|recycler
operator|.
name|doublePage
argument_list|(
name|clearOnResize
argument_list|)
decl_stmt|;
name|arr
operator|=
operator|new
name|DoubleArrayWrapper
argument_list|(
name|this
argument_list|,
name|page
operator|.
name|v
argument_list|()
argument_list|,
name|size
argument_list|,
name|page
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arr
operator|=
operator|new
name|DoubleArrayWrapper
argument_list|(
name|this
argument_list|,
operator|new
name|double
index|[
operator|(
name|int
operator|)
name|size
index|]
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
return|return
name|validate
argument_list|(
name|arr
argument_list|)
return|;
block|}
comment|/** Allocate a new {@link DoubleArray} of the given capacity. */
DECL|method|newDoubleArray
specifier|public
name|DoubleArray
name|newDoubleArray
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
name|newDoubleArray
argument_list|(
name|size
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Resize the array to the exact provided size. */
DECL|method|resize
specifier|public
name|DoubleArray
name|resize
parameter_list|(
name|DoubleArray
name|array
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
name|array
operator|instanceof
name|BigDoubleArray
condition|)
block|{
return|return
name|resizeInPlace
argument_list|(
operator|(
name|BigDoubleArray
operator|)
name|array
argument_list|,
name|size
argument_list|)
return|;
block|}
else|else
block|{
name|AbstractArray
name|arr
init|=
operator|(
name|AbstractArray
operator|)
name|array
decl_stmt|;
specifier|final
name|DoubleArray
name|newArray
init|=
name|newDoubleArray
argument_list|(
name|size
argument_list|,
name|arr
operator|.
name|clearOnResize
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|,
name|end
init|=
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|newArray
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|newArray
return|;
block|}
block|}
comment|/** Grow an array to a size that is larger than<code>minSize</code>, preserving content, and potentially reusing part of the provided array. */
DECL|method|grow
specifier|public
name|DoubleArray
name|grow
parameter_list|(
name|DoubleArray
name|array
parameter_list|,
name|long
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|minSize
operator|<=
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|array
return|;
block|}
specifier|final
name|long
name|newSize
init|=
name|overSize
argument_list|(
name|minSize
argument_list|,
name|DOUBLE_PAGE_SIZE
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_DOUBLE
argument_list|)
decl_stmt|;
return|return
name|resize
argument_list|(
name|array
argument_list|,
name|newSize
argument_list|)
return|;
block|}
comment|/**      * Allocate a new {@link FloatArray}.      * @param size          the initial length of the array      * @param clearOnResize whether values should be set to 0 on initialization and resize      */
DECL|method|newFloatArray
specifier|public
name|FloatArray
name|newFloatArray
parameter_list|(
name|long
name|size
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
specifier|final
name|FloatArray
name|array
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|FLOAT_PAGE_SIZE
condition|)
block|{
name|array
operator|=
operator|new
name|BigFloatArray
argument_list|(
name|size
argument_list|,
name|this
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>=
name|FLOAT_PAGE_SIZE
operator|/
literal|2
operator|&&
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|float
index|[]
argument_list|>
name|page
init|=
name|recycler
operator|.
name|floatPage
argument_list|(
name|clearOnResize
argument_list|)
decl_stmt|;
name|array
operator|=
operator|new
name|FloatArrayWrapper
argument_list|(
name|this
argument_list|,
name|page
operator|.
name|v
argument_list|()
argument_list|,
name|size
argument_list|,
name|page
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|FloatArrayWrapper
argument_list|(
name|this
argument_list|,
operator|new
name|float
index|[
operator|(
name|int
operator|)
name|size
index|]
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
block|}
return|return
name|validate
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/** Allocate a new {@link FloatArray} of the given capacity. */
DECL|method|newFloatArray
specifier|public
name|FloatArray
name|newFloatArray
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
name|newFloatArray
argument_list|(
name|size
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Resize the array to the exact provided size. */
DECL|method|resize
specifier|public
name|FloatArray
name|resize
parameter_list|(
name|FloatArray
name|array
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
name|array
operator|instanceof
name|BigFloatArray
condition|)
block|{
return|return
name|resizeInPlace
argument_list|(
operator|(
name|BigFloatArray
operator|)
name|array
argument_list|,
name|size
argument_list|)
return|;
block|}
else|else
block|{
name|AbstractArray
name|arr
init|=
operator|(
name|AbstractArray
operator|)
name|array
decl_stmt|;
specifier|final
name|FloatArray
name|newArray
init|=
name|newFloatArray
argument_list|(
name|size
argument_list|,
name|arr
operator|.
name|clearOnResize
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|,
name|end
init|=
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|newArray
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|arr
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|newArray
return|;
block|}
block|}
comment|/** Grow an array to a size that is larger than<code>minSize</code>, preserving content, and potentially reusing part of the provided array. */
DECL|method|grow
specifier|public
name|FloatArray
name|grow
parameter_list|(
name|FloatArray
name|array
parameter_list|,
name|long
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|minSize
operator|<=
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|array
return|;
block|}
specifier|final
name|long
name|newSize
init|=
name|overSize
argument_list|(
name|minSize
argument_list|,
name|FLOAT_PAGE_SIZE
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_FLOAT
argument_list|)
decl_stmt|;
return|return
name|resize
argument_list|(
name|array
argument_list|,
name|newSize
argument_list|)
return|;
block|}
comment|/**      * Allocate a new {@link ObjectArray}.      * @param size          the initial length of the array      */
DECL|method|newObjectArray
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ObjectArray
argument_list|<
name|T
argument_list|>
name|newObjectArray
parameter_list|(
name|long
name|size
parameter_list|)
block|{
specifier|final
name|ObjectArray
argument_list|<
name|T
argument_list|>
name|array
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|OBJECT_PAGE_SIZE
condition|)
block|{
name|array
operator|=
operator|new
name|BigObjectArray
argument_list|<>
argument_list|(
name|size
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>=
name|OBJECT_PAGE_SIZE
operator|/
literal|2
operator|&&
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|Object
index|[]
argument_list|>
name|page
init|=
name|recycler
operator|.
name|objectPage
argument_list|()
decl_stmt|;
name|array
operator|=
operator|new
name|ObjectArrayWrapper
argument_list|<>
argument_list|(
name|this
argument_list|,
name|page
operator|.
name|v
argument_list|()
argument_list|,
name|size
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|ObjectArrayWrapper
argument_list|<>
argument_list|(
name|this
argument_list|,
operator|new
name|Object
index|[
operator|(
name|int
operator|)
name|size
index|]
argument_list|,
name|size
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|validate
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/** Resize the array to the exact provided size. */
DECL|method|resize
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ObjectArray
argument_list|<
name|T
argument_list|>
name|resize
parameter_list|(
name|ObjectArray
argument_list|<
name|T
argument_list|>
name|array
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
name|array
operator|instanceof
name|BigObjectArray
condition|)
block|{
return|return
name|resizeInPlace
argument_list|(
operator|(
name|BigObjectArray
argument_list|<
name|T
argument_list|>
operator|)
name|array
argument_list|,
name|size
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|ObjectArray
argument_list|<
name|T
argument_list|>
name|newArray
init|=
name|newObjectArray
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|,
name|end
init|=
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|newArray
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|newArray
return|;
block|}
block|}
comment|/** Grow an array to a size that is larger than<code>minSize</code>, preserving content, and potentially reusing part of the provided array. */
DECL|method|grow
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ObjectArray
argument_list|<
name|T
argument_list|>
name|grow
parameter_list|(
name|ObjectArray
argument_list|<
name|T
argument_list|>
name|array
parameter_list|,
name|long
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|minSize
operator|<=
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|array
return|;
block|}
specifier|final
name|long
name|newSize
init|=
name|overSize
argument_list|(
name|minSize
argument_list|,
name|OBJECT_PAGE_SIZE
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
decl_stmt|;
return|return
name|resize
argument_list|(
name|array
argument_list|,
name|newSize
argument_list|)
return|;
block|}
block|}
end_class

end_unit

