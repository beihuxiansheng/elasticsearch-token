begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|RamUsage
import|;
end_import

begin_comment
comment|/** Float array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of  *  configurable length. */
end_comment

begin_class
DECL|class|BigFloatArrayList
specifier|public
specifier|final
class|class
name|BigFloatArrayList
extends|extends
name|AbstractBigArray
block|{
comment|/** Default page size, 16KB of memory per page. */
DECL|field|DEFAULT_PAGE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_PAGE_SIZE
init|=
literal|1
operator|<<
literal|12
decl_stmt|;
DECL|field|pages
specifier|private
name|float
index|[]
index|[]
name|pages
decl_stmt|;
DECL|method|BigFloatArrayList
specifier|public
name|BigFloatArrayList
parameter_list|(
name|int
name|pageSize
parameter_list|,
name|long
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|pages
operator|=
operator|new
name|float
index|[
name|numPages
argument_list|(
name|initialCapacity
argument_list|)
index|]
index|[]
expr_stmt|;
block|}
DECL|method|BigFloatArrayList
specifier|public
name|BigFloatArrayList
parameter_list|(
name|long
name|initialCapacity
parameter_list|)
block|{
name|this
argument_list|(
name|DEFAULT_PAGE_SIZE
argument_list|,
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
DECL|method|BigFloatArrayList
specifier|public
name|BigFloatArrayList
parameter_list|()
block|{
name|this
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|float
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|size
assert|;
specifier|final
name|int
name|pageIndex
init|=
name|pageIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|int
name|indexInPage
init|=
name|indexInPage
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|pages
index|[
name|pageIndex
index|]
index|[
name|indexInPage
index|]
return|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|float
name|f
parameter_list|)
block|{
specifier|final
name|int
name|pageIndex
init|=
name|pageIndex
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|pages
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|pages
argument_list|,
name|pageIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|pages
index|[
name|pageIndex
index|]
operator|==
literal|null
condition|)
block|{
name|pages
index|[
name|pageIndex
index|]
operator|=
operator|new
name|float
index|[
name|pageSize
argument_list|()
index|]
expr_stmt|;
block|}
specifier|final
name|int
name|indexInPage
init|=
name|indexInPage
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|pages
index|[
name|pageIndex
index|]
index|[
name|indexInPage
index|]
operator|=
name|f
expr_stmt|;
operator|++
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|numBytesPerElement
specifier|protected
name|int
name|numBytesPerElement
parameter_list|()
block|{
return|return
name|RamUsage
operator|.
name|NUM_BYTES_FLOAT
return|;
block|}
block|}
end_class

end_unit

