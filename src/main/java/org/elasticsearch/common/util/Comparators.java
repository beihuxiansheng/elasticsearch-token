begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * {@link Comparator}-related utility methods.  */
end_comment

begin_enum
DECL|enum|Comparators
specifier|public
enum|enum
name|Comparators
block|{     ;
comment|/**      * Compare<code>d1</code> against<code>d2</code>, pushing {@value Double#NaN} at the bottom.      */
DECL|method|compareDiscardNaN
specifier|public
specifier|static
name|int
name|compareDiscardNaN
parameter_list|(
name|double
name|d1
parameter_list|,
name|double
name|d2
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|d1
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|d2
argument_list|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|d2
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|asc
condition|?
name|Double
operator|.
name|compare
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
else|:
name|Double
operator|.
name|compare
argument_list|(
name|d2
argument_list|,
name|d1
argument_list|)
return|;
block|}
block|}
block|}
end_enum

end_unit

