begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|Priority
specifier|public
specifier|final
class|class
name|Priority
implements|implements
name|Comparable
argument_list|<
name|Priority
argument_list|>
block|{
DECL|method|readFrom
specifier|public
specifier|static
name|Priority
name|readFrom
parameter_list|(
name|StreamInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fromByte
argument_list|(
name|input
operator|.
name|readByte
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|StreamOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|b
init|=
name|priority
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_1_1_0
argument_list|)
condition|)
block|{
name|b
operator|=
operator|(
name|byte
operator|)
name|Math
operator|.
name|max
argument_list|(
name|URGENT
operator|.
name|value
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|fromByte
specifier|public
specifier|static
name|Priority
name|fromByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
switch|switch
condition|(
name|b
condition|)
block|{
case|case
operator|-
literal|1
case|:
return|return
name|IMMEDIATE
return|;
case|case
literal|0
case|:
return|return
name|URGENT
return|;
case|case
literal|1
case|:
return|return
name|HIGH
return|;
case|case
literal|2
case|:
return|return
name|NORMAL
return|;
case|case
literal|3
case|:
return|return
name|LOW
return|;
case|case
literal|4
case|:
return|return
name|LANGUID
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"can't find priority for ["
operator|+
name|b
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|field|IMMEDIATE
specifier|public
specifier|static
specifier|final
name|Priority
name|IMMEDIATE
init|=
operator|new
name|Priority
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|URGENT
specifier|public
specifier|static
specifier|final
name|Priority
name|URGENT
init|=
operator|new
name|Priority
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
DECL|field|HIGH
specifier|public
specifier|static
specifier|final
name|Priority
name|HIGH
init|=
operator|new
name|Priority
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
decl_stmt|;
DECL|field|NORMAL
specifier|public
specifier|static
specifier|final
name|Priority
name|NORMAL
init|=
operator|new
name|Priority
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
decl_stmt|;
DECL|field|LOW
specifier|public
specifier|static
specifier|final
name|Priority
name|LOW
init|=
operator|new
name|Priority
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
decl_stmt|;
DECL|field|LANGUID
specifier|public
specifier|static
specifier|final
name|Priority
name|LANGUID
init|=
operator|new
name|Priority
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
decl_stmt|;
DECL|field|values
specifier|private
specifier|static
specifier|final
name|Priority
index|[]
name|values
init|=
operator|new
name|Priority
index|[]
block|{
name|IMMEDIATE
block|,
name|URGENT
block|,
name|HIGH
block|,
name|NORMAL
block|,
name|LOW
block|,
name|LANGUID
block|}
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|byte
name|value
decl_stmt|;
DECL|method|Priority
specifier|private
name|Priority
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * @return an array of all available priorities, sorted from the highest to the lowest.      */
DECL|method|values
specifier|public
specifier|static
name|Priority
index|[]
name|values
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Priority
name|p
parameter_list|)
block|{
return|return
operator|(
name|this
operator|.
name|value
operator|<
name|p
operator|.
name|value
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|this
operator|.
name|value
operator|>
name|p
operator|.
name|value
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
DECL|method|after
specifier|public
name|boolean
name|after
parameter_list|(
name|Priority
name|p
parameter_list|)
block|{
return|return
name|value
operator|>
name|p
operator|.
name|value
return|;
block|}
DECL|method|sameOrAfter
specifier|public
name|boolean
name|sameOrAfter
parameter_list|(
name|Priority
name|p
parameter_list|)
block|{
return|return
name|value
operator|>=
name|p
operator|.
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|Priority
operator|.
name|class
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Priority
name|priority
init|=
operator|(
name|Priority
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|priority
operator|.
name|value
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
operator|(
name|byte
operator|)
operator|-
literal|1
case|:
return|return
literal|"IMMEDIATE"
return|;
case|case
operator|(
name|byte
operator|)
literal|0
case|:
return|return
literal|"URGENT"
return|;
case|case
operator|(
name|byte
operator|)
literal|1
case|:
return|return
literal|"HIGH"
return|;
case|case
operator|(
name|byte
operator|)
literal|2
case|:
return|return
literal|"NORMAL"
return|;
case|case
operator|(
name|byte
operator|)
literal|3
case|:
return|return
literal|"LOW"
return|;
default|default:
return|return
literal|"LANGUID"
return|;
block|}
block|}
block|}
end_class

end_unit

