begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectObjectAssociativeContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ContextAndHeaderHolder
specifier|public
class|class
name|ContextAndHeaderHolder
parameter_list|<
name|T
parameter_list|>
implements|implements
name|HasContextAndHeaders
block|{
DECL|field|context
specifier|private
name|ObjectObjectHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|context
decl_stmt|;
DECL|field|headers
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|putInContext
specifier|public
specifier|final
specifier|synchronized
parameter_list|<
name|V
parameter_list|>
name|V
name|putInContext
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|ObjectObjectHashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|V
operator|)
name|context
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putAllInContext
specifier|public
specifier|final
specifier|synchronized
name|void
name|putAllInContext
parameter_list|(
name|ObjectObjectAssociativeContainer
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|ObjectObjectHashMap
argument_list|<>
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getFromContext
specifier|public
specifier|final
specifier|synchronized
parameter_list|<
name|V
parameter_list|>
name|V
name|getFromContext
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|context
operator|!=
literal|null
condition|?
operator|(
name|V
operator|)
name|context
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getFromContext
specifier|public
specifier|final
specifier|synchronized
parameter_list|<
name|V
parameter_list|>
name|V
name|getFromContext
parameter_list|(
name|Object
name|key
parameter_list|,
name|V
name|defaultValue
parameter_list|)
block|{
name|V
name|value
init|=
name|getFromContext
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|hasInContext
specifier|public
specifier|final
specifier|synchronized
name|boolean
name|hasInContext
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contextSize
specifier|public
specifier|final
specifier|synchronized
name|int
name|contextSize
parameter_list|()
block|{
return|return
name|context
operator|!=
literal|null
condition|?
name|context
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|isContextEmpty
specifier|public
specifier|final
specifier|synchronized
name|boolean
name|isContextEmpty
parameter_list|()
block|{
return|return
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContext
specifier|public
specifier|synchronized
name|ImmutableOpenMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|getContext
parameter_list|()
block|{
return|return
name|context
operator|!=
literal|null
condition|?
name|ImmutableOpenMap
operator|.
name|copyOf
argument_list|(
name|context
argument_list|)
else|:
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|copyContextFrom
specifier|public
specifier|synchronized
name|void
name|copyContextFrom
parameter_list|(
name|HasContext
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|other
init|)
block|{
name|ImmutableOpenMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|otherContext
init|=
name|other
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherContext
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|ObjectObjectHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|ObjectObjectHashMap
argument_list|<>
argument_list|(
name|other
operator|.
name|getContext
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|otherContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|map
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|putAll
argument_list|(
name|otherContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|putHeader
specifier|public
specifier|final
name|T
name|putHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|==
literal|null
condition|)
block|{
name|headers
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getHeader
specifier|public
specifier|final
parameter_list|<
name|V
parameter_list|>
name|V
name|getHeader
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|headers
operator|!=
literal|null
condition|?
operator|(
name|V
operator|)
name|headers
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasHeader
specifier|public
specifier|final
name|boolean
name|hasHeader
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|headers
operator|!=
literal|null
operator|&&
name|headers
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHeaders
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
operator|!=
literal|null
condition|?
name|headers
operator|.
name|keySet
argument_list|()
else|:
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|copyHeadersFrom
specifier|public
name|void
name|copyHeadersFrom
parameter_list|(
name|HasHeaders
name|from
parameter_list|)
block|{
if|if
condition|(
name|from
operator|!=
literal|null
operator|&&
name|from
operator|.
name|getHeaders
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|from
operator|.
name|getHeaders
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|headerName
range|:
name|from
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|putHeader
argument_list|(
name|headerName
argument_list|,
name|from
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|copyContextAndHeadersFrom
specifier|public
name|void
name|copyContextAndHeadersFrom
parameter_list|(
name|HasContextAndHeaders
name|other
parameter_list|)
block|{
name|copyContextFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|copyHeadersFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

