begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|Table
specifier|public
class|class
name|Table
block|{
DECL|field|headers
specifier|protected
name|List
argument_list|<
name|Cell
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rows
specifier|protected
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|currentCells
specifier|protected
name|List
argument_list|<
name|Cell
argument_list|>
name|currentCells
decl_stmt|;
DECL|field|inHeaders
specifier|protected
name|boolean
name|inHeaders
init|=
literal|false
decl_stmt|;
DECL|method|startHeaders
specifier|public
name|Table
name|startHeaders
parameter_list|()
block|{
name|inHeaders
operator|=
literal|true
expr_stmt|;
name|currentCells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|endHeaders
specifier|public
name|Table
name|endHeaders
parameter_list|()
block|{
name|inHeaders
operator|=
literal|false
expr_stmt|;
name|headers
operator|=
name|currentCells
expr_stmt|;
name|currentCells
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startRow
specifier|public
name|Table
name|startRow
parameter_list|()
block|{
if|if
condition|(
name|headers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"no headers added..."
argument_list|)
throw|;
block|}
name|currentCells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|headers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|endRow
specifier|public
name|Table
name|endRow
parameter_list|()
block|{
if|if
condition|(
name|currentCells
operator|.
name|size
argument_list|()
operator|!=
name|headers
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"mismatch on number of cells in a row compared to header"
argument_list|)
throw|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|currentCells
argument_list|)
expr_stmt|;
name|currentCells
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addCell
specifier|public
name|Table
name|addCell
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|addCell
argument_list|(
name|value
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|addCell
specifier|public
name|Table
name|addCell
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|attributes
parameter_list|)
block|{
if|if
condition|(
operator|!
name|inHeaders
condition|)
block|{
if|if
condition|(
name|currentCells
operator|.
name|size
argument_list|()
operator|==
name|headers
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"can't add more cells to a row than the header"
argument_list|)
throw|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mAttr
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|inHeaders
condition|)
block|{
name|mAttr
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// get the attributes of the header cell we are going to add to
name|mAttr
operator|=
name|headers
operator|.
name|get
argument_list|(
name|currentCells
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|attr
expr_stmt|;
block|}
block|}
else|else
block|{
name|mAttr
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|inHeaders
condition|)
block|{
comment|// get the attributes of the header cell we are going to add
name|mAttr
operator|.
name|putAll
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|currentCells
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|attr
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|sAttrs
init|=
name|Strings
operator|.
name|split
argument_list|(
name|attributes
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|sAttr
range|:
name|sAttrs
control|)
block|{
if|if
condition|(
name|sAttr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|int
name|idx
init|=
name|sAttr
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|mAttr
operator|.
name|put
argument_list|(
name|sAttr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
name|sAttr
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|currentCells
operator|.
name|add
argument_list|(
operator|new
name|Cell
argument_list|(
name|value
argument_list|,
name|mAttr
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getHeaders
specifier|public
name|List
argument_list|<
name|Cell
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|this
operator|.
name|headers
return|;
block|}
DECL|method|getRows
specifier|public
name|Iterable
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|rows
return|;
block|}
DECL|class|Cell
specifier|public
specifier|static
class|class
name|Cell
block|{
DECL|field|value
specifier|public
specifier|final
name|Object
name|value
decl_stmt|;
DECL|field|attr
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
decl_stmt|;
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|attr
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|Object
name|value
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|attr
operator|=
name|attr
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

