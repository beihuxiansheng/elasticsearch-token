begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_comment
comment|/**  * A transport address used for IP socket address (wraps {@link java.net.InetSocketAddress}).  */
end_comment

begin_class
DECL|class|InetSocketTransportAddress
specifier|public
class|class
name|InetSocketTransportAddress
implements|implements
name|TransportAddress
block|{
DECL|field|resolveAddress
specifier|private
specifier|static
name|boolean
name|resolveAddress
init|=
literal|false
decl_stmt|;
DECL|method|setResolveAddress
specifier|public
specifier|static
name|void
name|setResolveAddress
parameter_list|(
name|boolean
name|resolveAddress
parameter_list|)
block|{
name|InetSocketTransportAddress
operator|.
name|resolveAddress
operator|=
name|resolveAddress
expr_stmt|;
block|}
DECL|field|address
specifier|private
name|InetSocketAddress
name|address
decl_stmt|;
DECL|method|InetSocketTransportAddress
name|InetSocketTransportAddress
parameter_list|()
block|{      }
DECL|method|InetSocketTransportAddress
specifier|public
name|InetSocketTransportAddress
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|InetSocketTransportAddress
specifier|public
name|InetSocketTransportAddress
parameter_list|(
name|InetAddress
name|address
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|address
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|InetSocketTransportAddress
specifier|public
name|InetSocketTransportAddress
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
DECL|method|readInetSocketTransportAddress
specifier|public
specifier|static
name|InetSocketTransportAddress
name|readInetSocketTransportAddress
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketTransportAddress
name|address
init|=
operator|new
name|InetSocketTransportAddress
argument_list|()
decl_stmt|;
name|address
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|address
return|;
block|}
annotation|@
name|Override
DECL|method|uniqueAddressTypeId
specifier|public
name|short
name|uniqueAddressTypeId
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|sameHost
specifier|public
name|boolean
name|sameHost
parameter_list|(
name|TransportAddress
name|other
parameter_list|)
block|{
return|return
name|other
operator|instanceof
name|InetSocketTransportAddress
operator|&&
name|address
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|InetSocketTransportAddress
operator|)
name|other
operator|)
operator|.
name|address
operator|.
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
DECL|method|address
specifier|public
name|InetSocketAddress
name|address
parameter_list|()
block|{
return|return
name|this
operator|.
name|address
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|readByte
argument_list|()
operator|==
literal|0
condition|)
block|{
name|int
name|len
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
index|[]
name|a
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
comment|// 4 bytes (IPv4) or 16 bytes (IPv6)
name|in
operator|.
name|readFully
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|InetAddress
name|inetAddress
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|16
condition|)
block|{
name|int
name|scope_id
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|inetAddress
operator|=
name|Inet6Address
operator|.
name|getByAddress
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|scope_id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inetAddress
operator|=
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|int
name|port
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|inetAddress
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|resolveAddress
operator|&&
name|address
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
comment|// 4 bytes (IPv4) or 16 bytes (IPv6)
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// 1 byte
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|instanceof
name|Inet6Address
condition|)
name|out
operator|.
name|writeInt
argument_list|(
operator|(
operator|(
name|Inet6Address
operator|)
name|address
operator|.
name|getAddress
argument_list|()
operator|)
operator|.
name|getScopeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|InetSocketTransportAddress
name|address1
init|=
operator|(
name|InetSocketTransportAddress
operator|)
name|o
decl_stmt|;
return|return
name|address
operator|.
name|equals
argument_list|(
name|address1
operator|.
name|address
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|address
operator|!=
literal|null
condition|?
name|address
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"inet["
operator|+
name|address
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

