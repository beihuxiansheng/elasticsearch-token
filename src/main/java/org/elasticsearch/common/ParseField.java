begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ParseField
specifier|public
class|class
name|ParseField
block|{
DECL|field|camelCaseName
specifier|private
specifier|final
name|String
name|camelCaseName
decl_stmt|;
DECL|field|underscoreName
specifier|private
specifier|final
name|String
name|underscoreName
decl_stmt|;
DECL|field|deprecatedNames
specifier|private
specifier|final
name|String
index|[]
name|deprecatedNames
decl_stmt|;
DECL|field|EMPTY_FLAGS
specifier|public
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|Flag
argument_list|>
name|EMPTY_FLAGS
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Flag
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|Flag
specifier|public
specifier|static
enum|enum
name|Flag
block|{
DECL|enum constant|STRICT
name|STRICT
block|}
DECL|method|ParseField
specifier|public
name|ParseField
parameter_list|(
name|String
name|value
parameter_list|,
name|String
modifier|...
name|deprecatedNames
parameter_list|)
block|{
name|camelCaseName
operator|=
name|Strings
operator|.
name|toCamelCase
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|underscoreName
operator|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|deprecatedNames
operator|==
literal|null
operator|||
name|deprecatedNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|deprecatedNames
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|depName
range|:
name|deprecatedNames
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|Strings
operator|.
name|toCamelCase
argument_list|(
name|depName
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|depName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|deprecatedNames
operator|=
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPreferredName
specifier|public
name|String
name|getPreferredName
parameter_list|()
block|{
return|return
name|underscoreName
return|;
block|}
DECL|method|withDeprecation
specifier|public
name|ParseField
name|withDeprecation
parameter_list|(
name|String
modifier|...
name|deprecatedNames
parameter_list|)
block|{
return|return
operator|new
name|ParseField
argument_list|(
name|this
operator|.
name|underscoreName
argument_list|,
name|deprecatedNames
argument_list|)
return|;
block|}
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|currentFieldName
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|EMPTY_FLAGS
argument_list|)
return|;
block|}
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|currentFieldName
parameter_list|,
name|EnumSet
argument_list|<
name|Flag
argument_list|>
name|flags
parameter_list|)
block|{
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
name|camelCaseName
argument_list|)
operator|||
name|currentFieldName
operator|.
name|equals
argument_list|(
name|underscoreName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|depName
range|:
name|deprecatedNames
control|)
block|{
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
name|depName
argument_list|)
condition|)
block|{
if|if
condition|(
name|flags
operator|.
name|contains
argument_list|(
name|Flag
operator|.
name|STRICT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Deprecated field ["
operator|+
name|currentFieldName
operator|+
literal|"] used expected ["
operator|+
name|underscoreName
operator|+
literal|"] instead"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

