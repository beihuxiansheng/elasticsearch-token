begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.text
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|// LUCENE 4 UPGRADE: Is this the right way of comparing bytesreferences inside Text instances?
end_comment

begin_comment
comment|// Copied from Lucene's BytesRef comparator
end_comment

begin_class
DECL|class|UTF8SortedAsUnicodeComparator
specifier|public
class|class
name|UTF8SortedAsUnicodeComparator
implements|implements
name|Comparator
argument_list|<
name|BytesReference
argument_list|>
block|{
DECL|field|utf8SortedAsUnicodeSortOrder
specifier|public
specifier|final
specifier|static
name|Comparator
argument_list|<
name|BytesReference
argument_list|>
name|utf8SortedAsUnicodeSortOrder
init|=
operator|new
name|UTF8SortedAsUnicodeComparator
argument_list|()
decl_stmt|;
comment|// Only singleton
DECL|method|UTF8SortedAsUnicodeComparator
specifier|private
name|UTF8SortedAsUnicodeComparator
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|BytesReference
name|a
parameter_list|,
name|BytesReference
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|hasArray
argument_list|()
operator|&&
name|b
operator|.
name|hasArray
argument_list|()
condition|)
block|{
specifier|final
name|byte
index|[]
name|aBytes
init|=
name|a
operator|.
name|array
argument_list|()
decl_stmt|;
name|int
name|aUpto
init|=
name|a
operator|.
name|arrayOffset
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|bBytes
init|=
name|b
operator|.
name|array
argument_list|()
decl_stmt|;
name|int
name|bUpto
init|=
name|b
operator|.
name|arrayOffset
argument_list|()
decl_stmt|;
specifier|final
name|int
name|aStop
init|=
name|aUpto
operator|+
name|Math
operator|.
name|min
argument_list|(
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|b
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|aUpto
operator|<
name|aStop
condition|)
block|{
name|int
name|aByte
init|=
name|aBytes
index|[
name|aUpto
operator|++
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|bByte
init|=
name|bBytes
index|[
name|bUpto
operator|++
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|diff
init|=
name|aByte
operator|-
name|bByte
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
block|}
comment|// One is a prefix of the other, or, they are equal:
return|return
name|a
operator|.
name|length
argument_list|()
operator|-
name|b
operator|.
name|length
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|byte
index|[]
name|aBytes
init|=
name|a
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|int
name|aUpto
init|=
literal|0
decl_stmt|;
specifier|final
name|byte
index|[]
name|bBytes
init|=
name|b
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|int
name|bUpto
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|aStop
init|=
name|aUpto
operator|+
name|Math
operator|.
name|min
argument_list|(
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|b
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|aUpto
operator|<
name|aStop
condition|)
block|{
name|int
name|aByte
init|=
name|aBytes
index|[
name|aUpto
operator|++
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|bByte
init|=
name|bBytes
index|[
name|bUpto
operator|++
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|diff
init|=
name|aByte
operator|-
name|bByte
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
block|}
comment|// One is a prefix of the other, or, they are equal:
return|return
name|a
operator|.
name|length
argument_list|()
operator|-
name|b
operator|.
name|length
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

