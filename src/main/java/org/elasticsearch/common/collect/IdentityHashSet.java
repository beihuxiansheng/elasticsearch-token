begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.collect
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|IdentityHashSet
specifier|public
class|class
name|IdentityHashSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractSet
argument_list|<
name|E
argument_list|>
implements|implements
name|Set
argument_list|<
name|E
argument_list|>
implements|,
name|Cloneable
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5024744406713321677L
decl_stmt|;
DECL|field|map
specifier|private
specifier|transient
name|IdentityHashMap
argument_list|<
name|E
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
comment|// Dummy value to associate with an Object in the backing Map
DECL|field|PRESENT
specifier|private
specifier|static
specifier|final
name|Object
name|PRESENT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|IdentityHashSet
specifier|public
name|IdentityHashSet
parameter_list|()
block|{
name|map
operator|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|IdentityHashSet
specifier|public
name|IdentityHashSet
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|map
operator|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|(
name|Math
operator|.
name|max
argument_list|(
call|(
name|int
call|)
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|/
literal|.75f
argument_list|)
operator|+
literal|1
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|IdentityHashSet
specifier|public
name|IdentityHashSet
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|map
operator|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns an iterator over the elements in this set.  The elements      * are returned in no particular order.      *      * @return an Iterator over the elements in this set      * @see ConcurrentModificationException      */
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Returns the number of elements in this set (its cardinality).      *      * @return the number of elements in this set (its cardinality)      */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Returns<tt>true</tt> if this set contains no elements.      *      * @return<tt>true</tt> if this set contains no elements      */
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|map
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Returns<tt>true</tt> if this set contains the specified element.      * More formally, returns<tt>true</tt> if and only if this set      * contains an element<tt>e</tt> such that      *<tt>(o==e)</tt>.      *      * @param o element whose presence in this set is to be tested      * @return<tt>true</tt> if this set contains the specified element      */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|/**      * Adds the specified element to this set if it is not already present.      * More formally, adds the specified element<tt>e</tt> to this set if      * this set contains no element<tt>e2</tt> such that      *<tt>(e==e2)</tt>.      * If this set already contains the element, the call leaves the set      * unchanged and returns<tt>false</tt>.      *      * @param e element to be added to this set      * @return<tt>true</tt> if this set did not already contain the specified      *         element      */
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|map
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|PRESENT
argument_list|)
operator|==
literal|null
return|;
block|}
comment|/**      * Removes the specified element from this set if it is present.      * More formally, removes an element<tt>e</tt> such that      *<tt>(o==e)</tt>,      * if this set contains such an element.  Returns<tt>true</tt> if      * this set contained the element (or equivalently, if this set      * changed as a result of the call).  (This set will not contain the      * element once the call returns.)      *      * @param o object to be removed from this set, if present      * @return<tt>true</tt> if the set contained the specified element      */
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|map
operator|.
name|remove
argument_list|(
name|o
argument_list|)
operator|==
name|PRESENT
return|;
block|}
comment|/**      * Removes all of the elements from this set.      * The set will be empty after this call returns.      */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns a shallow copy of this<tt>HashSet</tt> instance: the elements      * themselves are not cloned.      *      * @return a shallow copy of this set      */
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
name|IdentityHashSet
argument_list|<
name|E
argument_list|>
name|newSet
init|=
operator|(
name|IdentityHashSet
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|newSet
operator|.
name|map
operator|=
operator|(
name|IdentityHashMap
argument_list|<
name|E
argument_list|,
name|Object
argument_list|>
operator|)
name|map
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|newSet
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InternalError
argument_list|()
throw|;
block|}
block|}
comment|/**      * Index the state of this<tt>HashSet</tt> instance to a stream (that is,      * serialize it).      *      * @serialData The capacity of the backing<tt>HashMap</tt> instance      * (int), and its load factor (float) are emitted, followed by      * the size of the set (the number of elements it contains)      * (int), followed by all of its elements (each an Object) in      * no particular order.      */
DECL|method|writeObject
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|s
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
comment|// Write out any hidden serialization magic
name|s
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
comment|// Write out size
name|s
operator|.
name|writeInt
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write out all elements in the proper order.
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|s
operator|.
name|writeObject
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reconstitute the<tt>HashSet</tt> instance from a stream (that is,      * deserialize it).      */
DECL|method|readObject
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|s
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// Read in any hidden serialization magic
name|s
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
comment|// Read in size
name|int
name|size
init|=
name|s
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|map
operator|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// Read in all elements in the proper order.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|E
name|e
init|=
operator|(
name|E
operator|)
name|s
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|PRESENT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

