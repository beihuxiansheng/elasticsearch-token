begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.collect
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|impl
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|ExtTHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ForwardingMap
import|;
end_import

begin_comment
comment|/**  * This class provides factory methods for Maps. The returned {@link Map}  * instances are general purpose maps and non of the method guarantees a  * concrete implementation unless the return type is a concrete type. The  * implementations used might change over time, if you rely on a specific  * Implementation you should use a concrete constructor.  */
end_comment

begin_class
DECL|class|XMaps
specifier|public
specifier|final
class|class
name|XMaps
block|{
DECL|field|DEFAULT_CAPACITY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CAPACITY
init|=
name|Constants
operator|.
name|DEFAULT_CAPACITY
decl_stmt|;
comment|/**      * Returns a new map with the given initial capacity      */
DECL|method|newMap
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newMap
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
return|return
operator|new
name|ExtTHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|capacity
argument_list|,
name|Constants
operator|.
name|DEFAULT_LOAD_FACTOR
argument_list|)
return|;
block|}
comment|/**      * Returns a new map with a default initial capacity of      * {@value #DEFAULT_CAPACITY}      */
DECL|method|newMap
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newMap
parameter_list|()
block|{
return|return
name|newMap
argument_list|(
name|DEFAULT_CAPACITY
argument_list|)
return|;
block|}
comment|/**      * Returns a map like {@link #newMap()} that does not accept<code>null</code> keys      */
DECL|method|newNoNullKeysMap
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newNoNullKeysMap
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|newMap
argument_list|()
decl_stmt|;
return|return
name|ensureNoNullKeys
argument_list|(
name|delegate
argument_list|)
return|;
block|}
comment|/**      * Returns a map like {@link #newMap(in)} that does not accept<code>null</code> keys      */
DECL|method|newNoNullKeysMap
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newNoNullKeysMap
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|newMap
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
return|return
name|ensureNoNullKeys
argument_list|(
name|delegate
argument_list|)
return|;
block|}
comment|/**      * Wraps the given map and prevent adding of<code>null</code> keys.      */
DECL|method|ensureNoNullKeys
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|ensureNoNullKeys
parameter_list|(
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|ForwardingMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Map key must not be null"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

