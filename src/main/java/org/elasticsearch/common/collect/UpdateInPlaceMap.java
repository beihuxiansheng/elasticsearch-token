begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.collect
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A map that exposes only read only methods, and can be mutated using a {@link #mutator()}. It  * allows for a cutoff switch between {@link ImmutableOpenMap} and {@link ConcurrentMap}, based on size, since as  * the size grows bigger, cloning the immutable map cost gets bigger and bigger, and might as well move to CHM.  *<p/>  * Note, its important to understand the semantics of the class and its mutator, its not an update in place, when  * CHM is used, changes to the mutator will be reflected in the existing maps!. This class should be used as if  * its a regular, mutable concurrent map, mutation can affect the existing map.  *<p/>  * This class only allows for a single concurrent mutator to execute at the same time.  */
end_comment

begin_class
DECL|class|UpdateInPlaceMap
specifier|public
specifier|final
class|class
name|UpdateInPlaceMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|switchSize
specifier|final
name|int
name|switchSize
decl_stmt|;
DECL|field|mutating
specifier|final
name|AtomicBoolean
name|mutating
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|immutableMap
specifier|volatile
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|immutableMap
decl_stmt|;
DECL|field|concurrentMap
specifier|volatile
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|concurrentMap
decl_stmt|;
DECL|method|UpdateInPlaceMap
name|UpdateInPlaceMap
parameter_list|(
name|int
name|switchSize
parameter_list|)
block|{
name|this
operator|.
name|switchSize
operator|=
name|switchSize
expr_stmt|;
if|if
condition|(
name|switchSize
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|concurrentMap
operator|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|immutableMap
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|concurrentMap
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|immutableMap
operator|=
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns if the map is empty or not.      */
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
specifier|final
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|immutableMap
init|=
name|this
operator|.
name|immutableMap
decl_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|concurrentMap
init|=
name|this
operator|.
name|concurrentMap
decl_stmt|;
return|return
name|immutableMap
operator|!=
literal|null
condition|?
name|immutableMap
operator|.
name|isEmpty
argument_list|()
else|:
name|concurrentMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Returns the value matching a key, or null if not matched.      */
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
specifier|final
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|immutableMap
init|=
name|this
operator|.
name|immutableMap
decl_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|concurrentMap
init|=
name|this
operator|.
name|concurrentMap
decl_stmt|;
return|return
name|immutableMap
operator|!=
literal|null
condition|?
name|immutableMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
name|concurrentMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Returns all the values in the map, on going mutator changes might or might not be reflected      * in the values.      */
DECL|method|values
specifier|public
name|Iterable
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|immutableMap
init|=
name|UpdateInPlaceMap
operator|.
name|this
operator|.
name|immutableMap
decl_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|concurrentMap
init|=
name|UpdateInPlaceMap
operator|.
name|this
operator|.
name|concurrentMap
decl_stmt|;
if|if
condition|(
name|immutableMap
operator|!=
literal|null
condition|)
block|{
return|return
name|immutableMap
operator|.
name|valuesIt
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Iterables
operator|.
name|unmodifiableIterable
argument_list|(
name|concurrentMap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Opens a mutator allowing to mutate this map. Note, only one mutator is allowed to execute.      */
DECL|method|mutator
specifier|public
name|Mutator
name|mutator
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mutating
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"map is already mutating, can't have another mutator on it"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Mutator
argument_list|()
return|;
block|}
DECL|method|of
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|UpdateInPlaceMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|int
name|switchSize
parameter_list|)
block|{
return|return
operator|new
name|UpdateInPlaceMap
argument_list|<>
argument_list|(
name|switchSize
argument_list|)
return|;
block|}
DECL|class|Mutator
specifier|public
specifier|final
class|class
name|Mutator
implements|implements
name|Releasable
block|{
DECL|field|immutableBuilder
specifier|private
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|immutableBuilder
decl_stmt|;
DECL|method|Mutator
specifier|private
name|Mutator
parameter_list|()
block|{
if|if
condition|(
name|immutableMap
operator|!=
literal|null
condition|)
block|{
name|immutableBuilder
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|immutableMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|immutableBuilder
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
name|immutableBuilder
operator|!=
literal|null
condition|)
block|{
return|return
name|immutableBuilder
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
name|concurrentMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|immutableBuilder
operator|!=
literal|null
condition|)
block|{
name|V
name|v
init|=
name|immutableBuilder
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|switchIfNeeded
argument_list|()
expr_stmt|;
return|return
name|v
return|;
block|}
else|else
block|{
return|return
name|concurrentMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
DECL|method|putAll
specifier|public
name|Mutator
name|putAll
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|remove
specifier|public
name|V
name|remove
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|immutableBuilder
operator|!=
literal|null
condition|?
name|immutableBuilder
operator|.
name|remove
argument_list|(
name|key
argument_list|)
else|:
name|concurrentMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|switchIfNeeded
specifier|private
name|void
name|switchIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|concurrentMap
operator|!=
literal|null
condition|)
block|{
assert|assert
name|immutableBuilder
operator|==
literal|null
assert|;
return|return;
block|}
if|if
condition|(
name|immutableBuilder
operator|.
name|size
argument_list|()
operator|<=
name|switchSize
condition|)
block|{
return|return;
block|}
name|concurrentMap
operator|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cursor
range|:
name|immutableBuilder
control|)
block|{
name|concurrentMap
operator|.
name|put
argument_list|(
name|cursor
operator|.
name|key
argument_list|,
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|immutableBuilder
operator|=
literal|null
expr_stmt|;
name|immutableMap
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|immutableBuilder
operator|!=
literal|null
condition|)
block|{
name|immutableMap
operator|=
name|immutableBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
assert|assert
operator|(
name|immutableBuilder
operator|!=
literal|null
operator|&&
name|concurrentMap
operator|==
literal|null
operator|)
operator|||
operator|(
name|immutableBuilder
operator|==
literal|null
operator|&&
name|concurrentMap
operator|!=
literal|null
operator|)
assert|;
name|mutating
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

