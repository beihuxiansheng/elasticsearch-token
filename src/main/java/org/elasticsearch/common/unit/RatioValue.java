begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.unit
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_comment
comment|/**  * Utility class to represent ratio and percentage values between 0 and 100  */
end_comment

begin_class
DECL|class|RatioValue
specifier|public
class|class
name|RatioValue
block|{
DECL|field|percent
specifier|private
specifier|final
name|double
name|percent
decl_stmt|;
DECL|method|RatioValue
specifier|public
name|RatioValue
parameter_list|(
name|double
name|percent
parameter_list|)
block|{
name|this
operator|.
name|percent
operator|=
name|percent
expr_stmt|;
block|}
DECL|method|getAsRatio
specifier|public
name|double
name|getAsRatio
parameter_list|()
block|{
return|return
name|this
operator|.
name|percent
operator|/
literal|100.0
return|;
block|}
DECL|method|getAsPercent
specifier|public
name|double
name|getAsPercent
parameter_list|()
block|{
return|return
name|this
operator|.
name|percent
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|percent
operator|+
literal|"%"
return|;
block|}
comment|/**      * Parses the provided string as a {@link RatioValue}, the string can      * either be in percentage format (eg. 73.5%), or a floating-point ratio      * format (eg. 0.735)      */
DECL|method|parseRatioValue
specifier|public
specifier|static
name|RatioValue
name|parseRatioValue
parameter_list|(
name|String
name|sValue
parameter_list|)
block|{
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
specifier|final
name|String
name|percentAsString
init|=
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|double
name|percent
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|percentAsString
argument_list|)
decl_stmt|;
if|if
condition|(
name|percent
argument_list|<
literal|0
operator|||
name|percent
argument_list|>
literal|100
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Percentage should be in [0-100], got "
operator|+
name|percentAsString
argument_list|)
throw|;
block|}
return|return
operator|new
name|RatioValue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|percent
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Failed to parse ["
operator|+
name|percentAsString
operator|+
literal|"] as a double"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|double
name|ratio
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|ratio
argument_list|<
literal|0
operator|||
name|ratio
argument_list|>
literal|1.0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Ratio should be in [0-1.0], got "
operator|+
name|ratio
argument_list|)
throw|;
block|}
return|return
operator|new
name|RatioValue
argument_list|(
literal|100.0
operator|*
name|Math
operator|.
name|abs
argument_list|(
name|ratio
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Invalid ratio or percentage: ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

