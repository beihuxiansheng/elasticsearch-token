begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.unit
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_enum
DECL|enum|DistanceUnit
specifier|public
enum|enum
name|DistanceUnit
block|{
DECL|enum constant|MILES
name|MILES
argument_list|(
literal|3959
argument_list|,
literal|24902
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"miles"
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|toMiles
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
return|return
name|distance
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|toKilometers
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
return|return
name|distance
operator|*
name|MILES_KILOMETRES_RATIO
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
return|return
name|distance
operator|+
literal|"mi"
return|;
block|}
block|}
block|,
DECL|enum constant|KILOMETERS
name|KILOMETERS
argument_list|(
literal|6371
argument_list|,
literal|40076
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"km"
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|toMiles
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
return|return
name|distance
operator|/
name|MILES_KILOMETRES_RATIO
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|toKilometers
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
return|return
name|distance
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
return|return
name|distance
operator|+
literal|"km"
return|;
block|}
block|}
block|;
DECL|field|MILES_KILOMETRES_RATIO
specifier|static
specifier|final
name|double
name|MILES_KILOMETRES_RATIO
init|=
literal|1.609344
decl_stmt|;
comment|/**      * Converts the given distance from the given DistanceUnit, to the given DistanceUnit      *      * @param distance Distance to convert      * @param from     Unit to convert the distance from      * @param to       Unit of distance to convert to      * @return Given distance converted to the distance in the given uni      */
DECL|method|convert
specifier|public
specifier|static
name|double
name|convert
parameter_list|(
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|from
parameter_list|,
name|DistanceUnit
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|==
name|to
condition|)
block|{
return|return
name|distance
return|;
block|}
return|return
operator|(
name|to
operator|==
name|MILES
operator|)
condition|?
name|distance
operator|/
name|MILES_KILOMETRES_RATIO
else|:
name|distance
operator|*
name|MILES_KILOMETRES_RATIO
return|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|double
name|parse
parameter_list|(
name|String
name|distance
parameter_list|,
name|DistanceUnit
name|defaultUnit
parameter_list|,
name|DistanceUnit
name|to
parameter_list|)
block|{
if|if
condition|(
name|distance
operator|.
name|endsWith
argument_list|(
literal|"mi"
argument_list|)
condition|)
block|{
return|return
name|convert
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|distance
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|distance
operator|.
name|length
argument_list|()
operator|-
literal|"mi"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|MILES
argument_list|,
name|to
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|distance
operator|.
name|endsWith
argument_list|(
literal|"miles"
argument_list|)
condition|)
block|{
return|return
name|convert
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|distance
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|distance
operator|.
name|length
argument_list|()
operator|-
literal|"miles"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|MILES
argument_list|,
name|to
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|distance
operator|.
name|endsWith
argument_list|(
literal|"km"
argument_list|)
condition|)
block|{
return|return
name|convert
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|distance
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|distance
operator|.
name|length
argument_list|()
operator|-
literal|"km"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|KILOMETERS
argument_list|,
name|to
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|convert
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|distance
argument_list|)
argument_list|,
name|defaultUnit
argument_list|,
name|to
argument_list|)
return|;
block|}
block|}
DECL|method|parseUnit
specifier|public
specifier|static
name|DistanceUnit
name|parseUnit
parameter_list|(
name|String
name|distance
parameter_list|,
name|DistanceUnit
name|defaultUnit
parameter_list|)
block|{
if|if
condition|(
name|distance
operator|.
name|endsWith
argument_list|(
literal|"mi"
argument_list|)
condition|)
block|{
return|return
name|MILES
return|;
block|}
elseif|else
if|if
condition|(
name|distance
operator|.
name|endsWith
argument_list|(
literal|"miles"
argument_list|)
condition|)
block|{
return|return
name|MILES
return|;
block|}
elseif|else
if|if
condition|(
name|distance
operator|.
name|endsWith
argument_list|(
literal|"km"
argument_list|)
condition|)
block|{
return|return
name|KILOMETERS
return|;
block|}
else|else
block|{
return|return
name|defaultUnit
return|;
block|}
block|}
DECL|field|earthCircumference
specifier|protected
specifier|final
name|double
name|earthCircumference
decl_stmt|;
DECL|field|earthRadius
specifier|protected
specifier|final
name|double
name|earthRadius
decl_stmt|;
DECL|field|distancePerDegree
specifier|protected
specifier|final
name|double
name|distancePerDegree
decl_stmt|;
DECL|method|DistanceUnit
name|DistanceUnit
parameter_list|(
name|double
name|earthRadius
parameter_list|,
name|double
name|earthCircumference
parameter_list|)
block|{
name|this
operator|.
name|earthCircumference
operator|=
name|earthCircumference
expr_stmt|;
name|this
operator|.
name|earthRadius
operator|=
name|earthRadius
expr_stmt|;
name|this
operator|.
name|distancePerDegree
operator|=
name|earthCircumference
operator|/
literal|360
expr_stmt|;
block|}
DECL|method|getEarthCircumference
specifier|public
name|double
name|getEarthCircumference
parameter_list|()
block|{
return|return
name|earthCircumference
return|;
block|}
DECL|method|getEarthRadius
specifier|public
name|double
name|getEarthRadius
parameter_list|()
block|{
return|return
name|earthRadius
return|;
block|}
DECL|method|getDistancePerDegree
specifier|public
name|double
name|getDistancePerDegree
parameter_list|()
block|{
return|return
name|distancePerDegree
return|;
block|}
DECL|method|toMiles
specifier|public
specifier|abstract
name|double
name|toMiles
parameter_list|(
name|double
name|distance
parameter_list|)
function_decl|;
DECL|method|toKilometers
specifier|public
specifier|abstract
name|double
name|toKilometers
parameter_list|(
name|double
name|distance
parameter_list|)
function_decl|;
DECL|method|toString
specifier|public
specifier|abstract
name|String
name|toString
parameter_list|(
name|double
name|distance
parameter_list|)
function_decl|;
DECL|method|fromString
specifier|public
specifier|static
name|DistanceUnit
name|fromString
parameter_list|(
name|String
name|unit
parameter_list|)
block|{
if|if
condition|(
literal|"km"
operator|.
name|equals
argument_list|(
name|unit
argument_list|)
condition|)
block|{
return|return
name|KILOMETERS
return|;
block|}
elseif|else
if|if
condition|(
literal|"mi"
operator|.
name|equals
argument_list|(
name|unit
argument_list|)
condition|)
block|{
return|return
name|MILES
return|;
block|}
elseif|else
if|if
condition|(
literal|"miles"
operator|.
name|equals
argument_list|(
name|unit
argument_list|)
condition|)
block|{
return|return
name|MILES
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No distance unit match ["
operator|+
name|unit
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|method|writeDistanceUnit
specifier|public
specifier|static
name|void
name|writeDistanceUnit
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|unit
operator|==
name|MILES
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unit
operator|==
name|KILOMETERS
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readDistanceUnit
specifier|public
specifier|static
name|DistanceUnit
name|readDistanceUnit
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
return|return
name|MILES
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|1
condition|)
block|{
return|return
name|KILOMETERS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No type for distance unit matching ["
operator|+
name|b
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
end_enum

end_unit

