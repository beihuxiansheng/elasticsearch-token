begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.unit
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
import|;
end_import

begin_comment
comment|/** Utility methods to get memory sizes. */
end_comment

begin_enum
DECL|enum|MemorySizeValue
specifier|public
enum|enum
name|MemorySizeValue
block|{     ;
comment|/** Parse the provided string as a memory size. This method either accepts absolute values such as      *<tt>42</tt> (default assumed unit is byte) or<tt>2mb</tt>, or percentages of the heap size: if      *  the heap is 1G,<tt>10%</tt> will be parsed as<tt>100mb</tt>.  */
DECL|method|parseBytesSizeValueOrHeapRatio
specifier|public
specifier|static
name|ByteSizeValue
name|parseBytesSizeValueOrHeapRatio
parameter_list|(
name|String
name|sValue
parameter_list|)
block|{
if|if
condition|(
name|sValue
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
name|double
name|percent
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteSizeValue
argument_list|(
call|(
name|long
call|)
argument_list|(
operator|(
name|percent
operator|/
literal|100
operator|)
operator|*
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapMax
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|parseBytesSizeValue
argument_list|(
name|sValue
argument_list|)
return|;
block|}
block|}
block|}
end_enum

end_unit

