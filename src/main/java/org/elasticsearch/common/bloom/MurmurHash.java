begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.bloom
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bloom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * This is a very fast, non-cryptographic hash suitable for general hash-based  * lookup. See http://murmurhash.googlepages.com/ for more details.  *<p/>  *<p>  * The C version of MurmurHash 2.0 found at that site was ported to Java by  * Andrzej Bialecki (ab at getopt org).  *</p>  */
end_comment

begin_class
DECL|class|MurmurHash
specifier|public
class|class
name|MurmurHash
block|{
DECL|method|hash32
specifier|public
specifier|static
name|int
name|hash32
parameter_list|(
name|ByteBuffer
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|seed
parameter_list|)
block|{
name|int
name|m
init|=
literal|0x5bd1e995
decl_stmt|;
name|int
name|r
init|=
literal|24
decl_stmt|;
name|int
name|h
init|=
name|seed
operator|^
name|length
decl_stmt|;
name|int
name|len_4
init|=
name|length
operator|>>
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len_4
condition|;
name|i
operator|++
control|)
block|{
name|int
name|i_4
init|=
name|i
operator|<<
literal|2
decl_stmt|;
name|int
name|k
init|=
name|data
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_4
operator|+
literal|3
argument_list|)
decl_stmt|;
name|k
operator|=
name|k
operator|<<
literal|8
expr_stmt|;
name|k
operator|=
name|k
operator||
operator|(
name|data
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_4
operator|+
literal|2
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|k
operator|=
name|k
operator|<<
literal|8
expr_stmt|;
name|k
operator|=
name|k
operator||
operator|(
name|data
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_4
operator|+
literal|1
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|k
operator|=
name|k
operator|<<
literal|8
expr_stmt|;
name|k
operator|=
name|k
operator||
operator|(
name|data
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_4
operator|+
literal|0
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|k
operator|*=
name|m
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
name|r
expr_stmt|;
name|k
operator|*=
name|m
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
name|h
operator|^=
name|k
expr_stmt|;
block|}
comment|// avoid calculating modulo
name|int
name|len_m
init|=
name|len_4
operator|<<
literal|2
decl_stmt|;
name|int
name|left
init|=
name|length
operator|-
name|len_m
decl_stmt|;
if|if
condition|(
name|left
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|left
operator|>=
literal|3
condition|)
block|{
name|h
operator|^=
operator|(
name|int
operator|)
name|data
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
literal|3
argument_list|)
operator|<<
literal|16
expr_stmt|;
block|}
if|if
condition|(
name|left
operator|>=
literal|2
condition|)
block|{
name|h
operator|^=
operator|(
name|int
operator|)
name|data
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
literal|2
argument_list|)
operator|<<
literal|8
expr_stmt|;
block|}
if|if
condition|(
name|left
operator|>=
literal|1
condition|)
block|{
name|h
operator|^=
operator|(
name|int
operator|)
name|data
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|h
operator|*=
name|m
expr_stmt|;
block|}
name|h
operator|^=
name|h
operator|>>>
literal|13
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
name|h
operator|^=
name|h
operator|>>>
literal|15
expr_stmt|;
return|return
name|h
return|;
block|}
DECL|method|hash64
specifier|public
specifier|static
name|long
name|hash64
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|long
name|m64
init|=
literal|0xc6a4a7935bd1e995L
decl_stmt|;
name|int
name|r64
init|=
literal|47
decl_stmt|;
name|long
name|h64
init|=
operator|(
name|seed
operator|&
literal|0xffffffffL
operator|)
operator|^
operator|(
name|m64
operator|*
name|length
operator|)
decl_stmt|;
name|int
name|lenLongs
init|=
name|length
operator|>>
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lenLongs
condition|;
operator|++
name|i
control|)
block|{
name|int
name|i_8
init|=
name|i
operator|<<
literal|3
decl_stmt|;
name|long
name|k64
init|=
operator|(
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_8
operator|+
literal|0
argument_list|)
operator|&
literal|0xff
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_8
operator|+
literal|1
argument_list|)
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_8
operator|+
literal|2
argument_list|)
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_8
operator|+
literal|3
argument_list|)
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_8
operator|+
literal|4
argument_list|)
operator|&
literal|0xff
operator|)
operator|<<
literal|32
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_8
operator|+
literal|5
argument_list|)
operator|&
literal|0xff
operator|)
operator|<<
literal|40
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_8
operator|+
literal|6
argument_list|)
operator|&
literal|0xff
operator|)
operator|<<
literal|48
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i_8
operator|+
literal|7
argument_list|)
operator|&
literal|0xff
operator|)
operator|<<
literal|56
operator|)
decl_stmt|;
name|k64
operator|*=
name|m64
expr_stmt|;
name|k64
operator|^=
name|k64
operator|>>>
name|r64
expr_stmt|;
name|k64
operator|*=
name|m64
expr_stmt|;
name|h64
operator|^=
name|k64
expr_stmt|;
name|h64
operator|*=
name|m64
expr_stmt|;
block|}
name|int
name|rem
init|=
name|length
operator|&
literal|0x7
decl_stmt|;
switch|switch
condition|(
name|rem
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
literal|7
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|6
argument_list|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|6
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|5
argument_list|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|5
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|4
argument_list|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|4
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|3
argument_list|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|2
argument_list|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|1
argument_list|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
operator|.
name|get
argument_list|(
name|offset
operator|+
name|length
operator|-
name|rem
argument_list|)
expr_stmt|;
name|h64
operator|*=
name|m64
expr_stmt|;
block|}
name|h64
operator|^=
name|h64
operator|>>>
name|r64
expr_stmt|;
name|h64
operator|*=
name|m64
expr_stmt|;
name|h64
operator|^=
name|h64
operator|>>>
name|r64
expr_stmt|;
return|return
name|h64
return|;
block|}
DECL|method|hash64
specifier|public
specifier|static
name|long
name|hash64
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|long
name|m64
init|=
literal|0xc6a4a7935bd1e995L
decl_stmt|;
name|int
name|r64
init|=
literal|47
decl_stmt|;
name|long
name|h64
init|=
operator|(
name|seed
operator|&
literal|0xffffffffL
operator|)
operator|^
operator|(
name|m64
operator|*
name|length
operator|)
decl_stmt|;
name|int
name|lenLongs
init|=
name|length
operator|>>
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lenLongs
condition|;
operator|++
name|i
control|)
block|{
name|int
name|i_8
init|=
name|i
operator|<<
literal|3
decl_stmt|;
name|long
name|k64
init|=
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|i_8
operator|+
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|i_8
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|i_8
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|i_8
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|i_8
operator|+
literal|4
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|32
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|i_8
operator|+
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|40
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|i_8
operator|+
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|48
operator|)
operator|+
operator|(
operator|(
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|i_8
operator|+
literal|7
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|56
operator|)
decl_stmt|;
name|k64
operator|*=
name|m64
expr_stmt|;
name|k64
operator|^=
name|k64
operator|>>>
name|r64
expr_stmt|;
name|k64
operator|*=
name|m64
expr_stmt|;
name|h64
operator|^=
name|k64
expr_stmt|;
name|h64
operator|*=
name|m64
expr_stmt|;
block|}
name|int
name|rem
init|=
name|length
operator|&
literal|0x7
decl_stmt|;
switch|switch
condition|(
name|rem
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
literal|7
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|6
index|]
operator|<<
literal|48
expr_stmt|;
case|case
literal|6
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|5
index|]
operator|<<
literal|40
expr_stmt|;
case|case
literal|5
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|4
index|]
operator|<<
literal|32
expr_stmt|;
case|case
literal|4
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|3
index|]
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|2
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|length
operator|-
name|rem
operator|+
literal|1
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|h64
operator|^=
operator|(
name|long
operator|)
name|key
index|[
name|offset
operator|+
name|length
operator|-
name|rem
index|]
expr_stmt|;
name|h64
operator|*=
name|m64
expr_stmt|;
block|}
name|h64
operator|^=
name|h64
operator|>>>
name|r64
expr_stmt|;
name|h64
operator|*=
name|m64
expr_stmt|;
name|h64
operator|^=
name|h64
operator|>>>
name|r64
expr_stmt|;
return|return
name|h64
return|;
block|}
block|}
end_class

end_unit

