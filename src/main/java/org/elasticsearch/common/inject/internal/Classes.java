begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2007 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_comment
comment|/**  * Class utilities.  */
end_comment

begin_class
DECL|class|Classes
specifier|public
class|class
name|Classes
block|{
DECL|method|isInnerClass
specifier|public
specifier|static
name|boolean
name|isInnerClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|clazz
operator|.
name|getEnclosingClass
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|isConcrete
specifier|public
specifier|static
name|boolean
name|isConcrete
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|int
name|modifiers
init|=
name|clazz
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
return|return
operator|!
name|clazz
operator|.
name|isInterface
argument_list|()
operator|&&
operator|!
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|modifiers
argument_list|)
return|;
block|}
block|}
end_class

end_unit

