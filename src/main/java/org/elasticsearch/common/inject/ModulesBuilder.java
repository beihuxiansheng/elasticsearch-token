begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ModulesBuilder
specifier|public
class|class
name|ModulesBuilder
implements|implements
name|Iterable
argument_list|<
name|Module
argument_list|>
block|{
DECL|field|modules
specifier|private
specifier|final
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|method|add
specifier|public
name|ModulesBuilder
name|add
parameter_list|(
name|Module
modifier|...
name|modules
parameter_list|)
block|{
for|for
control|(
name|Module
name|module
range|:
name|modules
control|)
block|{
name|add
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|add
specifier|public
name|ModulesBuilder
name|add
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|module
argument_list|)
expr_stmt|;
if|if
condition|(
name|module
operator|instanceof
name|SpawnModules
condition|)
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|spawned
init|=
operator|(
operator|(
name|SpawnModules
operator|)
name|module
operator|)
operator|.
name|spawnModules
argument_list|()
decl_stmt|;
for|for
control|(
name|Module
name|spawn
range|:
name|spawned
control|)
block|{
name|add
argument_list|(
name|spawn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Module
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|modules
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|createInjector
specifier|public
name|Injector
name|createInjector
parameter_list|()
block|{
name|Modules
operator|.
name|processModules
argument_list|(
name|modules
argument_list|)
expr_stmt|;
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
name|modules
argument_list|)
decl_stmt|;
name|Injectors
operator|.
name|cleanCaches
argument_list|(
name|injector
argument_list|)
expr_stmt|;
comment|// in ES, we always create all instances as if they are eager singletons
comment|// this allows for considerable memory savings (no need to store construction info) as well as cycles
operator|(
operator|(
name|InjectorImpl
operator|)
name|injector
operator|)
operator|.
name|readOnlyAllSingletons
argument_list|()
expr_stmt|;
return|return
name|injector
return|;
block|}
DECL|method|createChildInjector
specifier|public
name|Injector
name|createChildInjector
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|Modules
operator|.
name|processModules
argument_list|(
name|modules
argument_list|)
expr_stmt|;
name|Injector
name|childInjector
init|=
name|injector
operator|.
name|createChildInjector
argument_list|(
name|modules
argument_list|)
decl_stmt|;
name|Injectors
operator|.
name|cleanCaches
argument_list|(
name|childInjector
argument_list|)
expr_stmt|;
comment|// in ES, we always create all instances as if they are eager singletons
comment|// this allows for considerable memory savings (no need to store construction info) as well as cycles
operator|(
operator|(
name|InjectorImpl
operator|)
name|childInjector
operator|)
operator|.
name|readOnlyAllSingletons
argument_list|()
expr_stmt|;
return|return
name|childInjector
return|;
block|}
block|}
end_class

end_unit

