begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|InjectorImpl
operator|.
name|MethodInvoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|Errors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|ErrorsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|InternalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_comment
comment|/**  * Invokes an injectable method.  */
end_comment

begin_class
DECL|class|SingleMethodInjector
class|class
name|SingleMethodInjector
implements|implements
name|SingleMemberInjector
block|{
DECL|field|methodInvoker
specifier|final
name|MethodInvoker
name|methodInvoker
decl_stmt|;
DECL|field|parameterInjectors
specifier|final
name|SingleParameterInjector
argument_list|<
name|?
argument_list|>
index|[]
name|parameterInjectors
decl_stmt|;
DECL|field|injectionPoint
specifier|final
name|InjectionPoint
name|injectionPoint
decl_stmt|;
DECL|method|SingleMethodInjector
specifier|public
name|SingleMethodInjector
parameter_list|(
name|InjectorImpl
name|injector
parameter_list|,
name|InjectionPoint
name|injectionPoint
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|this
operator|.
name|injectionPoint
operator|=
name|injectionPoint
expr_stmt|;
specifier|final
name|Method
name|method
init|=
operator|(
name|Method
operator|)
name|injectionPoint
operator|.
name|getMember
argument_list|()
decl_stmt|;
name|methodInvoker
operator|=
name|createMethodInvoker
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|parameterInjectors
operator|=
name|injector
operator|.
name|getParametersInjectors
argument_list|(
name|injectionPoint
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
DECL|method|createMethodInvoker
specifier|private
name|MethodInvoker
name|createMethodInvoker
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
comment|// We can't use FastMethod if the method is private.
name|int
name|modifiers
init|=
name|method
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPrivate
argument_list|(
name|modifiers
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isProtected
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{         }
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MethodInvoker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|target
parameter_list|,
name|Object
modifier|...
name|parameters
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getInjectionPoint
specifier|public
name|InjectionPoint
name|getInjectionPoint
parameter_list|()
block|{
return|return
name|injectionPoint
return|;
block|}
annotation|@
name|Override
DECL|method|inject
specifier|public
name|void
name|inject
parameter_list|(
name|Errors
name|errors
parameter_list|,
name|InternalContext
name|context
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|Object
index|[]
name|parameters
decl_stmt|;
try|try
block|{
name|parameters
operator|=
name|SingleParameterInjector
operator|.
name|getAll
argument_list|(
name|errors
argument_list|,
name|context
argument_list|,
name|parameterInjectors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|merge
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|methodInvoker
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
comment|// a security manager is blocking us, we're hosed
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|userException
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|userException
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|userException
operator|.
name|getCause
argument_list|()
else|:
name|userException
decl_stmt|;
name|errors
operator|.
name|withSource
argument_list|(
name|injectionPoint
argument_list|)
operator|.
name|errorInjectingMethod
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

