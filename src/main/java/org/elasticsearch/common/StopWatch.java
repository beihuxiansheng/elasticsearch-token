begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Simple stop watch, allowing for timing of a number of tasks,  * exposing total running time and running time for each named task.  *<p/>  *<p>Conceals use of<code>System.currentTimeMillis()</code>, improving the  * readability of application code and reducing the likelihood of calculation errors.  *<p/>  *<p>Note that this object is not designed to be thread-safe and does not  * use synchronization.  *<p/>  *<p>This class is normally used to verify performance during proof-of-concepts  * and in development, rather than as part of production applications.  *  *  */
end_comment

begin_class
DECL|class|StopWatch
specifier|public
class|class
name|StopWatch
block|{
comment|/**      * Identifier of this stop watch.      * Handy when we have output from multiple stop watches      * and need to distinguish between them in log or console output.      */
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|keepTaskList
specifier|private
name|boolean
name|keepTaskList
init|=
literal|true
decl_stmt|;
DECL|field|taskList
specifier|private
specifier|final
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|taskList
init|=
operator|new
name|LinkedList
argument_list|<
name|TaskInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Start time of the current task      */
DECL|field|startTimeMillis
specifier|private
name|long
name|startTimeMillis
decl_stmt|;
comment|/**      * Is the stop watch currently running?      */
DECL|field|running
specifier|private
name|boolean
name|running
decl_stmt|;
comment|/**      * Name of the current task      */
DECL|field|currentTaskName
specifier|private
name|String
name|currentTaskName
decl_stmt|;
DECL|field|lastTaskInfo
specifier|private
name|TaskInfo
name|lastTaskInfo
decl_stmt|;
DECL|field|taskCount
specifier|private
name|int
name|taskCount
decl_stmt|;
comment|/**      * Total running time      */
DECL|field|totalTimeMillis
specifier|private
name|long
name|totalTimeMillis
decl_stmt|;
comment|/**      * Construct a new stop watch. Does not start any task.      */
DECL|method|StopWatch
specifier|public
name|StopWatch
parameter_list|()
block|{
name|this
operator|.
name|id
operator|=
literal|""
expr_stmt|;
block|}
comment|/**      * Construct a new stop watch with the given id.      * Does not start any task.      *      * @param id identifier for this stop watch.      *           Handy when we have output from multiple stop watches      *           and need to distinguish between them.      */
DECL|method|StopWatch
specifier|public
name|StopWatch
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * Determine whether the TaskInfo array is built over time. Set this to      * "false" when using a StopWatch for millions of intervals, or the task      * info structure will consume excessive memory. Default is "true".      */
DECL|method|keepTaskList
specifier|public
name|StopWatch
name|keepTaskList
parameter_list|(
name|boolean
name|keepTaskList
parameter_list|)
block|{
name|this
operator|.
name|keepTaskList
operator|=
name|keepTaskList
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Start an unnamed task. The results are undefined if {@link #stop()}      * or timing methods are called without invoking this method.      *      * @see #stop()      */
DECL|method|start
specifier|public
name|StopWatch
name|start
parameter_list|()
throws|throws
name|IllegalStateException
block|{
return|return
name|start
argument_list|(
literal|""
argument_list|)
return|;
block|}
comment|/**      * Start a named task. The results are undefined if {@link #stop()}      * or timing methods are called without invoking this method.      *      * @param taskName the name of the task to start      * @see #stop()      */
DECL|method|start
specifier|public
name|StopWatch
name|start
parameter_list|(
name|String
name|taskName
parameter_list|)
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|this
operator|.
name|running
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't start StopWatch: it's already running"
argument_list|)
throw|;
block|}
name|this
operator|.
name|startTimeMillis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|running
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|currentTaskName
operator|=
name|taskName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Stop the current task. The results are undefined if timing      * methods are called without invoking at least one pair      * {@link #start()} / {@link #stop()} methods.      *      * @see #start()      */
DECL|method|stop
specifier|public
name|StopWatch
name|stop
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|running
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't stop StopWatch: it's not running"
argument_list|)
throw|;
block|}
name|long
name|lastTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|this
operator|.
name|startTimeMillis
decl_stmt|;
name|this
operator|.
name|totalTimeMillis
operator|+=
name|lastTime
expr_stmt|;
name|this
operator|.
name|lastTaskInfo
operator|=
operator|new
name|TaskInfo
argument_list|(
name|this
operator|.
name|currentTaskName
argument_list|,
name|lastTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|keepTaskList
condition|)
block|{
name|this
operator|.
name|taskList
operator|.
name|add
argument_list|(
name|lastTaskInfo
argument_list|)
expr_stmt|;
block|}
operator|++
name|this
operator|.
name|taskCount
expr_stmt|;
name|this
operator|.
name|running
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|currentTaskName
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Return whether the stop watch is currently running.      */
DECL|method|isRunning
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|this
operator|.
name|running
return|;
block|}
comment|/**      * Return the time taken by the last task.      */
DECL|method|lastTaskTime
specifier|public
name|TimeValue
name|lastTaskTime
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|this
operator|.
name|lastTaskInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No tests run: can't get last interval"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|lastTaskInfo
operator|.
name|getTime
argument_list|()
return|;
block|}
comment|/**      * Return the name of the last task.      */
DECL|method|lastTaskName
specifier|public
name|String
name|lastTaskName
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|this
operator|.
name|lastTaskInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No tests run: can't get last interval"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|lastTaskInfo
operator|.
name|getTaskName
argument_list|()
return|;
block|}
comment|/**      * Return the total time for all tasks.      */
DECL|method|totalTime
specifier|public
name|TimeValue
name|totalTime
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|totalTimeMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**      * Return the number of tasks timed.      */
DECL|method|taskCount
specifier|public
name|int
name|taskCount
parameter_list|()
block|{
return|return
name|taskCount
return|;
block|}
comment|/**      * Return an array of the data for tasks performed.      */
DECL|method|taskInfo
specifier|public
name|TaskInfo
index|[]
name|taskInfo
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|keepTaskList
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Task info is not being kept!"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|taskList
operator|.
name|toArray
argument_list|(
operator|new
name|TaskInfo
index|[
name|this
operator|.
name|taskList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Return a short description of the total running time.      */
DECL|method|shortSummary
specifier|public
name|String
name|shortSummary
parameter_list|()
block|{
return|return
literal|"StopWatch '"
operator|+
name|this
operator|.
name|id
operator|+
literal|"': running time  = "
operator|+
name|totalTime
argument_list|()
return|;
block|}
comment|/**      * Return a string with a table describing all tasks performed.      * For custom reporting, call getTaskInfo() and use the task info directly.      */
DECL|method|prettyPrint
specifier|public
name|String
name|prettyPrint
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|shortSummary
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|keepTaskList
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"No task info kept"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"-----------------------------------------\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ms     %     Task name\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-----------------------------------------\n"
argument_list|)
expr_stmt|;
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|()
decl_stmt|;
name|nf
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|nf
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NumberFormat
name|pf
init|=
name|NumberFormat
operator|.
name|getPercentInstance
argument_list|()
decl_stmt|;
name|pf
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|pf
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskInfo
name|task
range|:
name|taskInfo
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|nf
operator|.
name|format
argument_list|(
name|task
operator|.
name|getTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|pf
operator|.
name|format
argument_list|(
name|task
operator|.
name|getTime
argument_list|()
operator|.
name|secondsFrac
argument_list|()
operator|/
name|totalTime
argument_list|()
operator|.
name|secondsFrac
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|task
operator|.
name|getTaskName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Return an informative string describing all tasks performed      * For custom reporting, call<code>getTaskInfo()</code> and use the task info directly.      */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|shortSummary
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|keepTaskList
condition|)
block|{
for|for
control|(
name|TaskInfo
name|task
range|:
name|taskInfo
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; ["
argument_list|)
operator|.
name|append
argument_list|(
name|task
operator|.
name|getTaskName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] took "
argument_list|)
operator|.
name|append
argument_list|(
name|task
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|percent
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|100.0f
operator|*
name|task
operator|.
name|getTime
argument_list|()
operator|.
name|millis
argument_list|()
operator|)
operator|/
name|totalTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|percent
argument_list|)
operator|.
name|append
argument_list|(
literal|"%"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; no task info kept"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Inner class to hold data about one task executed within the stop watch.      */
DECL|class|TaskInfo
specifier|public
specifier|static
class|class
name|TaskInfo
block|{
DECL|field|taskName
specifier|private
specifier|final
name|String
name|taskName
decl_stmt|;
DECL|field|timeValue
specifier|private
specifier|final
name|TimeValue
name|timeValue
decl_stmt|;
DECL|method|TaskInfo
specifier|private
name|TaskInfo
parameter_list|(
name|String
name|taskName
parameter_list|,
name|long
name|timeMillis
parameter_list|)
block|{
name|this
operator|.
name|taskName
operator|=
name|taskName
expr_stmt|;
name|this
operator|.
name|timeValue
operator|=
operator|new
name|TimeValue
argument_list|(
name|timeMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**          * Return the name of this task.          */
DECL|method|getTaskName
specifier|public
name|String
name|getTaskName
parameter_list|()
block|{
return|return
name|taskName
return|;
block|}
comment|/**          * Return the time this task took.          */
DECL|method|getTime
specifier|public
name|TimeValue
name|getTime
parameter_list|()
block|{
return|return
name|timeValue
return|;
block|}
block|}
block|}
end_class

end_unit

