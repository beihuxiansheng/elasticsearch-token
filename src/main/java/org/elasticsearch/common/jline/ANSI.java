begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.jline
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|jline
package|;
end_package

begin_import
import|import
name|jline
operator|.
name|ANSIBuffer
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ANSI
specifier|public
class|class
name|ANSI
block|{
comment|//
comment|// Detection/Enabled Muck
comment|//
comment|/**      * Tries to detect if the current system supports ANSI.      */
DECL|method|detect
specifier|private
specifier|static
name|boolean
name|detect
parameter_list|()
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"jline.enabled"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|enabled
init|=
name|Terminal
operator|.
name|getTerminal
argument_list|()
operator|.
name|isANSISupported
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|String
name|force
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ANSI
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".force"
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
name|enabled
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|force
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
return|return
name|enabled
return|;
block|}
DECL|method|isDetected
specifier|public
specifier|static
name|boolean
name|isDetected
parameter_list|()
block|{
return|return
name|detect
argument_list|()
return|;
block|}
DECL|field|enabled
specifier|private
specifier|static
name|Boolean
name|enabled
decl_stmt|;
DECL|method|setEnabled
specifier|public
specifier|static
name|void
name|setEnabled
parameter_list|(
specifier|final
name|boolean
name|flag
parameter_list|)
block|{
name|enabled
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
DECL|method|isEnabled
specifier|public
specifier|static
name|boolean
name|isEnabled
parameter_list|()
block|{
if|if
condition|(
name|enabled
operator|==
literal|null
condition|)
block|{
name|enabled
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isDetected
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|enabled
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|//
comment|// Code
comment|//
DECL|class|Code
specifier|public
specifier|static
class|class
name|Code
block|{
comment|//
comment|// NOTE: Some fields duplicated from jline.ANSIBuffer.ANSICodes to change access modifiers
comment|//
DECL|field|OFF
specifier|public
specifier|static
specifier|final
name|int
name|OFF
init|=
literal|0
decl_stmt|;
DECL|field|BOLD
specifier|public
specifier|static
specifier|final
name|int
name|BOLD
init|=
literal|1
decl_stmt|;
DECL|field|UNDERSCORE
specifier|public
specifier|static
specifier|final
name|int
name|UNDERSCORE
init|=
literal|4
decl_stmt|;
DECL|field|BLINK
specifier|public
specifier|static
specifier|final
name|int
name|BLINK
init|=
literal|5
decl_stmt|;
DECL|field|REVERSE
specifier|public
specifier|static
specifier|final
name|int
name|REVERSE
init|=
literal|7
decl_stmt|;
DECL|field|CONCEALED
specifier|public
specifier|static
specifier|final
name|int
name|CONCEALED
init|=
literal|8
decl_stmt|;
DECL|field|FG_BLACK
specifier|public
specifier|static
specifier|final
name|int
name|FG_BLACK
init|=
literal|30
decl_stmt|;
DECL|field|FG_RED
specifier|public
specifier|static
specifier|final
name|int
name|FG_RED
init|=
literal|31
decl_stmt|;
DECL|field|FG_GREEN
specifier|public
specifier|static
specifier|final
name|int
name|FG_GREEN
init|=
literal|32
decl_stmt|;
DECL|field|FG_YELLOW
specifier|public
specifier|static
specifier|final
name|int
name|FG_YELLOW
init|=
literal|33
decl_stmt|;
DECL|field|FG_BLUE
specifier|public
specifier|static
specifier|final
name|int
name|FG_BLUE
init|=
literal|34
decl_stmt|;
DECL|field|FG_MAGENTA
specifier|public
specifier|static
specifier|final
name|int
name|FG_MAGENTA
init|=
literal|35
decl_stmt|;
DECL|field|FG_CYAN
specifier|public
specifier|static
specifier|final
name|int
name|FG_CYAN
init|=
literal|36
decl_stmt|;
DECL|field|FG_WHITE
specifier|public
specifier|static
specifier|final
name|int
name|FG_WHITE
init|=
literal|37
decl_stmt|;
DECL|field|BLACK
specifier|public
specifier|static
specifier|final
name|int
name|BLACK
init|=
name|FG_BLACK
decl_stmt|;
DECL|field|RED
specifier|public
specifier|static
specifier|final
name|int
name|RED
init|=
name|FG_RED
decl_stmt|;
DECL|field|GREEN
specifier|public
specifier|static
specifier|final
name|int
name|GREEN
init|=
name|FG_GREEN
decl_stmt|;
DECL|field|YELLOW
specifier|public
specifier|static
specifier|final
name|int
name|YELLOW
init|=
name|FG_YELLOW
decl_stmt|;
DECL|field|BLUE
specifier|public
specifier|static
specifier|final
name|int
name|BLUE
init|=
name|FG_BLUE
decl_stmt|;
DECL|field|MAGENTA
specifier|public
specifier|static
specifier|final
name|int
name|MAGENTA
init|=
name|FG_MAGENTA
decl_stmt|;
DECL|field|CYAN
specifier|public
specifier|static
specifier|final
name|int
name|CYAN
init|=
name|FG_CYAN
decl_stmt|;
DECL|field|WHITE
specifier|public
specifier|static
specifier|final
name|int
name|WHITE
init|=
name|FG_WHITE
decl_stmt|;
DECL|field|BG_BLACK
specifier|public
specifier|static
specifier|final
name|int
name|BG_BLACK
init|=
literal|40
decl_stmt|;
DECL|field|BG_RED
specifier|public
specifier|static
specifier|final
name|int
name|BG_RED
init|=
literal|41
decl_stmt|;
DECL|field|BG_GREEN
specifier|public
specifier|static
specifier|final
name|int
name|BG_GREEN
init|=
literal|42
decl_stmt|;
DECL|field|BG_YELLOW
specifier|public
specifier|static
specifier|final
name|int
name|BG_YELLOW
init|=
literal|43
decl_stmt|;
DECL|field|BG_BLUE
specifier|public
specifier|static
specifier|final
name|int
name|BG_BLUE
init|=
literal|44
decl_stmt|;
DECL|field|BG_MAGENTA
specifier|public
specifier|static
specifier|final
name|int
name|BG_MAGENTA
init|=
literal|45
decl_stmt|;
DECL|field|BG_CYAN
specifier|public
specifier|static
specifier|final
name|int
name|BG_CYAN
init|=
literal|46
decl_stmt|;
DECL|field|BG_WHITE
specifier|public
specifier|static
specifier|final
name|int
name|BG_WHITE
init|=
literal|47
decl_stmt|;
comment|/**          * A map of code names to values.          */
DECL|field|NAMES_TO_CODES
specifier|private
specifier|static
specifier|final
name|Map
name|NAMES_TO_CODES
decl_stmt|;
comment|/**          * A map of codes to name.          */
DECL|field|CODES_TO_NAMES
specifier|private
specifier|static
specifier|final
name|Map
name|CODES_TO_NAMES
decl_stmt|;
static|static
block|{
name|Field
index|[]
name|fields
init|=
name|Code
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
name|Map
name|names
init|=
operator|new
name|HashMap
argument_list|(
name|fields
operator|.
name|length
argument_list|)
decl_stmt|;
name|Map
name|codes
init|=
operator|new
name|HashMap
argument_list|(
name|fields
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Skip anything non-public, all public fields are codes
name|int
name|mods
init|=
name|fields
index|[
name|i
index|]
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|mods
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Number
name|code
init|=
operator|(
name|Number
operator|)
name|fields
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|Code
operator|.
name|class
argument_list|)
decl_stmt|;
name|names
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|codes
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// This should never happen
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|NAMES_TO_CODES
operator|=
name|names
expr_stmt|;
name|CODES_TO_NAMES
operator|=
name|codes
expr_stmt|;
block|}
comment|/**          * Returns the ANSI code for the given symbolic name.  Supported symbolic names are all defined as          * fields in {@link ANSI.Code} where the case is not significant.          */
DECL|method|forName
specifier|public
specifier|static
name|int
name|forName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
comment|// All names in the map are upper-case
name|String
name|tmp
init|=
name|name
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|Number
name|code
init|=
operator|(
name|Number
operator|)
name|NAMES_TO_CODES
operator|.
name|get
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid ANSI code name: "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|code
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**          * Returns the symbolic name for the given ANSI code.          */
DECL|method|name
specifier|public
specifier|static
name|String
name|name
parameter_list|(
specifier|final
name|int
name|code
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|CODES_TO_NAMES
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|code
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid ANSI code: "
operator|+
name|code
argument_list|)
throw|;
block|}
return|return
name|name
return|;
block|}
block|}
comment|//
comment|// Buffer
comment|//
DECL|class|Buffer
specifier|public
specifier|static
class|class
name|Buffer
block|{
DECL|field|buff
specifier|private
specifier|final
name|StringBuffer
name|buff
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
DECL|field|autoClear
specifier|public
specifier|final
name|boolean
name|autoClear
init|=
literal|true
decl_stmt|;
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|autoClear
condition|)
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|buff
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|buff
operator|.
name|length
argument_list|()
return|;
block|}
DECL|method|append
specifier|public
name|Buffer
name|append
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|append
specifier|public
name|Buffer
name|append
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|obj
argument_list|)
argument_list|)
return|;
block|}
DECL|method|attrib
specifier|public
name|Buffer
name|attrib
parameter_list|(
specifier|final
name|int
name|code
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|ANSIBuffer
operator|.
name|ANSICodes
operator|.
name|attrib
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|attrib
specifier|public
name|Buffer
name|attrib
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|int
name|code
parameter_list|)
block|{
assert|assert
name|text
operator|!=
literal|null
assert|;
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|ANSIBuffer
operator|.
name|ANSICodes
operator|.
name|attrib
argument_list|(
name|code
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|text
argument_list|)
operator|.
name|append
argument_list|(
name|ANSIBuffer
operator|.
name|ANSICodes
operator|.
name|attrib
argument_list|(
name|Code
operator|.
name|OFF
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|attrib
specifier|public
name|Buffer
name|attrib
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|codeName
parameter_list|)
block|{
return|return
name|attrib
argument_list|(
name|text
argument_list|,
name|Code
operator|.
name|forName
argument_list|(
name|codeName
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|//
comment|// Renderer
comment|//
DECL|class|Renderer
specifier|public
specifier|static
class|class
name|Renderer
block|{
DECL|field|BEGIN_TOKEN
specifier|public
specifier|static
specifier|final
name|String
name|BEGIN_TOKEN
init|=
literal|"@|"
decl_stmt|;
DECL|field|BEGIN_TOKEN_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BEGIN_TOKEN_SIZE
init|=
name|BEGIN_TOKEN
operator|.
name|length
argument_list|()
decl_stmt|;
DECL|field|END_TOKEN
specifier|public
specifier|static
specifier|final
name|String
name|END_TOKEN
init|=
literal|"|"
decl_stmt|;
DECL|field|END_TOKEN_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|END_TOKEN_SIZE
init|=
name|END_TOKEN
operator|.
name|length
argument_list|()
decl_stmt|;
DECL|field|CODE_TEXT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|CODE_TEXT_SEPARATOR
init|=
literal|" "
decl_stmt|;
DECL|field|CODE_LIST_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|CODE_LIST_SEPARATOR
init|=
literal|","
decl_stmt|;
DECL|field|buff
specifier|private
specifier|final
name|Buffer
name|buff
init|=
operator|new
name|Buffer
argument_list|()
decl_stmt|;
DECL|method|render
specifier|public
name|String
name|render
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
throws|throws
name|RenderException
block|{
assert|assert
name|input
operator|!=
literal|null
assert|;
comment|// current, prefix and suffix positions
name|int
name|c
init|=
literal|0
decl_stmt|,
name|p
decl_stmt|,
name|s
decl_stmt|;
while|while
condition|(
name|c
operator|<
name|input
operator|.
name|length
argument_list|()
condition|)
block|{
name|p
operator|=
name|input
operator|.
name|indexOf
argument_list|(
name|BEGIN_TOKEN
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|s
operator|=
name|input
operator|.
name|indexOf
argument_list|(
name|END_TOKEN
argument_list|,
name|p
operator|+
name|BEGIN_TOKEN_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RenderException
argument_list|(
literal|"Missing '"
operator|+
name|END_TOKEN
operator|+
literal|"': "
operator|+
name|input
argument_list|)
throw|;
block|}
name|String
name|expr
init|=
name|input
operator|.
name|substring
argument_list|(
name|p
operator|+
name|BEGIN_TOKEN_SIZE
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|input
operator|.
name|substring
argument_list|(
name|c
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|evaluate
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|c
operator|=
name|s
operator|+
name|END_TOKEN_SIZE
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|input
operator|.
name|substring
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|evaluate
specifier|private
name|void
name|evaluate
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
throws|throws
name|RenderException
block|{
assert|assert
name|input
operator|!=
literal|null
assert|;
name|int
name|i
init|=
name|input
operator|.
name|indexOf
argument_list|(
name|CODE_TEXT_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RenderException
argument_list|(
literal|"Missing ANSI code/text separator '"
operator|+
name|CODE_TEXT_SEPARATOR
operator|+
literal|"': "
operator|+
name|input
argument_list|)
throw|;
block|}
name|String
name|tmp
init|=
name|input
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|codes
init|=
name|tmp
operator|.
name|split
argument_list|(
name|CODE_LIST_SEPARATOR
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|input
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|codes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|code
init|=
name|Code
operator|.
name|forName
argument_list|(
name|codes
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|buff
operator|.
name|attrib
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|buff
operator|.
name|attrib
argument_list|(
name|Code
operator|.
name|OFF
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// RenderException
comment|//
DECL|class|RenderException
specifier|public
specifier|static
class|class
name|RenderException
extends|extends
name|RuntimeException
block|{
DECL|method|RenderException
specifier|public
name|RenderException
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Helpers
comment|//
DECL|method|test
specifier|public
specifier|static
name|boolean
name|test
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
return|return
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|indexOf
argument_list|(
name|BEGIN_TOKEN
argument_list|)
operator|>=
literal|0
return|;
block|}
DECL|method|encode
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|int
name|code
parameter_list|)
block|{
return|return
operator|new
name|StringBuffer
argument_list|(
name|BEGIN_TOKEN
argument_list|)
operator|.
name|append
argument_list|(
name|Code
operator|.
name|name
argument_list|(
name|code
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|CODE_TEXT_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|text
argument_list|)
operator|.
name|append
argument_list|(
name|END_TOKEN
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|//
comment|// RenderWriter
comment|//
DECL|class|RenderWriter
specifier|public
specifier|static
class|class
name|RenderWriter
extends|extends
name|PrintWriter
block|{
DECL|field|renderer
specifier|private
specifier|final
name|Renderer
name|renderer
init|=
operator|new
name|Renderer
argument_list|()
decl_stmt|;
DECL|method|RenderWriter
specifier|public
name|RenderWriter
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|RenderWriter
specifier|public
name|RenderWriter
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|,
specifier|final
name|boolean
name|autoFlush
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|,
name|autoFlush
argument_list|)
expr_stmt|;
block|}
DECL|method|RenderWriter
specifier|public
name|RenderWriter
parameter_list|(
specifier|final
name|Writer
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|RenderWriter
specifier|public
name|RenderWriter
parameter_list|(
specifier|final
name|Writer
name|out
parameter_list|,
specifier|final
name|boolean
name|autoFlush
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|,
name|autoFlush
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|Renderer
operator|.
name|test
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|renderer
operator|.
name|render
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

