begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|BytesHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
operator|.
name|LZFCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|CompressorFactory
specifier|public
class|class
name|CompressorFactory
block|{
DECL|field|LZF
specifier|private
specifier|static
specifier|final
name|LZFCompressor
name|LZF
init|=
operator|new
name|LZFCompressor
argument_list|()
decl_stmt|;
DECL|field|compressors
specifier|private
specifier|static
specifier|final
name|Compressor
index|[]
name|compressors
decl_stmt|;
DECL|field|compressorsByType
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Compressor
argument_list|>
name|compressorsByType
decl_stmt|;
static|static
block|{
name|compressors
operator|=
operator|new
name|Compressor
index|[
literal|1
index|]
expr_stmt|;
name|compressors
index|[
literal|0
index|]
operator|=
name|LZF
expr_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|Compressor
argument_list|>
name|compressorsByTypeX
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Compressor
name|compressor
range|:
name|compressors
control|)
block|{
name|compressorsByTypeX
operator|.
name|put
argument_list|(
name|compressor
operator|.
name|type
argument_list|()
argument_list|,
name|compressor
argument_list|)
expr_stmt|;
block|}
name|compressorsByType
operator|=
name|compressorsByTypeX
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
DECL|method|defaultCompressor
specifier|public
specifier|static
name|Compressor
name|defaultCompressor
parameter_list|()
block|{
return|return
name|LZF
return|;
block|}
DECL|method|isCompressed
specifier|public
specifier|static
name|boolean
name|isCompressed
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|compressor
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|isCompressed
specifier|public
specifier|static
name|boolean
name|isCompressed
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|compressor
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Nullable
DECL|method|compressor
specifier|public
specifier|static
name|Compressor
name|compressor
parameter_list|(
name|BytesHolder
name|bytes
parameter_list|)
block|{
return|return
name|compressor
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|()
argument_list|,
name|bytes
operator|.
name|offset
argument_list|()
argument_list|,
name|bytes
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|compressor
specifier|public
specifier|static
name|Compressor
name|compressor
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|compressor
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|compressor
specifier|public
specifier|static
name|Compressor
name|compressor
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|Compressor
name|compressor
range|:
name|compressors
control|)
block|{
if|if
condition|(
name|compressor
operator|.
name|isCompressed
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
condition|)
block|{
return|return
name|compressor
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
DECL|method|compressor
specifier|public
specifier|static
name|Compressor
name|compressor
parameter_list|(
name|ChannelBuffer
name|buffer
parameter_list|)
block|{
for|for
control|(
name|Compressor
name|compressor
range|:
name|compressors
control|)
block|{
if|if
condition|(
name|compressor
operator|.
name|isCompressed
argument_list|(
name|buffer
argument_list|)
condition|)
block|{
return|return
name|compressor
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|compressor
specifier|public
specifier|static
name|Compressor
name|compressor
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|compressorsByType
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Uncompress the provided data, data can be detected as compressed using {@link #isCompressed(byte[], int, int)}.      */
DECL|method|uncompressIfNeeded
specifier|public
specifier|static
name|BytesHolder
name|uncompressIfNeeded
parameter_list|(
name|BytesHolder
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|Compressor
name|compressor
init|=
name|compressor
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|BytesHolder
argument_list|(
name|compressor
operator|.
name|uncompress
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|()
argument_list|,
name|bytes
operator|.
name|offset
argument_list|()
argument_list|,
name|bytes
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|bytes
return|;
block|}
block|}
end_class

end_unit

