begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|CompressedStreamInput
specifier|public
specifier|abstract
class|class
name|CompressedStreamInput
parameter_list|<
name|T
extends|extends
name|CompressorContext
parameter_list|>
extends|extends
name|StreamInput
block|{
DECL|field|in
specifier|private
specifier|final
name|StreamInput
name|in
decl_stmt|;
DECL|field|context
specifier|protected
specifier|final
name|CompressorContext
name|context
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|uncompressed
specifier|protected
name|byte
index|[]
name|uncompressed
decl_stmt|;
DECL|field|position
specifier|private
name|int
name|position
init|=
literal|0
decl_stmt|;
DECL|field|valid
specifier|private
name|int
name|valid
init|=
literal|0
decl_stmt|;
DECL|method|CompressedStreamInput
specifier|public
name|CompressedStreamInput
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|T
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|readHeader
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**      * Expert!, resets to buffer start, without the need to decompress it again.      */
DECL|method|resetToBufferStart
specifier|public
name|void
name|resetToBufferStart
parameter_list|()
block|{
name|this
operator|.
name|position
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Method is overridden to report number of bytes that can now be read      * from decoded data buffer, without reading bytes from the underlying      * stream.      * Never throws an exception; returns number of bytes available without      * further reads from underlying source; -1 if stream has been closed, or      * 0 if an actual read (and possible blocking) is needed to find out.      */
annotation|@
name|Override
DECL|method|available
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
comment|// if closed, return -1;
if|if
condition|(
name|closed
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|left
init|=
operator|(
name|valid
operator|-
name|position
operator|)
decl_stmt|;
return|return
operator|(
name|left
operator|<=
literal|0
operator|)
condition|?
literal|0
else|:
name|left
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|readyBuffer
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|uncompressed
index|[
name|position
operator|++
index|]
operator|&
literal|255
return|;
block|}
annotation|@
name|Override
DECL|method|readByte
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|readyBuffer
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
name|uncompressed
index|[
name|position
operator|++
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|fullRead
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|<
literal|1
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|readyBuffer
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// First let's read however much data we happen to have...
name|int
name|chunkLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|valid
operator|-
name|position
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|uncompressed
argument_list|,
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|chunkLength
argument_list|)
expr_stmt|;
name|position
operator|+=
name|chunkLength
expr_stmt|;
if|if
condition|(
name|chunkLength
operator|==
name|length
operator|||
operator|!
name|fullRead
condition|)
block|{
return|return
name|chunkLength
return|;
block|}
comment|// Need more data, then
name|int
name|totalRead
init|=
name|chunkLength
decl_stmt|;
do|do
block|{
name|offset
operator|+=
name|chunkLength
expr_stmt|;
if|if
condition|(
operator|!
name|readyBuffer
argument_list|()
condition|)
block|{
break|break;
block|}
name|chunkLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|valid
operator|-
name|position
argument_list|,
operator|(
name|length
operator|-
name|totalRead
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|uncompressed
argument_list|,
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|chunkLength
argument_list|)
expr_stmt|;
name|position
operator|+=
name|chunkLength
expr_stmt|;
name|totalRead
operator|+=
name|chunkLength
expr_stmt|;
block|}
do|while
condition|(
name|totalRead
operator|<
name|length
condition|)
do|;
return|return
name|totalRead
return|;
block|}
annotation|@
name|Override
DECL|method|readBytes
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|read
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
literal|true
comment|/* we want to have full reads, thats the contract... */
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
name|len
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|position
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|valid
operator|=
literal|0
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|position
operator|=
name|valid
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|doClose
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doClose
specifier|protected
specifier|abstract
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Fill the uncompressed bytes buffer by reading the underlying inputStream.      */
DECL|method|readyBuffer
specifier|protected
name|boolean
name|readyBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|<
name|valid
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|valid
operator|=
name|uncompress
argument_list|(
name|in
argument_list|,
name|uncompressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|position
operator|=
literal|0
expr_stmt|;
return|return
operator|(
name|position
operator|<
name|valid
operator|)
return|;
block|}
DECL|method|readHeader
specifier|protected
specifier|abstract
name|void
name|readHeader
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Uncompress the data into the out array, returning the size uncompressed      */
DECL|method|uncompress
specifier|protected
specifier|abstract
name|int
name|uncompress
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|byte
index|[]
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

