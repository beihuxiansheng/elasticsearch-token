begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress.snappy
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|snappy
package|;
end_package

begin_import
import|import
name|com
operator|.
name|ning
operator|.
name|compress
operator|.
name|BufferRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SnappyCompressedStreamOutput
specifier|public
specifier|abstract
class|class
name|SnappyCompressedStreamOutput
extends|extends
name|CompressedStreamOutput
argument_list|<
name|SnappyCompressorContext
argument_list|>
block|{
DECL|field|recycler
specifier|protected
specifier|final
name|BufferRecycler
name|recycler
decl_stmt|;
DECL|field|compressedBuffer
specifier|protected
name|byte
index|[]
name|compressedBuffer
decl_stmt|;
DECL|method|SnappyCompressedStreamOutput
specifier|public
name|SnappyCompressedStreamOutput
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|SnappyCompressorContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|recycler
operator|=
name|BufferRecycler
operator|.
name|instance
argument_list|()
expr_stmt|;
name|this
operator|.
name|uncompressed
operator|=
name|this
operator|.
name|recycler
operator|.
name|allocOutputBuffer
argument_list|(
name|context
operator|.
name|compressChunkLength
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|uncompressedLength
operator|=
name|context
operator|.
name|compressChunkLength
argument_list|()
expr_stmt|;
name|this
operator|.
name|compressedBuffer
operator|=
name|recycler
operator|.
name|allocEncodingBuffer
argument_list|(
name|context
operator|.
name|compressMaxCompressedChunkLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeHeader
specifier|public
name|void
name|writeHeader
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|SnappyCompressor
operator|.
name|HEADER
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|context
operator|.
name|compressChunkLength
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|context
operator|.
name|compressMaxCompressedChunkLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
name|uncompressed
decl_stmt|;
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
name|uncompressed
operator|=
literal|null
expr_stmt|;
name|recycler
operator|.
name|releaseOutputBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|buf
operator|=
name|compressedBuffer
expr_stmt|;
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
name|compressedBuffer
operator|=
literal|null
expr_stmt|;
name|recycler
operator|.
name|releaseEncodeBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

