begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress.snappy
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|snappy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedIndexInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SnappyCompressedIndexInput
specifier|public
specifier|abstract
class|class
name|SnappyCompressedIndexInput
extends|extends
name|CompressedIndexInput
argument_list|<
name|SnappyCompressorContext
argument_list|>
block|{
DECL|field|chunkSize
specifier|protected
name|int
name|chunkSize
decl_stmt|;
DECL|field|maxCompressedChunkLength
specifier|protected
name|int
name|maxCompressedChunkLength
decl_stmt|;
DECL|field|inputBuffer
specifier|protected
name|byte
index|[]
name|inputBuffer
decl_stmt|;
DECL|method|SnappyCompressedIndexInput
specifier|public
name|SnappyCompressedIndexInput
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|SnappyCompressorContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|uncompressed
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
name|this
operator|.
name|uncompressedLength
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|inputBuffer
operator|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
name|chunkSize
argument_list|,
name|maxCompressedChunkLength
argument_list|)
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readHeader
specifier|protected
name|void
name|readHeader
parameter_list|(
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
name|SnappyCompressor
operator|.
name|HEADER
operator|.
name|length
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|header
argument_list|,
literal|0
argument_list|,
name|header
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|header
argument_list|,
name|SnappyCompressor
operator|.
name|HEADER
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"wrong snappy compressed header ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|header
argument_list|)
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|chunkSize
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxCompressedChunkLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
comment|// nothing to do here
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|IndexInput
name|clone
parameter_list|()
block|{
name|SnappyCompressedIndexInput
name|cloned
init|=
operator|(
name|SnappyCompressedIndexInput
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|cloned
operator|.
name|inputBuffer
operator|=
operator|new
name|byte
index|[
name|inputBuffer
operator|.
name|length
index|]
expr_stmt|;
return|return
name|cloned
return|;
block|}
block|}
end_class

end_unit

