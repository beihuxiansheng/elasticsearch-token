begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress.snappy.xerial
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|snappy
operator|.
name|xerial
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|snappy
operator|.
name|SnappyCompressedStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|snappy
operator|.
name|SnappyCompressorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xerial
operator|.
name|snappy
operator|.
name|Snappy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|XerialSnappyCompressedStreamInput
specifier|public
class|class
name|XerialSnappyCompressedStreamInput
extends|extends
name|SnappyCompressedStreamInput
block|{
DECL|method|XerialSnappyCompressedStreamInput
specifier|public
name|XerialSnappyCompressedStreamInput
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|SnappyCompressorContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uncompress
specifier|protected
name|int
name|uncompress
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|byte
index|[]
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|compressedByte
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// if we are on the "tip", just return 0 uncompressed data...
if|if
condition|(
name|compressedByte
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|0
return|;
block|}
name|boolean
name|compressed
init|=
name|compressedByte
operator|==
literal|1
decl_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|compressed
condition|)
block|{
name|in
operator|.
name|readBytes
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|length
return|;
block|}
else|else
block|{
name|in
operator|.
name|readBytes
argument_list|(
name|inputBuffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|Snappy
operator|.
name|rawUncompress
argument_list|(
name|inputBuffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|,
name|out
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

