begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.compress
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|support
operator|.
name|ForceSyncDirectory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|CompressedDirectory
specifier|public
class|class
name|CompressedDirectory
extends|extends
name|Directory
implements|implements
name|ForceSyncDirectory
block|{
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|compressor
specifier|private
specifier|final
name|Compressor
name|compressor
decl_stmt|;
DECL|field|actualLength
specifier|private
specifier|final
name|boolean
name|actualLength
decl_stmt|;
DECL|field|compressExtensions
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|compressExtensions
decl_stmt|;
DECL|field|decompressExtensions
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|decompressExtensions
decl_stmt|;
DECL|field|compress
specifier|private
specifier|volatile
name|boolean
name|compress
init|=
literal|true
decl_stmt|;
DECL|method|CompressedDirectory
specifier|public
name|CompressedDirectory
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|boolean
name|actualLength
parameter_list|,
name|String
modifier|...
name|extensions
parameter_list|)
block|{
name|this
argument_list|(
name|dir
argument_list|,
name|compressor
argument_list|,
name|actualLength
argument_list|,
name|extensions
argument_list|,
name|extensions
argument_list|)
expr_stmt|;
block|}
DECL|method|CompressedDirectory
specifier|public
name|CompressedDirectory
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|boolean
name|actualLength
parameter_list|,
name|String
index|[]
name|compressExtensions
parameter_list|,
name|String
index|[]
name|decompressExtensions
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|actualLength
operator|=
name|actualLength
expr_stmt|;
name|this
operator|.
name|compressor
operator|=
name|compressor
expr_stmt|;
name|this
operator|.
name|compressExtensions
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|compressExtensions
argument_list|)
expr_stmt|;
name|this
operator|.
name|decompressExtensions
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|decompressExtensions
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockFactory
operator|=
name|dir
operator|.
name|getLockFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|listAll
specifier|public
name|String
index|[]
name|listAll
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dir
operator|.
name|listAll
argument_list|()
return|;
block|}
DECL|method|setCompress
specifier|public
name|void
name|setCompress
parameter_list|(
name|boolean
name|compress
parameter_list|)
block|{
name|this
operator|.
name|compress
operator|=
name|compress
expr_stmt|;
block|}
comment|/**      * Utility method to return a file's extension.      */
DECL|method|getExtension
specifier|public
specifier|static
name|String
name|getExtension
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|i
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fileExists
specifier|public
name|boolean
name|fileExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteFile
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the actual file size, so will work with compound file format      * when compressed. Its the only one that really uses it for offsets...      */
annotation|@
name|Override
DECL|method|fileLength
specifier|public
name|long
name|fileLength
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|actualLength
operator|&&
name|decompressExtensions
operator|.
name|contains
argument_list|(
name|getExtension
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|IndexInput
name|in
init|=
name|openInput
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|in
operator|.
name|length
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dir
operator|.
name|fileLength
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|dir
operator|.
name|sync
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forceSync
specifier|public
name|void
name|forceSync
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|instanceof
name|ForceSyncDirectory
condition|)
block|{
operator|(
operator|(
name|ForceSyncDirectory
operator|)
name|dir
operator|)
operator|.
name|forceSync
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|sync
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|decompressExtensions
operator|.
name|contains
argument_list|(
name|getExtension
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Compressor
name|compressor1
init|=
name|CompressorFactory
operator|.
name|compressor
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor1
operator|!=
literal|null
condition|)
block|{
return|return
name|compressor1
operator|.
name|indexInput
argument_list|(
name|in
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
return|;
block|}
block|}
return|return
name|dir
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createOutput
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|compress
operator|&&
name|compressExtensions
operator|.
name|contains
argument_list|(
name|getExtension
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|compressor
operator|.
name|indexOutput
argument_list|(
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
argument_list|)
return|;
block|}
return|return
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|// can't override this one, we need to open the correct compression
comment|//    @Override
comment|//    public void copy(Directory to, String src, String dest) throws IOException {
comment|//        dir.copy(to, src, dest);
comment|//    }
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setLockFactory
specifier|public
name|void
name|setLockFactory
parameter_list|(
name|LockFactory
name|lockFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|dir
operator|.
name|setLockFactory
argument_list|(
name|lockFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLockFactory
specifier|public
name|LockFactory
name|getLockFactory
parameter_list|()
block|{
return|return
name|dir
operator|.
name|getLockFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLockID
specifier|public
name|String
name|getLockID
parameter_list|()
block|{
return|return
name|dir
operator|.
name|getLockID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|makeLock
specifier|public
name|Lock
name|makeLock
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|dir
operator|.
name|makeLock
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clearLock
specifier|public
name|void
name|clearLock
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|dir
operator|.
name|clearLock
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"compressed("
operator|+
name|compressExtensions
operator|+
literal|"):"
operator|+
name|dir
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

