begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress.lzf
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|lzf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_comment
comment|/**  * Simple helper class to encapsulate details of basic buffer  * recycling scheme, which helps a lot (as per profiling) for  * smaller encoding cases.  *  * @author tatu  */
end_comment

begin_class
DECL|class|BufferRecycler
specifier|public
class|class
name|BufferRecycler
block|{
DECL|field|MIN_ENCODING_BUFFER
specifier|private
specifier|final
specifier|static
name|int
name|MIN_ENCODING_BUFFER
init|=
literal|4000
decl_stmt|;
DECL|field|MIN_OUTPUT_BUFFER
specifier|private
specifier|final
specifier|static
name|int
name|MIN_OUTPUT_BUFFER
init|=
literal|8000
decl_stmt|;
comment|/**      * This<code>ThreadLocal</code> contains a {@link java.lang.ref.SoftReference}      * to a {@link BufferRecycler} used to provide a low-cost      * buffer recycling for buffers we need for encoding, decoding.      */
DECL|field|_recyclerRef
specifier|final
specifier|protected
specifier|static
name|ThreadLocal
argument_list|<
name|SoftReference
argument_list|<
name|BufferRecycler
argument_list|>
argument_list|>
name|_recyclerRef
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SoftReference
argument_list|<
name|BufferRecycler
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|_inputBuffer
specifier|private
name|byte
index|[]
name|_inputBuffer
decl_stmt|;
DECL|field|_outputBuffer
specifier|private
name|byte
index|[]
name|_outputBuffer
decl_stmt|;
DECL|field|_decodingBuffer
specifier|private
name|byte
index|[]
name|_decodingBuffer
decl_stmt|;
DECL|field|_encodingBuffer
specifier|private
name|byte
index|[]
name|_encodingBuffer
decl_stmt|;
DECL|field|_encodingHash
specifier|private
name|int
index|[]
name|_encodingHash
decl_stmt|;
comment|/**      * Accessor to get thread-local recycler instance      */
DECL|method|instance
specifier|public
specifier|static
name|BufferRecycler
name|instance
parameter_list|()
block|{
name|SoftReference
argument_list|<
name|BufferRecycler
argument_list|>
name|ref
init|=
name|_recyclerRef
operator|.
name|get
argument_list|()
decl_stmt|;
name|BufferRecycler
name|br
init|=
operator|(
name|ref
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|br
operator|==
literal|null
condition|)
block|{
name|br
operator|=
operator|new
name|BufferRecycler
argument_list|()
expr_stmt|;
name|_recyclerRef
operator|.
name|set
argument_list|(
operator|new
name|SoftReference
argument_list|<
name|BufferRecycler
argument_list|>
argument_list|(
name|br
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|br
return|;
block|}
DECL|method|clean
specifier|public
specifier|static
name|void
name|clean
parameter_list|()
block|{
name|_recyclerRef
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/*     ///////////////////////////////////////////////////////////////////////     // Buffers for encoding (output)     ///////////////////////////////////////////////////////////////////////      */
DECL|method|allocEncodingBuffer
specifier|public
name|byte
index|[]
name|allocEncodingBuffer
parameter_list|(
name|int
name|minSize
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
name|_encodingBuffer
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
operator|||
name|buf
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
name|minSize
argument_list|,
name|MIN_ENCODING_BUFFER
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
name|_encodingBuffer
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
DECL|method|releaseEncodeBuffer
specifier|public
name|void
name|releaseEncodeBuffer
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|_encodingBuffer
operator|==
literal|null
operator|||
name|buffer
operator|.
name|length
operator|>
name|_encodingBuffer
operator|.
name|length
condition|)
block|{
name|_encodingBuffer
operator|=
name|buffer
expr_stmt|;
block|}
block|}
DECL|method|allocOutputBuffer
specifier|public
name|byte
index|[]
name|allocOutputBuffer
parameter_list|(
name|int
name|minSize
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
name|_outputBuffer
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
operator|||
name|buf
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
name|minSize
argument_list|,
name|MIN_OUTPUT_BUFFER
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
name|_outputBuffer
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
DECL|method|releaseOutputBuffer
specifier|public
name|void
name|releaseOutputBuffer
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|_outputBuffer
operator|==
literal|null
operator|||
operator|(
name|buffer
operator|!=
literal|null
operator|&&
name|buffer
operator|.
name|length
operator|>
name|_outputBuffer
operator|.
name|length
operator|)
condition|)
block|{
name|_outputBuffer
operator|=
name|buffer
expr_stmt|;
block|}
block|}
DECL|method|allocEncodingHash
specifier|public
name|int
index|[]
name|allocEncodingHash
parameter_list|(
name|int
name|suggestedSize
parameter_list|)
block|{
name|int
index|[]
name|buf
init|=
name|_encodingHash
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
operator|||
name|buf
operator|.
name|length
operator|<
name|suggestedSize
condition|)
block|{
name|buf
operator|=
operator|new
name|int
index|[
name|suggestedSize
index|]
expr_stmt|;
block|}
else|else
block|{
name|_encodingHash
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
DECL|method|releaseEncodingHash
specifier|public
name|void
name|releaseEncodingHash
parameter_list|(
name|int
index|[]
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|_encodingHash
operator|==
literal|null
operator|||
operator|(
name|buffer
operator|!=
literal|null
operator|&&
name|buffer
operator|.
name|length
operator|>
name|_encodingHash
operator|.
name|length
operator|)
condition|)
block|{
name|_encodingHash
operator|=
name|buffer
expr_stmt|;
block|}
block|}
comment|/*     ///////////////////////////////////////////////////////////////////////     // Buffers for decoding (input)     ///////////////////////////////////////////////////////////////////////      */
DECL|method|allocInputBuffer
specifier|public
name|byte
index|[]
name|allocInputBuffer
parameter_list|(
name|int
name|minSize
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
name|_inputBuffer
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
operator|||
name|buf
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
name|minSize
argument_list|,
name|MIN_OUTPUT_BUFFER
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
name|_inputBuffer
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
DECL|method|releaseInputBuffer
specifier|public
name|void
name|releaseInputBuffer
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|_inputBuffer
operator|==
literal|null
operator|||
operator|(
name|buffer
operator|!=
literal|null
operator|&&
name|buffer
operator|.
name|length
operator|>
name|_inputBuffer
operator|.
name|length
operator|)
condition|)
block|{
name|_inputBuffer
operator|=
name|buffer
expr_stmt|;
block|}
block|}
DECL|method|allocDecodeBuffer
specifier|public
name|byte
index|[]
name|allocDecodeBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
name|_decodingBuffer
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
operator|||
name|buf
operator|.
name|length
operator|<
name|size
condition|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
block|}
else|else
block|{
name|_decodingBuffer
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
DECL|method|releaseDecodeBuffer
specifier|public
name|void
name|releaseDecodeBuffer
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|_decodingBuffer
operator|==
literal|null
operator|||
operator|(
name|buffer
operator|!=
literal|null
operator|&&
name|buffer
operator|.
name|length
operator|>
name|_decodingBuffer
operator|.
name|length
operator|)
condition|)
block|{
name|_decodingBuffer
operator|=
name|buffer
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

