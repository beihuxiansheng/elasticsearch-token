begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TByteIntHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TDoubleIntHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TFloatIntHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TIntIntHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TIntObjectHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TLongIntHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TLongLongHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TObjectFloatHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TObjectIntHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|map
operator|.
name|hash
operator|.
name|TShortIntHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|set
operator|.
name|hash
operator|.
name|THashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|ExtTDoubleObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|ExtTHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|trove
operator|.
name|ExtTLongObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_class
DECL|class|DefaultCacheRecycler
specifier|public
class|class
name|DefaultCacheRecycler
implements|implements
name|Recycler
block|{
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|hashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hashSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doubleObjectHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|longObjectHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|longLongHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|intIntHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|floatIntHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doubleIntHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|shortIntHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|longIntHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|objectIntHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|intObjectHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|objectFloatHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|objectArray
operator|.
name|clear
argument_list|()
expr_stmt|;
name|intArray
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|class|SoftWrapper
specifier|static
class|class
name|SoftWrapper
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|ref
specifier|private
name|SoftReference
argument_list|<
name|T
argument_list|>
name|ref
decl_stmt|;
DECL|method|SoftWrapper
specifier|public
name|SoftWrapper
parameter_list|()
block|{         }
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|T
name|ref
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
operator|new
name|SoftReference
argument_list|<
name|T
argument_list|>
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|ref
operator|==
literal|null
condition|?
literal|null
else|:
name|ref
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|ref
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ----- ExtTHashMap -----
DECL|field|hashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|ExtTHashMap
argument_list|>
argument_list|>
name|hashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|ExtTHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popHashMap()      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|popHashMap
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ExtTHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|popHashMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|ExtTHashMap
argument_list|>
name|ref
init|=
name|hashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExtTHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
return|;
block|}
name|ExtTHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExtTHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushHashMap(org.elasticsearch.common.trove.ExtTHashMap)      */
annotation|@
name|Override
DECL|method|pushHashMap
specifier|public
name|void
name|pushHashMap
parameter_list|(
name|ExtTHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|ExtTHashMap
argument_list|>
name|ref
init|=
name|hashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|hashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- THashSet -----
DECL|field|hashSet
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|THashSet
argument_list|>
argument_list|>
name|hashSet
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|THashSet
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popHashSet()      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|popHashSet
specifier|public
parameter_list|<
name|T
parameter_list|>
name|THashSet
argument_list|<
name|T
argument_list|>
name|popHashSet
parameter_list|()
block|{
name|Queue
argument_list|<
name|THashSet
argument_list|>
name|ref
init|=
name|hashSet
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|THashSet
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
name|THashSet
name|set
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|THashSet
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
return|return
name|set
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushHashSet(gnu.trove.set.hash.THashSet)      */
annotation|@
name|Override
DECL|method|pushHashSet
specifier|public
name|void
name|pushHashSet
parameter_list|(
name|THashSet
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|THashSet
argument_list|>
name|ref
init|=
name|hashSet
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|hashSet
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ------ ExtTDoubleObjectHashMap -----
DECL|field|doubleObjectHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|ExtTDoubleObjectHashMap
argument_list|>
argument_list|>
name|doubleObjectHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|ExtTDoubleObjectHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popDoubleObjectMap()      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|popDoubleObjectMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ExtTDoubleObjectHashMap
argument_list|<
name|T
argument_list|>
name|popDoubleObjectMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|ExtTDoubleObjectHashMap
argument_list|>
name|ref
init|=
name|doubleObjectHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExtTDoubleObjectHashMap
argument_list|()
return|;
block|}
name|ExtTDoubleObjectHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExtTDoubleObjectHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushDoubleObjectMap(org.elasticsearch.common.trove.ExtTDoubleObjectHashMap)      */
annotation|@
name|Override
DECL|method|pushDoubleObjectMap
specifier|public
name|void
name|pushDoubleObjectMap
parameter_list|(
name|ExtTDoubleObjectHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|ExtTDoubleObjectHashMap
argument_list|>
name|ref
init|=
name|doubleObjectHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|doubleObjectHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- ExtTLongObjectHashMap ----
DECL|field|longObjectHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|ExtTLongObjectHashMap
argument_list|>
argument_list|>
name|longObjectHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|ExtTLongObjectHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popLongObjectMap()      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|popLongObjectMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ExtTLongObjectHashMap
argument_list|<
name|T
argument_list|>
name|popLongObjectMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|ExtTLongObjectHashMap
argument_list|>
name|ref
init|=
name|longObjectHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExtTLongObjectHashMap
argument_list|()
return|;
block|}
name|ExtTLongObjectHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExtTLongObjectHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushLongObjectMap(org.elasticsearch.common.trove.ExtTLongObjectHashMap)      */
annotation|@
name|Override
DECL|method|pushLongObjectMap
specifier|public
name|void
name|pushLongObjectMap
parameter_list|(
name|ExtTLongObjectHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|ExtTLongObjectHashMap
argument_list|>
name|ref
init|=
name|longObjectHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|longObjectHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- TLongLongHashMap ----
DECL|field|longLongHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TLongLongHashMap
argument_list|>
argument_list|>
name|longLongHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TLongLongHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popLongLongMap()      */
annotation|@
name|Override
DECL|method|popLongLongMap
specifier|public
name|TLongLongHashMap
name|popLongLongMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TLongLongHashMap
argument_list|>
name|ref
init|=
name|longLongHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TLongLongHashMap
argument_list|()
return|;
block|}
name|TLongLongHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TLongLongHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushLongLongMap(gnu.trove.map.hash.TLongLongHashMap)      */
annotation|@
name|Override
DECL|method|pushLongLongMap
specifier|public
name|void
name|pushLongLongMap
parameter_list|(
name|TLongLongHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TLongLongHashMap
argument_list|>
name|ref
init|=
name|longLongHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|longLongHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- TIntIntHashMap ----
DECL|field|intIntHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TIntIntHashMap
argument_list|>
argument_list|>
name|intIntHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TIntIntHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popIntIntMap()      */
annotation|@
name|Override
DECL|method|popIntIntMap
specifier|public
name|TIntIntHashMap
name|popIntIntMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TIntIntHashMap
argument_list|>
name|ref
init|=
name|intIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TIntIntHashMap
argument_list|()
return|;
block|}
name|TIntIntHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TIntIntHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushIntIntMap(gnu.trove.map.hash.TIntIntHashMap)      */
annotation|@
name|Override
DECL|method|pushIntIntMap
specifier|public
name|void
name|pushIntIntMap
parameter_list|(
name|TIntIntHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TIntIntHashMap
argument_list|>
name|ref
init|=
name|intIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|intIntHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- TFloatIntHashMap ---
DECL|field|floatIntHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TFloatIntHashMap
argument_list|>
argument_list|>
name|floatIntHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TFloatIntHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popFloatIntMap()      */
annotation|@
name|Override
DECL|method|popFloatIntMap
specifier|public
name|TFloatIntHashMap
name|popFloatIntMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TFloatIntHashMap
argument_list|>
name|ref
init|=
name|floatIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TFloatIntHashMap
argument_list|()
return|;
block|}
name|TFloatIntHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TFloatIntHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushFloatIntMap(gnu.trove.map.hash.TFloatIntHashMap)      */
annotation|@
name|Override
DECL|method|pushFloatIntMap
specifier|public
name|void
name|pushFloatIntMap
parameter_list|(
name|TFloatIntHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TFloatIntHashMap
argument_list|>
name|ref
init|=
name|floatIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|floatIntHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- TDoubleIntHashMap ---
DECL|field|doubleIntHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TDoubleIntHashMap
argument_list|>
argument_list|>
name|doubleIntHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TDoubleIntHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popDoubleIntMap()      */
annotation|@
name|Override
DECL|method|popDoubleIntMap
specifier|public
name|TDoubleIntHashMap
name|popDoubleIntMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TDoubleIntHashMap
argument_list|>
name|ref
init|=
name|doubleIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TDoubleIntHashMap
argument_list|()
return|;
block|}
name|TDoubleIntHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TDoubleIntHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushDoubleIntMap(gnu.trove.map.hash.TDoubleIntHashMap)      */
annotation|@
name|Override
DECL|method|pushDoubleIntMap
specifier|public
name|void
name|pushDoubleIntMap
parameter_list|(
name|TDoubleIntHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TDoubleIntHashMap
argument_list|>
name|ref
init|=
name|doubleIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|doubleIntHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- TByteIntHashMap ---
DECL|field|byteIntHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TByteIntHashMap
argument_list|>
argument_list|>
name|byteIntHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TByteIntHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popByteIntMap()      */
annotation|@
name|Override
DECL|method|popByteIntMap
specifier|public
name|TByteIntHashMap
name|popByteIntMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TByteIntHashMap
argument_list|>
name|ref
init|=
name|byteIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TByteIntHashMap
argument_list|()
return|;
block|}
name|TByteIntHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TByteIntHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushByteIntMap(gnu.trove.map.hash.TByteIntHashMap)      */
annotation|@
name|Override
DECL|method|pushByteIntMap
specifier|public
name|void
name|pushByteIntMap
parameter_list|(
name|TByteIntHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TByteIntHashMap
argument_list|>
name|ref
init|=
name|byteIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|byteIntHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- TShortIntHashMap ---
DECL|field|shortIntHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TShortIntHashMap
argument_list|>
argument_list|>
name|shortIntHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TShortIntHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popShortIntMap()      */
annotation|@
name|Override
DECL|method|popShortIntMap
specifier|public
name|TShortIntHashMap
name|popShortIntMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TShortIntHashMap
argument_list|>
name|ref
init|=
name|shortIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TShortIntHashMap
argument_list|()
return|;
block|}
name|TShortIntHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TShortIntHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushShortIntMap(gnu.trove.map.hash.TShortIntHashMap)      */
annotation|@
name|Override
DECL|method|pushShortIntMap
specifier|public
name|void
name|pushShortIntMap
parameter_list|(
name|TShortIntHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TShortIntHashMap
argument_list|>
name|ref
init|=
name|shortIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|shortIntHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- TLongIntHashMap ----
DECL|field|longIntHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TLongIntHashMap
argument_list|>
argument_list|>
name|longIntHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TLongIntHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popLongIntMap()      */
annotation|@
name|Override
DECL|method|popLongIntMap
specifier|public
name|TLongIntHashMap
name|popLongIntMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TLongIntHashMap
argument_list|>
name|ref
init|=
name|longIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TLongIntHashMap
argument_list|()
return|;
block|}
name|TLongIntHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TLongIntHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushLongIntMap(gnu.trove.map.hash.TLongIntHashMap)      */
annotation|@
name|Override
DECL|method|pushLongIntMap
specifier|public
name|void
name|pushLongIntMap
parameter_list|(
name|TLongIntHashMap
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TLongIntHashMap
argument_list|>
name|ref
init|=
name|longIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|longIntHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ------ TObjectIntHashMap -----
DECL|field|objectIntHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TObjectIntHashMap
argument_list|>
argument_list|>
name|objectIntHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TObjectIntHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popObjectIntMap()      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|popObjectIntMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|TObjectIntHashMap
argument_list|<
name|T
argument_list|>
name|popObjectIntMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TObjectIntHashMap
argument_list|>
name|ref
init|=
name|objectIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TObjectIntHashMap
argument_list|()
return|;
block|}
name|TObjectIntHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TObjectIntHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushObjectIntMap(gnu.trove.map.hash.TObjectIntHashMap)      */
annotation|@
name|Override
DECL|method|pushObjectIntMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|pushObjectIntMap
parameter_list|(
name|TObjectIntHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TObjectIntHashMap
argument_list|>
name|ref
init|=
name|objectIntHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|objectIntHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ------ TIntObjectHashMap -----
DECL|field|intObjectHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TIntObjectHashMap
argument_list|>
argument_list|>
name|intObjectHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TIntObjectHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popIntObjectMap()      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|popIntObjectMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|TIntObjectHashMap
argument_list|<
name|T
argument_list|>
name|popIntObjectMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TIntObjectHashMap
argument_list|>
name|ref
init|=
name|intObjectHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TIntObjectHashMap
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
name|TIntObjectHashMap
argument_list|<
name|T
argument_list|>
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TIntObjectHashMap
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushIntObjectMap(gnu.trove.map.hash.TIntObjectHashMap)      */
annotation|@
name|Override
DECL|method|pushIntObjectMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|pushIntObjectMap
parameter_list|(
name|TIntObjectHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TIntObjectHashMap
argument_list|>
name|ref
init|=
name|intObjectHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|intObjectHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ------ TObjectFloatHashMap -----
DECL|field|objectFloatHashMap
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TObjectFloatHashMap
argument_list|>
argument_list|>
name|objectFloatHashMap
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|TObjectFloatHashMap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popObjectFloatMap()      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|popObjectFloatMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|TObjectFloatHashMap
argument_list|<
name|T
argument_list|>
name|popObjectFloatMap
parameter_list|()
block|{
name|Queue
argument_list|<
name|TObjectFloatHashMap
argument_list|>
name|ref
init|=
name|objectFloatHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TObjectFloatHashMap
argument_list|()
return|;
block|}
name|TObjectFloatHashMap
name|map
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TObjectFloatHashMap
argument_list|()
return|;
block|}
return|return
name|map
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushObjectFloatMap(gnu.trove.map.hash.TObjectFloatHashMap)      */
annotation|@
name|Override
DECL|method|pushObjectFloatMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|pushObjectFloatMap
parameter_list|(
name|TObjectFloatHashMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
name|Queue
argument_list|<
name|TObjectFloatHashMap
argument_list|>
name|ref
init|=
name|objectFloatHashMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|objectFloatHashMap
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// ----- int[] -----
DECL|field|objectArray
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|>
name|objectArray
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popObjectArray(int)      */
annotation|@
name|Override
DECL|method|popObjectArray
specifier|public
name|Object
index|[]
name|popObjectArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|size
operator|=
name|size
operator|<
literal|100
condition|?
literal|100
else|:
name|size
expr_stmt|;
name|Queue
argument_list|<
name|Object
index|[]
argument_list|>
name|ref
init|=
name|objectArray
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Object
index|[
name|size
index|]
return|;
block|}
name|Object
index|[]
name|objects
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Object
index|[
name|size
index|]
return|;
block|}
if|if
condition|(
name|objects
operator|.
name|length
operator|<
name|size
condition|)
block|{
return|return
operator|new
name|Object
index|[
name|size
index|]
return|;
block|}
return|return
name|objects
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushObjectArray(java.lang.Object[])      */
annotation|@
name|Override
DECL|method|pushObjectArray
specifier|public
name|void
name|pushObjectArray
parameter_list|(
name|Object
index|[]
name|objects
parameter_list|)
block|{
name|Queue
argument_list|<
name|Object
index|[]
argument_list|>
name|ref
init|=
name|objectArray
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|objectArray
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|objects
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|objects
argument_list|)
expr_stmt|;
block|}
DECL|field|intArray
specifier|private
specifier|final
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|int
index|[]
argument_list|>
argument_list|>
name|intArray
init|=
operator|new
name|SoftWrapper
argument_list|<
name|Queue
argument_list|<
name|int
index|[]
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popIntArray(int)      */
annotation|@
name|Override
DECL|method|popIntArray
specifier|public
name|int
index|[]
name|popIntArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|popIntArray
argument_list|(
name|size
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#popIntArray(int, int)      */
annotation|@
name|Override
DECL|method|popIntArray
specifier|public
name|int
index|[]
name|popIntArray
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|sentinal
parameter_list|)
block|{
name|size
operator|=
name|size
operator|<
literal|100
condition|?
literal|100
else|:
name|size
expr_stmt|;
name|Queue
argument_list|<
name|int
index|[]
argument_list|>
name|ref
init|=
name|intArray
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|int
index|[]
name|ints
init|=
operator|new
name|int
index|[
name|size
index|]
decl_stmt|;
if|if
condition|(
name|sentinal
operator|!=
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|ints
argument_list|,
name|sentinal
argument_list|)
expr_stmt|;
block|}
return|return
name|ints
return|;
block|}
name|int
index|[]
name|ints
init|=
name|ref
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|ints
operator|==
literal|null
condition|)
block|{
name|ints
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
if|if
condition|(
name|sentinal
operator|!=
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|ints
argument_list|,
name|sentinal
argument_list|)
expr_stmt|;
block|}
return|return
name|ints
return|;
block|}
if|if
condition|(
name|ints
operator|.
name|length
operator|<
name|size
condition|)
block|{
name|ints
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
if|if
condition|(
name|sentinal
operator|!=
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|ints
argument_list|,
name|sentinal
argument_list|)
expr_stmt|;
block|}
return|return
name|ints
return|;
block|}
return|return
name|ints
return|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushIntArray(int[])      */
annotation|@
name|Override
DECL|method|pushIntArray
specifier|public
name|void
name|pushIntArray
parameter_list|(
name|int
index|[]
name|ints
parameter_list|)
block|{
name|pushIntArray
argument_list|(
name|ints
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.elasticsearch.common.Recycler#pushIntArray(int[], int)      */
annotation|@
name|Override
DECL|method|pushIntArray
specifier|public
name|void
name|pushIntArray
parameter_list|(
name|int
index|[]
name|ints
parameter_list|,
name|int
name|sentinal
parameter_list|)
block|{
name|Queue
argument_list|<
name|int
index|[]
argument_list|>
name|ref
init|=
name|intArray
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
expr_stmt|;
name|intArray
operator|.
name|set
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|ints
argument_list|,
name|sentinal
argument_list|)
expr_stmt|;
name|ref
operator|.
name|add
argument_list|(
name|ints
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

