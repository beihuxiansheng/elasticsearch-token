begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.hash
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|UnsafeUtils
import|;
end_import

begin_comment
comment|/**  * MurmurHash3 hashing functions.  */
end_comment

begin_enum
DECL|enum|MurmurHash3
specifier|public
enum|enum
name|MurmurHash3
block|{     ;
comment|/**      * A 128-bits hash.      */
DECL|class|Hash128
specifier|public
specifier|static
class|class
name|Hash128
block|{
DECL|field|h1
DECL|field|h2
specifier|public
name|long
name|h1
operator|,
name|h2
block|;     }
DECL|field|C1
specifier|private
specifier|static
name|long
name|C1
init|=
literal|0x87c37b91114253d5L
decl_stmt|;
DECL|field|C2
specifier|private
specifier|static
name|long
name|C2
init|=
literal|0x4cf5ad432745937fL
decl_stmt|;
DECL|method|getblock
specifier|protected
specifier|static
name|long
name|getblock
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|i_8
init|=
name|index
operator|<<
literal|3
decl_stmt|;
name|int
name|blockOffset
init|=
name|offset
operator|+
name|i_8
decl_stmt|;
return|return
name|UnsafeUtils
operator|.
name|readLongLE
argument_list|(
name|key
argument_list|,
name|blockOffset
argument_list|)
return|;
block|}
DECL|method|fmix
specifier|protected
specifier|static
name|long
name|fmix
parameter_list|(
name|long
name|k
parameter_list|)
block|{
name|k
operator|^=
name|k
operator|>>>
literal|33
expr_stmt|;
name|k
operator|*=
literal|0xff51afd7ed558ccdL
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|33
expr_stmt|;
name|k
operator|*=
literal|0xc4ceb9fe1a85ec53L
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|33
expr_stmt|;
return|return
name|k
return|;
block|}
comment|/**      * Compute the hash of the MurmurHash3_x64_128 hashing function.      *      * Note, this hashing function might be used to persist hashes, so if the way hashes are computed      * changes for some reason, it needs to be addressed (like in BloomFilter and MurmurHashField).      */
DECL|method|hash128
specifier|public
specifier|static
name|Hash128
name|hash128
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|seed
parameter_list|,
name|Hash128
name|hash
parameter_list|)
block|{
name|long
name|h1
init|=
name|seed
decl_stmt|;
name|long
name|h2
init|=
name|seed
decl_stmt|;
if|if
condition|(
name|length
operator|>=
literal|16
condition|)
block|{
specifier|final
name|int
name|len16
init|=
name|length
operator|&
literal|0xFFFFFFF0
decl_stmt|;
comment|// higher multiple of 16 that is lower than or equal to length
specifier|final
name|int
name|end
init|=
name|offset
operator|+
name|len16
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|+=
literal|16
control|)
block|{
name|long
name|k1
init|=
name|UnsafeUtils
operator|.
name|readLongLE
argument_list|(
name|key
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|long
name|k2
init|=
name|UnsafeUtils
operator|.
name|readLongLE
argument_list|(
name|key
argument_list|,
name|i
operator|+
literal|8
argument_list|)
decl_stmt|;
name|k1
operator|*=
name|C1
expr_stmt|;
name|k1
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|k1
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|C2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|h1
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0x52dce729
expr_stmt|;
name|k2
operator|*=
name|C2
expr_stmt|;
name|k2
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|k2
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|C1
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
name|h2
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|h2
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h2
operator|=
name|h2
operator|*
literal|5
operator|+
literal|0x38495ab5
expr_stmt|;
block|}
comment|// Advance offset to the unprocessed tail of the data.
name|offset
operator|=
name|end
expr_stmt|;
block|}
name|long
name|k1
init|=
literal|0
decl_stmt|;
name|long
name|k2
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|length
operator|&
literal|15
condition|)
block|{
case|case
literal|15
case|:
name|k2
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|14
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|14
case|:
name|k2
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|13
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|13
case|:
name|k2
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|12
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|12
case|:
name|k2
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|11
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|11
case|:
name|k2
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|10
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|10
case|:
name|k2
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|9
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|9
case|:
name|k2
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|8
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|0
expr_stmt|;
name|k2
operator|*=
name|C2
expr_stmt|;
name|k2
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|k2
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|C1
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
case|case
literal|8
case|:
name|k1
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|7
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|56
expr_stmt|;
case|case
literal|7
case|:
name|k1
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|6
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|6
case|:
name|k1
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|5
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|5
case|:
name|k1
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|4
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|4
case|:
name|k1
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|3
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|k1
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|2
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|k1
operator|^=
operator|(
name|key
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|k1
operator|^=
operator|(
name|key
index|[
name|offset
index|]
operator|&
literal|0xFFL
operator|)
expr_stmt|;
name|k1
operator|*=
name|C1
expr_stmt|;
name|k1
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|k1
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|C2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
name|h1
operator|^=
name|length
expr_stmt|;
name|h2
operator|^=
name|length
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h1
operator|=
name|fmix
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|h2
operator|=
name|fmix
argument_list|(
name|h2
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|hash
operator|.
name|h1
operator|=
name|h1
expr_stmt|;
name|hash
operator|.
name|h2
operator|=
name|h2
expr_stmt|;
return|return
name|hash
return|;
block|}
block|}
end_enum

end_unit

