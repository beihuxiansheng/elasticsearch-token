begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.recycler
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|NoneRecycler
specifier|public
class|class
name|NoneRecycler
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Recycler
argument_list|<
name|T
argument_list|>
block|{
DECL|method|NoneRecycler
specifier|public
name|NoneRecycler
parameter_list|(
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|obtain
specifier|public
name|V
argument_list|<
name|T
argument_list|>
name|obtain
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|NV
argument_list|<
name|T
argument_list|>
argument_list|(
name|c
operator|.
name|newInstance
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{      }
DECL|class|NV
specifier|public
specifier|static
class|class
name|NV
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Recycler
operator|.
name|V
argument_list|<
name|T
argument_list|>
block|{
DECL|field|value
name|T
name|value
decl_stmt|;
DECL|method|NV
name|NV
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|v
specifier|public
name|T
name|v
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|isRecycled
specifier|public
name|boolean
name|isRecycled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|boolean
name|release
parameter_list|()
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"recycler entry already released..."
argument_list|)
throw|;
block|}
name|value
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

