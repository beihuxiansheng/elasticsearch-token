begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.recycler
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CloseableThreadLocal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SoftThreadLocalRecycler
specifier|public
class|class
name|SoftThreadLocalRecycler
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Recycler
argument_list|<
name|T
argument_list|>
block|{
DECL|field|threadLocal
specifier|private
specifier|final
name|CloseableThreadLocal
argument_list|<
name|SoftReference
argument_list|<
name|ThreadLocalRecycler
operator|.
name|Stack
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|>
name|threadLocal
init|=
operator|new
name|CloseableThreadLocal
argument_list|<
name|SoftReference
argument_list|<
name|ThreadLocalRecycler
operator|.
name|Stack
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|stackLimit
specifier|final
name|int
name|stackLimit
decl_stmt|;
DECL|method|SoftThreadLocalRecycler
specifier|public
name|SoftThreadLocalRecycler
parameter_list|(
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|int
name|stackLimit
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|stackLimit
operator|=
name|stackLimit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|threadLocal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|obtain
specifier|public
name|V
argument_list|<
name|T
argument_list|>
name|obtain
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
name|SoftReference
argument_list|<
name|ThreadLocalRecycler
operator|.
name|Stack
argument_list|<
name|T
argument_list|>
argument_list|>
name|ref
init|=
name|threadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
name|ThreadLocalRecycler
operator|.
name|Stack
argument_list|<
name|T
argument_list|>
name|stack
init|=
operator|(
name|ref
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|stack
operator|==
literal|null
condition|)
block|{
name|stack
operator|=
operator|new
name|ThreadLocalRecycler
operator|.
name|Stack
argument_list|<
name|T
argument_list|>
argument_list|(
name|stackLimit
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|threadLocal
operator|.
name|set
argument_list|(
operator|new
name|SoftReference
argument_list|<
name|ThreadLocalRecycler
operator|.
name|Stack
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|stack
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|T
name|o
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|sizing
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ThreadLocalRecycler
operator|.
name|TV
argument_list|<
name|T
argument_list|>
argument_list|(
name|stack
argument_list|,
name|c
argument_list|,
name|o
argument_list|)
return|;
block|}
block|}
end_class

end_unit

