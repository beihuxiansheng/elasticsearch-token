begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.recycler
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CloseableThreadLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ThreadLocalRecycler
specifier|public
class|class
name|ThreadLocalRecycler
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Recycler
argument_list|<
name|T
argument_list|>
block|{
DECL|field|threadLocal
specifier|private
specifier|final
name|CloseableThreadLocal
argument_list|<
name|Stack
argument_list|<
name|T
argument_list|>
argument_list|>
name|threadLocal
init|=
operator|new
name|CloseableThreadLocal
argument_list|<
name|Stack
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Stack
argument_list|<
name|T
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Stack
argument_list|<
name|T
argument_list|>
argument_list|(
name|stackLimit
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|stackLimit
specifier|final
name|int
name|stackLimit
decl_stmt|;
DECL|method|ThreadLocalRecycler
specifier|public
name|ThreadLocalRecycler
parameter_list|(
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|int
name|stackLimit
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|stackLimit
operator|=
name|stackLimit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|threadLocal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|obtain
specifier|public
name|V
argument_list|<
name|T
argument_list|>
name|obtain
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
name|Stack
argument_list|<
name|T
argument_list|>
name|stack
init|=
name|threadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|T
name|o
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TV
argument_list|<
name|T
argument_list|>
argument_list|(
name|stack
argument_list|,
name|c
argument_list|,
name|c
operator|.
name|newInstance
argument_list|(
name|sizing
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TV
argument_list|<
name|T
argument_list|>
argument_list|(
name|stack
argument_list|,
name|c
argument_list|,
name|o
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
DECL|class|TV
specifier|static
class|class
name|TV
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Recycler
operator|.
name|V
argument_list|<
name|T
argument_list|>
block|{
DECL|field|stack
specifier|final
name|Stack
argument_list|<
name|T
argument_list|>
name|stack
decl_stmt|;
DECL|field|c
specifier|final
name|C
argument_list|<
name|T
argument_list|>
name|c
decl_stmt|;
DECL|field|value
name|T
name|value
decl_stmt|;
DECL|field|recycled
specifier|final
name|boolean
name|recycled
decl_stmt|;
DECL|method|TV
name|TV
parameter_list|(
name|Stack
argument_list|<
name|T
argument_list|>
name|stack
parameter_list|,
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|T
name|value
parameter_list|,
name|boolean
name|recycled
parameter_list|)
block|{
name|this
operator|.
name|stack
operator|=
name|stack
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|recycled
operator|=
name|recycled
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|v
specifier|public
name|T
name|v
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|isRecycled
specifier|public
name|boolean
name|isRecycled
parameter_list|()
block|{
return|return
name|recycled
return|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|boolean
name|release
parameter_list|()
block|{
assert|assert
name|Thread
operator|.
name|currentThread
argument_list|()
operator|==
name|stack
operator|.
name|thread
assert|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"recycler entry already released..."
argument_list|)
throw|;
block|}
name|c
operator|.
name|clear
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|Stack
specifier|static
specifier|final
class|class
name|Stack
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|stackLimit
specifier|final
name|int
name|stackLimit
decl_stmt|;
DECL|field|thread
specifier|final
name|Thread
name|thread
decl_stmt|;
DECL|field|elements
specifier|private
name|T
index|[]
name|elements
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"SuspiciousArrayCast"
block|}
argument_list|)
DECL|method|Stack
name|Stack
parameter_list|(
name|int
name|stackLimit
parameter_list|,
name|Thread
name|thread
parameter_list|)
block|{
name|this
operator|.
name|stackLimit
operator|=
name|stackLimit
expr_stmt|;
name|this
operator|.
name|thread
operator|=
name|thread
expr_stmt|;
name|elements
operator|=
name|newArray
argument_list|(
name|stackLimit
operator|<
literal|10
condition|?
name|stackLimit
else|:
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|pop
name|T
name|pop
parameter_list|()
block|{
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|size
operator|--
expr_stmt|;
name|T
name|ret
init|=
name|elements
index|[
name|size
index|]
decl_stmt|;
name|elements
index|[
name|size
index|]
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|push
name|void
name|push
parameter_list|(
name|T
name|o
parameter_list|)
block|{
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|size
operator|==
name|elements
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|size
operator|>=
name|stackLimit
condition|)
block|{
return|return;
block|}
name|T
index|[]
name|newElements
init|=
name|newArray
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|stackLimit
argument_list|,
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|size
operator|+
literal|1
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|elements
argument_list|,
literal|0
argument_list|,
name|newElements
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|elements
operator|=
name|newElements
expr_stmt|;
block|}
name|elements
index|[
name|size
index|]
operator|=
name|o
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
operator|+
literal|1
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"SuspiciousArrayCast"
block|}
argument_list|)
DECL|method|newArray
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|newArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|length
index|]
return|;
block|}
block|}
block|}
end_class

end_unit

