begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.recycler
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_comment
comment|/**  * A {@link Recycler} implementation based on a {@link Deque}. This implementation is NOT thread-safe.  */
end_comment

begin_class
DECL|class|DequeRecycler
specifier|public
class|class
name|DequeRecycler
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractRecycler
argument_list|<
name|T
argument_list|>
block|{
DECL|field|deque
specifier|final
name|Deque
argument_list|<
name|T
argument_list|>
name|deque
decl_stmt|;
DECL|field|maxSize
specifier|final
name|int
name|maxSize
decl_stmt|;
DECL|method|DequeRecycler
specifier|public
name|DequeRecycler
parameter_list|(
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|Deque
argument_list|<
name|T
argument_list|>
name|queue
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|deque
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|deque
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|obtain
specifier|public
name|V
argument_list|<
name|T
argument_list|>
name|obtain
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
specifier|final
name|T
name|v
init|=
name|deque
operator|.
name|pollFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DV
argument_list|(
name|c
operator|.
name|newInstance
argument_list|(
name|sizing
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
operator|new
name|DV
argument_list|(
name|v
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Called before releasing an object, returns true if the object should be recycled and false otherwise. */
DECL|method|beforeRelease
specifier|protected
name|boolean
name|beforeRelease
parameter_list|()
block|{
return|return
name|deque
operator|.
name|size
argument_list|()
operator|<
name|maxSize
return|;
block|}
comment|/** Called after a release. */
DECL|method|afterRelease
specifier|protected
name|void
name|afterRelease
parameter_list|(
name|boolean
name|recycled
parameter_list|)
block|{}
DECL|class|DV
specifier|private
class|class
name|DV
implements|implements
name|Recycler
operator|.
name|V
argument_list|<
name|T
argument_list|>
block|{
DECL|field|value
name|T
name|value
decl_stmt|;
DECL|field|recycled
specifier|final
name|boolean
name|recycled
decl_stmt|;
DECL|method|DV
name|DV
parameter_list|(
name|T
name|value
parameter_list|,
name|boolean
name|recycled
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|recycled
operator|=
name|recycled
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|v
specifier|public
name|T
name|v
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|isRecycled
specifier|public
name|boolean
name|isRecycled
parameter_list|()
block|{
return|return
name|recycled
return|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|boolean
name|release
parameter_list|()
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"recycler entry already released..."
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|recycle
init|=
name|beforeRelease
argument_list|()
decl_stmt|;
if|if
condition|(
name|recycle
condition|)
block|{
name|c
operator|.
name|clear
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|deque
operator|.
name|addFirst
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
literal|null
expr_stmt|;
name|afterRelease
argument_list|(
name|recycle
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

