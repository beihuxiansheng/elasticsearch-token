begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|impl
operator|.
name|PointImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|impl
operator|.
name|RectangleImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|jts
operator|.
name|JtsGeometry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|jts
operator|.
name|JtsPoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|Coordinate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|GeometryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|LinearRing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|MultiPolygon
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|Polygon
import|;
end_import

begin_comment
comment|/**  * Utility class for building {@link Shape} instances like {@link Point},  * {@link Rectangle} and Polygons.  */
end_comment

begin_class
DECL|class|ShapeBuilder
specifier|public
class|class
name|ShapeBuilder
block|{
DECL|field|GEOMETRY_FACTORY
specifier|private
specifier|static
specifier|final
name|GeometryFactory
name|GEOMETRY_FACTORY
init|=
operator|new
name|GeometryFactory
argument_list|()
decl_stmt|;
DECL|method|ShapeBuilder
specifier|private
name|ShapeBuilder
parameter_list|()
block|{     }
comment|/**      * Creates a new {@link Point}      *      * @param lon Longitude of point      * @param lat Latitude of point      * @return Point with the latitude and longitude      */
DECL|method|newPoint
specifier|public
specifier|static
name|Point
name|newPoint
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lat
parameter_list|)
block|{
return|return
operator|new
name|PointImpl
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|,
name|GeoShapeConstants
operator|.
name|SPATIAL_CONTEXT
argument_list|)
return|;
block|}
comment|/**      * Creates a new {@link RectangleBuilder} to build a {@link Rectangle}      *      * @return RectangleBuilder instance      */
DECL|method|newRectangle
specifier|public
specifier|static
name|RectangleBuilder
name|newRectangle
parameter_list|()
block|{
return|return
operator|new
name|RectangleBuilder
argument_list|()
return|;
block|}
comment|/**      * Creates a new {@link PolygonBuilder} to build a Polygon      *      * @return PolygonBuilder instance      */
DECL|method|newPolygon
specifier|public
specifier|static
name|PolygonBuilder
name|newPolygon
parameter_list|()
block|{
return|return
operator|new
name|PolygonBuilder
argument_list|()
return|;
block|}
comment|/**      * Creates a new {@link MultiPolygonBuilder} to build a MultiPolygon      *      * @return MultiPolygonBuilder instance      */
DECL|method|newMultiPolygon
specifier|public
specifier|static
name|MultiPolygonBuilder
name|newMultiPolygon
parameter_list|()
block|{
return|return
operator|new
name|MultiPolygonBuilder
argument_list|()
return|;
block|}
comment|/**      * Converts the given Shape into the JTS {@link Geometry} representation.      * If the Shape already uses a Geometry, that is returned.      *      * @param shape Shape to convert      * @return Geometry representation of the Shape      */
DECL|method|toJTSGeometry
specifier|public
specifier|static
name|Geometry
name|toJTSGeometry
parameter_list|(
name|Shape
name|shape
parameter_list|)
block|{
if|if
condition|(
name|shape
operator|instanceof
name|JtsGeometry
condition|)
block|{
return|return
operator|(
operator|(
name|JtsGeometry
operator|)
name|shape
operator|)
operator|.
name|getGeom
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|shape
operator|instanceof
name|JtsPoint
condition|)
block|{
return|return
operator|(
operator|(
name|JtsPoint
operator|)
name|shape
operator|)
operator|.
name|getGeom
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|shape
operator|instanceof
name|Rectangle
condition|)
block|{
name|Rectangle
name|rectangle
init|=
operator|(
name|Rectangle
operator|)
name|shape
decl_stmt|;
if|if
condition|(
name|rectangle
operator|.
name|getCrossesDateLine
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert Rectangles that cross the dateline into JTS Geometrys"
argument_list|)
throw|;
block|}
return|return
name|newPolygon
argument_list|()
operator|.
name|point
argument_list|(
name|rectangle
operator|.
name|getMinX
argument_list|()
argument_list|,
name|rectangle
operator|.
name|getMaxY
argument_list|()
argument_list|)
operator|.
name|point
argument_list|(
name|rectangle
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|rectangle
operator|.
name|getMaxY
argument_list|()
argument_list|)
operator|.
name|point
argument_list|(
name|rectangle
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|rectangle
operator|.
name|getMinY
argument_list|()
argument_list|)
operator|.
name|point
argument_list|(
name|rectangle
operator|.
name|getMinX
argument_list|()
argument_list|,
name|rectangle
operator|.
name|getMinY
argument_list|()
argument_list|)
operator|.
name|point
argument_list|(
name|rectangle
operator|.
name|getMinX
argument_list|()
argument_list|,
name|rectangle
operator|.
name|getMaxY
argument_list|()
argument_list|)
operator|.
name|toPolygon
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|shape
operator|instanceof
name|Point
condition|)
block|{
name|Point
name|point
init|=
operator|(
name|Point
operator|)
name|shape
decl_stmt|;
return|return
name|GEOMETRY_FACTORY
operator|.
name|createPoint
argument_list|(
operator|new
name|Coordinate
argument_list|(
name|point
operator|.
name|getX
argument_list|()
argument_list|,
name|point
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Shape type ["
operator|+
name|shape
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
comment|/**      * Builder for creating a {@link Rectangle} instance      */
DECL|class|RectangleBuilder
specifier|public
specifier|static
class|class
name|RectangleBuilder
block|{
DECL|field|topLeft
specifier|private
name|Point
name|topLeft
decl_stmt|;
DECL|field|bottomRight
specifier|private
name|Point
name|bottomRight
decl_stmt|;
comment|/**          * Sets the top left point of the Rectangle          *          * @param lon Longitude of the top left point          * @param lat Latitude of the top left point          * @return this          */
DECL|method|topLeft
specifier|public
name|RectangleBuilder
name|topLeft
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lat
parameter_list|)
block|{
name|this
operator|.
name|topLeft
operator|=
operator|new
name|PointImpl
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|,
name|GeoShapeConstants
operator|.
name|SPATIAL_CONTEXT
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the bottom right point of the Rectangle          *          * @param lon Longitude of the bottom right point          * @param lat Latitude of the bottom right point          * @return this          */
DECL|method|bottomRight
specifier|public
name|RectangleBuilder
name|bottomRight
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lat
parameter_list|)
block|{
name|this
operator|.
name|bottomRight
operator|=
operator|new
name|PointImpl
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|,
name|GeoShapeConstants
operator|.
name|SPATIAL_CONTEXT
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Builds the {@link Rectangle} instance          *          * @return Built Rectangle          */
DECL|method|build
specifier|public
name|Rectangle
name|build
parameter_list|()
block|{
return|return
operator|new
name|RectangleImpl
argument_list|(
name|topLeft
operator|.
name|getX
argument_list|()
argument_list|,
name|bottomRight
operator|.
name|getX
argument_list|()
argument_list|,
name|bottomRight
operator|.
name|getY
argument_list|()
argument_list|,
name|topLeft
operator|.
name|getY
argument_list|()
argument_list|,
name|GeoShapeConstants
operator|.
name|SPATIAL_CONTEXT
argument_list|)
return|;
block|}
block|}
comment|/**      * Builder for creating a {@link Shape} instance of a MultiPolygon      */
DECL|class|MultiPolygonBuilder
specifier|public
specifier|static
class|class
name|MultiPolygonBuilder
block|{
DECL|field|polygons
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|EmbededPolygonBuilder
argument_list|<
name|MultiPolygonBuilder
argument_list|>
argument_list|>
name|polygons
init|=
operator|new
name|ArrayList
argument_list|<
name|EmbededPolygonBuilder
argument_list|<
name|MultiPolygonBuilder
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * Add a new polygon to the multipolygon          *           * @return builder for the new polygon          */
DECL|method|polygon
specifier|public
name|EmbededPolygonBuilder
argument_list|<
name|MultiPolygonBuilder
argument_list|>
name|polygon
parameter_list|()
block|{
name|EmbededPolygonBuilder
argument_list|<
name|MultiPolygonBuilder
argument_list|>
name|builder
init|=
operator|new
name|EmbededPolygonBuilder
argument_list|<
name|MultiPolygonBuilder
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|polygons
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|build
specifier|public
name|Shape
name|build
parameter_list|()
block|{
return|return
operator|new
name|JtsGeometry
argument_list|(
name|toMultiPolygon
argument_list|()
argument_list|,
name|GeoShapeConstants
operator|.
name|SPATIAL_CONTEXT
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|toMultiPolygon
specifier|public
name|MultiPolygon
name|toMultiPolygon
parameter_list|()
block|{
name|Polygon
index|[]
name|polygons
init|=
operator|new
name|Polygon
index|[
name|this
operator|.
name|polygons
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polygons
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|polygons
index|[
name|i
index|]
operator|=
name|this
operator|.
name|polygons
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toPolygon
argument_list|()
expr_stmt|;
block|}
return|return
name|GEOMETRY_FACTORY
operator|.
name|createMultiPolygon
argument_list|(
name|polygons
argument_list|)
return|;
block|}
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentBuilder
name|xcontent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|xcontent
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xcontent
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
name|xcontent
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multipolygon"
argument_list|)
expr_stmt|;
name|emdedXContent
argument_list|(
literal|"coordinates"
argument_list|,
name|xcontent
argument_list|)
expr_stmt|;
name|xcontent
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|xcontent
return|;
block|}
DECL|method|emdedXContent
specifier|protected
name|void
name|emdedXContent
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentBuilder
name|xcontent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|xcontent
operator|.
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xcontent
operator|.
name|startArray
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|EmbededPolygonBuilder
argument_list|<
name|MultiPolygonBuilder
argument_list|>
name|polygon
range|:
name|polygons
control|)
block|{
name|polygon
operator|.
name|emdedXContent
argument_list|(
literal|null
argument_list|,
name|xcontent
argument_list|)
expr_stmt|;
block|}
name|xcontent
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Builder for creating a {@link Shape} instance of a single Polygon      */
DECL|class|PolygonBuilder
specifier|public
specifier|static
class|class
name|PolygonBuilder
extends|extends
name|EmbededPolygonBuilder
argument_list|<
name|PolygonBuilder
argument_list|>
block|{
DECL|method|PolygonBuilder
specifier|private
name|PolygonBuilder
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|PolygonBuilder
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for creating a {@link Shape} instance of a Polygon      */
DECL|class|EmbededPolygonBuilder
specifier|public
specifier|static
class|class
name|EmbededPolygonBuilder
parameter_list|<
name|E
parameter_list|>
block|{
DECL|field|parent
specifier|private
specifier|final
name|E
name|parent
decl_stmt|;
DECL|field|ring
specifier|private
specifier|final
name|LinearRingBuilder
argument_list|<
name|EmbededPolygonBuilder
argument_list|<
name|E
argument_list|>
argument_list|>
name|ring
init|=
operator|new
name|LinearRingBuilder
argument_list|<
name|EmbededPolygonBuilder
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|holes
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|LinearRingBuilder
argument_list|<
name|EmbededPolygonBuilder
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
name|holes
init|=
operator|new
name|ArrayList
argument_list|<
name|LinearRingBuilder
argument_list|<
name|EmbededPolygonBuilder
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|EmbededPolygonBuilder
specifier|private
name|EmbededPolygonBuilder
parameter_list|(
name|E
name|parent
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/**          * Adds a point to the Polygon          *          * @param lon Longitude of the point          * @param lat Latitude of the point          * @return this          */
DECL|method|point
specifier|public
name|EmbededPolygonBuilder
argument_list|<
name|E
argument_list|>
name|point
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lat
parameter_list|)
block|{
name|ring
operator|.
name|point
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Start creating a new hole within the polygon          * @return a builder for holes          */
DECL|method|hole
specifier|public
name|LinearRingBuilder
argument_list|<
name|EmbededPolygonBuilder
argument_list|<
name|E
argument_list|>
argument_list|>
name|hole
parameter_list|()
block|{
name|LinearRingBuilder
argument_list|<
name|EmbededPolygonBuilder
argument_list|<
name|E
argument_list|>
argument_list|>
name|builder
init|=
operator|new
name|LinearRingBuilder
argument_list|<
name|EmbededPolygonBuilder
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|this
operator|.
name|holes
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**          * Builds a {@link Shape} instance representing the {@link Polygon}          *          * @return Built LinearRing          */
DECL|method|build
specifier|public
name|Shape
name|build
parameter_list|()
block|{
return|return
operator|new
name|JtsGeometry
argument_list|(
name|toPolygon
argument_list|()
argument_list|,
name|GeoShapeConstants
operator|.
name|SPATIAL_CONTEXT
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**          * Creates the raw {@link Polygon}          *          * @return Built polygon          */
DECL|method|toPolygon
specifier|public
name|Polygon
name|toPolygon
parameter_list|()
block|{
name|this
operator|.
name|ring
operator|.
name|close
argument_list|()
expr_stmt|;
name|LinearRing
name|ring
init|=
name|this
operator|.
name|ring
operator|.
name|toLinearRing
argument_list|()
decl_stmt|;
name|LinearRing
index|[]
name|rings
init|=
operator|new
name|LinearRing
index|[
name|holes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rings
index|[
name|i
index|]
operator|=
name|this
operator|.
name|holes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toLinearRing
argument_list|()
expr_stmt|;
block|}
return|return
name|GEOMETRY_FACTORY
operator|.
name|createPolygon
argument_list|(
name|ring
argument_list|,
name|rings
argument_list|)
return|;
block|}
comment|/**          * Close the linestring by copying the first point if necessary          * @return parent object          */
DECL|method|close
specifier|public
name|E
name|close
parameter_list|()
block|{
name|this
operator|.
name|ring
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|parent
return|;
block|}
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentBuilder
name|xcontent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|xcontent
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xcontent
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
name|xcontent
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"polygon"
argument_list|)
expr_stmt|;
name|emdedXContent
argument_list|(
literal|"coordinates"
argument_list|,
name|xcontent
argument_list|)
expr_stmt|;
name|xcontent
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|xcontent
return|;
block|}
DECL|method|emdedXContent
specifier|protected
name|void
name|emdedXContent
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentBuilder
name|xcontent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|xcontent
operator|.
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xcontent
operator|.
name|startArray
argument_list|()
expr_stmt|;
block|}
name|ring
operator|.
name|emdedXContent
argument_list|(
literal|null
argument_list|,
name|xcontent
argument_list|)
expr_stmt|;
for|for
control|(
name|LinearRingBuilder
argument_list|<
name|?
argument_list|>
name|ring
range|:
name|holes
control|)
block|{
name|ring
operator|.
name|emdedXContent
argument_list|(
literal|null
argument_list|,
name|xcontent
argument_list|)
expr_stmt|;
block|}
name|xcontent
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Builder for creating a {@link Shape} instance of a Polygon      */
DECL|class|LinearRingBuilder
specifier|public
specifier|static
class|class
name|LinearRingBuilder
parameter_list|<
name|E
parameter_list|>
block|{
DECL|field|parent
specifier|private
specifier|final
name|E
name|parent
decl_stmt|;
DECL|field|points
specifier|private
specifier|final
name|List
argument_list|<
name|Point
argument_list|>
name|points
init|=
operator|new
name|ArrayList
argument_list|<
name|Point
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|LinearRingBuilder
specifier|private
name|LinearRingBuilder
parameter_list|(
name|E
name|parent
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/**          * Adds a point to the Ring          *          * @param lon Longitude of the point          * @param lat Latitude of the point          * @return this          */
DECL|method|point
specifier|public
name|LinearRingBuilder
argument_list|<
name|E
argument_list|>
name|point
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lat
parameter_list|)
block|{
name|points
operator|.
name|add
argument_list|(
operator|new
name|PointImpl
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|,
name|GeoShapeConstants
operator|.
name|SPATIAL_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Builds a {@link Shape} instance representing the ring          *          * @return Built LinearRing          */
DECL|method|build
specifier|protected
name|Shape
name|build
parameter_list|()
block|{
return|return
operator|new
name|JtsGeometry
argument_list|(
name|toLinearRing
argument_list|()
argument_list|,
name|GeoShapeConstants
operator|.
name|SPATIAL_CONTEXT
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**          * Creates the raw {@link Polygon}          *          * @return Built LinearRing          */
DECL|method|toLinearRing
specifier|protected
name|LinearRing
name|toLinearRing
parameter_list|()
block|{
name|this
operator|.
name|close
argument_list|()
expr_stmt|;
name|Coordinate
index|[]
name|coordinates
init|=
operator|new
name|Coordinate
index|[
name|points
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coordinates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|coordinates
index|[
name|i
index|]
operator|=
operator|new
name|Coordinate
argument_list|(
name|points
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getX
argument_list|()
argument_list|,
name|points
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLinearRing
argument_list|(
name|coordinates
argument_list|)
return|;
block|}
comment|/**          * Close the linestring by copying the first point if necessary          * @return parent object          */
DECL|method|close
specifier|public
name|E
name|close
parameter_list|()
block|{
name|Point
name|first
init|=
name|points
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Point
name|last
init|=
name|points
operator|.
name|get
argument_list|(
name|points
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|.
name|getX
argument_list|()
operator|!=
name|last
operator|.
name|getX
argument_list|()
operator|||
name|first
operator|.
name|getY
argument_list|()
operator|!=
name|last
operator|.
name|getY
argument_list|()
condition|)
block|{
name|points
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|points
operator|.
name|size
argument_list|()
operator|<
literal|4
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"A linear ring is defined by a least four points"
argument_list|)
throw|;
block|}
return|return
name|parent
return|;
block|}
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentBuilder
name|xcontent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|xcontent
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xcontent
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
name|xcontent
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"linestring"
argument_list|)
expr_stmt|;
name|emdedXContent
argument_list|(
literal|"coordinates"
argument_list|,
name|xcontent
argument_list|)
expr_stmt|;
name|xcontent
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|xcontent
return|;
block|}
DECL|method|emdedXContent
specifier|protected
name|void
name|emdedXContent
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentBuilder
name|xcontent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|xcontent
operator|.
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xcontent
operator|.
name|startArray
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Point
name|point
range|:
name|points
control|)
block|{
name|xcontent
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|point
operator|.
name|getY
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|point
operator|.
name|getX
argument_list|()
argument_list|)
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|xcontent
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

