begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * This class iterates over the cells of a given geohash. Assume geohashes  * form a tree, this iterator traverses this tree form a leaf (actual gehash)  * to the root (geohash of length 1).   */
end_comment

begin_class
DECL|class|GeohashPathIterator
specifier|public
specifier|final
class|class
name|GeohashPathIterator
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
block|{
DECL|field|geohash
specifier|private
specifier|final
name|String
name|geohash
decl_stmt|;
DECL|field|currentLength
specifier|private
name|int
name|currentLength
decl_stmt|;
comment|/**      * Create a new {@link GeohashPathIterator} for a given geohash      * @param geohash The geohash to traverse      */
DECL|method|GeohashPathIterator
specifier|public
name|GeohashPathIterator
parameter_list|(
name|String
name|geohash
parameter_list|)
block|{
name|this
operator|.
name|geohash
operator|=
name|geohash
expr_stmt|;
name|this
operator|.
name|currentLength
operator|=
name|geohash
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|currentLength
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
name|String
name|result
init|=
name|geohash
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|currentLength
argument_list|)
decl_stmt|;
name|currentLength
operator|--
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unable to remove a geohash from this path"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

