begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|jts
operator|.
name|JtsGeometry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Serializes {@link Shape} instances into GeoJSON format  *  * Example of the format used for points:  *  * { "type": "Point", "coordinates": [100.0, 0.0] }  */
end_comment

begin_class
DECL|class|GeoJSONShapeSerializer
specifier|public
class|class
name|GeoJSONShapeSerializer
block|{
DECL|method|GeoJSONShapeSerializer
specifier|private
name|GeoJSONShapeSerializer
parameter_list|()
block|{     }
comment|/**      * Serializes the given {@link Shape} as GeoJSON format into the given      * {@link XContentBuilder}      *      * @param shape Shape that will be serialized      * @param builder XContentBuilder it will be serialized to      * @throws IOException Thrown if an error occurs while writing to the XContentBuilder      */
DECL|method|serialize
specifier|public
specifier|static
name|void
name|serialize
parameter_list|(
name|Shape
name|shape
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shape
operator|instanceof
name|JtsGeometry
condition|)
block|{
name|Geometry
name|geometry
init|=
operator|(
operator|(
name|JtsGeometry
operator|)
name|shape
operator|)
operator|.
name|geo
decl_stmt|;
if|if
condition|(
name|geometry
operator|instanceof
name|Point
condition|)
block|{
name|serializePoint
argument_list|(
operator|(
name|Point
operator|)
name|geometry
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|geometry
operator|instanceof
name|LineString
condition|)
block|{
name|serializeLineString
argument_list|(
operator|(
name|LineString
operator|)
name|geometry
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|geometry
operator|instanceof
name|Polygon
condition|)
block|{
name|serializePolygon
argument_list|(
operator|(
name|Polygon
operator|)
name|geometry
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|geometry
operator|instanceof
name|MultiPoint
condition|)
block|{
name|serializeMultiPoint
argument_list|(
operator|(
name|MultiPoint
operator|)
name|geometry
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Geometry type ["
operator|+
name|geometry
operator|.
name|getGeometryType
argument_list|()
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|shape
operator|instanceof
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
condition|)
block|{
name|serializePoint
argument_list|(
operator|(
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
operator|)
name|shape
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shape
operator|instanceof
name|Rectangle
condition|)
block|{
name|serializeRectangle
argument_list|(
operator|(
name|Rectangle
operator|)
name|shape
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Shape type ["
operator|+
name|shape
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Serializes the given {@link Rectangle}      *      * @param rectangle Rectangle that will be serialized      * @param builder XContentBuilder it will be serialized to      * @throws IOException Thrown if an error occurs while writing to the XContentBuilder      */
DECL|method|serializeRectangle
specifier|private
specifier|static
name|void
name|serializeRectangle
parameter_list|(
name|Rectangle
name|rectangle
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"Envelope"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"coordinates"
argument_list|)
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|rectangle
operator|.
name|getMinX
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|rectangle
operator|.
name|getMaxY
argument_list|()
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|rectangle
operator|.
name|getMaxX
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|rectangle
operator|.
name|getMinY
argument_list|()
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
comment|/**      * Serializes the given {@link Point}      *      * @param point Point that will be serialized      * @param builder XContentBuilder it will be serialized to      * @throws IOException Thrown if an error occurs while writing to the XContentBuilder      */
DECL|method|serializePoint
specifier|private
specifier|static
name|void
name|serializePoint
parameter_list|(
name|Point
name|point
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"Point"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"coordinates"
argument_list|)
operator|.
name|value
argument_list|(
name|point
operator|.
name|getX
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|point
operator|.
name|getY
argument_list|()
argument_list|)
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
comment|/**      * Serializes the given {@link com.spatial4j.core.shape.Point}      *      * @param point Point that will be serialized      * @param builder XContentBuilder it will be serialized to      * @throws IOException Thrown if an error occurs while writing to the XContentBuilder      */
DECL|method|serializePoint
specifier|private
specifier|static
name|void
name|serializePoint
parameter_list|(
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
name|point
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"Point"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"coordinates"
argument_list|)
operator|.
name|value
argument_list|(
name|point
operator|.
name|getX
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|point
operator|.
name|getY
argument_list|()
argument_list|)
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
comment|/**      * Serializes the given {@link LineString}      *      * @param lineString LineString that will be serialized      * @param builder XContentBuilder it will be serialized to      * @throws IOException Thrown if an error occurs while writing to the XContentBuilder      */
DECL|method|serializeLineString
specifier|private
specifier|static
name|void
name|serializeLineString
parameter_list|(
name|LineString
name|lineString
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"LineString"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"coordinates"
argument_list|)
expr_stmt|;
for|for
control|(
name|Coordinate
name|coordinate
range|:
name|lineString
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
name|serializeCoordinate
argument_list|(
name|coordinate
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
comment|/**      * Serializes the given {@link Polygon}      *      * @param polygon Polygon that will be serialized      * @param builder XContentBuilder it will be serialized to      * @throws IOException Thrown if an error occurs while writing to the XContentBuilder      */
DECL|method|serializePolygon
specifier|private
specifier|static
name|void
name|serializePolygon
parameter_list|(
name|Polygon
name|polygon
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"Polygon"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"coordinates"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|()
expr_stmt|;
comment|// start outer ring
for|for
control|(
name|Coordinate
name|coordinate
range|:
name|polygon
operator|.
name|getExteriorRing
argument_list|()
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
name|serializeCoordinate
argument_list|(
name|coordinate
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
comment|// end outer ring
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polygon
operator|.
name|getNumInteriorRing
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LineString
name|interiorRing
init|=
name|polygon
operator|.
name|getInteriorRingN
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Coordinate
name|coordinate
range|:
name|interiorRing
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
name|serializeCoordinate
argument_list|(
name|coordinate
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
comment|/**      * Serializes the given {@link MultiPoint}      *      * @param multiPoint MulitPoint that will be serialized      * @param builder XContentBuilder it will be serialized to      * @throws IOException Thrown if an error occurs while writing to the XContentBuilder      */
DECL|method|serializeMultiPoint
specifier|private
specifier|static
name|void
name|serializeMultiPoint
parameter_list|(
name|MultiPoint
name|multiPoint
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"MultiPoint"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"coordinates"
argument_list|)
expr_stmt|;
for|for
control|(
name|Coordinate
name|coordinate
range|:
name|multiPoint
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
name|serializeCoordinate
argument_list|(
name|coordinate
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
comment|/**      * Serializes the given {@link Coordinate}      *      * @param coordinate Coordinate that will be serialized      * @param builder XContentBuilder it will be serialized to      * @throws IOException Thrown if an error occurs while writing to the XContentBuilder      */
DECL|method|serializeCoordinate
specifier|private
specifier|static
name|void
name|serializeCoordinate
parameter_list|(
name|Coordinate
name|coordinate
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|coordinate
operator|.
name|x
argument_list|)
operator|.
name|value
argument_list|(
name|coordinate
operator|.
name|y
argument_list|)
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

