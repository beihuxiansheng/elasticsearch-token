begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|geo
operator|.
name|GeoPointFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|GeoPoint
specifier|public
specifier|final
class|class
name|GeoPoint
block|{
DECL|field|LATITUDE
specifier|public
specifier|static
specifier|final
name|String
name|LATITUDE
init|=
name|GeoPointFieldMapper
operator|.
name|Names
operator|.
name|LAT
decl_stmt|;
DECL|field|LONGITUDE
specifier|public
specifier|static
specifier|final
name|String
name|LONGITUDE
init|=
name|GeoPointFieldMapper
operator|.
name|Names
operator|.
name|LON
decl_stmt|;
DECL|field|GEOHASH
specifier|public
specifier|static
specifier|final
name|String
name|GEOHASH
init|=
name|GeoPointFieldMapper
operator|.
name|Names
operator|.
name|GEOHASH
decl_stmt|;
DECL|field|lat
specifier|private
name|double
name|lat
decl_stmt|;
DECL|field|lon
specifier|private
name|double
name|lon
decl_stmt|;
DECL|method|GeoPoint
specifier|public
name|GeoPoint
parameter_list|()
block|{     }
comment|/**      * Create a new Geopointform a string. This String must either be a geohash      * or a lat-lon tuple.      *         * @param value String to create the point from      */
DECL|method|GeoPoint
specifier|public
name|GeoPoint
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|resetFromString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|GeoPoint
specifier|public
name|GeoPoint
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|this
operator|.
name|lat
operator|=
name|lat
expr_stmt|;
name|this
operator|.
name|lon
operator|=
name|lon
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|GeoPoint
name|reset
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|this
operator|.
name|lat
operator|=
name|lat
expr_stmt|;
name|this
operator|.
name|lon
operator|=
name|lon
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|resetLat
specifier|public
name|GeoPoint
name|resetLat
parameter_list|(
name|double
name|lat
parameter_list|)
block|{
name|this
operator|.
name|lat
operator|=
name|lat
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|resetLon
specifier|public
name|GeoPoint
name|resetLon
parameter_list|(
name|double
name|lon
parameter_list|)
block|{
name|this
operator|.
name|lon
operator|=
name|lon
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|resetFromString
specifier|public
name|GeoPoint
name|resetFromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
name|comma
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|comma
operator|!=
operator|-
literal|1
condition|)
block|{
name|lat
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|comma
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|lon
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|comma
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resetFromGeoHash
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|resetFromGeoHash
specifier|public
name|GeoPoint
name|resetFromGeoHash
parameter_list|(
name|String
name|hash
parameter_list|)
block|{
name|GeoHashUtils
operator|.
name|decode
argument_list|(
name|hash
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|latlon
name|void
name|latlon
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|this
operator|.
name|lat
operator|=
name|lat
expr_stmt|;
name|this
operator|.
name|lon
operator|=
name|lon
expr_stmt|;
block|}
DECL|method|lat
specifier|public
specifier|final
name|double
name|lat
parameter_list|()
block|{
return|return
name|this
operator|.
name|lat
return|;
block|}
DECL|method|getLat
specifier|public
specifier|final
name|double
name|getLat
parameter_list|()
block|{
return|return
name|this
operator|.
name|lat
return|;
block|}
DECL|method|lon
specifier|public
specifier|final
name|double
name|lon
parameter_list|()
block|{
return|return
name|this
operator|.
name|lon
return|;
block|}
DECL|method|getLon
specifier|public
specifier|final
name|double
name|getLon
parameter_list|()
block|{
return|return
name|this
operator|.
name|lon
return|;
block|}
DECL|method|geohash
specifier|public
specifier|final
name|String
name|geohash
parameter_list|()
block|{
return|return
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
DECL|method|getGeohash
specifier|public
specifier|final
name|String
name|getGeohash
parameter_list|()
block|{
return|return
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|GeoPoint
name|geoPoint
init|=
operator|(
name|GeoPoint
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|geoPoint
operator|.
name|lat
argument_list|,
name|lat
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|geoPoint
operator|.
name|lon
argument_list|,
name|lon
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
decl_stmt|;
name|long
name|temp
decl_stmt|;
name|temp
operator|=
name|lat
operator|!=
operator|+
literal|0.0d
condition|?
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|lat
argument_list|)
else|:
literal|0L
expr_stmt|;
name|result
operator|=
call|(
name|int
call|)
argument_list|(
name|temp
operator|^
operator|(
name|temp
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|temp
operator|=
name|lon
operator|!=
operator|+
literal|0.0d
condition|?
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|lon
argument_list|)
else|:
literal|0L
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|temp
operator|^
operator|(
name|temp
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|lat
operator|+
literal|", "
operator|+
name|lon
operator|+
literal|"]"
return|;
block|}
DECL|method|parseFromLatLon
specifier|public
specifier|static
name|GeoPoint
name|parseFromLatLon
parameter_list|(
name|String
name|latLon
parameter_list|)
block|{
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
name|point
operator|.
name|resetFromString
argument_list|(
name|latLon
argument_list|)
expr_stmt|;
return|return
name|point
return|;
block|}
comment|/**      * Parse a {@link GeoPoint} with a {@link XContentParser}:      *       * @param parser {@link XContentParser} to parse the value from      * @return new {@link GeoPoint} parsed from the parse      *       * @throws IOException      * @throws org.elasticsearch.ElasticsearchParseException      */
DECL|method|parse
specifier|public
specifier|static
name|GeoPoint
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
throws|,
name|ElasticsearchParseException
block|{
return|return
name|parse
argument_list|(
name|parser
argument_list|,
operator|new
name|GeoPoint
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parse a {@link GeoPoint} with a {@link XContentParser}. A geopoint has one of the following forms:      *       *<ul>      *<li>Object:<pre>{&quot;lat&quot;:<i>&lt;latitude&gt;</i>,&quot;lon&quot;:<i>&lt;longitude&gt;</i>}</pre></li>      *<li>String:<pre>&quot;<i>&lt;latitude&gt;</i>,<i>&lt;longitude&gt;</i>&quot;</pre></li>      *<li>Geohash:<pre>&quot;<i>&lt;geohash&gt;</i>&quot;</pre></li>      *<li>Array:<pre>[<i>&lt;longitude&gt;</i>,<i>&lt;latitude&gt;</i>]</pre></li>      *</ul>      *       * @param parser {@link XContentParser} to parse the value from      * @param point A {@link GeoPoint} that will be reset by the values parsed      * @return new {@link GeoPoint} parsed from the parse      *       * @throws IOException      * @throws org.elasticsearch.ElasticsearchParseException      */
DECL|method|parse
specifier|public
specifier|static
name|GeoPoint
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|GeoPoint
name|point
parameter_list|)
throws|throws
name|IOException
throws|,
name|ElasticsearchParseException
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|String
name|field
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|LATITUDE
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|point
operator|.
name|resetLat
argument_list|(
name|parser
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"latitude must be a number"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|LONGITUDE
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|point
operator|.
name|resetLon
argument_list|(
name|parser
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"latitude must be a number"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|GEOHASH
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|point
operator|.
name|resetFromGeoHash
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"geohash must be a string"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"field must be either '"
operator|+
name|LATITUDE
operator|+
literal|"', '"
operator|+
name|LONGITUDE
operator|+
literal|"' or '"
operator|+
name|GEOHASH
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Token '"
operator|+
name|parser
operator|.
name|currentToken
argument_list|()
operator|+
literal|"' not allowed"
argument_list|)
throw|;
block|}
block|}
return|return
name|point
return|;
block|}
elseif|else
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|int
name|element
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|element
operator|++
expr_stmt|;
if|if
condition|(
name|element
operator|==
literal|1
condition|)
block|{
name|point
operator|.
name|resetLon
argument_list|(
name|parser
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|element
operator|==
literal|2
condition|)
block|{
name|point
operator|.
name|resetLat
argument_list|(
name|parser
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"only two values allowed"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Numeric value expected"
argument_list|)
throw|;
block|}
block|}
return|return
name|point
return|;
block|}
elseif|else
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|String
name|data
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
name|int
name|comma
init|=
name|data
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|comma
operator|>
literal|0
condition|)
block|{
name|double
name|lat
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|data
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|comma
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|data
operator|.
name|substring
argument_list|(
name|comma
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|point
operator|.
name|reset
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
else|else
block|{
name|point
operator|.
name|resetFromGeoHash
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|point
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"geo_point expected"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

