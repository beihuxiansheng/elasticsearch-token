begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.table
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|table
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|TimestampedTable
specifier|public
class|class
name|TimestampedTable
extends|extends
name|Table
block|{
DECL|field|now
specifier|private
name|Date
name|now
decl_stmt|;
DECL|method|TimestampedTable
specifier|public
name|TimestampedTable
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|now
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startHeaders
specifier|public
name|Table
name|startHeaders
parameter_list|()
block|{
name|inHeaders
operator|=
literal|true
expr_stmt|;
name|currentCells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
name|currentCells
operator|.
name|add
argument_list|(
operator|new
name|Cell
argument_list|(
literal|"epoch"
argument_list|)
argument_list|)
expr_stmt|;
name|currentCells
operator|.
name|add
argument_list|(
operator|new
name|Cell
argument_list|(
literal|"time"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|startRow
specifier|public
name|Table
name|startRow
parameter_list|()
block|{
name|SimpleDateFormat
name|dfHms
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"no headers added..."
argument_list|)
throw|;
block|}
name|currentCells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|headers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|currentCells
operator|.
name|add
argument_list|(
operator|new
name|Cell
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|currentCells
operator|.
name|add
argument_list|(
operator|new
name|Cell
argument_list|(
name|dfHms
operator|.
name|format
argument_list|(
name|now
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

