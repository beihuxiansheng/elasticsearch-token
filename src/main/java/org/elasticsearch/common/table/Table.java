begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.table
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|table
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  *  A generic table renderer.  Can optionally print header row.  *  Will justify all cells in a column to the widest one.  All rows need  *  to have same number of cells.  *  *  Eg, new Table.addRow(new Row().addCell("foo").addCell("bar")).render()  */
end_comment

begin_class
DECL|class|Table
specifier|public
class|class
name|Table
block|{
DECL|field|cols
specifier|private
name|ArrayList
argument_list|<
name|Column
argument_list|>
name|cols
decl_stmt|;
DECL|field|numcols
specifier|private
name|byte
name|numcols
decl_stmt|;
DECL|field|height
specifier|private
name|byte
name|height
decl_stmt|;
DECL|method|Table
specifier|public
name|Table
parameter_list|()
block|{
name|this
operator|.
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<
name|Column
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|numcols
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|height
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|addRow
specifier|public
name|Table
name|addRow
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|addRow
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|ensureCapacity
specifier|public
name|void
name|ensureCapacity
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|numcols
operator|<
name|size
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|size
operator|-
name|numcols
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
operator|new
name|Column
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addRow
specifier|public
name|Table
name|addRow
parameter_list|(
name|Row
name|row
parameter_list|,
name|boolean
name|header
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|curCol
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|row
operator|.
name|cells
argument_list|()
control|)
block|{
name|Column
name|col
init|=
name|cols
operator|.
name|get
argument_list|(
name|curCol
argument_list|)
decl_stmt|;
name|col
operator|.
name|addCell
argument_list|(
name|cell
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|curCol
operator|+=
literal|1
expr_stmt|;
block|}
name|numcols
operator|=
name|curCol
expr_stmt|;
name|height
operator|+=
literal|1
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|render
specifier|public
name|String
name|render
parameter_list|()
block|{
return|return
name|render
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|render
specifier|public
name|String
name|render
parameter_list|(
name|boolean
name|withHeaders
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilder
name|row
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Column
name|col
range|:
name|cols
control|)
block|{
name|Cell
name|cell
init|=
name|col
operator|.
name|getCell
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|headerRowWhenNotWantingHeaders
init|=
name|i
operator|==
literal|0
operator|&&
operator|!
name|withHeaders
operator|&&
name|col
operator|.
name|hasHeader
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|headerRowWhenNotWantingHeaders
condition|)
block|{
name|row
operator|.
name|append
argument_list|(
name|cell
operator|.
name|toString
argument_list|(
name|col
operator|.
name|width
argument_list|()
argument_list|,
name|col
operator|.
name|align
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|append
argument_list|(
name|row
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|Column
specifier|private
class|class
name|Column
block|{
DECL|field|hasHeader
specifier|private
name|boolean
name|hasHeader
decl_stmt|;
DECL|field|cells
specifier|private
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
decl_stmt|;
DECL|field|width
specifier|private
name|byte
name|width
decl_stmt|;
DECL|field|align
specifier|private
name|Align
name|align
decl_stmt|;
DECL|method|Column
name|Column
parameter_list|()
block|{
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
name|width
operator|=
literal|0
expr_stmt|;
name|hasHeader
operator|=
literal|false
expr_stmt|;
name|align
operator|=
name|Align
operator|.
name|LEFT
expr_stmt|;
block|}
DECL|method|addCell
specifier|public
name|Column
name|addCell
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|addCell
argument_list|(
name|cell
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addCell
specifier|public
name|Column
name|addCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|boolean
name|header
parameter_list|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
condition|)
block|{
name|hasHeader
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cell
operator|.
name|width
argument_list|()
operator|>
name|width
condition|)
block|{
name|width
operator|=
name|cell
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|align
operator|!=
name|cell
operator|.
name|align
argument_list|()
condition|)
block|{
name|align
operator|=
name|cell
operator|.
name|align
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getCell
specifier|public
name|Cell
name|getCell
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|cells
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|align
specifier|public
name|Align
name|align
parameter_list|()
block|{
return|return
name|this
operator|.
name|align
return|;
block|}
DECL|method|width
specifier|public
name|byte
name|width
parameter_list|()
block|{
return|return
name|this
operator|.
name|width
return|;
block|}
DECL|method|hasHeader
specifier|public
name|boolean
name|hasHeader
parameter_list|()
block|{
return|return
name|this
operator|.
name|hasHeader
return|;
block|}
block|}
block|}
end_class

end_unit

