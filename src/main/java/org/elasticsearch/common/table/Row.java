begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.table
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|table
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|Row
specifier|public
class|class
name|Row
block|{
DECL|field|cells
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
decl_stmt|;
DECL|field|widths
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Byte
argument_list|>
name|widths
decl_stmt|;
DECL|method|Row
specifier|public
name|Row
parameter_list|()
block|{
name|this
operator|.
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|widths
operator|=
operator|new
name|ArrayList
argument_list|<
name|Byte
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|cells
specifier|public
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
parameter_list|()
block|{
return|return
name|this
operator|.
name|cells
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|cells
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|addCell
specifier|public
name|Row
name|addCell
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|widths
operator|.
name|add
argument_list|(
name|cell
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addCell
specifier|public
name|Row
name|addCell
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|addCell
argument_list|(
operator|new
name|Cell
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addCell
specifier|public
name|Row
name|addCell
parameter_list|(
name|String
name|content
parameter_list|,
name|Align
name|align
parameter_list|)
block|{
name|addCell
argument_list|(
operator|new
name|Cell
argument_list|(
name|content
argument_list|,
name|align
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

