begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.table
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|table
package|;
end_package

begin_comment
comment|/**  *  A String container that supports alignment.  */
end_comment

begin_class
DECL|class|Cell
specifier|public
class|class
name|Cell
block|{
DECL|field|content
specifier|private
specifier|final
name|String
name|content
decl_stmt|;
DECL|field|align
specifier|private
specifier|final
name|Align
name|align
decl_stmt|;
DECL|field|width
specifier|private
specifier|final
name|byte
name|width
decl_stmt|;
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|align
operator|=
name|Align
operator|.
name|LEFT
expr_stmt|;
name|this
operator|.
name|width
operator|=
operator|(
name|byte
operator|)
name|content
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|String
name|content
parameter_list|,
name|Align
name|align
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|align
operator|=
name|align
expr_stmt|;
name|this
operator|.
name|width
operator|=
operator|(
name|byte
operator|)
name|content
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|String
name|content
parameter_list|,
name|Align
name|align
parameter_list|,
name|byte
name|width
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|align
operator|=
name|align
expr_stmt|;
name|this
operator|.
name|width
operator|=
name|width
expr_stmt|;
block|}
DECL|method|width
specifier|public
name|byte
name|width
parameter_list|()
block|{
return|return
name|this
operator|.
name|width
return|;
block|}
DECL|method|align
specifier|public
name|Align
name|align
parameter_list|()
block|{
return|return
name|this
operator|.
name|align
return|;
block|}
DECL|method|pad
specifier|public
specifier|static
name|String
name|pad
parameter_list|(
name|String
name|orig
parameter_list|,
name|byte
name|width
parameter_list|,
name|Align
name|align
parameter_list|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|byte
name|leftOver
init|=
call|(
name|byte
call|)
argument_list|(
name|width
operator|-
name|orig
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftOver
operator|>
literal|0
operator|&&
name|align
operator|==
name|Align
operator|.
name|LEFT
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|orig
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftOver
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|leftOver
operator|>
literal|0
operator|&&
name|align
operator|==
name|Align
operator|.
name|RIGHT
condition|)
block|{
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftOver
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|orig
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|append
argument_list|(
name|orig
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|byte
name|outWidth
parameter_list|,
name|Align
name|outAlign
parameter_list|)
block|{
return|return
name|pad
argument_list|(
name|content
argument_list|,
name|outWidth
argument_list|,
name|outAlign
argument_list|)
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|align
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|content
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

