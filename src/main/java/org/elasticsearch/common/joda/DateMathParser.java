begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.joda
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|MutableDateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A parser for date/time formatted text with optional date math.  *   * The format of the datetime is configurable, and unix timestamps can also be used. Datemath  * is appended to a datetime with the following syntax:  *<code>||[+-/](\d+)?[yMwdhHms]</code>.  */
end_comment

begin_class
DECL|class|DateMathParser
specifier|public
class|class
name|DateMathParser
block|{
DECL|field|dateTimeFormatter
specifier|private
specifier|final
name|FormatDateTimeFormatter
name|dateTimeFormatter
decl_stmt|;
DECL|field|timeUnit
specifier|private
specifier|final
name|TimeUnit
name|timeUnit
decl_stmt|;
DECL|method|DateMathParser
specifier|public
name|DateMathParser
parameter_list|(
name|FormatDateTimeFormatter
name|dateTimeFormatter
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
if|if
condition|(
name|dateTimeFormatter
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
if|if
condition|(
name|timeUnit
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|this
operator|.
name|dateTimeFormatter
operator|=
name|dateTimeFormatter
expr_stmt|;
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|long
name|parse
parameter_list|(
name|String
name|text
parameter_list|,
name|Callable
argument_list|<
name|Long
argument_list|>
name|now
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|text
argument_list|,
name|now
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|// Note: we take a callable here for the timestamp in order to be able to figure out
comment|// if it has been used. For instance, the query cache does not cache queries that make
comment|// use of `now`.
DECL|method|parse
specifier|public
name|long
name|parse
parameter_list|(
name|String
name|text
parameter_list|,
name|Callable
argument_list|<
name|Long
argument_list|>
name|now
parameter_list|,
name|boolean
name|roundUp
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
name|long
name|time
decl_stmt|;
name|String
name|mathString
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
literal|"now"
argument_list|)
condition|)
block|{
try|try
block|{
name|time
operator|=
name|now
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Could not read the current timestamp"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|mathString
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|"now"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|index
init|=
name|text
operator|.
name|indexOf
argument_list|(
literal|"||"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|parseDateTime
argument_list|(
name|text
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
name|time
operator|=
name|parseDateTime
argument_list|(
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
name|mathString
operator|=
name|text
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|mathString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|time
return|;
block|}
block|}
return|return
name|parseMath
argument_list|(
name|mathString
argument_list|,
name|time
argument_list|,
name|roundUp
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
DECL|method|parseMath
specifier|private
name|long
name|parseMath
parameter_list|(
name|String
name|mathString
parameter_list|,
name|long
name|time
parameter_list|,
name|boolean
name|roundUp
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
throws|throws
name|ElasticsearchParseException
block|{
if|if
condition|(
name|timeZone
operator|==
literal|null
condition|)
block|{
name|timeZone
operator|=
name|DateTimeZone
operator|.
name|UTC
expr_stmt|;
block|}
name|MutableDateTime
name|dateTime
init|=
operator|new
name|MutableDateTime
argument_list|(
name|time
argument_list|,
name|timeZone
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mathString
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
name|char
name|c
init|=
name|mathString
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|round
decl_stmt|;
specifier|final
name|int
name|sign
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'/'
condition|)
block|{
name|round
operator|=
literal|true
expr_stmt|;
name|sign
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|round
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'+'
condition|)
block|{
name|sign
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'-'
condition|)
block|{
name|sign
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"operator not supported for date math ["
operator|+
name|mathString
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|i
operator|>=
name|mathString
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"truncated date math ["
operator|+
name|mathString
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|num
decl_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|mathString
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|num
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|int
name|numFrom
init|=
name|i
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|mathString
operator|.
name|length
argument_list|()
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|mathString
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
name|mathString
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"truncated date math ["
operator|+
name|mathString
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|num
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|mathString
operator|.
name|substring
argument_list|(
name|numFrom
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|round
condition|)
block|{
if|if
condition|(
name|num
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"rounding `/` can only be used on single unit types ["
operator|+
name|mathString
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|char
name|unit
init|=
name|mathString
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|MutableDateTime
operator|.
name|Property
name|propertyToRound
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
literal|'y'
case|:
if|if
condition|(
name|round
condition|)
block|{
name|propertyToRound
operator|=
name|dateTime
operator|.
name|yearOfCentury
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dateTime
operator|.
name|addYears
argument_list|(
name|sign
operator|*
name|num
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'M'
case|:
if|if
condition|(
name|round
condition|)
block|{
name|propertyToRound
operator|=
name|dateTime
operator|.
name|monthOfYear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dateTime
operator|.
name|addMonths
argument_list|(
name|sign
operator|*
name|num
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'w'
case|:
if|if
condition|(
name|round
condition|)
block|{
name|propertyToRound
operator|=
name|dateTime
operator|.
name|weekOfWeekyear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dateTime
operator|.
name|addWeeks
argument_list|(
name|sign
operator|*
name|num
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'d'
case|:
if|if
condition|(
name|round
condition|)
block|{
name|propertyToRound
operator|=
name|dateTime
operator|.
name|dayOfMonth
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dateTime
operator|.
name|addDays
argument_list|(
name|sign
operator|*
name|num
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'h'
case|:
case|case
literal|'H'
case|:
if|if
condition|(
name|round
condition|)
block|{
name|propertyToRound
operator|=
name|dateTime
operator|.
name|hourOfDay
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dateTime
operator|.
name|addHours
argument_list|(
name|sign
operator|*
name|num
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'m'
case|:
if|if
condition|(
name|round
condition|)
block|{
name|propertyToRound
operator|=
name|dateTime
operator|.
name|minuteOfHour
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dateTime
operator|.
name|addMinutes
argument_list|(
name|sign
operator|*
name|num
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'s'
case|:
if|if
condition|(
name|round
condition|)
block|{
name|propertyToRound
operator|=
name|dateTime
operator|.
name|secondOfMinute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dateTime
operator|.
name|addSeconds
argument_list|(
name|sign
operator|*
name|num
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"unit ["
operator|+
name|unit
operator|+
literal|"] not supported for date math ["
operator|+
name|mathString
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|propertyToRound
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|roundUp
condition|)
block|{
comment|// we want to go up to the next whole value, even if we are already on a rounded value
name|propertyToRound
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|propertyToRound
operator|.
name|roundFloor
argument_list|()
expr_stmt|;
name|dateTime
operator|.
name|addMillis
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// subtract 1 millisecond to get the largest inclusive value
block|}
else|else
block|{
name|propertyToRound
operator|.
name|roundFloor
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|dateTime
operator|.
name|getMillis
argument_list|()
return|;
block|}
DECL|method|parseDateTime
specifier|private
name|long
name|parseDateTime
parameter_list|(
name|String
name|value
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
comment|// first check for timestamp
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|4
operator|&&
name|StringUtils
operator|.
name|isNumeric
argument_list|(
name|value
argument_list|)
condition|)
block|{
try|try
block|{
name|long
name|time
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|time
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse date field ["
operator|+
name|value
operator|+
literal|"] as timestamp"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|DateTimeFormatter
name|parser
init|=
name|dateTimeFormatter
operator|.
name|parser
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|)
block|{
name|parser
operator|=
name|parser
operator|.
name|withZone
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|parser
operator|.
name|parseMillis
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse date field ["
operator|+
name|value
operator|+
literal|"] with format ["
operator|+
name|dateTimeFormatter
operator|.
name|format
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

