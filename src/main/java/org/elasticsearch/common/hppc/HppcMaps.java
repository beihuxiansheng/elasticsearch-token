begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.hppc
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hppc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectIntOpenHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectObjectOpenHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|HppcMaps
specifier|public
specifier|final
class|class
name|HppcMaps
block|{
DECL|method|HppcMaps
specifier|private
name|HppcMaps
parameter_list|()
block|{     }
comment|/**      * Returns a new map with the given initial capacity      */
DECL|method|newMap
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ObjectObjectOpenHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newMap
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
return|return
operator|new
name|ObjectObjectOpenHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|capacity
argument_list|)
return|;
block|}
comment|/**      * Returns a new map with a default initial capacity of      * {@value com.carrotsearch.hppc.HashContainerUtils#DEFAULT_CAPACITY}      */
DECL|method|newMap
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ObjectObjectOpenHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newMap
parameter_list|()
block|{
return|return
name|newMap
argument_list|(
literal|16
argument_list|)
return|;
block|}
comment|/**      * Returns a map like {@link #newMap()} that does not accept<code>null</code> keys      */
DECL|method|newNoNullKeysMap
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ObjectObjectOpenHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newNoNullKeysMap
parameter_list|()
block|{
return|return
name|ensureNoNullKeys
argument_list|(
literal|16
argument_list|)
return|;
block|}
comment|/**      * Returns a map like {@link #newMap(int)} that does not accept<code>null</code> keys      */
DECL|method|newNoNullKeysMap
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ObjectObjectOpenHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newNoNullKeysMap
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
return|return
name|ensureNoNullKeys
argument_list|(
name|capacity
argument_list|)
return|;
block|}
comment|/**      * Wraps the given map and prevent adding of<code>null</code> keys.      */
DECL|method|ensureNoNullKeys
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ObjectObjectOpenHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|ensureNoNullKeys
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
return|return
operator|new
name|ObjectObjectOpenHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|capacity
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Map key must not be null"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|class|Object
specifier|public
specifier|final
specifier|static
class|class
name|Object
block|{
DECL|class|Integer
specifier|public
specifier|final
specifier|static
class|class
name|Integer
block|{
DECL|method|ensureNoNullKeys
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ObjectIntOpenHashMap
argument_list|<
name|V
argument_list|>
name|ensureNoNullKeys
parameter_list|(
name|int
name|capacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
return|return
operator|new
name|ObjectIntOpenHashMap
argument_list|<
name|V
argument_list|>
argument_list|(
name|capacity
argument_list|,
name|loadFactor
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|put
parameter_list|(
name|V
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Map key must not be null"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

