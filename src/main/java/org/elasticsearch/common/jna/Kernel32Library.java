begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.jna
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|jna
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|Native
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|win32
operator|.
name|StdCallLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Library for Windows/Kernel32  */
end_comment

begin_class
DECL|class|Kernel32Library
specifier|public
class|class
name|Kernel32Library
block|{
DECL|field|logger
specifier|private
specifier|static
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Kernel32Library
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Callbacks must be kept around in order to be able to be called later,
comment|// when the Windows ConsoleCtrlHandler sends an event.
DECL|field|callbacks
specifier|private
name|List
argument_list|<
name|NativeHandlerCallback
argument_list|>
name|callbacks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Native library instance must be kept around for the same reason.
DECL|class|Holder
specifier|private
specifier|final
specifier|static
class|class
name|Holder
block|{
DECL|field|instance
specifier|private
specifier|final
specifier|static
name|Kernel32Library
name|instance
init|=
operator|new
name|Kernel32Library
argument_list|()
decl_stmt|;
block|}
DECL|method|Kernel32Library
specifier|private
name|Kernel32Library
parameter_list|()
block|{
try|try
block|{
name|Native
operator|.
name|register
argument_list|(
literal|"kernel32"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"windows/Kernel32 library loaded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"JNA not found. native methods and handlers will be disabled."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unable to link Windows/Kernel32 library. native methods and handlers will be disabled."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getInstance
specifier|public
specifier|static
name|Kernel32Library
name|getInstance
parameter_list|()
block|{
return|return
name|Holder
operator|.
name|instance
return|;
block|}
comment|/**      * Adds a Console Ctrl Handler.      *      * @param handler      * @return true if the handler is correctly set      * @throws java.lang.UnsatisfiedLinkError if the Kernel32 library is not loaded or if the native function is not found      * @throws java.lang.NoClassDefFoundError if the library for native calls is missing      */
DECL|method|addConsoleCtrlHandler
specifier|public
name|boolean
name|addConsoleCtrlHandler
parameter_list|(
name|ConsoleCtrlHandler
name|handler
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|NativeHandlerCallback
name|callback
init|=
operator|new
name|NativeHandlerCallback
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|result
operator|=
name|SetConsoleCtrlHandler
argument_list|(
name|callback
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|callbacks
operator|.
name|add
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getCallbacks
specifier|public
name|ImmutableList
argument_list|<
name|Object
argument_list|>
name|getCallbacks
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|callbacks
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Native call to the Kernel32 API to set a new Console Ctrl Handler.      *      * @param handler      * @param add      * @return true if the handler is correctly set      * @throws java.lang.UnsatisfiedLinkError if the Kernel32 library is not loaded or if the native function is not found      * @throws java.lang.NoClassDefFoundError if the library for native calls is missing      */
DECL|method|SetConsoleCtrlHandler
specifier|public
specifier|native
name|boolean
name|SetConsoleCtrlHandler
parameter_list|(
name|StdCallLibrary
operator|.
name|StdCallCallback
name|handler
parameter_list|,
name|boolean
name|add
parameter_list|)
function_decl|;
comment|/**      * Handles consoles event with WIN API      *<p/>      * See http://msdn.microsoft.com/en-us/library/windows/desktop/ms683242%28v=vs.85%29.aspx      */
DECL|class|NativeHandlerCallback
class|class
name|NativeHandlerCallback
implements|implements
name|StdCallLibrary
operator|.
name|StdCallCallback
block|{
DECL|field|handler
specifier|private
specifier|final
name|ConsoleCtrlHandler
name|handler
decl_stmt|;
DECL|method|NativeHandlerCallback
specifier|public
name|NativeHandlerCallback
parameter_list|(
name|ConsoleCtrlHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
DECL|method|callback
specifier|public
name|boolean
name|callback
parameter_list|(
name|long
name|dwCtrlType
parameter_list|)
block|{
name|int
name|event
init|=
operator|(
name|int
operator|)
name|dwCtrlType
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"console control handler receives event [{}@{}]"
argument_list|,
name|event
argument_list|,
name|dwCtrlType
argument_list|)
expr_stmt|;
block|}
return|return
name|handler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
DECL|interface|ConsoleCtrlHandler
specifier|public
interface|interface
name|ConsoleCtrlHandler
block|{
DECL|field|CTRL_CLOSE_EVENT
specifier|public
specifier|static
specifier|final
name|int
name|CTRL_CLOSE_EVENT
init|=
literal|2
decl_stmt|;
comment|/**          * Handles the Ctrl event.          *          * @param code the code corresponding to the Ctrl sent.          * @return true if the handler processed the event, false otherwise. If false, the next handler will be called.          */
DECL|method|handle
name|boolean
name|handle
parameter_list|(
name|int
name|code
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

