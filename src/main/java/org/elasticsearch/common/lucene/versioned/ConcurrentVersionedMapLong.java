begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.versioned
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|versioned
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMapLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadSafe
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link VersionedMap} based on {@link org.elasticsearch.common.util.concurrent.ConcurrentMapLong}.  *  *  */
end_comment

begin_class
annotation|@
name|ThreadSafe
DECL|class|ConcurrentVersionedMapLong
specifier|public
class|class
name|ConcurrentVersionedMapLong
implements|implements
name|VersionedMap
block|{
DECL|field|map
specifier|private
specifier|final
name|ConcurrentMapLong
argument_list|<
name|Integer
argument_list|>
name|map
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMapLong
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|beforeVersion
specifier|public
name|boolean
name|beforeVersion
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|versionToCheck
parameter_list|)
block|{
name|Integer
name|result
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
operator|||
name|versionToCheck
operator|<
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|putVersion
specifier|public
name|void
name|putVersion
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|version
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|putVersionIfAbsent
specifier|public
name|void
name|putVersionIfAbsent
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|version
parameter_list|)
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

