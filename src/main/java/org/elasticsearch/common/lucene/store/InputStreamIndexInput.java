begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|InputStreamIndexInput
specifier|public
class|class
name|InputStreamIndexInput
extends|extends
name|InputStream
block|{
DECL|field|indexInput
specifier|private
specifier|final
name|IndexInput
name|indexInput
decl_stmt|;
DECL|field|limit
specifier|private
specifier|final
name|long
name|limit
decl_stmt|;
DECL|field|actualSizeToRead
specifier|private
specifier|final
name|long
name|actualSizeToRead
decl_stmt|;
DECL|field|counter
specifier|private
name|long
name|counter
init|=
literal|0
decl_stmt|;
DECL|field|markPointer
specifier|private
name|long
name|markPointer
decl_stmt|;
DECL|field|markCounter
specifier|private
name|long
name|markCounter
decl_stmt|;
DECL|method|InputStreamIndexInput
specifier|public
name|InputStreamIndexInput
parameter_list|(
name|IndexInput
name|indexInput
parameter_list|,
name|long
name|limit
parameter_list|)
block|{
name|this
operator|.
name|indexInput
operator|=
name|indexInput
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
if|if
condition|(
operator|(
name|indexInput
operator|.
name|length
argument_list|()
operator|-
name|indexInput
operator|.
name|getFilePointer
argument_list|()
operator|)
operator|>
name|limit
condition|)
block|{
name|actualSizeToRead
operator|=
name|limit
expr_stmt|;
block|}
else|else
block|{
name|actualSizeToRead
operator|=
name|indexInput
operator|.
name|length
argument_list|()
operator|-
name|indexInput
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|actualSizeToRead
specifier|public
name|long
name|actualSizeToRead
parameter_list|()
block|{
return|return
name|actualSizeToRead
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|b
operator|.
name|length
operator|-
name|off
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|indexInput
operator|.
name|getFilePointer
argument_list|()
operator|>=
name|indexInput
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|indexInput
operator|.
name|getFilePointer
argument_list|()
operator|+
name|len
operator|>
name|indexInput
operator|.
name|length
argument_list|()
condition|)
block|{
name|len
operator|=
call|(
name|int
call|)
argument_list|(
name|indexInput
operator|.
name|length
argument_list|()
operator|-
name|indexInput
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|+
name|len
operator|>
name|limit
condition|)
block|{
name|len
operator|=
call|(
name|int
call|)
argument_list|(
name|limit
operator|-
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|indexInput
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|counter
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|counter
operator|++
operator|>=
name|limit
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
name|indexInput
operator|.
name|getFilePointer
argument_list|()
operator|<
name|indexInput
operator|.
name|length
argument_list|()
operator|)
condition|?
operator|(
name|indexInput
operator|.
name|readByte
argument_list|()
operator|&
literal|0xff
operator|)
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|markSupported
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|mark
specifier|public
specifier|synchronized
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{
name|markPointer
operator|=
name|indexInput
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|markCounter
operator|=
name|counter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|indexInput
operator|.
name|seek
argument_list|(
name|markPointer
argument_list|)
expr_stmt|;
name|counter
operator|=
name|markCounter
expr_stmt|;
block|}
block|}
end_class

end_unit

