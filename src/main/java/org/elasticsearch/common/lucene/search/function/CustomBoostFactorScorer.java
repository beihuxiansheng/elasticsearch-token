begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|CustomBoostFactorScorer
specifier|abstract
class|class
name|CustomBoostFactorScorer
extends|extends
name|Scorer
block|{
DECL|field|subQueryBoost
specifier|final
name|float
name|subQueryBoost
decl_stmt|;
DECL|field|scorer
specifier|final
name|Scorer
name|scorer
decl_stmt|;
DECL|field|maxBoost
specifier|final
name|float
name|maxBoost
decl_stmt|;
DECL|field|scoreCombiner
specifier|final
name|CombineFunction
name|scoreCombiner
decl_stmt|;
DECL|field|minScore
name|Float
name|minScore
decl_stmt|;
DECL|field|nextDoc
name|NextDoc
name|nextDoc
decl_stmt|;
DECL|method|CustomBoostFactorScorer
name|CustomBoostFactorScorer
parameter_list|(
name|Weight
name|w
parameter_list|,
name|Scorer
name|scorer
parameter_list|,
name|float
name|maxBoost
parameter_list|,
name|CombineFunction
name|scoreCombiner
parameter_list|,
name|Float
name|minScore
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|minScore
operator|==
literal|null
condition|)
block|{
name|nextDoc
operator|=
operator|new
name|AnyNextDoc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nextDoc
operator|=
operator|new
name|MinScoreNextDoc
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|subQueryBoost
operator|=
name|w
operator|.
name|getQuery
argument_list|()
operator|.
name|getBoost
argument_list|()
expr_stmt|;
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
name|this
operator|.
name|maxBoost
operator|=
name|maxBoost
expr_stmt|;
name|this
operator|.
name|scoreCombiner
operator|=
name|scoreCombiner
expr_stmt|;
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|scorer
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|nextDoc
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nextDoc
operator|.
name|nextDoc
argument_list|()
return|;
block|}
DECL|method|innerScore
specifier|public
specifier|abstract
name|float
name|innerScore
parameter_list|()
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nextDoc
operator|.
name|score
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|scorer
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|nextPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|startOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|endOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|getPayload
argument_list|()
return|;
block|}
DECL|interface|NextDoc
specifier|public
interface|interface
name|NextDoc
block|{
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|MinScoreNextDoc
specifier|public
class|class
name|MinScoreNextDoc
implements|implements
name|NextDoc
block|{
DECL|field|currentScore
name|float
name|currentScore
init|=
name|Float
operator|.
name|MAX_VALUE
operator|*
operator|-
literal|1.0f
decl_stmt|;
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|doc
decl_stmt|;
do|do
block|{
name|doc
operator|=
name|scorer
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|==
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|doc
return|;
block|}
name|currentScore
operator|=
name|innerScore
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|currentScore
operator|<
name|minScore
condition|)
do|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentScore
return|;
block|}
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|doc
init|=
name|scorer
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|doc
return|;
block|}
name|currentScore
operator|=
name|innerScore
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentScore
operator|<
name|minScore
condition|)
block|{
return|return
name|scorer
operator|.
name|nextDoc
argument_list|()
return|;
block|}
return|return
name|doc
return|;
block|}
block|}
DECL|class|AnyNextDoc
specifier|public
class|class
name|AnyNextDoc
implements|implements
name|NextDoc
block|{
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|innerScore
argument_list|()
return|;
block|}
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

