begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|ReaderContextAware
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ScoreFunction
specifier|public
specifier|abstract
class|class
name|ScoreFunction
implements|implements
name|ReaderContextAware
block|{
DECL|field|scoreCombiner
specifier|private
specifier|final
name|CombineFunction
name|scoreCombiner
decl_stmt|;
DECL|method|score
specifier|public
specifier|abstract
name|double
name|score
parameter_list|(
name|int
name|docId
parameter_list|,
name|float
name|subQueryScore
parameter_list|)
function_decl|;
DECL|method|explainScore
specifier|public
specifier|abstract
name|Explanation
name|explainScore
parameter_list|(
name|int
name|docId
parameter_list|,
name|Explanation
name|subQueryScore
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getDefaultScoreCombiner
specifier|public
name|CombineFunction
name|getDefaultScoreCombiner
parameter_list|()
block|{
return|return
name|scoreCombiner
return|;
block|}
DECL|method|ScoreFunction
specifier|protected
name|ScoreFunction
parameter_list|(
name|CombineFunction
name|scoreCombiner
parameter_list|)
block|{
name|this
operator|.
name|scoreCombiner
operator|=
name|scoreCombiner
expr_stmt|;
block|}
block|}
end_class

end_unit

