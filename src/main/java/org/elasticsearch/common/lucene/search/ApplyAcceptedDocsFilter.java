begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocIdSets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * The assumption is that the underlying filter might not apply the accepted docs, so this filter helps to wrap  * the actual filter and apply the actual accepted docs.  */
end_comment

begin_comment
comment|// TODO: we can try and be smart, and only apply if if a filter is cached (down the "chain") since that's the only place that acceptDocs are not applied in ES
end_comment

begin_class
DECL|class|ApplyAcceptedDocsFilter
specifier|public
class|class
name|ApplyAcceptedDocsFilter
extends|extends
name|Filter
block|{
DECL|field|filter
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
DECL|method|ApplyAcceptedDocsFilter
specifier|public
name|ApplyAcceptedDocsFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|DocIdSet
name|docIdSet
init|=
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|acceptDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|DocIdSets
operator|.
name|isEmpty
argument_list|(
name|docIdSet
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|acceptDocs
operator|==
literal|null
condition|)
block|{
return|return
name|docIdSet
return|;
block|}
if|if
condition|(
name|acceptDocs
operator|==
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
condition|)
block|{
comment|// optimized wrapper for not deleted cases
return|return
operator|new
name|NotDeletedDocIdSet
argument_list|(
name|docIdSet
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
comment|// we wrap this to make sure we can unwrap the inner docIDset in #unwrap
return|return
operator|new
name|WrappedDocIdSet
argument_list|(
name|BitsFilteredDocIdSet
operator|.
name|wrap
argument_list|(
name|docIdSet
argument_list|,
name|acceptDocs
argument_list|)
argument_list|,
name|docIdSet
argument_list|)
return|;
block|}
DECL|method|filter
specifier|public
name|Filter
name|filter
parameter_list|()
block|{
return|return
name|this
operator|.
name|filter
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|filter
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|unwrap
specifier|public
specifier|static
name|DocIdSet
name|unwrap
parameter_list|(
name|DocIdSet
name|docIdSet
parameter_list|)
block|{
if|if
condition|(
name|docIdSet
operator|instanceof
name|NotDeletedDocIdSet
condition|)
block|{
return|return
operator|(
operator|(
name|NotDeletedDocIdSet
operator|)
name|docIdSet
operator|)
operator|.
name|innerSet
return|;
block|}
elseif|else
if|if
condition|(
name|docIdSet
operator|instanceof
name|WrappedDocIdSet
condition|)
block|{
return|return
operator|(
operator|(
name|WrappedDocIdSet
operator|)
name|docIdSet
operator|)
operator|.
name|innerSet
return|;
block|}
return|return
name|docIdSet
return|;
block|}
DECL|class|NotDeletedDocIdSet
specifier|static
class|class
name|NotDeletedDocIdSet
extends|extends
name|DocIdSet
block|{
DECL|field|innerSet
specifier|private
specifier|final
name|DocIdSet
name|innerSet
decl_stmt|;
DECL|field|liveDocs
specifier|private
specifier|final
name|Bits
name|liveDocs
decl_stmt|;
DECL|method|NotDeletedDocIdSet
name|NotDeletedDocIdSet
parameter_list|(
name|DocIdSet
name|innerSet
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
block|{
name|this
operator|.
name|innerSet
operator|=
name|innerSet
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCacheable
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
name|innerSet
operator|.
name|isCacheable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|bits
specifier|public
name|Bits
name|bits
parameter_list|()
throws|throws
name|IOException
block|{
name|Bits
name|bits
init|=
name|innerSet
operator|.
name|bits
argument_list|()
decl_stmt|;
if|if
condition|(
name|bits
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|NotDeleteBits
argument_list|(
name|bits
argument_list|,
name|liveDocs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|DocIdSets
operator|.
name|isFastIterator
argument_list|(
name|innerSet
argument_list|)
operator|&&
name|liveDocs
operator|instanceof
name|FixedBitSet
condition|)
block|{
comment|// might as well iterate over the live docs..., since the iterator is not fast enough
comment|// but we can only do that if we have Bits..., in short, we reverse the order...
name|Bits
name|bits
init|=
name|innerSet
operator|.
name|bits
argument_list|()
decl_stmt|;
if|if
condition|(
name|bits
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|NotDeletedDocIdSetIterator
argument_list|(
operator|(
operator|(
name|FixedBitSet
operator|)
name|liveDocs
operator|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|bits
argument_list|)
return|;
block|}
block|}
name|DocIdSetIterator
name|iterator
init|=
name|innerSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|NotDeletedDocIdSetIterator
argument_list|(
name|iterator
argument_list|,
name|liveDocs
argument_list|)
return|;
block|}
block|}
DECL|class|NotDeleteBits
specifier|static
class|class
name|NotDeleteBits
implements|implements
name|Bits
block|{
DECL|field|bits
specifier|private
specifier|final
name|Bits
name|bits
decl_stmt|;
DECL|field|liveDocs
specifier|private
specifier|final
name|Bits
name|liveDocs
decl_stmt|;
DECL|method|NotDeleteBits
name|NotDeleteBits
parameter_list|(
name|Bits
name|bits
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
block|{
name|this
operator|.
name|bits
operator|=
name|bits
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|liveDocs
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|&&
name|bits
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|bits
operator|.
name|length
argument_list|()
return|;
block|}
block|}
DECL|class|NotDeletedDocIdSetIterator
specifier|static
class|class
name|NotDeletedDocIdSetIterator
extends|extends
name|FilteredDocIdSetIterator
block|{
DECL|field|match
specifier|private
specifier|final
name|Bits
name|match
decl_stmt|;
DECL|method|NotDeletedDocIdSetIterator
name|NotDeletedDocIdSetIterator
parameter_list|(
name|DocIdSetIterator
name|innerIter
parameter_list|,
name|Bits
name|match
parameter_list|)
block|{
name|super
argument_list|(
name|innerIter
argument_list|)
expr_stmt|;
name|this
operator|.
name|match
operator|=
name|match
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match
specifier|protected
name|boolean
name|match
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|match
operator|.
name|get
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|filter
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|filter
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ApplyAcceptedDocsFilter
name|other
init|=
operator|(
name|ApplyAcceptedDocsFilter
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|filter
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|filter
operator|.
name|equals
argument_list|(
name|other
operator|.
name|filter
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|class|WrappedDocIdSet
specifier|private
specifier|static
specifier|final
class|class
name|WrappedDocIdSet
extends|extends
name|DocIdSet
block|{
DECL|field|delegate
specifier|private
specifier|final
name|DocIdSet
name|delegate
decl_stmt|;
DECL|field|innerSet
specifier|private
specifier|final
name|DocIdSet
name|innerSet
decl_stmt|;
DECL|method|WrappedDocIdSet
specifier|private
name|WrappedDocIdSet
parameter_list|(
name|DocIdSet
name|delegate
parameter_list|,
name|DocIdSet
name|innerSet
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|innerSet
operator|=
name|innerSet
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|bits
specifier|public
name|Bits
name|bits
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|bits
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isCacheable
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isCacheable
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

