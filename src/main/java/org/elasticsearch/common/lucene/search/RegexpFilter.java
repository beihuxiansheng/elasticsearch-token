begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQueryWrapperFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A lazy regexp filter which only builds the automaton on the first call to {@link #getDocIdSet(AtomicReaderContext, Bits)}.  * It is not thread safe (so can't be applied on multiple segments concurrently)  */
end_comment

begin_class
DECL|class|RegexpFilter
specifier|public
class|class
name|RegexpFilter
extends|extends
name|Filter
block|{
DECL|field|term
specifier|private
specifier|final
name|Term
name|term
decl_stmt|;
DECL|field|flags
specifier|private
specifier|final
name|int
name|flags
decl_stmt|;
comment|// use delegation here to support efficient implementation of equals& hashcode for this
comment|// filter (as it will be used as the filter cache key)
DECL|field|filter
specifier|private
specifier|final
name|InternalFilter
name|filter
decl_stmt|;
DECL|method|RegexpFilter
specifier|public
name|RegexpFilter
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|this
argument_list|(
name|term
argument_list|,
name|RegExp
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|method|RegexpFilter
specifier|public
name|RegexpFilter
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|InternalFilter
argument_list|(
name|term
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
block|}
DECL|method|field
specifier|public
name|String
name|field
parameter_list|()
block|{
return|return
name|term
operator|.
name|field
argument_list|()
return|;
block|}
DECL|method|regexp
specifier|public
name|String
name|regexp
parameter_list|()
block|{
return|return
name|term
operator|.
name|text
argument_list|()
return|;
block|}
DECL|method|flags
specifier|public
name|int
name|flags
parameter_list|()
block|{
return|return
name|flags
return|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpFilter
name|that
init|=
operator|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpFilter
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|flags
operator|!=
name|that
operator|.
name|flags
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|term
operator|!=
literal|null
condition|?
operator|!
name|term
operator|.
name|equals
argument_list|(
name|that
operator|.
name|term
argument_list|)
else|:
name|that
operator|.
name|term
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|term
operator|!=
literal|null
condition|?
name|term
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|flags
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// todo should we also show the flags?
return|return
name|term
operator|.
name|field
argument_list|()
operator|+
literal|":"
operator|+
name|term
operator|.
name|text
argument_list|()
return|;
block|}
DECL|class|InternalFilter
specifier|static
class|class
name|InternalFilter
extends|extends
name|MultiTermQueryWrapperFilter
argument_list|<
name|RegexpQuery
argument_list|>
block|{
DECL|method|InternalFilter
specifier|public
name|InternalFilter
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|RegexpQuery
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|InternalFilter
specifier|public
name|InternalFilter
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|RegexpQuery
argument_list|(
name|term
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

