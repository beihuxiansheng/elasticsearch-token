begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A marker interface for {@link org.apache.lucene.search.Filter} denoting the filter  * as one that should not be cached, ever.  */
end_comment

begin_class
DECL|class|NoCacheFilter
specifier|public
specifier|abstract
class|class
name|NoCacheFilter
extends|extends
name|Filter
block|{
DECL|class|NoCacheFilterWrapper
specifier|private
specifier|static
specifier|final
class|class
name|NoCacheFilterWrapper
extends|extends
name|NoCacheFilter
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Filter
name|delegate
decl_stmt|;
DECL|method|NoCacheFilterWrapper
specifier|private
name|NoCacheFilterWrapper
parameter_list|(
name|Filter
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|NoCacheFilterWrapper
condition|)
block|{
return|return
name|delegate
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|NoCacheFilterWrapper
operator|)
name|obj
operator|)
operator|.
name|delegate
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"no_cache("
operator|+
name|delegate
operator|+
literal|")"
return|;
block|}
block|}
comment|/**      * Wraps a filter in a NoCacheFilter or returns it if it already is a NoCacheFilter.      */
DECL|method|wrap
specifier|public
specifier|static
name|Filter
name|wrap
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|instanceof
name|NoCacheFilter
condition|)
block|{
return|return
name|filter
return|;
block|}
return|return
operator|new
name|NoCacheFilterWrapper
argument_list|(
name|filter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

