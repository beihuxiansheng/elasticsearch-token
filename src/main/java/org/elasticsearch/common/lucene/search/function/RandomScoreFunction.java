begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_comment
comment|/**  * Pseudo randomly generate a score for each {@link #score}.  */
end_comment

begin_class
DECL|class|RandomScoreFunction
specifier|public
class|class
name|RandomScoreFunction
extends|extends
name|ScoreFunction
block|{
DECL|field|originalSeed
specifier|private
name|int
name|originalSeed
decl_stmt|;
DECL|field|saltedSeed
specifier|private
name|int
name|saltedSeed
decl_stmt|;
DECL|field|uidFieldData
specifier|private
specifier|final
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|uidFieldData
decl_stmt|;
comment|/**      * Default constructor. Only useful for constructing as a placeholder, but should not be used for actual scoring.      */
DECL|method|RandomScoreFunction
specifier|public
name|RandomScoreFunction
parameter_list|()
block|{
name|super
argument_list|(
name|CombineFunction
operator|.
name|MULT
argument_list|)
expr_stmt|;
name|uidFieldData
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Creates a RandomScoreFunction.      *      * @param seed A seed for randomness      * @param salt A value to salt the seed with, ideally unique to the running node/index      * @param uidFieldData The field data for _uid to use for generating consistent random values for the same id      */
DECL|method|RandomScoreFunction
specifier|public
name|RandomScoreFunction
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|salt
parameter_list|,
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|uidFieldData
parameter_list|)
block|{
name|super
argument_list|(
name|CombineFunction
operator|.
name|MULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|originalSeed
operator|=
name|seed
expr_stmt|;
name|this
operator|.
name|saltedSeed
operator|=
name|seed
operator|^
name|salt
expr_stmt|;
name|this
operator|.
name|uidFieldData
operator|=
name|uidFieldData
expr_stmt|;
if|if
condition|(
name|uidFieldData
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"uid missing"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getLeafScoreFunction
specifier|public
name|LeafScoreFunction
name|getLeafScoreFunction
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
block|{
name|AtomicFieldData
name|leafData
init|=
name|uidFieldData
operator|.
name|load
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|SortedBinaryDocValues
name|uidByteData
init|=
name|leafData
operator|.
name|getBytesValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|uidByteData
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"failed to get uid byte data"
argument_list|)
throw|;
return|return
operator|new
name|LeafScoreFunction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|score
parameter_list|(
name|int
name|docId
parameter_list|,
name|float
name|subQueryScore
parameter_list|)
block|{
name|uidByteData
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|int
name|hash
init|=
name|StringHelper
operator|.
name|murmurhash3_x86_32
argument_list|(
name|uidByteData
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|saltedSeed
argument_list|)
decl_stmt|;
return|return
operator|(
name|hash
operator|&
literal|0x00FFFFFF
operator|)
operator|/
call|(
name|float
call|)
argument_list|(
literal|1
operator|<<
literal|24
argument_list|)
return|;
comment|// only use the lower 24 bits to construct a float from 0.0-1.0
block|}
annotation|@
name|Override
specifier|public
name|Explanation
name|explainScore
parameter_list|(
name|int
name|docId
parameter_list|,
name|Explanation
name|subQueryScore
parameter_list|)
block|{
name|Explanation
name|exp
init|=
operator|new
name|Explanation
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setDescription
argument_list|(
literal|"random score function (seed: "
operator|+
name|originalSeed
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|exp
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

