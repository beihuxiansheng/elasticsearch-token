begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExplainableSearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ScriptScoreFunction
specifier|public
class|class
name|ScriptScoreFunction
extends|extends
name|ScoreFunction
block|{
DECL|field|sScript
specifier|private
specifier|final
name|String
name|sScript
decl_stmt|;
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|SearchScript
name|script
decl_stmt|;
DECL|method|ScriptScoreFunction
specifier|public
name|ScriptScoreFunction
parameter_list|(
name|String
name|sScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|SearchScript
name|script
parameter_list|)
block|{
name|super
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
expr_stmt|;
name|this
operator|.
name|sScript
operator|=
name|sScript
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|ctx
parameter_list|)
block|{
name|script
operator|.
name|setNextReader
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|double
name|score
parameter_list|(
name|int
name|docId
parameter_list|,
name|float
name|subQueryScore
parameter_list|)
block|{
name|script
operator|.
name|setNextDocId
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|script
operator|.
name|setNextScore
argument_list|(
name|subQueryScore
argument_list|)
expr_stmt|;
return|return
name|script
operator|.
name|runAsDouble
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|explainScore
specifier|public
name|Explanation
name|explainScore
parameter_list|(
name|int
name|docId
parameter_list|,
name|Explanation
name|subQueryExpl
parameter_list|)
block|{
name|Explanation
name|exp
decl_stmt|;
if|if
condition|(
name|script
operator|instanceof
name|ExplainableSearchScript
condition|)
block|{
name|script
operator|.
name|setNextDocId
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|script
operator|.
name|setNextScore
argument_list|(
name|subQueryExpl
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|exp
operator|=
operator|(
operator|(
name|ExplainableSearchScript
operator|)
name|script
operator|)
operator|.
name|explain
argument_list|(
name|subQueryExpl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
name|score
init|=
name|score
argument_list|(
name|docId
argument_list|,
name|subQueryExpl
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|exp
operator|=
operator|new
name|Explanation
argument_list|(
name|CombineFunction
operator|.
name|toFloat
argument_list|(
name|score
argument_list|)
argument_list|,
literal|"script score function: composed of:"
argument_list|)
expr_stmt|;
name|exp
operator|.
name|addDetail
argument_list|(
name|subQueryExpl
argument_list|)
expr_stmt|;
block|}
return|return
name|exp
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"script["
operator|+
name|sScript
operator|+
literal|"], params ["
operator|+
name|params
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

