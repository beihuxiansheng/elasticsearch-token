begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.lucene.spatial.prefix
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Custom {@link TokenStream} used to convert a list of {@link Node} representing  * a Shape, into indexable terms.  */
end_comment

begin_class
DECL|class|NodeTokenStream
specifier|public
specifier|final
class|class
name|NodeTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodes
specifier|private
name|List
argument_list|<
name|Node
argument_list|>
name|nodes
decl_stmt|;
DECL|field|iterator
specifier|private
name|Iterator
argument_list|<
name|Node
argument_list|>
name|iterator
decl_stmt|;
DECL|field|nextTokenStringNeedingLeaf
specifier|private
name|CharSequence
name|nextTokenStringNeedingLeaf
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextTokenStringNeedingLeaf
operator|!=
literal|null
condition|)
block|{
name|termAtt
operator|.
name|append
argument_list|(
name|nextTokenStringNeedingLeaf
argument_list|)
expr_stmt|;
name|termAtt
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|Node
operator|.
name|LEAF_BYTE
argument_list|)
expr_stmt|;
name|nextTokenStringNeedingLeaf
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|cell
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|CharSequence
name|token
init|=
name|cell
operator|.
name|getTokenString
argument_list|()
decl_stmt|;
name|termAtt
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
name|nextTokenStringNeedingLeaf
operator|=
name|token
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|iterator
operator|=
name|nodes
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|nextTokenStringNeedingLeaf
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Sets the Nodes that will be converted into their indexable form      *       * @param nodes Nodes to be converted      */
DECL|method|setNodes
specifier|public
name|void
name|setNodes
parameter_list|(
name|List
argument_list|<
name|Node
argument_list|>
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
block|}
block|}
end_class

end_unit

