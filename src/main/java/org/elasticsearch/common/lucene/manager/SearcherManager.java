begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.lucene.manager
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|manager
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Utility class to safely share {@link org.apache.lucene.search.IndexSearcher} instances across multiple  * threads, while periodically reopening. This class ensures each searcher is  * closed only once all threads have finished using it.  *<p/>  *<p/>  * Use {@link #acquire} to obtain the current searcher, and {@link #release} to  * release it, like this:  *<p/>  *<pre class="prettyprint">  * IndexSearcher s = manager.acquire();  * try {  * // Do searching, doc retrieval, etc. with s  * } finally {  * manager.release(s);  * }  * // Do not use s after this!  * s = null;  *</pre>  *<p/>  *<p/>  * In addition you should periodically call {@link #maybeRefresh}. While it's  * possible to call this just before running each query, this is discouraged  * since it penalizes the unlucky queries that do the reopen. It's better to use  * a separate background thread, that periodically calls maybeReopen. Finally,  * be sure to call {@link #close} once you are done.  *  * @lucene.experimental  * @see SearcherFactory  */
end_comment

begin_comment
comment|// LUCENE MONITOR: 3.6 Remove this once 3.6 is out and use it
end_comment

begin_class
DECL|class|SearcherManager
specifier|public
specifier|final
class|class
name|SearcherManager
extends|extends
name|ReferenceManager
argument_list|<
name|IndexSearcher
argument_list|>
block|{
DECL|field|searcherFactory
specifier|private
specifier|final
name|SearcherFactory
name|searcherFactory
decl_stmt|;
comment|/**      * Creates and returns a new SearcherManager from the given {@link org.apache.lucene.index.IndexWriter}.      *      * @param writer          the IndexWriter to open the IndexReader from.      * @param applyAllDeletes If<code>true</code>, all buffered deletes will      *                        be applied (made visible) in the {@link org.apache.lucene.search.IndexSearcher} / {@link org.apache.lucene.index.IndexReader}.      *                        If<code>false</code>, the deletes may or may not be applied, but remain buffered      *                        (in IndexWriter) so that they will be applied in the future.      *                        Applying deletes can be costly, so if your app can tolerate deleted documents      *                        being returned you might gain some performance by passing<code>false</code>.      *                        See {@link org.apache.lucene.index.IndexReader#openIfChanged(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexWriter, boolean)}.      * @param searcherFactory An optional {@link SearcherFactory}. Pass      *<code>null</code> if you don't require the searcher to be warmed      *                        before going live or other custom behavior.      * @throws java.io.IOException      */
DECL|method|SearcherManager
specifier|public
name|SearcherManager
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|boolean
name|applyAllDeletes
parameter_list|,
name|SearcherFactory
name|searcherFactory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|searcherFactory
operator|==
literal|null
condition|)
block|{
name|searcherFactory
operator|=
operator|new
name|SearcherFactory
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|searcherFactory
operator|=
name|searcherFactory
expr_stmt|;
name|current
operator|=
name|getSearcher
argument_list|(
name|searcherFactory
argument_list|,
name|IndexReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
name|applyAllDeletes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates and returns a new SearcherManager from the given {@link org.apache.lucene.store.Directory}.      *      * @param dir             the directory to open the DirectoryReader on.      * @param searcherFactory An optional {@link SearcherFactory}. Pass      *<code>null</code> if you don't require the searcher to be warmed      *                        before going live or other custom behavior.      * @throws java.io.IOException      */
DECL|method|SearcherManager
specifier|public
name|SearcherManager
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SearcherFactory
name|searcherFactory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|searcherFactory
operator|==
literal|null
condition|)
block|{
name|searcherFactory
operator|=
operator|new
name|SearcherFactory
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|searcherFactory
operator|=
name|searcherFactory
expr_stmt|;
name|current
operator|=
name|getSearcher
argument_list|(
name|searcherFactory
argument_list|,
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|decRef
specifier|protected
name|void
name|decRef
parameter_list|(
name|IndexSearcher
name|reference
parameter_list|)
throws|throws
name|IOException
block|{
name|reference
operator|.
name|getIndexReader
argument_list|()
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refreshIfNeeded
specifier|protected
name|IndexSearcher
name|refreshIfNeeded
parameter_list|(
name|IndexSearcher
name|referenceToRefresh
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexReader
name|newReader
init|=
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|referenceToRefresh
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newReader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|getSearcher
argument_list|(
name|searcherFactory
argument_list|,
name|newReader
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|tryIncRef
specifier|protected
name|boolean
name|tryIncRef
parameter_list|(
name|IndexSearcher
name|reference
parameter_list|)
block|{
return|return
name|reference
operator|.
name|getIndexReader
argument_list|()
operator|.
name|tryIncRef
argument_list|()
return|;
block|}
comment|/**      * @deprecated see {@link #maybeRefresh()}.      */
annotation|@
name|Deprecated
DECL|method|maybeReopen
specifier|public
name|boolean
name|maybeReopen
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|maybeRefresh
argument_list|()
return|;
block|}
comment|/**      * Returns<code>true</code> if no changes have occured since this searcher      * ie. reader was opened, otherwise<code>false</code>.      *      * @see org.apache.lucene.index.IndexReader#isCurrent()      */
DECL|method|isSearcherCurrent
specifier|public
name|boolean
name|isSearcherCurrent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|isCurrent
argument_list|()
return|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|// NOTE: decRefs incoming reader on throwing an exception
DECL|method|getSearcher
specifier|static
name|IndexSearcher
name|getSearcher
parameter_list|(
name|SearcherFactory
name|searcherFactory
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
try|try
block|{
name|searcher
operator|=
name|searcherFactory
operator|.
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|!=
name|reader
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"SearcherFactory must wrap exactly the provided reader (got "
operator|+
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|+
literal|" but expected "
operator|+
name|reader
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|searcher
return|;
block|}
block|}
end_class

end_unit

