begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.docset
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredDocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A {@link DocIdSet} that works on a "doc" level by checking if it matches or not.  */
end_comment

begin_class
DECL|class|MatchDocIdSet
specifier|public
specifier|abstract
class|class
name|MatchDocIdSet
extends|extends
name|DocIdSet
implements|implements
name|Bits
block|{
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|acceptDocs
specifier|private
specifier|final
name|Bits
name|acceptDocs
decl_stmt|;
DECL|field|iterator
specifier|private
name|DocIdSetIterator
name|iterator
decl_stmt|;
DECL|method|MatchDocIdSet
specifier|protected
name|MatchDocIdSet
parameter_list|(
name|int
name|maxDoc
parameter_list|,
annotation|@
name|Nullable
name|Bits
name|acceptDocs
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|acceptDocs
operator|=
name|acceptDocs
expr_stmt|;
block|}
comment|/**      * Does this document match?      */
DECL|method|matchDoc
specifier|protected
specifier|abstract
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|acceptDocs
operator|==
literal|null
condition|)
block|{
return|return
name|iterator
operator|=
operator|new
name|NoAcceptDocsIterator
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|acceptDocs
operator|instanceof
name|FixedBitSet
condition|)
block|{
return|return
name|iterator
operator|=
operator|new
name|FixedBitSetIterator
argument_list|(
operator|(
operator|(
name|DocIdSet
operator|)
name|acceptDocs
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|iterator
operator|=
operator|new
name|BothIterator
argument_list|(
name|maxDoc
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|bits
specifier|public
name|Bits
name|bits
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|matchDoc
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
comment|/**      * Short circuiting the doc id set, by advancing to beyond the last doc id.      */
DECL|method|shortCircuit
specifier|public
name|void
name|shortCircuit
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|iterator
operator|instanceof
name|NoAcceptDocsIterator
condition|)
block|{
operator|(
operator|(
name|NoAcceptDocsIterator
operator|)
name|iterator
operator|)
operator|.
name|shortCircuit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|iterator
operator|instanceof
name|BothIterator
condition|)
block|{
operator|(
operator|(
name|BothIterator
operator|)
name|iterator
operator|)
operator|.
name|shortCircuit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iterator
operator|.
name|advance
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|NoAcceptDocsIterator
class|class
name|NoAcceptDocsIterator
extends|extends
name|DocIdSetIterator
block|{
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|doc
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|NoAcceptDocsIterator
name|NoAcceptDocsIterator
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
do|do
block|{
name|doc
operator|++
expr_stmt|;
if|if
condition|(
name|doc
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
do|while
condition|(
operator|!
name|matchDoc
argument_list|(
name|doc
argument_list|)
condition|)
do|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
for|for
control|(
name|doc
operator|=
name|target
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
if|if
condition|(
name|matchDoc
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
name|doc
return|;
block|}
block|}
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
comment|// This is invoked from matchDoc, so we can do maxDoc - 1, when nextDoc / advance is invoked, then doc == maxDoc, so we abort
DECL|method|shortCircuit
specifier|public
name|void
name|shortCircuit
parameter_list|()
block|{
name|doc
operator|=
name|maxDoc
operator|-
literal|1
expr_stmt|;
block|}
block|}
DECL|class|FixedBitSetIterator
class|class
name|FixedBitSetIterator
extends|extends
name|FilteredDocIdSetIterator
block|{
DECL|method|FixedBitSetIterator
name|FixedBitSetIterator
parameter_list|(
name|DocIdSetIterator
name|innerIter
parameter_list|)
block|{
name|super
argument_list|(
name|innerIter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match
specifier|protected
name|boolean
name|match
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|matchDoc
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
DECL|class|BothIterator
class|class
name|BothIterator
extends|extends
name|DocIdSetIterator
block|{
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|acceptDocs
specifier|private
specifier|final
name|Bits
name|acceptDocs
decl_stmt|;
DECL|field|doc
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|BothIterator
name|BothIterator
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|acceptDocs
operator|=
name|acceptDocs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
do|do
block|{
name|doc
operator|++
expr_stmt|;
if|if
condition|(
name|doc
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
do|while
condition|(
operator|!
operator|(
name|matchDoc
argument_list|(
name|doc
argument_list|)
operator|&&
name|acceptDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|)
condition|)
do|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
for|for
control|(
name|doc
operator|=
name|target
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
if|if
condition|(
name|matchDoc
argument_list|(
name|doc
argument_list|)
operator|&&
name|acceptDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
name|doc
return|;
block|}
block|}
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
comment|// This is invoked from matchDoc, so we can do maxDoc - 1, when nextDoc / advance is invoked, then doc == maxDoc, so we abort
DECL|method|shortCircuit
specifier|public
name|void
name|shortCircuit
parameter_list|()
block|{
name|doc
operator|=
name|maxDoc
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

