begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.docset
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|OrDocIdSet
specifier|public
class|class
name|OrDocIdSet
extends|extends
name|DocIdSet
block|{
DECL|field|sets
specifier|private
specifier|final
name|DocIdSet
index|[]
name|sets
decl_stmt|;
DECL|method|OrDocIdSet
specifier|public
name|OrDocIdSet
parameter_list|(
name|DocIdSet
index|[]
name|sets
parameter_list|)
block|{
name|this
operator|.
name|sets
operator|=
name|sets
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCacheable
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
for|for
control|(
name|DocIdSet
name|set
range|:
name|sets
control|)
block|{
if|if
condition|(
operator|!
name|set
operator|.
name|isCacheable
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|bits
specifier|public
name|Bits
name|bits
parameter_list|()
throws|throws
name|IOException
block|{
name|Bits
index|[]
name|bits
init|=
operator|new
name|Bits
index|[
name|sets
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bits
index|[
name|i
index|]
operator|=
name|sets
index|[
name|i
index|]
operator|.
name|bits
argument_list|()
expr_stmt|;
if|if
condition|(
name|bits
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
operator|new
name|OrBits
argument_list|(
name|bits
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|IteratorBasedIterator
argument_list|(
name|sets
argument_list|)
return|;
block|}
DECL|class|OrBits
specifier|static
class|class
name|OrBits
implements|implements
name|Bits
block|{
DECL|field|bits
specifier|private
specifier|final
name|Bits
index|[]
name|bits
decl_stmt|;
DECL|method|OrBits
name|OrBits
parameter_list|(
name|Bits
index|[]
name|bits
parameter_list|)
block|{
name|this
operator|.
name|bits
operator|=
name|bits
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
for|for
control|(
name|Bits
name|bit
range|:
name|bits
control|)
block|{
if|if
condition|(
name|bit
operator|.
name|get
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|bits
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
return|;
block|}
block|}
DECL|class|IteratorBasedIterator
specifier|static
class|class
name|IteratorBasedIterator
extends|extends
name|DocIdSetIterator
block|{
DECL|class|Item
specifier|final
class|class
name|Item
block|{
DECL|field|iter
specifier|public
specifier|final
name|DocIdSetIterator
name|iter
decl_stmt|;
DECL|field|doc
specifier|public
name|int
name|doc
decl_stmt|;
DECL|method|Item
specifier|public
name|Item
parameter_list|(
name|DocIdSetIterator
name|iter
parameter_list|)
block|{
name|this
operator|.
name|iter
operator|=
name|iter
expr_stmt|;
name|this
operator|.
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
DECL|field|_curDoc
specifier|private
name|int
name|_curDoc
decl_stmt|;
DECL|field|_heap
specifier|private
specifier|final
name|Item
index|[]
name|_heap
decl_stmt|;
DECL|field|_size
specifier|private
name|int
name|_size
decl_stmt|;
DECL|field|cost
specifier|private
specifier|final
name|long
name|cost
decl_stmt|;
DECL|method|IteratorBasedIterator
name|IteratorBasedIterator
parameter_list|(
name|DocIdSet
index|[]
name|sets
parameter_list|)
throws|throws
name|IOException
block|{
name|_curDoc
operator|=
operator|-
literal|1
expr_stmt|;
name|_heap
operator|=
operator|new
name|Item
index|[
name|sets
operator|.
name|length
index|]
expr_stmt|;
name|_size
operator|=
literal|0
expr_stmt|;
name|long
name|cost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DocIdSet
name|set
range|:
name|sets
control|)
block|{
name|DocIdSetIterator
name|iterator
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|!=
literal|null
condition|)
block|{
name|_heap
index|[
name|_size
operator|++
index|]
operator|=
operator|new
name|Item
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|cost
operator|+=
name|iterator
operator|.
name|cost
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
if|if
condition|(
name|_size
operator|==
literal|0
condition|)
name|_curDoc
operator|=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
specifier|final
name|int
name|docID
parameter_list|()
block|{
return|return
name|_curDoc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
specifier|final
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|_curDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
name|Item
name|top
init|=
name|_heap
index|[
literal|0
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|DocIdSetIterator
name|topIter
init|=
name|top
operator|.
name|iter
decl_stmt|;
name|int
name|docid
decl_stmt|;
if|if
condition|(
operator|(
name|docid
operator|=
name|topIter
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|top
operator|.
name|doc
operator|=
name|docid
expr_stmt|;
name|heapAdjust
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|heapRemoveRoot
argument_list|()
expr_stmt|;
if|if
condition|(
name|_size
operator|==
literal|0
condition|)
return|return
operator|(
name|_curDoc
operator|=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|)
return|;
block|}
name|top
operator|=
name|_heap
index|[
literal|0
index|]
expr_stmt|;
name|int
name|topDoc
init|=
name|top
operator|.
name|doc
decl_stmt|;
if|if
condition|(
name|topDoc
operator|>
name|_curDoc
condition|)
block|{
return|return
operator|(
name|_curDoc
operator|=
name|topDoc
operator|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
specifier|final
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|_curDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
if|if
condition|(
name|target
operator|<=
name|_curDoc
condition|)
name|target
operator|=
name|_curDoc
operator|+
literal|1
expr_stmt|;
name|Item
name|top
init|=
name|_heap
index|[
literal|0
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|DocIdSetIterator
name|topIter
init|=
name|top
operator|.
name|iter
decl_stmt|;
name|int
name|docid
decl_stmt|;
if|if
condition|(
operator|(
name|docid
operator|=
name|topIter
operator|.
name|advance
argument_list|(
name|target
argument_list|)
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|top
operator|.
name|doc
operator|=
name|docid
expr_stmt|;
name|heapAdjust
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|heapRemoveRoot
argument_list|()
expr_stmt|;
if|if
condition|(
name|_size
operator|==
literal|0
condition|)
return|return
operator|(
name|_curDoc
operator|=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|)
return|;
block|}
name|top
operator|=
name|_heap
index|[
literal|0
index|]
expr_stmt|;
name|int
name|topDoc
init|=
name|top
operator|.
name|doc
decl_stmt|;
if|if
condition|(
name|topDoc
operator|>=
name|target
condition|)
block|{
return|return
operator|(
name|_curDoc
operator|=
name|topDoc
operator|)
return|;
block|}
block|}
block|}
comment|// Organize subScorers into a min heap with scorers generating the earlest document on top.
comment|/*         private final void heapify() {             int size = _size;             for (int i=(size>>1)-1; i>=0; i--)                 heapAdjust(i);         }         */
comment|/* The subtree of subScorers at root is a min heap except possibly for its root element.         * Bubble the root down as required to make the subtree a heap.         */
DECL|method|heapAdjust
specifier|private
specifier|final
name|void
name|heapAdjust
parameter_list|()
block|{
specifier|final
name|Item
index|[]
name|heap
init|=
name|_heap
decl_stmt|;
specifier|final
name|Item
name|top
init|=
name|heap
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|doc
init|=
name|top
operator|.
name|doc
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|_size
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|lchild
init|=
operator|(
name|i
operator|<<
literal|1
operator|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|lchild
operator|>=
name|size
condition|)
break|break;
name|Item
name|left
init|=
name|heap
index|[
name|lchild
index|]
decl_stmt|;
name|int
name|ldoc
init|=
name|left
operator|.
name|doc
decl_stmt|;
name|int
name|rchild
init|=
name|lchild
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|rchild
operator|<
name|size
condition|)
block|{
name|Item
name|right
init|=
name|heap
index|[
name|rchild
index|]
decl_stmt|;
name|int
name|rdoc
init|=
name|right
operator|.
name|doc
decl_stmt|;
if|if
condition|(
name|rdoc
operator|<=
name|ldoc
condition|)
block|{
if|if
condition|(
name|doc
operator|<=
name|rdoc
condition|)
break|break;
name|heap
index|[
name|i
index|]
operator|=
name|right
expr_stmt|;
name|i
operator|=
name|rchild
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|doc
operator|<=
name|ldoc
condition|)
break|break;
name|heap
index|[
name|i
index|]
operator|=
name|left
expr_stmt|;
name|i
operator|=
name|lchild
expr_stmt|;
block|}
name|heap
index|[
name|i
index|]
operator|=
name|top
expr_stmt|;
block|}
comment|// Remove the root Scorer from subScorers and re-establish it as a heap
DECL|method|heapRemoveRoot
specifier|private
name|void
name|heapRemoveRoot
parameter_list|()
block|{
name|_size
operator|--
expr_stmt|;
if|if
condition|(
name|_size
operator|>
literal|0
condition|)
block|{
name|Item
name|tmp
init|=
name|_heap
index|[
literal|0
index|]
decl_stmt|;
name|_heap
index|[
literal|0
index|]
operator|=
name|_heap
index|[
name|_size
index|]
expr_stmt|;
name|_heap
index|[
name|_size
index|]
operator|=
name|tmp
expr_stmt|;
comment|// keep the finished iterator at the end for debugging
name|heapAdjust
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|cost
return|;
block|}
block|}
block|}
end_class

end_unit

