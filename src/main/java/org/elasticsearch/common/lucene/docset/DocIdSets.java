begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.docset
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TwoPhaseIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|DocIdSets
specifier|public
class|class
name|DocIdSets
block|{
comment|/**      * Is it an empty {@link DocIdSet}?      */
DECL|method|isEmpty
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
annotation|@
name|Nullable
name|DocIdSet
name|set
parameter_list|)
block|{
return|return
name|set
operator|==
literal|null
operator|||
name|set
operator|==
name|DocIdSet
operator|.
name|EMPTY
return|;
block|}
comment|/**      * Given a {@link Scorer}, return a {@link Bits} instance that will match      * all documents contained in the set. Note that the returned {@link Bits}      * instance MUST be consumed in order.      */
DECL|method|asSequentialAccessBits
specifier|public
specifier|static
name|Bits
name|asSequentialAccessBits
parameter_list|(
specifier|final
name|int
name|maxDoc
parameter_list|,
annotation|@
name|Nullable
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scorer
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
specifier|final
name|TwoPhaseIterator
name|twoPhase
init|=
name|scorer
operator|.
name|asTwoPhaseIterator
argument_list|()
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|iterator
decl_stmt|;
if|if
condition|(
name|twoPhase
operator|==
literal|null
condition|)
block|{
name|iterator
operator|=
name|scorer
expr_stmt|;
block|}
else|else
block|{
name|iterator
operator|=
name|twoPhase
operator|.
name|approximation
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Bits
argument_list|()
block|{
name|int
name|previous
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|previousMatched
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|index
operator|+
literal|" is out of bounds: ["
operator|+
literal|0
operator|+
literal|"-"
operator|+
name|maxDoc
operator|+
literal|"["
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|<
name|previous
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This Bits instance can only be consumed in order. "
operator|+
literal|"Got called on ["
operator|+
name|index
operator|+
literal|"] while previously called on ["
operator|+
name|previous
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|==
name|previous
condition|)
block|{
comment|// we cache whether it matched because it is illegal to call
comment|// twoPhase.matches() twice
return|return
name|previousMatched
return|;
block|}
name|previous
operator|=
name|index
expr_stmt|;
name|int
name|doc
init|=
name|iterator
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|<
name|index
condition|)
block|{
try|try
block|{
name|doc
operator|=
name|iterator
operator|.
name|advance
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot advance iterator"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|index
operator|==
name|doc
condition|)
block|{
try|try
block|{
return|return
name|previousMatched
operator|=
name|twoPhase
operator|==
literal|null
operator|||
name|twoPhase
operator|.
name|matches
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot validate match"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|previousMatched
operator|=
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

