begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.docset
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BitsFilteredDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RoaringDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SparseFixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|DocIdSets
specifier|public
class|class
name|DocIdSets
block|{
comment|/**      * Return the size of the doc id set, plus a reference to it.      */
DECL|method|sizeInBytes
specifier|public
specifier|static
name|long
name|sizeInBytes
parameter_list|(
name|DocIdSet
name|docIdSet
parameter_list|)
block|{
return|return
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|+
name|docIdSet
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
comment|/**      * Is it an empty {@link DocIdSet}?      */
DECL|method|isEmpty
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
annotation|@
name|Nullable
name|DocIdSet
name|set
parameter_list|)
block|{
return|return
name|set
operator|==
literal|null
operator|||
name|set
operator|==
name|DocIdSet
operator|.
name|EMPTY
return|;
block|}
comment|/**      * Is {@link org.apache.lucene.search.DocIdSetIterator} implemented in a "fast" manner.      * For example, it does not ends up iterating one doc at a time check for its "value".      */
DECL|method|isFastIterator
specifier|public
specifier|static
name|boolean
name|isFastIterator
parameter_list|(
name|DocIdSet
name|set
parameter_list|)
block|{
comment|// TODO: this is really horrible
while|while
condition|(
name|set
operator|instanceof
name|BitsFilteredDocIdSet
condition|)
block|{
name|set
operator|=
operator|(
operator|(
name|BitsFilteredDocIdSet
operator|)
name|set
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
return|return
name|set
operator|instanceof
name|BitDocIdSet
operator|||
name|set
operator|instanceof
name|RoaringDocIdSet
return|;
block|}
comment|/**      * Converts to a cacheable {@link DocIdSet}      *<p/>      * This never returns<code>null</code>.      */
DECL|method|toCacheable
specifier|public
specifier|static
name|DocIdSet
name|toCacheable
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
annotation|@
name|Nullable
name|DocIdSet
name|set
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|set
operator|==
literal|null
operator|||
name|set
operator|==
name|DocIdSet
operator|.
name|EMPTY
condition|)
block|{
return|return
name|DocIdSet
operator|.
name|EMPTY
return|;
block|}
specifier|final
name|DocIdSetIterator
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
return|return
name|DocIdSet
operator|.
name|EMPTY
return|;
block|}
specifier|final
name|int
name|firstDoc
init|=
name|it
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|DocIdSet
operator|.
name|EMPTY
return|;
block|}
if|if
condition|(
name|set
operator|instanceof
name|BitDocIdSet
condition|)
block|{
return|return
name|set
return|;
block|}
specifier|final
name|RoaringDocIdSet
operator|.
name|Builder
name|builder
init|=
operator|new
name|RoaringDocIdSet
operator|.
name|Builder
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|firstDoc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|it
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Gets a set to bits.      */
DECL|method|toSafeBits
specifier|public
specifier|static
name|Bits
name|toSafeBits
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
annotation|@
name|Nullable
name|DocIdSet
name|set
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
name|Bits
name|bits
init|=
name|set
operator|.
name|bits
argument_list|()
decl_stmt|;
if|if
condition|(
name|bits
operator|!=
literal|null
condition|)
block|{
return|return
name|bits
return|;
block|}
name|DocIdSetIterator
name|iterator
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
return|return
name|toBitSet
argument_list|(
name|iterator
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a {@link BitSet} from an iterator.      */
DECL|method|toBitSet
specifier|public
specifier|static
name|BitSet
name|toBitSet
parameter_list|(
name|DocIdSetIterator
name|iterator
parameter_list|,
name|int
name|numBits
parameter_list|)
throws|throws
name|IOException
block|{
name|BitDocIdSet
operator|.
name|Builder
name|builder
init|=
operator|new
name|BitDocIdSet
operator|.
name|Builder
argument_list|(
name|numBits
argument_list|)
decl_stmt|;
name|builder
operator|.
name|or
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|BitDocIdSet
name|result
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
operator|.
name|bits
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|SparseFixedBitSet
argument_list|(
name|numBits
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

