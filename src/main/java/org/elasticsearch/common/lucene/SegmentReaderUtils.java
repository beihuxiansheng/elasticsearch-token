begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterAtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_class
DECL|class|SegmentReaderUtils
specifier|public
class|class
name|SegmentReaderUtils
block|{
comment|/**      * Tries to extract a segment reader from the given index reader.      * If no SegmentReader can be extracted an {@link org.elasticsearch.ElasticsearchIllegalStateException} is thrown.      */
annotation|@
name|Nullable
DECL|method|segmentReader
specifier|public
specifier|static
name|SegmentReader
name|segmentReader
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
block|{
return|return
name|internalSegmentReader
argument_list|(
name|reader
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Tries to extract a segment reader from the given index reader and returns it, otherwise<code>null</code>      * is returned      */
annotation|@
name|Nullable
DECL|method|segmentReaderOrNull
specifier|public
specifier|static
name|SegmentReader
name|segmentReaderOrNull
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
block|{
return|return
name|internalSegmentReader
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|registerCoreListener
specifier|public
specifier|static
name|boolean
name|registerCoreListener
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|SegmentReader
operator|.
name|CoreClosedListener
name|listener
parameter_list|)
block|{
name|reader
operator|.
name|addCoreClosedListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|internalSegmentReader
specifier|private
specifier|static
name|SegmentReader
name|internalSegmentReader
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|reader
operator|instanceof
name|SegmentReader
condition|)
block|{
return|return
operator|(
name|SegmentReader
operator|)
name|reader
return|;
block|}
elseif|else
if|if
condition|(
name|reader
operator|instanceof
name|FilterAtomicReader
condition|)
block|{
specifier|final
name|FilterAtomicReader
name|fReader
init|=
operator|(
name|FilterAtomicReader
operator|)
name|reader
decl_stmt|;
return|return
name|segmentReader
argument_list|(
name|FilterAtomicReader
operator|.
name|unwrap
argument_list|(
name|fReader
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|fail
condition|)
block|{
comment|// hard fail - we can't get a SegmentReader
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Can not extract segment reader from given index reader ["
operator|+
name|reader
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

