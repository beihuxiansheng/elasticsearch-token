begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  * A wrapped to {@link BytesRef} that also caches the hashCode for it.  */
end_comment

begin_class
DECL|class|HashedBytesRef
specifier|public
class|class
name|HashedBytesRef
block|{
DECL|field|bytes
specifier|public
name|BytesRef
name|bytes
decl_stmt|;
DECL|field|hash
specifier|public
name|int
name|hash
decl_stmt|;
DECL|method|HashedBytesRef
specifier|public
name|HashedBytesRef
parameter_list|()
block|{     }
DECL|method|HashedBytesRef
specifier|public
name|HashedBytesRef
parameter_list|(
name|String
name|bytes
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|HashedBytesRef
specifier|public
name|HashedBytesRef
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
name|this
argument_list|(
name|bytes
argument_list|,
name|bytes
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|HashedBytesRef
specifier|public
name|HashedBytesRef
parameter_list|(
name|BytesRef
name|bytes
parameter_list|,
name|int
name|hash
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
DECL|method|resetHashCode
specifier|public
name|HashedBytesRef
name|resetHashCode
parameter_list|()
block|{
name|this
operator|.
name|hash
operator|=
name|bytes
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|reset
specifier|public
name|HashedBytesRef
name|reset
parameter_list|(
name|BytesRef
name|bytes
parameter_list|,
name|int
name|hash
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|HashedBytesRef
condition|)
block|{
return|return
name|bytes
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|HashedBytesRef
operator|)
name|other
operator|)
operator|.
name|bytes
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|bytes
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|deepCopy
specifier|public
name|HashedBytesRef
name|deepCopy
parameter_list|()
block|{
return|return
name|deepCopyOf
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|deepCopyOf
specifier|public
specifier|static
name|HashedBytesRef
name|deepCopyOf
parameter_list|(
name|HashedBytesRef
name|other
parameter_list|)
block|{
name|BytesRef
name|copy
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|copy
operator|.
name|copyBytes
argument_list|(
name|other
operator|.
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|HashedBytesRef
argument_list|(
name|copy
argument_list|,
name|other
operator|.
name|hash
argument_list|)
return|;
block|}
block|}
end_class

end_unit

