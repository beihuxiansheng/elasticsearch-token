begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cache.memory
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
operator|.
name|ByteBufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
operator|.
name|CachingByteBufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
operator|.
name|PlainByteBufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ByteBufferCache
specifier|public
class|class
name|ByteBufferCache
extends|extends
name|AbstractComponent
implements|implements
name|ByteBufferAllocator
block|{
DECL|field|direct
specifier|private
specifier|final
name|boolean
name|direct
decl_stmt|;
DECL|field|smallBufferSize
specifier|private
specifier|final
name|ByteSizeValue
name|smallBufferSize
decl_stmt|;
DECL|field|largeBufferSize
specifier|private
specifier|final
name|ByteSizeValue
name|largeBufferSize
decl_stmt|;
DECL|field|smallCacheSize
specifier|private
specifier|final
name|ByteSizeValue
name|smallCacheSize
decl_stmt|;
DECL|field|largeCacheSize
specifier|private
specifier|final
name|ByteSizeValue
name|largeCacheSize
decl_stmt|;
DECL|field|allocator
specifier|private
specifier|final
name|ByteBufferAllocator
name|allocator
decl_stmt|;
DECL|method|ByteBufferCache
specifier|public
name|ByteBufferCache
parameter_list|()
block|{
name|this
argument_list|(
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
block|}
comment|// really, for testing...
DECL|method|ByteBufferCache
specifier|public
name|ByteBufferCache
parameter_list|(
name|int
name|bufferSizeInBytes
parameter_list|,
name|int
name|cacheSizeInBytes
parameter_list|,
name|boolean
name|direct
parameter_list|)
block|{
name|this
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cache.memory.small_buffer_size"
argument_list|,
name|bufferSizeInBytes
argument_list|)
operator|.
name|put
argument_list|(
literal|"cache.memory.small_cache_size"
argument_list|,
name|cacheSizeInBytes
argument_list|)
operator|.
name|put
argument_list|(
literal|"cache.memory.large_buffer_size"
argument_list|,
name|bufferSizeInBytes
argument_list|)
operator|.
name|put
argument_list|(
literal|"cache.memory.large_cache_size"
argument_list|,
name|cacheSizeInBytes
argument_list|)
operator|.
name|put
argument_list|(
literal|"cache.memory.direct"
argument_list|,
name|direct
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|ByteBufferCache
specifier|public
name|ByteBufferCache
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|direct
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"direct"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|smallBufferSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"small_buffer_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|KB
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|largeBufferSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"large_buffer_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|smallCacheSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"small_cache_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|10
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|largeCacheSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"large_cache_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|500
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|smallCacheSize
operator|.
name|bytes
argument_list|()
operator|==
literal|0
operator|||
name|largeCacheSize
operator|.
name|bytes
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|allocator
operator|=
operator|new
name|PlainByteBufferAllocator
argument_list|(
name|direct
argument_list|,
operator|(
name|int
operator|)
name|smallBufferSize
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|largeBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|allocator
operator|=
operator|new
name|CachingByteBufferAllocator
argument_list|(
name|direct
argument_list|,
operator|(
name|int
operator|)
name|smallBufferSize
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|largeBufferSize
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|smallCacheSize
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|largeCacheSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"using bytebuffer cache with small_buffer_size [{}], large_buffer_size [{}], small_cache_size [{}], large_cache_size [{}], direct [{}]"
argument_list|,
name|smallBufferSize
argument_list|,
name|largeBufferSize
argument_list|,
name|smallCacheSize
argument_list|,
name|largeCacheSize
argument_list|,
name|direct
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|direct
specifier|public
name|boolean
name|direct
parameter_list|()
block|{
return|return
name|this
operator|.
name|direct
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|allocator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sizeInBytes
specifier|public
name|int
name|sizeInBytes
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|allocator
operator|.
name|sizeInBytes
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|allocate
specifier|public
name|ByteBuffer
name|allocate
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|allocator
operator|.
name|allocate
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|void
name|release
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|allocator
operator|.
name|release
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

