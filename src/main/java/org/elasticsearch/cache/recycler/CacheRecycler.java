begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cache.recycler
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|CacheRecycler
specifier|public
class|class
name|CacheRecycler
extends|extends
name|AbstractComponent
block|{
DECL|field|hashMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|ObjectObjectOpenHashMap
argument_list|>
name|hashMap
decl_stmt|;
DECL|field|hashSet
specifier|public
specifier|final
name|Recycler
argument_list|<
name|ObjectOpenHashSet
argument_list|>
name|hashSet
decl_stmt|;
DECL|field|doubleObjectMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|DoubleObjectOpenHashMap
argument_list|>
name|doubleObjectMap
decl_stmt|;
DECL|field|longObjectMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|LongObjectOpenHashMap
argument_list|>
name|longObjectMap
decl_stmt|;
DECL|field|longLongMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|LongLongOpenHashMap
argument_list|>
name|longLongMap
decl_stmt|;
DECL|field|intIntMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|IntIntOpenHashMap
argument_list|>
name|intIntMap
decl_stmt|;
DECL|field|floatIntMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|FloatIntOpenHashMap
argument_list|>
name|floatIntMap
decl_stmt|;
DECL|field|doubleIntMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|DoubleIntOpenHashMap
argument_list|>
name|doubleIntMap
decl_stmt|;
DECL|field|longIntMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|LongIntOpenHashMap
argument_list|>
name|longIntMap
decl_stmt|;
DECL|field|objectIntMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|ObjectIntOpenHashMap
argument_list|>
name|objectIntMap
decl_stmt|;
DECL|field|intObjectMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|IntObjectOpenHashMap
argument_list|>
name|intObjectMap
decl_stmt|;
DECL|field|objectFloatMap
specifier|public
specifier|final
name|Recycler
argument_list|<
name|ObjectFloatOpenHashMap
argument_list|>
name|objectFloatMap
decl_stmt|;
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|hashMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|hashSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|doubleObjectMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|longObjectMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|longLongMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|intIntMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|floatIntMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|doubleIntMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|longIntMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|objectIntMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|intObjectMap
operator|.
name|close
argument_list|()
expr_stmt|;
name|objectFloatMap
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|CacheRecycler
specifier|public
name|CacheRecycler
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|type
init|=
name|Type
operator|.
name|parse
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"limit"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|smartSize
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"smart_size"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|hashMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|ObjectObjectOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ObjectObjectOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|ObjectObjectOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|ObjectObjectOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hashSet
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|ObjectOpenHashSet
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ObjectOpenHashSet
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|ObjectOpenHashSet
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|,
literal|0.5f
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|ObjectOpenHashSet
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doubleObjectMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|DoubleObjectOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DoubleObjectOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|DoubleObjectOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|DoubleObjectOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|longObjectMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|LongObjectOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LongObjectOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|LongObjectOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|LongObjectOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|longLongMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|LongLongOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LongLongOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|LongLongOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|LongLongOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|intIntMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|IntIntOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IntIntOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|IntIntOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|IntIntOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|floatIntMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|FloatIntOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FloatIntOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|FloatIntOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|FloatIntOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doubleIntMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|DoubleIntOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DoubleIntOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|DoubleIntOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|DoubleIntOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|longIntMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|LongIntOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LongIntOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|LongIntOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|LongIntOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|objectIntMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|ObjectIntOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ObjectIntOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|ObjectIntOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|ObjectIntOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|intObjectMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|IntObjectOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IntObjectOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|IntObjectOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|IntObjectOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|objectFloatMap
operator|=
name|build
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|smartSize
argument_list|,
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|ObjectFloatOpenHashMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ObjectFloatOpenHashMap
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|ObjectFloatOpenHashMap
argument_list|(
name|size
argument_list|(
name|sizing
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|ObjectFloatOpenHashMap
name|value
parameter_list|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|hashMap
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Recycler
operator|.
name|V
argument_list|<
name|ObjectObjectOpenHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|hashMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|(
name|Recycler
operator|.
name|V
operator|)
name|hashMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|hashSet
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Recycler
operator|.
name|V
argument_list|<
name|ObjectOpenHashSet
argument_list|<
name|T
argument_list|>
argument_list|>
name|hashSet
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|(
name|Recycler
operator|.
name|V
operator|)
name|hashSet
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|doubleObjectMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Recycler
operator|.
name|V
argument_list|<
name|DoubleObjectOpenHashMap
argument_list|<
name|T
argument_list|>
argument_list|>
name|doubleObjectMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|(
name|Recycler
operator|.
name|V
operator|)
name|doubleObjectMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|longObjectMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Recycler
operator|.
name|V
argument_list|<
name|LongObjectOpenHashMap
argument_list|<
name|T
argument_list|>
argument_list|>
name|longObjectMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|(
name|Recycler
operator|.
name|V
operator|)
name|longObjectMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|longLongMap
specifier|public
name|Recycler
operator|.
name|V
argument_list|<
name|LongLongOpenHashMap
argument_list|>
name|longLongMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
name|longLongMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|intIntMap
specifier|public
name|Recycler
operator|.
name|V
argument_list|<
name|IntIntOpenHashMap
argument_list|>
name|intIntMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
name|intIntMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|floatIntMap
specifier|public
name|Recycler
operator|.
name|V
argument_list|<
name|FloatIntOpenHashMap
argument_list|>
name|floatIntMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
name|floatIntMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|doubleIntMap
specifier|public
name|Recycler
operator|.
name|V
argument_list|<
name|DoubleIntOpenHashMap
argument_list|>
name|doubleIntMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
name|doubleIntMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|longIntMap
specifier|public
name|Recycler
operator|.
name|V
argument_list|<
name|LongIntOpenHashMap
argument_list|>
name|longIntMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
name|longIntMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|objectIntMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Recycler
operator|.
name|V
argument_list|<
name|ObjectIntOpenHashMap
argument_list|<
name|T
argument_list|>
argument_list|>
name|objectIntMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|(
name|Recycler
operator|.
name|V
operator|)
name|objectIntMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|intObjectMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Recycler
operator|.
name|V
argument_list|<
name|IntObjectOpenHashMap
argument_list|<
name|T
argument_list|>
argument_list|>
name|intObjectMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|(
name|Recycler
operator|.
name|V
operator|)
name|intObjectMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|objectFloatMap
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Recycler
operator|.
name|V
argument_list|<
name|ObjectFloatOpenHashMap
argument_list|<
name|T
argument_list|>
argument_list|>
name|objectFloatMap
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|(
name|Recycler
operator|.
name|V
operator|)
name|objectFloatMap
operator|.
name|obtain
argument_list|(
name|sizing
argument_list|)
return|;
block|}
DECL|method|size
specifier|static
name|int
name|size
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
name|sizing
operator|>
literal|0
condition|?
name|sizing
else|:
literal|256
return|;
block|}
DECL|method|build
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Recycler
argument_list|<
name|T
argument_list|>
name|build
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|smartSize
parameter_list|,
name|Recycler
operator|.
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|Recycler
argument_list|<
name|T
argument_list|>
name|recycler
decl_stmt|;
try|try
block|{
name|recycler
operator|=
name|type
operator|.
name|build
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
expr_stmt|;
if|if
condition|(
name|smartSize
operator|>
literal|0
condition|)
block|{
name|recycler
operator|=
operator|new
name|Recycler
operator|.
name|Sizing
argument_list|<
name|T
argument_list|>
argument_list|(
name|recycler
argument_list|,
name|smartSize
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"no type support ["
operator|+
name|type
operator|+
literal|"] for recycler"
argument_list|)
throw|;
block|}
return|return
name|recycler
return|;
block|}
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|SOFT_THREAD_LOCAL
name|SOFT_THREAD_LOCAL
block|{
annotation|@
name|Override
argument_list|<
name|T
argument_list|>
name|Recycler
argument_list|<
name|T
argument_list|>
name|build
parameter_list|(
name|Recycler
operator|.
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
return|return
operator|new
name|SoftThreadLocalRecycler
argument_list|<
name|T
argument_list|>
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|perThread
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|,
DECL|enum constant|THREAD_LOCAL
name|THREAD_LOCAL
block|{
annotation|@
name|Override
argument_list|<
name|T
argument_list|>
name|Recycler
argument_list|<
name|T
argument_list|>
name|build
parameter_list|(
name|Recycler
operator|.
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
return|return
operator|new
name|ThreadLocalRecycler
argument_list|<
name|T
argument_list|>
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|perThread
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|,
DECL|enum constant|QUEUE
name|QUEUE
block|{
annotation|@
name|Override
argument_list|<
name|T
argument_list|>
name|Recycler
argument_list|<
name|T
argument_list|>
name|build
parameter_list|(
name|Recycler
operator|.
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
return|return
operator|new
name|QueueRecycler
argument_list|<
name|T
argument_list|>
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|NONE
name|NONE
block|{
annotation|@
name|Override
argument_list|<
name|T
argument_list|>
name|Recycler
argument_list|<
name|T
argument_list|>
name|build
parameter_list|(
name|Recycler
operator|.
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
return|return
operator|new
name|NoneRecycler
argument_list|<
name|T
argument_list|>
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|parse
specifier|public
specifier|static
name|Type
name|parse
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|SOFT_THREAD_LOCAL
return|;
block|}
try|try
block|{
return|return
name|Type
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"no type support ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|build
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|Recycler
argument_list|<
name|T
argument_list|>
name|build
parameter_list|(
name|Recycler
operator|.
name|C
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|int
name|limit
parameter_list|)
function_decl|;
DECL|method|perThread
name|boolean
name|perThread
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

