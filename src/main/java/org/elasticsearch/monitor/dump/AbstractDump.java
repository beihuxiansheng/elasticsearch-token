begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.dump
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AbstractDump
specifier|public
specifier|abstract
class|class
name|AbstractDump
implements|implements
name|Dump
block|{
DECL|field|timestamp
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
DECL|field|cause
specifier|private
specifier|final
name|String
name|cause
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
decl_stmt|;
DECL|field|files
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|AbstractDump
specifier|protected
name|AbstractDump
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|String
name|cause
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|timestamp
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
annotation|@
name|Override
DECL|method|context
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|cause
specifier|public
name|String
name|cause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
annotation|@
name|Override
DECL|method|files
specifier|public
name|File
index|[]
name|files
parameter_list|()
block|{
return|return
name|files
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
name|files
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createFile
specifier|public
name|File
name|createFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DumpException
block|{
name|File
name|file
init|=
name|doCreateFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|doCreateFile
specifier|protected
specifier|abstract
name|File
name|doCreateFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DumpException
function_decl|;
annotation|@
name|Override
DECL|method|createFileOutputStream
specifier|public
name|OutputStream
name|createFileOutputStream
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DumpException
block|{
try|try
block|{
return|return
operator|new
name|FileOutputStream
argument_list|(
name|createFile
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DumpException
argument_list|(
literal|"Failed to create file ["
operator|+
name|name
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createFileWriter
specifier|public
name|Writer
name|createFileWriter
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DumpException
block|{
return|return
operator|new
name|OutputStreamWriter
argument_list|(
name|createFileOutputStream
argument_list|(
name|name
argument_list|)
argument_list|,
name|Streams
operator|.
name|UTF8
argument_list|)
return|;
block|}
block|}
end_class

end_unit

