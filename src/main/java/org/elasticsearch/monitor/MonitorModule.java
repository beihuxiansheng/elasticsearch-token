begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Scopes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|FactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|multibindings
operator|.
name|MapBinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|DumpContributorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|DumpMonitorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|cluster
operator|.
name|ClusterDumpContributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|heap
operator|.
name|HeapDumpContributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|summary
operator|.
name|SummaryDumpContributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|thread
operator|.
name|ThreadDumpContributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmMonitorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|network
operator|.
name|JmxNetworkProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|network
operator|.
name|NetworkProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|network
operator|.
name|SigarNetworkProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|JmxOsProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|OsProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|OsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|SigarOsProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|process
operator|.
name|JmxProcessProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|process
operator|.
name|ProcessProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|process
operator|.
name|ProcessService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|process
operator|.
name|SigarProcessProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|sigar
operator|.
name|SigarService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|cluster
operator|.
name|ClusterDumpContributor
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|heap
operator|.
name|HeapDumpContributor
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|summary
operator|.
name|SummaryDumpContributor
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|dump
operator|.
name|thread
operator|.
name|ThreadDumpContributor
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|MonitorModule
specifier|public
class|class
name|MonitorModule
extends|extends
name|AbstractModule
block|{
DECL|class|MonitorSettings
specifier|public
specifier|static
specifier|final
class|class
name|MonitorSettings
block|{
DECL|field|MEMORY_MANAGER_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|MEMORY_MANAGER_TYPE
init|=
literal|"monitor.memory.type"
decl_stmt|;
block|}
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|method|MonitorModule
specifier|public
name|MonitorModule
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
DECL|method|configure
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|boolean
name|sigarLoaded
init|=
literal|false
decl_stmt|;
try|try
block|{
name|settings
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"org.hyperic.sigar.Sigar"
argument_list|)
expr_stmt|;
name|SigarService
name|sigarService
init|=
operator|new
name|SigarService
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|sigarService
operator|.
name|sigarAvailable
argument_list|()
condition|)
block|{
name|bind
argument_list|(
name|SigarService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|sigarService
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ProcessProbe
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|SigarProcessProbe
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|OsProbe
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|SigarOsProbe
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|NetworkProbe
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|SigarNetworkProbe
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|sigarLoaded
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// no sigar
name|Loggers
operator|.
name|getLogger
argument_list|(
name|MonitorModule
operator|.
name|class
argument_list|)
operator|.
name|trace
argument_list|(
literal|"failed to load sigar"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sigarLoaded
condition|)
block|{
comment|// bind non sigar implementations
name|bind
argument_list|(
name|ProcessProbe
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|JmxProcessProbe
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|OsProbe
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|JmxOsProbe
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|NetworkProbe
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|JmxNetworkProbe
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
comment|// bind other services
name|bind
argument_list|(
name|ProcessService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|OsService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|NetworkService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|JvmService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|JvmMonitorService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|MapBinder
argument_list|<
name|String
argument_list|,
name|DumpContributorFactory
argument_list|>
name|tokenFilterBinder
init|=
name|MapBinder
operator|.
name|newMapBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|DumpContributorFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|dumpContSettings
init|=
name|settings
operator|.
name|getGroups
argument_list|(
literal|"monitor.dump"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|dumpContSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|dumpContributorName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Settings
name|dumpContributorSettings
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|DumpContributorFactory
argument_list|>
name|type
init|=
name|dumpContributorSettings
operator|.
name|getAsClass
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|"org.elasticsearch.monitor.dump."
operator|+
name|dumpContributorName
operator|+
literal|"."
argument_list|,
literal|"DumpContributor"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Dump Contributor ["
operator|+
name|dumpContributorName
operator|+
literal|"] must have a type associated with it"
argument_list|)
throw|;
block|}
name|tokenFilterBinder
operator|.
name|addBinding
argument_list|(
name|dumpContributorName
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|DumpContributorFactory
operator|.
name|class
argument_list|,
name|type
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
comment|// add default
if|if
condition|(
operator|!
name|dumpContSettings
operator|.
name|containsKey
argument_list|(
name|SUMMARY
argument_list|)
condition|)
block|{
name|tokenFilterBinder
operator|.
name|addBinding
argument_list|(
name|SUMMARY
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|DumpContributorFactory
operator|.
name|class
argument_list|,
name|SummaryDumpContributor
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dumpContSettings
operator|.
name|containsKey
argument_list|(
name|THREAD_DUMP
argument_list|)
condition|)
block|{
name|tokenFilterBinder
operator|.
name|addBinding
argument_list|(
name|THREAD_DUMP
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|DumpContributorFactory
operator|.
name|class
argument_list|,
name|ThreadDumpContributor
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dumpContSettings
operator|.
name|containsKey
argument_list|(
name|HEAP_DUMP
argument_list|)
condition|)
block|{
name|tokenFilterBinder
operator|.
name|addBinding
argument_list|(
name|HEAP_DUMP
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|DumpContributorFactory
operator|.
name|class
argument_list|,
name|HeapDumpContributor
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dumpContSettings
operator|.
name|containsKey
argument_list|(
name|CLUSTER
argument_list|)
condition|)
block|{
name|tokenFilterBinder
operator|.
name|addBinding
argument_list|(
name|CLUSTER
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|DumpContributorFactory
operator|.
name|class
argument_list|,
name|ClusterDumpContributor
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
name|bind
argument_list|(
name|DumpMonitorService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

