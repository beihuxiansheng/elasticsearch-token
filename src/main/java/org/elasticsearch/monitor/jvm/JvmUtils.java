begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.jvm
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|JvmUtils
specifier|public
class|class
name|JvmUtils
block|{
comment|/**      * True iff running on a 64bit JVM      */
DECL|field|JRE_IS_64BIT
specifier|public
specifier|static
specifier|final
name|boolean
name|JRE_IS_64BIT
decl_stmt|;
DECL|field|JRE_IS_MINIMUM_JAVA6
specifier|public
specifier|static
specifier|final
name|boolean
name|JRE_IS_MINIMUM_JAVA6
decl_stmt|;
DECL|field|JRE_IS_MINIMUM_JAVA7
specifier|public
specifier|static
specifier|final
name|boolean
name|JRE_IS_MINIMUM_JAVA7
decl_stmt|;
static|static
block|{
name|boolean
name|is64Bit
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|unsafeClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Unsafe"
argument_list|)
decl_stmt|;
specifier|final
name|Field
name|unsafeField
init|=
name|unsafeClass
operator|.
name|getDeclaredField
argument_list|(
literal|"theUnsafe"
argument_list|)
decl_stmt|;
name|unsafeField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|unsafe
init|=
name|unsafeField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|int
name|addressSize
init|=
operator|(
operator|(
name|Number
operator|)
name|unsafeClass
operator|.
name|getMethod
argument_list|(
literal|"addressSize"
argument_list|)
operator|.
name|invoke
argument_list|(
name|unsafe
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|//System.out.println("Address size: " + addressSize);
name|is64Bit
operator|=
name|addressSize
operator|>=
literal|8
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
specifier|final
name|String
name|x
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|is64Bit
operator|=
name|x
operator|.
name|indexOf
argument_list|(
literal|"64"
argument_list|)
operator|!=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|String
name|OS_ARCH
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
decl_stmt|;
if|if
condition|(
name|OS_ARCH
operator|!=
literal|null
operator|&&
name|OS_ARCH
operator|.
name|indexOf
argument_list|(
literal|"64"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|is64Bit
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|is64Bit
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|JRE_IS_64BIT
operator|=
name|is64Bit
expr_stmt|;
comment|// this method only exists in Java 6:
name|boolean
name|v6
init|=
literal|true
decl_stmt|;
try|try
block|{
name|String
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"isEmpty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|v6
operator|=
literal|false
expr_stmt|;
block|}
name|JRE_IS_MINIMUM_JAVA6
operator|=
name|v6
expr_stmt|;
comment|// this method only exists in Java 7:
name|boolean
name|v7
init|=
literal|true
decl_stmt|;
try|try
block|{
name|Throwable
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getSuppressed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|v7
operator|=
literal|false
expr_stmt|;
block|}
name|JRE_IS_MINIMUM_JAVA7
operator|=
name|v7
expr_stmt|;
block|}
block|}
end_class

end_unit

