begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_class
DECL|class|PluginUtils
specifier|public
specifier|final
class|class
name|PluginUtils
block|{
DECL|method|PluginUtils
specifier|private
name|PluginUtils
parameter_list|()
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|loadPlugin
specifier|static
name|Plugin
name|loadPlugin
parameter_list|(
name|String
name|className
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
name|pluginClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|pluginClass
operator|.
name|getConstructor
argument_list|(
name|Settings
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|settings
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
try|try
block|{
return|return
name|pluginClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"No constructor for ["
operator|+
name|pluginClass
operator|+
literal|"]. A plugin class must "
operator|+
literal|"have either an empty default constructor or a single argument constructor accepting a "
operator|+
literal|"Settings instance"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Failed to load plugin class ["
operator|+
name|className
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|pluginClassPathAsFiles
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|pluginClassPathAsFiles
parameter_list|(
name|File
name|pluginFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|File
argument_list|>
name|cpFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|cpFiles
operator|.
name|add
argument_list|(
name|pluginFolder
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|libFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|File
index|[]
name|files
init|=
name|pluginFolder
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|libFiles
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|File
name|libLocation
init|=
operator|new
name|File
argument_list|(
name|pluginFolder
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
if|if
condition|(
name|libLocation
operator|.
name|exists
argument_list|()
operator|&&
name|libLocation
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|files
operator|=
name|libLocation
operator|.
name|listFiles
argument_list|()
expr_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|libFiles
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if there are jars in it, add it as well
for|for
control|(
name|File
name|libFile
range|:
name|libFiles
control|)
block|{
if|if
condition|(
name|libFile
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|||
name|libFile
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
name|cpFiles
operator|.
name|add
argument_list|(
name|libFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cpFiles
return|;
block|}
DECL|method|lookupIsolation
specifier|static
name|boolean
name|lookupIsolation
parameter_list|(
name|List
argument_list|<
name|URL
argument_list|>
name|pluginProperties
parameter_list|,
name|boolean
name|defaultIsolation
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
for|for
control|(
name|URL
name|prop
range|:
name|pluginProperties
control|)
block|{
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|prop
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"isolation"
argument_list|)
argument_list|,
name|defaultIsolation
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|defaultIsolation
return|;
block|}
DECL|method|lookupPluginProperties
specifier|static
name|List
argument_list|<
name|URL
argument_list|>
name|lookupPluginProperties
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|pluginClassPath
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|pluginClassPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|URL
argument_list|>
name|found
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|pluginClassPath
control|)
block|{
name|String
name|toString
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|toString
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|||
name|toString
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
name|JarFile
name|jar
init|=
operator|new
name|JarFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|JarEntry
name|jarEntry
init|=
name|jar
operator|.
name|getJarEntry
argument_list|(
literal|"es-plugin.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jarEntry
operator|!=
literal|null
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
literal|"jar:"
operator|+
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"!/es.plugin.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|jar
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|File
name|props
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
literal|"es-plugin.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|exists
argument_list|()
operator|&&
name|props
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|props
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|found
return|;
block|}
DECL|method|convertFileToUrl
specifier|static
name|URL
index|[]
name|convertFileToUrl
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|pluginClassPath
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|pluginClassPath
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|urls
index|[
name|i
index|]
operator|=
name|pluginClassPath
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
return|return
name|urls
return|;
block|}
block|}
end_class

end_unit

