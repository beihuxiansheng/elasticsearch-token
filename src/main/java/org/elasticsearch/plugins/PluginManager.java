begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|http
operator|.
name|client
operator|.
name|HttpDownloadHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
operator|.
name|hasLength
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
operator|.
name|moveFilesWithoutOverwriting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PluginManager
specifier|public
class|class
name|PluginManager
block|{
DECL|class|ACTION
specifier|public
specifier|static
specifier|final
class|class
name|ACTION
block|{
DECL|field|NONE
specifier|public
specifier|static
specifier|final
name|int
name|NONE
init|=
literal|0
decl_stmt|;
DECL|field|INSTALL
specifier|public
specifier|static
specifier|final
name|int
name|INSTALL
init|=
literal|1
decl_stmt|;
DECL|field|REMOVE
specifier|public
specifier|static
specifier|final
name|int
name|REMOVE
init|=
literal|2
decl_stmt|;
DECL|field|LIST
specifier|public
specifier|static
specifier|final
name|int
name|LIST
init|=
literal|3
decl_stmt|;
block|}
DECL|enum|OutputMode
specifier|public
enum|enum
name|OutputMode
block|{
DECL|enum constant|DEFAULT
DECL|enum constant|SILENT
DECL|enum constant|VERBOSE
name|DEFAULT
block|,
name|SILENT
block|,
name|VERBOSE
block|}
comment|// By default timeout is 0 which means no timeout
DECL|field|DEFAULT_TIMEOUT
specifier|public
specifier|static
specifier|final
name|TimeValue
name|DEFAULT_TIMEOUT
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|BLACKLIST
specifier|private
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|Object
argument_list|>
name|BLACKLIST
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"elasticsearch"
argument_list|,
literal|"elasticsearch.bat"
argument_list|,
literal|"elasticsearch.in.sh"
argument_list|,
literal|"plugin"
argument_list|,
literal|"plugin.bat"
argument_list|,
literal|"service.bat"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|url
specifier|private
name|String
name|url
decl_stmt|;
DECL|field|outputMode
specifier|private
name|OutputMode
name|outputMode
decl_stmt|;
DECL|field|timeout
specifier|private
name|TimeValue
name|timeout
decl_stmt|;
DECL|method|PluginManager
specifier|public
name|PluginManager
parameter_list|(
name|Environment
name|environment
parameter_list|,
name|String
name|url
parameter_list|,
name|OutputMode
name|outputMode
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|outputMode
operator|=
name|outputMode
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|TrustManager
index|[]
name|trustAllCerts
init|=
operator|new
name|TrustManager
index|[]
block|{
operator|new
name|X509TrustManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
function|@Override                     public void checkClientTrusted
parameter_list|(
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|authType
parameter_list|)
block|{
block|}
function|@Override                     public void checkServerTrusted
parameter_list|(
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|authType
parameter_list|)
block|{
block|}
function|}         };
comment|// Install the all-trusting trust manager
try|try
block|{
name|SSLContext
name|sc
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"SSL"
argument_list|)
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|trustAllCerts
argument_list|,
operator|new
name|java
operator|.
name|security
operator|.
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|HttpsURLConnection
operator|.
name|setDefaultSSLSocketFactory
argument_list|(
name|sc
operator|.
name|getSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Failed to install all-trusting trust manager"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|downloadAndExtract
specifier|public
name|void
name|downloadAndExtract
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"plugin name must be supplied with --install [name]."
argument_list|)
throw|;
block|}
name|HttpDownloadHelper
name|downloadHelper
init|=
operator|new
name|HttpDownloadHelper
argument_list|()
decl_stmt|;
name|boolean
name|downloaded
init|=
literal|false
decl_stmt|;
name|HttpDownloadHelper
operator|.
name|DownloadProgress
name|progress
decl_stmt|;
if|if
condition|(
name|outputMode
operator|==
name|OutputMode
operator|.
name|SILENT
condition|)
block|{
name|progress
operator|=
operator|new
name|HttpDownloadHelper
operator|.
name|NullProgress
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|progress
operator|=
operator|new
name|HttpDownloadHelper
operator|.
name|VerboseProgress
argument_list|(
name|SysOut
operator|.
name|getOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isWritable
argument_list|(
name|environment
operator|.
name|pluginsFile
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"plugin directory "
operator|+
name|environment
operator|.
name|pluginsFile
argument_list|()
operator|+
literal|" is read only"
argument_list|)
throw|;
block|}
name|PluginHandle
name|pluginHandle
init|=
name|PluginHandle
operator|.
name|parse
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|checkForForbiddenName
argument_list|(
name|pluginHandle
operator|.
name|name
argument_list|)
expr_stmt|;
name|Path
name|pluginFile
init|=
name|pluginHandle
operator|.
name|distroFile
argument_list|(
name|environment
argument_list|)
decl_stmt|;
comment|// extract the plugin
specifier|final
name|Path
name|extractLocation
init|=
name|pluginHandle
operator|.
name|extractedDir
argument_list|(
name|environment
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|extractLocation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"plugin directory "
operator|+
name|extractLocation
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|" already exists. To update the plugin, uninstall it first using --remove "
operator|+
name|name
operator|+
literal|" command"
argument_list|)
throw|;
block|}
comment|// first, try directly from the URL provided
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|URL
name|pluginUrl
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"Trying "
operator|+
name|pluginUrl
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"..."
argument_list|)
expr_stmt|;
try|try
block|{
name|downloadHelper
operator|.
name|download
argument_list|(
name|pluginUrl
argument_list|,
name|pluginFile
argument_list|,
name|progress
argument_list|,
name|this
operator|.
name|timeout
argument_list|)
expr_stmt|;
name|downloaded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchTimeoutException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
name|log
argument_list|(
literal|"Failed: "
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|downloaded
condition|)
block|{
comment|// We try all possible locations
for|for
control|(
name|URL
name|url
range|:
name|pluginHandle
operator|.
name|urls
argument_list|()
control|)
block|{
name|log
argument_list|(
literal|"Trying "
operator|+
name|url
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"..."
argument_list|)
expr_stmt|;
try|try
block|{
name|downloadHelper
operator|.
name|download
argument_list|(
name|url
argument_list|,
name|pluginFile
argument_list|,
name|progress
argument_list|,
name|this
operator|.
name|timeout
argument_list|)
expr_stmt|;
name|downloaded
operator|=
literal|true
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|ElasticsearchTimeoutException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|debug
argument_list|(
literal|"Failed: "
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|downloaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to download out of all possible locations..., use --verbose to get detailed information"
argument_list|)
throw|;
block|}
try|try
init|(
name|FileSystem
name|zipFile
init|=
name|FileSystems
operator|.
name|newFileSystem
argument_list|(
name|pluginFile
argument_list|,
literal|null
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|Path
name|root
range|:
name|zipFile
operator|.
name|getRootDirectories
argument_list|()
control|)
block|{
specifier|final
name|Path
index|[]
name|topLevelFiles
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|root
argument_list|)
decl_stmt|;
comment|//we check whether we need to remove the top-level folder while extracting
comment|//sometimes (e.g. github) the downloaded archive contains a top-level folder which needs to be removed
specifier|final
name|boolean
name|stripTopLevelDirectory
decl_stmt|;
if|if
condition|(
name|topLevelFiles
operator|.
name|length
operator|==
literal|1
operator|&&
name|Files
operator|.
name|isDirectory
argument_list|(
name|topLevelFiles
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// valid names if the zip has only one top level directory
switch|switch
condition|(
name|topLevelFiles
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
condition|)
block|{
case|case
literal|"_site/"
case|:
case|case
literal|"bin/"
case|:
case|case
literal|"config/"
case|:
case|case
literal|"_dict/"
case|:
name|stripTopLevelDirectory
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|stripTopLevelDirectory
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|stripTopLevelDirectory
operator|=
literal|false
expr_stmt|;
block|}
name|Files
operator|.
name|walkFileTree
argument_list|(
name|root
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|target
init|=
name|FileSystemUtils
operator|.
name|append
argument_list|(
name|extractLocation
argument_list|,
name|file
argument_list|,
name|stripTopLevelDirectory
condition|?
literal|1
else|:
literal|0
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|file
argument_list|,
name|target
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
function|}
block|)
empty_stmt|;
block|}
name|log
argument_list|(
literal|"Installed "
operator|+
name|name
operator|+
literal|" into "
operator|+
name|extractLocation
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
argument_list|(
literal|"failed to extract plugin ["
operator|+
name|pluginFile
operator|+
literal|"]: "
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|pluginFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
argument_list|(
literal|"Failed to delete plugin file"
operator|+
name|pluginFile
operator|+
literal|" "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|FileSystemUtils
operator|.
name|hasExtensions
argument_list|(
name|extractLocation
argument_list|,
literal|".java"
argument_list|)
condition|)
block|{
name|debug
argument_list|(
literal|"Plugin installation assumed to be site plugin, but contains source code, aborting installation..."
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|rm
argument_list|(
name|extractLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|debug
argument_list|(
literal|"Failed to remove site plugin from path "
operator|+
name|extractLocation
operator|+
literal|" - "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Plugin installation assumed to be site plugin, but contains source code, aborting installation."
argument_list|)
throw|;
block|}
comment|// It could potentially be a non explicit _site plugin
name|boolean
name|potentialSitePlugin
init|=
literal|true
decl_stmt|;
name|Path
name|binFile
init|=
name|extractLocation
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|binFile
argument_list|)
condition|)
block|{
name|Path
name|toLocation
init|=
name|pluginHandle
operator|.
name|binDir
argument_list|(
name|environment
argument_list|)
decl_stmt|;
name|debug
argument_list|(
literal|"Found bin, moving to "
operator|+
name|toLocation
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|toLocation
argument_list|)
condition|)
block|{
name|IOUtils
operator|.
name|rm
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|FileSystemUtils
operator|.
name|move
argument_list|(
name|binFile
argument_list|,
name|toLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not move ["
operator|+
name|binFile
operator|+
literal|"] to ["
operator|+
name|toLocation
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|Files
operator|.
name|getFileStore
argument_list|(
name|toLocation
argument_list|)
operator|.
name|supportsFileAttributeView
argument_list|(
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|perms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_EXECUTE
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|GROUP_EXECUTE
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OTHERS_EXECUTE
argument_list|)
expr_stmt|;
name|Files
operator|.
name|walkFileTree
argument_list|(
name|toLocation
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|attrs
operator|.
name|isRegularFile
argument_list|()
condition|)
block|{
name|Files
operator|.
name|setPosixFilePermissions
argument_list|(
name|file
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
function|}
block|)
empty_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Skipping posix permissions - filestore doesn't support posix permission"
argument_list|)
expr_stmt|;
block|}
name|debug
argument_list|(
literal|"Installed "
operator|+
name|name
operator|+
literal|" into "
operator|+
name|toLocation
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|potentialSitePlugin
operator|=
literal|false
expr_stmt|;
block|}
name|Path
name|configFile
init|=
name|extractLocation
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|configFile
argument_list|)
condition|)
block|{
name|Path
name|configDestLocation
init|=
name|pluginHandle
operator|.
name|configDir
argument_list|(
name|environment
argument_list|)
decl_stmt|;
name|debug
argument_list|(
literal|"Found config, moving to "
operator|+
name|configDestLocation
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|moveFilesWithoutOverwriting
argument_list|(
name|configFile
argument_list|,
name|configDestLocation
argument_list|,
literal|".new"
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Installed "
operator|+
name|name
operator|+
literal|" into "
operator|+
name|configDestLocation
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|potentialSitePlugin
operator|=
literal|false
expr_stmt|;
block|}
comment|// try and identify the plugin type, see if it has no .class or .jar files in it
comment|// so its probably a _site, and it it does not have a _site in it, move everything to _site
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|extractLocation
operator|.
name|resolve
argument_list|(
literal|"_site"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|potentialSitePlugin
operator|&&
operator|!
name|FileSystemUtils
operator|.
name|hasExtensions
argument_list|(
name|extractLocation
argument_list|,
literal|".class"
argument_list|,
literal|".jar"
argument_list|)
condition|)
block|{
name|log
argument_list|(
literal|"Identified as a _site plugin, moving to _site structure ..."
argument_list|)
expr_stmt|;
name|Path
name|site
init|=
name|extractLocation
operator|.
name|resolve
argument_list|(
literal|"_site"
argument_list|)
decl_stmt|;
name|Path
name|tmpLocation
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|extractLocation
operator|.
name|getFileName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|extractLocation
argument_list|,
name|tmpLocation
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|extractLocation
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|tmpLocation
argument_list|,
name|site
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Installed "
operator|+
name|name
operator|+
literal|" into "
operator|+
name|site
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removePlugin
function|public void removePlugin
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"plugin name must be supplied with --remove [name]."
argument_list|)
throw|;
block|}
name|PluginHandle
name|pluginHandle
init|=
name|PluginHandle
operator|.
name|parse
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
name|checkForForbiddenName
argument_list|(
name|pluginHandle
operator|.
name|name
argument_list|)
expr_stmt|;
name|Path
name|pluginToDelete
init|=
name|pluginHandle
operator|.
name|extractedDir
argument_list|(
name|environment
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|pluginToDelete
argument_list|)
condition|)
block|{
name|debug
argument_list|(
literal|"Removing: "
operator|+
name|pluginToDelete
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|rm
argument_list|(
name|pluginToDelete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to remove "
operator|+
name|pluginHandle
operator|.
name|name
operator|+
literal|". Check file permissions on "
operator|+
name|pluginToDelete
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|removed
operator|=
literal|true
expr_stmt|;
block|}
name|pluginToDelete
operator|=
name|pluginHandle
operator|.
name|distroFile
argument_list|(
name|environment
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|pluginToDelete
argument_list|)
condition|)
block|{
name|debug
argument_list|(
literal|"Removing: "
operator|+
name|pluginToDelete
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|pluginToDelete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to remove "
operator|+
name|pluginHandle
operator|.
name|name
operator|+
literal|". Check file permissions on "
operator|+
name|pluginToDelete
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|removed
operator|=
literal|true
expr_stmt|;
block|}
name|Path
name|binLocation
init|=
name|pluginHandle
operator|.
name|binDir
argument_list|(
name|environment
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|binLocation
argument_list|)
condition|)
block|{
name|debug
argument_list|(
literal|"Removing: "
operator|+
name|binLocation
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|rm
argument_list|(
name|binLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to remove "
operator|+
name|pluginHandle
operator|.
name|name
operator|+
literal|". Check file permissions on "
operator|+
name|binLocation
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
condition|)
block|{
name|log
argument_list|(
literal|"Removed "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
argument_list|(
literal|"Plugin "
operator|+
name|name
operator|+
literal|" not found. Run plugin --list to get list of installed plugins."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkForForbiddenName
function|private static void checkForForbiddenName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasLength
argument_list|(
name|name
argument_list|)
operator|||
name|BLACKLIST
operator|.
name|contains
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Illegal plugin name: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
DECL|method|getListInstalledPlugins
function|public Path[] getListInstalledPlugins
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|environment
operator|.
name|pluginsFile
argument_list|()
argument_list|)
init|)
block|{
return|return
name|Iterators
operator|.
name|toArray
argument_list|(
name|stream
operator|.
name|iterator
argument_list|()
argument_list|,
name|Path
operator|.
name|class
argument_list|)
return|;
block|}
block|}
DECL|method|listInstalledPlugins
function|public void listInstalledPlugins
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
index|[]
name|plugins
init|=
name|getListInstalledPlugins
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"Installed plugins in "
operator|+
name|environment
operator|.
name|pluginsFile
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|plugins
operator|==
literal|null
operator|||
name|plugins
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|log
argument_list|(
literal|"    - No plugin detected"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|plugins
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|log
argument_list|(
literal|"    - "
operator|+
name|plugins
index|[
name|i
index|]
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|EXIT_CODE_OK
function|private static final int EXIT_CODE_OK
init|=
literal|0
function|;
DECL|field|EXIT_CODE_CMD_USAGE
specifier|private
specifier|static
name|final
name|int
name|EXIT_CODE_CMD_USAGE
operator|=
literal|64
decl_stmt|;
DECL|field|EXIT_CODE_IO_ERROR
specifier|private
specifier|static
specifier|final
name|int
name|EXIT_CODE_IO_ERROR
init|=
literal|74
decl_stmt|;
DECL|field|EXIT_CODE_ERROR
specifier|private
specifier|static
specifier|final
name|int
name|EXIT_CODE_ERROR
init|=
literal|70
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Tuple
argument_list|<
name|Settings
argument_list|,
name|Environment
argument_list|>
name|initialSettings
init|=
name|InternalSettingsPreparer
operator|.
name|prepareSettings
argument_list|(
name|EMPTY_SETTINGS
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|initialSettings
operator|.
name|v2
argument_list|()
operator|.
name|pluginsFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|displayHelp
argument_list|(
literal|"Unable to create plugins dir: "
operator|+
name|initialSettings
operator|.
name|v2
argument_list|()
operator|.
name|pluginsFile
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|EXIT_CODE_ERROR
argument_list|)
expr_stmt|;
block|}
name|String
name|url
init|=
literal|null
decl_stmt|;
name|OutputMode
name|outputMode
init|=
name|OutputMode
operator|.
name|DEFAULT
decl_stmt|;
name|String
name|pluginName
init|=
literal|null
decl_stmt|;
name|TimeValue
name|timeout
init|=
name|DEFAULT_TIMEOUT
decl_stmt|;
name|int
name|action
init|=
name|ACTION
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|displayHelp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|args
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|String
name|command
init|=
name|args
index|[
name|c
index|]
decl_stmt|;
switch|switch
condition|(
name|command
condition|)
block|{
case|case
literal|"-u"
case|:
case|case
literal|"--url"
case|:
comment|// deprecated versions:
case|case
literal|"url"
case|:
case|case
literal|"-url"
case|:
name|url
operator|=
name|getCommandValue
argument_list|(
name|args
argument_list|,
operator|++
name|c
argument_list|,
literal|"--url"
argument_list|)
expr_stmt|;
comment|// Until update is supported, then supplying a URL implies installing
comment|// By specifying this action, we also avoid silently failing without
comment|//  dubious checks.
name|action
operator|=
name|ACTION
operator|.
name|INSTALL
expr_stmt|;
break|break;
case|case
literal|"-v"
case|:
case|case
literal|"--verbose"
case|:
comment|// deprecated versions:
case|case
literal|"verbose"
case|:
case|case
literal|"-verbose"
case|:
name|outputMode
operator|=
name|OutputMode
operator|.
name|VERBOSE
expr_stmt|;
break|break;
case|case
literal|"-s"
case|:
case|case
literal|"--silent"
case|:
comment|// deprecated versions:
case|case
literal|"silent"
case|:
case|case
literal|"-silent"
case|:
name|outputMode
operator|=
name|OutputMode
operator|.
name|SILENT
expr_stmt|;
break|break;
case|case
literal|"-i"
case|:
case|case
literal|"--install"
case|:
comment|// deprecated versions:
case|case
literal|"install"
case|:
case|case
literal|"-install"
case|:
name|pluginName
operator|=
name|getCommandValue
argument_list|(
name|args
argument_list|,
operator|++
name|c
argument_list|,
literal|"--install"
argument_list|)
expr_stmt|;
name|action
operator|=
name|ACTION
operator|.
name|INSTALL
expr_stmt|;
break|break;
case|case
literal|"-r"
case|:
case|case
literal|"--remove"
case|:
comment|// deprecated versions:
case|case
literal|"remove"
case|:
case|case
literal|"-remove"
case|:
name|pluginName
operator|=
name|getCommandValue
argument_list|(
name|args
argument_list|,
operator|++
name|c
argument_list|,
literal|"--remove"
argument_list|)
expr_stmt|;
name|action
operator|=
name|ACTION
operator|.
name|REMOVE
expr_stmt|;
break|break;
case|case
literal|"-t"
case|:
case|case
literal|"--timeout"
case|:
comment|// deprecated versions:
case|case
literal|"timeout"
case|:
case|case
literal|"-timeout"
case|:
name|String
name|timeoutValue
init|=
name|getCommandValue
argument_list|(
name|args
argument_list|,
operator|++
name|c
argument_list|,
literal|"--timeout"
argument_list|)
decl_stmt|;
name|timeout
operator|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|timeoutValue
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"-l"
case|:
case|case
literal|"--list"
case|:
name|action
operator|=
name|ACTION
operator|.
name|LIST
expr_stmt|;
break|break;
case|case
literal|"-h"
case|:
case|case
literal|"--help"
case|:
name|displayHelp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
default|default:
name|displayHelp
argument_list|(
literal|"Command ["
operator|+
name|command
operator|+
literal|"] unknown."
argument_list|)
expr_stmt|;
comment|// Unknown command. We break...
name|System
operator|.
name|exit
argument_list|(
name|EXIT_CODE_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|displayHelp
argument_list|(
literal|"Error while parsing options: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|EXIT_CODE_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|>
name|ACTION
operator|.
name|NONE
condition|)
block|{
name|int
name|exitCode
init|=
name|EXIT_CODE_ERROR
decl_stmt|;
comment|// we fail unless it's reset
name|PluginManager
name|pluginManager
init|=
operator|new
name|PluginManager
argument_list|(
name|initialSettings
operator|.
name|v2
argument_list|()
argument_list|,
name|url
argument_list|,
name|outputMode
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|ACTION
operator|.
name|INSTALL
case|:
try|try
block|{
name|pluginManager
operator|.
name|log
argument_list|(
literal|"-> Installing "
operator|+
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|pluginName
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|pluginManager
operator|.
name|downloadAndExtract
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|EXIT_CODE_OK
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exitCode
operator|=
name|EXIT_CODE_IO_ERROR
expr_stmt|;
name|pluginManager
operator|.
name|log
argument_list|(
literal|"Failed to install "
operator|+
name|pluginName
operator|+
literal|", reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exitCode
operator|=
name|EXIT_CODE_ERROR
expr_stmt|;
name|displayHelp
argument_list|(
literal|"Error while installing plugin, reason: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ACTION
operator|.
name|REMOVE
case|:
try|try
block|{
name|pluginManager
operator|.
name|log
argument_list|(
literal|"-> Removing "
operator|+
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|pluginName
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|pluginManager
operator|.
name|removePlugin
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|EXIT_CODE_OK
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{
name|exitCode
operator|=
name|EXIT_CODE_CMD_USAGE
expr_stmt|;
name|pluginManager
operator|.
name|log
argument_list|(
literal|"Failed to remove "
operator|+
name|pluginName
operator|+
literal|", reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exitCode
operator|=
name|EXIT_CODE_IO_ERROR
expr_stmt|;
name|pluginManager
operator|.
name|log
argument_list|(
literal|"Failed to remove "
operator|+
name|pluginName
operator|+
literal|", reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exitCode
operator|=
name|EXIT_CODE_ERROR
expr_stmt|;
name|displayHelp
argument_list|(
literal|"Error while removing plugin, reason: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ACTION
operator|.
name|LIST
case|:
try|try
block|{
name|pluginManager
operator|.
name|listInstalledPlugins
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|EXIT_CODE_OK
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|displayHelp
argument_list|(
literal|"Error while listing plugins, reason: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|pluginManager
operator|.
name|log
argument_list|(
literal|"Unknown Action ["
operator|+
name|action
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|EXIT_CODE_ERROR
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
comment|// exit here!
block|}
block|}
comment|/**      * Get the value for the {@code flag} at the specified {@code arg} of the command line {@code args}.      *<p />      * This is useful to avoid having to check for multiple forms of unset (e.g., "   " versus "" versus {@code null}).      * @param args Incoming command line arguments.      * @param arg Expected argument containing the value.      * @param flag The flag whose value is being retrieved.      * @return Never {@code null}. The trimmed value.      * @throws NullPointerException if {@code args} is {@code null}.      * @throws ArrayIndexOutOfBoundsException if {@code arg} is negative.      * @throws ElasticsearchIllegalStateException if {@code arg} is&gt;= {@code args.length}.      * @throws ElasticsearchIllegalArgumentException if the value evaluates to blank ({@code null} or only whitespace)      */
DECL|method|getCommandValue
specifier|private
specifier|static
name|String
name|getCommandValue
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|arg
parameter_list|,
name|String
name|flag
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|>=
name|args
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"missing value for "
operator|+
name|flag
operator|+
literal|". Usage: "
operator|+
name|flag
operator|+
literal|" [value]"
argument_list|)
throw|;
block|}
comment|// avoid having to interpret multiple forms of unset
name|String
name|trimmedValue
init|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|args
index|[
name|arg
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
comment|// If we had a value that is blank, then fail immediately
if|if
condition|(
name|trimmedValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"value for "
operator|+
name|flag
operator|+
literal|"('"
operator|+
name|args
index|[
name|arg
index|]
operator|+
literal|"') must be set. Usage: "
operator|+
name|flag
operator|+
literal|" [value]"
argument_list|)
throw|;
block|}
return|return
name|trimmedValue
return|;
block|}
DECL|method|displayHelp
specifier|private
specifier|static
name|void
name|displayHelp
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|SysOut
operator|.
name|println
argument_list|(
literal|"Usage:"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"    -u, --url     [plugin location]   : Set exact URL to download the plugin from"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"    -i, --install [plugin name]       : Downloads and installs listed plugins [*]"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"    -t, --timeout [duration]          : Timeout setting: 30s, 1m, 1h... (infinite by default)"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"    -r, --remove  [plugin name]       : Removes listed plugins"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"    -l, --list                        : List installed plugins"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"    -v, --verbose                     : Prints verbose messages"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"    -s, --silent                      : Run in silent mode"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"    -h, --help                        : Prints this help message"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|newline
argument_list|()
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|" [*] Plugin name could be:"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"     elasticsearch/plugin/version for official elasticsearch plugins (download from download.elasticsearch.org)"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"     groupId/artifactId/version   for community plugins (download from maven central or oss sonatype)"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"     username/repository          for site plugins (download from github master)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|SysOut
operator|.
name|newline
argument_list|()
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"Message:"
argument_list|)
expr_stmt|;
name|SysOut
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|debug
specifier|private
name|void
name|debug
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|outputMode
operator|==
name|OutputMode
operator|.
name|VERBOSE
condition|)
name|SysOut
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
DECL|method|log
specifier|private
name|void
name|log
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|outputMode
operator|!=
name|OutputMode
operator|.
name|SILENT
condition|)
name|SysOut
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System#out"
argument_list|)
DECL|class|SysOut
specifier|static
class|class
name|SysOut
block|{
DECL|method|newline
specifier|public
specifier|static
name|void
name|newline
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
DECL|method|println
specifier|public
specifier|static
name|void
name|println
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|getOut
specifier|public
specifier|static
name|PrintStream
name|getOut
parameter_list|()
block|{
return|return
name|System
operator|.
name|out
return|;
block|}
block|}
comment|/**      * Helper class to extract properly user name, repository name, version and plugin name      * from plugin name given by a user.      */
DECL|class|PluginHandle
specifier|static
class|class
name|PluginHandle
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|version
specifier|final
name|String
name|version
decl_stmt|;
DECL|field|user
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|repo
specifier|final
name|String
name|repo
decl_stmt|;
DECL|method|PluginHandle
name|PluginHandle
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|repo
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
block|}
DECL|method|urls
name|List
argument_list|<
name|URL
argument_list|>
name|urls
parameter_list|()
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
comment|// Elasticsearch download service
name|addUrl
argument_list|(
name|urls
argument_list|,
literal|"http://download.elasticsearch.org/"
operator|+
name|user
operator|+
literal|"/"
operator|+
name|repo
operator|+
literal|"/"
operator|+
name|repo
operator|+
literal|"-"
operator|+
name|version
operator|+
literal|".zip"
argument_list|)
expr_stmt|;
comment|// Maven central repository
name|addUrl
argument_list|(
name|urls
argument_list|,
literal|"http://search.maven.org/remotecontent?filepath="
operator|+
name|user
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|"/"
operator|+
name|repo
operator|+
literal|"/"
operator|+
name|version
operator|+
literal|"/"
operator|+
name|repo
operator|+
literal|"-"
operator|+
name|version
operator|+
literal|".zip"
argument_list|)
expr_stmt|;
comment|// Sonatype repository
name|addUrl
argument_list|(
name|urls
argument_list|,
literal|"https://oss.sonatype.org/service/local/repositories/releases/content/"
operator|+
name|user
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|"/"
operator|+
name|repo
operator|+
literal|"/"
operator|+
name|version
operator|+
literal|"/"
operator|+
name|repo
operator|+
literal|"-"
operator|+
name|version
operator|+
literal|".zip"
argument_list|)
expr_stmt|;
comment|// Github repository
name|addUrl
argument_list|(
name|urls
argument_list|,
literal|"https://github.com/"
operator|+
name|user
operator|+
literal|"/"
operator|+
name|repo
operator|+
literal|"/archive/"
operator|+
name|version
operator|+
literal|".zip"
argument_list|)
expr_stmt|;
block|}
comment|// Github repository for master branch (assume site)
name|addUrl
argument_list|(
name|urls
argument_list|,
literal|"https://github.com/"
operator|+
name|user
operator|+
literal|"/"
operator|+
name|repo
operator|+
literal|"/archive/master.zip"
argument_list|)
expr_stmt|;
return|return
name|urls
return|;
block|}
DECL|method|addUrl
specifier|private
specifier|static
name|void
name|addUrl
parameter_list|(
name|List
argument_list|<
name|URL
argument_list|>
name|urls
parameter_list|,
name|String
name|url
parameter_list|)
block|{
try|try
block|{
name|urls
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// We simply ignore malformed URL
block|}
block|}
DECL|method|distroFile
name|Path
name|distroFile
parameter_list|(
name|Environment
name|env
parameter_list|)
block|{
return|return
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
operator|+
literal|".zip"
argument_list|)
return|;
block|}
DECL|method|extractedDir
name|Path
name|extractedDir
parameter_list|(
name|Environment
name|env
parameter_list|)
block|{
return|return
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|binDir
name|Path
name|binDir
parameter_list|(
name|Environment
name|env
parameter_list|)
block|{
return|return
name|env
operator|.
name|homeFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|configDir
name|Path
name|configDir
parameter_list|(
name|Environment
name|env
parameter_list|)
block|{
return|return
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|parse
specifier|static
name|PluginHandle
name|parse
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|elements
init|=
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// We first consider the simplest form: pluginname
name|String
name|repo
init|=
name|elements
index|[
literal|0
index|]
decl_stmt|;
name|String
name|user
init|=
literal|null
decl_stmt|;
name|String
name|version
init|=
literal|null
decl_stmt|;
comment|// We consider the form: username/pluginname
if|if
condition|(
name|elements
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|user
operator|=
name|elements
index|[
literal|0
index|]
expr_stmt|;
name|repo
operator|=
name|elements
index|[
literal|1
index|]
expr_stmt|;
comment|// We consider the form: username/pluginname/version
if|if
condition|(
name|elements
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|version
operator|=
name|elements
index|[
literal|2
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|repo
operator|.
name|startsWith
argument_list|(
literal|"elasticsearch-"
argument_list|)
condition|)
block|{
comment|// remove elasticsearch- prefix
name|String
name|endname
init|=
name|repo
operator|.
name|substring
argument_list|(
literal|"elasticsearch-"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|PluginHandle
argument_list|(
name|endname
argument_list|,
name|version
argument_list|,
name|user
argument_list|,
name|repo
argument_list|)
return|;
block|}
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"es-"
argument_list|)
condition|)
block|{
comment|// remove es- prefix
name|String
name|endname
init|=
name|repo
operator|.
name|substring
argument_list|(
literal|"es-"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|PluginHandle
argument_list|(
name|endname
argument_list|,
name|version
argument_list|,
name|user
argument_list|,
name|repo
argument_list|)
return|;
block|}
return|return
operator|new
name|PluginHandle
argument_list|(
name|repo
argument_list|,
name|version
argument_list|,
name|user
argument_list|,
name|repo
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

