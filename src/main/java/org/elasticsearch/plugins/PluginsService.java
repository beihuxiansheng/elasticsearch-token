begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|PluginsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|LifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|CloseableIndexComponent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
operator|.
name|isAccessibleDirectory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PluginsService
specifier|public
class|class
name|PluginsService
extends|extends
name|AbstractComponent
block|{
DECL|field|ES_PLUGIN_PROPERTIES
specifier|private
specifier|static
specifier|final
name|String
name|ES_PLUGIN_PROPERTIES
init|=
literal|"es-plugin.properties"
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
comment|/**      * We keep around a list of jvm plugins      */
DECL|field|plugins
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|plugins
decl_stmt|;
DECL|field|onModuleReferences
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|Plugin
argument_list|,
name|List
argument_list|<
name|OnModuleReference
argument_list|>
argument_list|>
name|onModuleReferences
decl_stmt|;
DECL|field|cachedPluginsInfo
specifier|private
name|PluginsInfo
name|cachedPluginsInfo
decl_stmt|;
DECL|field|refreshInterval
specifier|private
specifier|final
name|TimeValue
name|refreshInterval
decl_stmt|;
DECL|field|lastRefresh
specifier|private
name|long
name|lastRefresh
decl_stmt|;
DECL|class|OnModuleReference
specifier|static
class|class
name|OnModuleReference
block|{
DECL|field|moduleClass
specifier|public
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleClass
decl_stmt|;
DECL|field|onModuleMethod
specifier|public
specifier|final
name|Method
name|onModuleMethod
decl_stmt|;
DECL|method|OnModuleReference
name|OnModuleReference
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleClass
parameter_list|,
name|Method
name|onModuleMethod
parameter_list|)
block|{
name|this
operator|.
name|moduleClass
operator|=
name|moduleClass
expr_stmt|;
name|this
operator|.
name|onModuleMethod
operator|=
name|onModuleMethod
expr_stmt|;
block|}
block|}
comment|/**      * Constructs a new PluginService      * @param settings The settings of the system      * @param environment The environment of the system      */
DECL|method|PluginsService
specifier|public
name|PluginsService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|environment
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|tupleBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// first we load all the default plugins from the settings
name|String
index|[]
name|defaultPluginsClasses
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"plugin.types"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pluginClass
range|:
name|defaultPluginsClasses
control|)
block|{
name|Plugin
name|plugin
init|=
name|PluginUtils
operator|.
name|loadPlugin
argument_list|(
name|pluginClass
argument_list|,
name|settings
argument_list|,
name|settings
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|PluginInfo
name|pluginInfo
init|=
operator|new
name|PluginInfo
argument_list|(
name|plugin
operator|.
name|name
argument_list|()
argument_list|,
name|plugin
operator|.
name|description
argument_list|()
argument_list|,
name|hasSite
argument_list|(
name|plugin
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|PluginInfo
operator|.
name|VERSION_NOT_AVAILABLE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"plugin loaded from settings [{}]"
argument_list|,
name|pluginInfo
argument_list|)
expr_stmt|;
block|}
name|tupleBuilder
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|(
name|pluginInfo
argument_list|,
name|plugin
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now, find all the ones that are in the classpath
name|tupleBuilder
operator|.
name|addAll
argument_list|(
name|loadPlugins
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|plugins
operator|=
name|tupleBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// We need to build a List of jvm and site plugins for checking mandatory plugins
name|Map
argument_list|<
name|String
argument_list|,
name|Plugin
argument_list|>
name|jvmPlugins
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sitePlugins
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|tuple
range|:
name|this
operator|.
name|plugins
control|)
block|{
name|jvmPlugins
operator|.
name|put
argument_list|(
name|tuple
operator|.
name|v2
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|tuple
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|isSite
argument_list|()
condition|)
block|{
name|sitePlugins
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we load site plugins
name|ImmutableList
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|tuples
init|=
name|loadSitePlugins
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|tuple
range|:
name|tuples
control|)
block|{
name|sitePlugins
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Checking expected plugins
name|String
index|[]
name|mandatoryPlugins
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"plugin.mandatory"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|mandatoryPlugins
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|missingPlugins
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mandatoryPlugin
range|:
name|mandatoryPlugins
control|)
block|{
if|if
condition|(
operator|!
name|jvmPlugins
operator|.
name|containsKey
argument_list|(
name|mandatoryPlugin
argument_list|)
operator|&&
operator|!
name|sitePlugins
operator|.
name|contains
argument_list|(
name|mandatoryPlugin
argument_list|)
operator|&&
operator|!
name|missingPlugins
operator|.
name|contains
argument_list|(
name|mandatoryPlugin
argument_list|)
condition|)
block|{
name|missingPlugins
operator|.
name|add
argument_list|(
name|mandatoryPlugin
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|missingPlugins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Missing mandatory plugins ["
operator|+
name|Strings
operator|.
name|collectionToDelimitedString
argument_list|(
name|missingPlugins
argument_list|,
literal|", "
argument_list|)
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"loaded {}, sites {}"
argument_list|,
name|jvmPlugins
operator|.
name|keySet
argument_list|()
argument_list|,
name|sitePlugins
argument_list|)
expr_stmt|;
name|MapBuilder
argument_list|<
name|Plugin
argument_list|,
name|List
argument_list|<
name|OnModuleReference
argument_list|>
argument_list|>
name|onModuleReferences
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|jvmPlugins
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|OnModuleReference
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|plugin
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"onModule"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|||
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Plugin: {} implementing onModule with no parameters or more than one parameter"
argument_list|,
name|plugin
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Class
name|moduleClass
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Module
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|moduleClass
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Plugin: {} implementing onModule by the type is not of Module type {}"
argument_list|,
name|plugin
operator|.
name|name
argument_list|()
argument_list|,
name|moduleClass
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|OnModuleReference
argument_list|(
name|moduleClass
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|onModuleReferences
operator|.
name|put
argument_list|(
name|plugin
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|onModuleReferences
operator|=
name|onModuleReferences
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|refreshInterval
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"info_refresh_interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|plugins
specifier|public
name|ImmutableList
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|plugins
parameter_list|()
block|{
return|return
name|plugins
return|;
block|}
DECL|method|processModules
specifier|public
name|void
name|processModules
parameter_list|(
name|Iterable
argument_list|<
name|Module
argument_list|>
name|modules
parameter_list|)
block|{
for|for
control|(
name|Module
name|module
range|:
name|modules
control|)
block|{
name|processModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processModule
specifier|public
name|void
name|processModule
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
argument_list|()
control|)
block|{
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|processModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
comment|// see if there are onModule references
name|List
argument_list|<
name|OnModuleReference
argument_list|>
name|references
init|=
name|onModuleReferences
operator|.
name|get
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OnModuleReference
name|reference
range|:
name|references
control|)
block|{
if|if
condition|(
name|reference
operator|.
name|moduleClass
operator|.
name|isAssignableFrom
argument_list|(
name|module
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|reference
operator|.
name|onModuleMethod
operator|.
name|invoke
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"plugin {}, failed to invoke custom onModule method"
argument_list|,
name|e
argument_list|,
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|updatedSettings
specifier|public
name|Settings
name|updatedSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|this
operator|.
name|settings
argument_list|)
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|additionalSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|modules
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|modules
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|modules
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|modules
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|modules
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|services
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LifecycleComponent
argument_list|>
argument_list|>
name|services
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LifecycleComponent
argument_list|>
argument_list|>
name|services
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|services
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|services
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
DECL|method|indexModules
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|indexModules
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|indexModules
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|indexModules
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|indexModules
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|indexModules
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|indexServices
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CloseableIndexComponent
argument_list|>
argument_list|>
name|indexServices
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CloseableIndexComponent
argument_list|>
argument_list|>
name|services
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|services
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|indexServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
DECL|method|shardModules
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|shardModules
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|shardModules
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|shardModules
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|shardModules
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|shardModules
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|shardServices
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CloseableIndexComponent
argument_list|>
argument_list|>
name|shardServices
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CloseableIndexComponent
argument_list|>
argument_list|>
name|services
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|services
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|shardServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
comment|/**      * Get information about plugins (jvm and site plugins).      * Information are cached for 10 seconds by default. Modify `plugins.info_refresh_interval` property if needed.      * Setting `plugins.info_refresh_interval` to `-1` will cause infinite caching.      * Setting `plugins.info_refresh_interval` to `0` will disable caching.      * @return List of plugins information      */
DECL|method|info
specifier|synchronized
specifier|public
name|PluginsInfo
name|info
parameter_list|()
block|{
if|if
condition|(
name|refreshInterval
operator|.
name|millis
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|cachedPluginsInfo
operator|!=
literal|null
operator|&&
operator|(
name|refreshInterval
operator|.
name|millis
argument_list|()
operator|<
literal|0
operator|||
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastRefresh
operator|)
operator|<
name|refreshInterval
operator|.
name|millis
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"using cache to retrieve plugins info"
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedPluginsInfo
return|;
block|}
name|lastRefresh
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"starting to fetch info on plugins"
argument_list|)
expr_stmt|;
block|}
name|cachedPluginsInfo
operator|=
operator|new
name|PluginsInfo
argument_list|()
expr_stmt|;
comment|// We first add all JvmPlugins
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|this
operator|.
name|plugins
control|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"adding jvm plugin [{}]"
argument_list|,
name|plugin
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cachedPluginsInfo
operator|.
name|add
argument_list|(
name|plugin
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We reload site plugins (in case of some changes)
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|loadSitePlugins
argument_list|()
control|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"adding site plugin [{}]"
argument_list|,
name|plugin
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cachedPluginsInfo
operator|.
name|add
argument_list|(
name|plugin
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedPluginsInfo
return|;
block|}
DECL|method|loadPlugins
specifier|private
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|loadPlugins
parameter_list|()
block|{
name|File
name|pluginsFile
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isAccessibleDirectory
argument_list|(
name|pluginsFile
argument_list|,
name|logger
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|pluginData
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|boolean
name|defaultIsolation
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"plugins.isolation"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
name|ClassLoader
name|esClassLoader
init|=
name|settings
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Method
name|addURL
init|=
literal|null
decl_stmt|;
name|boolean
name|discoveredAddUrl
init|=
literal|false
decl_stmt|;
name|File
index|[]
name|pluginsFiles
init|=
name|pluginsFile
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|pluginsFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|pluginRoot
range|:
name|pluginsFiles
control|)
block|{
if|if
condition|(
name|isAccessibleDirectory
argument_list|(
name|pluginRoot
argument_list|,
name|logger
argument_list|)
condition|)
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"--- adding plugin ["
operator|+
name|pluginRoot
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
comment|// check isolation
name|List
argument_list|<
name|File
argument_list|>
name|pluginClassPath
init|=
name|PluginUtils
operator|.
name|pluginClassPathAsFiles
argument_list|(
name|pluginRoot
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|pluginProperties
init|=
name|PluginUtils
operator|.
name|lookupPluginProperties
argument_list|(
name|pluginClassPath
argument_list|)
decl_stmt|;
name|boolean
name|isolated
init|=
name|PluginUtils
operator|.
name|lookupIsolation
argument_list|(
name|pluginProperties
argument_list|,
name|defaultIsolation
argument_list|)
decl_stmt|;
if|if
condition|(
name|isolated
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"--- creating isolated space for plugin ["
operator|+
name|pluginRoot
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|PluginClassLoader
name|pcl
init|=
operator|new
name|PluginClassLoader
argument_list|(
name|PluginUtils
operator|.
name|convertFileToUrl
argument_list|(
name|pluginClassPath
argument_list|)
argument_list|,
name|esClassLoader
argument_list|)
decl_stmt|;
name|pluginData
operator|.
name|addAll
argument_list|(
name|loadPlugin
argument_list|(
name|pluginClassPath
argument_list|,
name|pluginProperties
argument_list|,
name|pcl
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|discoveredAddUrl
condition|)
block|{
name|discoveredAddUrl
operator|=
literal|true
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|esClassLoaderClass
init|=
name|esClassLoader
operator|.
name|getClass
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|esClassLoaderClass
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|addURL
operator|=
name|esClassLoaderClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"addURL"
argument_list|,
name|URL
operator|.
name|class
argument_list|)
expr_stmt|;
name|addURL
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// no method, try the parent
name|esClassLoaderClass
operator|=
name|esClassLoaderClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|addURL
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to find addURL method on classLoader ["
operator|+
name|esClassLoader
operator|+
literal|"] to add methods"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|File
name|file
range|:
name|pluginClassPath
control|)
block|{
name|addURL
operator|.
name|invoke
argument_list|(
name|esClassLoader
argument_list|,
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pluginData
operator|.
name|addAll
argument_list|(
name|loadPlugin
argument_list|(
name|pluginClassPath
argument_list|,
name|pluginProperties
argument_list|,
name|esClassLoader
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to add plugin ["
operator|+
name|pluginRoot
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to list plugins from {}. Check your right access."
argument_list|,
name|pluginsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pluginData
return|;
block|}
DECL|method|loadPlugin
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|loadPlugin
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|pluginClassPath
parameter_list|,
name|List
argument_list|<
name|URL
argument_list|>
name|properties
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|boolean
name|isolation
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|plugins
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|entries
init|=
name|Collections
operator|.
name|enumeration
argument_list|(
name|properties
argument_list|)
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|pluginUrl
init|=
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Properties
name|pluginProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|pluginUrl
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|pluginProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|pluginClassName
init|=
name|pluginProps
operator|.
name|getProperty
argument_list|(
literal|"plugin"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pluginClassName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No plugin class specified"
argument_list|)
throw|;
block|}
name|String
name|pluginVersion
init|=
name|pluginProps
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|,
name|PluginInfo
operator|.
name|VERSION_NOT_AVAILABLE
argument_list|)
decl_stmt|;
name|Plugin
name|plugin
init|=
name|PluginUtils
operator|.
name|loadPlugin
argument_list|(
name|pluginClassName
argument_list|,
name|settings
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
comment|// Is it a site plugin as well? Does it have also an embedded _site structure
name|File
name|siteFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|environment
operator|.
name|pluginsFile
argument_list|()
argument_list|,
name|plugin
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
literal|"_site"
argument_list|)
decl_stmt|;
name|boolean
name|isSite
init|=
name|isAccessibleDirectory
argument_list|(
name|siteFile
argument_list|,
name|logger
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"found a jvm plugin [{}], [{}]{}"
argument_list|,
name|plugin
operator|.
name|name
argument_list|()
argument_list|,
name|plugin
operator|.
name|description
argument_list|()
argument_list|,
name|isSite
condition|?
literal|": with _site structure"
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
name|PluginInfo
name|pluginInfo
init|=
operator|new
name|PluginInfo
argument_list|(
name|plugin
operator|.
name|name
argument_list|()
argument_list|,
name|plugin
operator|.
name|description
argument_list|()
argument_list|,
name|isSite
argument_list|,
literal|true
argument_list|,
name|pluginVersion
argument_list|,
name|isolation
argument_list|)
decl_stmt|;
name|plugins
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|(
name|pluginInfo
argument_list|,
name|plugin
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to load plugin from ["
operator|+
name|pluginUrl
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|plugins
return|;
block|}
DECL|method|loadSitePlugins
specifier|private
name|ImmutableList
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|loadSitePlugins
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|sitePlugins
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|loadedJvmPlugins
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Already known jvm plugins are ignored
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|tuple
range|:
name|plugins
control|)
block|{
if|if
condition|(
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|isSite
argument_list|()
condition|)
block|{
name|loadedJvmPlugins
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let's try to find all _site plugins we did not already found
name|File
name|pluginsFile
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pluginsFile
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|pluginsFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|sitePlugins
operator|.
name|build
argument_list|()
return|;
block|}
for|for
control|(
name|File
name|pluginFile
range|:
name|pluginsFile
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loadedJvmPlugins
operator|.
name|contains
argument_list|(
name|pluginFile
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|sitePluginDir
init|=
operator|new
name|File
argument_list|(
name|pluginFile
argument_list|,
literal|"_site"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAccessibleDirectory
argument_list|(
name|sitePluginDir
argument_list|,
name|logger
argument_list|)
condition|)
block|{
comment|// We have a _site plugin. Let's try to get more information on it
name|String
name|name
init|=
name|pluginFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|PluginInfo
operator|.
name|VERSION_NOT_AVAILABLE
decl_stmt|;
name|String
name|description
init|=
name|PluginInfo
operator|.
name|DESCRIPTION_NOT_AVAILABLE
decl_stmt|;
comment|// We check if es-plugin.properties exists in plugin/_site dir
name|File
name|pluginPropFile
init|=
operator|new
name|File
argument_list|(
name|sitePluginDir
argument_list|,
name|ES_PLUGIN_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|pluginPropFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Properties
name|pluginProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|pluginPropFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pluginProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|description
operator|=
name|pluginProps
operator|.
name|getProperty
argument_list|(
literal|"description"
argument_list|,
name|PluginInfo
operator|.
name|DESCRIPTION_NOT_AVAILABLE
argument_list|)
expr_stmt|;
name|version
operator|=
name|pluginProps
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|,
name|PluginInfo
operator|.
name|VERSION_NOT_AVAILABLE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Can not load properties for this site plugin. Ignoring.
name|logger
operator|.
name|debug
argument_list|(
literal|"can not load {} file."
argument_list|,
name|e
argument_list|,
name|ES_PLUGIN_PROPERTIES
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"found a site plugin name [{}], version [{}], description [{}]"
argument_list|,
name|name
argument_list|,
name|version
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
name|sitePlugins
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|(
operator|new
name|PluginInfo
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|version
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sitePlugins
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * @param name plugin name      * @return if this jvm plugin has also a _site structure      */
DECL|method|hasSite
specifier|private
name|boolean
name|hasSite
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// Let's try to find all _site plugins we did not already found
name|File
name|pluginsFile
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pluginsFile
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|pluginsFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|File
name|sitePluginDir
init|=
operator|new
name|File
argument_list|(
name|pluginsFile
argument_list|,
name|name
operator|+
literal|"/_site"
argument_list|)
decl_stmt|;
return|return
name|isAccessibleDirectory
argument_list|(
name|sitePluginDir
argument_list|,
name|logger
argument_list|)
return|;
block|}
block|}
end_class

end_unit

