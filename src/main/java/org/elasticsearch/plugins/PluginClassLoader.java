begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|PluginClassLoader
specifier|public
class|class
name|PluginClassLoader
extends|extends
name|URLClassLoader
block|{
DECL|field|system
specifier|private
specifier|final
name|ClassLoader
name|system
decl_stmt|;
DECL|field|url
specifier|private
specifier|final
name|URL
name|url
decl_stmt|;
DECL|method|PluginClassLoader
name|PluginClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|urls
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|url
operator|=
operator|(
name|urls
operator|!=
literal|null
operator|&&
name|urls
operator|.
name|length
operator|>
literal|0
condition|?
name|urls
index|[
literal|0
index|]
else|:
literal|null
operator|)
expr_stmt|;
name|ClassLoader
name|sys
init|=
name|getSystemClassLoader
argument_list|()
decl_stmt|;
while|while
condition|(
name|sys
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sys
operator|=
name|sys
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|system
operator|=
name|sys
expr_stmt|;
block|}
comment|// load first from system class loader then fall back to this one
annotation|@
name|Override
DECL|method|loadClass
specifier|protected
specifier|synchronized
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|resolve
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|findLoadedClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
comment|// check system class loader (jvm& bootclasspath)
if|if
condition|(
name|system
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|system
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ignored
parameter_list|)
block|{                 }
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// check plugin classloader
name|c
operator|=
name|findClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// fall back to parent
name|c
operator|=
name|super
operator|.
name|loadClass
argument_list|(
name|name
argument_list|,
name|resolve
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|resolve
condition|)
block|{
name|resolveClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|getResource
specifier|public
name|URL
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// apply same rules frmo loadClass
name|URL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|system
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|system
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|findResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|super
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|url
return|;
block|}
annotation|@
name|Override
DECL|method|getResources
specifier|public
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|getResources
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|system
operator|!=
literal|null
condition|)
block|{
name|urls
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|list
argument_list|(
name|system
operator|.
name|getResources
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|urls
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|list
argument_list|(
name|findResources
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ClassLoader
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|urls
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|list
argument_list|(
name|parent
operator|.
name|getResources
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|urls
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"PluginClassLoader for url [%s], classpath [%s], systemCL [%s]"
argument_list|,
name|url
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|getURLs
argument_list|()
argument_list|)
argument_list|,
name|system
argument_list|)
return|;
block|}
block|}
end_class

end_unit

