begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Helper class for plugins  */
end_comment

begin_class
DECL|class|PluginsHelper
specifier|public
class|class
name|PluginsHelper
block|{
comment|/**      * Build a list of existing site plugins for a given environment      * @param environment We look into Environment#pluginsFile()      * @return A Set of existing site plugins      */
DECL|method|sitePlugins
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|sitePlugins
parameter_list|(
name|Environment
name|environment
parameter_list|)
block|{
name|File
name|pluginsFile
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|sitePlugins
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pluginsFile
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|pluginsFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|sitePlugins
return|;
block|}
for|for
control|(
name|File
name|pluginFile
range|:
name|pluginsFile
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|pluginFile
argument_list|,
literal|"_site"
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|sitePlugins
operator|.
name|add
argument_list|(
name|pluginFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sitePlugins
return|;
block|}
block|}
end_class

end_unit

