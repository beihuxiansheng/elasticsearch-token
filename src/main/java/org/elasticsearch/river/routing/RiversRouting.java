begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.river.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|RiverName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|RiversRouting
specifier|public
class|class
name|RiversRouting
implements|implements
name|Iterable
argument_list|<
name|RiverRouting
argument_list|>
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|RiversRouting
name|EMPTY
init|=
name|RiversRouting
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|rivers
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|RiverName
argument_list|,
name|RiverRouting
argument_list|>
name|rivers
decl_stmt|;
DECL|method|RiversRouting
specifier|private
name|RiversRouting
parameter_list|(
name|ImmutableMap
argument_list|<
name|RiverName
argument_list|,
name|RiverRouting
argument_list|>
name|rivers
parameter_list|)
block|{
name|this
operator|.
name|rivers
operator|=
name|rivers
expr_stmt|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|rivers
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|routing
specifier|public
name|RiverRouting
name|routing
parameter_list|(
name|RiverName
name|riverName
parameter_list|)
block|{
return|return
name|rivers
operator|.
name|get
argument_list|(
name|riverName
argument_list|)
return|;
block|}
DECL|method|hasRiverByName
specifier|public
name|boolean
name|hasRiverByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|RiverName
name|riverName
range|:
name|rivers
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|riverName
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|RiverRouting
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|rivers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|rivers
specifier|private
name|MapBuilder
argument_list|<
name|RiverName
argument_list|,
name|RiverRouting
argument_list|>
name|rivers
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|()
decl_stmt|;
DECL|method|routing
specifier|public
name|Builder
name|routing
parameter_list|(
name|RiversRouting
name|routing
parameter_list|)
block|{
name|rivers
operator|.
name|putAll
argument_list|(
name|routing
operator|.
name|rivers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|RiverRouting
name|routing
parameter_list|)
block|{
name|rivers
operator|.
name|put
argument_list|(
name|routing
operator|.
name|riverName
argument_list|()
argument_list|,
name|routing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|remove
specifier|public
name|Builder
name|remove
parameter_list|(
name|RiverRouting
name|routing
parameter_list|)
block|{
name|rivers
operator|.
name|remove
argument_list|(
name|routing
operator|.
name|riverName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|remove
specifier|public
name|Builder
name|remove
parameter_list|(
name|RiverName
name|riverName
parameter_list|)
block|{
name|rivers
operator|.
name|remove
argument_list|(
name|riverName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|remote
specifier|public
name|Builder
name|remote
parameter_list|(
name|String
name|riverName
parameter_list|)
block|{
for|for
control|(
name|RiverName
name|name
range|:
name|rivers
operator|.
name|map
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|riverName
argument_list|)
condition|)
block|{
name|rivers
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|RiversRouting
name|build
parameter_list|()
block|{
return|return
operator|new
name|RiversRouting
argument_list|(
name|rivers
operator|.
name|immutableMap
argument_list|()
argument_list|)
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|RiversRouting
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|RiverRouting
operator|.
name|readRiverRouting
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|RiversRouting
name|routing
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|routing
operator|.
name|rivers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RiverRouting
name|riverRouting
range|:
name|routing
control|)
block|{
name|riverRouting
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

