begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.mapper.attachments
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|mapper
operator|.
name|attachments
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_comment
comment|/** do NOT make public */
end_comment

begin_class
DECL|class|TikaImpl
specifier|final
class|class
name|TikaImpl
block|{
comment|/** subset of parsers for types we support */
DECL|field|PARSERS
specifier|private
specifier|static
specifier|final
name|Parser
name|PARSERS
index|[]
init|=
operator|new
name|Parser
index|[]
block|{
comment|// documents
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|HtmlParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|rtf
operator|.
name|RTFParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
operator|.
name|PDFParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|txt
operator|.
name|TXTParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OldExcelParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|OOXMLParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|odf
operator|.
name|OpenDocumentParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|iwork
operator|.
name|IWorkPackageParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|xml
operator|.
name|DcXMLParser
argument_list|()
block|,     }
decl_stmt|;
comment|/** autodetector based on this subset */
DECL|field|PARSER_INSTANCE
specifier|private
specifier|static
specifier|final
name|AutoDetectParser
name|PARSER_INSTANCE
init|=
operator|new
name|AutoDetectParser
argument_list|(
name|PARSERS
argument_list|)
decl_stmt|;
comment|/** singleton tika instance */
DECL|field|TIKA_INSTANCE
specifier|private
specifier|static
specifier|final
name|Tika
name|TIKA_INSTANCE
init|=
operator|new
name|Tika
argument_list|(
name|PARSER_INSTANCE
operator|.
name|getDetector
argument_list|()
argument_list|,
name|PARSER_INSTANCE
argument_list|)
decl_stmt|;
comment|/**      * parses with tika, throwing any exception hit while parsing the document      */
comment|// only package private for testing!
DECL|method|parse
specifier|static
name|String
name|parse
parameter_list|(
specifier|final
name|byte
name|content
index|[]
parameter_list|,
specifier|final
name|Metadata
name|metadata
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
comment|// check that its not unprivileged code like a script
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
name|sm
operator|.
name|checkPermission
argument_list|(
operator|new
name|SpecialPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|TikaException
throws|,
name|IOException
block|{
return|return
name|TIKA_INSTANCE
operator|.
name|parseToString
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|content
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
comment|// checked exception from tika: unbox it
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|TikaException
condition|)
block|{
throw|throw
operator|(
name|TikaException
operator|)
name|cause
throw|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

