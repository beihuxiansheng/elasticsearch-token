begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bulk.udp
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bulk
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|ChannelBufferBytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|PortsRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ConnectionlessBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioDatagramChannelFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|BulkUdpService
specifier|public
class|class
name|BulkUdpService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|BulkUdpService
argument_list|>
block|{
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|networkService
specifier|private
specifier|final
name|NetworkService
name|networkService
decl_stmt|;
DECL|field|enabled
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
DECL|field|host
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|final
name|String
name|port
decl_stmt|;
DECL|field|receiveBufferSize
specifier|final
name|ByteSizeValue
name|receiveBufferSize
decl_stmt|;
DECL|field|receiveBufferSizePredictorFactory
specifier|final
name|ReceiveBufferSizePredictorFactory
name|receiveBufferSizePredictorFactory
decl_stmt|;
DECL|field|bulkActions
specifier|final
name|int
name|bulkActions
decl_stmt|;
DECL|field|bulkSize
specifier|final
name|ByteSizeValue
name|bulkSize
decl_stmt|;
DECL|field|flushInterval
specifier|final
name|TimeValue
name|flushInterval
decl_stmt|;
DECL|field|concurrentRequests
specifier|final
name|int
name|concurrentRequests
decl_stmt|;
DECL|field|bulkProcessor
specifier|private
name|BulkProcessor
name|bulkProcessor
decl_stmt|;
DECL|field|bootstrap
specifier|private
name|ConnectionlessBootstrap
name|bootstrap
decl_stmt|;
DECL|field|channel
specifier|private
name|Channel
name|channel
decl_stmt|;
annotation|@
name|Inject
DECL|method|BulkUdpService
specifier|public
name|BulkUdpService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Client
name|client
parameter_list|,
name|NetworkService
name|networkService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"port"
argument_list|,
literal|"9700-9800"
argument_list|)
expr_stmt|;
name|this
operator|.
name|bulkActions
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"bulk_actions"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|bulkSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"bulk_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|5
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|flushInterval
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"flush_interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|concurrentRequests
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"concurrent_requests"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|this
operator|.
name|receiveBufferSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"receive_buffer_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|10
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|receiveBufferSizePredictorFactory
operator|=
operator|new
name|FixedReceiveBufferSizePredictorFactory
argument_list|(
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"receive_predictor_size"
argument_list|,
name|receiveBufferSize
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|enabled
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using enabled [{}], host [{}], port [{}], bulk_actions [{}], bulk_size [{}], flush_interval [{}], concurrent_requests [{}]"
argument_list|,
name|enabled
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|bulkActions
argument_list|,
name|bulkSize
argument_list|,
name|flushInterval
argument_list|,
name|concurrentRequests
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|bulkProcessor
operator|=
name|BulkProcessor
operator|.
name|builder
argument_list|(
name|client
argument_list|,
operator|new
name|BulkListener
argument_list|()
argument_list|)
operator|.
name|setBulkActions
argument_list|(
name|bulkActions
argument_list|)
operator|.
name|setBulkSize
argument_list|(
name|bulkSize
argument_list|)
operator|.
name|setFlushInterval
argument_list|(
name|flushInterval
argument_list|)
operator|.
name|setConcurrentRequests
argument_list|(
name|concurrentRequests
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|bootstrap
operator|=
operator|new
name|ConnectionlessBootstrap
argument_list|(
operator|new
name|NioDatagramChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"bulk_udp_worker"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
operator|.
name|bytesAsInt
argument_list|()
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSizePredictorFactory"
argument_list|,
name|receiveBufferSizePredictorFactory
argument_list|)
expr_stmt|;
comment|// Enable broadcast
name|bootstrap
operator|.
name|setOption
argument_list|(
literal|"broadcast"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
operator|new
name|Handler
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|InetAddress
name|hostAddressX
decl_stmt|;
try|try
block|{
name|hostAddressX
operator|=
name|networkService
operator|.
name|resolveBindHostAddress
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to resolve host {}"
argument_list|,
name|e
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|InetAddress
name|hostAddress
init|=
name|hostAddressX
decl_stmt|;
name|PortsRange
name|portsRange
init|=
operator|new
name|PortsRange
argument_list|(
name|port
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|portsRange
operator|.
name|iterate
argument_list|(
operator|new
name|PortsRange
operator|.
name|PortCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onPortNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
try|try
block|{
name|channel
operator|=
name|bootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|hostAddress
argument_list|,
name|portNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to bind to {}/{}"
argument_list|,
name|lastException
operator|.
name|get
argument_list|()
argument_list|,
name|hostAddress
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"address {}"
argument_list|,
name|channel
operator|.
name|getLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bootstrap
operator|!=
literal|null
condition|)
block|{
name|bootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
name|bulkProcessor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
DECL|class|Handler
class|class
name|Handler
extends|extends
name|SimpleChannelUpstreamHandler
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|MessageEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|ChannelBuffer
name|buffer
init|=
operator|(
name|ChannelBuffer
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"received message size [{}]"
argument_list|,
name|buffer
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|bulkProcessor
operator|.
name|add
argument_list|(
operator|new
name|ChannelBufferBytesReference
argument_list|(
name|buffer
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to execute bulk request"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|exceptionCaught
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|BindException
condition|)
block|{
comment|// ignore, this happens when we retry binding to several ports, its fine if we fail...
return|return;
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"failure caught"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BulkListener
class|class
name|BulkListener
implements|implements
name|BulkProcessor
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|beforeBulk
specifier|public
name|void
name|beforeBulk
parameter_list|(
name|long
name|executionId
parameter_list|,
name|BulkRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] executing [{}]/[{}]"
argument_list|,
name|executionId
argument_list|,
name|request
operator|.
name|numberOfActions
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|request
operator|.
name|estimatedSizeInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|afterBulk
specifier|public
name|void
name|afterBulk
parameter_list|(
name|long
name|executionId
parameter_list|,
name|BulkRequest
name|request
parameter_list|,
name|BulkResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] executed  [{}]/[{}], took [{}]"
argument_list|,
name|executionId
argument_list|,
name|request
operator|.
name|numberOfActions
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|request
operator|.
name|estimatedSizeInBytes
argument_list|()
argument_list|)
argument_list|,
name|response
operator|.
name|getTook
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasFailures
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to execute bulk request: {}"
argument_list|,
name|executionId
argument_list|,
name|response
operator|.
name|buildFailureMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|afterBulk
specifier|public
name|void
name|afterBulk
parameter_list|(
name|long
name|executionId
parameter_list|,
name|BulkRequest
name|request
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to execute bulk request"
argument_list|,
name|e
argument_list|,
name|executionId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

