begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|jsr166y
operator|.
name|LinkedTransferQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMinutes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueSeconds
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ThreadPool
specifier|public
class|class
name|ThreadPool
extends|extends
name|AbstractComponent
block|{
DECL|class|Names
specifier|public
specifier|static
class|class
name|Names
block|{
DECL|field|SAME
specifier|public
specifier|static
specifier|final
name|String
name|SAME
init|=
literal|"same"
decl_stmt|;
DECL|field|CACHED
specifier|public
specifier|static
specifier|final
name|String
name|CACHED
init|=
literal|"cached"
decl_stmt|;
DECL|field|INDEX
specifier|public
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"index"
decl_stmt|;
DECL|field|SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH
init|=
literal|"search"
decl_stmt|;
DECL|field|PERCOLATE
specifier|public
specifier|static
specifier|final
name|String
name|PERCOLATE
init|=
literal|"percolate"
decl_stmt|;
DECL|field|MANAGEMENT
specifier|public
specifier|static
specifier|final
name|String
name|MANAGEMENT
init|=
literal|"management"
decl_stmt|;
DECL|field|MERGE
specifier|public
specifier|static
specifier|final
name|String
name|MERGE
init|=
literal|"merge"
decl_stmt|;
DECL|field|REFRESH
specifier|public
specifier|static
specifier|final
name|String
name|REFRESH
init|=
literal|"refresh"
decl_stmt|;
DECL|field|SNAPSHOT
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT
init|=
literal|"snapshot"
decl_stmt|;
block|}
DECL|field|executors
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ExecutorHolder
argument_list|>
name|executors
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|scheduler
decl_stmt|;
DECL|field|estimatedTimeThread
specifier|private
specifier|final
name|EstimatedTimeThread
name|estimatedTimeThread
decl_stmt|;
DECL|method|ThreadPool
specifier|public
name|ThreadPool
parameter_list|()
block|{
name|this
argument_list|(
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|ThreadPool
specifier|public
name|ThreadPool
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
init|=
name|settings
operator|.
name|getGroups
argument_list|(
literal|"threadpool"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExecutorHolder
argument_list|>
name|executors
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|CACHED
argument_list|,
name|build
argument_list|(
name|Names
operator|.
name|CACHED
argument_list|,
literal|"cached"
argument_list|,
name|groupSettings
operator|.
name|get
argument_list|(
name|Names
operator|.
name|CACHED
argument_list|)
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"30s"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|INDEX
argument_list|,
name|build
argument_list|(
name|Names
operator|.
name|INDEX
argument_list|,
literal|"cached"
argument_list|,
name|groupSettings
operator|.
name|get
argument_list|(
name|Names
operator|.
name|INDEX
argument_list|)
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SEARCH
argument_list|,
name|build
argument_list|(
name|Names
operator|.
name|SEARCH
argument_list|,
literal|"cached"
argument_list|,
name|groupSettings
operator|.
name|get
argument_list|(
name|Names
operator|.
name|SEARCH
argument_list|)
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|PERCOLATE
argument_list|,
name|build
argument_list|(
name|Names
operator|.
name|PERCOLATE
argument_list|,
literal|"cached"
argument_list|,
name|groupSettings
operator|.
name|get
argument_list|(
name|Names
operator|.
name|PERCOLATE
argument_list|)
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|MANAGEMENT
argument_list|,
name|build
argument_list|(
name|Names
operator|.
name|MANAGEMENT
argument_list|,
literal|"scaling"
argument_list|,
name|groupSettings
operator|.
name|get
argument_list|(
name|Names
operator|.
name|MANAGEMENT
argument_list|)
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|20
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|MERGE
argument_list|,
name|build
argument_list|(
name|Names
operator|.
name|MERGE
argument_list|,
literal|"scaling"
argument_list|,
name|groupSettings
operator|.
name|get
argument_list|(
name|Names
operator|.
name|MERGE
argument_list|)
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|20
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|REFRESH
argument_list|,
name|build
argument_list|(
name|Names
operator|.
name|REFRESH
argument_list|,
literal|"cached"
argument_list|,
name|groupSettings
operator|.
name|get
argument_list|(
name|Names
operator|.
name|REFRESH
argument_list|)
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"1m"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SNAPSHOT
argument_list|,
name|build
argument_list|(
name|Names
operator|.
name|SNAPSHOT
argument_list|,
literal|"scaling"
argument_list|,
name|groupSettings
operator|.
name|get
argument_list|(
name|Names
operator|.
name|SNAPSHOT
argument_list|)
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|ExecutorHolder
argument_list|(
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|,
operator|new
name|Info
argument_list|(
name|Names
operator|.
name|SAME
argument_list|,
literal|"same"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|executors
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|executors
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
operator|(
name|ScheduledThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"[scheduler]"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|setExecuteExistingDelayedTasksAfterShutdownPolicy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|setContinueExistingPeriodicTasksAfterShutdownPolicy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TimeValue
name|estimatedTimeInterval
init|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"estimated_time_interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|200
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|estimatedTimeThread
operator|=
operator|new
name|EstimatedTimeThread
argument_list|(
name|EsExecutors
operator|.
name|threadName
argument_list|(
name|settings
argument_list|,
literal|"[timer]"
argument_list|)
argument_list|,
name|estimatedTimeInterval
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|estimatedTimeThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|estimatedTimeInMillis
specifier|public
name|long
name|estimatedTimeInMillis
parameter_list|()
block|{
return|return
name|estimatedTimeThread
operator|.
name|estimatedTimeInMillis
argument_list|()
return|;
block|}
DECL|method|info
specifier|public
name|ThreadPoolInfo
name|info
parameter_list|()
block|{
name|List
argument_list|<
name|Info
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<
name|Info
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExecutorHolder
name|holder
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|holder
operator|.
name|info
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// no need to have info on "same" thread pool
if|if
condition|(
literal|"same"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|infos
operator|.
name|add
argument_list|(
name|holder
operator|.
name|info
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ThreadPoolInfo
argument_list|(
name|infos
argument_list|)
return|;
block|}
DECL|method|stats
specifier|public
name|ThreadPoolStats
name|stats
parameter_list|()
block|{
name|List
argument_list|<
name|ThreadPoolStats
operator|.
name|Stats
argument_list|>
name|stats
init|=
operator|new
name|ArrayList
argument_list|<
name|ThreadPoolStats
operator|.
name|Stats
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExecutorHolder
name|holder
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|holder
operator|.
name|info
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// no need to have info on "same" thread pool
if|if
condition|(
literal|"same"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|threads
init|=
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|holder
operator|.
name|executor
operator|)
operator|.
name|getPoolSize
argument_list|()
decl_stmt|;
name|int
name|queue
init|=
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|holder
operator|.
name|executor
operator|)
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
operator|new
name|ThreadPoolStats
operator|.
name|Stats
argument_list|(
name|name
argument_list|,
name|threads
argument_list|,
name|queue
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ThreadPoolStats
argument_list|(
name|stats
argument_list|)
return|;
block|}
DECL|method|cached
specifier|public
name|Executor
name|cached
parameter_list|()
block|{
return|return
name|executor
argument_list|(
name|Names
operator|.
name|CACHED
argument_list|)
return|;
block|}
DECL|method|executor
specifier|public
name|Executor
name|executor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Executor
name|executor
init|=
name|executors
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|executor
decl_stmt|;
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No executor found for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|executor
return|;
block|}
DECL|method|scheduler
specifier|public
name|ScheduledExecutorService
name|scheduler
parameter_list|()
block|{
return|return
name|this
operator|.
name|scheduler
return|;
block|}
DECL|method|scheduleWithFixedDelay
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|TimeValue
name|interval
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|LoggingRunnable
argument_list|(
name|command
argument_list|)
argument_list|,
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
DECL|method|schedule
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|schedule
parameter_list|(
name|TimeValue
name|delay
parameter_list|,
name|String
name|name
parameter_list|,
name|Runnable
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Names
operator|.
name|SAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|command
operator|=
operator|new
name|ThreadedRunnable
argument_list|(
name|command
argument_list|,
name|executor
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scheduler
operator|.
name|schedule
argument_list|(
name|command
argument_list|,
name|delay
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|estimatedTimeThread
operator|.
name|running
operator|=
literal|false
expr_stmt|;
name|estimatedTimeThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|ExecutorHolder
name|executor
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|executor
operator|.
name|executor
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|.
name|executor
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|shutdownNow
specifier|public
name|void
name|shutdownNow
parameter_list|()
block|{
name|estimatedTimeThread
operator|.
name|running
operator|=
literal|false
expr_stmt|;
name|estimatedTimeThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
for|for
control|(
name|ExecutorHolder
name|executor
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|executor
operator|.
name|executor
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|.
name|executor
operator|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|awaitTermination
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|result
init|=
name|scheduler
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
for|for
control|(
name|ExecutorHolder
name|executor
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|executor
operator|.
name|executor
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
name|result
operator|&=
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|.
name|executor
operator|)
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|build
specifier|private
name|ExecutorHolder
name|build
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultType
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|settings
parameter_list|,
name|Settings
name|defaultSettings
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|==
literal|null
condition|)
block|{
name|settings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|String
name|type
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|,
name|defaultType
argument_list|)
decl_stmt|;
name|ThreadFactory
name|threadFactory
init|=
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"same"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"cached"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|TimeValue
name|keepAlive
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|defaultSettings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}], keep_alive [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
name|Executor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|keepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|threadFactory
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|keepAlive
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"fixed"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|int
name|size
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|SizeValue
name|capacity
init|=
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"capacity"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
name|defaultSettings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RejectedExecutionHandler
name|rejectedExecutionHandler
decl_stmt|;
name|String
name|rejectSetting
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"reject_policy"
argument_list|,
name|defaultSettings
operator|.
name|get
argument_list|(
literal|"reject_policy"
argument_list|,
literal|"abort"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"abort"
operator|.
name|equals
argument_list|(
name|rejectSetting
argument_list|)
condition|)
block|{
name|rejectedExecutionHandler
operator|=
operator|new
name|ThreadPoolExecutor
operator|.
name|AbortPolicy
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"caller"
operator|.
name|equals
argument_list|(
name|rejectSetting
argument_list|)
condition|)
block|{
name|rejectedExecutionHandler
operator|=
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"reject_policy ["
operator|+
name|rejectSetting
operator|+
literal|"] not valid for ["
operator|+
name|name
operator|+
literal|"] thread pool"
argument_list|)
throw|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|capacity
argument_list|,
name|rejectSetting
argument_list|)
expr_stmt|;
name|Executor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|size
argument_list|,
name|size
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|capacity
operator|==
literal|null
condition|?
operator|new
name|LinkedTransferQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
else|:
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
operator|(
name|int
operator|)
name|capacity
operator|.
name|singles
argument_list|()
argument_list|)
argument_list|,
name|threadFactory
argument_list|,
name|rejectedExecutionHandler
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|capacity
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"scaling"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|TimeValue
name|keepAlive
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|defaultSettings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"max"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}], min [{}], size [{}], keep_alive [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
name|Executor
name|executor
init|=
name|EsExecutors
operator|.
name|newScalingExecutorService
argument_list|(
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|threadFactory
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"blocking"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|TimeValue
name|keepAlive
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|defaultSettings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"max"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SizeValue
name|capacity
init|=
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"capacity"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
name|defaultSettings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
operator|new
name|SizeValue
argument_list|(
literal|1000
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TimeValue
name|waitTime
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"wait_time"
argument_list|,
name|defaultSettings
operator|.
name|getAsTime
argument_list|(
literal|"wait_time"
argument_list|,
name|timeValueSeconds
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}], min [{}], size [{}], queue_size [{}], keep_alive [{}], wait_time [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|capacity
operator|.
name|singles
argument_list|()
argument_list|,
name|keepAlive
argument_list|,
name|waitTime
argument_list|)
expr_stmt|;
name|Executor
name|executor
init|=
name|EsExecutors
operator|.
name|newBlockingExecutorService
argument_list|(
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|threadFactory
argument_list|,
operator|(
name|int
operator|)
name|capacity
operator|.
name|singles
argument_list|()
argument_list|,
name|waitTime
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
argument_list|,
name|capacity
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No type found ["
operator|+
name|type
operator|+
literal|"], for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|class|LoggingRunnable
class|class
name|LoggingRunnable
implements|implements
name|Runnable
block|{
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|method|LoggingRunnable
name|LoggingRunnable
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to run {}"
argument_list|,
name|e
argument_list|,
name|runnable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|runnable
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|runnable
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[threaded] "
operator|+
name|runnable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|ThreadedRunnable
class|class
name|ThreadedRunnable
implements|implements
name|Runnable
block|{
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|method|ThreadedRunnable
name|ThreadedRunnable
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|runnable
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|runnable
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[threaded] "
operator|+
name|runnable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|EstimatedTimeThread
specifier|static
class|class
name|EstimatedTimeThread
extends|extends
name|Thread
block|{
DECL|field|interval
specifier|final
name|long
name|interval
decl_stmt|;
DECL|field|running
specifier|volatile
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|field|estimatedTimeInMillis
specifier|volatile
name|long
name|estimatedTimeInMillis
decl_stmt|;
DECL|method|EstimatedTimeThread
name|EstimatedTimeThread
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|estimatedTimeInMillis
specifier|public
name|long
name|estimatedTimeInMillis
parameter_list|()
block|{
return|return
name|this
operator|.
name|estimatedTimeInMillis
return|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|estimatedTimeInMillis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
return|return;
block|}
try|try
block|{
name|FileSystemUtils
operator|.
name|checkMkdirsStall
argument_list|(
name|estimatedTimeInMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
DECL|class|ExecutorHolder
specifier|static
class|class
name|ExecutorHolder
block|{
DECL|field|executor
specifier|public
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|field|info
specifier|public
specifier|final
name|Info
name|info
decl_stmt|;
DECL|method|ExecutorHolder
name|ExecutorHolder
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
block|}
DECL|class|Info
specifier|public
specifier|static
class|class
name|Info
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|min
specifier|private
name|int
name|min
decl_stmt|;
DECL|field|max
specifier|private
name|int
name|max
decl_stmt|;
DECL|field|keepAlive
specifier|private
name|TimeValue
name|keepAlive
decl_stmt|;
DECL|field|capacity
specifier|private
name|SizeValue
name|capacity
decl_stmt|;
DECL|method|Info
name|Info
parameter_list|()
block|{          }
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
annotation|@
name|Nullable
name|TimeValue
name|keepAlive
parameter_list|,
annotation|@
name|Nullable
name|SizeValue
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|keepAlive
operator|=
name|keepAlive
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|min
specifier|public
name|int
name|min
parameter_list|()
block|{
return|return
name|this
operator|.
name|min
return|;
block|}
DECL|method|getMin
specifier|public
name|int
name|getMin
parameter_list|()
block|{
return|return
name|this
operator|.
name|min
return|;
block|}
DECL|method|max
specifier|public
name|int
name|max
parameter_list|()
block|{
return|return
name|this
operator|.
name|max
return|;
block|}
DECL|method|getMax
specifier|public
name|int
name|getMax
parameter_list|()
block|{
return|return
name|this
operator|.
name|max
return|;
block|}
annotation|@
name|Nullable
DECL|method|keepAlive
specifier|public
name|TimeValue
name|keepAlive
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepAlive
return|;
block|}
annotation|@
name|Nullable
DECL|method|getKeepAlive
specifier|public
name|TimeValue
name|getKeepAlive
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepAlive
return|;
block|}
annotation|@
name|Nullable
DECL|method|capacity
specifier|public
name|SizeValue
name|capacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|capacity
return|;
block|}
annotation|@
name|Nullable
DECL|method|getCapacity
specifier|public
name|SizeValue
name|getCapacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|capacity
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|min
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|max
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|keepAlive
operator|=
name|TimeValue
operator|.
name|readTimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|capacity
operator|=
name|SizeValue
operator|.
name|readSizeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|keepAlive
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|keepAlive
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|capacity
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|capacity
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min"
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|max
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max"
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keepAlive
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"keep_alive"
argument_list|,
name|keepAlive
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|capacity
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"capacity"
argument_list|,
name|capacity
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

