begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
operator|.
name|newMapBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMinutes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueSeconds
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ThreadPool
specifier|public
class|class
name|ThreadPool
extends|extends
name|AbstractComponent
block|{
DECL|class|Names
specifier|public
specifier|static
class|class
name|Names
block|{
DECL|field|SAME
specifier|public
specifier|static
specifier|final
name|String
name|SAME
init|=
literal|"same"
decl_stmt|;
DECL|field|GENERIC
specifier|public
specifier|static
specifier|final
name|String
name|GENERIC
init|=
literal|"generic"
decl_stmt|;
DECL|field|GET
specifier|public
specifier|static
specifier|final
name|String
name|GET
init|=
literal|"get"
decl_stmt|;
DECL|field|INDEX
specifier|public
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"index"
decl_stmt|;
DECL|field|BULK
specifier|public
specifier|static
specifier|final
name|String
name|BULK
init|=
literal|"bulk"
decl_stmt|;
DECL|field|SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH
init|=
literal|"search"
decl_stmt|;
DECL|field|PERCOLATE
specifier|public
specifier|static
specifier|final
name|String
name|PERCOLATE
init|=
literal|"percolate"
decl_stmt|;
DECL|field|MANAGEMENT
specifier|public
specifier|static
specifier|final
name|String
name|MANAGEMENT
init|=
literal|"management"
decl_stmt|;
DECL|field|FLUSH
specifier|public
specifier|static
specifier|final
name|String
name|FLUSH
init|=
literal|"flush"
decl_stmt|;
DECL|field|MERGE
specifier|public
specifier|static
specifier|final
name|String
name|MERGE
init|=
literal|"merge"
decl_stmt|;
DECL|field|CACHE
specifier|public
specifier|static
specifier|final
name|String
name|CACHE
init|=
literal|"cache"
decl_stmt|;
DECL|field|REFRESH
specifier|public
specifier|static
specifier|final
name|String
name|REFRESH
init|=
literal|"refresh"
decl_stmt|;
DECL|field|SNAPSHOT
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT
init|=
literal|"snapshot"
decl_stmt|;
block|}
DECL|field|THREADPOOL_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|THREADPOOL_GROUP
init|=
literal|"threadpool."
decl_stmt|;
DECL|field|executors
specifier|private
specifier|volatile
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ExecutorHolder
argument_list|>
name|executors
decl_stmt|;
DECL|field|defaultExecutorTypeSettings
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|defaultExecutorTypeSettings
decl_stmt|;
DECL|field|retiredExecutors
specifier|private
specifier|final
name|Queue
argument_list|<
name|ExecutorHolder
argument_list|>
name|retiredExecutors
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|ExecutorHolder
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|scheduler
decl_stmt|;
DECL|field|estimatedTimeThread
specifier|private
specifier|final
name|EstimatedTimeThread
name|estimatedTimeThread
decl_stmt|;
DECL|method|ThreadPool
specifier|public
name|ThreadPool
parameter_list|()
block|{
name|this
argument_list|(
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|ThreadPool
specifier|public
name|ThreadPool
parameter_list|(
name|Settings
name|settings
parameter_list|,
annotation|@
name|Nullable
name|NodeSettingsService
name|nodeSettingsService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
init|=
name|settings
operator|.
name|getGroups
argument_list|(
name|THREADPOOL_GROUP
argument_list|)
decl_stmt|;
name|defaultExecutorTypeSettings
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|Settings
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Names
operator|.
name|GENERIC
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"cached"
argument_list|)
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"30s"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|INDEX
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"cached"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|BULK
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"cached"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|GET
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"cached"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SEARCH
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"cached"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|PERCOLATE
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"cached"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|MANAGEMENT
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"scaling"
argument_list|)
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|FLUSH
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"scaling"
argument_list|)
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|10
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|MERGE
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"scaling"
argument_list|)
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|20
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|REFRESH
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"scaling"
argument_list|)
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|10
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|CACHE
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"scaling"
argument_list|)
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|4
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SNAPSHOT
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"scaling"
argument_list|)
operator|.
name|put
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExecutorHolder
argument_list|>
name|executors
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|executor
range|:
name|defaultExecutorTypeSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|executors
operator|.
name|put
argument_list|(
name|executor
operator|.
name|getKey
argument_list|()
argument_list|,
name|build
argument_list|(
name|executor
operator|.
name|getKey
argument_list|()
argument_list|,
name|groupSettings
operator|.
name|get
argument_list|(
name|executor
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|executor
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|ExecutorHolder
argument_list|(
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|,
operator|new
name|Info
argument_list|(
name|Names
operator|.
name|SAME
argument_list|,
literal|"same"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|executors
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|executors
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
operator|(
name|ScheduledThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"scheduler"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|setExecuteExistingDelayedTasksAfterShutdownPolicy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|setContinueExistingPeriodicTasksAfterShutdownPolicy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeSettingsService
operator|!=
literal|null
condition|)
block|{
name|nodeSettingsService
operator|.
name|addListener
argument_list|(
operator|new
name|ApplySettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TimeValue
name|estimatedTimeInterval
init|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"estimated_time_interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|200
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|estimatedTimeThread
operator|=
operator|new
name|EstimatedTimeThread
argument_list|(
name|EsExecutors
operator|.
name|threadName
argument_list|(
name|settings
argument_list|,
literal|"[timer]"
argument_list|)
argument_list|,
name|estimatedTimeInterval
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|estimatedTimeThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|estimatedTimeInMillis
specifier|public
name|long
name|estimatedTimeInMillis
parameter_list|()
block|{
return|return
name|estimatedTimeThread
operator|.
name|estimatedTimeInMillis
argument_list|()
return|;
block|}
DECL|method|info
specifier|public
name|ThreadPoolInfo
name|info
parameter_list|()
block|{
name|List
argument_list|<
name|Info
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<
name|Info
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExecutorHolder
name|holder
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|holder
operator|.
name|info
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// no need to have info on "same" thread pool
if|if
condition|(
literal|"same"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|infos
operator|.
name|add
argument_list|(
name|holder
operator|.
name|info
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ThreadPoolInfo
argument_list|(
name|infos
argument_list|)
return|;
block|}
DECL|method|stats
specifier|public
name|ThreadPoolStats
name|stats
parameter_list|()
block|{
name|List
argument_list|<
name|ThreadPoolStats
operator|.
name|Stats
argument_list|>
name|stats
init|=
operator|new
name|ArrayList
argument_list|<
name|ThreadPoolStats
operator|.
name|Stats
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExecutorHolder
name|holder
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|holder
operator|.
name|info
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// no need to have info on "same" thread pool
if|if
condition|(
literal|"same"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|threads
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|queue
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|active
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|rejected
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|largest
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|completed
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|holder
operator|.
name|executor
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
name|ThreadPoolExecutor
name|threadPoolExecutor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|holder
operator|.
name|executor
decl_stmt|;
name|threads
operator|=
name|threadPoolExecutor
operator|.
name|getPoolSize
argument_list|()
expr_stmt|;
name|queue
operator|=
name|threadPoolExecutor
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|active
operator|=
name|threadPoolExecutor
operator|.
name|getActiveCount
argument_list|()
expr_stmt|;
name|largest
operator|=
name|threadPoolExecutor
operator|.
name|getLargestPoolSize
argument_list|()
expr_stmt|;
name|completed
operator|=
name|threadPoolExecutor
operator|.
name|getCompletedTaskCount
argument_list|()
expr_stmt|;
name|RejectedExecutionHandler
name|rejectedExecutionHandler
init|=
name|threadPoolExecutor
operator|.
name|getRejectedExecutionHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|rejectedExecutionHandler
operator|instanceof
name|XRejectedExecutionHandler
condition|)
block|{
name|rejected
operator|=
operator|(
operator|(
name|XRejectedExecutionHandler
operator|)
name|rejectedExecutionHandler
operator|)
operator|.
name|rejected
argument_list|()
expr_stmt|;
block|}
block|}
name|stats
operator|.
name|add
argument_list|(
operator|new
name|ThreadPoolStats
operator|.
name|Stats
argument_list|(
name|name
argument_list|,
name|threads
argument_list|,
name|queue
argument_list|,
name|active
argument_list|,
name|rejected
argument_list|,
name|largest
argument_list|,
name|completed
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ThreadPoolStats
argument_list|(
name|stats
argument_list|)
return|;
block|}
DECL|method|generic
specifier|public
name|Executor
name|generic
parameter_list|()
block|{
return|return
name|executor
argument_list|(
name|Names
operator|.
name|GENERIC
argument_list|)
return|;
block|}
DECL|method|executor
specifier|public
name|Executor
name|executor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Executor
name|executor
init|=
name|executors
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|executor
decl_stmt|;
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No executor found for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|executor
return|;
block|}
DECL|method|scheduler
specifier|public
name|ScheduledExecutorService
name|scheduler
parameter_list|()
block|{
return|return
name|this
operator|.
name|scheduler
return|;
block|}
DECL|method|scheduleWithFixedDelay
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|TimeValue
name|interval
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|LoggingRunnable
argument_list|(
name|command
argument_list|)
argument_list|,
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
DECL|method|schedule
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|schedule
parameter_list|(
name|TimeValue
name|delay
parameter_list|,
name|String
name|name
parameter_list|,
name|Runnable
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Names
operator|.
name|SAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|command
operator|=
operator|new
name|ThreadedRunnable
argument_list|(
name|command
argument_list|,
name|executor
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scheduler
operator|.
name|schedule
argument_list|(
name|command
argument_list|,
name|delay
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|estimatedTimeThread
operator|.
name|running
operator|=
literal|false
expr_stmt|;
name|estimatedTimeThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|ExecutorHolder
name|executor
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|executor
operator|.
name|executor
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|.
name|executor
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|shutdownNow
specifier|public
name|void
name|shutdownNow
parameter_list|()
block|{
name|estimatedTimeThread
operator|.
name|running
operator|=
literal|false
expr_stmt|;
name|estimatedTimeThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
for|for
control|(
name|ExecutorHolder
name|executor
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|executor
operator|.
name|executor
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|.
name|executor
operator|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|!
name|retiredExecutors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|retiredExecutors
operator|.
name|remove
argument_list|()
operator|.
name|executor
operator|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|awaitTermination
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|result
init|=
name|scheduler
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
for|for
control|(
name|ExecutorHolder
name|executor
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|executor
operator|.
name|executor
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
name|result
operator|&=
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|.
name|executor
operator|)
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|!
name|retiredExecutors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|&=
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|retiredExecutors
operator|.
name|remove
argument_list|()
operator|.
name|executor
operator|)
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|build
specifier|private
name|ExecutorHolder
name|build
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|settings
parameter_list|,
name|Settings
name|defaultSettings
parameter_list|)
block|{
return|return
name|rebuild
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|settings
argument_list|,
name|defaultSettings
argument_list|)
return|;
block|}
DECL|method|rebuild
specifier|private
name|ExecutorHolder
name|rebuild
parameter_list|(
name|String
name|name
parameter_list|,
name|ExecutorHolder
name|previousExecutorHolder
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|settings
parameter_list|,
name|Settings
name|defaultSettings
parameter_list|)
block|{
if|if
condition|(
name|Names
operator|.
name|SAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// Don't allow to change the "same" thread executor
return|return
name|previousExecutorHolder
return|;
block|}
if|if
condition|(
name|settings
operator|==
literal|null
condition|)
block|{
name|settings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|Info
name|previousInfo
init|=
name|previousExecutorHolder
operator|!=
literal|null
condition|?
name|previousExecutorHolder
operator|.
name|info
else|:
literal|null
decl_stmt|;
name|String
name|type
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|,
name|previousInfo
operator|!=
literal|null
condition|?
name|previousInfo
operator|.
name|type
argument_list|()
else|:
name|defaultSettings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
name|ThreadFactory
name|threadFactory
init|=
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"same"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|previousExecutorHolder
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating thread_pool [{}], type [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"cached"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|TimeValue
name|defaultKeepAlive
init|=
name|defaultSettings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousExecutorHolder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"cached"
operator|.
name|equals
argument_list|(
name|previousInfo
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
name|TimeValue
name|updatedKeepAlive
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|previousInfo
operator|.
name|keepAlive
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|previousInfo
operator|.
name|keepAlive
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedKeepAlive
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating thread_pool [{}], type [{}], keep_alive [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|updatedKeepAlive
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setKeepAliveTime
argument_list|(
name|updatedKeepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|previousExecutorHolder
operator|.
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|updatedKeepAlive
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
return|return
name|previousExecutorHolder
return|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|keepAlive
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|defaultKeepAlive
operator|=
name|previousInfo
operator|.
name|keepAlive
argument_list|()
expr_stmt|;
block|}
block|}
name|TimeValue
name|keepAlive
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|defaultKeepAlive
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousExecutorHolder
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating thread_pool [{}], type [{}], keep_alive [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}], keep_alive [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
block|}
name|Executor
name|executor
init|=
operator|new
name|EsThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|keepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|threadFactory
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|keepAlive
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"fixed"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|int
name|defaultSize
init|=
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|5
argument_list|)
decl_stmt|;
name|SizeValue
name|defaultCapacity
init|=
name|defaultSettings
operator|.
name|getAsSize
argument_list|(
literal|"queue"
argument_list|,
name|defaultSettings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|defaultRejectSetting
init|=
name|defaultSettings
operator|.
name|get
argument_list|(
literal|"reject_policy"
argument_list|,
literal|"abort"
argument_list|)
decl_stmt|;
name|String
name|defaultQueueType
init|=
name|defaultSettings
operator|.
name|get
argument_list|(
literal|"queue_type"
argument_list|,
literal|"linked"
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousExecutorHolder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"fixed"
operator|.
name|equals
argument_list|(
name|previousInfo
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
name|SizeValue
name|updatedCapacity
init|=
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"capacity"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
name|previousInfo
operator|.
name|capacity
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|updatedQueueType
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"queue_type"
argument_list|,
name|previousInfo
operator|.
name|queueType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|previousInfo
operator|.
name|capacity
argument_list|()
argument_list|,
name|updatedCapacity
argument_list|)
operator|&&
name|previousInfo
operator|.
name|queueType
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedQueueType
argument_list|)
condition|)
block|{
name|int
name|updatedSize
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|previousInfo
operator|.
name|max
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|updatedRejectSetting
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"reject_policy"
argument_list|,
name|previousInfo
operator|.
name|rejectSetting
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousInfo
operator|.
name|max
argument_list|()
operator|!=
name|updatedSize
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}], queue_type [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|updatedSize
argument_list|,
name|updatedCapacity
argument_list|,
name|updatedRejectSetting
argument_list|,
name|updatedQueueType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setCorePoolSize
argument_list|(
name|updatedSize
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setMaximumPoolSize
argument_list|(
name|updatedSize
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|previousExecutorHolder
operator|.
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|updatedSize
argument_list|,
name|updatedSize
argument_list|,
literal|null
argument_list|,
name|updatedCapacity
argument_list|,
literal|null
argument_list|,
name|updatedRejectSetting
argument_list|,
name|updatedQueueType
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|previousInfo
operator|.
name|rejectSetting
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedRejectSetting
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}], queue_type [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|updatedSize
argument_list|,
name|updatedCapacity
argument_list|,
name|updatedRejectSetting
argument_list|,
name|updatedQueueType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setRejectedExecutionHandler
argument_list|(
name|newRejectedExecutionHandler
argument_list|(
name|name
argument_list|,
name|updatedRejectSetting
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|previousExecutorHolder
operator|.
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|updatedSize
argument_list|,
name|updatedSize
argument_list|,
literal|null
argument_list|,
name|updatedCapacity
argument_list|,
literal|null
argument_list|,
name|updatedRejectSetting
argument_list|,
name|updatedQueueType
argument_list|)
argument_list|)
return|;
block|}
return|return
name|previousExecutorHolder
return|;
block|}
block|}
if|if
condition|(
name|previousInfo
operator|.
name|max
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|defaultSize
operator|=
name|previousInfo
operator|.
name|max
argument_list|()
expr_stmt|;
block|}
name|defaultCapacity
operator|=
name|previousInfo
operator|.
name|capacity
argument_list|()
expr_stmt|;
if|if
condition|(
name|previousInfo
operator|.
name|rejectSetting
operator|!=
literal|null
condition|)
block|{
name|defaultRejectSetting
operator|=
name|previousInfo
operator|.
name|rejectSetting
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|queueType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|defaultQueueType
operator|=
name|previousInfo
operator|.
name|queueType
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|size
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|defaultSize
argument_list|)
decl_stmt|;
name|SizeValue
name|capacity
init|=
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"capacity"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
name|defaultCapacity
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rejectSetting
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"reject_policy"
argument_list|,
name|defaultRejectSetting
argument_list|)
decl_stmt|;
name|RejectedExecutionHandler
name|rejectedExecutionHandler
init|=
name|newRejectedExecutionHandler
argument_list|(
name|name
argument_list|,
name|rejectSetting
argument_list|)
decl_stmt|;
name|String
name|queueType
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"queue_type"
argument_list|,
name|defaultQueueType
argument_list|)
decl_stmt|;
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|workQueue
init|=
name|newQueue
argument_list|(
name|capacity
argument_list|,
name|queueType
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}], queue_type [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|capacity
argument_list|,
name|rejectSetting
argument_list|,
name|queueType
argument_list|)
expr_stmt|;
name|Executor
name|executor
init|=
operator|new
name|EsThreadPoolExecutor
argument_list|(
name|size
argument_list|,
name|size
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|workQueue
argument_list|,
name|threadFactory
argument_list|,
name|rejectedExecutionHandler
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|capacity
argument_list|,
literal|null
argument_list|,
name|rejectSetting
argument_list|,
name|queueType
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"scaling"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|TimeValue
name|defaultKeepAlive
init|=
name|defaultSettings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|defaultMin
init|=
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|defaultSize
init|=
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousExecutorHolder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"scaling"
operator|.
name|equals
argument_list|(
name|previousInfo
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|TimeValue
name|updatedKeepAlive
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|updatedMin
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
name|previousInfo
operator|.
name|getMin
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|updatedSize
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"max"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|previousInfo
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|previousInfo
operator|.
name|keepAlive
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedKeepAlive
argument_list|)
operator|||
name|previousInfo
operator|.
name|min
argument_list|()
operator|!=
name|updatedMin
operator|||
name|previousInfo
operator|.
name|max
argument_list|()
operator|!=
name|updatedSize
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating thread_pool [{}], type [{}], keep_alive [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|updatedKeepAlive
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedKeepAlive
argument_list|)
condition|)
block|{
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setKeepAliveTime
argument_list|(
name|updatedKeepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getMin
argument_list|()
operator|!=
name|updatedMin
condition|)
block|{
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setCorePoolSize
argument_list|(
name|updatedMin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getMax
argument_list|()
operator|!=
name|updatedSize
condition|)
block|{
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setMaximumPoolSize
argument_list|(
name|updatedSize
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|previousExecutorHolder
operator|.
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|updatedMin
argument_list|,
name|updatedSize
argument_list|,
name|updatedKeepAlive
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
return|return
name|previousExecutorHolder
return|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|defaultKeepAlive
operator|=
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getMin
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|defaultMin
operator|=
name|previousInfo
operator|.
name|getMin
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getMax
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|defaultSize
operator|=
name|previousInfo
operator|.
name|getMax
argument_list|()
expr_stmt|;
block|}
block|}
name|TimeValue
name|keepAlive
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|defaultKeepAlive
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
name|defaultMin
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"max"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|defaultSize
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousExecutorHolder
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating thread_pool [{}], type [{}], min [{}], size [{}], keep_alive [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}], min [{}], size [{}], keep_alive [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
block|}
name|Executor
name|executor
init|=
name|EsExecutors
operator|.
name|newScalingExecutorService
argument_list|(
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|threadFactory
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"blocking"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|TimeValue
name|defaultKeepAlive
init|=
name|defaultSettings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|defaultMin
init|=
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|defaultSize
init|=
name|defaultSettings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|5
argument_list|)
decl_stmt|;
name|SizeValue
name|defaultCapacity
init|=
name|defaultSettings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
operator|new
name|SizeValue
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|TimeValue
name|defaultWaitTime
init|=
name|defaultSettings
operator|.
name|getAsTime
argument_list|(
literal|"wait_time"
argument_list|,
name|timeValueSeconds
argument_list|(
literal|60
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousExecutorHolder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"blocking"
operator|.
name|equals
argument_list|(
name|previousInfo
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|SizeValue
name|updatedCapacity
init|=
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"capacity"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
name|defaultCapacity
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TimeValue
name|updatedWaitTime
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"wait_time"
argument_list|,
name|defaultWaitTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousInfo
operator|.
name|capacity
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedCapacity
argument_list|)
operator|&&
name|previousInfo
operator|.
name|waitTime
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedWaitTime
argument_list|)
condition|)
block|{
name|TimeValue
name|updatedKeepAlive
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|updatedMin
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
name|previousInfo
operator|.
name|getMin
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|updatedSize
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"max"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|previousInfo
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedKeepAlive
argument_list|)
operator|||
operator|!
name|previousInfo
operator|.
name|waitTime
argument_list|()
operator|.
name|equals
argument_list|(
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"wait_time"
argument_list|,
name|defaultWaitTime
argument_list|)
argument_list|)
operator|||
name|previousInfo
operator|.
name|getMin
argument_list|()
operator|!=
name|updatedMin
operator|||
name|previousInfo
operator|.
name|getMax
argument_list|()
operator|!=
name|updatedSize
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating thread_pool [{}], type [{}], keep_alive [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|updatedKeepAlive
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedKeepAlive
argument_list|)
condition|)
block|{
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setKeepAliveTime
argument_list|(
name|updatedKeepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getMin
argument_list|()
operator|!=
name|updatedMin
condition|)
block|{
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setCorePoolSize
argument_list|(
name|updatedMin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getMax
argument_list|()
operator|!=
name|updatedSize
condition|)
block|{
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|previousExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|setMaximumPoolSize
argument_list|(
name|updatedSize
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|previousExecutorHolder
operator|.
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|updatedMin
argument_list|,
name|updatedSize
argument_list|,
name|updatedKeepAlive
argument_list|,
name|updatedCapacity
argument_list|,
name|updatedWaitTime
argument_list|)
argument_list|)
return|;
block|}
return|return
name|previousExecutorHolder
return|;
block|}
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|defaultKeepAlive
operator|=
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getMin
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|defaultMin
operator|=
name|previousInfo
operator|.
name|getMin
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getMax
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|defaultSize
operator|=
name|previousInfo
operator|.
name|getMax
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|getCapacity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|defaultCapacity
operator|=
name|previousInfo
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|previousInfo
operator|.
name|waitTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|defaultWaitTime
operator|=
name|previousInfo
operator|.
name|getKeepAlive
argument_list|()
expr_stmt|;
block|}
block|}
name|TimeValue
name|keepAlive
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"keep_alive"
argument_list|,
name|defaultKeepAlive
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"min"
argument_list|,
name|defaultMin
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"max"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"size"
argument_list|,
name|defaultSize
argument_list|)
argument_list|)
decl_stmt|;
name|SizeValue
name|capacity
init|=
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"capacity"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue"
argument_list|,
name|settings
operator|.
name|getAsSize
argument_list|(
literal|"queue_size"
argument_list|,
name|defaultCapacity
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TimeValue
name|waitTime
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"wait_time"
argument_list|,
name|defaultWaitTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousExecutorHolder
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating thread_pool [{}], type [{}], min [{}], size [{}], queue_size [{}], keep_alive [{}], wait_time [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|capacity
operator|.
name|singles
argument_list|()
argument_list|,
name|keepAlive
argument_list|,
name|waitTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"creating thread_pool [{}], type [{}], min [{}], size [{}], queue_size [{}], keep_alive [{}], wait_time [{}]"
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|capacity
operator|.
name|singles
argument_list|()
argument_list|,
name|keepAlive
argument_list|,
name|waitTime
argument_list|)
expr_stmt|;
block|}
name|Executor
name|executor
init|=
name|EsExecutors
operator|.
name|newBlockingExecutorService
argument_list|(
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|threadFactory
argument_list|,
operator|(
name|int
operator|)
name|capacity
operator|.
name|singles
argument_list|()
argument_list|,
name|waitTime
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
operator|new
name|Info
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|size
argument_list|,
name|keepAlive
argument_list|,
name|capacity
argument_list|,
name|waitTime
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No type found ["
operator|+
name|type
operator|+
literal|"], for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|method|updateSettings
specifier|public
name|void
name|updateSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|groupSettings
init|=
name|settings
operator|.
name|getGroups
argument_list|(
literal|"threadpool"
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupSettings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|executor
range|:
name|defaultExecutorTypeSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Settings
name|updatedSettings
init|=
name|groupSettings
operator|.
name|get
argument_list|(
name|executor
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|updatedSettings
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ExecutorHolder
name|oldExecutorHolder
init|=
name|executors
operator|.
name|get
argument_list|(
name|executor
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|ExecutorHolder
name|newExecutorHolder
init|=
name|rebuild
argument_list|(
name|executor
operator|.
name|getKey
argument_list|()
argument_list|,
name|oldExecutorHolder
argument_list|,
name|updatedSettings
argument_list|,
name|executor
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldExecutorHolder
operator|.
name|equals
argument_list|(
name|newExecutorHolder
argument_list|)
condition|)
block|{
name|executors
operator|=
name|newMapBuilder
argument_list|(
name|executors
argument_list|)
operator|.
name|put
argument_list|(
name|executor
operator|.
name|getKey
argument_list|()
argument_list|,
name|newExecutorHolder
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|oldExecutorHolder
operator|.
name|executor
operator|.
name|equals
argument_list|(
name|newExecutorHolder
operator|.
name|executor
argument_list|)
operator|&&
name|oldExecutorHolder
operator|.
name|executor
operator|instanceof
name|EsThreadPoolExecutor
condition|)
block|{
name|retiredExecutors
operator|.
name|add
argument_list|(
name|oldExecutorHolder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|oldExecutorHolder
operator|.
name|executor
operator|)
operator|.
name|shutdown
argument_list|(
operator|new
name|ExecutorShutdownListener
argument_list|(
name|oldExecutorHolder
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|newQueue
specifier|private
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|newQueue
parameter_list|(
name|SizeValue
name|capacity
parameter_list|,
name|String
name|queueType
parameter_list|)
block|{
if|if
condition|(
name|capacity
operator|==
literal|null
condition|)
block|{
return|return
name|ConcurrentCollections
operator|.
name|newBlockingQueue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|int
operator|)
name|capacity
operator|.
name|singles
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
literal|"linked"
operator|.
name|equals
argument_list|(
name|queueType
argument_list|)
condition|)
block|{
return|return
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
operator|(
name|int
operator|)
name|capacity
operator|.
name|singles
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"array"
operator|.
name|equals
argument_list|(
name|queueType
argument_list|)
condition|)
block|{
return|return
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
operator|(
name|int
operator|)
name|capacity
operator|.
name|singles
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"illegal queue_type set to ["
operator|+
name|queueType
operator|+
literal|"], should be either linked or array"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
return|;
block|}
block|}
DECL|method|newRejectedExecutionHandler
specifier|private
name|RejectedExecutionHandler
name|newRejectedExecutionHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|rejectSetting
parameter_list|)
block|{
if|if
condition|(
literal|"abort"
operator|.
name|equals
argument_list|(
name|rejectSetting
argument_list|)
condition|)
block|{
return|return
operator|new
name|EsAbortPolicy
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"caller"
operator|.
name|equals
argument_list|(
name|rejectSetting
argument_list|)
condition|)
block|{
return|return
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"reject_policy ["
operator|+
name|rejectSetting
operator|+
literal|"] not valid for ["
operator|+
name|name
operator|+
literal|"] thread pool"
argument_list|)
throw|;
block|}
block|}
DECL|class|ExecutorShutdownListener
class|class
name|ExecutorShutdownListener
implements|implements
name|EsThreadPoolExecutor
operator|.
name|ShutdownListener
block|{
DECL|field|holder
specifier|private
name|ExecutorHolder
name|holder
decl_stmt|;
DECL|method|ExecutorShutdownListener
specifier|public
name|ExecutorShutdownListener
parameter_list|(
name|ExecutorHolder
name|holder
parameter_list|)
block|{
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTerminated
specifier|public
name|void
name|onTerminated
parameter_list|()
block|{
name|retiredExecutors
operator|.
name|remove
argument_list|(
name|holder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LoggingRunnable
class|class
name|LoggingRunnable
implements|implements
name|Runnable
block|{
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|method|LoggingRunnable
name|LoggingRunnable
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to run {}"
argument_list|,
name|e
argument_list|,
name|runnable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|runnable
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|runnable
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[threaded] "
operator|+
name|runnable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|ThreadedRunnable
class|class
name|ThreadedRunnable
implements|implements
name|Runnable
block|{
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|method|ThreadedRunnable
name|ThreadedRunnable
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|runnable
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|runnable
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[threaded] "
operator|+
name|runnable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|EstimatedTimeThread
specifier|static
class|class
name|EstimatedTimeThread
extends|extends
name|Thread
block|{
DECL|field|interval
specifier|final
name|long
name|interval
decl_stmt|;
DECL|field|running
specifier|volatile
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|field|estimatedTimeInMillis
specifier|volatile
name|long
name|estimatedTimeInMillis
decl_stmt|;
DECL|method|EstimatedTimeThread
name|EstimatedTimeThread
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|estimatedTimeInMillis
specifier|public
name|long
name|estimatedTimeInMillis
parameter_list|()
block|{
return|return
name|this
operator|.
name|estimatedTimeInMillis
return|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|estimatedTimeInMillis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
return|return;
block|}
try|try
block|{
name|FileSystemUtils
operator|.
name|checkMkdirsStall
argument_list|(
name|estimatedTimeInMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
DECL|class|ExecutorHolder
specifier|static
class|class
name|ExecutorHolder
block|{
DECL|field|executor
specifier|public
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|field|info
specifier|public
specifier|final
name|Info
name|info
decl_stmt|;
DECL|method|ExecutorHolder
name|ExecutorHolder
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
block|}
DECL|class|Info
specifier|public
specifier|static
class|class
name|Info
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|min
specifier|private
name|int
name|min
decl_stmt|;
DECL|field|max
specifier|private
name|int
name|max
decl_stmt|;
DECL|field|keepAlive
specifier|private
name|TimeValue
name|keepAlive
decl_stmt|;
DECL|field|capacity
specifier|private
name|SizeValue
name|capacity
decl_stmt|;
DECL|field|waitTime
specifier|private
name|TimeValue
name|waitTime
decl_stmt|;
DECL|field|rejectSetting
specifier|private
name|String
name|rejectSetting
decl_stmt|;
DECL|field|queueType
specifier|private
name|String
name|queueType
decl_stmt|;
DECL|method|Info
name|Info
parameter_list|()
block|{          }
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
annotation|@
name|Nullable
name|TimeValue
name|keepAlive
parameter_list|,
annotation|@
name|Nullable
name|SizeValue
name|capacity
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|keepAlive
argument_list|,
name|capacity
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
annotation|@
name|Nullable
name|TimeValue
name|keepAlive
parameter_list|,
annotation|@
name|Nullable
name|SizeValue
name|capacity
parameter_list|,
annotation|@
name|Nullable
name|TimeValue
name|waitTime
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|keepAlive
argument_list|,
name|capacity
argument_list|,
name|waitTime
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
annotation|@
name|Nullable
name|TimeValue
name|keepAlive
parameter_list|,
annotation|@
name|Nullable
name|SizeValue
name|capacity
parameter_list|,
annotation|@
name|Nullable
name|TimeValue
name|waitTime
parameter_list|,
name|String
name|rejectSetting
parameter_list|,
name|String
name|queueType
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|keepAlive
operator|=
name|keepAlive
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|waitTime
operator|=
name|waitTime
expr_stmt|;
name|this
operator|.
name|rejectSetting
operator|=
name|rejectSetting
expr_stmt|;
name|this
operator|.
name|queueType
operator|=
name|queueType
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|min
specifier|public
name|int
name|min
parameter_list|()
block|{
return|return
name|this
operator|.
name|min
return|;
block|}
DECL|method|getMin
specifier|public
name|int
name|getMin
parameter_list|()
block|{
return|return
name|this
operator|.
name|min
return|;
block|}
DECL|method|max
specifier|public
name|int
name|max
parameter_list|()
block|{
return|return
name|this
operator|.
name|max
return|;
block|}
DECL|method|getMax
specifier|public
name|int
name|getMax
parameter_list|()
block|{
return|return
name|this
operator|.
name|max
return|;
block|}
annotation|@
name|Nullable
DECL|method|keepAlive
specifier|public
name|TimeValue
name|keepAlive
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepAlive
return|;
block|}
annotation|@
name|Nullable
DECL|method|getKeepAlive
specifier|public
name|TimeValue
name|getKeepAlive
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepAlive
return|;
block|}
annotation|@
name|Nullable
DECL|method|capacity
specifier|public
name|SizeValue
name|capacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|capacity
return|;
block|}
annotation|@
name|Nullable
DECL|method|getCapacity
specifier|public
name|SizeValue
name|getCapacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|capacity
return|;
block|}
annotation|@
name|Nullable
DECL|method|waitTime
specifier|public
name|TimeValue
name|waitTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|waitTime
return|;
block|}
annotation|@
name|Nullable
DECL|method|getWaitTime
specifier|public
name|TimeValue
name|getWaitTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|waitTime
return|;
block|}
annotation|@
name|Nullable
DECL|method|rejectSetting
specifier|public
name|String
name|rejectSetting
parameter_list|()
block|{
return|return
name|this
operator|.
name|rejectSetting
return|;
block|}
annotation|@
name|Nullable
DECL|method|getRejectSetting
specifier|public
name|String
name|getRejectSetting
parameter_list|()
block|{
return|return
name|this
operator|.
name|rejectSetting
return|;
block|}
annotation|@
name|Nullable
DECL|method|queueType
specifier|public
name|String
name|queueType
parameter_list|()
block|{
return|return
name|this
operator|.
name|queueType
return|;
block|}
annotation|@
name|Nullable
DECL|method|getQueueType
specifier|public
name|String
name|getQueueType
parameter_list|()
block|{
return|return
name|this
operator|.
name|queueType
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|min
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|max
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|keepAlive
operator|=
name|TimeValue
operator|.
name|readTimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|capacity
operator|=
name|SizeValue
operator|.
name|readSizeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|waitTime
operator|=
name|TimeValue
operator|.
name|readTimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|rejectSetting
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|queueType
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|keepAlive
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|keepAlive
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|capacity
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|capacity
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|waitTime
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|waitTime
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalString
argument_list|(
name|rejectSetting
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|queueType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MIN
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|max
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MAX
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keepAlive
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|KEEP_ALIVE
argument_list|,
name|keepAlive
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|capacity
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|CAPACITY
argument_list|,
name|capacity
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|waitTime
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|WAIT_TIME
argument_list|,
name|waitTime
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rejectSetting
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|REJECT_POLICY
argument_list|,
name|rejectSetting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queueType
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|QUEUE_TYPE
argument_list|,
name|queueType
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|TYPE
specifier|static
specifier|final
name|XContentBuilderString
name|TYPE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|MIN
specifier|static
specifier|final
name|XContentBuilderString
name|MIN
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
DECL|field|MAX
specifier|static
specifier|final
name|XContentBuilderString
name|MAX
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
DECL|field|KEEP_ALIVE
specifier|static
specifier|final
name|XContentBuilderString
name|KEEP_ALIVE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"keep_alive"
argument_list|)
decl_stmt|;
DECL|field|CAPACITY
specifier|static
specifier|final
name|XContentBuilderString
name|CAPACITY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"capacity"
argument_list|)
decl_stmt|;
DECL|field|WAIT_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|WAIT_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"wait_time"
argument_list|)
decl_stmt|;
DECL|field|REJECT_POLICY
specifier|static
specifier|final
name|XContentBuilderString
name|REJECT_POLICY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"reject_policy"
argument_list|)
decl_stmt|;
DECL|field|QUEUE_TYPE
specifier|static
specifier|final
name|XContentBuilderString
name|QUEUE_TYPE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"queue_type"
argument_list|)
decl_stmt|;
block|}
block|}
DECL|class|ApplySettings
class|class
name|ApplySettings
implements|implements
name|NodeSettingsService
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|updateSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

