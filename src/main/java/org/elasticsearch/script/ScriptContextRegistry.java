begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Registry for operations that use scripts as part of their execution. Can be standard operations of custom defined ones (via plugin).  * Allows plugins to register custom operations that they use scripts for, via {@link ScriptModule#registerScriptContext(org.elasticsearch.script.ScriptContext.Plugin)}.  * Scripts can be enabled/disabled via fine-grained settings for each single registered operation.  */
end_comment

begin_class
DECL|class|ScriptContextRegistry
specifier|public
specifier|final
class|class
name|ScriptContextRegistry
block|{
DECL|field|RESERVED_SCRIPT_CONTEXTS
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|RESERVED_SCRIPT_CONTEXTS
init|=
name|reservedScriptContexts
argument_list|()
decl_stmt|;
DECL|field|scriptContexts
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ScriptContext
argument_list|>
name|scriptContexts
decl_stmt|;
DECL|method|ScriptContextRegistry
name|ScriptContextRegistry
parameter_list|(
name|Iterable
argument_list|<
name|ScriptContext
operator|.
name|Plugin
argument_list|>
name|customScriptContexts
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptContext
argument_list|>
name|scriptContexts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptContext
operator|.
name|Standard
name|scriptContext
range|:
name|ScriptContext
operator|.
name|Standard
operator|.
name|values
argument_list|()
control|)
block|{
name|scriptContexts
operator|.
name|put
argument_list|(
name|scriptContext
operator|.
name|getKey
argument_list|()
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ScriptContext
operator|.
name|Plugin
name|customScriptContext
range|:
name|customScriptContexts
control|)
block|{
name|validateScriptContext
argument_list|(
name|customScriptContext
argument_list|)
expr_stmt|;
name|ScriptContext
name|previousContext
init|=
name|scriptContexts
operator|.
name|put
argument_list|(
name|customScriptContext
operator|.
name|getKey
argument_list|()
argument_list|,
name|customScriptContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousContext
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script context ["
operator|+
name|customScriptContext
operator|.
name|getKey
argument_list|()
operator|+
literal|"] cannot be registered twice"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|scriptContexts
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|scriptContexts
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return a list that contains all the supported {@link ScriptContext}s, both standard ones and registered via plugins      */
DECL|method|scriptContexts
name|ImmutableCollection
argument_list|<
name|ScriptContext
argument_list|>
name|scriptContexts
parameter_list|()
block|{
return|return
name|scriptContexts
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**      * @return<tt>true</tt> if the provided {@link ScriptContext} is supported,<tt>false</tt> otherwise      */
DECL|method|isSupportedContext
name|boolean
name|isSupportedContext
parameter_list|(
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
return|return
name|scriptContexts
operator|.
name|containsKey
argument_list|(
name|scriptContext
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
comment|//script contexts can be used in fine-grained settings, we need to be careful with what we allow here
DECL|method|validateScriptContext
specifier|private
name|void
name|validateScriptContext
parameter_list|(
name|ScriptContext
operator|.
name|Plugin
name|scriptContext
parameter_list|)
block|{
if|if
condition|(
name|RESERVED_SCRIPT_CONTEXTS
operator|.
name|contains
argument_list|(
name|scriptContext
operator|.
name|getPluginName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|scriptContext
operator|.
name|getPluginName
argument_list|()
operator|+
literal|"] is a reserved name, it cannot be registered as a custom script context"
argument_list|)
throw|;
block|}
if|if
condition|(
name|RESERVED_SCRIPT_CONTEXTS
operator|.
name|contains
argument_list|(
name|scriptContext
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|scriptContext
operator|.
name|getOperation
argument_list|()
operator|+
literal|"] is a reserved name, it cannot be registered as a custom script context"
argument_list|)
throw|;
block|}
block|}
DECL|method|reservedScriptContexts
specifier|private
specifier|static
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|reservedScriptContexts
parameter_list|()
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptService
operator|.
name|ScriptType
name|scriptType
range|:
name|ScriptService
operator|.
name|ScriptType
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|scriptType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ScriptContext
operator|.
name|Standard
name|scriptContext
range|:
name|ScriptContext
operator|.
name|Standard
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|scriptContext
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
literal|"script"
argument_list|)
operator|.
name|add
argument_list|(
literal|"engine"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

