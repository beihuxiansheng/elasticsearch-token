begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script.groovy
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|ast
operator|.
name|ClassNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|ast
operator|.
name|expr
operator|.
name|ConstructorCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|ast
operator|.
name|expr
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|ast
operator|.
name|expr
operator|.
name|GStringExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|ast
operator|.
name|expr
operator|.
name|MethodCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|control
operator|.
name|customizers
operator|.
name|SecureASTCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_comment
comment|/**  * Class used to determine whether a Groovy expression should be allowed.  * During compilation, every expression is passed to the  *<code>isAuthorized</code> method, which returns true to allow that method  * and false to block it. Includes all of the sandbox-related whitelist and  * blacklist options.  */
end_comment

begin_class
DECL|class|GroovySandboxExpressionChecker
specifier|public
class|class
name|GroovySandboxExpressionChecker
implements|implements
name|SecureASTCustomizer
operator|.
name|ExpressionChecker
block|{
DECL|field|GROOVY_SANDBOX_METHOD_BLACKLIST
specifier|public
specifier|static
name|String
name|GROOVY_SANDBOX_METHOD_BLACKLIST
init|=
literal|"script.groovy.sandbox.method_blacklist"
decl_stmt|;
DECL|field|GROOVY_SANDBOX_PACKAGE_WHITELIST
specifier|public
specifier|static
name|String
name|GROOVY_SANDBOX_PACKAGE_WHITELIST
init|=
literal|"script.groovy.sandbox.package_whitelist"
decl_stmt|;
DECL|field|GROOVY_SANDBOX_CLASS_WHITELIST
specifier|public
specifier|static
name|String
name|GROOVY_SANDBOX_CLASS_WHITELIST
init|=
literal|"script.groovy.sandbox.class_whitelist"
decl_stmt|;
DECL|field|GROOVY_SCRIPT_SANDBOX_RECEIVER_WHITELIST
specifier|public
specifier|static
name|String
name|GROOVY_SCRIPT_SANDBOX_RECEIVER_WHITELIST
init|=
literal|"script.groovy.sandbox.receiver_whitelist"
decl_stmt|;
DECL|field|methodBlacklist
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|methodBlacklist
decl_stmt|;
DECL|field|additionalMethodBlacklist
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|additionalMethodBlacklist
decl_stmt|;
DECL|field|packageWhitelist
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|packageWhitelist
decl_stmt|;
DECL|field|classWhitelist
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|classWhitelist
decl_stmt|;
DECL|method|GroovySandboxExpressionChecker
specifier|public
name|GroovySandboxExpressionChecker
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|)
block|{
name|this
operator|.
name|methodBlacklist
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
name|GROOVY_SANDBOX_METHOD_BLACKLIST
argument_list|,
name|defaultMethodBlacklist
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|additionalMethodBlacklist
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
name|this
operator|.
name|packageWhitelist
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
name|GROOVY_SANDBOX_PACKAGE_WHITELIST
argument_list|,
name|defaultPackageWhitelist
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|classWhitelist
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
name|GROOVY_SANDBOX_CLASS_WHITELIST
argument_list|,
name|defaultClassConstructionWhitelist
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Never allow calling these methods, regardless of the object type
DECL|field|defaultMethodBlacklist
specifier|public
specifier|static
name|String
index|[]
name|defaultMethodBlacklist
init|=
operator|new
name|String
index|[]
block|{
literal|"getClass"
block|,
literal|"class"
block|,
literal|"forName"
block|,
literal|"wait"
block|,
literal|"notify"
block|,
literal|"notifyAll"
block|,
literal|"finalize"
block|}
decl_stmt|;
comment|// Only instances of these classes in these packages can be instantiated
DECL|field|defaultPackageWhitelist
specifier|public
specifier|static
name|String
index|[]
name|defaultPackageWhitelist
init|=
operator|new
name|String
index|[]
block|{
literal|"java.util"
block|,
literal|"java.lang"
block|,
literal|"org.joda.time"
block|}
decl_stmt|;
comment|// Classes that are allowed to be constructed
DECL|field|defaultClassConstructionWhitelist
specifier|public
specifier|static
name|String
index|[]
name|defaultClassConstructionWhitelist
init|=
operator|new
name|String
index|[]
block|{
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|List
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|Set
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|ArrayList
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|HashMap
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|HashSet
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|UUID
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|math
operator|.
name|BigDecimal
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
comment|// Default whitelisted receiver classes for the Groovy sandbox
DECL|field|defaultReceiverWhitelist
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|defaultReceiverWhitelist
init|=
operator|new
name|String
index|[]
block|{
name|groovy
operator|.
name|util
operator|.
name|GroovyCollections
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"[I"
block|,
literal|"[[I"
block|,
literal|"[[[I"
block|,
name|java
operator|.
name|lang
operator|.
name|Float
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"[F"
block|,
literal|"[[F"
block|,
literal|"[[[F"
block|,
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"[D"
block|,
literal|"[[D"
block|,
literal|"[[[D"
block|,
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"[J"
block|,
literal|"[[J"
block|,
literal|"[[[J"
block|,
name|java
operator|.
name|lang
operator|.
name|Short
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"[S"
block|,
literal|"[[S"
block|,
literal|"[[[S"
block|,
name|java
operator|.
name|lang
operator|.
name|Character
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"[C"
block|,
literal|"[[C"
block|,
literal|"[[[C"
block|,
name|java
operator|.
name|lang
operator|.
name|Byte
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"[B"
block|,
literal|"[[B"
block|,
literal|"[[[B"
block|,
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"[Z"
block|,
literal|"[[Z"
block|,
literal|"[[[Z"
block|,
name|java
operator|.
name|math
operator|.
name|BigDecimal
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|List
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|util
operator|.
name|Set
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|lang
operator|.
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Instant
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
comment|/**      * Checks whether the expression to be compiled is allowed      */
annotation|@
name|Override
DECL|method|isAuthorized
specifier|public
name|boolean
name|isAuthorized
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|instanceof
name|MethodCallExpression
condition|)
block|{
name|MethodCallExpression
name|mce
init|=
operator|(
name|MethodCallExpression
operator|)
name|expression
decl_stmt|;
name|String
name|methodName
init|=
name|mce
operator|.
name|getMethodAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|methodBlacklist
operator|.
name|contains
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|additionalMethodBlacklist
operator|.
name|contains
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|==
literal|null
operator|&&
name|mce
operator|.
name|getMethod
argument_list|()
operator|instanceof
name|GStringExpression
condition|)
block|{
comment|// We do not allow GStrings for method invocation, they are a security risk
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|ConstructorCallExpression
condition|)
block|{
name|ConstructorCallExpression
name|cce
init|=
operator|(
name|ConstructorCallExpression
operator|)
name|expression
decl_stmt|;
name|ClassNode
name|type
init|=
name|cce
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|packageWhitelist
operator|.
name|contains
argument_list|(
name|type
operator|.
name|getPackageName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|classWhitelist
operator|.
name|contains
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns a customized ASTCustomizer that includes the whitelists and      * expression checker.      */
DECL|method|getSecureASTCustomizer
specifier|public
specifier|static
name|SecureASTCustomizer
name|getSecureASTCustomizer
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|)
block|{
name|SecureASTCustomizer
name|scz
init|=
operator|new
name|SecureASTCustomizer
argument_list|()
decl_stmt|;
comment|// Closures are allowed
name|scz
operator|.
name|setClosuresAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// But defining methods is not
name|scz
operator|.
name|setMethodDefinitionAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Only allow the imports that we explicitly call out
name|List
argument_list|<
name|String
argument_list|>
name|importWhitelist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|importWhitelist
operator|.
name|addAll
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|GroovySandboxExpressionChecker
operator|.
name|defaultClassConstructionWhitelist
argument_list|)
argument_list|)
expr_stmt|;
name|scz
operator|.
name|setImportsWhitelist
argument_list|(
name|importWhitelist
argument_list|)
expr_stmt|;
comment|// Package definitions are not allowed
name|scz
operator|.
name|setPackageAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// White-listed receivers of method calls
name|String
index|[]
name|receiverWhitelist
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|GROOVY_SCRIPT_SANDBOX_RECEIVER_WHITELIST
argument_list|,
name|defaultReceiverWhitelist
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scz
operator|.
name|setReceiversWhiteList
argument_list|(
name|newArrayList
argument_list|(
name|receiverWhitelist
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the customized expression checker for finer-grained checking
name|scz
operator|.
name|addExpressionCheckers
argument_list|(
operator|new
name|GroovySandboxExpressionChecker
argument_list|(
name|settings
argument_list|,
name|blacklistAdditions
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|scz
return|;
block|}
block|}
end_class

end_unit

