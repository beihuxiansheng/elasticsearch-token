begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Mode for a specific script, used for script settings.  * Defines whether a certain script or catefory of scripts can be executed or not, or whether it can  * only be executed by a sandboxed scripting language.  */
end_comment

begin_enum
DECL|enum|ScriptMode
enum|enum
name|ScriptMode
block|{
DECL|enum constant|ON
name|ON
block|,
DECL|enum constant|OFF
name|OFF
block|,
DECL|enum constant|SANDBOX
name|SANDBOX
block|;
DECL|method|parse
specifier|static
name|ScriptMode
name|parse
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|input
operator|=
name|input
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
if|if
condition|(
name|Booleans
operator|.
name|isExplicitTrue
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
name|ON
return|;
block|}
if|if
condition|(
name|Booleans
operator|.
name|isExplicitFalse
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
name|OFF
return|;
block|}
if|if
condition|(
name|SANDBOX
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
name|SANDBOX
return|;
block|}
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"script mode ["
operator|+
name|input
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

