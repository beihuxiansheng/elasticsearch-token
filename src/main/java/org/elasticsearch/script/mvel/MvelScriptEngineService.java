begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script.mvel
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mvel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|math
operator|.
name|UnboxedMathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|MVEL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|ParserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|compiler
operator|.
name|ExecutableStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|integration
operator|.
name|impl
operator|.
name|MapVariableResolverFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|MvelScriptEngineService
specifier|public
class|class
name|MvelScriptEngineService
extends|extends
name|AbstractComponent
implements|implements
name|ScriptEngineService
block|{
DECL|field|parserConfiguration
specifier|private
specifier|final
name|ParserConfiguration
name|parserConfiguration
decl_stmt|;
annotation|@
name|Inject
DECL|method|MvelScriptEngineService
specifier|public
name|MvelScriptEngineService
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|parserConfiguration
operator|=
operator|new
name|ParserConfiguration
argument_list|()
expr_stmt|;
name|parserConfiguration
operator|.
name|addPackageImport
argument_list|(
literal|"java.util"
argument_list|)
expr_stmt|;
name|parserConfiguration
operator|.
name|addPackageImport
argument_list|(
literal|"gnu.trove"
argument_list|)
expr_stmt|;
name|parserConfiguration
operator|.
name|addPackageImport
argument_list|(
literal|"org.joda"
argument_list|)
expr_stmt|;
name|parserConfiguration
operator|.
name|addImport
argument_list|(
literal|"time"
argument_list|,
name|MVEL
operator|.
name|getStaticMethod
argument_list|(
name|System
operator|.
name|class
argument_list|,
literal|"currentTimeMillis"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// unboxed version of Math, better performance since conversion from boxed to unboxed my mvel is not needed
for|for
control|(
name|Method
name|m
range|:
name|UnboxedMathUtils
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|m
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|>
literal|0
condition|)
block|{
name|parserConfiguration
operator|.
name|addImport
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// nothing to do here...
block|}
annotation|@
name|Override
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"mvel"
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|extensions
specifier|public
name|String
index|[]
name|extensions
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"mvel"
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|compile
specifier|public
name|Object
name|compile
parameter_list|(
name|String
name|script
parameter_list|)
block|{
return|return
name|MVEL
operator|.
name|compileExpression
argument_list|(
name|script
argument_list|,
operator|new
name|ParserContext
argument_list|(
name|parserConfiguration
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|Object
name|execute
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
name|Map
name|vars
parameter_list|)
block|{
return|return
name|MVEL
operator|.
name|executeExpression
argument_list|(
name|compiledScript
argument_list|,
name|vars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
name|Map
name|vars
parameter_list|)
block|{
return|return
operator|new
name|MvelExecutableScript
argument_list|(
name|compiledScript
argument_list|,
name|vars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
operator|new
name|MvelSearchScript
argument_list|(
name|compiledScript
argument_list|,
name|lookup
argument_list|,
name|vars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|unwrap
specifier|public
name|Object
name|unwrap
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
DECL|class|MvelExecutableScript
specifier|public
specifier|static
class|class
name|MvelExecutableScript
implements|implements
name|ExecutableScript
block|{
DECL|field|script
specifier|private
specifier|final
name|ExecutableStatement
name|script
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|final
name|MapVariableResolverFactory
name|resolver
decl_stmt|;
DECL|method|MvelExecutableScript
specifier|public
name|MvelExecutableScript
parameter_list|(
name|Object
name|script
parameter_list|,
name|Map
name|vars
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
operator|(
name|ExecutableStatement
operator|)
name|script
expr_stmt|;
if|if
condition|(
name|vars
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|resolver
operator|=
operator|new
name|MapVariableResolverFactory
argument_list|(
name|vars
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|resolver
operator|=
operator|new
name|MapVariableResolverFactory
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setNextVar
specifier|public
name|void
name|setNextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|resolver
operator|.
name|createVariable
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|script
operator|.
name|getValue
argument_list|(
literal|null
argument_list|,
name|resolver
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|unwrap
specifier|public
name|Object
name|unwrap
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
block|}
DECL|class|MvelSearchScript
specifier|public
specifier|static
class|class
name|MvelSearchScript
implements|implements
name|SearchScript
block|{
DECL|field|script
specifier|private
specifier|final
name|ExecutableStatement
name|script
decl_stmt|;
DECL|field|lookup
specifier|private
specifier|final
name|SearchLookup
name|lookup
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|final
name|MapVariableResolverFactory
name|resolver
decl_stmt|;
DECL|method|MvelSearchScript
specifier|public
name|MvelSearchScript
parameter_list|(
name|Object
name|script
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
operator|(
name|ExecutableStatement
operator|)
name|script
expr_stmt|;
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
if|if
condition|(
name|vars
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|resolver
operator|=
operator|new
name|MapVariableResolverFactory
argument_list|(
name|vars
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|resolver
operator|=
operator|new
name|MapVariableResolverFactory
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|lookup
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|resolver
operator|.
name|createVariable
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|lookup
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
block|{
name|lookup
operator|.
name|setNextReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextDocId
specifier|public
name|void
name|setNextDocId
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|lookup
operator|.
name|setNextDocId
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextScore
specifier|public
name|void
name|setNextScore
parameter_list|(
name|float
name|score
parameter_list|)
block|{
name|resolver
operator|.
name|createVariable
argument_list|(
literal|"_score"
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextVar
specifier|public
name|void
name|setNextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|resolver
operator|.
name|createVariable
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextSource
specifier|public
name|void
name|setNextSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
name|lookup
operator|.
name|source
argument_list|()
operator|.
name|setNextSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|script
operator|.
name|getValue
argument_list|(
literal|null
argument_list|,
name|resolver
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|runAsFloat
specifier|public
name|float
name|runAsFloat
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|run
argument_list|()
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|runAsLong
specifier|public
name|long
name|runAsLong
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|run
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|runAsDouble
specifier|public
name|double
name|runAsDouble
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|run
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|unwrap
specifier|public
name|Object
name|unwrap
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

