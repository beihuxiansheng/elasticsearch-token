begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|indexedscripts
operator|.
name|delete
operator|.
name|DeleteIndexedScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|indexedscripts
operator|.
name|get
operator|.
name|GetIndexedScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|indexedscripts
operator|.
name|put
operator|.
name|PutIndexedScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TemplateQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
operator|.
name|GroovyScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|FileChangesListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|FileWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|ResourceWatcherService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ScriptService
specifier|public
class|class
name|ScriptService
extends|extends
name|AbstractComponent
block|{
DECL|field|DEFAULT_SCRIPTING_LANGUAGE_SETTING
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SCRIPTING_LANGUAGE_SETTING
init|=
literal|"script.default_lang"
decl_stmt|;
DECL|field|DISABLE_DYNAMIC_SCRIPTING_SETTING
specifier|public
specifier|static
specifier|final
name|String
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
init|=
literal|"script.disable_dynamic"
decl_stmt|;
DECL|field|SCRIPT_CACHE_SIZE_SETTING
specifier|public
specifier|static
specifier|final
name|String
name|SCRIPT_CACHE_SIZE_SETTING
init|=
literal|"script.cache.max_size"
decl_stmt|;
DECL|field|SCRIPT_CACHE_EXPIRE_SETTING
specifier|public
specifier|static
specifier|final
name|String
name|SCRIPT_CACHE_EXPIRE_SETTING
init|=
literal|"script.cache.expire"
decl_stmt|;
DECL|field|DISABLE_DYNAMIC_SCRIPTING_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|DISABLE_DYNAMIC_SCRIPTING_DEFAULT
init|=
literal|"sandbox"
decl_stmt|;
DECL|field|SCRIPT_INDEX
specifier|public
specifier|static
specifier|final
name|String
name|SCRIPT_INDEX
init|=
literal|".scripts"
decl_stmt|;
DECL|field|DEFAULT_LANG
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_LANG
init|=
literal|"groovy"
decl_stmt|;
DECL|field|defaultLang
specifier|private
specifier|final
name|String
name|defaultLang
decl_stmt|;
DECL|field|scriptEngines
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|scriptEngines
decl_stmt|;
DECL|field|staticCache
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|CompiledScript
argument_list|>
name|staticCache
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|CacheKey
argument_list|,
name|CompiledScript
argument_list|>
name|cache
decl_stmt|;
DECL|field|scriptsDirectory
specifier|private
specifier|final
name|Path
name|scriptsDirectory
decl_stmt|;
DECL|field|fileWatcher
specifier|private
specifier|final
name|FileWatcher
name|fileWatcher
decl_stmt|;
DECL|field|dynamicScriptingDisabled
specifier|private
specifier|final
name|DynamicScriptDisabling
name|dynamicScriptingDisabled
decl_stmt|;
DECL|field|client
specifier|private
name|Client
name|client
init|=
literal|null
decl_stmt|;
comment|/**      * Enum defining the different dynamic settings for scripting, either      * ONLY_DISK_ALLOWED (scripts must be placed on disk), EVERYTHING_ALLOWED      * (all dynamic scripting is enabled), or SANDBOXED_ONLY (only sandboxed      * scripting languages are allowed)      */
DECL|enum|DynamicScriptDisabling
enum|enum
name|DynamicScriptDisabling
block|{
DECL|enum constant|EVERYTHING_ALLOWED
name|EVERYTHING_ALLOWED
block|,
DECL|enum constant|ONLY_DISK_ALLOWED
name|ONLY_DISK_ALLOWED
block|,
DECL|enum constant|SANDBOXED_ONLY
name|SANDBOXED_ONLY
block|;
DECL|method|parse
specifier|static
name|DynamicScriptDisabling
name|parse
parameter_list|(
name|String
name|s
parameter_list|)
block|{
switch|switch
condition|(
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
condition|)
block|{
comment|// true for "disable_dynamic" means only on-disk scripts are enabled
case|case
literal|"true"
case|:
case|case
literal|"all"
case|:
return|return
name|ONLY_DISK_ALLOWED
return|;
comment|// false for "disable_dynamic" means all scripts are enabled
case|case
literal|"false"
case|:
case|case
literal|"none"
case|:
return|return
name|EVERYTHING_ALLOWED
return|;
comment|// only sandboxed scripting is enabled
case|case
literal|"sandbox"
case|:
case|case
literal|"sandboxed"
case|:
return|return
name|SANDBOXED_ONLY
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Unrecognized script allowance setting: ["
operator|+
name|s
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|SCRIPT_LANG
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCRIPT_LANG
init|=
operator|new
name|ParseField
argument_list|(
literal|"lang"
argument_list|,
literal|"script_lang"
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_FILE
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCRIPT_FILE
init|=
operator|new
name|ParseField
argument_list|(
literal|"script_file"
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_ID
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCRIPT_ID
init|=
operator|new
name|ParseField
argument_list|(
literal|"script_id"
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_INLINE
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCRIPT_INLINE
init|=
operator|new
name|ParseField
argument_list|(
literal|"script"
argument_list|,
literal|"scriptField"
argument_list|)
decl_stmt|;
DECL|enum|ScriptType
specifier|public
specifier|static
enum|enum
name|ScriptType
block|{
DECL|enum constant|INLINE
name|INLINE
block|,
DECL|enum constant|INDEXED
name|INDEXED
block|,
DECL|enum constant|FILE
name|FILE
block|;
DECL|field|INLINE_VAL
specifier|private
specifier|static
specifier|final
name|int
name|INLINE_VAL
init|=
literal|0
decl_stmt|;
DECL|field|INDEXED_VAL
specifier|private
specifier|static
specifier|final
name|int
name|INDEXED_VAL
init|=
literal|1
decl_stmt|;
DECL|field|FILE_VAL
specifier|private
specifier|static
specifier|final
name|int
name|FILE_VAL
init|=
literal|2
decl_stmt|;
DECL|method|readFrom
specifier|public
specifier|static
name|ScriptType
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|scriptTypeVal
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|scriptTypeVal
condition|)
block|{
case|case
name|INDEXED_VAL
case|:
return|return
name|INDEXED
return|;
case|case
name|INLINE_VAL
case|:
return|return
name|INLINE
return|;
case|case
name|FILE_VAL
case|:
return|return
name|FILE
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Unexpected value read for ScriptType got ["
operator|+
name|scriptTypeVal
operator|+
literal|"] expected one of ["
operator|+
name|INLINE_VAL
operator|+
literal|","
operator|+
name|INDEXED_VAL
operator|+
literal|","
operator|+
name|FILE_VAL
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|ScriptType
name|scriptType
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scriptType
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|scriptType
condition|)
block|{
case|case
name|INDEXED
case|:
name|out
operator|.
name|writeVInt
argument_list|(
name|INDEXED_VAL
argument_list|)
expr_stmt|;
return|return;
case|case
name|INLINE
case|:
name|out
operator|.
name|writeVInt
argument_list|(
name|INLINE_VAL
argument_list|)
expr_stmt|;
return|return;
case|case
name|FILE
case|:
name|out
operator|.
name|writeVInt
argument_list|(
name|FILE_VAL
argument_list|)
expr_stmt|;
return|return;
default|default:
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Unknown ScriptType "
operator|+
name|scriptType
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|INLINE_VAL
argument_list|)
expr_stmt|;
comment|//Default to inline
block|}
block|}
block|}
DECL|class|IndexedScript
specifier|static
class|class
name|IndexedScript
block|{
DECL|field|lang
specifier|private
specifier|final
name|String
name|lang
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|IndexedScript
name|IndexedScript
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|)
block|{
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
specifier|final
name|String
index|[]
name|parts
init|=
name|script
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|this
operator|.
name|id
operator|=
name|script
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Illegal index script format ["
operator|+
name|script
operator|+
literal|"]"
operator|+
literal|" should be /lang/id"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|parts
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|this
operator|.
name|lang
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Conflicting script language, found ["
operator|+
name|parts
index|[
literal|1
index|]
operator|+
literal|"] expected + ["
operator|+
name|this
operator|.
name|lang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|id
operator|=
name|parts
index|[
literal|2
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|ApplySettings
class|class
name|ApplySettings
implements|implements
name|NodeSettingsService
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|GroovyScriptEngineService
name|engine
init|=
operator|(
name|GroovyScriptEngineService
operator|)
name|ScriptService
operator|.
name|this
operator|.
name|scriptEngines
operator|.
name|get
argument_list|(
literal|"groovy"
argument_list|)
decl_stmt|;
name|String
index|[]
name|patches
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|GroovyScriptEngineService
operator|.
name|GROOVY_SCRIPT_BLACKLIST_PATCH
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|patches
argument_list|,
name|engine
operator|.
name|blacklistAdditions
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [{}] from {} to {}"
argument_list|,
name|GroovyScriptEngineService
operator|.
name|GROOVY_SCRIPT_BLACKLIST_PATCH
argument_list|,
name|engine
operator|.
name|blacklistAdditions
argument_list|()
argument_list|,
name|patches
argument_list|)
expr_stmt|;
name|engine
operator|.
name|blacklistAdditions
argument_list|(
name|patches
argument_list|)
expr_stmt|;
name|engine
operator|.
name|reloadConfig
argument_list|()
expr_stmt|;
comment|// Because the GroovyScriptEngineService knows nothing about the
comment|// cache, we need to clear it here if the setting changes
name|ScriptService
operator|.
name|this
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Inject
DECL|method|ScriptService
specifier|public
name|ScriptService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|,
name|Set
argument_list|<
name|ScriptEngineService
argument_list|>
name|scriptEngines
parameter_list|,
name|ResourceWatcherService
name|resourceWatcherService
parameter_list|,
name|NodeSettingsService
name|nodeSettingsService
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|int
name|cacheMaxSize
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|SCRIPT_CACHE_SIZE_SETTING
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|TimeValue
name|cacheExpire
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|SCRIPT_CACHE_EXPIRE_SETTING
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using script cache with max_size [{}], expire [{}]"
argument_list|,
name|cacheMaxSize
argument_list|,
name|cacheExpire
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultLang
operator|=
name|settings
operator|.
name|get
argument_list|(
name|DEFAULT_SCRIPTING_LANGUAGE_SETTING
argument_list|,
name|DEFAULT_LANG
argument_list|)
expr_stmt|;
name|this
operator|.
name|dynamicScriptingDisabled
operator|=
name|DynamicScriptDisabling
operator|.
name|parse
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
argument_list|,
name|DISABLE_DYNAMIC_SCRIPTING_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|CacheBuilder
name|cacheBuilder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|cacheMaxSize
operator|>=
literal|0
condition|)
block|{
name|cacheBuilder
operator|.
name|maximumSize
argument_list|(
name|cacheMaxSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheExpire
operator|!=
literal|null
condition|)
block|{
name|cacheBuilder
operator|.
name|expireAfterAccess
argument_list|(
name|cacheExpire
operator|.
name|nanos
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
name|cacheBuilder
operator|.
name|removalListener
argument_list|(
operator|new
name|ScriptCacheRemovalListener
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cacheBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptEngineService
name|scriptEngine
range|:
name|scriptEngines
control|)
block|{
for|for
control|(
name|String
name|type
range|:
name|scriptEngine
operator|.
name|types
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|scriptEngine
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|scriptEngines
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// add file watcher for static scripts
name|scriptsDirectory
operator|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"scripts"
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Using scripts directory [{}] "
argument_list|,
name|scriptsDirectory
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fileWatcher
operator|=
operator|new
name|FileWatcher
argument_list|(
name|scriptsDirectory
argument_list|)
expr_stmt|;
name|fileWatcher
operator|.
name|addListener
argument_list|(
operator|new
name|ScriptChangesListener
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"auto_reload_enabled"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// automatic reload is enabled - register scripts
name|resourceWatcherService
operator|.
name|add
argument_list|(
name|fileWatcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// automatic reload is disable just load scripts once
name|fileWatcher
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
name|nodeSettingsService
operator|.
name|addListener
argument_list|(
operator|new
name|ApplySettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//This isn't set in the ctor because doing so creates a guice circular
annotation|@
name|Inject
argument_list|(
name|optional
operator|=
literal|true
argument_list|)
DECL|method|setClient
specifier|public
name|void
name|setClient
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|ScriptEngineService
name|engineService
range|:
name|scriptEngines
operator|.
name|values
argument_list|()
control|)
block|{
name|engineService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|compile
specifier|public
name|CompiledScript
name|compile
parameter_list|(
name|String
name|script
parameter_list|)
block|{
return|return
name|compile
argument_list|(
name|defaultLang
argument_list|,
name|script
argument_list|)
return|;
block|}
DECL|method|compile
specifier|public
name|CompiledScript
name|compile
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|)
block|{
return|return
name|compile
argument_list|(
name|lang
argument_list|,
name|script
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
return|;
block|}
comment|/**      * Clear both the in memory and on disk compiled script caches. Files on      * disk will be treated as if they are new and recompiled.      * */
DECL|method|clearCache
specifier|public
name|void
name|clearCache
parameter_list|()
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"clearing script cache"
argument_list|)
expr_stmt|;
comment|// Clear the in-memory script caches
name|this
operator|.
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|this
operator|.
name|cache
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
comment|// Clear the cache of on-disk scripts
name|this
operator|.
name|staticCache
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Clear the file watcher's state so it re-compiles on-disk scripts
name|this
operator|.
name|fileWatcher
operator|.
name|clearState
argument_list|()
expr_stmt|;
block|}
DECL|method|compile
specifier|public
name|CompiledScript
name|compile
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Compiling lang: [{}] type: [{}] script: {}"
argument_list|,
name|lang
argument_list|,
name|scriptType
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
name|CacheKey
name|cacheKey
decl_stmt|;
name|CompiledScript
name|compiled
decl_stmt|;
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
name|lang
operator|=
name|defaultLang
expr_stmt|;
block|}
if|if
condition|(
name|scriptType
operator|==
name|ScriptType
operator|.
name|INDEXED
condition|)
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Got an indexed script with no Client registered."
argument_list|)
throw|;
block|}
specifier|final
name|IndexedScript
name|indexedScript
init|=
operator|new
name|IndexedScript
argument_list|(
name|lang
argument_list|,
name|script
argument_list|)
decl_stmt|;
name|verifyDynamicScripting
argument_list|(
name|indexedScript
operator|.
name|lang
argument_list|)
expr_stmt|;
comment|//Since anyone can index a script, disable indexed scripting
comment|// if dynamic scripting is disabled, perhaps its own setting ?
name|script
operator|=
name|getScriptFromIndex
argument_list|(
name|client
argument_list|,
name|indexedScript
operator|.
name|lang
argument_list|,
name|indexedScript
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scriptType
operator|==
name|ScriptType
operator|.
name|FILE
condition|)
block|{
name|compiled
operator|=
name|staticCache
operator|.
name|get
argument_list|(
name|script
argument_list|)
expr_stmt|;
comment|//On disk scripts will be loaded into the staticCache by the listener
if|if
condition|(
name|compiled
operator|!=
literal|null
condition|)
block|{
return|return
name|compiled
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Unable to find on disk script "
operator|+
name|script
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|scriptType
operator|!=
name|ScriptType
operator|.
name|INDEXED
condition|)
block|{
comment|//For backwards compat attempt to load from disk
name|compiled
operator|=
name|staticCache
operator|.
name|get
argument_list|(
name|script
argument_list|)
expr_stmt|;
comment|//On disk scripts will be loaded into the staticCache by the listener
if|if
condition|(
name|compiled
operator|!=
literal|null
condition|)
block|{
return|return
name|compiled
return|;
block|}
block|}
comment|//This is an inline script check to see if we have it in the cache
name|verifyDynamicScripting
argument_list|(
name|lang
argument_list|)
expr_stmt|;
name|cacheKey
operator|=
operator|new
name|CacheKey
argument_list|(
name|lang
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|compiled
operator|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|!=
literal|null
condition|)
block|{
return|return
name|compiled
return|;
block|}
comment|//Either an un-cached inline script or an indexed script
if|if
condition|(
operator|!
name|dynamicScriptEnabled
argument_list|(
name|lang
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ScriptException
argument_list|(
literal|"dynamic scripting for ["
operator|+
name|lang
operator|+
literal|"] disabled"
argument_list|)
throw|;
block|}
comment|// not the end of the world if we compile it twice...
name|compiled
operator|=
name|getCompiledScript
argument_list|(
name|lang
argument_list|,
name|script
argument_list|)
expr_stmt|;
comment|//Since the cache key is the script content itself we don't need to
comment|//invalidate/check the cache if an indexed script changes.
name|cache
operator|.
name|put
argument_list|(
name|cacheKey
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
return|return
name|compiled
return|;
block|}
DECL|method|getCompiledScript
specifier|private
name|CompiledScript
name|getCompiledScript
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|)
block|{
name|CompiledScript
name|compiled
decl_stmt|;
name|ScriptEngineService
name|service
init|=
name|scriptEngines
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"script_lang not supported ["
operator|+
name|lang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|compiled
operator|=
operator|new
name|CompiledScript
argument_list|(
name|lang
argument_list|,
name|service
operator|.
name|compile
argument_list|(
name|script
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|compiled
return|;
block|}
DECL|method|verifyDynamicScripting
specifier|private
name|void
name|verifyDynamicScripting
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dynamicScriptEnabled
argument_list|(
name|lang
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ScriptException
argument_list|(
literal|"dynamic scripting for ["
operator|+
name|lang
operator|+
literal|"] disabled"
argument_list|)
throw|;
block|}
block|}
DECL|method|queryScriptIndex
specifier|public
name|void
name|queryScriptIndex
parameter_list|(
name|GetIndexedScriptRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|GetResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|String
name|scriptLang
init|=
name|validateScriptLanguage
argument_list|(
name|request
operator|.
name|scriptLang
argument_list|()
argument_list|)
decl_stmt|;
name|GetRequest
name|getRequest
init|=
operator|new
name|GetRequest
argument_list|(
name|request
argument_list|,
name|SCRIPT_INDEX
argument_list|)
operator|.
name|type
argument_list|(
name|scriptLang
argument_list|)
operator|.
name|id
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|request
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|preference
argument_list|(
literal|"_local"
argument_list|)
decl_stmt|;
comment|//Set preference for no forking
name|client
operator|.
name|get
argument_list|(
name|getRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|validateScriptLanguage
specifier|private
name|String
name|validateScriptLanguage
parameter_list|(
name|String
name|scriptLang
parameter_list|)
block|{
if|if
condition|(
name|scriptLang
operator|==
literal|null
condition|)
block|{
name|scriptLang
operator|=
name|defaultLang
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|scriptEngines
operator|.
name|containsKey
argument_list|(
name|scriptLang
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"script_lang not supported ["
operator|+
name|scriptLang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|scriptLang
return|;
block|}
DECL|method|getScriptFromIndex
specifier|private
name|String
name|getScriptFromIndex
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|scriptLang
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|scriptLang
operator|=
name|validateScriptLanguage
argument_list|(
name|scriptLang
argument_list|)
expr_stmt|;
name|GetRequest
name|getRequest
init|=
operator|new
name|GetRequest
argument_list|(
name|SCRIPT_INDEX
argument_list|,
name|scriptLang
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|GetResponse
name|responseFields
init|=
name|client
operator|.
name|get
argument_list|(
name|getRequest
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseFields
operator|.
name|isExists
argument_list|()
condition|)
block|{
return|return
name|getScriptFromResponse
argument_list|(
name|responseFields
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Unable to find script ["
operator|+
name|SCRIPT_INDEX
operator|+
literal|"/"
operator|+
name|scriptLang
operator|+
literal|"/"
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|method|validate
specifier|private
name|void
name|validate
parameter_list|(
name|BytesReference
name|scriptBytes
parameter_list|,
name|String
name|scriptLang
parameter_list|)
block|{
try|try
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|scriptBytes
argument_list|)
operator|.
name|createParser
argument_list|(
name|scriptBytes
argument_list|)
decl_stmt|;
name|TemplateQueryParser
operator|.
name|TemplateContext
name|context
init|=
name|TemplateQueryParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
literal|"params"
argument_list|,
literal|"script"
argument_list|,
literal|"template"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|context
operator|.
name|template
argument_list|()
argument_list|)
condition|)
block|{
comment|//Just try and compile it
comment|//This will have the benefit of also adding the script to the cache if it compiles
try|try
block|{
name|CompiledScript
name|compiledScript
init|=
name|compile
argument_list|(
name|scriptLang
argument_list|,
name|context
operator|.
name|template
argument_list|()
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiledScript
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Unable to parse ["
operator|+
name|context
operator|.
name|template
argument_list|()
operator|+
literal|"] lang ["
operator|+
name|scriptLang
operator|+
literal|"] (ScriptService.compile returned null)"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Unable to parse ["
operator|+
name|context
operator|.
name|template
argument_list|()
operator|+
literal|"] lang ["
operator|+
name|scriptLang
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Unable to find script in : "
operator|+
name|scriptBytes
operator|.
name|toUtf8
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"failed to parse template script"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|putScriptToIndex
specifier|public
name|void
name|putScriptToIndex
parameter_list|(
name|PutIndexedScriptRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|IndexResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|String
name|scriptLang
init|=
name|validateScriptLanguage
argument_list|(
name|request
operator|.
name|scriptLang
argument_list|()
argument_list|)
decl_stmt|;
comment|//verify that the script compiles
name|validate
argument_list|(
name|request
operator|.
name|safeSource
argument_list|()
argument_list|,
name|scriptLang
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
name|request
argument_list|)
operator|.
name|index
argument_list|(
name|SCRIPT_INDEX
argument_list|)
operator|.
name|type
argument_list|(
name|scriptLang
argument_list|)
operator|.
name|id
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|request
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|source
argument_list|(
name|request
operator|.
name|safeSource
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|opType
argument_list|(
name|request
operator|.
name|opType
argument_list|()
argument_list|)
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|//Always refresh after indexing a template
name|client
operator|.
name|index
argument_list|(
name|indexRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteScriptFromIndex
specifier|public
name|void
name|deleteScriptFromIndex
parameter_list|(
name|DeleteIndexedScriptRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|DeleteResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|String
name|scriptLang
init|=
name|validateScriptLanguage
argument_list|(
name|request
operator|.
name|scriptLang
argument_list|()
argument_list|)
decl_stmt|;
name|DeleteRequest
name|deleteRequest
init|=
operator|new
name|DeleteRequest
argument_list|(
name|request
argument_list|)
operator|.
name|index
argument_list|(
name|SCRIPT_INDEX
argument_list|)
operator|.
name|type
argument_list|(
name|scriptLang
argument_list|)
operator|.
name|id
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
operator|.
name|version
argument_list|(
name|request
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|delete
argument_list|(
name|deleteRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|getScriptFromResponse
specifier|public
specifier|static
name|String
name|getScriptFromResponse
parameter_list|(
name|GetResponse
name|responseFields
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
init|=
name|responseFields
operator|.
name|getSourceAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|containsKey
argument_list|(
literal|"template"
argument_list|)
condition|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|Object
name|template
init|=
name|source
operator|.
name|get
argument_list|(
literal|"template"
argument_list|)
decl_stmt|;
if|if
condition|(
name|template
operator|instanceof
name|Map
condition|)
block|{
name|builder
operator|.
name|map
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|template
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|template
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Unable to parse "
operator|+
name|responseFields
operator|.
name|getSourceAsString
argument_list|()
operator|+
literal|" as json"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|containsKey
argument_list|(
literal|"script"
argument_list|)
condition|)
block|{
return|return
name|source
operator|.
name|get
argument_list|(
literal|"script"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|responseFields
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Unable to parse "
operator|+
name|responseFields
operator|.
name|getSourceAsString
argument_list|()
operator|+
literal|" as json"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|Map
name|vars
parameter_list|)
block|{
return|return
name|executable
argument_list|(
name|compile
argument_list|(
name|lang
argument_list|,
name|script
argument_list|,
name|scriptType
argument_list|)
argument_list|,
name|vars
argument_list|)
return|;
block|}
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
name|CompiledScript
name|compiledScript
parameter_list|,
name|Map
name|vars
parameter_list|)
block|{
return|return
name|scriptEngines
operator|.
name|get
argument_list|(
name|compiledScript
operator|.
name|lang
argument_list|()
argument_list|)
operator|.
name|executable
argument_list|(
name|compiledScript
operator|.
name|compiled
argument_list|()
argument_list|,
name|vars
argument_list|)
return|;
block|}
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|CompiledScript
name|compiledScript
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
name|scriptEngines
operator|.
name|get
argument_list|(
name|compiledScript
operator|.
name|lang
argument_list|()
argument_list|)
operator|.
name|search
argument_list|(
name|compiledScript
operator|.
name|compiled
argument_list|()
argument_list|,
name|lookup
argument_list|,
name|vars
argument_list|)
return|;
block|}
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|SearchLookup
name|lookup
parameter_list|,
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
name|search
argument_list|(
name|compile
argument_list|(
name|lang
argument_list|,
name|script
argument_list|,
name|scriptType
argument_list|)
argument_list|,
name|lookup
argument_list|,
name|vars
argument_list|)
return|;
block|}
DECL|method|dynamicScriptEnabled
specifier|private
name|boolean
name|dynamicScriptEnabled
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|ScriptEngineService
name|service
init|=
name|scriptEngines
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"script_lang not supported ["
operator|+
name|lang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// Templating languages (mustache) and native scripts are always
comment|// allowed, "native" executions are registered through plugins
if|if
condition|(
name|this
operator|.
name|dynamicScriptingDisabled
operator|==
name|DynamicScriptDisabling
operator|.
name|EVERYTHING_ALLOWED
operator|||
literal|"native"
operator|.
name|equals
argument_list|(
name|lang
argument_list|)
operator|||
literal|"mustache"
operator|.
name|equals
argument_list|(
name|lang
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|dynamicScriptingDisabled
operator|==
name|DynamicScriptDisabling
operator|.
name|ONLY_DISK_ALLOWED
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|service
operator|.
name|sandboxed
argument_list|()
return|;
block|}
block|}
comment|/**      * A small listener for the script cache that calls each      * {@code ScriptEngineService}'s {@code scriptRemoved} method when the      * script has been removed from the cache      */
DECL|class|ScriptCacheRemovalListener
specifier|private
class|class
name|ScriptCacheRemovalListener
implements|implements
name|RemovalListener
argument_list|<
name|CacheKey
argument_list|,
name|CompiledScript
argument_list|>
block|{
annotation|@
name|Override
DECL|method|onRemoval
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|CacheKey
argument_list|,
name|CompiledScript
argument_list|>
name|notification
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"notifying script services of script removal due to: [{}]"
argument_list|,
name|notification
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ScriptEngineService
name|service
range|:
name|scriptEngines
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|service
operator|.
name|scriptRemoved
argument_list|(
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"exception calling script removal listener for script service"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// We don't rethrow because Guava would just catch the
comment|// exception and log it, which we have already done
block|}
block|}
block|}
block|}
DECL|class|ScriptChangesListener
specifier|private
class|class
name|ScriptChangesListener
extends|extends
name|FileChangesListener
block|{
DECL|method|scriptNameExt
specifier|private
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|scriptNameExt
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|Path
name|scriptPath
init|=
name|scriptsDirectory
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|int
name|extIndex
init|=
name|scriptPath
operator|.
name|toString
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|extIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|ext
init|=
name|scriptPath
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|extIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|scriptName
init|=
name|scriptPath
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|extIndex
argument_list|)
operator|.
name|replace
argument_list|(
name|scriptPath
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getSeparator
argument_list|()
argument_list|,
literal|"_"
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|scriptName
argument_list|,
name|ext
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFileInit
specifier|public
name|void
name|onFileInit
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Loading script file : [{}]"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|scriptNameExt
init|=
name|scriptNameExt
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptNameExt
operator|!=
literal|null
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ScriptEngineService
name|engineService
range|:
name|scriptEngines
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|s
range|:
name|engineService
operator|.
name|extensions
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|scriptNameExt
operator|.
name|v2
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"compiling script file [{}]"
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|script
init|=
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|staticCache
operator|.
name|put
argument_list|(
name|scriptNameExt
operator|.
name|v1
argument_list|()
argument_list|,
operator|new
name|CompiledScript
argument_list|(
name|engineService
operator|.
name|types
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|engineService
operator|.
name|compile
argument_list|(
name|script
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to load/compile script [{}]"
argument_list|,
name|e
argument_list|,
name|scriptNameExt
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"no script engine found for [{}]"
argument_list|,
name|scriptNameExt
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onFileCreated
specifier|public
name|void
name|onFileCreated
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|onFileInit
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFileDeleted
specifier|public
name|void
name|onFileDeleted
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|scriptNameExt
init|=
name|scriptNameExt
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptNameExt
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"removing script file [{}]"
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|staticCache
operator|.
name|remove
argument_list|(
name|scriptNameExt
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFileChanged
specifier|public
name|void
name|onFileChanged
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|onFileInit
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CacheKey
specifier|public
specifier|final
specifier|static
class|class
name|CacheKey
block|{
DECL|field|lang
specifier|public
specifier|final
name|String
name|lang
decl_stmt|;
DECL|field|script
specifier|public
specifier|final
name|String
name|script
decl_stmt|;
DECL|method|CacheKey
specifier|public
name|CacheKey
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|)
block|{
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|CacheKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CacheKey
name|other
init|=
operator|(
name|CacheKey
operator|)
name|o
decl_stmt|;
return|return
name|lang
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lang
argument_list|)
operator|&&
name|script
operator|.
name|equals
argument_list|(
name|other
operator|.
name|script
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|lang
operator|.
name|hashCode
argument_list|()
operator|+
literal|31
operator|*
name|script
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

