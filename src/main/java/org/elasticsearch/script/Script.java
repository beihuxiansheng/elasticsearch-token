begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_comment
comment|/**  * Script holds all the parameters necessary to compile or find in cache and then execute a script.  */
end_comment

begin_class
DECL|class|Script
specifier|public
class|class
name|Script
block|{
DECL|field|lang
specifier|private
specifier|final
name|String
name|lang
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|String
name|script
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|ScriptType
name|type
decl_stmt|;
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
comment|/**      * Constructor for Script.      * @param lang The language of the script to be compiled/executed.      * @param script The cache key of the script to be compiled/executed.  For dynamic scripts this is the actual      *               script source code.  For indexed scripts this is the id used in the request.  For on disk scripts      *               this is the file name.      * @param type The type of script -- dynamic, indexed, or file.      * @param params The map of parameters the script will be executed with.      */
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parameter script (String) must not be null in Script."
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parameter type (ScriptType) must not be null in Script."
argument_list|)
throw|;
block|}
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
comment|/**      * Method for getting language.      * @return The language of the script to be compiled/executed.      */
DECL|method|getLang
specifier|public
name|String
name|getLang
parameter_list|()
block|{
return|return
name|lang
return|;
block|}
comment|/**      * Method for getting the script.      * @return The cache key of the script to be compiled/executed.  For dynamic scripts this is the actual      *         script source code.  For indexed scripts this is the id used in the request.  For on disk scripts      *         this is the file name.      */
DECL|method|getScript
specifier|public
name|String
name|getScript
parameter_list|()
block|{
return|return
name|script
return|;
block|}
comment|/**      * Method for getting the type.      * @return The type of script -- dynamic, indexed, or file.      */
DECL|method|getType
specifier|public
name|ScriptType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Method for getting the parameters.      * @return The map of parameters the script will be executed with.      */
DECL|method|getParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
block|}
end_class

end_unit

