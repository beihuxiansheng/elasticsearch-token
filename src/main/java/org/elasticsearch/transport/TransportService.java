begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|settings
operator|.
name|ClusterDynamicSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|settings
operator|.
name|DynamicSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|MeanMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TransportService
specifier|public
class|class
name|TransportService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|TransportService
argument_list|>
block|{
DECL|field|DIRECT_RESPONSE_PROFILE
specifier|public
specifier|static
specifier|final
name|String
name|DIRECT_RESPONSE_PROFILE
init|=
literal|".direct"
decl_stmt|;
DECL|field|started
specifier|private
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|transport
specifier|protected
specifier|final
name|Transport
name|transport
decl_stmt|;
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|requestHandlers
specifier|volatile
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|RequestHandlerRegistry
argument_list|>
name|requestHandlers
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|requestHandlerMutex
specifier|final
name|Object
name|requestHandlerMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|clientHandlers
specifier|final
name|ConcurrentMapLong
argument_list|<
name|RequestHolder
argument_list|>
name|clientHandlers
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMapLongWithAggressiveConcurrency
argument_list|()
decl_stmt|;
DECL|field|requestIds
specifier|final
name|AtomicLong
name|requestIds
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|connectionListeners
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|TransportConnectionListener
argument_list|>
name|connectionListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// An LRU (don't really care about concurrency here) that holds the latest timed out requests so if they
comment|// do show up, we can print more descriptive information about them
DECL|field|timeoutInfoHandlers
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|TimeoutInfoHolder
argument_list|>
name|timeoutInfoHandlers
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|Long
argument_list|,
name|TimeoutInfoHolder
argument_list|>
argument_list|(
literal|100
argument_list|,
literal|.75F
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
literal|100
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|adapter
specifier|private
specifier|final
name|TransportService
operator|.
name|Adapter
name|adapter
decl_stmt|;
comment|// tracer log
DECL|field|SETTING_TRACE_LOG_INCLUDE
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_TRACE_LOG_INCLUDE
init|=
literal|"transport.tracer.include"
decl_stmt|;
DECL|field|SETTING_TRACE_LOG_EXCLUDE
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_TRACE_LOG_EXCLUDE
init|=
literal|"transport.tracer.exclude"
decl_stmt|;
DECL|field|tracerLog
specifier|private
specifier|final
name|ESLogger
name|tracerLog
decl_stmt|;
DECL|field|tracerLogInclude
specifier|volatile
name|String
index|[]
name|tracerLogInclude
decl_stmt|;
DECL|field|tracelLogExclude
specifier|volatile
name|String
index|[]
name|tracelLogExclude
decl_stmt|;
DECL|field|settingsListener
specifier|private
specifier|final
name|ApplySettings
name|settingsListener
init|=
operator|new
name|ApplySettings
argument_list|()
decl_stmt|;
comment|/** if set will call requests sent to this id to shortcut and executed locally */
DECL|field|localNode
specifier|volatile
name|DiscoveryNode
name|localNode
init|=
literal|null
decl_stmt|;
DECL|method|TransportService
specifier|public
name|TransportService
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
argument_list|(
name|EMPTY_SETTINGS
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|TransportService
specifier|public
name|TransportService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Transport
name|transport
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|tracerLogInclude
operator|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|SETTING_TRACE_LOG_INCLUDE
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|tracelLogExclude
operator|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|SETTING_TRACE_LOG_EXCLUDE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"internal:discovery/zen/fd*"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tracerLog
operator|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|logger
argument_list|,
literal|".tracer"
argument_list|)
expr_stmt|;
name|adapter
operator|=
name|createAdapter
argument_list|()
expr_stmt|;
block|}
comment|/**      * makes the transport service aware of the local node. this allows it to optimize requests sent      * from the local node to it self and by pass the network stack/ serialization      */
DECL|method|setLocalNode
specifier|public
name|void
name|setLocalNode
parameter_list|(
name|DiscoveryNode
name|localNode
parameter_list|)
block|{
name|this
operator|.
name|localNode
operator|=
name|localNode
expr_stmt|;
block|}
comment|// for testing
DECL|method|getLocalNode
name|DiscoveryNode
name|getLocalNode
parameter_list|()
block|{
return|return
name|localNode
return|;
block|}
DECL|method|createAdapter
specifier|protected
name|Adapter
name|createAdapter
parameter_list|()
block|{
return|return
operator|new
name|Adapter
argument_list|()
return|;
block|}
comment|// These need to be optional as they don't exist in the context of a transport client
annotation|@
name|Inject
argument_list|(
name|optional
operator|=
literal|true
argument_list|)
DECL|method|setDynamicSettings
specifier|public
name|void
name|setDynamicSettings
parameter_list|(
name|NodeSettingsService
name|nodeSettingsService
parameter_list|,
annotation|@
name|ClusterDynamicSettings
name|DynamicSettings
name|dynamicSettings
parameter_list|)
block|{
name|dynamicSettings
operator|.
name|addDynamicSettings
argument_list|(
name|SETTING_TRACE_LOG_INCLUDE
argument_list|,
name|SETTING_TRACE_LOG_INCLUDE
operator|+
literal|".*"
argument_list|)
expr_stmt|;
name|dynamicSettings
operator|.
name|addDynamicSettings
argument_list|(
name|SETTING_TRACE_LOG_EXCLUDE
argument_list|,
name|SETTING_TRACE_LOG_EXCLUDE
operator|+
literal|".*"
argument_list|)
expr_stmt|;
name|nodeSettingsService
operator|.
name|addListener
argument_list|(
name|settingsListener
argument_list|)
expr_stmt|;
block|}
DECL|class|ApplySettings
class|class
name|ApplySettings
implements|implements
name|NodeSettingsService
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|String
index|[]
name|newTracerLogInclude
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|SETTING_TRACE_LOG_INCLUDE
argument_list|,
name|TransportService
operator|.
name|this
operator|.
name|tracerLogInclude
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|newTracerLogExclude
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|SETTING_TRACE_LOG_EXCLUDE
argument_list|,
name|TransportService
operator|.
name|this
operator|.
name|tracelLogExclude
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|newTracerLogInclude
operator|==
name|TransportService
operator|.
name|this
operator|.
name|tracerLogInclude
operator|&&
name|newTracerLogExclude
operator|==
name|TransportService
operator|.
name|this
operator|.
name|tracelLogExclude
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|newTracerLogInclude
argument_list|,
name|TransportService
operator|.
name|this
operator|.
name|tracerLogInclude
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|newTracerLogExclude
argument_list|,
name|TransportService
operator|.
name|this
operator|.
name|tracelLogExclude
argument_list|)
condition|)
block|{
return|return;
block|}
name|TransportService
operator|.
name|this
operator|.
name|tracerLogInclude
operator|=
name|newTracerLogInclude
expr_stmt|;
name|TransportService
operator|.
name|this
operator|.
name|tracelLogExclude
operator|=
name|newTracerLogExclude
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"tracer log updated to use include: {}, exclude: {}"
argument_list|,
name|newTracerLogInclude
argument_list|,
name|newTracerLogExclude
argument_list|)
expr_stmt|;
block|}
block|}
comment|// used for testing
DECL|method|applySettings
specifier|public
name|void
name|applySettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|settingsListener
operator|.
name|onRefreshSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|adapter
operator|.
name|rxMetric
operator|.
name|clear
argument_list|()
expr_stmt|;
name|adapter
operator|.
name|txMetric
operator|.
name|clear
argument_list|()
expr_stmt|;
name|transport
operator|.
name|transportServiceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|transport
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|transport
operator|.
name|boundAddress
argument_list|()
operator|!=
literal|null
operator|&&
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|transport
operator|.
name|boundAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|setStarted
init|=
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
assert|assert
name|setStarted
operator|:
literal|"service was already started"
assert|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
specifier|final
name|boolean
name|setStopped
init|=
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
assert|assert
name|setStopped
operator|:
literal|"service has already been stopped"
assert|;
try|try
block|{
name|transport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// in case the transport is not connected to our local node (thus cleaned on node disconnect)
comment|// make sure to clean any leftover on going handles
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|RequestHolder
argument_list|>
name|entry
range|:
name|clientHandlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|RequestHolder
name|holderToNotify
init|=
name|clientHandlers
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|holderToNotify
operator|!=
literal|null
condition|)
block|{
comment|// callback that an exception happened, but on a different thread since we don't
comment|// want handlers to worry about stack overflows
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|holderToNotify
operator|.
name|handler
argument_list|()
operator|.
name|handleException
argument_list|(
operator|new
name|TransportException
argument_list|(
literal|"transport stopped, action: "
operator|+
name|holderToNotify
operator|.
name|action
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addressSupported
specifier|public
name|boolean
name|addressSupported
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TransportAddress
argument_list|>
name|address
parameter_list|)
block|{
return|return
name|transport
operator|.
name|addressSupported
argument_list|(
name|address
argument_list|)
return|;
block|}
DECL|method|info
specifier|public
name|TransportInfo
name|info
parameter_list|()
block|{
name|BoundTransportAddress
name|boundTransportAddress
init|=
name|boundAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|boundTransportAddress
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|TransportInfo
argument_list|(
name|boundTransportAddress
argument_list|,
name|transport
operator|.
name|profileBoundAddresses
argument_list|()
argument_list|)
return|;
block|}
DECL|method|stats
specifier|public
name|TransportStats
name|stats
parameter_list|()
block|{
return|return
operator|new
name|TransportStats
argument_list|(
name|transport
operator|.
name|serverOpen
argument_list|()
argument_list|,
name|adapter
operator|.
name|rxMetric
operator|.
name|count
argument_list|()
argument_list|,
name|adapter
operator|.
name|rxMetric
operator|.
name|sum
argument_list|()
argument_list|,
name|adapter
operator|.
name|txMetric
operator|.
name|count
argument_list|()
argument_list|,
name|adapter
operator|.
name|txMetric
operator|.
name|sum
argument_list|()
argument_list|)
return|;
block|}
DECL|method|boundAddress
specifier|public
name|BoundTransportAddress
name|boundAddress
parameter_list|()
block|{
return|return
name|transport
operator|.
name|boundAddress
argument_list|()
return|;
block|}
DECL|method|nodeConnected
specifier|public
name|boolean
name|nodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|equals
argument_list|(
name|localNode
argument_list|)
operator|||
name|transport
operator|.
name|nodeConnected
argument_list|(
name|node
argument_list|)
return|;
block|}
DECL|method|connectToNode
specifier|public
name|void
name|connectToNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|ConnectTransportException
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|localNode
argument_list|)
condition|)
block|{
return|return;
block|}
name|transport
operator|.
name|connectToNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|connectToNodeLight
specifier|public
name|void
name|connectToNodeLight
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|ConnectTransportException
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|localNode
argument_list|)
condition|)
block|{
return|return;
block|}
name|transport
operator|.
name|connectToNodeLight
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|disconnectFromNode
specifier|public
name|void
name|disconnectFromNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|localNode
argument_list|)
condition|)
block|{
return|return;
block|}
name|transport
operator|.
name|disconnectFromNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|addConnectionListener
specifier|public
name|void
name|addConnectionListener
parameter_list|(
name|TransportConnectionListener
name|listener
parameter_list|)
block|{
name|connectionListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeConnectionListener
specifier|public
name|void
name|removeConnectionListener
parameter_list|(
name|TransportConnectionListener
name|listener
parameter_list|)
block|{
name|connectionListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|submitRequest
specifier|public
parameter_list|<
name|T
extends|extends
name|TransportResponse
parameter_list|>
name|TransportFuture
argument_list|<
name|T
argument_list|>
name|submitRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|)
throws|throws
name|TransportException
block|{
return|return
name|submitRequest
argument_list|(
name|node
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|TransportRequestOptions
operator|.
name|EMPTY
argument_list|,
name|handler
argument_list|)
return|;
block|}
DECL|method|submitRequest
specifier|public
parameter_list|<
name|T
extends|extends
name|TransportResponse
parameter_list|>
name|TransportFuture
argument_list|<
name|T
argument_list|>
name|submitRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|,
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|)
throws|throws
name|TransportException
block|{
name|PlainTransportFuture
argument_list|<
name|T
argument_list|>
name|futureHandler
init|=
operator|new
name|PlainTransportFuture
argument_list|<>
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|sendRequest
argument_list|(
name|node
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|,
name|futureHandler
argument_list|)
expr_stmt|;
return|return
name|futureHandler
return|;
block|}
DECL|method|sendRequest
specifier|public
parameter_list|<
name|T
extends|extends
name|TransportResponse
parameter_list|>
name|void
name|sendRequest
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|String
name|action
parameter_list|,
specifier|final
name|TransportRequest
name|request
parameter_list|,
specifier|final
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|)
block|{
name|sendRequest
argument_list|(
name|node
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|TransportRequestOptions
operator|.
name|EMPTY
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
DECL|method|sendRequest
specifier|public
parameter_list|<
name|T
extends|extends
name|TransportResponse
parameter_list|>
name|void
name|sendRequest
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|String
name|action
parameter_list|,
specifier|final
name|TransportRequest
name|request
parameter_list|,
specifier|final
name|TransportRequestOptions
name|options
parameter_list|,
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't send request to a null node"
argument_list|)
throw|;
block|}
specifier|final
name|long
name|requestId
init|=
name|newRequestId
argument_list|()
decl_stmt|;
specifier|final
name|TimeoutHandler
name|timeoutHandler
decl_stmt|;
try|try
block|{
if|if
condition|(
name|options
operator|.
name|timeout
argument_list|()
operator|==
literal|null
condition|)
block|{
name|timeoutHandler
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|timeoutHandler
operator|=
operator|new
name|TimeoutHandler
argument_list|(
name|requestId
argument_list|)
expr_stmt|;
block|}
name|clientHandlers
operator|.
name|put
argument_list|(
name|requestId
argument_list|,
operator|new
name|RequestHolder
argument_list|<>
argument_list|(
name|handler
argument_list|,
name|node
argument_list|,
name|action
argument_list|,
name|timeoutHandler
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// if we are not started the exception handling will remove the RequestHolder again and calls the handler to notify the caller.
comment|// it will only notify if the toStop code hasn't done the work yet.
throw|throw
operator|new
name|TransportException
argument_list|(
literal|"TransportService is closed stopped can't send request"
argument_list|)
throw|;
block|}
if|if
condition|(
name|timeoutHandler
operator|!=
literal|null
condition|)
block|{
assert|assert
name|options
operator|.
name|timeout
argument_list|()
operator|!=
literal|null
assert|;
name|timeoutHandler
operator|.
name|future
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|options
operator|.
name|timeout
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
name|timeoutHandler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|localNode
argument_list|)
condition|)
block|{
name|sendLocalRequest
argument_list|(
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transport
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
comment|// usually happen either because we failed to connect to the node
comment|// or because we failed serializing the message
specifier|final
name|RequestHolder
name|holderToNotify
init|=
name|clientHandlers
operator|.
name|remove
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
comment|// If holderToNotify == null then handler has already been taken care of.
if|if
condition|(
name|holderToNotify
operator|!=
literal|null
condition|)
block|{
name|holderToNotify
operator|.
name|cancelTimeout
argument_list|()
expr_stmt|;
comment|// callback that an exception happened, but on a different thread since we don't
comment|// want handlers to worry about stack overflows
specifier|final
name|SendRequestTransportException
name|sendRequestException
init|=
operator|new
name|SendRequestTransportException
argument_list|(
name|node
argument_list|,
name|action
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|holderToNotify
operator|.
name|handler
argument_list|()
operator|.
name|handleException
argument_list|(
name|sendRequestException
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|sendLocalRequest
specifier|private
name|void
name|sendLocalRequest
parameter_list|(
name|long
name|requestId
parameter_list|,
specifier|final
name|String
name|action
parameter_list|,
specifier|final
name|TransportRequest
name|request
parameter_list|)
block|{
specifier|final
name|DirectResponseChannel
name|channel
init|=
operator|new
name|DirectResponseChannel
argument_list|(
name|logger
argument_list|,
name|localNode
argument_list|,
name|action
argument_list|,
name|requestId
argument_list|,
name|adapter
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|RequestHandlerRegistry
name|reg
init|=
name|adapter
operator|.
name|getRequestHandler
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|reg
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ActionNotFoundTransportException
argument_list|(
literal|"Action ["
operator|+
name|action
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|executor
init|=
name|reg
operator|.
name|getExecutor
argument_list|()
decl_stmt|;
if|if
condition|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
operator|.
name|equals
argument_list|(
name|executor
argument_list|)
condition|)
block|{
comment|//noinspection unchecked
name|reg
operator|.
name|getHandler
argument_list|()
operator|.
name|messageReceived
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
comment|//noinspection unchecked
name|reg
operator|.
name|getHandler
argument_list|()
operator|.
name|messageReceived
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isForceExecution
parameter_list|()
block|{
return|return
name|reg
operator|.
name|isForceExecution
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to notify channel of error message for action ["
operator|+
name|action
operator|+
literal|"]"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"actual exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to notify channel of error message for action ["
operator|+
name|action
operator|+
literal|"]"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"actual exception"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|shouldTraceAction
specifier|private
name|boolean
name|shouldTraceAction
parameter_list|(
name|String
name|action
parameter_list|)
block|{
if|if
condition|(
name|tracerLogInclude
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|tracerLogInclude
argument_list|,
name|action
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|tracelLogExclude
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
operator|!
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|tracelLogExclude
argument_list|,
name|action
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|newRequestId
specifier|private
name|long
name|newRequestId
parameter_list|()
block|{
return|return
name|requestIds
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
DECL|method|addressesFromString
specifier|public
name|TransportAddress
index|[]
name|addressesFromString
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|transport
operator|.
name|addressesFromString
argument_list|(
name|address
argument_list|)
return|;
block|}
comment|/**      * Registers a new request handler      * @param action The action the request handler is associated with      * @param request The request class that will be used to constrcut new instances for streaming      * @param executor The executor the request handling will be executed on      * @param handler The handler itself that implements the request handling      */
DECL|method|registerRequestHandler
specifier|public
specifier|final
parameter_list|<
name|Request
extends|extends
name|TransportRequest
parameter_list|>
name|void
name|registerRequestHandler
parameter_list|(
name|String
name|action
parameter_list|,
name|Class
argument_list|<
name|Request
argument_list|>
name|request
parameter_list|,
name|String
name|executor
parameter_list|,
name|TransportRequestHandler
argument_list|<
name|Request
argument_list|>
name|handler
parameter_list|)
block|{
name|registerRequestHandler
argument_list|(
name|action
argument_list|,
name|request
argument_list|,
name|executor
argument_list|,
literal|false
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Registers a new request handler      * @param action The action the request handler is associated with      * @param request The request class that will be used to constrcut new instances for streaming      * @param executor The executor the request handling will be executed on      * @param forceExecution Force execution on the executor queue and never reject it      * @param handler The handler itself that implements the request handling      */
DECL|method|registerRequestHandler
specifier|public
parameter_list|<
name|Request
extends|extends
name|TransportRequest
parameter_list|>
name|void
name|registerRequestHandler
parameter_list|(
name|String
name|action
parameter_list|,
name|Class
argument_list|<
name|Request
argument_list|>
name|request
parameter_list|,
name|String
name|executor
parameter_list|,
name|boolean
name|forceExecution
parameter_list|,
name|TransportRequestHandler
argument_list|<
name|Request
argument_list|>
name|handler
parameter_list|)
block|{
synchronized|synchronized
init|(
name|requestHandlerMutex
init|)
block|{
name|RequestHandlerRegistry
argument_list|<
name|Request
argument_list|>
name|reg
init|=
operator|new
name|RequestHandlerRegistry
argument_list|<>
argument_list|(
name|action
argument_list|,
name|request
argument_list|,
name|handler
argument_list|,
name|executor
argument_list|,
name|forceExecution
argument_list|)
decl_stmt|;
name|RequestHandlerRegistry
name|replaced
init|=
name|requestHandlers
operator|.
name|get
argument_list|(
name|reg
operator|.
name|getAction
argument_list|()
argument_list|)
decl_stmt|;
name|requestHandlers
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|requestHandlers
argument_list|)
operator|.
name|put
argument_list|(
name|reg
operator|.
name|getAction
argument_list|()
argument_list|,
name|reg
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
if|if
condition|(
name|replaced
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"registered two transport handlers for action {}, handlers: {}, {}"
argument_list|,
name|reg
operator|.
name|getAction
argument_list|()
argument_list|,
name|reg
operator|.
name|getHandler
argument_list|()
argument_list|,
name|replaced
operator|.
name|getHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeHandler
specifier|public
name|void
name|removeHandler
parameter_list|(
name|String
name|action
parameter_list|)
block|{
synchronized|synchronized
init|(
name|requestHandlerMutex
init|)
block|{
name|requestHandlers
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|requestHandlers
argument_list|)
operator|.
name|remove
argument_list|(
name|action
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getRequestHandler
specifier|protected
name|RequestHandlerRegistry
name|getRequestHandler
parameter_list|(
name|String
name|action
parameter_list|)
block|{
return|return
name|requestHandlers
operator|.
name|get
argument_list|(
name|action
argument_list|)
return|;
block|}
DECL|class|Adapter
specifier|protected
class|class
name|Adapter
implements|implements
name|TransportServiceAdapter
block|{
DECL|field|rxMetric
specifier|final
name|MeanMetric
name|rxMetric
init|=
operator|new
name|MeanMetric
argument_list|()
decl_stmt|;
DECL|field|txMetric
specifier|final
name|MeanMetric
name|txMetric
init|=
operator|new
name|MeanMetric
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|received
specifier|public
name|void
name|received
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|rxMetric
operator|.
name|inc
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sent
specifier|public
name|void
name|sent
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|txMetric
operator|.
name|inc
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRequestSent
specifier|public
name|void
name|onRequestSent
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|traceEnabled
argument_list|()
operator|&&
name|shouldTraceAction
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|traceRequestSent
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|traceEnabled
specifier|protected
name|boolean
name|traceEnabled
parameter_list|()
block|{
return|return
name|tracerLog
operator|.
name|isTraceEnabled
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onResponseSent
specifier|public
name|void
name|onResponseSent
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportResponse
name|response
parameter_list|,
name|TransportResponseOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|traceEnabled
argument_list|()
operator|&&
name|shouldTraceAction
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|traceResponseSent
argument_list|(
name|requestId
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onResponseSent
specifier|public
name|void
name|onResponseSent
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|traceEnabled
argument_list|()
operator|&&
name|shouldTraceAction
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|traceResponseSent
argument_list|(
name|requestId
argument_list|,
name|action
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|traceResponseSent
specifier|protected
name|void
name|traceResponseSent
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|tracerLog
operator|.
name|trace
argument_list|(
literal|"[{}][{}] sent error response (error: [{}])"
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRequestReceived
specifier|public
name|void
name|onRequestReceived
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|)
block|{
if|if
condition|(
name|traceEnabled
argument_list|()
operator|&&
name|shouldTraceAction
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|traceReceivedRequest
argument_list|(
name|requestId
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRequestHandler
specifier|public
name|RequestHandlerRegistry
name|getRequestHandler
parameter_list|(
name|String
name|action
parameter_list|)
block|{
return|return
name|requestHandlers
operator|.
name|get
argument_list|(
name|action
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onResponseReceived
specifier|public
name|TransportResponseHandler
name|onResponseReceived
parameter_list|(
specifier|final
name|long
name|requestId
parameter_list|)
block|{
name|RequestHolder
name|holder
init|=
name|clientHandlers
operator|.
name|remove
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|==
literal|null
condition|)
block|{
name|checkForTimeout
argument_list|(
name|requestId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|holder
operator|.
name|cancelTimeout
argument_list|()
expr_stmt|;
if|if
condition|(
name|traceEnabled
argument_list|()
operator|&&
name|shouldTraceAction
argument_list|(
name|holder
operator|.
name|action
argument_list|()
argument_list|)
condition|)
block|{
name|traceReceivedResponse
argument_list|(
name|requestId
argument_list|,
name|holder
operator|.
name|node
argument_list|()
argument_list|,
name|holder
operator|.
name|action
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|holder
operator|.
name|handler
argument_list|()
return|;
block|}
DECL|method|checkForTimeout
specifier|protected
name|void
name|checkForTimeout
parameter_list|(
name|long
name|requestId
parameter_list|)
block|{
comment|// lets see if its in the timeout holder, but sync on mutex to make sure any ongoing timeout handling has finished
specifier|final
name|DiscoveryNode
name|sourceNode
decl_stmt|;
specifier|final
name|String
name|action
decl_stmt|;
assert|assert
name|clientHandlers
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
operator|==
literal|null
assert|;
name|TimeoutInfoHolder
name|timeoutInfoHolder
init|=
name|timeoutInfoHandlers
operator|.
name|remove
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeoutInfoHolder
operator|!=
literal|null
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Received response for a request that has timed out, sent [{}ms] ago, timed out [{}ms] ago, action [{}], node [{}], id [{}]"
argument_list|,
name|time
operator|-
name|timeoutInfoHolder
operator|.
name|sentTime
argument_list|()
argument_list|,
name|time
operator|-
name|timeoutInfoHolder
operator|.
name|timeoutTime
argument_list|()
argument_list|,
name|timeoutInfoHolder
operator|.
name|action
argument_list|()
argument_list|,
name|timeoutInfoHolder
operator|.
name|node
argument_list|()
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
name|action
operator|=
name|timeoutInfoHolder
operator|.
name|action
argument_list|()
expr_stmt|;
name|sourceNode
operator|=
name|timeoutInfoHolder
operator|.
name|node
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Transport response handler not found of id [{}]"
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
name|action
operator|=
literal|null
expr_stmt|;
name|sourceNode
operator|=
literal|null
expr_stmt|;
block|}
comment|// call tracer out of lock
if|if
condition|(
name|traceEnabled
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
assert|assert
name|sourceNode
operator|==
literal|null
assert|;
name|traceUnresolvedResponse
argument_list|(
name|requestId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shouldTraceAction
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|traceReceivedResponse
argument_list|(
name|requestId
argument_list|,
name|sourceNode
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|raiseNodeConnected
specifier|public
name|void
name|raiseNodeConnected
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|TransportConnectionListener
name|connectionListener
range|:
name|connectionListeners
control|)
block|{
name|connectionListener
operator|.
name|onNodeConnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|raiseNodeDisconnected
specifier|public
name|void
name|raiseNodeDisconnected
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|)
block|{
try|try
block|{
for|for
control|(
specifier|final
name|TransportConnectionListener
name|connectionListener
range|:
name|connectionListeners
control|)
block|{
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|connectionListener
operator|.
name|onNodeDisconnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|RequestHolder
argument_list|>
name|entry
range|:
name|clientHandlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RequestHolder
name|holder
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|holder
operator|.
name|node
argument_list|()
operator|.
name|equals
argument_list|(
name|node
argument_list|)
condition|)
block|{
specifier|final
name|RequestHolder
name|holderToNotify
init|=
name|clientHandlers
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|holderToNotify
operator|!=
literal|null
condition|)
block|{
comment|// callback that an exception happened, but on a different thread since we don't
comment|// want handlers to worry about stack overflows
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|holderToNotify
operator|.
name|handler
argument_list|()
operator|.
name|handleException
argument_list|(
operator|new
name|NodeDisconnectedException
argument_list|(
name|node
argument_list|,
name|holderToNotify
operator|.
name|action
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Rejected execution on NodeDisconnected"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|traceReceivedRequest
specifier|protected
name|void
name|traceReceivedRequest
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|tracerLog
operator|.
name|trace
argument_list|(
literal|"[{}][{}] received request"
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
DECL|method|traceResponseSent
specifier|protected
name|void
name|traceResponseSent
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|tracerLog
operator|.
name|trace
argument_list|(
literal|"[{}][{}] sent response"
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
DECL|method|traceReceivedResponse
specifier|protected
name|void
name|traceReceivedResponse
parameter_list|(
name|long
name|requestId
parameter_list|,
name|DiscoveryNode
name|sourceNode
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|tracerLog
operator|.
name|trace
argument_list|(
literal|"[{}][{}] received response from [{}]"
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|sourceNode
argument_list|)
expr_stmt|;
block|}
DECL|method|traceUnresolvedResponse
specifier|protected
name|void
name|traceUnresolvedResponse
parameter_list|(
name|long
name|requestId
parameter_list|)
block|{
name|tracerLog
operator|.
name|trace
argument_list|(
literal|"[{}] received response but can't resolve it to a request"
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
block|}
DECL|method|traceRequestSent
specifier|protected
name|void
name|traceRequestSent
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
block|{
name|tracerLog
operator|.
name|trace
argument_list|(
literal|"[{}][{}] sent to [{}] (timeout: [{}])"
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|node
argument_list|,
name|options
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TimeoutHandler
class|class
name|TimeoutHandler
implements|implements
name|Runnable
block|{
DECL|field|requestId
specifier|private
specifier|final
name|long
name|requestId
decl_stmt|;
DECL|field|sentTime
specifier|private
specifier|final
name|long
name|sentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|future
specifier|volatile
name|ScheduledFuture
name|future
decl_stmt|;
DECL|method|TimeoutHandler
name|TimeoutHandler
parameter_list|(
name|long
name|requestId
parameter_list|)
block|{
name|this
operator|.
name|requestId
operator|=
name|requestId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// we get first to make sure we only add the TimeoutInfoHandler if needed.
specifier|final
name|RequestHolder
name|holder
init|=
name|clientHandlers
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|!=
literal|null
condition|)
block|{
comment|// add it to the timeout information holder, in case we are going to get a response later
name|long
name|timeoutTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|timeoutInfoHandlers
operator|.
name|put
argument_list|(
name|requestId
argument_list|,
operator|new
name|TimeoutInfoHolder
argument_list|(
name|holder
operator|.
name|node
argument_list|()
argument_list|,
name|holder
operator|.
name|action
argument_list|()
argument_list|,
name|sentTime
argument_list|,
name|timeoutTime
argument_list|)
argument_list|)
expr_stmt|;
comment|// now that we have the information visible via timeoutInfoHandlers, we try to remove the request id
specifier|final
name|RequestHolder
name|removedHolder
init|=
name|clientHandlers
operator|.
name|remove
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
if|if
condition|(
name|removedHolder
operator|!=
literal|null
condition|)
block|{
assert|assert
name|removedHolder
operator|==
name|holder
operator|:
literal|"two different holder instances for request ["
operator|+
name|requestId
operator|+
literal|"]"
assert|;
name|removedHolder
operator|.
name|handler
argument_list|()
operator|.
name|handleException
argument_list|(
operator|new
name|ReceiveTimeoutTransportException
argument_list|(
name|holder
operator|.
name|node
argument_list|()
argument_list|,
name|holder
operator|.
name|action
argument_list|()
argument_list|,
literal|"request_id ["
operator|+
name|requestId
operator|+
literal|"] timed out after ["
operator|+
operator|(
name|timeoutTime
operator|-
name|sentTime
operator|)
operator|+
literal|"ms]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// response was processed, remove timeout info.
name|timeoutInfoHandlers
operator|.
name|remove
argument_list|(
name|requestId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #clientHandlers}          * to make sure this doesn't run.          */
DECL|method|cancel
specifier|public
name|void
name|cancel
parameter_list|()
block|{
assert|assert
name|clientHandlers
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
operator|==
literal|null
operator|:
literal|"cancel must be called after the requestId ["
operator|+
name|requestId
operator|+
literal|"] has been removed from clientHandlers"
assert|;
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TimeoutInfoHolder
specifier|static
class|class
name|TimeoutInfoHolder
block|{
DECL|field|node
specifier|private
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|field|action
specifier|private
specifier|final
name|String
name|action
decl_stmt|;
DECL|field|sentTime
specifier|private
specifier|final
name|long
name|sentTime
decl_stmt|;
DECL|field|timeoutTime
specifier|private
specifier|final
name|long
name|timeoutTime
decl_stmt|;
DECL|method|TimeoutInfoHolder
name|TimeoutInfoHolder
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|action
parameter_list|,
name|long
name|sentTime
parameter_list|,
name|long
name|timeoutTime
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|sentTime
operator|=
name|sentTime
expr_stmt|;
name|this
operator|.
name|timeoutTime
operator|=
name|timeoutTime
expr_stmt|;
block|}
DECL|method|node
specifier|public
name|DiscoveryNode
name|node
parameter_list|()
block|{
return|return
name|node
return|;
block|}
DECL|method|action
specifier|public
name|String
name|action
parameter_list|()
block|{
return|return
name|action
return|;
block|}
DECL|method|sentTime
specifier|public
name|long
name|sentTime
parameter_list|()
block|{
return|return
name|sentTime
return|;
block|}
DECL|method|timeoutTime
specifier|public
name|long
name|timeoutTime
parameter_list|()
block|{
return|return
name|timeoutTime
return|;
block|}
block|}
DECL|class|RequestHolder
specifier|static
class|class
name|RequestHolder
parameter_list|<
name|T
extends|extends
name|TransportResponse
parameter_list|>
block|{
DECL|field|handler
specifier|private
specifier|final
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
decl_stmt|;
DECL|field|node
specifier|private
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|field|action
specifier|private
specifier|final
name|String
name|action
decl_stmt|;
DECL|field|timeoutHandler
specifier|private
specifier|final
name|TimeoutHandler
name|timeoutHandler
decl_stmt|;
DECL|method|RequestHolder
name|RequestHolder
parameter_list|(
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|action
parameter_list|,
name|TimeoutHandler
name|timeoutHandler
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|timeoutHandler
operator|=
name|timeoutHandler
expr_stmt|;
block|}
DECL|method|handler
specifier|public
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
DECL|method|node
specifier|public
name|DiscoveryNode
name|node
parameter_list|()
block|{
return|return
name|this
operator|.
name|node
return|;
block|}
DECL|method|action
specifier|public
name|String
name|action
parameter_list|()
block|{
return|return
name|this
operator|.
name|action
return|;
block|}
DECL|method|cancelTimeout
specifier|public
name|void
name|cancelTimeout
parameter_list|()
block|{
if|if
condition|(
name|timeoutHandler
operator|!=
literal|null
condition|)
block|{
name|timeoutHandler
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|DirectResponseChannel
specifier|static
class|class
name|DirectResponseChannel
implements|implements
name|TransportChannel
block|{
DECL|field|logger
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|localNode
specifier|final
name|DiscoveryNode
name|localNode
decl_stmt|;
DECL|field|action
specifier|final
specifier|private
name|String
name|action
decl_stmt|;
DECL|field|requestId
specifier|final
specifier|private
name|long
name|requestId
decl_stmt|;
DECL|field|adapter
specifier|final
name|TransportServiceAdapter
name|adapter
decl_stmt|;
DECL|field|threadPool
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|method|DirectResponseChannel
specifier|public
name|DirectResponseChannel
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|DiscoveryNode
name|localNode
parameter_list|,
name|String
name|action
parameter_list|,
name|long
name|requestId
parameter_list|,
name|TransportServiceAdapter
name|adapter
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|localNode
operator|=
name|localNode
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|requestId
operator|=
name|requestId
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|action
specifier|public
name|String
name|action
parameter_list|()
block|{
return|return
name|action
return|;
block|}
annotation|@
name|Override
DECL|method|getProfileName
specifier|public
name|String
name|getProfileName
parameter_list|()
block|{
return|return
name|DIRECT_RESPONSE_PROFILE
return|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|sendResponse
argument_list|(
name|response
argument_list|,
name|TransportResponseOptions
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
specifier|final
name|TransportResponse
name|response
parameter_list|,
name|TransportResponseOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TransportResponseHandler
name|handler
init|=
name|adapter
operator|.
name|onResponseReceived
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
comment|// ignore if its null, the adapter logs it
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|executor
init|=
name|handler
operator|.
name|executor
argument_list|()
decl_stmt|;
if|if
condition|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
operator|.
name|equals
argument_list|(
name|executor
argument_list|)
condition|)
block|{
name|processResponse
argument_list|(
name|handler
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|processResponse
argument_list|(
name|handler
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processResponse
specifier|protected
name|void
name|processResponse
parameter_list|(
name|TransportResponseHandler
name|handler
parameter_list|,
name|TransportResponse
name|response
parameter_list|)
block|{
try|try
block|{
name|handler
operator|.
name|handleResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|processException
argument_list|(
name|handler
argument_list|,
name|wrapInRemote
argument_list|(
operator|new
name|ResponseHandlerFailureTransportException
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|Throwable
name|error
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TransportResponseHandler
name|handler
init|=
name|adapter
operator|.
name|onResponseReceived
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
comment|// ignore if its null, the adapter logs it
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RemoteTransportException
name|rtx
init|=
name|wrapInRemote
argument_list|(
name|error
argument_list|)
decl_stmt|;
specifier|final
name|String
name|executor
init|=
name|handler
operator|.
name|executor
argument_list|()
decl_stmt|;
if|if
condition|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
operator|.
name|equals
argument_list|(
name|executor
argument_list|)
condition|)
block|{
name|processException
argument_list|(
name|handler
argument_list|,
name|rtx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|handler
operator|.
name|executor
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|processException
argument_list|(
name|handler
argument_list|,
name|rtx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|wrapInRemote
specifier|protected
name|RemoteTransportException
name|wrapInRemote
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|RemoteTransportException
condition|)
block|{
return|return
operator|(
name|RemoteTransportException
operator|)
name|t
return|;
block|}
return|return
operator|new
name|RemoteTransportException
argument_list|(
name|localNode
operator|.
name|name
argument_list|()
argument_list|,
name|localNode
operator|.
name|getAddress
argument_list|()
argument_list|,
name|action
argument_list|,
name|t
argument_list|)
return|;
block|}
DECL|method|processException
specifier|protected
name|void
name|processException
parameter_list|(
specifier|final
name|TransportResponseHandler
name|handler
parameter_list|,
specifier|final
name|RemoteTransportException
name|rtx
parameter_list|)
block|{
try|try
block|{
name|handler
operator|.
name|handleException
argument_list|(
name|rtx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to handle exception for action [{}], handler [{}]"
argument_list|,
name|e
argument_list|,
name|action
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

