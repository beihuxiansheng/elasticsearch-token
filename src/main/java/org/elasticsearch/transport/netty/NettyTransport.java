begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|ReleasableBytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|HandlesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ReleasableBytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|math
operator|.
name|MathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|NettyStaticSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|OpenChannelsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|ReleaseChannelFutureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|PortsRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|KeyedLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|support
operator|.
name|TransportStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ClientBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|CompositeChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioClientSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioWorkerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|oio
operator|.
name|OioClientSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|oio
operator|.
name|OioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|CancelledKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|NetworkExceptionHelper
operator|.
name|isCloseConnectionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|NetworkExceptionHelper
operator|.
name|isConnectException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_comment
comment|/**  * There are 4 types of connections per node, low/med/high/ping. Low if for batch oriented APIs (like recovery or  * batch) with high payload that will cause regular request. (like search or single index) to take  * longer. Med is for the typical search / single doc index. And High for things like cluster state. Ping is reserved for  * sending out ping requests to other nodes.  */
end_comment

begin_class
DECL|class|NettyTransport
specifier|public
class|class
name|NettyTransport
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|Transport
argument_list|>
implements|implements
name|Transport
block|{
static|static
block|{
name|NettyStaticSetup
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
DECL|field|WORKER_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_COUNT
init|=
literal|"transport.netty.worker_count"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_RECOVERY
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_RECOVERY
init|=
literal|"transport.connections_per_node.recovery"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_BULK
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_BULK
init|=
literal|"transport.connections_per_node.bulk"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_REG
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_REG
init|=
literal|"transport.connections_per_node.reg"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_STATE
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_STATE
init|=
literal|"transport.connections_per_node.state"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_PING
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_PING
init|=
literal|"transport.connections_per_node.ping"
decl_stmt|;
DECL|field|networkService
specifier|private
specifier|final
name|NetworkService
name|networkService
decl_stmt|;
DECL|field|version
specifier|final
name|Version
name|version
decl_stmt|;
DECL|field|workerCount
specifier|final
name|int
name|workerCount
decl_stmt|;
DECL|field|bossCount
specifier|final
name|int
name|bossCount
decl_stmt|;
DECL|field|blockingServer
specifier|final
name|boolean
name|blockingServer
decl_stmt|;
DECL|field|blockingClient
specifier|final
name|boolean
name|blockingClient
decl_stmt|;
DECL|field|port
specifier|final
name|String
name|port
decl_stmt|;
DECL|field|bindHost
specifier|final
name|String
name|bindHost
decl_stmt|;
DECL|field|publishHost
specifier|final
name|String
name|publishHost
decl_stmt|;
DECL|field|publishPort
specifier|final
name|int
name|publishPort
decl_stmt|;
DECL|field|compress
specifier|final
name|boolean
name|compress
decl_stmt|;
DECL|field|connectTimeout
specifier|final
name|TimeValue
name|connectTimeout
decl_stmt|;
DECL|field|tcpNoDelay
specifier|final
name|Boolean
name|tcpNoDelay
decl_stmt|;
DECL|field|tcpKeepAlive
specifier|final
name|Boolean
name|tcpKeepAlive
decl_stmt|;
DECL|field|reuseAddress
specifier|final
name|Boolean
name|reuseAddress
decl_stmt|;
DECL|field|tcpSendBufferSize
specifier|final
name|ByteSizeValue
name|tcpSendBufferSize
decl_stmt|;
DECL|field|tcpReceiveBufferSize
specifier|final
name|ByteSizeValue
name|tcpReceiveBufferSize
decl_stmt|;
DECL|field|receiveBufferSizePredictorFactory
specifier|final
name|ReceiveBufferSizePredictorFactory
name|receiveBufferSizePredictorFactory
decl_stmt|;
DECL|field|connectionsPerNodeRecovery
specifier|final
name|int
name|connectionsPerNodeRecovery
decl_stmt|;
DECL|field|connectionsPerNodeBulk
specifier|final
name|int
name|connectionsPerNodeBulk
decl_stmt|;
DECL|field|connectionsPerNodeReg
specifier|final
name|int
name|connectionsPerNodeReg
decl_stmt|;
DECL|field|connectionsPerNodeState
specifier|final
name|int
name|connectionsPerNodeState
decl_stmt|;
DECL|field|connectionsPerNodePing
specifier|final
name|int
name|connectionsPerNodePing
decl_stmt|;
DECL|field|maxCumulationBufferCapacity
specifier|final
name|ByteSizeValue
name|maxCumulationBufferCapacity
decl_stmt|;
DECL|field|maxCompositeBufferComponents
specifier|final
name|int
name|maxCompositeBufferComponents
decl_stmt|;
DECL|field|bigArrays
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|serverOpenChannels
specifier|private
specifier|volatile
name|OpenChannelsHandler
name|serverOpenChannels
decl_stmt|;
DECL|field|clientBootstrap
specifier|private
specifier|volatile
name|ClientBootstrap
name|clientBootstrap
decl_stmt|;
DECL|field|serverBootstrap
specifier|private
specifier|volatile
name|ServerBootstrap
name|serverBootstrap
decl_stmt|;
comment|// node id to actual channel
DECL|field|connectedNodes
specifier|final
name|ConcurrentMap
argument_list|<
name|DiscoveryNode
argument_list|,
name|NodeChannels
argument_list|>
name|connectedNodes
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|serverChannel
specifier|private
specifier|volatile
name|Channel
name|serverChannel
decl_stmt|;
DECL|field|transportServiceAdapter
specifier|private
specifier|volatile
name|TransportServiceAdapter
name|transportServiceAdapter
decl_stmt|;
DECL|field|boundAddress
specifier|private
specifier|volatile
name|BoundTransportAddress
name|boundAddress
decl_stmt|;
DECL|field|connectionLock
specifier|private
specifier|final
name|KeyedLock
argument_list|<
name|String
argument_list|>
name|connectionLock
init|=
operator|new
name|KeyedLock
argument_list|<>
argument_list|()
decl_stmt|;
comment|// this lock is here to make sure we close this transport and disconnect all the client nodes
comment|// connections while no connect operations is going on... (this might help with 100% CPU when stopping the transport?)
DECL|field|globalLock
specifier|private
specifier|final
name|ReadWriteLock
name|globalLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|NettyTransport
specifier|public
name|NettyTransport
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|NetworkService
name|networkService
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"netty.epollBugWorkaround"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.jboss.netty.epollBugWorkaround"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|workerCount
operator|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|WORKER_COUNT
argument_list|,
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|settings
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|bossCount
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"boss_count"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockingServer
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"transport.tcp.blocking_server"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING_SERVER
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockingClient
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"transport.tcp.blocking_client"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING_CLIENT
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"port"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.tcp.port"
argument_list|,
literal|"9300-9400"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|bindHost
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"bind_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.bind_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.host"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|publishHost
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"publish_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.publish_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.host"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|publishPort
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"publish_port"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.publish_port"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|compress
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TransportSettings
operator|.
name|TRANSPORT_TCP_COMPRESS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectTimeout
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"connect_timeout"
argument_list|,
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"transport.tcp.connect_timeout"
argument_list|,
name|settings
operator|.
name|getAsTime
argument_list|(
name|TCP_CONNECT_TIMEOUT
argument_list|,
name|TCP_DEFAULT_CONNECT_TIMEOUT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpNoDelay
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"tcp_no_delay"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_NO_DELAY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpKeepAlive
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"tcp_keep_alive"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_KEEP_ALIVE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|reuseAddress
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"reuse_address"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_REUSE_ADDRESS
argument_list|,
name|NetworkUtils
operator|.
name|defaultReuseAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpSendBufferSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"tcp_send_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_SEND_BUFFER_SIZE
argument_list|,
name|TCP_DEFAULT_SEND_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpReceiveBufferSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"tcp_receive_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_RECEIVE_BUFFER_SIZE
argument_list|,
name|TCP_DEFAULT_RECEIVE_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodeRecovery
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"connections_per_node.recovery"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_RECOVERY
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodeBulk
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"connections_per_node.bulk"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_BULK
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodeReg
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"connections_per_node.reg"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_REG
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodeState
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"connections_per_node.high"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_STATE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodePing
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"connections_per_node.ping"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_PING
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// we want to have at least 1 for reg/state/ping
if|if
condition|(
name|this
operator|.
name|connectionsPerNodeReg
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"can't set [connection_per_node.reg] to 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|connectionsPerNodePing
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"can't set [connection_per_node.ping] to 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|connectionsPerNodeState
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"can't set [connection_per_node.state] to 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxCumulationBufferCapacity
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"max_cumulation_buffer_capacity"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCompositeBufferComponents
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"max_composite_buffer_components"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|long
name|defaultReceiverPredictor
init|=
literal|512
operator|*
literal|1024
decl_stmt|;
if|if
condition|(
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|mem
argument_list|()
operator|.
name|directMemoryMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// we can guess a better default...
name|long
name|l
init|=
call|(
name|long
call|)
argument_list|(
operator|(
literal|0.3
operator|*
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|mem
argument_list|()
operator|.
name|directMemoryMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|)
operator|/
name|workerCount
argument_list|)
decl_stmt|;
name|defaultReceiverPredictor
operator|=
name|Math
operator|.
name|min
argument_list|(
name|defaultReceiverPredictor
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|l
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one
name|ByteSizeValue
name|receivePredictorMin
init|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"receive_predictor_min"
argument_list|,
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"receive_predictor_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|defaultReceiverPredictor
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ByteSizeValue
name|receivePredictorMax
init|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"receive_predictor_max"
argument_list|,
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"receive_predictor_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|defaultReceiverPredictor
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
operator|==
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
condition|)
block|{
name|receiveBufferSizePredictorFactory
operator|=
operator|new
name|FixedReceiveBufferSizePredictorFactory
argument_list|(
operator|(
name|int
operator|)
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiveBufferSizePredictorFactory
operator|=
operator|new
name|AdaptiveReceiveBufferSizePredictorFactory
argument_list|(
operator|(
name|int
operator|)
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"using worker_count[{}], port[{}], bind_host[{}], publish_host[{}], compress[{}], connect_timeout[{}], connections_per_node[{}/{}/{}/{}/{}], receive_predictor[{}->{}]"
argument_list|,
name|workerCount
argument_list|,
name|port
argument_list|,
name|bindHost
argument_list|,
name|publishHost
argument_list|,
name|compress
argument_list|,
name|connectTimeout
argument_list|,
name|connectionsPerNodeRecovery
argument_list|,
name|connectionsPerNodeBulk
argument_list|,
name|connectionsPerNodeReg
argument_list|,
name|connectionsPerNodeState
argument_list|,
name|connectionsPerNodePing
argument_list|,
name|receivePredictorMin
argument_list|,
name|receivePredictorMax
argument_list|)
expr_stmt|;
block|}
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
annotation|@
name|Override
DECL|method|transportServiceAdapter
specifier|public
name|void
name|transportServiceAdapter
parameter_list|(
name|TransportServiceAdapter
name|service
parameter_list|)
block|{
name|this
operator|.
name|transportServiceAdapter
operator|=
name|service
expr_stmt|;
block|}
DECL|method|transportServiceAdapter
name|TransportServiceAdapter
name|transportServiceAdapter
parameter_list|()
block|{
return|return
name|transportServiceAdapter
return|;
block|}
DECL|method|threadPool
name|ThreadPool
name|threadPool
parameter_list|()
block|{
return|return
name|threadPool
return|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
name|blockingClient
condition|)
block|{
name|clientBootstrap
operator|=
operator|new
name|ClientBootstrap
argument_list|(
operator|new
name|OioClientSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transport_client_worker"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clientBootstrap
operator|=
operator|new
name|ClientBootstrap
argument_list|(
operator|new
name|NioClientSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transport_client_boss"
argument_list|)
argument_list|)
argument_list|,
name|bossCount
argument_list|,
operator|new
name|NioWorkerPool
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transport_client_worker"
argument_list|)
argument_list|)
argument_list|,
name|workerCount
argument_list|)
argument_list|,
operator|new
name|HashedWheelTimer
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transport_client_timer"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ChannelPipelineFactory
name|clientPipelineFactory
init|=
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|SizeHeaderFrameDecoder
name|sizeHeader
init|=
operator|new
name|SizeHeaderFrameDecoder
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxCumulationBufferCapacity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
operator|(
name|int
operator|)
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxCompositeBufferComponents
operator|!=
operator|-
literal|1
condition|)
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferComponents
argument_list|(
name|maxCompositeBufferComponents
argument_list|)
expr_stmt|;
block|}
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"size"
argument_list|,
name|sizeHeader
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"dispatcher"
argument_list|,
operator|new
name|MessageChannelHandler
argument_list|(
name|NettyTransport
operator|.
name|this
argument_list|,
name|logger
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
block|}
decl_stmt|;
name|clientBootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|clientPipelineFactory
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"connectTimeoutMillis"
argument_list|,
name|connectTimeout
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcpNoDelay
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpKeepAlive
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"keepAlive"
argument_list|,
name|tcpKeepAlive
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpSendBufferSize
operator|!=
literal|null
operator|&&
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpReceiveBufferSize
operator|!=
literal|null
operator|&&
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSizePredictorFactory"
argument_list|,
name|receiveBufferSizePredictorFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|reuseAddress
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"network.server"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|OpenChannelsHandler
name|openChannels
init|=
operator|new
name|OpenChannelsHandler
argument_list|(
name|logger
argument_list|)
decl_stmt|;
name|this
operator|.
name|serverOpenChannels
operator|=
name|openChannels
expr_stmt|;
if|if
condition|(
name|blockingServer
condition|)
block|{
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|OioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transport_server_boss"
argument_list|)
argument_list|)
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transport_server_worker"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transport_server_boss"
argument_list|)
argument_list|)
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transport_server_worker"
argument_list|)
argument_list|)
argument_list|,
name|workerCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ChannelPipelineFactory
name|serverPipelineFactory
init|=
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"openChannels"
argument_list|,
name|openChannels
argument_list|)
expr_stmt|;
name|SizeHeaderFrameDecoder
name|sizeHeader
init|=
operator|new
name|SizeHeaderFrameDecoder
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxCumulationBufferCapacity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
operator|(
name|int
operator|)
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxCompositeBufferComponents
operator|!=
operator|-
literal|1
condition|)
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferComponents
argument_list|(
name|maxCompositeBufferComponents
argument_list|)
expr_stmt|;
block|}
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"size"
argument_list|,
name|sizeHeader
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"dispatcher"
argument_list|,
operator|new
name|MessageChannelHandler
argument_list|(
name|NettyTransport
operator|.
name|this
argument_list|,
name|logger
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
block|}
decl_stmt|;
name|serverBootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|serverPipelineFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcpNoDelay
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpKeepAlive
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.keepAlive"
argument_list|,
name|tcpKeepAlive
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpSendBufferSize
operator|!=
literal|null
operator|&&
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.sendBufferSize"
argument_list|,
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpReceiveBufferSize
operator|!=
literal|null
operator|&&
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.receiveBufferSize"
argument_list|,
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSizePredictorFactory"
argument_list|,
name|receiveBufferSizePredictorFactory
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.receiveBufferSizePredictorFactory"
argument_list|,
name|receiveBufferSizePredictorFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|reuseAddress
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
block|}
comment|// Bind and start to accept incoming connections.
name|InetAddress
name|hostAddressX
decl_stmt|;
try|try
block|{
name|hostAddressX
operator|=
name|networkService
operator|.
name|resolveBindHostAddress
argument_list|(
name|bindHost
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to resolve host ["
operator|+
name|bindHost
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|InetAddress
name|hostAddress
init|=
name|hostAddressX
decl_stmt|;
name|PortsRange
name|portsRange
init|=
operator|new
name|PortsRange
argument_list|(
name|port
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|portsRange
operator|.
name|iterate
argument_list|(
operator|new
name|PortsRange
operator|.
name|PortCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onPortNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
try|try
block|{
name|serverChannel
operator|=
name|serverBootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|hostAddress
argument_list|,
name|portNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to bind to ["
operator|+
name|port
operator|+
literal|"]"
argument_list|,
name|lastException
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Bound to address [{}]"
argument_list|,
name|serverChannel
operator|.
name|getLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|boundAddress
init|=
operator|(
name|InetSocketAddress
operator|)
name|serverChannel
operator|.
name|getLocalAddress
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|publishAddress
decl_stmt|;
name|int
name|publishPort
init|=
name|this
operator|.
name|publishPort
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|publishPort
condition|)
block|{
name|publishPort
operator|=
name|boundAddress
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|publishAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|networkService
operator|.
name|resolvePublishHostAddress
argument_list|(
name|publishHost
argument_list|)
argument_list|,
name|publishPort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to resolve publish address"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|boundAddress
operator|=
operator|new
name|BoundTransportAddress
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|boundAddress
argument_list|)
argument_list|,
operator|new
name|InetSocketTransportAddress
argument_list|(
name|publishAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// make sure we run it on another thread than a possible IO handler thread
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|globalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|NodeChannels
argument_list|>
name|it
init|=
name|connectedNodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeChannels
name|nodeChannels
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serverChannel
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|serverChannel
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|serverChannel
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serverOpenChannels
operator|!=
literal|null
condition|)
block|{
name|serverOpenChannels
operator|.
name|close
argument_list|()
expr_stmt|;
name|serverOpenChannels
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|serverBootstrap
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|serverBootstrap
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|NodeChannels
argument_list|>
name|it
init|=
name|connectedNodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeChannels
name|nodeChannels
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clientBootstrap
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|clientBootstrap
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|globalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
annotation|@
name|Override
DECL|method|addressesFromString
specifier|public
name|TransportAddress
index|[]
name|addressesFromString
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|index
init|=
name|address
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|host
init|=
name|address
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ports
init|=
name|Strings
operator|.
name|commaDelimitedListToSet
argument_list|(
name|address
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|address
operator|.
name|indexOf
argument_list|(
literal|']'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TransportAddress
argument_list|>
name|addresses
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|port
range|:
name|ports
control|)
block|{
name|int
index|[]
name|iPorts
init|=
operator|new
name|PortsRange
argument_list|(
name|port
argument_list|)
operator|.
name|ports
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iPort
range|:
name|iPorts
control|)
block|{
name|addresses
operator|.
name|add
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|host
argument_list|,
name|iPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|addresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
name|addresses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
name|index
operator|=
name|address
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|List
argument_list|<
name|TransportAddress
argument_list|>
name|addresses
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
index|[]
name|iPorts
init|=
operator|new
name|PortsRange
argument_list|(
name|this
operator|.
name|port
argument_list|)
operator|.
name|ports
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iPort
range|:
name|iPorts
control|)
block|{
name|addresses
operator|.
name|add
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|address
argument_list|,
name|iPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
name|addresses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|host
init|=
name|address
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|address
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransportAddress
index|[]
block|{
operator|new
name|InetSocketTransportAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
block|}
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|addressSupported
specifier|public
name|boolean
name|addressSupported
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TransportAddress
argument_list|>
name|address
parameter_list|)
block|{
return|return
name|InetSocketTransportAddress
operator|.
name|class
operator|.
name|equals
argument_list|(
name|address
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|boundAddress
specifier|public
name|BoundTransportAddress
name|boundAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|boundAddress
return|;
block|}
DECL|method|exceptionCaught
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|isCloseConnectionException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"close connection exception caught on transport layer [{}], disconnecting from relevant node"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the channel, which will cause a node to be disconnected if relevant
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|disconnectFromNodeChannel
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isConnectException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"connect exception caught on transport layer [{}]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the channel as safe measure, which will cause a node to be disconnected if relevant
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|disconnectFromNodeChannel
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|CancelledKeyException
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cancelled key exception caught on transport layer [{}], disconnecting from relevant node"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the channel as safe measure, which will cause a node to be disconnected if relevant
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|disconnectFromNodeChannel
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"exception caught on transport layer [{}], closing connection"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the channel, which will cause a node to be disconnected if relevant
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|disconnectFromNodeChannel
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|wrapAddress
name|TransportAddress
name|wrapAddress
parameter_list|(
name|SocketAddress
name|socketAddress
parameter_list|)
block|{
return|return
operator|new
name|InetSocketTransportAddress
argument_list|(
operator|(
name|InetSocketAddress
operator|)
name|socketAddress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serverOpen
specifier|public
name|long
name|serverOpen
parameter_list|()
block|{
name|OpenChannelsHandler
name|channels
init|=
name|serverOpenChannels
decl_stmt|;
return|return
name|channels
operator|==
literal|null
condition|?
literal|0
else|:
name|channels
operator|.
name|numberOfOpenChannels
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sendRequest
specifier|public
name|void
name|sendRequest
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|long
name|requestId
parameter_list|,
specifier|final
name|String
name|action
parameter_list|,
specifier|final
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
name|Channel
name|targetChannel
init|=
name|nodeChannel
argument_list|(
name|node
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|compress
condition|)
block|{
name|options
operator|.
name|withCompress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|byte
name|status
init|=
literal|0
decl_stmt|;
name|status
operator|=
name|TransportStatus
operator|.
name|setRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|ReleasableBytesStreamOutput
name|bStream
init|=
operator|new
name|ReleasableBytesStreamOutput
argument_list|(
name|bigArrays
argument_list|)
decl_stmt|;
name|boolean
name|addedReleaseListener
init|=
literal|false
decl_stmt|;
try|try
block|{
name|bStream
operator|.
name|skip
argument_list|(
name|NettyHeader
operator|.
name|HEADER_SIZE
argument_list|)
expr_stmt|;
name|StreamOutput
name|stream
init|=
name|bStream
decl_stmt|;
comment|// only compress if asked, and, the request is not bytes, since then only
comment|// the header part is compressed, and the "body" can't be extracted as compressed
if|if
condition|(
name|options
operator|.
name|compress
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|request
operator|instanceof
name|BytesTransportRequest
operator|)
operator|)
condition|)
block|{
name|status
operator|=
name|TransportStatus
operator|.
name|setCompress
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|stream
operator|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|stream
operator|=
operator|new
name|HandlesStreamOutput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|// we pick the smallest of the 2, to support both backward and forward compatibility
comment|// note, this is the only place we need to do this, since from here on, we use the serialized version
comment|// as the version to use also when the node receiving this request will send the response with
name|Version
name|version
init|=
name|Version
operator|.
name|smallest
argument_list|(
name|this
operator|.
name|version
argument_list|,
name|node
operator|.
name|version
argument_list|()
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeString
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|ReleasableBytesReference
name|bytes
decl_stmt|;
name|ChannelBuffer
name|buffer
decl_stmt|;
comment|// it might be nice to somehow generalize this optimization, maybe a smart "paged" bytes output
comment|// that create paged channel buffers, but its tricky to know when to do it (where this option is
comment|// more explicit).
if|if
condition|(
name|request
operator|instanceof
name|BytesTransportRequest
condition|)
block|{
name|BytesTransportRequest
name|bRequest
init|=
operator|(
name|BytesTransportRequest
operator|)
name|request
decl_stmt|;
assert|assert
name|node
operator|.
name|version
argument_list|()
operator|.
name|equals
argument_list|(
name|bRequest
operator|.
name|version
argument_list|()
argument_list|)
assert|;
name|bRequest
operator|.
name|writeThin
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|bytes
operator|=
name|bStream
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|ChannelBuffer
name|headerBuffer
init|=
name|bytes
operator|.
name|toChannelBuffer
argument_list|()
decl_stmt|;
name|ChannelBuffer
name|contentBuffer
init|=
name|bRequest
operator|.
name|bytes
argument_list|()
operator|.
name|toChannelBuffer
argument_list|()
decl_stmt|;
comment|// false on gathering, cause gathering causes the NIO layer to combine the buffers into a single direct buffer....
name|buffer
operator|=
operator|new
name|CompositeChannelBuffer
argument_list|(
name|headerBuffer
operator|.
name|order
argument_list|()
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ChannelBuffer
operator|>
name|of
argument_list|(
name|headerBuffer
argument_list|,
name|contentBuffer
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|bytes
operator|=
name|bStream
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|buffer
operator|=
name|bytes
operator|.
name|toChannelBuffer
argument_list|()
expr_stmt|;
block|}
name|NettyHeader
operator|.
name|writeHeader
argument_list|(
name|buffer
argument_list|,
name|requestId
argument_list|,
name|status
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|ChannelFuture
name|future
init|=
name|targetChannel
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|ReleaseChannelFutureListener
name|listener
init|=
operator|new
name|ReleaseChannelFutureListener
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|addedReleaseListener
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|addedReleaseListener
condition|)
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|bStream
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|nodeConnected
specifier|public
name|boolean
name|nodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
name|connectedNodes
operator|.
name|containsKey
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|connectToNodeLight
specifier|public
name|void
name|connectToNodeLight
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|ConnectTransportException
block|{
name|connectToNode
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|connectToNode
specifier|public
name|void
name|connectToNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|connectToNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|connectToNode
specifier|public
name|void
name|connectToNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|boolean
name|light
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"can't add nodes to a stopped transport"
argument_list|)
throw|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
literal|null
argument_list|,
literal|"can't connect to a null node"
argument_list|)
throw|;
block|}
name|globalLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"can't add nodes to a stopped transport"
argument_list|)
throw|;
block|}
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|connectionLock
operator|.
name|acquire
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"can't add nodes to a stopped transport"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|light
condition|)
block|{
name|nodeChannels
operator|=
name|connectToChannelsLight
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodeChannels
operator|=
operator|new
name|NodeChannels
argument_list|(
operator|new
name|Channel
index|[
name|connectionsPerNodeRecovery
index|]
argument_list|,
operator|new
name|Channel
index|[
name|connectionsPerNodeBulk
index|]
argument_list|,
operator|new
name|Channel
index|[
name|connectionsPerNodeReg
index|]
argument_list|,
operator|new
name|Channel
index|[
name|connectionsPerNodeState
index|]
argument_list|,
operator|new
name|Channel
index|[
name|connectionsPerNodePing
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|connectToChannels
argument_list|(
name|nodeChannels
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|NodeChannels
name|existing
init|=
name|connectedNodes
operator|.
name|putIfAbsent
argument_list|(
name|node
argument_list|,
name|nodeChannels
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// we are already connected to a node, close this ones
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"connected to node [{}]"
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|transportServiceAdapter
operator|.
name|raiseNodeConnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"General node connection failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|connectionLock
operator|.
name|release
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|globalLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|connectToChannelsLight
specifier|private
name|NodeChannels
name|connectToChannelsLight
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|InetSocketAddress
name|address
init|=
operator|(
operator|(
name|InetSocketTransportAddress
operator|)
name|node
operator|.
name|address
argument_list|()
operator|)
operator|.
name|address
argument_list|()
decl_stmt|;
name|ChannelFuture
name|connect
init|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|connect
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connect
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connect
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|Channel
index|[]
name|channels
init|=
operator|new
name|Channel
index|[
literal|1
index|]
decl_stmt|;
name|channels
index|[
literal|0
index|]
operator|=
name|connect
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|channels
index|[
literal|0
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeChannels
argument_list|(
name|channels
argument_list|,
name|channels
argument_list|,
name|channels
argument_list|,
name|channels
argument_list|,
name|channels
argument_list|)
return|;
block|}
DECL|method|connectToChannels
specifier|private
name|void
name|connectToChannels
parameter_list|(
name|NodeChannels
name|nodeChannels
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|ChannelFuture
index|[]
name|connectRecovery
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|recovery
operator|.
name|length
index|]
decl_stmt|;
name|ChannelFuture
index|[]
name|connectBulk
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|bulk
operator|.
name|length
index|]
decl_stmt|;
name|ChannelFuture
index|[]
name|connectReg
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|reg
operator|.
name|length
index|]
decl_stmt|;
name|ChannelFuture
index|[]
name|connectState
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|state
operator|.
name|length
index|]
decl_stmt|;
name|ChannelFuture
index|[]
name|connectPing
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|ping
operator|.
name|length
index|]
decl_stmt|;
name|InetSocketAddress
name|address
init|=
operator|(
operator|(
name|InetSocketTransportAddress
operator|)
name|node
operator|.
name|address
argument_list|()
operator|)
operator|.
name|address
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectRecovery
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectRecovery
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectBulk
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectBulk
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectReg
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectReg
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectState
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectState
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectPing
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectPing
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectRecovery
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectRecovery
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectRecovery
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectRecovery
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|recovery
index|[
name|i
index|]
operator|=
name|connectRecovery
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|recovery
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectBulk
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectBulk
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectBulk
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectBulk
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|bulk
index|[
name|i
index|]
operator|=
name|connectBulk
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|bulk
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectReg
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectReg
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectReg
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectReg
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|reg
index|[
name|i
index|]
operator|=
name|connectReg
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|reg
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectState
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectState
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectState
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectState
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|state
index|[
name|i
index|]
operator|=
name|connectState
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|state
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectPing
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectPing
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectPing
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectPing
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|ping
index|[
name|i
index|]
operator|=
name|connectPing
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|ping
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeChannels
operator|.
name|recovery
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nodeChannels
operator|.
name|bulk
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|nodeChannels
operator|.
name|recovery
operator|=
name|nodeChannels
operator|.
name|bulk
expr_stmt|;
block|}
else|else
block|{
name|nodeChannels
operator|.
name|recovery
operator|=
name|nodeChannels
operator|.
name|reg
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodeChannels
operator|.
name|bulk
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|nodeChannels
operator|.
name|bulk
operator|=
name|nodeChannels
operator|.
name|reg
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// clean the futures
for|for
control|(
name|ChannelFuture
name|future
range|:
name|ImmutableList
operator|.
expr|<
name|ChannelFuture
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|connectRecovery
argument_list|)
operator|.
name|add
argument_list|(
name|connectBulk
argument_list|)
operator|.
name|add
argument_list|(
name|connectReg
argument_list|)
operator|.
name|add
argument_list|(
name|connectState
argument_list|)
operator|.
name|add
argument_list|(
name|connectPing
argument_list|)
operator|.
name|build
argument_list|()
control|)
block|{
name|future
operator|.
name|cancel
argument_list|()
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|getChannel
argument_list|()
operator|!=
literal|null
operator|&&
name|future
operator|.
name|getChannel
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
try|try
block|{
name|future
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|disconnectFromNode
specifier|public
name|void
name|disconnectFromNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
condition|)
block|{
name|connectionLock
operator|.
name|acquire
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
try|try
block|{
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"disconnected from [{}]"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|transportServiceAdapter
operator|.
name|raiseNodeDisconnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|connectionLock
operator|.
name|release
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Disconnects from a node, only if the relevant channel is found to be part of the node channels.      */
DECL|method|disconnectFromNode
specifier|private
name|void
name|disconnectFromNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
operator|&&
name|nodeChannels
operator|.
name|hasChannel
argument_list|(
name|channel
argument_list|)
condition|)
block|{
name|connectionLock
operator|.
name|acquire
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nodeChannels
operator|.
name|hasChannel
argument_list|(
name|channel
argument_list|)
condition|)
block|{
comment|//might have been removed in the meanwhile, safety check
assert|assert
operator|!
name|connectedNodes
operator|.
name|containsKey
argument_list|(
name|node
argument_list|)
assert|;
block|}
else|else
block|{
try|try
block|{
name|connectedNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
try|try
block|{
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"disconnected from [{}], {}"
argument_list|,
name|node
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|transportServiceAdapter
operator|.
name|raiseNodeDisconnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|connectionLock
operator|.
name|release
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Disconnects from a node if a channel is found as part of that nodes channels.      */
DECL|method|disconnectFromNodeChannel
specifier|private
name|void
name|disconnectFromNodeChannel
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|connectedNodes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
operator|&&
name|nodeChannels
operator|.
name|hasChannel
argument_list|(
name|channel
argument_list|)
condition|)
block|{
name|connectionLock
operator|.
name|acquire
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nodeChannels
operator|.
name|hasChannel
argument_list|(
name|channel
argument_list|)
condition|)
block|{
comment|//might have been removed in the meanwhile, safety check
assert|assert
operator|!
name|connectedNodes
operator|.
name|containsKey
argument_list|(
name|node
argument_list|)
assert|;
block|}
else|else
block|{
try|try
block|{
name|connectedNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
try|try
block|{
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"disconnected from [{}] on channel failure"
argument_list|,
name|failure
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|transportServiceAdapter
operator|.
name|raiseNodeDisconnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|connectionLock
operator|.
name|release
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|nodeChannel
specifier|private
name|Channel
name|nodeChannel
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|ConnectTransportException
block|{
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NodeNotConnectedException
argument_list|(
name|node
argument_list|,
literal|"Node not connected"
argument_list|)
throw|;
block|}
return|return
name|nodeChannels
operator|.
name|channel
argument_list|(
name|options
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
DECL|class|ChannelCloseListener
specifier|private
class|class
name|ChannelCloseListener
implements|implements
name|ChannelFutureListener
block|{
DECL|field|node
specifier|private
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|method|ChannelCloseListener
specifier|private
name|ChannelCloseListener
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|operationComplete
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|disconnectFromNode
argument_list|(
name|node
argument_list|,
name|future
operator|.
name|getChannel
argument_list|()
argument_list|,
literal|"channel closed event"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NodeChannels
specifier|public
specifier|static
class|class
name|NodeChannels
block|{
DECL|field|recovery
specifier|private
name|Channel
index|[]
name|recovery
decl_stmt|;
DECL|field|recoveryCounter
specifier|private
specifier|final
name|AtomicInteger
name|recoveryCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|bulk
specifier|private
name|Channel
index|[]
name|bulk
decl_stmt|;
DECL|field|bulkCounter
specifier|private
specifier|final
name|AtomicInteger
name|bulkCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|reg
specifier|private
name|Channel
index|[]
name|reg
decl_stmt|;
DECL|field|regCounter
specifier|private
specifier|final
name|AtomicInteger
name|regCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
name|Channel
index|[]
name|state
decl_stmt|;
DECL|field|stateCounter
specifier|private
specifier|final
name|AtomicInteger
name|stateCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|ping
specifier|private
name|Channel
index|[]
name|ping
decl_stmt|;
DECL|field|pingCounter
specifier|private
specifier|final
name|AtomicInteger
name|pingCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|NodeChannels
specifier|public
name|NodeChannels
parameter_list|(
name|Channel
index|[]
name|recovery
parameter_list|,
name|Channel
index|[]
name|bulk
parameter_list|,
name|Channel
index|[]
name|reg
parameter_list|,
name|Channel
index|[]
name|state
parameter_list|,
name|Channel
index|[]
name|ping
parameter_list|)
block|{
name|this
operator|.
name|recovery
operator|=
name|recovery
expr_stmt|;
name|this
operator|.
name|bulk
operator|=
name|bulk
expr_stmt|;
name|this
operator|.
name|reg
operator|=
name|reg
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|ping
operator|=
name|ping
expr_stmt|;
block|}
DECL|method|hasChannel
specifier|public
name|boolean
name|hasChannel
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
return|return
name|hasChannel
argument_list|(
name|channel
argument_list|,
name|recovery
argument_list|)
operator|||
name|hasChannel
argument_list|(
name|channel
argument_list|,
name|bulk
argument_list|)
operator|||
name|hasChannel
argument_list|(
name|channel
argument_list|,
name|reg
argument_list|)
operator|||
name|hasChannel
argument_list|(
name|channel
argument_list|,
name|state
argument_list|)
operator|||
name|hasChannel
argument_list|(
name|channel
argument_list|,
name|ping
argument_list|)
return|;
block|}
DECL|method|hasChannel
specifier|private
name|boolean
name|hasChannel
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|Channel
index|[]
name|channels
parameter_list|)
block|{
for|for
control|(
name|Channel
name|channel1
range|:
name|channels
control|)
block|{
if|if
condition|(
name|channel
operator|.
name|equals
argument_list|(
name|channel1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|channel
specifier|public
name|Channel
name|channel
parameter_list|(
name|TransportRequestOptions
operator|.
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
condition|)
block|{
return|return
name|reg
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|regCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|reg
operator|.
name|length
argument_list|)
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
condition|)
block|{
return|return
name|state
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|stateCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|state
operator|.
name|length
argument_list|)
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
condition|)
block|{
return|return
name|ping
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|pingCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|ping
operator|.
name|length
argument_list|)
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|BULK
condition|)
block|{
return|return
name|bulk
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|bulkCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|bulk
operator|.
name|length
argument_list|)
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
condition|)
block|{
return|return
name|recovery
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|recoveryCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|recovery
operator|.
name|length
argument_list|)
index|]
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"no type channel for ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|List
argument_list|<
name|ChannelFuture
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|closeChannelsAndWait
argument_list|(
name|recovery
argument_list|,
name|futures
argument_list|)
expr_stmt|;
name|closeChannelsAndWait
argument_list|(
name|bulk
argument_list|,
name|futures
argument_list|)
expr_stmt|;
name|closeChannelsAndWait
argument_list|(
name|reg
argument_list|,
name|futures
argument_list|)
expr_stmt|;
name|closeChannelsAndWait
argument_list|(
name|state
argument_list|,
name|futures
argument_list|)
expr_stmt|;
name|closeChannelsAndWait
argument_list|(
name|ping
argument_list|,
name|futures
argument_list|)
expr_stmt|;
for|for
control|(
name|ChannelFuture
name|future
range|:
name|futures
control|)
block|{
name|future
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|closeChannelsAndWait
specifier|private
name|void
name|closeChannelsAndWait
parameter_list|(
name|Channel
index|[]
name|channels
parameter_list|,
name|List
argument_list|<
name|ChannelFuture
argument_list|>
name|futures
parameter_list|)
block|{
for|for
control|(
name|Channel
name|channel
range|:
name|channels
control|)
block|{
try|try
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
operator|&&
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|channel
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

