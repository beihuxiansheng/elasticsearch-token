begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|frame
operator|.
name|FrameDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|frame
operator|.
name|TooLongFrameException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StreamCorruptedException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SizeHeaderFrameDecoder
specifier|public
class|class
name|SizeHeaderFrameDecoder
extends|extends
name|FrameDecoder
block|{
DECL|field|NINETY_PER_HEAP_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|NINETY_PER_HEAP_SIZE
init|=
call|(
name|long
call|)
argument_list|(
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|mem
argument_list|()
operator|.
name|heapMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|*
literal|0.9
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|decode
specifier|protected
name|Object
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|ChannelBuffer
name|buffer
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|buffer
operator|.
name|readableBytes
argument_list|()
operator|<
literal|6
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|readerIndex
init|=
name|buffer
operator|.
name|readerIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|getByte
argument_list|(
name|readerIndex
argument_list|)
operator|!=
literal|'E'
operator|||
name|buffer
operator|.
name|getByte
argument_list|(
name|readerIndex
operator|+
literal|1
argument_list|)
operator|!=
literal|'S'
condition|)
block|{
comment|// we have 6 readable bytes, show 4 (should be enough)
throw|throw
operator|new
name|StreamCorruptedException
argument_list|(
literal|"invalid internal transport message format, got ("
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|buffer
operator|.
name|getByte
argument_list|(
name|readerIndex
argument_list|)
operator|&
literal|0xFF
argument_list|)
operator|+
literal|","
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|buffer
operator|.
name|getByte
argument_list|(
name|readerIndex
operator|+
literal|1
argument_list|)
operator|&
literal|0xFF
argument_list|)
operator|+
literal|","
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|buffer
operator|.
name|getByte
argument_list|(
name|readerIndex
operator|+
literal|2
argument_list|)
operator|&
literal|0xFF
argument_list|)
operator|+
literal|","
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|buffer
operator|.
name|getByte
argument_list|(
name|readerIndex
operator|+
literal|3
argument_list|)
operator|&
literal|0xFF
argument_list|)
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|int
name|dataLen
init|=
name|buffer
operator|.
name|getInt
argument_list|(
name|buffer
operator|.
name|readerIndex
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataLen
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|StreamCorruptedException
argument_list|(
literal|"invalid data length: "
operator|+
name|dataLen
argument_list|)
throw|;
block|}
comment|// safety against too large frames being sent
if|if
condition|(
name|dataLen
operator|>
name|NINETY_PER_HEAP_SIZE
condition|)
block|{
throw|throw
operator|new
name|TooLongFrameException
argument_list|(
literal|"transport content length received ["
operator|+
operator|new
name|ByteSizeValue
argument_list|(
name|dataLen
argument_list|)
operator|+
literal|"] exceeded ["
operator|+
operator|new
name|ByteSizeValue
argument_list|(
name|NINETY_PER_HEAP_SIZE
argument_list|)
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|buffer
operator|.
name|readableBytes
argument_list|()
operator|<
name|dataLen
operator|+
literal|6
condition|)
block|{
return|return
literal|null
return|;
block|}
name|buffer
operator|.
name|skipBytes
argument_list|(
literal|6
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
block|}
end_class

end_unit

