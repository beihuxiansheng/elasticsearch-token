begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectObjectOpenHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ContextHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * The transport message is also a {@link ContextHolder context holder} that holds<b>transient</b> context, that is,  * the context is not serialized with message.  */
end_comment

begin_class
DECL|class|TransportMessage
specifier|public
specifier|abstract
class|class
name|TransportMessage
parameter_list|<
name|TM
extends|extends
name|TransportMessage
parameter_list|<
name|TM
parameter_list|>
parameter_list|>
extends|extends
name|ContextHolder
implements|implements
name|Streamable
block|{
DECL|field|headers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
decl_stmt|;
DECL|field|remoteAddress
specifier|private
name|TransportAddress
name|remoteAddress
decl_stmt|;
DECL|method|TransportMessage
specifier|protected
name|TransportMessage
parameter_list|()
block|{     }
DECL|method|TransportMessage
specifier|protected
name|TransportMessage
parameter_list|(
name|TM
name|message
parameter_list|)
block|{
comment|// create a new copy of the headers/context, since we are creating a new request
comment|// which might have its headers/context changed in the context of that specific request
if|if
condition|(
operator|(
operator|(
name|TransportMessage
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|)
operator|.
name|headers
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|headers
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
operator|(
operator|(
name|TransportMessage
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|)
operator|.
name|headers
argument_list|)
expr_stmt|;
block|}
name|copyContextFrom
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|remoteAddress
specifier|public
name|void
name|remoteAddress
parameter_list|(
name|TransportAddress
name|remoteAddress
parameter_list|)
block|{
name|this
operator|.
name|remoteAddress
operator|=
name|remoteAddress
expr_stmt|;
block|}
DECL|method|remoteAddress
specifier|public
name|TransportAddress
name|remoteAddress
parameter_list|()
block|{
return|return
name|remoteAddress
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|putHeader
specifier|public
specifier|final
name|TM
name|putHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|==
literal|null
condition|)
block|{
name|headers
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|(
name|TM
operator|)
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getHeader
specifier|public
specifier|final
parameter_list|<
name|V
parameter_list|>
name|V
name|getHeader
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|headers
operator|!=
literal|null
condition|?
operator|(
name|V
operator|)
name|headers
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|hasHeader
specifier|public
specifier|final
name|boolean
name|hasHeader
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|headers
operator|!=
literal|null
operator|&&
name|headers
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getHeaders
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
operator|!=
literal|null
condition|?
name|headers
operator|.
name|keySet
argument_list|()
else|:
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|headers
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
name|in
operator|.
name|readMap
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|headers
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeMap
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

