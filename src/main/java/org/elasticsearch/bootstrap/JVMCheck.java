begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Checks that the JVM is ok and won't cause index corruption */
end_comment

begin_class
DECL|class|JVMCheck
specifier|public
class|class
name|JVMCheck
block|{
comment|/**      * URL with latest JVM recommendations      */
DECL|field|JVM_RECOMMENDATIONS
specifier|static
specifier|final
name|String
name|JVM_RECOMMENDATIONS
init|=
literal|"http://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html"
decl_stmt|;
comment|/**      * System property which if set causes us to bypass the check completely (but issues a warning in doing so)      */
DECL|field|JVM_BYPASS
specifier|static
specifier|final
name|String
name|JVM_BYPASS
init|=
literal|"es.bypass.vm.check"
decl_stmt|;
comment|/**      * Metadata and messaging for hotspot bugs.      */
DECL|class|HotspotBug
specifier|static
class|class
name|HotspotBug
block|{
comment|/** OpenJDK bug URL */
DECL|field|bugUrl
specifier|final
name|String
name|bugUrl
decl_stmt|;
comment|/** Compiler workaround flag (null if there is no workaround) */
DECL|field|workAround
specifier|final
name|String
name|workAround
decl_stmt|;
DECL|method|HotspotBug
name|HotspotBug
parameter_list|(
name|String
name|bugUrl
parameter_list|,
name|String
name|workAround
parameter_list|)
block|{
name|this
operator|.
name|bugUrl
operator|=
name|bugUrl
expr_stmt|;
name|this
operator|.
name|workAround
operator|=
name|workAround
expr_stmt|;
block|}
comment|/** Returns an error message to the user for a broken version */
DECL|method|getErrorMessage
name|String
name|getErrorMessage
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Java version: "
argument_list|)
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|JAVA_VERSION
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" suffers from critical bug "
argument_list|)
operator|.
name|append
argument_list|(
name|bugUrl
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" which can cause data corruption."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Please upgrade the JVM, see "
argument_list|)
operator|.
name|append
argument_list|(
name|JVM_RECOMMENDATIONS
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for current recommendations."
argument_list|)
expr_stmt|;
if|if
condition|(
name|workAround
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"If you absolutely cannot upgrade, please add "
argument_list|)
operator|.
name|append
argument_list|(
name|workAround
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" to the JAVA_OPTS environment variable."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Upgrading is preferred, this workaround will result in degraded performance."
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Warns the user when a workaround is being used to dodge the bug */
DECL|method|getWarningMessage
name|String
name|getWarningMessage
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Workaround flag "
argument_list|)
operator|.
name|append
argument_list|(
name|workAround
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for bug "
argument_list|)
operator|.
name|append
argument_list|(
name|bugUrl
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" found. "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"This will result in degraded performance!"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Upgrading is preferred, see "
argument_list|)
operator|.
name|append
argument_list|(
name|JVM_RECOMMENDATIONS
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for current recommendations."
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/** mapping of hotspot version to hotspot bug information for the most serious bugs */
DECL|field|JVM_BROKEN_HOTSPOT_VERSIONS
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HotspotBug
argument_list|>
name|JVM_BROKEN_HOTSPOT_VERSIONS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|HotspotBug
argument_list|>
name|bugs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 1.7.0: loop optimizer bug
name|bugs
operator|.
name|put
argument_list|(
literal|"21.0-b17"
argument_list|,
operator|new
name|HotspotBug
argument_list|(
literal|"https://bugs.openjdk.java.net/browse/JDK-7070134"
argument_list|,
literal|"-XX:-UseLoopPredicate"
argument_list|)
argument_list|)
expr_stmt|;
comment|// register allocation issues (technically only x86/amd64). This impacted update 40, 45, and 51
name|bugs
operator|.
name|put
argument_list|(
literal|"24.0-b56"
argument_list|,
operator|new
name|HotspotBug
argument_list|(
literal|"https://bugs.openjdk.java.net/browse/JDK-8024830"
argument_list|,
literal|"-XX:-UseSuperWord"
argument_list|)
argument_list|)
expr_stmt|;
name|bugs
operator|.
name|put
argument_list|(
literal|"24.45-b08"
argument_list|,
operator|new
name|HotspotBug
argument_list|(
literal|"https://bugs.openjdk.java.net/browse/JDK-8024830"
argument_list|,
literal|"-XX:-UseSuperWord"
argument_list|)
argument_list|)
expr_stmt|;
name|bugs
operator|.
name|put
argument_list|(
literal|"24.51-b03"
argument_list|,
operator|new
name|HotspotBug
argument_list|(
literal|"https://bugs.openjdk.java.net/browse/JDK-8024830"
argument_list|,
literal|"-XX:-UseSuperWord"
argument_list|)
argument_list|)
expr_stmt|;
name|JVM_BROKEN_HOTSPOT_VERSIONS
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|bugs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that the current JVM is "ok". This means it doesn't have severe bugs that cause data corruption.      */
DECL|method|check
specifier|static
name|void
name|check
parameter_list|()
block|{
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|JVM_BYPASS
argument_list|)
argument_list|)
condition|)
block|{
name|Loggers
operator|.
name|getLogger
argument_list|(
name|JVMCheck
operator|.
name|class
argument_list|)
operator|.
name|warn
argument_list|(
literal|"bypassing jvm version check for version [{}], this can result in data corruption!"
argument_list|,
name|Constants
operator|.
name|JAVA_VERSION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Oracle Corporation"
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|JVM_VENDOR
argument_list|)
condition|)
block|{
name|HotspotBug
name|bug
init|=
name|JVM_BROKEN_HOTSPOT_VERSIONS
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|JVM_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|bug
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bug
operator|.
name|workAround
operator|!=
literal|null
operator|&&
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getInputArguments
argument_list|()
operator|.
name|contains
argument_list|(
name|bug
operator|.
name|workAround
argument_list|)
condition|)
block|{
name|Loggers
operator|.
name|getLogger
argument_list|(
name|JVMCheck
operator|.
name|class
argument_list|)
operator|.
name|warn
argument_list|(
name|bug
operator|.
name|getWarningMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|bug
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"IBM Corporation"
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|JVM_VENDOR
argument_list|)
condition|)
block|{
comment|// currently any JVM from IBM will easily result in index corruption.
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IBM runtimes suffer from several bugs which can cause data corruption."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Please upgrade the JVM, see "
argument_list|)
operator|.
name|append
argument_list|(
name|JVM_RECOMMENDATIONS
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for current recommendations."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** Command line driver for convenience */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|check
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

