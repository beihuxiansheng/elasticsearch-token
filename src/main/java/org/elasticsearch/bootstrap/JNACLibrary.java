begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|Native
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|Structure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|JNACLibrary
specifier|final
class|class
name|JNACLibrary
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|JNACLibrary
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MCL_CURRENT
specifier|public
specifier|static
specifier|final
name|int
name|MCL_CURRENT
init|=
literal|1
decl_stmt|;
DECL|field|ENOMEM
specifier|public
specifier|static
specifier|final
name|int
name|ENOMEM
init|=
literal|12
decl_stmt|;
DECL|field|RLIMIT_MEMLOCK
specifier|public
specifier|static
specifier|final
name|int
name|RLIMIT_MEMLOCK
init|=
name|Constants
operator|.
name|MAC_OS_X
condition|?
literal|6
else|:
literal|8
decl_stmt|;
static|static
block|{
try|try
block|{
name|Native
operator|.
name|register
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unable to link C library. native methods (mlockall) will be disabled."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mlockall
specifier|static
specifier|native
name|int
name|mlockall
parameter_list|(
name|int
name|flags
parameter_list|)
function_decl|;
DECL|method|geteuid
specifier|static
specifier|native
name|int
name|geteuid
parameter_list|()
function_decl|;
comment|/** corresponds to struct rlimit */
DECL|class|Rlimit
specifier|public
specifier|static
specifier|final
class|class
name|Rlimit
extends|extends
name|Structure
implements|implements
name|Structure
operator|.
name|ByReference
block|{
DECL|field|rlim_cur
specifier|public
name|long
name|rlim_cur
init|=
literal|0
decl_stmt|;
DECL|field|rlim_max
specifier|public
name|long
name|rlim_max
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|getFieldOrder
specifier|protected
name|List
name|getFieldOrder
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"rlim_cur"
block|,
literal|"rlim_max"
block|}
argument_list|)
return|;
block|}
block|}
DECL|method|getrlimit
specifier|static
specifier|native
name|int
name|getrlimit
parameter_list|(
name|int
name|resource
parameter_list|,
name|Rlimit
name|rlimit
parameter_list|)
function_decl|;
DECL|method|strerror
specifier|static
specifier|native
name|String
name|strerror
parameter_list|(
name|int
name|errno
parameter_list|)
function_decl|;
DECL|method|JNACLibrary
specifier|private
name|JNACLibrary
parameter_list|()
block|{     }
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|JNANatives
operator|.
name|tryMlockall
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

