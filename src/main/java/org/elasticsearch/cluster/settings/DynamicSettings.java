begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|DynamicSettings
specifier|public
class|class
name|DynamicSettings
block|{
DECL|field|dynamicSettings
specifier|private
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Validator
argument_list|>
name|dynamicSettings
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|method|isDynamicOrLoggingSetting
specifier|public
name|boolean
name|isDynamicOrLoggingSetting
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|hasDynamicSetting
argument_list|(
name|key
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"logger."
argument_list|)
return|;
block|}
DECL|method|hasDynamicSetting
specifier|public
name|boolean
name|hasDynamicSetting
parameter_list|(
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|String
name|dynamicSetting
range|:
name|dynamicSettings
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|dynamicSetting
argument_list|,
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|validateDynamicSetting
specifier|public
name|String
name|validateDynamicSetting
parameter_list|(
name|String
name|dynamicSetting
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Validator
argument_list|>
name|setting
range|:
name|dynamicSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|setting
operator|.
name|getKey
argument_list|()
argument_list|,
name|dynamicSetting
argument_list|)
condition|)
block|{
return|return
name|setting
operator|.
name|getValue
argument_list|()
operator|.
name|validate
argument_list|(
name|dynamicSetting
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|addDynamicSetting
specifier|public
specifier|synchronized
name|void
name|addDynamicSetting
parameter_list|(
name|String
name|setting
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|Validator
argument_list|>
name|updatedSettings
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|dynamicSettings
argument_list|)
decl_stmt|;
name|updatedSettings
operator|.
name|put
argument_list|(
name|setting
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|dynamicSettings
operator|=
name|updatedSettings
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
DECL|method|addDynamicSetting
specifier|public
specifier|synchronized
name|void
name|addDynamicSetting
parameter_list|(
name|String
name|setting
parameter_list|)
block|{
name|addDynamicSetting
argument_list|(
name|setting
argument_list|,
name|Validator
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
DECL|method|addDynamicSettings
specifier|public
specifier|synchronized
name|void
name|addDynamicSettings
parameter_list|(
name|String
modifier|...
name|settings
parameter_list|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|Validator
argument_list|>
name|updatedSettings
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|dynamicSettings
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|setting
range|:
name|settings
control|)
block|{
name|updatedSettings
operator|.
name|put
argument_list|(
name|setting
argument_list|,
name|Validator
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|dynamicSettings
operator|=
name|updatedSettings
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

