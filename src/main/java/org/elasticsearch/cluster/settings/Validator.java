begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_interface
DECL|interface|Validator
specifier|public
interface|interface
name|Validator
block|{
DECL|method|validate
name|String
name|validate
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
DECL|class|EmptyValidator
specifier|public
specifier|static
class|class
name|EmptyValidator
implements|implements
name|Validator
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|EmptyValidator
name|INSTANCE
init|=
operator|new
name|EmptyValidator
argument_list|()
decl_stmt|;
DECL|method|EmptyValidator
specifier|private
name|EmptyValidator
parameter_list|()
block|{          }
annotation|@
name|Override
DECL|method|validate
specifier|public
name|String
name|validate
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|TimeValueValidator
specifier|public
specifier|static
class|class
name|TimeValueValidator
implements|implements
name|Validator
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|TimeValueValidator
name|INSTANCE
init|=
operator|new
name|TimeValueValidator
argument_list|()
decl_stmt|;
DECL|method|TimeValueValidator
specifier|private
name|TimeValueValidator
parameter_list|()
block|{          }
annotation|@
name|Override
DECL|method|validate
specifier|public
name|String
name|validate
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
name|value
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|"cannot parse value ["
operator|+
name|value
operator|+
literal|"] as time"
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ElasticSearchParseException
name|ex
parameter_list|)
block|{
return|return
literal|"cannot parse value ["
operator|+
name|value
operator|+
literal|"] as time"
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_interface

end_unit

