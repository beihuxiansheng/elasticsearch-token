begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.service
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|ProcessClusterEventTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|operation
operator|.
name|OperationRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|StringText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|InternalClusterService
specifier|public
class|class
name|InternalClusterService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|ClusterService
argument_list|>
implements|implements
name|ClusterService
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|discoveryService
specifier|private
specifier|final
name|DiscoveryService
name|discoveryService
decl_stmt|;
DECL|field|operationRouting
specifier|private
specifier|final
name|OperationRouting
name|operationRouting
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|nodeSettingsService
specifier|private
specifier|final
name|NodeSettingsService
name|nodeSettingsService
decl_stmt|;
DECL|field|reconnectInterval
specifier|private
specifier|final
name|TimeValue
name|reconnectInterval
decl_stmt|;
DECL|field|updateTasksExecutor
specifier|private
specifier|volatile
name|PrioritizedEsThreadPoolExecutor
name|updateTasksExecutor
decl_stmt|;
DECL|field|priorityClusterStateListeners
specifier|private
specifier|final
name|List
argument_list|<
name|ClusterStateListener
argument_list|>
name|priorityClusterStateListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|clusterStateListeners
specifier|private
specifier|final
name|List
argument_list|<
name|ClusterStateListener
argument_list|>
name|clusterStateListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|lastClusterStateListeners
specifier|private
specifier|final
name|List
argument_list|<
name|ClusterStateListener
argument_list|>
name|lastClusterStateListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|localNodeMasterListeners
specifier|private
specifier|final
name|LocalNodeMasterListeners
name|localNodeMasterListeners
decl_stmt|;
DECL|field|onGoingTimeouts
specifier|private
specifier|final
name|Queue
argument_list|<
name|NotifyTimeout
argument_list|>
name|onGoingTimeouts
init|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
decl_stmt|;
DECL|field|clusterState
specifier|private
specifier|volatile
name|ClusterState
name|clusterState
decl_stmt|;
DECL|field|initialBlocks
specifier|private
specifier|final
name|ClusterBlocks
operator|.
name|Builder
name|initialBlocks
decl_stmt|;
DECL|field|reconnectToNodes
specifier|private
specifier|volatile
name|ScheduledFuture
name|reconnectToNodes
decl_stmt|;
annotation|@
name|Inject
DECL|method|InternalClusterService
specifier|public
name|InternalClusterService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|DiscoveryService
name|discoveryService
parameter_list|,
name|OperationRouting
name|operationRouting
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|NodeSettingsService
name|nodeSettingsService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationRouting
operator|=
name|operationRouting
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|discoveryService
operator|=
name|discoveryService
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|nodeSettingsService
operator|=
name|nodeSettingsService
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeSettingsService
operator|.
name|setClusterService
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|reconnectInterval
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"reconnect_interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|localNodeMasterListeners
operator|=
operator|new
name|LocalNodeMasterListeners
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|initialBlocks
operator|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|discoveryService
operator|.
name|getNoMasterBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|settingsService
specifier|public
name|NodeSettingsService
name|settingsService
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeSettingsService
return|;
block|}
DECL|method|addInitialStateBlock
specifier|public
name|void
name|addInitialStateBlock
parameter_list|(
name|ClusterBlock
name|block
parameter_list|)
throws|throws
name|ElasticsearchIllegalStateException
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"can't set initial block when started"
argument_list|)
throw|;
block|}
name|initialBlocks
operator|.
name|addGlobalBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeInitialStateBlock
specifier|public
name|void
name|removeInitialStateBlock
parameter_list|(
name|ClusterBlock
name|block
parameter_list|)
throws|throws
name|ElasticsearchIllegalStateException
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"can't set initial block when started"
argument_list|)
throw|;
block|}
name|initialBlocks
operator|.
name|removeGlobalBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|add
argument_list|(
name|localNodeMasterListeners
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|initialBlocks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|updateTasksExecutor
operator|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"clusterService#updateTask"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|reconnectToNodes
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|reconnectInterval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|ReconnectToNodes
argument_list|()
argument_list|)
expr_stmt|;
name|discoveryService
operator|.
name|addLifecycleListener
argument_list|(
operator|new
name|LifecycleListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|afterStart
parameter_list|()
block|{
name|submitStateUpdateTask
argument_list|(
literal|"update local node"
argument_list|,
name|Priority
operator|.
name|IMMEDIATE
argument_list|,
operator|new
name|ClusterStateNonMasterUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|localNode
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to update local node"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|this
operator|.
name|reconnectToNodes
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|NotifyTimeout
name|onGoingTimeout
range|:
name|onGoingTimeouts
control|)
block|{
name|onGoingTimeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|onGoingTimeout
operator|.
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
block|}
name|updateTasksExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|updateTasksExecutor
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|remove
argument_list|(
name|localNodeMasterListeners
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
annotation|@
name|Override
DECL|method|localNode
specifier|public
name|DiscoveryNode
name|localNode
parameter_list|()
block|{
return|return
name|discoveryService
operator|.
name|localNode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|operationRouting
specifier|public
name|OperationRouting
name|operationRouting
parameter_list|()
block|{
return|return
name|operationRouting
return|;
block|}
DECL|method|state
specifier|public
name|ClusterState
name|state
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterState
return|;
block|}
DECL|method|addFirst
specifier|public
name|void
name|addFirst
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|priorityClusterStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|addLast
specifier|public
name|void
name|addLast
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|lastClusterStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterStateListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|priorityClusterStateListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|lastClusterStateListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|NotifyTimeout
argument_list|>
name|it
init|=
name|onGoingTimeouts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NotifyTimeout
name|timeout
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|.
name|listener
operator|.
name|equals
argument_list|(
name|listener
argument_list|)
condition|)
block|{
name|timeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|localNodeMasterListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|localNodeMasterListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|TimeValue
name|timeout
parameter_list|,
specifier|final
name|TimeoutClusterStateListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// call the post added notification on the same event thread
try|try
block|{
name|updateTasksExecutor
operator|.
name|execute
argument_list|(
operator|new
name|PrioritizedRunnable
argument_list|(
name|Priority
operator|.
name|HIGH
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|NotifyTimeout
name|notifyTimeout
init|=
operator|new
name|NotifyTimeout
argument_list|(
name|listener
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
name|notifyTimeout
operator|.
name|future
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|timeout
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
name|notifyTimeout
argument_list|)
expr_stmt|;
name|onGoingTimeouts
operator|.
name|add
argument_list|(
name|notifyTimeout
argument_list|)
expr_stmt|;
name|clusterStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|postAdded
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|submitStateUpdateTask
specifier|public
name|void
name|submitStateUpdateTask
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|ClusterStateUpdateTask
name|updateTask
parameter_list|)
block|{
name|submitStateUpdateTask
argument_list|(
name|source
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
name|updateTask
argument_list|)
expr_stmt|;
block|}
DECL|method|submitStateUpdateTask
specifier|public
name|void
name|submitStateUpdateTask
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
name|Priority
name|priority
parameter_list|,
specifier|final
name|ClusterStateUpdateTask
name|updateTask
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
specifier|final
name|UpdateTask
name|task
init|=
operator|new
name|UpdateTask
argument_list|(
name|source
argument_list|,
name|priority
argument_list|,
name|updateTask
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateTask
operator|instanceof
name|TimeoutClusterStateUpdateTask
condition|)
block|{
specifier|final
name|TimeoutClusterStateUpdateTask
name|timeoutUpdateTask
init|=
operator|(
name|TimeoutClusterStateUpdateTask
operator|)
name|updateTask
decl_stmt|;
name|updateTasksExecutor
operator|.
name|execute
argument_list|(
name|task
argument_list|,
name|threadPool
operator|.
name|scheduler
argument_list|()
argument_list|,
name|timeoutUpdateTask
operator|.
name|timeout
argument_list|()
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|timeoutUpdateTask
operator|.
name|onFailure
argument_list|(
name|task
operator|.
name|source
argument_list|,
operator|new
name|ProcessClusterEventTimeoutException
argument_list|(
name|timeoutUpdateTask
operator|.
name|timeout
argument_list|()
argument_list|,
name|task
operator|.
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateTasksExecutor
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|e
parameter_list|)
block|{
comment|// ignore cases where we are shutting down..., there is really nothing interesting
comment|// to be done here...
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|pendingTasks
specifier|public
name|List
argument_list|<
name|PendingClusterTask
argument_list|>
name|pendingTasks
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|PrioritizedEsThreadPoolExecutor
operator|.
name|Pending
index|[]
name|pendings
init|=
name|updateTasksExecutor
operator|.
name|getPending
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PendingClusterTask
argument_list|>
name|pendingClusterTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pendings
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|PrioritizedEsThreadPoolExecutor
operator|.
name|Pending
name|pending
range|:
name|pendings
control|)
block|{
specifier|final
name|String
name|source
decl_stmt|;
specifier|final
name|long
name|timeInQueue
decl_stmt|;
if|if
condition|(
name|pending
operator|.
name|task
operator|instanceof
name|UpdateTask
condition|)
block|{
name|UpdateTask
name|updateTask
init|=
operator|(
name|UpdateTask
operator|)
name|pending
operator|.
name|task
decl_stmt|;
name|source
operator|=
name|updateTask
operator|.
name|source
expr_stmt|;
name|timeInQueue
operator|=
name|now
operator|-
name|updateTask
operator|.
name|addedAt
expr_stmt|;
block|}
else|else
block|{
name|source
operator|=
literal|"unknown"
expr_stmt|;
name|timeInQueue
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|pendingClusterTasks
operator|.
name|add
argument_list|(
operator|new
name|PendingClusterTask
argument_list|(
name|pending
operator|.
name|insertionOrder
argument_list|,
name|pending
operator|.
name|priority
argument_list|,
operator|new
name|StringText
argument_list|(
name|source
argument_list|)
argument_list|,
name|timeInQueue
argument_list|,
name|pending
operator|.
name|executing
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pendingClusterTasks
return|;
block|}
DECL|class|UpdateTask
class|class
name|UpdateTask
extends|extends
name|PrioritizedRunnable
block|{
DECL|field|source
specifier|public
specifier|final
name|String
name|source
decl_stmt|;
DECL|field|updateTask
specifier|public
specifier|final
name|ClusterStateUpdateTask
name|updateTask
decl_stmt|;
DECL|field|addedAt
specifier|public
specifier|final
name|long
name|addedAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|method|UpdateTask
name|UpdateTask
parameter_list|(
name|String
name|source
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ClusterStateUpdateTask
name|updateTask
parameter_list|)
block|{
name|super
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|updateTask
operator|=
name|updateTask
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: ignoring, cluster_service not started"
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: execute"
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|clusterState
decl_stmt|;
if|if
condition|(
operator|!
name|previousClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
operator|&&
name|updateTask
operator|.
name|runOnlyOnMaster
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failing [{}]: local node is no longer master"
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|updateTask
operator|.
name|onNoLongerMaster
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return;
block|}
name|ClusterState
name|newClusterState
decl_stmt|;
try|try
block|{
name|newClusterState
operator|=
name|updateTask
operator|.
name|execute
argument_list|(
name|previousClusterState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"failed to execute cluster state update, state:\nversion ["
argument_list|)
operator|.
name|append
argument_list|(
name|previousClusterState
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], source ["
argument_list|)
operator|.
name|append
argument_list|(
name|source
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|previousClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|previousClusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|previousClusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|updateTask
operator|.
name|onFailure
argument_list|(
name|source
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|previousClusterState
operator|==
name|newClusterState
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: no change in cluster_state"
argument_list|,
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateTask
operator|instanceof
name|AckedClusterStateUpdateTask
condition|)
block|{
comment|//no need to wait for ack if nothing changed, the update can be counted as acknowledged
operator|(
operator|(
name|AckedClusterStateUpdateTask
operator|)
name|updateTask
operator|)
operator|.
name|onAllNodesAcked
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateTask
operator|instanceof
name|ProcessedClusterStateUpdateTask
condition|)
block|{
operator|(
operator|(
name|ProcessedClusterStateUpdateTask
operator|)
name|updateTask
operator|)
operator|.
name|clusterStateProcessed
argument_list|(
name|source
argument_list|,
name|previousClusterState
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
try|try
block|{
name|Discovery
operator|.
name|AckListener
name|ackListener
init|=
operator|new
name|NoOpAckListener
argument_list|()
decl_stmt|;
if|if
condition|(
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
comment|// only the master controls the version numbers
name|Builder
name|builder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|newClusterState
argument_list|)
operator|.
name|version
argument_list|(
name|newClusterState
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousClusterState
operator|.
name|routingTable
argument_list|()
operator|!=
name|newClusterState
operator|.
name|routingTable
argument_list|()
condition|)
block|{
name|builder
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|(
name|newClusterState
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|newClusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previousClusterState
operator|.
name|metaData
argument_list|()
operator|!=
name|newClusterState
operator|.
name|metaData
argument_list|()
condition|)
block|{
name|builder
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|newClusterState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|newClusterState
operator|.
name|metaData
argument_list|()
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newClusterState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|updateTask
operator|instanceof
name|AckedClusterStateUpdateTask
condition|)
block|{
specifier|final
name|AckedClusterStateUpdateTask
name|ackedUpdateTask
init|=
operator|(
name|AckedClusterStateUpdateTask
operator|)
name|updateTask
decl_stmt|;
if|if
condition|(
name|ackedUpdateTask
operator|.
name|ackTimeout
argument_list|()
operator|==
literal|null
operator|||
name|ackedUpdateTask
operator|.
name|ackTimeout
argument_list|()
operator|.
name|millis
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ackedUpdateTask
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|ackListener
operator|=
operator|new
name|AckCountDownListener
argument_list|(
name|ackedUpdateTask
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|newClusterState
operator|.
name|nodes
argument_list|()
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Couldn't schedule timeout thread - node might be shutting down"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|//timeout straightaway, otherwise we could wait forever as the timeout thread has not started
name|ackedUpdateTask
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|newClusterState
operator|.
name|status
argument_list|(
name|ClusterState
operator|.
name|ClusterStateStatus
operator|.
name|BEING_APPLIED
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"cluster state updated, source ["
argument_list|)
operator|.
name|append
argument_list|(
name|source
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newClusterState
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"cluster state updated, version [{}], source [{}]"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
name|ClusterChangedEvent
name|clusterChangedEvent
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
name|source
argument_list|,
name|newClusterState
argument_list|,
name|previousClusterState
argument_list|)
decl_stmt|;
comment|// new cluster state, notify all listeners
specifier|final
name|DiscoveryNodes
operator|.
name|Delta
name|nodesDelta
init|=
name|clusterChangedEvent
operator|.
name|nodesDelta
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodesDelta
operator|.
name|hasChanges
argument_list|()
operator|&&
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|String
name|summary
init|=
name|nodesDelta
operator|.
name|shortSummary
argument_list|()
decl_stmt|;
if|if
condition|(
name|summary
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{}, reason: {}"
argument_list|,
name|summary
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO, do this in parallel (and wait)
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodesDelta
operator|.
name|addedNodes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|nodeRequiresConnection
argument_list|(
name|node
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|transportService
operator|.
name|connectToNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// the fault detection will detect it as failed as well
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to connect to node ["
operator|+
name|node
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we are the master, publish the new state to all nodes
comment|// we publish here before we send a notification to all the listeners, since if it fails
comment|// we don't want to notify
if|if
condition|(
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"publishing cluster state version {}"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|discoveryService
operator|.
name|publish
argument_list|(
name|newClusterState
argument_list|,
name|ackListener
argument_list|)
expr_stmt|;
block|}
comment|// update the current cluster state
name|clusterState
operator|=
name|newClusterState
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"set local cluster state to version {}"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ClusterStateListener
name|listener
range|:
name|priorityClusterStateListeners
control|)
block|{
name|listener
operator|.
name|clusterChanged
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClusterStateListener
name|listener
range|:
name|clusterStateListeners
control|)
block|{
name|listener
operator|.
name|clusterChanged
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClusterStateListener
name|listener
range|:
name|lastClusterStateListeners
control|)
block|{
name|listener
operator|.
name|clusterChanged
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nodesDelta
operator|.
name|removedNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodesDelta
operator|.
name|removedNodes
argument_list|()
control|)
block|{
name|transportService
operator|.
name|disconnectFromNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|newClusterState
operator|.
name|status
argument_list|(
name|ClusterState
operator|.
name|ClusterStateStatus
operator|.
name|APPLIED
argument_list|)
expr_stmt|;
comment|//manual ack only from the master at the end of the publish
if|if
condition|(
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
try|try
block|{
name|ackListener
operator|.
name|onNodeAck
argument_list|(
name|localNode
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"error while processing ack for master node [{}]"
argument_list|,
name|t
argument_list|,
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|updateTask
operator|instanceof
name|ProcessedClusterStateUpdateTask
condition|)
block|{
operator|(
operator|(
name|ProcessedClusterStateUpdateTask
operator|)
name|updateTask
operator|)
operator|.
name|clusterStateProcessed
argument_list|(
name|source
argument_list|,
name|previousClusterState
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: done applying updated cluster_state (version: {})"
argument_list|,
name|source
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"failed to apply updated cluster state:\nversion ["
argument_list|)
operator|.
name|append
argument_list|(
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], source ["
argument_list|)
operator|.
name|append
argument_list|(
name|source
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newClusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newClusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// TODO: do we want to call updateTask.onFailure here?
block|}
block|}
block|}
DECL|class|NotifyTimeout
class|class
name|NotifyTimeout
implements|implements
name|Runnable
block|{
DECL|field|listener
specifier|final
name|TimeoutClusterStateListener
name|listener
decl_stmt|;
DECL|field|timeout
specifier|final
name|TimeValue
name|timeout
decl_stmt|;
DECL|field|future
name|ScheduledFuture
name|future
decl_stmt|;
DECL|method|NotifyTimeout
name|NotifyTimeout
parameter_list|(
name|TimeoutClusterStateListener
name|listener
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|cancel
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onTimeout
argument_list|(
name|this
operator|.
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|// note, we rely on the listener to remove itself in case of timeout if needed
block|}
block|}
DECL|class|ReconnectToNodes
specifier|private
class|class
name|ReconnectToNodes
implements|implements
name|Runnable
block|{
DECL|field|failureCount
specifier|private
name|ConcurrentMap
argument_list|<
name|DiscoveryNode
argument_list|,
name|Integer
argument_list|>
name|failureCount
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// master node will check against all nodes if its alive with certain discoveries implementations,
comment|// but we can't rely on that, so we check on it as well
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|clusterState
operator|.
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|nodeRequiresConnection
argument_list|(
name|node
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
comment|// we double check existence of node since connectToNode might take time...
if|if
condition|(
operator|!
name|transportService
operator|.
name|nodeConnected
argument_list|(
name|node
argument_list|)
condition|)
block|{
try|try
block|{
name|transportService
operator|.
name|connectToNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
comment|// double check here as well, maybe its gone?
name|Integer
name|nodeFailureCount
init|=
name|failureCount
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeFailureCount
operator|==
literal|null
condition|)
block|{
name|nodeFailureCount
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|nodeFailureCount
operator|=
name|nodeFailureCount
operator|+
literal|1
expr_stmt|;
block|}
comment|// log every 6th failure
if|if
condition|(
operator|(
name|nodeFailureCount
operator|%
literal|6
operator|)
operator|==
literal|0
condition|)
block|{
comment|// reset the failure count...
name|nodeFailureCount
operator|=
literal|0
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to reconnect to node {}"
argument_list|,
name|e
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|failureCount
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|nodeFailureCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// go over and remove failed nodes that have been removed
name|DiscoveryNodes
name|nodes
init|=
name|clusterState
operator|.
name|nodes
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DiscoveryNode
argument_list|>
name|failedNodesIt
init|=
name|failureCount
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|failedNodesIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DiscoveryNode
name|failedNode
init|=
name|failedNodesIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nodes
operator|.
name|nodeExists
argument_list|(
name|failedNode
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|failedNodesIt
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
name|reconnectToNodes
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|reconnectInterval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|nodeRequiresConnection
specifier|private
name|boolean
name|nodeRequiresConnection
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
name|localNode
argument_list|()
operator|.
name|shouldConnectTo
argument_list|(
name|node
argument_list|)
return|;
block|}
DECL|class|LocalNodeMasterListeners
specifier|private
specifier|static
class|class
name|LocalNodeMasterListeners
implements|implements
name|ClusterStateListener
block|{
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|LocalNodeMasterListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|master
specifier|private
specifier|volatile
name|boolean
name|master
init|=
literal|false
decl_stmt|;
DECL|method|LocalNodeMasterListeners
specifier|private
name|LocalNodeMasterListeners
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|master
operator|&&
name|event
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|master
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|LocalNodeMasterListener
name|listener
range|:
name|listeners
control|)
block|{
name|Executor
name|executor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|listener
operator|.
name|executorName
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|OnMasterRunnable
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|master
operator|&&
operator|!
name|event
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|master
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|LocalNodeMasterListener
name|listener
range|:
name|listeners
control|)
block|{
name|Executor
name|executor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|listener
operator|.
name|executorName
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|OffMasterRunnable
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|add
specifier|private
name|void
name|add
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|remove
specifier|private
name|void
name|remove
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|clear
specifier|private
name|void
name|clear
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|OnMasterRunnable
specifier|private
specifier|static
class|class
name|OnMasterRunnable
implements|implements
name|Runnable
block|{
DECL|field|listener
specifier|private
specifier|final
name|LocalNodeMasterListener
name|listener
decl_stmt|;
DECL|method|OnMasterRunnable
specifier|private
name|OnMasterRunnable
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|listener
operator|.
name|onMaster
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|OffMasterRunnable
specifier|private
specifier|static
class|class
name|OffMasterRunnable
implements|implements
name|Runnable
block|{
DECL|field|listener
specifier|private
specifier|final
name|LocalNodeMasterListener
name|listener
decl_stmt|;
DECL|method|OffMasterRunnable
specifier|private
name|OffMasterRunnable
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|listener
operator|.
name|offMaster
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|NoOpAckListener
specifier|private
specifier|static
class|class
name|NoOpAckListener
implements|implements
name|Discovery
operator|.
name|AckListener
block|{
annotation|@
name|Override
DECL|method|onNodeAck
specifier|public
name|void
name|onNodeAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|t
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|onTimeout
specifier|public
name|void
name|onTimeout
parameter_list|()
block|{         }
block|}
DECL|class|AckCountDownListener
specifier|private
specifier|static
class|class
name|AckCountDownListener
implements|implements
name|Discovery
operator|.
name|AckListener
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|AckCountDownListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ackedUpdateTask
specifier|private
specifier|final
name|AckedClusterStateUpdateTask
name|ackedUpdateTask
decl_stmt|;
DECL|field|countDown
specifier|private
specifier|final
name|CountDown
name|countDown
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|final
name|DiscoveryNodes
name|nodes
decl_stmt|;
DECL|field|clusterStateVersion
specifier|private
specifier|final
name|long
name|clusterStateVersion
decl_stmt|;
DECL|field|ackTimeoutCallback
specifier|private
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|ackTimeoutCallback
decl_stmt|;
DECL|field|lastFailure
specifier|private
name|Throwable
name|lastFailure
decl_stmt|;
DECL|method|AckCountDownListener
name|AckCountDownListener
parameter_list|(
name|AckedClusterStateUpdateTask
name|ackedUpdateTask
parameter_list|,
name|long
name|clusterStateVersion
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|ackedUpdateTask
operator|=
name|ackedUpdateTask
expr_stmt|;
name|this
operator|.
name|clusterStateVersion
operator|=
name|clusterStateVersion
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
name|int
name|countDown
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|ackedUpdateTask
operator|.
name|mustAck
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|countDown
operator|++
expr_stmt|;
block|}
block|}
comment|//we always wait for at least 1 node (the master)
name|countDown
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|countDown
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"expecting {} acknowledgements for cluster_state update (version: {})"
argument_list|,
name|countDown
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
name|this
operator|.
name|countDown
operator|=
operator|new
name|CountDown
argument_list|(
name|countDown
argument_list|)
expr_stmt|;
name|this
operator|.
name|ackTimeoutCallback
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|ackedUpdateTask
operator|.
name|ackTimeout
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|onTimeout
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNodeAck
specifier|public
name|void
name|onNodeAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ackedUpdateTask
operator|.
name|mustAck
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|//we always wait for the master ack anyway
if|if
condition|(
operator|!
name|node
operator|.
name|equals
argument_list|(
name|nodes
operator|.
name|masterNode
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"ack received from node [{}], cluster_state update (version: {})"
argument_list|,
name|node
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|lastFailure
operator|=
name|t
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"ack received from node [{}], cluster_state update (version: {})"
argument_list|,
name|t
argument_list|,
name|node
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"all expected nodes acknowledged cluster_state update (version: {})"
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
name|ackTimeoutCallback
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ackedUpdateTask
operator|.
name|onAllNodesAcked
argument_list|(
name|lastFailure
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|public
name|void
name|onTimeout
parameter_list|()
block|{
if|if
condition|(
name|countDown
operator|.
name|fastForward
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"timeout waiting for acknowledgement for cluster_state update (version: {})"
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
name|ackedUpdateTask
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

