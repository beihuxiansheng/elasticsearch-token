begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
operator|.
name|SettingsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|warmer
operator|.
name|IndexWarmersMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
operator|.
name|OpType
operator|.
name|AND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
operator|.
name|OpType
operator|.
name|OR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|IndexMetaData
specifier|public
class|class
name|IndexMetaData
block|{
DECL|interface|Custom
specifier|public
interface|interface
name|Custom
block|{
DECL|method|type
name|String
name|type
parameter_list|()
function_decl|;
DECL|interface|Factory
interface|interface
name|Factory
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
block|{
DECL|method|type
name|String
name|type
parameter_list|()
function_decl|;
DECL|method|readFrom
name|T
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|writeTo
name|void
name|writeTo
parameter_list|(
name|T
name|customIndexMetaData
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|fromMap
name|T
name|fromMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|fromXContent
name|T
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|toXContent
name|void
name|toXContent
parameter_list|(
name|T
name|customIndexMetaData
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**              * Merges from first to second, with first being more important, i.e., if something exists in first and second,              * first will prevail.              */
DECL|method|merge
name|T
name|merge
parameter_list|(
name|T
name|first
parameter_list|,
name|T
name|second
parameter_list|)
function_decl|;
block|}
block|}
DECL|field|customFactories
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Custom
operator|.
name|Factory
argument_list|>
name|customFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// register non plugin custom metadata
name|registerFactory
argument_list|(
name|IndexWarmersMetaData
operator|.
name|TYPE
argument_list|,
name|IndexWarmersMetaData
operator|.
name|FACTORY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register a custom index meta data factory. Make sure to call it from a static block.      */
DECL|method|registerFactory
specifier|public
specifier|static
name|void
name|registerFactory
parameter_list|(
name|String
name|type
parameter_list|,
name|Custom
operator|.
name|Factory
name|factory
parameter_list|)
block|{
name|customFactories
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|lookupFactory
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|Custom
operator|.
name|Factory
argument_list|<
name|T
argument_list|>
name|lookupFactory
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|customFactories
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|lookupFactorySafe
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|Custom
operator|.
name|Factory
argument_list|<
name|T
argument_list|>
name|lookupFactorySafe
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|ElasticsearchIllegalArgumentException
block|{
name|Custom
operator|.
name|Factory
argument_list|<
name|T
argument_list|>
name|factory
init|=
name|customFactories
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"No custom index metadata factoy registered for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|factory
return|;
block|}
DECL|field|INDEX_READ_ONLY_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|INDEX_READ_ONLY_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|5
argument_list|,
literal|"index read-only (api)"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|,
name|ClusterBlockLevel
operator|.
name|METADATA
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|INDEX_READ_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|INDEX_READ_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|7
argument_list|,
literal|"index read (api)"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterBlockLevel
operator|.
name|READ
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|INDEX_WRITE_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|INDEX_WRITE_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|8
argument_list|,
literal|"index write (api)"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|INDEX_METADATA_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|INDEX_METADATA_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|9
argument_list|,
literal|"index metadata (api)"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA
argument_list|)
argument_list|)
decl_stmt|;
DECL|enum|State
specifier|public
specifier|static
enum|enum
name|State
block|{
DECL|enum constant|OPEN
name|OPEN
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|CLOSE
name|CLOSE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|State
name|State
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|State
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
return|return
name|OPEN
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|1
condition|)
block|{
return|return
name|CLOSE
return|;
block|}
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"No state match for id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|State
name|fromString
parameter_list|(
name|String
name|state
parameter_list|)
block|{
if|if
condition|(
literal|"open"
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
return|return
name|OPEN
return|;
block|}
elseif|else
if|if
condition|(
literal|"close"
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
return|return
name|CLOSE
return|;
block|}
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"No state match for ["
operator|+
name|state
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|field|SETTING_NUMBER_OF_SHARDS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_NUMBER_OF_SHARDS
init|=
literal|"index.number_of_shards"
decl_stmt|;
DECL|field|SETTING_NUMBER_OF_REPLICAS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_NUMBER_OF_REPLICAS
init|=
literal|"index.number_of_replicas"
decl_stmt|;
DECL|field|SETTING_AUTO_EXPAND_REPLICAS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_AUTO_EXPAND_REPLICAS
init|=
literal|"index.auto_expand_replicas"
decl_stmt|;
DECL|field|SETTING_READ_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_READ_ONLY
init|=
literal|"index.blocks.read_only"
decl_stmt|;
DECL|field|SETTING_BLOCKS_READ
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_BLOCKS_READ
init|=
literal|"index.blocks.read"
decl_stmt|;
DECL|field|SETTING_BLOCKS_WRITE
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_BLOCKS_WRITE
init|=
literal|"index.blocks.write"
decl_stmt|;
DECL|field|SETTING_BLOCKS_METADATA
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_BLOCKS_METADATA
init|=
literal|"index.blocks.metadata"
decl_stmt|;
DECL|field|SETTING_VERSION_CREATED
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_VERSION_CREATED
init|=
literal|"index.version.created"
decl_stmt|;
DECL|field|SETTING_CREATION_DATE
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CREATION_DATE
init|=
literal|"index.creation_date"
decl_stmt|;
DECL|field|SETTING_UUID
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_UUID
init|=
literal|"index.uuid"
decl_stmt|;
DECL|field|INDEX_UUID_NA_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_UUID_NA_VALUE
init|=
literal|"_na_"
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|State
name|state
decl_stmt|;
DECL|field|aliases
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|aliases
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|mappings
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|field|totalNumberOfShards
specifier|private
specifier|transient
specifier|final
name|int
name|totalNumberOfShards
decl_stmt|;
DECL|field|requireFilters
specifier|private
specifier|final
name|DiscoveryNodeFilters
name|requireFilters
decl_stmt|;
DECL|field|includeFilters
specifier|private
specifier|final
name|DiscoveryNodeFilters
name|includeFilters
decl_stmt|;
DECL|field|excludeFilters
specifier|private
specifier|final
name|DiscoveryNodeFilters
name|excludeFilters
decl_stmt|;
DECL|method|IndexMetaData
specifier|private
name|IndexMetaData
parameter_list|(
name|String
name|index
parameter_list|,
name|long
name|version
parameter_list|,
name|State
name|state
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|aliases
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
argument_list|,
literal|"must specify numberOfShards for index ["
operator|+
name|index
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
argument_list|,
literal|"must specify numberOfReplicas for index ["
operator|+
name|index
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|mappings
operator|=
name|mappings
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|customs
expr_stmt|;
name|this
operator|.
name|totalNumberOfShards
operator|=
name|numberOfShards
argument_list|()
operator|*
operator|(
name|numberOfReplicas
argument_list|()
operator|+
literal|1
operator|)
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
name|aliases
expr_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requireMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
literal|"index.routing.allocation.require."
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|requireMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requireFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|requireFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|AND
argument_list|,
name|requireMap
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|includeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
literal|"index.routing.allocation.include."
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|includeFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|includeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|OR
argument_list|,
name|includeMap
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|excludeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
literal|"index.routing.allocation.exclude."
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|excludeFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|excludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|OR
argument_list|,
name|excludeMap
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|index
argument_list|()
return|;
block|}
DECL|method|uuid
specifier|public
name|String
name|uuid
parameter_list|()
block|{
return|return
name|settings
operator|.
name|get
argument_list|(
name|SETTING_UUID
argument_list|,
name|INDEX_UUID_NA_VALUE
argument_list|)
return|;
block|}
DECL|method|getUUID
specifier|public
name|String
name|getUUID
parameter_list|()
block|{
return|return
name|uuid
argument_list|()
return|;
block|}
comment|/**      * Test whether the current index UUID is the same as the given one. Returns true if either are _na_      */
DECL|method|isSameUUID
specifier|public
name|boolean
name|isSameUUID
parameter_list|(
name|String
name|otherUUID
parameter_list|)
block|{
assert|assert
name|otherUUID
operator|!=
literal|null
assert|;
assert|assert
name|uuid
argument_list|()
operator|!=
literal|null
assert|;
if|if
condition|(
name|INDEX_UUID_NA_VALUE
operator|.
name|equals
argument_list|(
name|otherUUID
argument_list|)
operator|||
name|INDEX_UUID_NA_VALUE
operator|.
name|equals
argument_list|(
name|uuid
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|otherUUID
operator|.
name|equals
argument_list|(
name|getUUID
argument_list|()
argument_list|)
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|creationDate
specifier|public
name|long
name|creationDate
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getAsLong
argument_list|(
name|SETTING_CREATION_DATE
argument_list|,
operator|-
literal|1l
argument_list|)
return|;
block|}
DECL|method|getCreationDate
specifier|public
name|long
name|getCreationDate
parameter_list|()
block|{
return|return
name|creationDate
argument_list|()
return|;
block|}
DECL|method|state
specifier|public
name|State
name|state
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
DECL|method|getState
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
argument_list|()
return|;
block|}
DECL|method|numberOfShards
specifier|public
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|getNumberOfShards
specifier|public
name|int
name|getNumberOfShards
parameter_list|()
block|{
return|return
name|numberOfShards
argument_list|()
return|;
block|}
DECL|method|numberOfReplicas
specifier|public
name|int
name|numberOfReplicas
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|getNumberOfReplicas
specifier|public
name|int
name|getNumberOfReplicas
parameter_list|()
block|{
return|return
name|numberOfReplicas
argument_list|()
return|;
block|}
DECL|method|totalNumberOfShards
specifier|public
name|int
name|totalNumberOfShards
parameter_list|()
block|{
return|return
name|totalNumberOfShards
return|;
block|}
DECL|method|getTotalNumberOfShards
specifier|public
name|int
name|getTotalNumberOfShards
parameter_list|()
block|{
return|return
name|totalNumberOfShards
argument_list|()
return|;
block|}
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
DECL|method|getSettings
specifier|public
name|Settings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
argument_list|()
return|;
block|}
DECL|method|aliases
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|aliases
parameter_list|()
block|{
return|return
name|this
operator|.
name|aliases
return|;
block|}
DECL|method|getAliases
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|getAliases
parameter_list|()
block|{
return|return
name|aliases
argument_list|()
return|;
block|}
DECL|method|mappings
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
parameter_list|()
block|{
return|return
name|mappings
return|;
block|}
DECL|method|getMappings
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|getMappings
parameter_list|()
block|{
return|return
name|mappings
argument_list|()
return|;
block|}
annotation|@
name|Nullable
DECL|method|mapping
specifier|public
name|MappingMetaData
name|mapping
parameter_list|(
name|String
name|mappingType
parameter_list|)
block|{
return|return
name|mappings
operator|.
name|get
argument_list|(
name|mappingType
argument_list|)
return|;
block|}
comment|/**      * Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),      * in this case, we want to return the default mapping in case it has some default mapping definitions.      *<p/>      * Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,      * setting its routing, timestamp, and so on if needed.      */
annotation|@
name|Nullable
DECL|method|mappingOrDefault
specifier|public
name|MappingMetaData
name|mappingOrDefault
parameter_list|(
name|String
name|mappingType
parameter_list|)
block|{
name|MappingMetaData
name|mapping
init|=
name|mappings
operator|.
name|get
argument_list|(
name|mappingType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
return|return
name|mapping
return|;
block|}
return|return
name|mappings
operator|.
name|get
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
return|;
block|}
DECL|method|customs
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|()
block|{
return|return
name|this
operator|.
name|customs
return|;
block|}
DECL|method|getCustoms
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|getCustoms
parameter_list|()
block|{
return|return
name|this
operator|.
name|customs
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|custom
specifier|public
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|T
name|custom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|customs
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|requireFilters
specifier|public
name|DiscoveryNodeFilters
name|requireFilters
parameter_list|()
block|{
return|return
name|requireFilters
return|;
block|}
annotation|@
name|Nullable
DECL|method|includeFilters
specifier|public
name|DiscoveryNodeFilters
name|includeFilters
parameter_list|()
block|{
return|return
name|includeFilters
return|;
block|}
annotation|@
name|Nullable
DECL|method|excludeFilters
specifier|public
name|DiscoveryNodeFilters
name|excludeFilters
parameter_list|()
block|{
return|return
name|excludeFilters
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IndexMetaData
name|that
init|=
operator|(
name|IndexMetaData
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|aliases
operator|.
name|equals
argument_list|(
name|that
operator|.
name|aliases
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|index
operator|.
name|equals
argument_list|(
name|that
operator|.
name|index
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|mappings
operator|.
name|equals
argument_list|(
name|that
operator|.
name|mappings
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|settings
operator|.
name|equals
argument_list|(
name|that
operator|.
name|settings
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|state
operator|!=
name|that
operator|.
name|state
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|index
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|state
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|aliases
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|settings
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|mappings
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|indexMetaData
argument_list|)
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|index
specifier|private
name|String
name|index
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|OPEN
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
literal|1
decl_stmt|;
DECL|field|settings
specifier|private
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
decl_stmt|;
DECL|field|mappings
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
decl_stmt|;
DECL|field|aliases
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|aliases
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|mappings
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|indexMetaData
operator|.
name|index
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|indexMetaData
operator|.
name|state
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|indexMetaData
operator|.
name|version
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|indexMetaData
operator|.
name|settings
argument_list|()
expr_stmt|;
name|this
operator|.
name|mappings
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|indexMetaData
operator|.
name|mappings
argument_list|)
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|indexMetaData
operator|.
name|aliases
argument_list|)
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|indexMetaData
operator|.
name|customs
argument_list|)
expr_stmt|;
block|}
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|index
specifier|public
name|Builder
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|numberOfShards
specifier|public
name|Builder
name|numberOfShards
parameter_list|(
name|int
name|numberOfShards
parameter_list|)
block|{
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numberOfShards
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|numberOfShards
specifier|public
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|numberOfReplicas
specifier|public
name|Builder
name|numberOfReplicas
parameter_list|(
name|int
name|numberOfReplicas
parameter_list|)
block|{
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|numberOfReplicas
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|numberOfReplicas
specifier|public
name|int
name|numberOfReplicas
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|creationDate
specifier|public
name|Builder
name|creationDate
parameter_list|(
name|long
name|creationDate
parameter_list|)
block|{
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_CREATION_DATE
argument_list|,
name|creationDate
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|creationDate
specifier|public
name|long
name|creationDate
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getAsLong
argument_list|(
name|SETTING_CREATION_DATE
argument_list|,
operator|-
literal|1l
argument_list|)
return|;
block|}
DECL|method|settings
specifier|public
name|Builder
name|settings
parameter_list|(
name|Settings
operator|.
name|Builder
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|settings
specifier|public
name|Builder
name|settings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mapping
specifier|public
name|MappingMetaData
name|mapping
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|mappings
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|removeMapping
specifier|public
name|Builder
name|removeMapping
parameter_list|(
name|String
name|mappingType
parameter_list|)
block|{
name|mappings
operator|.
name|remove
argument_list|(
name|mappingType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putMapping
specifier|public
name|Builder
name|putMapping
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
init|)
block|{
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
name|type
argument_list|,
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|putMapping
specifier|public
name|Builder
name|putMapping
parameter_list|(
name|MappingMetaData
name|mappingMd
parameter_list|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|mappingMd
operator|.
name|type
argument_list|()
argument_list|,
name|mappingMd
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|state
specifier|public
name|Builder
name|state
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putAlias
specifier|public
name|Builder
name|putAlias
parameter_list|(
name|AliasMetaData
name|aliasMetaData
parameter_list|)
block|{
name|aliases
operator|.
name|put
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
name|aliasMetaData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putAlias
specifier|public
name|Builder
name|putAlias
parameter_list|(
name|AliasMetaData
operator|.
name|Builder
name|aliasMetaData
parameter_list|)
block|{
name|aliases
operator|.
name|put
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
name|aliasMetaData
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeAlias
specifier|public
name|Builder
name|removeAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|aliases
operator|.
name|remove
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeAllAliases
specifier|public
name|Builder
name|removeAllAliases
parameter_list|()
block|{
name|aliases
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putCustom
specifier|public
name|Builder
name|putCustom
parameter_list|(
name|String
name|type
parameter_list|,
name|Custom
name|customIndexMetaData
parameter_list|)
block|{
name|this
operator|.
name|customs
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|customIndexMetaData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeCustom
specifier|public
name|Builder
name|removeCustom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|customs
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCustom
specifier|public
name|Custom
name|getCustom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|this
operator|.
name|customs
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|version
specifier|public
name|Builder
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|IndexMetaData
name|build
parameter_list|()
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|tmpAliases
init|=
name|aliases
decl_stmt|;
name|Settings
name|tmpSettings
init|=
name|settings
decl_stmt|;
comment|// update default mapping on the MappingMetaData
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
condition|)
block|{
name|MappingMetaData
name|defaultMapping
init|=
name|mappings
operator|.
name|get
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|MappingMetaData
argument_list|>
name|cursor
range|:
name|mappings
operator|.
name|values
argument_list|()
control|)
block|{
name|cursor
operator|.
name|value
operator|.
name|updateDefaultMapping
argument_list|(
name|defaultMapping
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IndexMetaData
argument_list|(
name|index
argument_list|,
name|version
argument_list|,
name|state
argument_list|,
name|tmpSettings
argument_list|,
name|mappings
operator|.
name|build
argument_list|()
argument_list|,
name|tmpAliases
operator|.
name|build
argument_list|()
argument_list|,
name|customs
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toXContent
specifier|public
specifier|static
name|void
name|toXContent
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"version"
argument_list|,
name|indexMetaData
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"state"
argument_list|,
name|indexMetaData
operator|.
name|state
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|binary
init|=
name|params
operator|.
name|paramAsBoolean
argument_list|(
literal|"binary"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|indexMetaData
operator|.
name|settings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|mappings
argument_list|()
control|)
block|{
if|if
condition|(
name|binary
condition|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|source
argument_list|()
operator|.
name|compressed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|data
init|=
name|cursor
operator|.
name|value
operator|.
name|source
argument_list|()
operator|.
name|uncompressed
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|data
argument_list|)
operator|.
name|createParser
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|parser
operator|.
name|mapOrdered
argument_list|()
decl_stmt|;
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|customs
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|cursor
operator|.
name|key
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|lookupFactorySafe
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
operator|.
name|toXContent
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
literal|"aliases"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|AliasMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|AliasMetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|IndexMetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// fresh parser? move to the first token
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
comment|// on a start object move to next token
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
literal|"settings"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|settings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SettingsLoader
operator|.
name|Helper
operator|.
name|loadNestedFromMap
argument_list|(
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mappings"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|mappingType
init|=
name|currentFieldName
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mappingSource
init|=
name|MapBuilder
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|newMapBuilder
argument_list|()
decl|.
name|put
argument_list|(
name|mappingType
argument_list|,
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
decl|.
name|map
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
name|mappingType
argument_list|,
name|mappingSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"aliases"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|builder
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// check if its a custom index metadata
name|Custom
operator|.
name|Factory
argument_list|<
name|Custom
argument_list|>
name|factory
init|=
name|lookupFactory
argument_list|(
name|currentFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
comment|//TODO warn
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|putCustom
argument_list|(
name|factory
operator|.
name|type
argument_list|()
argument_list|,
name|factory
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
literal|"mappings"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_EMBEDDED_OBJECT
condition|)
block|{
name|builder
operator|.
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
operator|new
name|CompressedString
argument_list|(
name|parser
operator|.
name|binaryValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|parser
operator|.
name|mapOrdered
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|mappingType
init|=
name|mapping
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
name|mappingType
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"state"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|state
argument_list|(
name|State
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|version
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|IndexMetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|version
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|state
argument_list|(
name|State
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|settings
argument_list|(
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|mappingsSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mappingsSize
condition|;
name|i
operator|++
control|)
block|{
name|MappingMetaData
name|mappingMd
init|=
name|MappingMetaData
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putMapping
argument_list|(
name|mappingMd
argument_list|)
expr_stmt|;
block|}
name|int
name|aliasesSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aliasesSize
condition|;
name|i
operator|++
control|)
block|{
name|AliasMetaData
name|aliasMd
init|=
name|AliasMetaData
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putAlias
argument_list|(
name|aliasMd
argument_list|)
expr_stmt|;
block|}
name|int
name|customSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|customSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|Custom
name|customIndexMetaData
init|=
name|lookupFactorySafe
argument_list|(
name|type
argument_list|)
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putCustom
argument_list|(
name|type
argument_list|,
name|customIndexMetaData
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|indexMetaData
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|indexMetaData
operator|.
name|state
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|writeSettingsToStream
argument_list|(
name|indexMetaData
operator|.
name|settings
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|MappingMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|MappingMetaData
operator|.
name|writeTo
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|AliasMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|AliasMetaData
operator|.
name|Builder
operator|.
name|writeTo
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|indexMetaData
operator|.
name|customs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|customs
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|lookupFactorySafe
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
operator|.
name|writeTo
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

