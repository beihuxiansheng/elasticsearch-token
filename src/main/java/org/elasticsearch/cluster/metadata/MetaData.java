begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectArrayList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiffableUtils
operator|.
name|KeyedReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|DiskThresholdDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|InternalClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|HppcMaps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
operator|.
name|SettingsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
operator|.
name|IndicesStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|ttl
operator|.
name|IndicesTTLService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|warmer
operator|.
name|IndexWarmersMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|*
import|;
end_import

begin_class
DECL|class|MetaData
specifier|public
class|class
name|MetaData
implements|implements
name|Iterable
argument_list|<
name|IndexMetaData
argument_list|>
implements|,
name|Diffable
argument_list|<
name|MetaData
argument_list|>
block|{
DECL|field|PROTO
specifier|public
specifier|static
specifier|final
name|MetaData
name|PROTO
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|ALL
specifier|public
specifier|static
specifier|final
name|String
name|ALL
init|=
literal|"_all"
decl_stmt|;
DECL|enum|XContentContext
specifier|public
enum|enum
name|XContentContext
block|{
comment|/* Custom metadata should be returns as part of API call */
DECL|enum constant|API
name|API
block|,
comment|/* Custom metadata should be stored as part of the persistent cluster state */
DECL|enum constant|GATEWAY
name|GATEWAY
block|,
comment|/* Custom metadata should be stored as part of a snapshot */
DECL|enum constant|SNAPSHOT
name|SNAPSHOT
block|}
DECL|field|API_ONLY
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|XContentContext
argument_list|>
name|API_ONLY
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentContext
operator|.
name|API
argument_list|)
decl_stmt|;
DECL|field|API_AND_GATEWAY
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|XContentContext
argument_list|>
name|API_AND_GATEWAY
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentContext
operator|.
name|API
argument_list|,
name|XContentContext
operator|.
name|GATEWAY
argument_list|)
decl_stmt|;
DECL|field|API_AND_SNAPSHOT
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|XContentContext
argument_list|>
name|API_AND_SNAPSHOT
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentContext
operator|.
name|API
argument_list|,
name|XContentContext
operator|.
name|SNAPSHOT
argument_list|)
decl_stmt|;
DECL|interface|Custom
specifier|public
interface|interface
name|Custom
extends|extends
name|Diffable
argument_list|<
name|Custom
argument_list|>
extends|,
name|ToXContent
block|{
DECL|method|type
name|String
name|type
parameter_list|()
function_decl|;
DECL|method|fromXContent
name|Custom
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|context
name|EnumSet
argument_list|<
name|XContentContext
argument_list|>
name|context
parameter_list|()
function_decl|;
block|}
DECL|field|customPrototypes
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customPrototypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// register non plugin custom metadata
name|registerPrototype
argument_list|(
name|RepositoriesMetaData
operator|.
name|TYPE
argument_list|,
name|RepositoriesMetaData
operator|.
name|PROTO
argument_list|)
expr_stmt|;
name|registerPrototype
argument_list|(
name|SnapshotMetaData
operator|.
name|TYPE
argument_list|,
name|SnapshotMetaData
operator|.
name|PROTO
argument_list|)
expr_stmt|;
name|registerPrototype
argument_list|(
name|RestoreMetaData
operator|.
name|TYPE
argument_list|,
name|RestoreMetaData
operator|.
name|PROTO
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register a custom index meta data factory. Make sure to call it from a static block.      */
DECL|method|registerPrototype
specifier|public
specifier|static
name|void
name|registerPrototype
parameter_list|(
name|String
name|type
parameter_list|,
name|Custom
name|proto
parameter_list|)
block|{
name|customPrototypes
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|proto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|lookupPrototype
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|T
name|lookupPrototype
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|T
operator|)
name|customPrototypes
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|lookupPrototypeSafe
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|T
name|lookupPrototypeSafe
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|//noinspection unchecked
name|T
name|proto
init|=
operator|(
name|T
operator|)
name|customPrototypes
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No custom metadata prototype registered for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|proto
return|;
block|}
DECL|field|SETTING_READ_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_READ_ONLY
init|=
literal|"cluster.blocks.read_only"
decl_stmt|;
DECL|field|CLUSTER_READ_ONLY_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|CLUSTER_READ_ONLY_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|6
argument_list|,
literal|"cluster read-only (api)"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|,
name|ClusterBlockLevel
operator|.
name|METADATA_WRITE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|EMPTY_META_DATA
specifier|public
specifier|static
specifier|final
name|MetaData
name|EMPTY_META_DATA
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|CONTEXT_MODE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_MODE_PARAM
init|=
literal|"context_mode"
decl_stmt|;
DECL|field|CONTEXT_MODE_SNAPSHOT
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_MODE_SNAPSHOT
init|=
name|XContentContext
operator|.
name|SNAPSHOT
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|CONTEXT_MODE_GATEWAY
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_MODE_GATEWAY
init|=
name|XContentContext
operator|.
name|GATEWAY
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|uuid
specifier|private
specifier|final
name|String
name|uuid
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|transientSettings
specifier|private
specifier|final
name|Settings
name|transientSettings
decl_stmt|;
DECL|field|persistentSettings
specifier|private
specifier|final
name|Settings
name|persistentSettings
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
decl_stmt|;
DECL|field|templates
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|templates
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|field|totalNumberOfShards
specifier|private
specifier|final
specifier|transient
name|int
name|totalNumberOfShards
decl_stmt|;
comment|// Transient ? not serializable anyway?
DECL|field|numberOfShards
specifier|private
specifier|final
name|int
name|numberOfShards
decl_stmt|;
DECL|field|allIndices
specifier|private
specifier|final
name|String
index|[]
name|allIndices
decl_stmt|;
DECL|field|allOpenIndices
specifier|private
specifier|final
name|String
index|[]
name|allOpenIndices
decl_stmt|;
DECL|field|allClosedIndices
specifier|private
specifier|final
name|String
index|[]
name|allClosedIndices
decl_stmt|;
DECL|field|aliases
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|aliases
decl_stmt|;
DECL|field|aliasAndIndexToIndexMap
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|aliasAndIndexToIndexMap
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|MetaData
name|MetaData
parameter_list|(
name|String
name|uuid
parameter_list|,
name|long
name|version
parameter_list|,
name|Settings
name|transientSettings
parameter_list|,
name|Settings
name|persistentSettings
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|templates
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|transientSettings
operator|=
name|transientSettings
expr_stmt|;
name|this
operator|.
name|persistentSettings
operator|=
name|persistentSettings
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|persistentSettings
argument_list|)
operator|.
name|put
argument_list|(
name|transientSettings
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|customs
expr_stmt|;
name|this
operator|.
name|templates
operator|=
name|templates
expr_stmt|;
name|int
name|totalNumberOfShards
init|=
literal|0
decl_stmt|;
name|int
name|numberOfShards
init|=
literal|0
decl_stmt|;
name|int
name|numAliases
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|totalNumberOfShards
operator|+=
name|cursor
operator|.
name|value
operator|.
name|totalNumberOfShards
argument_list|()
expr_stmt|;
name|numberOfShards
operator|+=
name|cursor
operator|.
name|value
operator|.
name|numberOfShards
argument_list|()
expr_stmt|;
name|numAliases
operator|+=
name|cursor
operator|.
name|value
operator|.
name|aliases
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|totalNumberOfShards
operator|=
name|totalNumberOfShards
expr_stmt|;
name|this
operator|.
name|numberOfShards
operator|=
name|numberOfShards
expr_stmt|;
comment|// build all indices map
name|List
argument_list|<
name|String
argument_list|>
name|allIndicesLst
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|allIndicesLst
operator|.
name|add
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|allIndices
operator|=
name|allIndicesLst
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|allIndicesLst
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|int
name|numIndices
init|=
name|allIndicesLst
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allOpenIndices
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allClosedIndices
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|cursor
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|.
name|state
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
condition|)
block|{
name|allOpenIndices
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexMetaData
operator|.
name|state
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
name|allClosedIndices
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|allOpenIndices
operator|=
name|allOpenIndices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|allOpenIndices
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|allClosedIndices
operator|=
name|allClosedIndices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|allClosedIndices
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
comment|// build aliases map
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tmpAliases
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|numAliases
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|String
name|index
init|=
name|indexMetaData
operator|.
name|index
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|AliasMetaData
argument_list|>
name|aliasCursor
range|:
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|AliasMetaData
name|aliasMd
init|=
name|aliasCursor
operator|.
name|value
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|indexAliasMap
init|=
operator|(
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
operator|)
name|tmpAliases
operator|.
name|get
argument_list|(
name|aliasMd
operator|.
name|alias
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexAliasMap
operator|==
literal|null
condition|)
block|{
name|indexAliasMap
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// typically, there is 1 alias pointing to an index
name|tmpAliases
operator|.
name|put
argument_list|(
name|aliasMd
operator|.
name|alias
argument_list|()
argument_list|,
name|indexAliasMap
argument_list|)
expr_stmt|;
block|}
name|indexAliasMap
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|aliasMd
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|cursor
range|:
name|tmpAliases
operator|.
name|keys
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|cursor
operator|.
name|value
decl_stmt|;
comment|// if there is access to the raw values buffer of the map that the immutable maps wraps, then we don't need to use put, and just set array slots
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|map
init|=
operator|(
operator|(
name|ImmutableOpenMap
operator|.
name|Builder
operator|)
name|tmpAliases
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|)
operator|.
name|cast
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|tmpAliases
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|aliases
operator|=
name|tmpAliases
operator|.
expr|<
name|String
operator|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
operator|>
name|cast
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|aliasAndIndexToIndexMap
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|numAliases
operator|+
name|numIndices
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|indices
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|ObjectArrayList
argument_list|<
name|String
argument_list|>
name|indicesLst
init|=
operator|(
name|ObjectArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|aliasAndIndexToIndexMap
operator|.
name|get
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indicesLst
operator|==
literal|null
condition|)
block|{
name|indicesLst
operator|=
operator|new
name|ObjectArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|aliasAndIndexToIndexMap
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|indicesLst
argument_list|)
expr_stmt|;
block|}
name|indicesLst
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|cursor1
range|:
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|keys
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|cursor1
operator|.
name|value
decl_stmt|;
name|indicesLst
operator|=
operator|(
name|ObjectArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|aliasAndIndexToIndexMap
operator|.
name|get
argument_list|(
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|indicesLst
operator|==
literal|null
condition|)
block|{
name|indicesLst
operator|=
operator|new
name|ObjectArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|aliasAndIndexToIndexMap
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|indicesLst
argument_list|)
expr_stmt|;
block|}
name|indicesLst
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cursor
range|:
name|aliasAndIndexToIndexMap
control|)
block|{
name|String
index|[]
name|indicesLst
init|=
operator|(
operator|(
name|ObjectArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|cursor
operator|.
name|value
operator|)
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|aliasAndIndexToIndexMap
operator|.
name|put
argument_list|(
name|cursor
operator|.
name|key
argument_list|,
name|indicesLst
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|aliasAndIndexToIndexMap
operator|=
name|aliasAndIndexToIndexMap
operator|.
expr|<
name|String
operator|,
name|String
index|[]
operator|>
name|cast
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|uuid
specifier|public
name|String
name|uuid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uuid
return|;
block|}
comment|/**      * Returns the merged transient and persistent settings.      */
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
DECL|method|transientSettings
specifier|public
name|Settings
name|transientSettings
parameter_list|()
block|{
return|return
name|this
operator|.
name|transientSettings
return|;
block|}
DECL|method|persistentSettings
specifier|public
name|Settings
name|persistentSettings
parameter_list|()
block|{
return|return
name|this
operator|.
name|persistentSettings
return|;
block|}
DECL|method|aliases
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|aliases
parameter_list|()
block|{
return|return
name|this
operator|.
name|aliases
return|;
block|}
DECL|method|getAliases
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|getAliases
parameter_list|()
block|{
return|return
name|aliases
argument_list|()
return|;
block|}
comment|/**      * Finds the specific index aliases that match with the specified aliases directly or partially via wildcards and      * that point to the specified concrete indices or match partially with the indices via wildcards.      *      * @param aliases         The names of the index aliases to find      * @param concreteIndices The concrete indexes the index aliases must point to order to be returned.      * @return the found index aliases grouped by index      */
DECL|method|findAliases
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableList
argument_list|<
name|AliasMetaData
argument_list|>
argument_list|>
name|findAliases
parameter_list|(
specifier|final
name|String
index|[]
name|aliases
parameter_list|,
name|String
index|[]
name|concreteIndices
parameter_list|)
block|{
assert|assert
name|aliases
operator|!=
literal|null
assert|;
assert|assert
name|concreteIndices
operator|!=
literal|null
assert|;
if|if
condition|(
name|concreteIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
return|;
block|}
name|boolean
name|matchAllAliases
init|=
name|matchAllAliases
argument_list|(
name|aliases
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ImmutableList
argument_list|<
name|AliasMetaData
argument_list|>
argument_list|>
name|mapBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|intersection
init|=
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|ObjectHashSet
operator|.
name|from
argument_list|(
name|concreteIndices
argument_list|)
argument_list|,
name|indices
operator|.
name|keys
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|intersection
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AliasMetaData
argument_list|>
name|filteredValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|AliasMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|AliasMetaData
name|value
init|=
name|cursor
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|matchAllAliases
operator|||
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|aliases
argument_list|,
name|value
operator|.
name|alias
argument_list|()
argument_list|)
condition|)
block|{
name|filteredValues
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|filteredValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Make the list order deterministic
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|filteredValues
argument_list|,
operator|new
name|Comparator
argument_list|<
name|AliasMetaData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|AliasMetaData
name|o1
parameter_list|,
name|AliasMetaData
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|alias
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|alias
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mapBuilder
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|filteredValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mapBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|matchAllAliases
specifier|private
specifier|static
name|boolean
name|matchAllAliases
parameter_list|(
specifier|final
name|String
index|[]
name|aliases
parameter_list|)
block|{
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
if|if
condition|(
name|alias
operator|.
name|equals
argument_list|(
name|ALL
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|aliases
operator|.
name|length
operator|==
literal|0
return|;
block|}
comment|/**      * Checks if at least one of the specified aliases exists in the specified concrete indices. Wildcards are supported in the      * alias names for partial matches.      *      * @param aliases         The names of the index aliases to find      * @param concreteIndices The concrete indexes the index aliases must point to order to be returned.      * @return whether at least one of the specified aliases exists in one of the specified concrete indices.      */
DECL|method|hasAliases
specifier|public
name|boolean
name|hasAliases
parameter_list|(
specifier|final
name|String
index|[]
name|aliases
parameter_list|,
name|String
index|[]
name|concreteIndices
parameter_list|)
block|{
assert|assert
name|aliases
operator|!=
literal|null
assert|;
assert|assert
name|concreteIndices
operator|!=
literal|null
assert|;
if|if
condition|(
name|concreteIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterable
argument_list|<
name|String
argument_list|>
name|intersection
init|=
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|ObjectHashSet
operator|.
name|from
argument_list|(
name|concreteIndices
argument_list|)
argument_list|,
name|indices
operator|.
name|keys
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|intersection
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AliasMetaData
argument_list|>
name|filteredValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|AliasMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|AliasMetaData
name|value
init|=
name|cursor
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|aliases
argument_list|,
name|value
operator|.
name|alias
argument_list|()
argument_list|)
condition|)
block|{
name|filteredValues
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|filteredValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/*      * Finds all mappings for types and concrete indices. Types are expanded to      * include all types that match the glob patterns in the types array. Empty      * types array, null or {"_all"} will be expanded to all types available for      * the given indices.      */
DECL|method|findMappings
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
argument_list|>
name|findMappings
parameter_list|(
name|String
index|[]
name|concreteIndices
parameter_list|,
specifier|final
name|String
index|[]
name|types
parameter_list|)
block|{
assert|assert
name|types
operator|!=
literal|null
assert|;
assert|assert
name|concreteIndices
operator|!=
literal|null
assert|;
if|if
condition|(
name|concreteIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
return|;
block|}
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
argument_list|>
name|indexMapBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|intersection
init|=
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|ObjectHashSet
operator|.
name|from
argument_list|(
name|concreteIndices
argument_list|)
argument_list|,
name|indices
operator|.
name|keys
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|intersection
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|filteredMappings
decl_stmt|;
if|if
condition|(
name|isAllTypes
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|indexMapBuilder
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|indexMetaData
operator|.
name|getMappings
argument_list|()
argument_list|)
expr_stmt|;
comment|// No types specified means get it all
block|}
else|else
block|{
name|filteredMappings
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|mappings
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|types
argument_list|,
name|cursor
operator|.
name|key
argument_list|)
condition|)
block|{
name|filteredMappings
operator|.
name|put
argument_list|(
name|cursor
operator|.
name|key
argument_list|,
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|filteredMappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexMapBuilder
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|filteredMappings
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|indexMapBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|findWarmers
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableList
argument_list|<
name|IndexWarmersMetaData
operator|.
name|Entry
argument_list|>
argument_list|>
name|findWarmers
parameter_list|(
name|String
index|[]
name|concreteIndices
parameter_list|,
specifier|final
name|String
index|[]
name|types
parameter_list|,
specifier|final
name|String
index|[]
name|uncheckedWarmers
parameter_list|)
block|{
assert|assert
name|uncheckedWarmers
operator|!=
literal|null
assert|;
assert|assert
name|concreteIndices
operator|!=
literal|null
assert|;
if|if
condition|(
name|concreteIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
return|;
block|}
comment|// special _all check to behave the same like not specifying anything for the warmers (not for the indices)
specifier|final
name|String
index|[]
name|warmers
init|=
name|Strings
operator|.
name|isAllOrWildcard
argument_list|(
name|uncheckedWarmers
argument_list|)
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
name|uncheckedWarmers
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ImmutableList
argument_list|<
name|IndexWarmersMetaData
operator|.
name|Entry
argument_list|>
argument_list|>
name|mapBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|intersection
init|=
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|ObjectHashSet
operator|.
name|from
argument_list|(
name|concreteIndices
argument_list|)
argument_list|,
name|indices
operator|.
name|keys
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|intersection
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|IndexWarmersMetaData
name|indexWarmersMetaData
init|=
name|indexMetaData
operator|.
name|custom
argument_list|(
name|IndexWarmersMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexWarmersMetaData
operator|==
literal|null
operator|||
name|indexWarmersMetaData
operator|.
name|entries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Collection
argument_list|<
name|IndexWarmersMetaData
operator|.
name|Entry
argument_list|>
name|filteredWarmers
init|=
name|Collections2
operator|.
name|filter
argument_list|(
name|indexWarmersMetaData
operator|.
name|entries
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|IndexWarmersMetaData
operator|.
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|IndexWarmersMetaData
operator|.
name|Entry
name|warmer
parameter_list|)
block|{
if|if
condition|(
name|warmers
operator|.
name|length
operator|!=
literal|0
operator|&&
name|types
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|warmers
argument_list|,
name|warmer
operator|.
name|name
argument_list|()
argument_list|)
operator|&&
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|types
argument_list|,
name|warmer
operator|.
name|types
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|warmers
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|warmers
argument_list|,
name|warmer
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|types
argument_list|,
name|warmer
operator|.
name|types
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filteredWarmers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mapBuilder
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|filteredWarmers
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mapBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Returns all the concrete indices.      */
DECL|method|concreteAllIndices
specifier|public
name|String
index|[]
name|concreteAllIndices
parameter_list|()
block|{
return|return
name|allIndices
return|;
block|}
DECL|method|getConcreteAllIndices
specifier|public
name|String
index|[]
name|getConcreteAllIndices
parameter_list|()
block|{
return|return
name|concreteAllIndices
argument_list|()
return|;
block|}
DECL|method|concreteAllOpenIndices
specifier|public
name|String
index|[]
name|concreteAllOpenIndices
parameter_list|()
block|{
return|return
name|allOpenIndices
return|;
block|}
DECL|method|getConcreteAllOpenIndices
specifier|public
name|String
index|[]
name|getConcreteAllOpenIndices
parameter_list|()
block|{
return|return
name|allOpenIndices
return|;
block|}
DECL|method|concreteAllClosedIndices
specifier|public
name|String
index|[]
name|concreteAllClosedIndices
parameter_list|()
block|{
return|return
name|allClosedIndices
return|;
block|}
DECL|method|getConcreteAllClosedIndices
specifier|public
name|String
index|[]
name|getConcreteAllClosedIndices
parameter_list|()
block|{
return|return
name|allClosedIndices
return|;
block|}
comment|/**      * Returns indexing routing for the given index.      */
DECL|method|resolveIndexRouting
specifier|public
name|String
name|resolveIndexRouting
parameter_list|(
annotation|@
name|Nullable
name|String
name|routing
parameter_list|,
name|String
name|aliasOrIndex
parameter_list|)
block|{
comment|// Check if index is specified by an alias
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|indexAliases
init|=
name|aliases
operator|.
name|get
argument_list|(
name|aliasOrIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexAliases
operator|==
literal|null
operator|||
name|indexAliases
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|routing
return|;
block|}
if|if
condition|(
name|indexAliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Alias ["
operator|+
name|aliasOrIndex
operator|+
literal|"] has more than one index associated with it ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|indexAliases
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|+
literal|"], can't execute a single index op"
argument_list|)
throw|;
block|}
name|AliasMetaData
name|aliasMd
init|=
name|indexAliases
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|aliasMd
operator|.
name|indexRouting
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|routing
operator|.
name|equals
argument_list|(
name|aliasMd
operator|.
name|indexRouting
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Alias ["
operator|+
name|aliasOrIndex
operator|+
literal|"] has index routing associated with it ["
operator|+
name|aliasMd
operator|.
name|indexRouting
argument_list|()
operator|+
literal|"], and was provided with routing value ["
operator|+
name|routing
operator|+
literal|"], rejecting operation"
argument_list|)
throw|;
block|}
block|}
name|routing
operator|=
name|aliasMd
operator|.
name|indexRouting
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|routing
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"index/alias ["
operator|+
name|aliasOrIndex
operator|+
literal|"] provided with routing value ["
operator|+
name|routing
operator|+
literal|"] that resolved to several routing values, rejecting operation"
argument_list|)
throw|;
block|}
block|}
return|return
name|routing
return|;
block|}
DECL|method|resolveSearchRouting
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolveSearchRouting
parameter_list|(
annotation|@
name|Nullable
name|String
name|routing
parameter_list|,
name|String
name|aliasOrIndex
parameter_list|)
block|{
return|return
name|resolveSearchRouting
argument_list|(
name|routing
argument_list|,
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
name|aliasOrIndex
block|}
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|resolveSearchRouting
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolveSearchRouting
parameter_list|(
annotation|@
name|Nullable
name|String
name|routing
parameter_list|,
name|String
index|[]
name|aliasesOrIndices
parameter_list|)
block|{
if|if
condition|(
name|isAllIndices
argument_list|(
name|aliasesOrIndices
argument_list|)
condition|)
block|{
return|return
name|resolveSearchRoutingAllIndices
argument_list|(
name|routing
argument_list|)
return|;
block|}
name|aliasesOrIndices
operator|=
name|convertFromWildcards
argument_list|(
name|aliasesOrIndices
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|aliasesOrIndices
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|resolveSearchRoutingSingleValue
argument_list|(
name|routing
argument_list|,
name|aliasesOrIndices
index|[
literal|0
index|]
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|routings
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paramRouting
init|=
literal|null
decl_stmt|;
comment|// List of indices that don't require any routing
name|Set
argument_list|<
name|String
argument_list|>
name|norouting
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|paramRouting
operator|=
name|Strings
operator|.
name|splitStringByCommaToSet
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|aliasOrIndex
range|:
name|aliasesOrIndices
control|)
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|indexToRoutingMap
init|=
name|aliases
operator|.
name|get
argument_list|(
name|aliasOrIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexToRoutingMap
operator|!=
literal|null
operator|&&
operator|!
name|indexToRoutingMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|indexRouting
range|:
name|indexToRoutingMap
control|)
block|{
if|if
condition|(
operator|!
name|norouting
operator|.
name|contains
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|indexRouting
operator|.
name|value
operator|.
name|searchRoutingValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Routing alias
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
name|routings
operator|.
name|get
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|routings
operator|.
name|put
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|addAll
argument_list|(
name|indexRouting
operator|.
name|value
operator|.
name|searchRoutingValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|retainAll
argument_list|(
name|paramRouting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|routings
operator|.
name|remove
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Non-routing alias
if|if
condition|(
operator|!
name|norouting
operator|.
name|contains
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|)
condition|)
block|{
name|norouting
operator|.
name|add
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|paramRouting
argument_list|)
decl_stmt|;
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|routings
operator|!=
literal|null
condition|)
block|{
name|routings
operator|.
name|remove
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// Index
if|if
condition|(
operator|!
name|norouting
operator|.
name|contains
argument_list|(
name|aliasOrIndex
argument_list|)
condition|)
block|{
name|norouting
operator|.
name|add
argument_list|(
name|aliasOrIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|paramRouting
argument_list|)
decl_stmt|;
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|aliasOrIndex
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|routings
operator|!=
literal|null
condition|)
block|{
name|routings
operator|.
name|remove
argument_list|(
name|aliasOrIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|routings
operator|==
literal|null
operator|||
name|routings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|routings
return|;
block|}
DECL|method|resolveSearchRoutingSingleValue
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolveSearchRoutingSingleValue
parameter_list|(
annotation|@
name|Nullable
name|String
name|routing
parameter_list|,
name|String
name|aliasOrIndex
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|routings
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paramRouting
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|paramRouting
operator|=
name|Strings
operator|.
name|splitStringByCommaToSet
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|indexToRoutingMap
init|=
name|aliases
operator|.
name|get
argument_list|(
name|aliasOrIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexToRoutingMap
operator|!=
literal|null
operator|&&
operator|!
name|indexToRoutingMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// It's an alias
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|indexRouting
range|:
name|indexToRoutingMap
control|)
block|{
if|if
condition|(
operator|!
name|indexRouting
operator|.
name|value
operator|.
name|searchRoutingValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Routing alias
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|indexRouting
operator|.
name|value
operator|.
name|searchRoutingValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|retainAll
argument_list|(
name|paramRouting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Non-routing alias
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|paramRouting
argument_list|)
decl_stmt|;
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|indexRouting
operator|.
name|key
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// It's an index
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|routings
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|aliasOrIndex
argument_list|,
name|paramRouting
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|routings
return|;
block|}
comment|/**      * Sets the same routing for all indices      */
DECL|method|resolveSearchRoutingAllIndices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolveSearchRoutingAllIndices
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
name|Strings
operator|.
name|splitStringByCommaToSet
argument_list|(
name|routing
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|routings
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
name|concreteAllIndices
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
name|routings
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|routings
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Translates the provided indices or aliases, eventually containing wildcard expressions, into actual indices.      *      * @param indicesOptions   how the aliases or indices need to be resolved to concrete indices      * @param aliasesOrIndices the aliases or indices to be resolved to concrete indices      * @return the obtained concrete indices      * @throws IndexMissingException if one of the aliases or indices is missing and the provided indices options      * don't allow such a case, or if the final result of the indices resolution is no indices and the indices options      * don't allow such a case.      * @throws IllegalArgumentException if one of the aliases resolve to multiple indices and the provided      * indices options don't allow such a case.      */
DECL|method|concreteIndices
specifier|public
name|String
index|[]
name|concreteIndices
parameter_list|(
name|IndicesOptions
name|indicesOptions
parameter_list|,
name|String
modifier|...
name|aliasesOrIndices
parameter_list|)
throws|throws
name|IndexMissingException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
operator|||
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
if|if
condition|(
name|isAllIndices
argument_list|(
name|aliasesOrIndices
argument_list|)
condition|)
block|{
name|String
index|[]
name|concreteIndices
decl_stmt|;
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
operator|&&
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|concreteIndices
operator|=
name|concreteAllIndices
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
condition|)
block|{
name|concreteIndices
operator|=
name|concreteAllOpenIndices
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|concreteIndices
operator|=
name|concreteAllClosedIndices
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
operator|&&
name|concreteIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"_all"
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|concreteIndices
return|;
block|}
name|aliasesOrIndices
operator|=
name|convertFromWildcards
argument_list|(
name|aliasesOrIndices
argument_list|,
name|indicesOptions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aliasesOrIndices
operator|==
literal|null
operator|||
name|aliasesOrIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no indices were specified and wildcard expansion is disabled."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
block|}
name|boolean
name|failClosed
init|=
name|indicesOptions
operator|.
name|forbidClosedIndices
argument_list|()
operator|&&
operator|!
name|indicesOptions
operator|.
name|ignoreUnavailable
argument_list|()
decl_stmt|;
comment|// optimize for single element index (common case)
if|if
condition|(
name|aliasesOrIndices
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|concreteIndices
argument_list|(
name|aliasesOrIndices
index|[
literal|0
index|]
argument_list|,
name|indicesOptions
argument_list|,
operator|!
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
argument_list|)
return|;
block|}
comment|// check if its a possible aliased index, if not, just return the passed array
name|boolean
name|possiblyAliased
init|=
literal|false
decl_stmt|;
name|boolean
name|closedIndices
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|aliasesOrIndices
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
name|possiblyAliased
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|indicesOptions
operator|.
name|forbidClosedIndices
argument_list|()
operator|&&
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
if|if
condition|(
name|failClosed
condition|)
block|{
throw|throw
operator|new
name|IndexClosedException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|closedIndices
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|possiblyAliased
condition|)
block|{
if|if
condition|(
name|closedIndices
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|actualIndices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|aliasesOrIndices
argument_list|)
argument_list|)
decl_stmt|;
name|actualIndices
operator|.
name|retainAll
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|allOpenIndices
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|actualIndices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|actualIndices
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|aliasesOrIndices
return|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|actualIndices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|aliasOrIndex
range|:
name|aliasesOrIndices
control|)
block|{
name|String
index|[]
name|indices
init|=
name|concreteIndices
argument_list|(
name|aliasOrIndex
argument_list|,
name|indicesOptions
argument_list|,
operator|!
name|indicesOptions
operator|.
name|ignoreUnavailable
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|actualIndices
argument_list|,
name|indices
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
operator|&&
name|actualIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|aliasesOrIndices
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|actualIndices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|actualIndices
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Utility method that allows to resolve an index or alias to its corresponding single concrete index.      * Callers should make sure they provide proper {@link org.elasticsearch.action.support.IndicesOptions}      * that require a single index as a result. The indices resolution must in fact return a single index when      * using this method, an {@link IllegalArgumentException} gets thrown otherwise.      *      * @param indexOrAlias   the index or alias to be resolved to concrete index      * @param indicesOptions the indices options to be used for the index resolution      * @return the concrete index obtained as a result of the index resolution      * @throws IndexMissingException                 if the index or alias provided doesn't exist      * @throws IllegalArgumentException if the index resolution lead to more than one index      */
DECL|method|concreteSingleIndex
specifier|public
name|String
name|concreteSingleIndex
parameter_list|(
name|String
name|indexOrAlias
parameter_list|,
name|IndicesOptions
name|indicesOptions
parameter_list|)
throws|throws
name|IndexMissingException
throws|,
name|IllegalArgumentException
block|{
name|String
index|[]
name|indices
init|=
name|concreteIndices
argument_list|(
name|indicesOptions
argument_list|,
name|indexOrAlias
argument_list|)
decl_stmt|;
if|if
condition|(
name|indices
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to return a single index as the index and options provided got resolved to multiple indices"
argument_list|)
throw|;
block|}
return|return
name|indices
index|[
literal|0
index|]
return|;
block|}
DECL|method|concreteIndices
specifier|private
name|String
index|[]
name|concreteIndices
parameter_list|(
name|String
name|aliasOrIndex
parameter_list|,
name|IndicesOptions
name|options
parameter_list|,
name|boolean
name|failNoIndices
parameter_list|)
throws|throws
name|IndexMissingException
throws|,
name|IllegalArgumentException
block|{
name|boolean
name|failClosed
init|=
name|options
operator|.
name|forbidClosedIndices
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|ignoreUnavailable
argument_list|()
decl_stmt|;
comment|// a quick check, if this is an actual index, if so, return it
name|IndexMetaData
name|indexMetaData
init|=
name|indices
operator|.
name|get
argument_list|(
name|aliasOrIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
if|if
condition|(
name|failClosed
condition|)
block|{
throw|throw
operator|new
name|IndexClosedException
argument_list|(
operator|new
name|Index
argument_list|(
name|aliasOrIndex
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|options
operator|.
name|forbidClosedIndices
argument_list|()
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|aliasOrIndex
block|}
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
name|aliasOrIndex
block|}
return|;
block|}
block|}
comment|// not an actual index, fetch from an alias
name|String
index|[]
name|indices
init|=
name|aliasAndIndexToIndexMap
operator|.
name|getOrDefault
argument_list|(
name|aliasOrIndex
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|indices
operator|.
name|length
operator|==
literal|0
operator|&&
name|failNoIndices
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|aliasOrIndex
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|indices
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|options
operator|.
name|allowAliasesToMultipleIndices
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Alias ["
operator|+
name|aliasOrIndex
operator|+
literal|"] has more than one indices associated with it ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|indices
argument_list|)
operator|+
literal|"], can't execute a single index op"
argument_list|)
throw|;
block|}
comment|// No need to check whether indices referred by aliases are closed, because there are no closed indices.
if|if
condition|(
name|allClosedIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|indices
return|;
block|}
switch|switch
condition|(
name|indices
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
name|indices
return|;
case|case
literal|1
case|:
name|indexMetaData
operator|=
name|this
operator|.
name|indices
operator|.
name|get
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
operator|&&
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
if|if
condition|(
name|failClosed
condition|)
block|{
throw|throw
operator|new
name|IndexClosedException
argument_list|(
operator|new
name|Index
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|options
operator|.
name|forbidClosedIndices
argument_list|()
condition|)
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
block|}
block|}
return|return
name|indices
return|;
default|default:
name|ObjectArrayList
argument_list|<
name|String
argument_list|>
name|concreteIndices
init|=
operator|new
name|ObjectArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|indexMetaData
operator|=
name|this
operator|.
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
if|if
condition|(
name|failClosed
condition|)
block|{
throw|throw
operator|new
name|IndexClosedException
argument_list|(
operator|new
name|Index
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|options
operator|.
name|forbidClosedIndices
argument_list|()
condition|)
block|{
name|concreteIndices
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
condition|)
block|{
name|concreteIndices
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"index state ["
operator|+
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|concreteIndices
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
comment|/**      * Converts a list of indices or aliases wildcards, and special +/- signs, into their respective full matches. It      * won't convert only to indices, but also to aliases. For example, alias_* will expand to alias_1 and alias_2, not      * to the respective indices those aliases point to.      */
DECL|method|convertFromWildcards
specifier|public
name|String
index|[]
name|convertFromWildcards
parameter_list|(
name|String
index|[]
name|aliasesOrIndices
parameter_list|,
name|IndicesOptions
name|indicesOptions
parameter_list|)
block|{
if|if
condition|(
name|aliasesOrIndices
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aliasesOrIndices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|aliasOrIndex
init|=
name|aliasesOrIndices
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|aliasAndIndexToIndexMap
operator|.
name|containsKey
argument_list|(
name|aliasOrIndex
argument_list|)
condition|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|aliasOrIndex
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|aliasOrIndex
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'+'
condition|)
block|{
comment|// if its the first, add empty result set
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|result
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|add
operator|=
literal|true
expr_stmt|;
name|aliasOrIndex
operator|=
name|aliasOrIndex
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aliasOrIndex
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
comment|// if its the first, fill it with all the indices...
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|concreteIndices
decl_stmt|;
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
operator|&&
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|concreteIndices
operator|=
name|concreteAllIndices
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
condition|)
block|{
name|concreteIndices
operator|=
name|concreteAllOpenIndices
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|concreteIndices
operator|=
name|concreteAllClosedIndices
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"Shouldn't end up here"
assert|;
name|concreteIndices
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
name|result
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|concreteIndices
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|add
operator|=
literal|false
expr_stmt|;
name|aliasOrIndex
operator|=
name|aliasOrIndex
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|aliasOrIndex
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|indicesOptions
operator|.
name|ignoreUnavailable
argument_list|()
operator|&&
operator|!
name|aliasAndIndexToIndexMap
operator|.
name|containsKey
argument_list|(
name|aliasOrIndex
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|aliasOrIndex
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|add
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|aliasOrIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|remove
argument_list|(
name|aliasOrIndex
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|// add all the previous ones...
name|result
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|aliasesOrIndices
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|indices
decl_stmt|;
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
operator|&&
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|indices
operator|=
name|concreteAllIndices
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
condition|)
block|{
name|indices
operator|=
name|concreteAllOpenIndices
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|indices
operator|=
name|concreteAllClosedIndices
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"convertFromWildcards shouldn't get called if wildcards expansion is disabled"
assert|;
name|indices
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
comment|// iterating over all concrete indices and see if there is a wildcard match
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|aliasOrIndex
argument_list|,
name|index
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|add
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// iterating over all aliases and see if there is a wildcard match
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|cursor
range|:
name|aliases
operator|.
name|keys
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|cursor
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|aliasOrIndex
argument_list|,
name|alias
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|add
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|remove
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
operator|&&
operator|!
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|aliasOrIndex
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
name|aliasesOrIndices
return|;
block|}
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|aliasesOrIndices
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|hasIndex
specifier|public
name|boolean
name|hasIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|hasConcreteIndex
specifier|public
name|boolean
name|hasConcreteIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|aliasAndIndexToIndexMap
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|index
specifier|public
name|IndexMetaData
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|indices
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
parameter_list|()
block|{
return|return
name|this
operator|.
name|indices
return|;
block|}
DECL|method|getIndices
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|getIndices
parameter_list|()
block|{
return|return
name|indices
argument_list|()
return|;
block|}
DECL|method|templates
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|templates
parameter_list|()
block|{
return|return
name|this
operator|.
name|templates
return|;
block|}
DECL|method|getTemplates
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|getTemplates
parameter_list|()
block|{
return|return
name|this
operator|.
name|templates
return|;
block|}
DECL|method|customs
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|()
block|{
return|return
name|this
operator|.
name|customs
return|;
block|}
DECL|method|getCustoms
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|getCustoms
parameter_list|()
block|{
return|return
name|this
operator|.
name|customs
return|;
block|}
DECL|method|custom
specifier|public
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|T
name|custom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|customs
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|totalNumberOfShards
specifier|public
name|int
name|totalNumberOfShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalNumberOfShards
return|;
block|}
DECL|method|getTotalNumberOfShards
specifier|public
name|int
name|getTotalNumberOfShards
parameter_list|()
block|{
return|return
name|totalNumberOfShards
argument_list|()
return|;
block|}
DECL|method|numberOfShards
specifier|public
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|numberOfShards
return|;
block|}
DECL|method|getNumberOfShards
specifier|public
name|int
name|getNumberOfShards
parameter_list|()
block|{
return|return
name|numberOfShards
argument_list|()
return|;
block|}
comment|/**      * Iterates through the list of indices and selects the effective list of filtering aliases for the      * given index.      *<p/>      *<p>Only aliases with filters are returned. If the indices list contains a non-filtering reference to      * the index itself - null is returned. Returns<tt>null</tt> if no filtering is required.</p>      */
DECL|method|filteringAliases
specifier|public
name|String
index|[]
name|filteringAliases
parameter_list|(
name|String
name|index
parameter_list|,
name|String
modifier|...
name|indicesOrAliases
parameter_list|)
block|{
comment|// expand the aliases wildcard
name|indicesOrAliases
operator|=
name|convertFromWildcards
argument_list|(
name|indicesOrAliases
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAllIndices
argument_list|(
name|indicesOrAliases
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// optimize for the most common single index/alias scenario
if|if
condition|(
name|indicesOrAliases
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|alias
init|=
name|indicesOrAliases
index|[
literal|0
index|]
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|this
operator|.
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
comment|// Shouldn't happen
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
name|AliasMetaData
name|aliasMetaData
init|=
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|boolean
name|filteringRequired
init|=
name|aliasMetaData
operator|!=
literal|null
operator|&&
name|aliasMetaData
operator|.
name|filteringRequired
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filteringRequired
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|alias
block|}
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|filteringAliases
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|indicesOrAliases
control|)
block|{
if|if
condition|(
name|alias
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|IndexMetaData
name|indexMetaData
init|=
name|this
operator|.
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
comment|// Shouldn't happen
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
name|AliasMetaData
name|aliasMetaData
init|=
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|// Check that this is an alias for the current index
comment|// Otherwise - skip it
if|if
condition|(
name|aliasMetaData
operator|!=
literal|null
condition|)
block|{
name|boolean
name|filteringRequired
init|=
name|aliasMetaData
operator|.
name|filteringRequired
argument_list|()
decl_stmt|;
if|if
condition|(
name|filteringRequired
condition|)
block|{
comment|// If filtering required - add it to the list of filters
if|if
condition|(
name|filteringAliases
operator|==
literal|null
condition|)
block|{
name|filteringAliases
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|filteringAliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If not, we have a non filtering alias for this index - no filtering needed
return|return
literal|null
return|;
block|}
block|}
block|}
if|if
condition|(
name|filteringAliases
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|filteringAliases
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filteringAliases
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Identifies whether the array containing index names given as argument refers to all indices      * The empty or null array identifies all indices      *      * @param aliasesOrIndices the array containing index names      * @return true if the provided array maps to all indices, false otherwise      */
DECL|method|isAllIndices
specifier|public
specifier|static
name|boolean
name|isAllIndices
parameter_list|(
name|String
index|[]
name|aliasesOrIndices
parameter_list|)
block|{
return|return
name|aliasesOrIndices
operator|==
literal|null
operator|||
name|aliasesOrIndices
operator|.
name|length
operator|==
literal|0
operator|||
name|isExplicitAllPattern
argument_list|(
name|aliasesOrIndices
argument_list|)
return|;
block|}
comment|/**      * Identifies whether the array containing type names given as argument refers to all types      * The empty or null array identifies all types      *      * @param types the array containing index names      * @return true if the provided array maps to all indices, false otherwise      */
DECL|method|isAllTypes
specifier|public
specifier|static
name|boolean
name|isAllTypes
parameter_list|(
name|String
index|[]
name|types
parameter_list|)
block|{
return|return
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
operator|||
name|isExplicitAllPattern
argument_list|(
name|types
argument_list|)
return|;
block|}
comment|/**      * Identifies whether the array containing index names given as argument explicitly refers to all indices      * The empty or null array doesn't explicitly map to all indices      *      * @param aliasesOrIndices the array containing index names      * @return true if the provided array explicitly maps to all indices, false otherwise      */
DECL|method|isExplicitAllPattern
specifier|public
specifier|static
name|boolean
name|isExplicitAllPattern
parameter_list|(
name|String
index|[]
name|aliasesOrIndices
parameter_list|)
block|{
return|return
name|aliasesOrIndices
operator|!=
literal|null
operator|&&
name|aliasesOrIndices
operator|.
name|length
operator|==
literal|1
operator|&&
name|ALL
operator|.
name|equals
argument_list|(
name|aliasesOrIndices
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**      * Identifies whether the first argument (an array containing index names) is a pattern that matches all indices      *      * @param indicesOrAliases the array containing index names      * @param concreteIndices  array containing the concrete indices that the first argument refers to      * @return true if the first argument is a pattern that maps to all available indices, false otherwise      */
DECL|method|isPatternMatchingAllIndices
specifier|public
name|boolean
name|isPatternMatchingAllIndices
parameter_list|(
name|String
index|[]
name|indicesOrAliases
parameter_list|,
name|String
index|[]
name|concreteIndices
parameter_list|)
block|{
comment|// if we end up matching on all indices, check, if its a wildcard parameter, or a "-something" structure
if|if
condition|(
name|concreteIndices
operator|.
name|length
operator|==
name|concreteAllIndices
argument_list|()
operator|.
name|length
operator|&&
name|indicesOrAliases
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|//we might have something like /-test1,+test1 that would identify all indices
comment|//or something like /-test1 with test1 index missing and IndicesOptions.lenient()
if|if
condition|(
name|indicesOrAliases
index|[
literal|0
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//otherwise we check if there's any simple regex
for|for
control|(
name|String
name|indexOrAlias
range|:
name|indicesOrAliases
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|indexOrAlias
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * @param concreteIndex The concrete index to check if routing is required      * @param type          The type to check if routing is required      * @return Whether routing is required according to the mapping for the specified index and type      */
DECL|method|routingRequired
specifier|public
name|boolean
name|routingRequired
parameter_list|(
name|String
name|concreteIndex
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|indices
operator|.
name|get
argument_list|(
name|concreteIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
name|MappingMetaData
name|mappingMetaData
init|=
name|indexMetaData
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingMetaData
operator|!=
literal|null
condition|)
block|{
return|return
name|mappingMetaData
operator|.
name|routing
argument_list|()
operator|.
name|required
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|UnmodifiableIterator
argument_list|<
name|IndexMetaData
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|indices
operator|.
name|valuesIt
argument_list|()
return|;
block|}
DECL|method|isGlobalStateEquals
specifier|public
specifier|static
name|boolean
name|isGlobalStateEquals
parameter_list|(
name|MetaData
name|metaData1
parameter_list|,
name|MetaData
name|metaData2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|metaData1
operator|.
name|persistentSettings
operator|.
name|equals
argument_list|(
name|metaData2
operator|.
name|persistentSettings
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|metaData1
operator|.
name|templates
operator|.
name|equals
argument_list|(
name|metaData2
operator|.
name|templates
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check if any persistent metadata needs to be saved
name|int
name|customCount1
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|metaData1
operator|.
name|customs
control|)
block|{
if|if
condition|(
name|customPrototypes
operator|.
name|get
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
operator|.
name|context
argument_list|()
operator|.
name|contains
argument_list|(
name|XContentContext
operator|.
name|GATEWAY
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|cursor
operator|.
name|value
operator|.
name|equals
argument_list|(
name|metaData2
operator|.
name|custom
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|customCount1
operator|++
expr_stmt|;
block|}
block|}
name|int
name|customCount2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|metaData2
operator|.
name|customs
control|)
block|{
if|if
condition|(
name|customPrototypes
operator|.
name|get
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
operator|.
name|context
argument_list|()
operator|.
name|contains
argument_list|(
name|XContentContext
operator|.
name|GATEWAY
argument_list|)
condition|)
block|{
name|customCount2
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|customCount1
operator|!=
name|customCount2
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|diff
specifier|public
name|Diff
argument_list|<
name|MetaData
argument_list|>
name|diff
parameter_list|(
name|MetaData
name|previousState
parameter_list|)
block|{
return|return
operator|new
name|MetaDataDiff
argument_list|(
name|previousState
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readDiffFrom
specifier|public
name|Diff
argument_list|<
name|MetaData
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MetaDataDiff
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|class|MetaDataDiff
specifier|private
specifier|static
class|class
name|MetaDataDiff
implements|implements
name|Diff
argument_list|<
name|MetaData
argument_list|>
block|{
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|uuid
specifier|private
name|String
name|uuid
decl_stmt|;
DECL|field|transientSettings
specifier|private
name|Settings
name|transientSettings
decl_stmt|;
DECL|field|persistentSettings
specifier|private
name|Settings
name|persistentSettings
decl_stmt|;
DECL|field|indices
specifier|private
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
argument_list|>
name|indices
decl_stmt|;
DECL|field|templates
specifier|private
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
argument_list|>
name|templates
decl_stmt|;
DECL|field|customs
specifier|private
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
argument_list|>
name|customs
decl_stmt|;
DECL|method|MetaDataDiff
specifier|public
name|MetaDataDiff
parameter_list|(
name|MetaData
name|before
parameter_list|,
name|MetaData
name|after
parameter_list|)
block|{
name|uuid
operator|=
name|after
operator|.
name|uuid
expr_stmt|;
name|version
operator|=
name|after
operator|.
name|version
expr_stmt|;
name|transientSettings
operator|=
name|after
operator|.
name|transientSettings
expr_stmt|;
name|persistentSettings
operator|=
name|after
operator|.
name|persistentSettings
expr_stmt|;
name|indices
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|indices
argument_list|,
name|after
operator|.
name|indices
argument_list|)
expr_stmt|;
name|templates
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|templates
argument_list|,
name|after
operator|.
name|templates
argument_list|)
expr_stmt|;
name|customs
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|customs
argument_list|,
name|after
operator|.
name|customs
argument_list|)
expr_stmt|;
block|}
DECL|method|MetaDataDiff
specifier|public
name|MetaDataDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|uuid
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|transientSettings
operator|=
name|Settings
operator|.
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|persistentSettings
operator|=
name|Settings
operator|.
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|indices
operator|=
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|IndexMetaData
operator|.
name|PROTO
argument_list|)
expr_stmt|;
name|templates
operator|=
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|IndexTemplateMetaData
operator|.
name|PROTO
argument_list|)
expr_stmt|;
name|customs
operator|=
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
operator|new
name|KeyedReader
argument_list|<
name|Custom
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Custom
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|lookupPrototypeSafe
argument_list|(
name|key
argument_list|)
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Diff
argument_list|<
name|Custom
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|lookupPrototypeSafe
argument_list|(
name|key
argument_list|)
operator|.
name|readDiffFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|Settings
operator|.
name|writeSettingsToStream
argument_list|(
name|transientSettings
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|Settings
operator|.
name|writeSettingsToStream
argument_list|(
name|persistentSettings
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|indices
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|templates
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|customs
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|MetaData
name|apply
parameter_list|(
name|MetaData
name|part
parameter_list|)
block|{
name|Builder
name|builder
init|=
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|uuid
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|builder
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|transientSettings
argument_list|(
name|transientSettings
argument_list|)
expr_stmt|;
name|builder
operator|.
name|persistentSettings
argument_list|(
name|persistentSettings
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indices
argument_list|(
name|indices
operator|.
name|apply
argument_list|(
name|part
operator|.
name|indices
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|templates
argument_list|(
name|templates
operator|.
name|apply
argument_list|(
name|part
operator|.
name|templates
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|customs
argument_list|(
name|customs
operator|.
name|apply
argument_list|(
name|part
operator|.
name|customs
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|MetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|builder
operator|.
name|uuid
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|builder
operator|.
name|transientSettings
argument_list|(
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|persistentSettings
argument_list|(
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexTemplateMetaData
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|customSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|customSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|Custom
name|customIndexMetaData
init|=
name|lookupPrototypeSafe
argument_list|(
name|type
argument_list|)
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putCustom
argument_list|(
name|type
argument_list|,
name|customIndexMetaData
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|writeSettingsToStream
argument_list|(
name|transientSettings
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|writeSettingsToStream
argument_list|(
name|persistentSettings
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|indices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|this
control|)
block|{
name|indexMetaData
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|templates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|cursor
range|:
name|templates
operator|.
name|values
argument_list|()
control|)
block|{
name|cursor
operator|.
name|value
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|customs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|customs
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|value
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|metaData
argument_list|)
return|;
block|}
comment|/** All known byte-sized cluster settings. */
DECL|field|CLUSTER_BYTES_SIZE_SETTINGS
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|CLUSTER_BYTES_SIZE_SETTINGS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|IndicesStore
operator|.
name|INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC
argument_list|,
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_FILE_CHUNK_SIZE
argument_list|,
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_TRANSLOG_SIZE
argument_list|,
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_MAX_BYTES_PER_SEC
argument_list|,
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_MAX_SIZE_PER_SEC
argument_list|)
decl_stmt|;
comment|/** All known time cluster settings. */
DECL|field|CLUSTER_TIME_SETTINGS
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|CLUSTER_TIME_SETTINGS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|IndicesTTLService
operator|.
name|INDICES_TTL_INTERVAL
argument_list|,
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_RETRY_DELAY_STATE_SYNC
argument_list|,
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_RETRY_DELAY_NETWORK
argument_list|,
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_ACTIVITY_TIMEOUT
argument_list|,
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT
argument_list|,
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_INTERNAL_LONG_ACTION_TIMEOUT
argument_list|,
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL
argument_list|,
name|InternalClusterInfoService
operator|.
name|INTERNAL_CLUSTER_INFO_UPDATE_INTERVAL
argument_list|,
name|InternalClusterInfoService
operator|.
name|INTERNAL_CLUSTER_INFO_TIMEOUT
argument_list|,
name|DiscoverySettings
operator|.
name|PUBLISH_TIMEOUT
argument_list|,
name|InternalClusterService
operator|.
name|SETTING_CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD
argument_list|)
decl_stmt|;
comment|/** As of 2.0 we require units for time and byte-sized settings.  This methods adds default units to any cluster settings that don't      *  specify a unit. */
DECL|method|addDefaultUnitsIfNeeded
specifier|public
specifier|static
name|MetaData
name|addDefaultUnitsIfNeeded
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
name|Settings
operator|.
name|Builder
name|newPersistentSettings
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ent
range|:
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|settingName
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|settingValue
init|=
name|ent
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|CLUSTER_BYTES_SIZE_SETTINGS
operator|.
name|contains
argument_list|(
name|settingName
argument_list|)
condition|)
block|{
try|try
block|{
name|Long
operator|.
name|parseLong
argument_list|(
name|settingValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
continue|continue;
block|}
comment|// It's a naked number that previously would be interpreted as default unit (bytes); now we add it:
name|logger
operator|.
name|warn
argument_list|(
literal|"byte-sized cluster setting [{}] with value [{}] is missing units; now adding default units (b)"
argument_list|,
name|settingName
argument_list|,
name|settingValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|newPersistentSettings
operator|==
literal|null
condition|)
block|{
name|newPersistentSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
expr_stmt|;
name|newPersistentSettings
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|persistentSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newPersistentSettings
operator|.
name|put
argument_list|(
name|settingName
argument_list|,
name|settingValue
operator|+
literal|"b"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CLUSTER_TIME_SETTINGS
operator|.
name|contains
argument_list|(
name|settingName
argument_list|)
condition|)
block|{
try|try
block|{
name|Long
operator|.
name|parseLong
argument_list|(
name|settingValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
continue|continue;
block|}
comment|// It's a naked number that previously would be interpreted as default unit (ms); now we add it:
name|logger
operator|.
name|warn
argument_list|(
literal|"time cluster setting [{}] with value [{}] is missing units; now adding default units (ms)"
argument_list|,
name|settingName
argument_list|,
name|settingValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|newPersistentSettings
operator|==
literal|null
condition|)
block|{
name|newPersistentSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
expr_stmt|;
name|newPersistentSettings
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|persistentSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newPersistentSettings
operator|.
name|put
argument_list|(
name|settingName
argument_list|,
name|settingValue
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newPersistentSettings
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|MetaData
argument_list|(
name|metaData
operator|.
name|uuid
argument_list|()
argument_list|,
name|metaData
operator|.
name|version
argument_list|()
argument_list|,
name|metaData
operator|.
name|transientSettings
argument_list|()
argument_list|,
name|newPersistentSettings
operator|.
name|build
argument_list|()
argument_list|,
name|metaData
operator|.
name|getIndices
argument_list|()
argument_list|,
name|metaData
operator|.
name|getTemplates
argument_list|()
argument_list|,
name|metaData
operator|.
name|getCustoms
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// No changes:
return|return
name|metaData
return|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|uuid
specifier|private
name|String
name|uuid
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|transientSettings
specifier|private
name|Settings
name|transientSettings
init|=
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
decl_stmt|;
DECL|field|persistentSettings
specifier|private
name|Settings
name|persistentSettings
init|=
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
decl_stmt|;
DECL|field|templates
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|templates
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|()
block|{
name|uuid
operator|=
literal|"_na_"
expr_stmt|;
name|indices
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
name|templates
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|metaData
operator|.
name|uuid
expr_stmt|;
name|this
operator|.
name|transientSettings
operator|=
name|metaData
operator|.
name|transientSettings
expr_stmt|;
name|this
operator|.
name|persistentSettings
operator|=
name|metaData
operator|.
name|persistentSettings
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|metaData
operator|.
name|version
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|metaData
operator|.
name|indices
argument_list|)
expr_stmt|;
name|this
operator|.
name|templates
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|metaData
operator|.
name|templates
argument_list|)
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|metaData
operator|.
name|customs
argument_list|)
expr_stmt|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
parameter_list|)
block|{
comment|// we know its a new one, increment the version and store
name|indexMetaDataBuilder
operator|.
name|version
argument_list|(
name|indexMetaDataBuilder
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|indexMetaDataBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|indices
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|boolean
name|incrementVersion
parameter_list|)
block|{
if|if
condition|(
name|indices
operator|.
name|get
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
operator|==
name|indexMetaData
condition|)
block|{
return|return
name|this
return|;
block|}
comment|// if we put a new index metadata, increment its version
if|if
condition|(
name|incrementVersion
condition|)
block|{
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|version
argument_list|(
name|indexMetaData
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|indices
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|get
specifier|public
name|IndexMetaData
name|get
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|remove
specifier|public
name|Builder
name|remove
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|indices
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeAllIndices
specifier|public
name|Builder
name|removeAllIndices
parameter_list|()
block|{
name|indices
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|indices
specifier|public
name|Builder
name|indices
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|.
name|putAll
argument_list|(
name|indices
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexTemplateMetaData
operator|.
name|Builder
name|template
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|template
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|IndexTemplateMetaData
name|template
parameter_list|)
block|{
name|templates
operator|.
name|put
argument_list|(
name|template
operator|.
name|name
argument_list|()
argument_list|,
name|template
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeTemplate
specifier|public
name|Builder
name|removeTemplate
parameter_list|(
name|String
name|templateName
parameter_list|)
block|{
name|templates
operator|.
name|remove
argument_list|(
name|templateName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|templates
specifier|public
name|Builder
name|templates
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|templates
parameter_list|)
block|{
name|this
operator|.
name|templates
operator|.
name|putAll
argument_list|(
name|templates
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCustom
specifier|public
name|Custom
name|getCustom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|customs
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|putCustom
specifier|public
name|Builder
name|putCustom
parameter_list|(
name|String
name|type
parameter_list|,
name|Custom
name|custom
parameter_list|)
block|{
name|customs
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|custom
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeCustom
specifier|public
name|Builder
name|removeCustom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|customs
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|customs
specifier|public
name|Builder
name|customs
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|)
block|{
name|this
operator|.
name|customs
operator|.
name|putAll
argument_list|(
name|customs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|updateSettings
specifier|public
name|Builder
name|updateSettings
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
modifier|...
name|indices
parameter_list|)
block|{
if|if
condition|(
name|indices
operator|==
literal|null
operator|||
name|indices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|indices
operator|=
name|this
operator|.
name|indices
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|this
operator|.
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|settings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|settings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|updateNumberOfReplicas
specifier|public
name|Builder
name|updateNumberOfReplicas
parameter_list|(
name|int
name|numberOfReplicas
parameter_list|,
name|String
modifier|...
name|indices
parameter_list|)
block|{
if|if
condition|(
name|indices
operator|==
literal|null
operator|||
name|indices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|indices
operator|=
name|this
operator|.
name|indices
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|this
operator|.
name|indices
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numberOfReplicas
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|transientSettings
specifier|public
name|Settings
name|transientSettings
parameter_list|()
block|{
return|return
name|this
operator|.
name|transientSettings
return|;
block|}
DECL|method|transientSettings
specifier|public
name|Builder
name|transientSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|transientSettings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|persistentSettings
specifier|public
name|Settings
name|persistentSettings
parameter_list|()
block|{
return|return
name|this
operator|.
name|persistentSettings
return|;
block|}
DECL|method|persistentSettings
specifier|public
name|Builder
name|persistentSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|persistentSettings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|Builder
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|uuid
specifier|public
name|Builder
name|uuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|generateUuidIfNeeded
specifier|public
name|Builder
name|generateUuidIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|uuid
operator|.
name|equals
argument_list|(
literal|"_na_"
argument_list|)
condition|)
block|{
name|uuid
operator|=
name|Strings
operator|.
name|randomBase64UUID
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|MetaData
name|build
parameter_list|()
block|{
return|return
operator|new
name|MetaData
argument_list|(
name|uuid
argument_list|,
name|version
argument_list|,
name|transientSettings
argument_list|,
name|persistentSettings
argument_list|,
name|indices
operator|.
name|build
argument_list|()
argument_list|,
name|templates
operator|.
name|build
argument_list|()
argument_list|,
name|customs
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toXContent
specifier|public
specifier|static
name|String
name|toXContent
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|metaData
argument_list|,
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
DECL|method|toXContent
specifier|public
specifier|static
name|void
name|toXContent
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentContext
name|context
init|=
name|XContentContext
operator|.
name|valueOf
argument_list|(
name|params
operator|.
name|param
argument_list|(
name|CONTEXT_MODE_PARAM
argument_list|,
literal|"API"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"meta-data"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"version"
argument_list|,
name|metaData
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"uuid"
argument_list|,
name|metaData
operator|.
name|uuid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|==
name|XContentContext
operator|.
name|API
operator|&&
operator|!
name|metaData
operator|.
name|transientSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"transient_settings"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metaData
operator|.
name|transientSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
literal|"templates"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|templates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexTemplateMetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|==
name|XContentContext
operator|.
name|API
operator|&&
operator|!
name|metaData
operator|.
name|indices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
control|)
block|{
name|IndexMetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|indexMetaData
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|customs
argument_list|()
control|)
block|{
name|Custom
name|proto
init|=
name|lookupPrototypeSafe
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|context
argument_list|()
operator|.
name|contains
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|value
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|MetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
comment|// we might get here after the meta-data element, or on a fresh parser
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"meta-data"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
comment|// move to the field name (meta-data)
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// move to the next object
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
comment|// no data...
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
literal|"settings"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|persistentSettings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SettingsLoader
operator|.
name|Helper
operator|.
name|loadNestedFromMap
argument_list|(
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"indices"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"templates"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexTemplateMetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// check if its a custom index metadata
name|Custom
name|proto
init|=
name|lookupPrototype
argument_list|(
name|currentFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
block|{
comment|//TODO warn
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Custom
name|custom
init|=
name|proto
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putCustom
argument_list|(
name|custom
operator|.
name|type
argument_list|()
argument_list|,
name|custom
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|version
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"uuid"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|uuid
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|MetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PROTO
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

