begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexClusterStateUpdateRequest
import|;
end_import

begin_comment
comment|/**  * Enables filtering the index templates that will be applied for an index, per create index request.  */
end_comment

begin_interface
DECL|interface|IndexTemplateFilter
specifier|public
interface|interface
name|IndexTemplateFilter
block|{
comment|/**      * @return  {@code true} if the given template should be applied on the newly created index,      *          {@code false} otherwise.      */
DECL|method|apply
name|boolean
name|apply
parameter_list|(
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
name|IndexTemplateMetaData
name|template
parameter_list|)
function_decl|;
DECL|class|Compound
specifier|static
class|class
name|Compound
implements|implements
name|IndexTemplateFilter
block|{
DECL|field|filters
specifier|private
name|IndexTemplateFilter
index|[]
name|filters
decl_stmt|;
DECL|method|Compound
name|Compound
parameter_list|(
name|IndexTemplateFilter
modifier|...
name|filters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|filters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|boolean
name|apply
parameter_list|(
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
name|IndexTemplateMetaData
name|template
parameter_list|)
block|{
for|for
control|(
name|IndexTemplateFilter
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|apply
argument_list|(
name|request
argument_list|,
name|template
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_interface

end_unit

