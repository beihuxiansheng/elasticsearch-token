begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexClusterStateUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AckedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ack
operator|.
name|ClusterStateUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParserService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|RiverIndexName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_comment
comment|/**  * Service responsible for submitting create index requests  */
end_comment

begin_class
DECL|class|MetaDataCreateIndexService
specifier|public
class|class
name|MetaDataCreateIndexService
extends|extends
name|AbstractComponent
block|{
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
DECL|field|metaDataService
specifier|private
specifier|final
name|MetaDataService
name|metaDataService
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|Version
name|version
decl_stmt|;
DECL|field|riverIndexName
specifier|private
specifier|final
name|String
name|riverIndexName
decl_stmt|;
DECL|field|aliasValidator
specifier|private
specifier|final
name|AliasValidator
name|aliasValidator
decl_stmt|;
annotation|@
name|Inject
DECL|method|MetaDataCreateIndexService
specifier|public
name|MetaDataCreateIndexService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|AllocationService
name|allocationService
parameter_list|,
name|MetaDataService
name|metaDataService
parameter_list|,
name|Version
name|version
parameter_list|,
annotation|@
name|RiverIndexName
name|String
name|riverIndexName
parameter_list|,
name|AliasValidator
name|aliasValidator
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
name|this
operator|.
name|metaDataService
operator|=
name|metaDataService
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|riverIndexName
operator|=
name|riverIndexName
expr_stmt|;
name|this
operator|.
name|aliasValidator
operator|=
name|aliasValidator
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
name|void
name|createIndex
parameter_list|(
specifier|final
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|ImmutableSettings
operator|.
name|Builder
name|updatedSettingsBuilder
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|request
operator|.
name|settings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"index."
argument_list|)
condition|)
block|{
name|updatedSettingsBuilder
operator|.
name|put
argument_list|(
literal|"index."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updatedSettingsBuilder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|settings
argument_list|(
name|updatedSettingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// we lock here, and not within the cluster service callback since we don't want to
comment|// block the whole cluster state handling
specifier|final
name|Semaphore
name|mdLock
init|=
name|metaDataService
operator|.
name|indexMetaDataLock
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
comment|// quick check to see if we can acquire a lock, otherwise spawn to a thread pool
if|if
condition|(
name|mdLock
operator|.
name|tryAcquire
argument_list|()
condition|)
block|{
name|createIndex
argument_list|(
name|request
argument_list|,
name|listener
argument_list|,
name|mdLock
argument_list|)
expr_stmt|;
return|return;
block|}
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|MANAGEMENT
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|mdLock
operator|.
name|tryAcquire
argument_list|(
name|request
operator|.
name|masterNodeTimeout
argument_list|()
operator|.
name|nanos
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|ProcessClusterEventTimeoutException
argument_list|(
name|request
operator|.
name|masterNodeTimeout
argument_list|()
argument_list|,
literal|"acquire index lock"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|createIndex
argument_list|(
name|request
argument_list|,
name|listener
argument_list|,
name|mdLock
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|validateIndexName
specifier|public
name|void
name|validateIndexName
parameter_list|(
name|String
name|index
parameter_list|,
name|ClusterState
name|state
parameter_list|)
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexAlreadyExistsException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexAlreadyExistsException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|validFileName
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
argument_list|,
literal|"must not contain the following characters "
operator|+
name|Strings
operator|.
name|INVALID_FILENAME_CHARS
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
argument_list|,
literal|"must not contain '#'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|index
operator|.
name|equals
argument_list|(
name|riverIndexName
argument_list|)
operator|&&
name|index
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
argument_list|,
literal|"must not start with '_'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|index
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
argument_list|,
literal|"must be lowercase"
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|aliases
argument_list|()
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
argument_list|,
literal|"already exists as alias"
argument_list|)
throw|;
block|}
block|}
DECL|method|createIndex
specifier|private
name|void
name|createIndex
parameter_list|(
specifier|final
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
name|listener
parameter_list|,
specifier|final
name|Semaphore
name|mdLock
parameter_list|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"create-index ["
operator|+
name|request
operator|.
name|index
argument_list|()
operator|+
literal|"], cause ["
operator|+
name|request
operator|.
name|cause
argument_list|()
operator|+
literal|"]"
argument_list|,
name|Priority
operator|.
name|URGENT
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClusterStateUpdateResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|ClusterStateUpdateResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAllNodesAcked
parameter_list|(
annotation|@
name|Nullable
name|Throwable
name|t
parameter_list|)
block|{
name|mdLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|super
operator|.
name|onAllNodesAcked
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAckTimeout
parameter_list|()
block|{
name|mdLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|super
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|mdLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|source
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|indexCreated
init|=
literal|false
decl_stmt|;
name|String
name|failureReason
init|=
literal|null
decl_stmt|;
try|try
block|{
name|validate
argument_list|(
name|request
argument_list|,
name|currentState
argument_list|)
expr_stmt|;
for|for
control|(
name|Alias
name|alias
range|:
name|request
operator|.
name|aliases
argument_list|()
control|)
block|{
name|aliasValidator
operator|.
name|validateAlias
argument_list|(
name|alias
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we only find a template when its an API call (a new index)
comment|// find templates, highest order are better matching
name|List
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|templates
init|=
name|findTemplates
argument_list|(
name|request
argument_list|,
name|currentState
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// add the request mapping
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mappings
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|templatesAliases
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|request
operator|.
name|mappings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|parseMapping
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|entry
range|:
name|request
operator|.
name|customs
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|customs
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// apply templates, merging the mappings into the request mapping if exists
for|for
control|(
name|IndexTemplateMetaData
name|template
range|:
name|templates
control|)
block|{
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|cursor
range|:
name|template
operator|.
name|mappings
argument_list|()
control|)
block|{
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
condition|)
block|{
name|XContentHelper
operator|.
name|mergeDefaults
argument_list|(
name|mappings
operator|.
name|get
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
argument_list|,
name|parseMapping
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappings
operator|.
name|put
argument_list|(
name|cursor
operator|.
name|key
argument_list|,
name|parseMapping
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// handle custom
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|template
operator|.
name|customs
argument_list|()
control|)
block|{
name|String
name|type
init|=
name|cursor
operator|.
name|key
decl_stmt|;
name|IndexMetaData
operator|.
name|Custom
name|custom
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|IndexMetaData
operator|.
name|Custom
name|existing
init|=
name|customs
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|customs
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|custom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IndexMetaData
operator|.
name|Custom
name|merged
init|=
name|IndexMetaData
operator|.
name|lookupFactorySafe
argument_list|(
name|type
argument_list|)
operator|.
name|merge
argument_list|(
name|existing
argument_list|,
name|custom
argument_list|)
decl_stmt|;
name|customs
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
block|}
comment|//handle aliases
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|cursor
range|:
name|template
operator|.
name|aliases
argument_list|()
control|)
block|{
name|AliasMetaData
name|aliasMetaData
init|=
name|cursor
operator|.
name|value
decl_stmt|;
comment|//if an alias with same name came with the create index request itself,
comment|// ignore this one taken from the index template
if|if
condition|(
name|request
operator|.
name|aliases
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|Alias
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//if an alias with same name was already processed, ignore this one
if|if
condition|(
name|templatesAliases
operator|.
name|containsKey
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//Allow templatesAliases to be templated by replacing a token with the name of the index that we are applying it to
if|if
condition|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
operator|.
name|contains
argument_list|(
literal|"{index}"
argument_list|)
condition|)
block|{
name|String
name|templatedAlias
init|=
name|aliasMetaData
operator|.
name|alias
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{index}"
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|aliasMetaData
operator|=
name|AliasMetaData
operator|.
name|newAliasMetaData
argument_list|(
name|aliasMetaData
argument_list|,
name|templatedAlias
argument_list|)
expr_stmt|;
block|}
name|aliasValidator
operator|.
name|validateAliasMetaData
argument_list|(
name|aliasMetaData
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
expr_stmt|;
name|templatesAliases
operator|.
name|put
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
name|aliasMetaData
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now add config level mappings
name|File
name|mappingsDir
init|=
operator|new
name|File
argument_list|(
name|environment
operator|.
name|configFile
argument_list|()
argument_list|,
literal|"mappings"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingsDir
operator|.
name|exists
argument_list|()
operator|&&
name|mappingsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// first index level
name|File
name|indexMappingsDir
init|=
operator|new
name|File
argument_list|(
name|mappingsDir
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMappingsDir
operator|.
name|exists
argument_list|()
operator|&&
name|indexMappingsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addMappings
argument_list|(
name|mappings
argument_list|,
name|indexMappingsDir
argument_list|)
expr_stmt|;
block|}
comment|// second is the _default mapping
name|File
name|defaultMappingsDir
init|=
operator|new
name|File
argument_list|(
name|mappingsDir
argument_list|,
literal|"_default"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultMappingsDir
operator|.
name|exists
argument_list|()
operator|&&
name|defaultMappingsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addMappings
argument_list|(
name|mappings
argument_list|,
name|defaultMappingsDir
argument_list|)
expr_stmt|;
block|}
block|}
name|ImmutableSettings
operator|.
name|Builder
name|indexSettingsBuilder
init|=
name|settingsBuilder
argument_list|()
decl_stmt|;
comment|// apply templates, here, in reverse order, since first ones are better matching
for|for
control|(
name|int
name|i
init|=
name|templates
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|templates
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now, put the request settings, so they override templates
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|request
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|index
argument_list|()
operator|.
name|equals
argument_list|(
name|riverIndexName
argument_list|)
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|index
argument_list|()
operator|.
name|equals
argument_list|(
name|riverIndexName
argument_list|)
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|settings
operator|.
name|get
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|)
operator|!=
literal|null
operator|&&
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_VERSION_CREATED
argument_list|)
operator|==
literal|null
condition|)
block|{
name|DiscoveryNodes
name|nodes
init|=
name|currentState
operator|.
name|nodes
argument_list|()
decl_stmt|;
specifier|final
name|Version
name|createdVersion
init|=
name|Version
operator|.
name|smallest
argument_list|(
name|version
argument_list|,
name|nodes
operator|.
name|smallestNonClientNodeVersion
argument_list|()
argument_list|)
decl_stmt|;
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_VERSION_CREATED
argument_list|,
name|createdVersion
argument_list|)
expr_stmt|;
block|}
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_UUID
argument_list|,
name|Strings
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
expr_stmt|;
name|Settings
name|actualIndexSettings
init|=
name|indexSettingsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Set up everything, now locally create the index to see that things are ok, and apply
comment|// create the index here (on the master) to validate it can be created, as well as adding the mapping
name|indicesService
operator|.
name|createIndex
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|actualIndexSettings
argument_list|,
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|indexCreated
operator|=
literal|true
expr_stmt|;
comment|// now add the mappings
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
decl_stmt|;
comment|// first, add the default mapping
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
condition|)
block|{
try|try
block|{
name|mapperService
operator|.
name|merge
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|,
operator|new
name|CompressedString
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|map
argument_list|(
name|mappings
operator|.
name|get
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failureReason
operator|=
literal|"failed on parsing default mapping on index creation"
expr_stmt|;
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"mapping ["
operator|+
name|MapperService
operator|.
name|DEFAULT_MAPPING
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
comment|// apply the default here, its the first time we parse it
name|mapperService
operator|.
name|merge
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|CompressedString
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|map
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failureReason
operator|=
literal|"failed on parsing mappings on index creation"
expr_stmt|;
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"mapping ["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|IndexQueryParserService
name|indexQueryParserService
init|=
name|indexService
operator|.
name|queryParserService
argument_list|()
decl_stmt|;
for|for
control|(
name|Alias
name|alias
range|:
name|request
operator|.
name|aliases
argument_list|()
control|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|alias
operator|.
name|filter
argument_list|()
argument_list|)
condition|)
block|{
name|aliasValidator
operator|.
name|validateAliasFilter
argument_list|(
name|alias
operator|.
name|name
argument_list|()
argument_list|,
name|alias
operator|.
name|filter
argument_list|()
argument_list|,
name|indexQueryParserService
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|AliasMetaData
name|aliasMetaData
range|:
name|templatesAliases
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|aliasMetaData
operator|.
name|filter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|aliasValidator
operator|.
name|validateAliasFilter
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
name|aliasMetaData
operator|.
name|filter
argument_list|()
operator|.
name|uncompressed
argument_list|()
argument_list|,
name|indexQueryParserService
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now, update the mappings with the actual source
name|Map
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappingsMetaData
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|DocumentMapper
name|mapper
range|:
name|mapperService
control|)
block|{
name|MappingMetaData
name|mappingMd
init|=
operator|new
name|MappingMetaData
argument_list|(
name|mapper
argument_list|)
decl_stmt|;
name|mappingsMetaData
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
name|mappingMd
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|actualIndexSettings
argument_list|)
decl_stmt|;
for|for
control|(
name|MappingMetaData
name|mappingMd
range|:
name|mappingsMetaData
operator|.
name|values
argument_list|()
control|)
block|{
name|indexMetaDataBuilder
operator|.
name|putMapping
argument_list|(
name|mappingMd
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AliasMetaData
name|aliasMetaData
range|:
name|templatesAliases
operator|.
name|values
argument_list|()
control|)
block|{
name|indexMetaDataBuilder
operator|.
name|putAlias
argument_list|(
name|aliasMetaData
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Alias
name|alias
range|:
name|request
operator|.
name|aliases
argument_list|()
control|)
block|{
name|AliasMetaData
name|aliasMetaData
init|=
name|AliasMetaData
operator|.
name|builder
argument_list|(
name|alias
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|alias
operator|.
name|filter
argument_list|()
argument_list|)
operator|.
name|indexRouting
argument_list|(
name|alias
operator|.
name|indexRouting
argument_list|()
argument_list|)
operator|.
name|searchRouting
argument_list|(
name|alias
operator|.
name|searchRouting
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|indexMetaDataBuilder
operator|.
name|putAlias
argument_list|(
name|aliasMetaData
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customEntry
range|:
name|customs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|indexMetaDataBuilder
operator|.
name|putCustom
argument_list|(
name|customEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|customEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexMetaDataBuilder
operator|.
name|state
argument_list|(
name|request
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexMetaData
name|indexMetaData
decl_stmt|;
try|try
block|{
name|indexMetaData
operator|=
name|indexMetaDataBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failureReason
operator|=
literal|"failed to build index metadata"
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|MetaData
name|newMetaData
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}"
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|cause
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|numberOfShards
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
argument_list|,
name|mappings
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|blocks
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|blocks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ClusterBlock
name|block
range|:
name|request
operator|.
name|blocks
argument_list|()
control|)
block|{
name|blocks
operator|.
name|addIndexBlock
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|CLOSE
condition|)
block|{
name|blocks
operator|.
name|addIndexBlock
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|MetaDataIndexStateService
operator|.
name|INDEX_CLOSED_BLOCK
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|updatedState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|blocks
argument_list|(
name|blocks
argument_list|)
operator|.
name|metaData
argument_list|(
name|newMetaData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|OPEN
condition|)
block|{
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|updatedState
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|addAsNew
argument_list|(
name|updatedState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|routingResult
init|=
name|allocationService
operator|.
name|reroute
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|updatedState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTableBuilder
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|updatedState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|updatedState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|routingResult
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|updatedState
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|indexCreated
condition|)
block|{
comment|// Index was already partially created - need to clean up
name|indicesService
operator|.
name|removeIndex
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|failureReason
operator|!=
literal|null
condition|?
name|failureReason
else|:
literal|"failed to create index"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|parseMapping
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseMapping
parameter_list|(
name|String
name|mappingSource
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|mappingSource
argument_list|)
operator|.
name|createParser
argument_list|(
name|mappingSource
argument_list|)
operator|.
name|mapAndClose
argument_list|()
return|;
block|}
DECL|method|addMappings
specifier|private
name|void
name|addMappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mappings
parameter_list|,
name|File
name|mappingsDir
parameter_list|)
block|{
name|File
index|[]
name|mappingsFiles
init|=
name|mappingsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|mappingFile
range|:
name|mappingsFiles
control|)
block|{
if|if
condition|(
name|mappingFile
operator|.
name|isHidden
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|int
name|lastDotIndex
init|=
name|mappingFile
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|mappingType
init|=
name|lastDotIndex
operator|!=
operator|-
literal|1
condition|?
name|mappingFile
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastDotIndex
argument_list|)
else|:
name|mappingFile
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|mappingSource
init|=
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|mappingFile
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|mappingType
argument_list|)
condition|)
block|{
name|XContentHelper
operator|.
name|mergeDefaults
argument_list|(
name|mappings
operator|.
name|get
argument_list|(
name|mappingType
argument_list|)
argument_list|,
name|parseMapping
argument_list|(
name|mappingSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappings
operator|.
name|put
argument_list|(
name|mappingType
argument_list|,
name|parseMapping
argument_list|(
name|mappingSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read / parse mapping ["
operator|+
name|mappingType
operator|+
literal|"] from location ["
operator|+
name|mappingFile
operator|+
literal|"], ignoring..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|findTemplates
specifier|private
name|List
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|findTemplates
parameter_list|(
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|List
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|templates
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|cursor
range|:
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|templates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexTemplateMetaData
name|template
init|=
name|cursor
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|template
operator|.
name|template
argument_list|()
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|templates
operator|.
name|add
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
block|}
comment|// see if we have templates defined under config
name|File
name|templatesDir
init|=
operator|new
name|File
argument_list|(
name|environment
operator|.
name|configFile
argument_list|()
argument_list|,
literal|"templates"
argument_list|)
decl_stmt|;
if|if
condition|(
name|templatesDir
operator|.
name|exists
argument_list|()
operator|&&
name|templatesDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|templatesFiles
init|=
name|templatesDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|templatesFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|templatesFile
range|:
name|templatesFiles
control|)
block|{
name|XContentParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|templatesData
init|=
name|Streams
operator|.
name|copyToByteArray
argument_list|(
name|templatesFile
argument_list|)
decl_stmt|;
name|parser
operator|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|templatesData
argument_list|,
literal|0
argument_list|,
name|templatesData
operator|.
name|length
argument_list|)
expr_stmt|;
name|IndexTemplateMetaData
name|template
init|=
name|IndexTemplateMetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|template
operator|.
name|template
argument_list|()
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|templates
operator|.
name|add
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to read template [{}] from config"
argument_list|,
name|e
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|templatesFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|templates
argument_list|,
operator|new
name|Comparator
argument_list|<
name|IndexTemplateMetaData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|IndexTemplateMetaData
name|o1
parameter_list|,
name|IndexTemplateMetaData
name|o2
parameter_list|)
block|{
return|return
name|o2
operator|.
name|order
argument_list|()
operator|-
name|o1
operator|.
name|order
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|templates
return|;
block|}
DECL|method|validate
specifier|private
name|void
name|validate
parameter_list|(
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
throws|throws
name|ElasticsearchException
block|{
name|validateIndexName
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

