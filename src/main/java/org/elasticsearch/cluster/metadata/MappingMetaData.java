begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TimestampParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TimestampFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|nodeBooleanValue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|MappingMetaData
specifier|public
class|class
name|MappingMetaData
block|{
DECL|class|Id
specifier|public
specifier|static
class|class
name|Id
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|Id
name|EMPTY
init|=
operator|new
name|Id
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|pathElements
specifier|private
specifier|final
name|String
index|[]
name|pathElements
decl_stmt|;
DECL|method|Id
specifier|public
name|Id
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|pathElements
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
else|else
block|{
name|pathElements
operator|=
name|Strings
operator|.
name|delimitedListToStringArray
argument_list|(
name|path
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasPath
specifier|public
name|boolean
name|hasPath
parameter_list|()
block|{
return|return
name|path
operator|!=
literal|null
return|;
block|}
DECL|method|path
specifier|public
name|String
name|path
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
DECL|method|pathElements
specifier|public
name|String
index|[]
name|pathElements
parameter_list|()
block|{
return|return
name|this
operator|.
name|pathElements
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Id
name|id
init|=
operator|(
name|Id
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|?
operator|!
name|path
operator|.
name|equals
argument_list|(
name|id
operator|.
name|path
argument_list|)
else|:
name|id
operator|.
name|path
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|pathElements
argument_list|,
name|id
operator|.
name|pathElements
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|path
operator|!=
literal|null
condition|?
name|path
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|pathElements
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|hashCode
argument_list|(
name|pathElements
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|Routing
specifier|public
specifier|static
class|class
name|Routing
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|Routing
name|EMPTY
init|=
operator|new
name|Routing
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|required
specifier|private
specifier|final
name|boolean
name|required
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|pathElements
specifier|private
specifier|final
name|String
index|[]
name|pathElements
decl_stmt|;
DECL|method|Routing
specifier|public
name|Routing
parameter_list|(
name|boolean
name|required
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|pathElements
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
else|else
block|{
name|pathElements
operator|=
name|Strings
operator|.
name|delimitedListToStringArray
argument_list|(
name|path
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|required
specifier|public
name|boolean
name|required
parameter_list|()
block|{
return|return
name|required
return|;
block|}
DECL|method|hasPath
specifier|public
name|boolean
name|hasPath
parameter_list|()
block|{
return|return
name|path
operator|!=
literal|null
return|;
block|}
DECL|method|path
specifier|public
name|String
name|path
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
DECL|method|pathElements
specifier|public
name|String
index|[]
name|pathElements
parameter_list|()
block|{
return|return
name|this
operator|.
name|pathElements
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Routing
name|routing
init|=
operator|(
name|Routing
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|required
operator|!=
name|routing
operator|.
name|required
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|?
operator|!
name|path
operator|.
name|equals
argument_list|(
name|routing
operator|.
name|path
argument_list|)
else|:
name|routing
operator|.
name|path
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|pathElements
argument_list|,
name|routing
operator|.
name|pathElements
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
operator|(
name|required
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|path
operator|!=
literal|null
condition|?
name|path
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|pathElements
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|hashCode
argument_list|(
name|pathElements
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|Timestamp
specifier|public
specifier|static
class|class
name|Timestamp
block|{
DECL|method|parseStringTimestamp
specifier|public
specifier|static
name|String
name|parseStringTimestamp
parameter_list|(
name|String
name|timestampAsString
parameter_list|,
name|FormatDateTimeFormatter
name|dateTimeFormatter
parameter_list|)
throws|throws
name|TimestampParsingException
block|{
name|long
name|ts
decl_stmt|;
try|try
block|{
comment|// if we manage to parse it, its a millisecond timestamp, just return the string as is
name|ts
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|timestampAsString
argument_list|)
expr_stmt|;
return|return
name|timestampAsString
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
try|try
block|{
name|ts
operator|=
name|dateTimeFormatter
operator|.
name|parser
argument_list|()
operator|.
name|parseMillis
argument_list|(
name|timestampAsString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|TimestampParsingException
argument_list|(
name|timestampAsString
argument_list|)
throw|;
block|}
block|}
return|return
name|Long
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
return|;
block|}
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|Timestamp
name|EMPTY
init|=
operator|new
name|Timestamp
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
name|TimestampFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMAT
argument_list|)
decl_stmt|;
DECL|field|enabled
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|format
specifier|private
specifier|final
name|String
name|format
decl_stmt|;
DECL|field|pathElements
specifier|private
specifier|final
name|String
index|[]
name|pathElements
decl_stmt|;
DECL|field|dateTimeFormatter
specifier|private
specifier|final
name|FormatDateTimeFormatter
name|dateTimeFormatter
decl_stmt|;
DECL|method|Timestamp
specifier|public
name|Timestamp
parameter_list|(
name|boolean
name|enabled
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|pathElements
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
else|else
block|{
name|pathElements
operator|=
name|Strings
operator|.
name|delimitedListToStringArray
argument_list|(
name|path
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|dateTimeFormatter
operator|=
name|Joda
operator|.
name|forPattern
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
DECL|method|enabled
specifier|public
name|boolean
name|enabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
DECL|method|hasPath
specifier|public
name|boolean
name|hasPath
parameter_list|()
block|{
return|return
name|path
operator|!=
literal|null
return|;
block|}
DECL|method|path
specifier|public
name|String
name|path
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
DECL|method|pathElements
specifier|public
name|String
index|[]
name|pathElements
parameter_list|()
block|{
return|return
name|this
operator|.
name|pathElements
return|;
block|}
DECL|method|format
specifier|public
name|String
name|format
parameter_list|()
block|{
return|return
name|this
operator|.
name|format
return|;
block|}
DECL|method|dateTimeFormatter
specifier|public
name|FormatDateTimeFormatter
name|dateTimeFormatter
parameter_list|()
block|{
return|return
name|this
operator|.
name|dateTimeFormatter
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Timestamp
name|timestamp
init|=
operator|(
name|Timestamp
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|enabled
operator|!=
name|timestamp
operator|.
name|enabled
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|?
operator|!
name|format
operator|.
name|equals
argument_list|(
name|timestamp
operator|.
name|format
argument_list|)
else|:
name|timestamp
operator|.
name|format
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|?
operator|!
name|path
operator|.
name|equals
argument_list|(
name|timestamp
operator|.
name|path
argument_list|)
else|:
name|timestamp
operator|.
name|path
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|pathElements
argument_list|,
name|timestamp
operator|.
name|pathElements
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
operator|(
name|enabled
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|path
operator|!=
literal|null
condition|?
name|path
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|format
operator|!=
literal|null
condition|?
name|format
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|pathElements
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|hashCode
argument_list|(
name|pathElements
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|dateTimeFormatter
operator|!=
literal|null
condition|?
name|dateTimeFormatter
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|CompressedString
name|source
decl_stmt|;
DECL|field|id
specifier|private
name|Id
name|id
decl_stmt|;
DECL|field|routing
specifier|private
name|Routing
name|routing
decl_stmt|;
DECL|field|timestamp
specifier|private
name|Timestamp
name|timestamp
decl_stmt|;
DECL|field|hasParentField
specifier|private
name|boolean
name|hasParentField
decl_stmt|;
DECL|method|MappingMetaData
specifier|public
name|MappingMetaData
parameter_list|(
name|DocumentMapper
name|docMapper
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|docMapper
operator|.
name|type
argument_list|()
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|docMapper
operator|.
name|mappingSource
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
operator|new
name|Id
argument_list|(
name|docMapper
operator|.
name|idFieldMapper
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|routing
operator|=
operator|new
name|Routing
argument_list|(
name|docMapper
operator|.
name|routingFieldMapper
argument_list|()
operator|.
name|required
argument_list|()
argument_list|,
name|docMapper
operator|.
name|routingFieldMapper
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
operator|new
name|Timestamp
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|enabled
argument_list|()
argument_list|,
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|path
argument_list|()
argument_list|,
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|hasParentField
operator|=
name|docMapper
operator|.
name|parentFieldMapper
argument_list|()
operator|.
name|active
argument_list|()
expr_stmt|;
block|}
DECL|method|MappingMetaData
specifier|public
name|MappingMetaData
parameter_list|(
name|CompressedString
name|mapping
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|source
operator|=
name|mapping
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mappingMap
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|mapping
operator|.
name|compressed
argument_list|()
argument_list|,
literal|0
argument_list|,
name|mapping
operator|.
name|compressed
argument_list|()
operator|.
name|length
argument_list|)
operator|.
name|mapOrderedAndClose
argument_list|()
decl_stmt|;
if|if
condition|(
name|mappingMap
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Can't derive type from mapping, no root type: "
operator|+
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
name|mappingMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|initMappers
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|mappingMap
operator|.
name|get
argument_list|(
name|this
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|MappingMetaData
specifier|public
name|MappingMetaData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|mapping
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
block|}
DECL|method|MappingMetaData
specifier|public
name|MappingMetaData
parameter_list|(
name|String
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|XContentBuilder
name|mappingBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|map
argument_list|(
name|mapping
argument_list|)
decl_stmt|;
name|this
operator|.
name|source
operator|=
operator|new
name|CompressedString
argument_list|(
name|mappingBuilder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|withoutType
init|=
name|mapping
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|mapping
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|withoutType
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|mapping
operator|.
name|get
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|initMappers
argument_list|(
name|withoutType
argument_list|)
expr_stmt|;
block|}
DECL|method|initMappers
specifier|private
name|void
name|initMappers
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|withoutType
parameter_list|)
block|{
if|if
condition|(
name|withoutType
operator|.
name|containsKey
argument_list|(
literal|"_id"
argument_list|)
condition|)
block|{
name|String
name|path
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|routingNode
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|withoutType
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|routingNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"path"
argument_list|)
condition|)
block|{
name|path
operator|=
name|fieldNode
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|id
operator|=
operator|new
name|Id
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|id
operator|=
name|Id
operator|.
name|EMPTY
expr_stmt|;
block|}
if|if
condition|(
name|withoutType
operator|.
name|containsKey
argument_list|(
literal|"_routing"
argument_list|)
condition|)
block|{
name|boolean
name|required
init|=
literal|false
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|routingNode
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|withoutType
operator|.
name|get
argument_list|(
literal|"_routing"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|routingNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"required"
argument_list|)
condition|)
block|{
name|required
operator|=
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"path"
argument_list|)
condition|)
block|{
name|path
operator|=
name|fieldNode
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|routing
operator|=
operator|new
name|Routing
argument_list|(
name|required
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|routing
operator|=
name|Routing
operator|.
name|EMPTY
expr_stmt|;
block|}
if|if
condition|(
name|withoutType
operator|.
name|containsKey
argument_list|(
literal|"_timestamp"
argument_list|)
condition|)
block|{
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
name|String
name|format
init|=
name|TimestampFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMAT
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|timestampNode
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|withoutType
operator|.
name|get
argument_list|(
literal|"_timestamp"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|timestampNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"enabled"
argument_list|)
condition|)
block|{
name|enabled
operator|=
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"path"
argument_list|)
condition|)
block|{
name|path
operator|=
name|fieldNode
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"format"
argument_list|)
condition|)
block|{
name|format
operator|=
name|fieldNode
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|timestamp
operator|=
operator|new
name|Timestamp
argument_list|(
name|enabled
argument_list|,
name|path
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|timestamp
operator|=
name|Timestamp
operator|.
name|EMPTY
expr_stmt|;
block|}
if|if
condition|(
name|withoutType
operator|.
name|containsKey
argument_list|(
literal|"_parent"
argument_list|)
condition|)
block|{
name|this
operator|.
name|hasParentField
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|hasParentField
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|MappingMetaData
specifier|public
name|MappingMetaData
parameter_list|(
name|String
name|type
parameter_list|,
name|CompressedString
name|source
parameter_list|,
name|Id
name|id
parameter_list|,
name|Routing
name|routing
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|,
name|boolean
name|hasParentField
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|hasParentField
operator|=
name|hasParentField
expr_stmt|;
block|}
DECL|method|updateDefaultMapping
name|void
name|updateDefaultMapping
parameter_list|(
name|MappingMetaData
name|defaultMapping
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
name|Id
operator|.
name|EMPTY
condition|)
block|{
name|id
operator|=
name|defaultMapping
operator|.
name|id
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|routing
operator|==
name|Routing
operator|.
name|EMPTY
condition|)
block|{
name|routing
operator|=
name|defaultMapping
operator|.
name|routing
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timestamp
operator|==
name|Timestamp
operator|.
name|EMPTY
condition|)
block|{
name|timestamp
operator|=
name|defaultMapping
operator|.
name|timestamp
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|source
specifier|public
name|CompressedString
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|hasParentField
specifier|public
name|boolean
name|hasParentField
parameter_list|()
block|{
return|return
name|hasParentField
return|;
block|}
comment|/**      * Converts the serialized compressed form of the mappings into a parsed map.      */
DECL|method|sourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|source
operator|.
name|compressed
argument_list|()
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|compressed
argument_list|()
operator|.
name|length
argument_list|,
literal|true
argument_list|)
operator|.
name|v2
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|mapping
operator|.
name|containsKey
argument_list|(
name|type
argument_list|()
argument_list|)
condition|)
block|{
comment|// the type name is the root value, reduce it
name|mapping
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|mapping
operator|.
name|get
argument_list|(
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
return|;
block|}
comment|/**      * Converts the serialized compressed form of the mappings into a parsed map.      */
DECL|method|getSourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSourceAsMap
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|sourceAsMap
argument_list|()
return|;
block|}
DECL|method|id
specifier|public
name|Id
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|routing
specifier|public
name|Routing
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|routing
return|;
block|}
DECL|method|timestamp
specifier|public
name|Timestamp
name|timestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
DECL|method|createParseContext
specifier|public
name|ParseContext
name|createParseContext
parameter_list|(
annotation|@
name|Nullable
name|String
name|id
parameter_list|,
annotation|@
name|Nullable
name|String
name|routing
parameter_list|,
annotation|@
name|Nullable
name|String
name|timestamp
parameter_list|)
block|{
comment|// We parse the routing even if there is already a routing key in the request in order to make sure that
comment|// they are the same
return|return
operator|new
name|ParseContext
argument_list|(
name|id
operator|==
literal|null
operator|&&
name|id
argument_list|()
operator|.
name|hasPath
argument_list|()
argument_list|,
name|routing
argument_list|()
operator|.
name|hasPath
argument_list|()
argument_list|,
name|timestamp
operator|==
literal|null
operator|&&
name|timestamp
argument_list|()
operator|.
name|hasPath
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|void
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|innerParse
argument_list|(
name|parser
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
DECL|method|innerParse
specifier|private
name|void
name|innerParse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|parsingStillNeeded
argument_list|()
condition|)
block|{
return|return;
block|}
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|String
name|idPart
init|=
name|context
operator|.
name|idParsingStillNeeded
argument_list|()
condition|?
name|id
argument_list|()
operator|.
name|pathElements
argument_list|()
index|[
name|context
operator|.
name|locationId
index|]
else|:
literal|null
decl_stmt|;
name|String
name|routingPart
init|=
name|context
operator|.
name|routingParsingStillNeeded
argument_list|()
condition|?
name|routing
argument_list|()
operator|.
name|pathElements
argument_list|()
index|[
name|context
operator|.
name|locationRouting
index|]
else|:
literal|null
decl_stmt|;
name|String
name|timestampPart
init|=
name|context
operator|.
name|timestampParsingStillNeeded
argument_list|()
condition|?
name|timestamp
argument_list|()
operator|.
name|pathElements
argument_list|()
index|[
name|context
operator|.
name|locationTimestamp
index|]
else|:
literal|null
decl_stmt|;
for|for
control|(
init|;
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
control|)
block|{
comment|// Must point to field name
name|String
name|fieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
comment|// And then the value...
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|boolean
name|incLocationId
init|=
literal|false
decl_stmt|;
name|boolean
name|incLocationRouting
init|=
literal|false
decl_stmt|;
name|boolean
name|incLocationTimestamp
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|idParsingStillNeeded
argument_list|()
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|idPart
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|locationId
operator|+
literal|1
operator|==
name|id
operator|.
name|pathElements
argument_list|()
operator|.
name|length
condition|)
block|{
if|if
condition|(
operator|!
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"id field must be a value but was either an object or an array"
argument_list|)
throw|;
block|}
name|context
operator|.
name|id
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
name|context
operator|.
name|idResolved
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|incLocationId
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|routingParsingStillNeeded
argument_list|()
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|routingPart
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|locationRouting
operator|+
literal|1
operator|==
name|routing
operator|.
name|pathElements
argument_list|()
operator|.
name|length
condition|)
block|{
name|context
operator|.
name|routing
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
name|context
operator|.
name|routingResolved
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|incLocationRouting
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|timestampParsingStillNeeded
argument_list|()
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|timestampPart
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|locationTimestamp
operator|+
literal|1
operator|==
name|timestamp
operator|.
name|pathElements
argument_list|()
operator|.
name|length
condition|)
block|{
name|context
operator|.
name|timestamp
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
name|context
operator|.
name|timestampResolved
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|incLocationTimestamp
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|incLocationId
operator|||
name|incLocationRouting
operator|||
name|incLocationTimestamp
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|context
operator|.
name|locationId
operator|+=
name|incLocationId
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|context
operator|.
name|locationRouting
operator|+=
name|incLocationRouting
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|context
operator|.
name|locationTimestamp
operator|+=
name|incLocationTimestamp
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|innerParse
argument_list|(
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|locationId
operator|-=
name|incLocationId
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|context
operator|.
name|locationRouting
operator|-=
name|incLocationRouting
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|context
operator|.
name|locationTimestamp
operator|-=
name|incLocationTimestamp
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|parsingStillNeeded
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|MappingMetaData
name|mappingMd
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|mappingMd
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|mappingMd
operator|.
name|source
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// id
if|if
condition|(
name|mappingMd
operator|.
name|id
argument_list|()
operator|.
name|hasPath
argument_list|()
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|mappingMd
operator|.
name|id
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// routing
name|out
operator|.
name|writeBoolean
argument_list|(
name|mappingMd
operator|.
name|routing
argument_list|()
operator|.
name|required
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappingMd
operator|.
name|routing
argument_list|()
operator|.
name|hasPath
argument_list|()
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|mappingMd
operator|.
name|routing
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// timestamp
name|out
operator|.
name|writeBoolean
argument_list|(
name|mappingMd
operator|.
name|timestamp
argument_list|()
operator|.
name|enabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappingMd
operator|.
name|timestamp
argument_list|()
operator|.
name|hasPath
argument_list|()
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|mappingMd
operator|.
name|timestamp
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeString
argument_list|(
name|mappingMd
operator|.
name|timestamp
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|mappingMd
operator|.
name|hasParentField
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|MappingMetaData
name|that
init|=
operator|(
name|MappingMetaData
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|.
name|equals
argument_list|(
name|that
operator|.
name|id
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|routing
operator|.
name|equals
argument_list|(
name|that
operator|.
name|routing
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|source
operator|.
name|equals
argument_list|(
name|that
operator|.
name|source
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|timestamp
operator|.
name|equals
argument_list|(
name|that
operator|.
name|timestamp
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|type
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|source
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|id
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|routing
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|timestamp
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|MappingMetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|CompressedString
name|source
init|=
name|CompressedString
operator|.
name|readCompressedString
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// id
name|Id
name|id
init|=
operator|new
name|Id
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
name|in
operator|.
name|readString
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
comment|// routing
name|Routing
name|routing
init|=
operator|new
name|Routing
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|,
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
name|in
operator|.
name|readString
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
comment|// timestamp
name|Timestamp
name|timestamp
init|=
operator|new
name|Timestamp
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|,
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
name|in
operator|.
name|readString
argument_list|()
else|:
literal|null
argument_list|,
name|in
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasParentField
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
return|return
operator|new
name|MappingMetaData
argument_list|(
name|type
argument_list|,
name|source
argument_list|,
name|id
argument_list|,
name|routing
argument_list|,
name|timestamp
argument_list|,
name|hasParentField
argument_list|)
return|;
block|}
DECL|class|ParseContext
specifier|public
specifier|static
class|class
name|ParseContext
block|{
DECL|field|shouldParseId
specifier|final
name|boolean
name|shouldParseId
decl_stmt|;
DECL|field|shouldParseRouting
specifier|final
name|boolean
name|shouldParseRouting
decl_stmt|;
DECL|field|shouldParseTimestamp
specifier|final
name|boolean
name|shouldParseTimestamp
decl_stmt|;
DECL|field|locationId
name|int
name|locationId
init|=
literal|0
decl_stmt|;
DECL|field|locationRouting
name|int
name|locationRouting
init|=
literal|0
decl_stmt|;
DECL|field|locationTimestamp
name|int
name|locationTimestamp
init|=
literal|0
decl_stmt|;
DECL|field|idResolved
name|boolean
name|idResolved
decl_stmt|;
DECL|field|routingResolved
name|boolean
name|routingResolved
decl_stmt|;
DECL|field|timestampResolved
name|boolean
name|timestampResolved
decl_stmt|;
DECL|field|id
name|String
name|id
decl_stmt|;
DECL|field|routing
name|String
name|routing
decl_stmt|;
DECL|field|timestamp
name|String
name|timestamp
decl_stmt|;
DECL|method|ParseContext
specifier|public
name|ParseContext
parameter_list|(
name|boolean
name|shouldParseId
parameter_list|,
name|boolean
name|shouldParseRouting
parameter_list|,
name|boolean
name|shouldParseTimestamp
parameter_list|)
block|{
name|this
operator|.
name|shouldParseId
operator|=
name|shouldParseId
expr_stmt|;
name|this
operator|.
name|shouldParseRouting
operator|=
name|shouldParseRouting
expr_stmt|;
name|this
operator|.
name|shouldParseTimestamp
operator|=
name|shouldParseTimestamp
expr_stmt|;
block|}
comment|/**          * The id value parsed,<tt>null</tt> if does not require parsing, or not resolved.          */
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**          * Does id parsing really needed at all?          */
DECL|method|shouldParseId
specifier|public
name|boolean
name|shouldParseId
parameter_list|()
block|{
return|return
name|shouldParseId
return|;
block|}
comment|/**          * Has id been resolved during the parsing phase.          */
DECL|method|idResolved
specifier|public
name|boolean
name|idResolved
parameter_list|()
block|{
return|return
name|idResolved
return|;
block|}
comment|/**          * Is id parsing still needed?          */
DECL|method|idParsingStillNeeded
specifier|public
name|boolean
name|idParsingStillNeeded
parameter_list|()
block|{
return|return
name|shouldParseId
operator|&&
operator|!
name|idResolved
return|;
block|}
comment|/**          * The routing value parsed,<tt>null</tt> if does not require parsing, or not resolved.          */
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|routing
return|;
block|}
comment|/**          * Does routing parsing really needed at all?          */
DECL|method|shouldParseRouting
specifier|public
name|boolean
name|shouldParseRouting
parameter_list|()
block|{
return|return
name|shouldParseRouting
return|;
block|}
comment|/**          * Has routing been resolved during the parsing phase.          */
DECL|method|routingResolved
specifier|public
name|boolean
name|routingResolved
parameter_list|()
block|{
return|return
name|routingResolved
return|;
block|}
comment|/**          * Is routing parsing still needed?          */
DECL|method|routingParsingStillNeeded
specifier|public
name|boolean
name|routingParsingStillNeeded
parameter_list|()
block|{
return|return
name|shouldParseRouting
operator|&&
operator|!
name|routingResolved
return|;
block|}
comment|/**          * The timestamp value parsed,<tt>null</tt> if does not require parsing, or not resolved.          */
DECL|method|timestamp
specifier|public
name|String
name|timestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
comment|/**          * Does timestamp parsing really needed at all?          */
DECL|method|shouldParseTimestamp
specifier|public
name|boolean
name|shouldParseTimestamp
parameter_list|()
block|{
return|return
name|shouldParseTimestamp
return|;
block|}
comment|/**          * Has timestamp been resolved during the parsing phase.          */
DECL|method|timestampResolved
specifier|public
name|boolean
name|timestampResolved
parameter_list|()
block|{
return|return
name|timestampResolved
return|;
block|}
comment|/**          * Is timestamp parsing still needed?          */
DECL|method|timestampParsingStillNeeded
specifier|public
name|boolean
name|timestampParsingStillNeeded
parameter_list|()
block|{
return|return
name|shouldParseTimestamp
operator|&&
operator|!
name|timestampResolved
return|;
block|}
comment|/**          * Do we really need parsing?          */
DECL|method|shouldParse
specifier|public
name|boolean
name|shouldParse
parameter_list|()
block|{
return|return
name|shouldParseId
operator|||
name|shouldParseRouting
operator|||
name|shouldParseTimestamp
return|;
block|}
comment|/**          * Is parsing still needed?          */
DECL|method|parsingStillNeeded
specifier|public
name|boolean
name|parsingStillNeeded
parameter_list|()
block|{
return|return
name|idParsingStillNeeded
argument_list|()
operator|||
name|routingParsingStillNeeded
argument_list|()
operator|||
name|timestampParsingStillNeeded
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

