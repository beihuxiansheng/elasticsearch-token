begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|delete
operator|.
name|DeleteMappingClusterStateUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|MasterNodeOperationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ack
operator|.
name|ClusterStateUpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ack
operator|.
name|ClusterStateUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|NodeMappingCreatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MergeMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidTypeNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|TypeMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|PercolatorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|newClusterStateBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
operator|.
name|MergeFlags
operator|.
name|mergeFlags
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|MetaDataMappingService
specifier|public
class|class
name|MetaDataMappingService
extends|extends
name|AbstractComponent
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|mappingCreatedAction
specifier|private
specifier|final
name|NodeMappingCreatedAction
name|mappingCreatedAction
decl_stmt|;
DECL|field|refreshOrUpdateQueue
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|MappingTask
argument_list|>
name|refreshOrUpdateQueue
init|=
name|ConcurrentCollections
operator|.
name|newBlockingQueue
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|MetaDataMappingService
specifier|public
name|MetaDataMappingService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|NodeMappingCreatedAction
name|mappingCreatedAction
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|mappingCreatedAction
operator|=
name|mappingCreatedAction
expr_stmt|;
block|}
DECL|class|MappingTask
specifier|static
class|class
name|MappingTask
block|{
DECL|field|index
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|indexUUID
specifier|final
name|String
name|indexUUID
decl_stmt|;
DECL|method|MappingTask
name|MappingTask
parameter_list|(
name|String
name|index
parameter_list|,
specifier|final
name|String
name|indexUUID
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|indexUUID
operator|=
name|indexUUID
expr_stmt|;
block|}
block|}
DECL|class|RefreshTask
specifier|static
class|class
name|RefreshTask
extends|extends
name|MappingTask
block|{
DECL|field|types
specifier|final
name|String
index|[]
name|types
decl_stmt|;
DECL|method|RefreshTask
name|RefreshTask
parameter_list|(
name|String
name|index
parameter_list|,
specifier|final
name|String
name|indexUUID
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexUUID
argument_list|)
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
block|}
block|}
DECL|class|UpdateTask
specifier|static
class|class
name|UpdateTask
extends|extends
name|MappingTask
block|{
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|mappingSource
specifier|final
name|CompressedString
name|mappingSource
decl_stmt|;
DECL|field|listener
specifier|final
name|Listener
name|listener
decl_stmt|;
DECL|method|UpdateTask
name|UpdateTask
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|indexUUID
parameter_list|,
name|String
name|type
parameter_list|,
name|CompressedString
name|mappingSource
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexUUID
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|mappingSource
operator|=
name|mappingSource
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
block|}
comment|/**      * Batch method to apply all the queued refresh or update operations. The idea is to try and batch as much      * as possible so we won't create the same index all the time for example for the updates on the same mapping      * and generate a single cluster change event out of all of those.      */
DECL|method|executeRefreshOrUpdate
name|ClusterState
name|executeRefreshOrUpdate
parameter_list|(
specifier|final
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|MappingTask
argument_list|>
name|allTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|MappingTask
argument_list|>
argument_list|()
decl_stmt|;
name|refreshOrUpdateQueue
operator|.
name|drainTo
argument_list|(
name|allTasks
argument_list|)
expr_stmt|;
if|if
condition|(
name|allTasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|currentState
return|;
block|}
comment|// break down to tasks per index, so we can optimize the on demand index service creation
comment|// to only happen for the duration of a single index processing of its respective events
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MappingTask
argument_list|>
argument_list|>
name|tasksPerIndex
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|MappingTask
name|task
range|:
name|allTasks
control|)
block|{
if|if
condition|(
name|task
operator|.
name|index
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"ignoring a mapping task of type [{}] with a null index."
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MappingTask
argument_list|>
name|indexTasks
init|=
name|tasksPerIndex
operator|.
name|get
argument_list|(
name|task
operator|.
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexTasks
operator|==
literal|null
condition|)
block|{
name|indexTasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|MappingTask
argument_list|>
argument_list|()
expr_stmt|;
name|tasksPerIndex
operator|.
name|put
argument_list|(
name|task
operator|.
name|index
argument_list|,
name|indexTasks
argument_list|)
expr_stmt|;
block|}
name|indexTasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MappingTask
argument_list|>
argument_list|>
name|entry
range|:
name|tasksPerIndex
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|index
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MappingTask
argument_list|>
name|tasks
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|removeIndex
init|=
literal|false
decl_stmt|;
comment|// keep track of what we already refreshed, no need to refresh it again...
name|Set
argument_list|<
name|String
argument_list|>
name|processedRefreshes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|MappingTask
name|task
range|:
name|tasks
control|)
block|{
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|mdBuilder
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
comment|// index got deleted on us, ignore...
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] ignoring task [{}] - index meta data doesn't exist"
argument_list|,
name|index
argument_list|,
name|task
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|indexMetaData
operator|.
name|isSameUUID
argument_list|(
name|task
operator|.
name|indexUUID
argument_list|)
condition|)
block|{
comment|// index got deleted on us, ignore...
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] ignoring task [{}] - index meta data doesn't match task uuid"
argument_list|,
name|index
argument_list|,
name|task
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|task
operator|instanceof
name|RefreshTask
condition|)
block|{
name|RefreshTask
name|refreshTask
init|=
operator|(
name|RefreshTask
operator|)
name|task
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
comment|// we need to create the index here, and add the current mapping to it, so we can merge
name|indexService
operator|=
name|indicesService
operator|.
name|createIndex
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|settings
argument_list|()
argument_list|,
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|removeIndex
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|refreshTask
operator|.
name|types
control|)
block|{
comment|// only add the current relevant mapping (if exists)
if|if
condition|(
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// don't apply the default mapping, it has been applied when the mapping was created
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|merge
argument_list|(
name|type
argument_list|,
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|updatedTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|refreshTask
operator|.
name|types
control|)
block|{
if|if
condition|(
name|processedRefreshes
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|DocumentMapper
name|mapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|equals
argument_list|(
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|()
argument_list|)
condition|)
block|{
name|updatedTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|indexMetaDataBuilder
operator|.
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|processedRefreshes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updatedTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] re-syncing mappings with cluster state for types [{}]"
argument_list|,
name|index
argument_list|,
name|updatedTypes
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|put
argument_list|(
name|indexMetaDataBuilder
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|instanceof
name|UpdateTask
condition|)
block|{
name|UpdateTask
name|updateTask
init|=
operator|(
name|UpdateTask
operator|)
name|task
decl_stmt|;
name|String
name|type
init|=
name|updateTask
operator|.
name|type
decl_stmt|;
name|CompressedString
name|mappingSource
init|=
name|updateTask
operator|.
name|mappingSource
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|&&
name|indexMetaData
operator|.
name|mapping
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|()
operator|.
name|equals
argument_list|(
name|mappingSource
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] update_mapping [{}] ignoring mapping update task as it's source is equal to ours"
argument_list|,
name|index
argument_list|,
name|updateTask
operator|.
name|type
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
comment|// we need to create the index here, and add the current mapping to it, so we can merge
name|indexService
operator|=
name|indicesService
operator|.
name|createIndex
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|settings
argument_list|()
argument_list|,
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|removeIndex
operator|=
literal|true
expr_stmt|;
comment|// only add the current relevant mapping (if exists)
if|if
condition|(
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|merge
argument_list|(
name|type
argument_list|,
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|DocumentMapper
name|updatedMapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|merge
argument_list|(
name|type
argument_list|,
name|mappingSource
operator|.
name|string
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|processedRefreshes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// if we end up with the same mapping as the original once, ignore
if|if
condition|(
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|&&
name|indexMetaData
operator|.
name|mapping
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedMapper
operator|.
name|mappingSource
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] update_mapping [{}] ignoring mapping update task as it results in the same source as what we have"
argument_list|,
name|index
argument_list|,
name|updateTask
operator|.
name|type
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// build the updated mapping source
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] update_mapping [{}] (dynamic) with source [{}]"
argument_list|,
name|index
argument_list|,
name|type
argument_list|,
name|updatedMapper
operator|.
name|mappingSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] update_mapping [{}] (dynamic)"
argument_list|,
name|index
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|mdBuilder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
name|updatedMapper
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"illegal state, got wrong mapping task type [{}]"
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|removeIndex
condition|)
block|{
name|indicesService
operator|.
name|removeIndex
argument_list|(
name|index
argument_list|,
literal|"created for mapping processing"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|UpdateTask
condition|)
block|{
operator|(
operator|(
name|UpdateTask
operator|)
name|task
operator|)
operator|.
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|Response
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|dirty
condition|)
block|{
return|return
name|currentState
return|;
block|}
return|return
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Refreshes mappings if they are not the same between original and parsed version      */
DECL|method|refreshMapping
specifier|public
name|void
name|refreshMapping
parameter_list|(
specifier|final
name|String
name|index
parameter_list|,
specifier|final
name|String
name|indexUUID
parameter_list|,
specifier|final
name|String
modifier|...
name|types
parameter_list|)
block|{
name|refreshOrUpdateQueue
operator|.
name|add
argument_list|(
operator|new
name|RefreshTask
argument_list|(
name|index
argument_list|,
name|indexUUID
argument_list|,
name|types
argument_list|)
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"refresh-mapping ["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|types
argument_list|)
operator|+
literal|"]"
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failure during [{}]"
argument_list|,
name|t
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executeRefreshOrUpdate
argument_list|(
name|currentState
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|updateMapping
specifier|public
name|void
name|updateMapping
parameter_list|(
specifier|final
name|String
name|index
parameter_list|,
specifier|final
name|String
name|indexUUID
parameter_list|,
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|CompressedString
name|mappingSource
parameter_list|,
specifier|final
name|Listener
name|listener
parameter_list|)
block|{
name|refreshOrUpdateQueue
operator|.
name|add
argument_list|(
operator|new
name|UpdateTask
argument_list|(
name|index
argument_list|,
name|indexUUID
argument_list|,
name|type
argument_list|,
name|mappingSource
argument_list|,
name|listener
argument_list|)
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"update-mapping ["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|type
operator|+
literal|"]"
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
specifier|final
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executeRefreshOrUpdate
argument_list|(
name|currentState
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|removeMapping
specifier|public
name|void
name|removeMapping
parameter_list|(
specifier|final
name|DeleteMappingClusterStateUpdateRequest
name|request
parameter_list|,
specifier|final
name|ClusterStateUpdateListener
name|listener
parameter_list|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"remove-mapping ["
operator|+
name|request
operator|.
name|type
argument_list|()
operator|+
literal|"]"
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|mustAck
parameter_list|(
name|DiscoveryNode
name|discoveryNode
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAllNodesAcked
parameter_list|(
annotation|@
name|Nullable
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|ClusterStateUpdateResponse
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAckTimeout
parameter_list|()
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|ClusterStateUpdateResponse
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TimeValue
name|ackTimeout
parameter_list|()
block|{
return|return
name|request
operator|.
name|ackTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|request
operator|.
name|masterNodeTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|indices
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"_all"
argument_list|)
argument_list|)
throw|;
block|}
name|MetaData
operator|.
name|Builder
name|builder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|String
name|latestIndexWithout
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|indexName
range|:
name|request
operator|.
name|indices
argument_list|()
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|containsKey
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|removeMapping
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|latestIndexWithout
operator|=
name|indexMetaData
operator|.
name|index
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|changed
condition|)
block|{
throw|throw
operator|new
name|TypeMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|latestIndexWithout
argument_list|)
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|)
throw|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] remove_mapping [{}]"
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|builder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{              }
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|putMapping
specifier|public
name|void
name|putMapping
parameter_list|(
specifier|final
name|PutRequest
name|request
parameter_list|,
specifier|final
name|Listener
name|listener
parameter_list|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"put-mapping ["
operator|+
name|request
operator|.
name|mappingType
operator|+
literal|"]"
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
operator|new
name|TimeoutClusterStateUpdateTask
argument_list|()
block|{
name|CountDownListener
name|countDownListener
decl_stmt|;
comment|// used to count ack responses before confirming operation is complete
annotation|@
name|Override
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|request
operator|.
name|masterTimeout
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
specifier|final
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indicesToClose
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|.
name|indices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"_all"
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|index
range|:
name|request
operator|.
name|indices
control|)
block|{
if|if
condition|(
operator|!
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// pre create indices here and add mappings to them so we can merge the mappings here if needed
for|for
control|(
name|String
name|index
range|:
name|request
operator|.
name|indices
control|)
block|{
if|if
condition|(
name|indicesService
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|createIndex
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|settings
argument_list|()
argument_list|,
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|indicesToClose
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
comment|// only add the current relevant mapping (if exists)
if|if
condition|(
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|containsKey
argument_list|(
name|request
operator|.
name|mappingType
argument_list|)
condition|)
block|{
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|merge
argument_list|(
name|request
operator|.
name|mappingType
argument_list|,
name|indexMetaData
operator|.
name|mappings
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|mappingType
argument_list|)
operator|.
name|source
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|DocumentMapper
argument_list|>
name|newMappers
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DocumentMapper
argument_list|>
name|existingMappers
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|request
operator|.
name|indices
control|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|!=
literal|null
condition|)
block|{
comment|// try and parse it (no need to add it here) so we can bail early in case of parsing exception
name|DocumentMapper
name|newMapper
decl_stmt|;
name|DocumentMapper
name|existingMapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
name|request
operator|.
name|mappingType
argument_list|)
decl_stmt|;
if|if
condition|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
operator|.
name|equals
argument_list|(
name|request
operator|.
name|mappingType
argument_list|)
condition|)
block|{
comment|// _default_ types do not go through merging, but we do test the new settings. Also don't apply the old default
name|newMapper
operator|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|parse
argument_list|(
name|request
operator|.
name|mappingType
argument_list|,
name|request
operator|.
name|mappingSource
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMapper
operator|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|parse
argument_list|(
name|request
operator|.
name|mappingType
argument_list|,
name|request
operator|.
name|mappingSource
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingMapper
operator|!=
literal|null
condition|)
block|{
comment|// first, simulate
name|DocumentMapper
operator|.
name|MergeResult
name|mergeResult
init|=
name|existingMapper
operator|.
name|merge
argument_list|(
name|newMapper
argument_list|,
name|mergeFlags
argument_list|()
operator|.
name|simulate
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|// if we have conflicts, and we are not supposed to ignore them, throw an exception
if|if
condition|(
operator|!
name|request
operator|.
name|ignoreConflicts
operator|&&
name|mergeResult
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MergeMappingException
argument_list|(
name|mergeResult
operator|.
name|conflicts
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|newMappers
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|newMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingMapper
operator|!=
literal|null
condition|)
block|{
name|existingMappers
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|existingMapper
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|String
name|mappingType
init|=
name|request
operator|.
name|mappingType
decl_stmt|;
if|if
condition|(
name|mappingType
operator|==
literal|null
condition|)
block|{
name|mappingType
operator|=
name|newMappers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|type
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|mappingType
operator|.
name|equals
argument_list|(
name|newMappers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"Type name provided does not match type name within mapping definition"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|MapperService
operator|.
name|DEFAULT_MAPPING
operator|.
name|equals
argument_list|(
name|mappingType
argument_list|)
operator|&&
operator|!
name|PercolatorService
operator|.
name|Constants
operator|.
name|TYPE_NAME
operator|.
name|equals
argument_list|(
name|mappingType
argument_list|)
operator|&&
name|mappingType
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"Document mapping type name can't start with '_'"
argument_list|)
throw|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DocumentMapper
argument_list|>
name|entry
range|:
name|newMappers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|index
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// do the actual merge here on the master, and update the mapping source
name|DocumentMapper
name|newMapper
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|CompressedString
name|existingSource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|existingMappers
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|existingSource
operator|=
name|existingMappers
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|mappingSource
argument_list|()
expr_stmt|;
block|}
name|DocumentMapper
name|mergedMapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|merge
argument_list|(
name|newMapper
operator|.
name|type
argument_list|()
argument_list|,
name|newMapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CompressedString
name|updatedSource
init|=
name|mergedMapper
operator|.
name|mappingSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|existingSource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingSource
operator|.
name|equals
argument_list|(
name|updatedSource
argument_list|)
condition|)
block|{
comment|// same source, no changes, ignore it
block|}
else|else
block|{
comment|// use the merged mapping source
name|mappings
operator|.
name|put
argument_list|(
name|index
argument_list|,
operator|new
name|MappingMetaData
argument_list|(
name|mergedMapper
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] update_mapping [{}] with source [{}]"
argument_list|,
name|index
argument_list|,
name|mergedMapper
operator|.
name|type
argument_list|()
argument_list|,
name|updatedSource
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] update_mapping [{}]"
argument_list|,
name|index
argument_list|,
name|mergedMapper
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|mappings
operator|.
name|put
argument_list|(
name|index
argument_list|,
operator|new
name|MappingMetaData
argument_list|(
name|mergedMapper
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] create_mapping [{}] with source [{}]"
argument_list|,
name|index
argument_list|,
name|newMapper
operator|.
name|type
argument_list|()
argument_list|,
name|updatedSource
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] create_mapping [{}]"
argument_list|,
name|index
argument_list|,
name|newMapper
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|mappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no changes, return
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|Response
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
name|MetaData
operator|.
name|Builder
name|builder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|indexName
range|:
name|request
operator|.
name|indices
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
operator|new
name|Index
argument_list|(
name|indexName
argument_list|)
argument_list|)
throw|;
block|}
name|MappingMetaData
name|mappingMd
init|=
name|mappings
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingMd
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|putMapping
argument_list|(
name|mappingMd
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ClusterState
name|updatedState
init|=
name|newClusterStateBuilder
argument_list|()
operator|.
name|state
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|builder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|1
decl_stmt|;
comment|// we want to wait on the master node to apply it on its cluster state
comment|// also wait for nodes that actually have the index created on them to apply the mappings internally
for|for
control|(
name|String
name|index
range|:
name|request
operator|.
name|indices
control|)
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|updatedState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|!=
literal|null
condition|)
block|{
name|counter
operator|+=
name|indexRoutingTable
operator|.
name|numberOfNodesShardsAreAllocatedOn
argument_list|(
name|updatedState
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Expecting {} mapping created responses for other nodes"
argument_list|,
name|counter
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// TODO: adding one to the version is based on knowledge on how the parent class will increment the version
comment|//       move this to the base class or add another callback before publishing the new cluster state so we
comment|//       capture it's version.
name|countDownListener
operator|=
operator|new
name|CountDownListener
argument_list|(
name|counter
argument_list|,
name|currentState
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|mappingCreatedAction
operator|.
name|add
argument_list|(
name|countDownListener
argument_list|,
name|request
operator|.
name|timeout
argument_list|)
expr_stmt|;
return|return
name|updatedState
return|;
block|}
finally|finally
block|{
for|for
control|(
name|String
name|index
range|:
name|indicesToClose
control|)
block|{
name|indicesService
operator|.
name|removeIndex
argument_list|(
name|index
argument_list|,
literal|"created for mapping processing"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
if|if
condition|(
name|countDownListener
operator|!=
literal|null
condition|)
block|{
comment|// the master has applied it on its cluster state
name|countDownListener
operator|.
name|decrementCounter
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|interface|Listener
specifier|public
specifier|static
interface|interface
name|Listener
block|{
DECL|method|onResponse
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
function_decl|;
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
DECL|class|PutRequest
specifier|public
specifier|static
class|class
name|PutRequest
block|{
DECL|field|indices
specifier|final
name|String
index|[]
name|indices
decl_stmt|;
DECL|field|mappingType
specifier|final
name|String
name|mappingType
decl_stmt|;
DECL|field|mappingSource
specifier|final
name|String
name|mappingSource
decl_stmt|;
DECL|field|ignoreConflicts
name|boolean
name|ignoreConflicts
init|=
literal|false
decl_stmt|;
DECL|field|timeout
name|TimeValue
name|timeout
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|masterTimeout
name|TimeValue
name|masterTimeout
init|=
name|MasterNodeOperationRequest
operator|.
name|DEFAULT_MASTER_NODE_TIMEOUT
decl_stmt|;
DECL|method|PutRequest
specifier|public
name|PutRequest
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|String
name|mappingType
parameter_list|,
name|String
name|mappingSource
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
name|this
operator|.
name|mappingType
operator|=
name|mappingType
expr_stmt|;
name|this
operator|.
name|mappingSource
operator|=
name|mappingSource
expr_stmt|;
block|}
DECL|method|ignoreConflicts
specifier|public
name|PutRequest
name|ignoreConflicts
parameter_list|(
name|boolean
name|ignoreConflicts
parameter_list|)
block|{
name|this
operator|.
name|ignoreConflicts
operator|=
name|ignoreConflicts
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timeout
specifier|public
name|PutRequest
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|masterTimeout
specifier|public
name|PutRequest
name|masterTimeout
parameter_list|(
name|TimeValue
name|masterTimeout
parameter_list|)
block|{
name|this
operator|.
name|masterTimeout
operator|=
name|masterTimeout
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|class|Response
specifier|public
specifier|static
class|class
name|Response
block|{
DECL|field|acknowledged
specifier|private
specifier|final
name|boolean
name|acknowledged
decl_stmt|;
DECL|method|Response
specifier|public
name|Response
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
name|this
operator|.
name|acknowledged
operator|=
name|acknowledged
expr_stmt|;
block|}
DECL|method|acknowledged
specifier|public
name|boolean
name|acknowledged
parameter_list|()
block|{
return|return
name|acknowledged
return|;
block|}
block|}
DECL|class|CountDownListener
specifier|private
class|class
name|CountDownListener
implements|implements
name|NodeMappingCreatedAction
operator|.
name|Listener
block|{
DECL|field|countDown
specifier|private
specifier|final
name|CountDown
name|countDown
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|Listener
name|listener
decl_stmt|;
DECL|field|minClusterStateVersion
specifier|private
specifier|final
name|long
name|minClusterStateVersion
decl_stmt|;
comment|/**          * @param countDown              initial counter value          * @param minClusterStateVersion the minimum cluster state version for which accept responses          * @param listener               listener to call when counter reaches 0.          */
DECL|method|CountDownListener
specifier|public
name|CountDownListener
parameter_list|(
name|int
name|countDown
parameter_list|,
name|long
name|minClusterStateVersion
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|countDown
operator|=
operator|new
name|CountDown
argument_list|(
name|countDown
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|minClusterStateVersion
operator|=
name|minClusterStateVersion
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNodeMappingCreated
specifier|public
name|void
name|onNodeMappingCreated
parameter_list|(
name|NodeMappingCreatedAction
operator|.
name|NodeMappingCreatedResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|.
name|clusterStateVersion
argument_list|()
operator|<
name|minClusterStateVersion
condition|)
block|{
return|return;
block|}
name|decrementCounter
argument_list|()
expr_stmt|;
block|}
DECL|method|decrementCounter
specifier|public
name|void
name|decrementCounter
parameter_list|()
block|{
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|mappingCreatedAction
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|Response
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|public
name|void
name|onTimeout
parameter_list|()
block|{
if|if
condition|(
name|countDown
operator|.
name|fastForward
argument_list|()
condition|)
block|{
name|mappingCreatedAction
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|Response
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

