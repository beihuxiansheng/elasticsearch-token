begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Meta data about benchmarks that are currently executing  */
end_comment

begin_class
DECL|class|BenchmarkMetaData
specifier|public
class|class
name|BenchmarkMetaData
implements|implements
name|MetaData
operator|.
name|Custom
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"benchmark"
decl_stmt|;
DECL|field|FACTORY
specifier|public
specifier|static
specifier|final
name|Factory
name|FACTORY
init|=
operator|new
name|Factory
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|BenchmarkMetaData
name|that
init|=
operator|(
name|BenchmarkMetaData
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|entries
operator|.
name|equals
argument_list|(
name|that
operator|.
name|entries
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|entries
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
block|{
DECL|field|state
specifier|private
specifier|final
name|State
name|state
decl_stmt|;
DECL|field|benchmarkId
specifier|private
specifier|final
name|String
name|benchmarkId
decl_stmt|;
DECL|field|nodeids
specifier|private
specifier|final
name|String
index|[]
name|nodeids
decl_stmt|;
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|Entry
name|e
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|this
argument_list|(
name|e
operator|.
name|benchmarkId
argument_list|()
argument_list|,
name|state
argument_list|,
name|e
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|String
name|benchmarkId
parameter_list|,
name|State
name|state
parameter_list|,
name|String
index|[]
name|nodeIds
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|benchmarkId
operator|=
name|benchmarkId
expr_stmt|;
name|this
operator|.
name|nodeids
operator|=
name|nodeIds
expr_stmt|;
block|}
DECL|method|benchmarkId
specifier|public
name|String
name|benchmarkId
parameter_list|()
block|{
return|return
name|this
operator|.
name|benchmarkId
return|;
block|}
DECL|method|state
specifier|public
name|State
name|state
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|nodes
specifier|public
name|String
index|[]
name|nodes
parameter_list|()
block|{
return|return
name|nodeids
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|benchmarkId
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|benchmarkId
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|state
operator|!=
name|entry
operator|.
name|state
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|state
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|benchmarkId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|enum|State
specifier|public
specifier|static
enum|enum
name|State
block|{
DECL|enum constant|STARTED
name|STARTED
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|SUCCESS
name|SUCCESS
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
DECL|enum constant|FAILED
name|FAILED
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
DECL|enum constant|ABORTED
name|ABORTED
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|;
DECL|field|STATES
specifier|private
specifier|static
specifier|final
name|State
index|[]
name|STATES
init|=
operator|new
name|State
index|[
name|State
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|State
name|state
range|:
name|State
operator|.
name|values
argument_list|()
control|)
block|{
assert|assert
name|state
operator|.
name|id
argument_list|()
operator|<
name|STATES
operator|.
name|length
operator|&&
name|state
operator|.
name|id
argument_list|()
operator|>=
literal|0
assert|;
name|STATES
index|[
name|state
operator|.
name|id
argument_list|()
index|]
operator|=
name|state
expr_stmt|;
block|}
block|}
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|State
name|State
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|completed
specifier|public
name|boolean
name|completed
parameter_list|()
block|{
return|return
name|this
operator|==
name|SUCCESS
operator|||
name|this
operator|==
name|FAILED
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|State
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|<
literal|0
operator|||
name|id
operator|>=
name|State
operator|.
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"No benchmark state for value ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|STATES
index|[
name|id
index|]
return|;
block|}
block|}
DECL|field|entries
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Entry
argument_list|>
name|entries
decl_stmt|;
DECL|method|BenchmarkMetaData
specifier|public
name|BenchmarkMetaData
parameter_list|(
name|ImmutableList
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
block|}
DECL|method|BenchmarkMetaData
specifier|public
name|BenchmarkMetaData
parameter_list|(
name|Entry
modifier|...
name|entries
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
DECL|method|entries
specifier|public
name|ImmutableList
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|()
block|{
return|return
name|this
operator|.
name|entries
return|;
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|MetaData
operator|.
name|Custom
operator|.
name|Factory
argument_list|<
name|BenchmarkMetaData
argument_list|>
block|{
annotation|@
name|Override
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|BenchmarkMetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Entry
index|[]
name|entries
init|=
operator|new
name|Entry
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|benchmarkId
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|State
name|state
init|=
name|State
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|nodes
init|=
name|in
operator|.
name|readStringArray
argument_list|()
decl_stmt|;
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|Entry
argument_list|(
name|benchmarkId
argument_list|,
name|state
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BenchmarkMetaData
argument_list|(
name|entries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|BenchmarkMetaData
name|repositories
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|repositories
operator|.
name|entries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|repositories
operator|.
name|entries
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|benchmarkId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|entry
operator|.
name|state
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|entry
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|BenchmarkMetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|BenchmarkMetaData
name|customIndexMetaData
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"benchmarks"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|customIndexMetaData
operator|.
name|entries
argument_list|()
control|)
block|{
name|toXContent
argument_list|(
name|entry
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|entry
operator|.
name|benchmarkId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"state"
argument_list|,
name|entry
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"on_nodes"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|nodeid
range|:
name|entry
operator|.
name|nodes
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|nodeid
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|isPersistent
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|benchmarkId
parameter_list|)
block|{
for|for
control|(
name|Entry
name|e
range|:
name|entries
control|)
block|{
if|if
condition|(
name|e
operator|.
name|benchmarkId
operator|.
name|equals
argument_list|(
name|benchmarkId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

