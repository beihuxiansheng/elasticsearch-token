begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.command
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|MutableShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Allocates an unassigned shard to a specific node. Note, primary allocation will "force"  * allocation which might mean one will loose data if using local gateway..., use with care  * with the<tt>allowPrimary</tt> flag.  */
end_comment

begin_class
DECL|class|AllocateAllocationCommand
specifier|public
class|class
name|AllocateAllocationCommand
implements|implements
name|AllocationCommand
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|nodeId
specifier|private
specifier|final
name|String
name|nodeId
decl_stmt|;
DECL|field|allowPrimary
specifier|private
specifier|final
name|boolean
name|allowPrimary
decl_stmt|;
DECL|method|AllocateAllocationCommand
specifier|public
name|AllocateAllocationCommand
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|boolean
name|allowPrimary
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|allowPrimary
operator|=
name|allowPrimary
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|DiscoveryNode
name|node
init|=
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|resolveNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|MutableShardRouting
name|shardRouting
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MutableShardRouting
name|routing
range|:
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
control|)
block|{
if|if
condition|(
name|routing
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
argument_list|)
condition|)
block|{
comment|// prefer primaries first to allocate
if|if
condition|(
name|shardRouting
operator|==
literal|null
operator|||
name|routing
operator|.
name|primary
argument_list|()
condition|)
block|{
name|shardRouting
operator|=
name|routing
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|shardRouting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[allocate] failed to find "
operator|+
name|shardId
operator|+
literal|" on the list of unassigned shards"
argument_list|)
throw|;
block|}
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|&&
operator|!
name|allowPrimary
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[allocate] trying to allocate a primary shard "
operator|+
name|shardId
operator|+
literal|"], which is disabled"
argument_list|)
throw|;
block|}
name|RoutingNode
name|routingNode
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|allocation
operator|.
name|addIgnoreDisable
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|routingNode
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|shardRouting
argument_list|,
name|routingNode
argument_list|,
name|allocation
argument_list|)
operator|.
name|allowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[allocate] allocation of "
operator|+
name|shardId
operator|+
literal|" on node "
operator|+
name|node
operator|+
literal|" is not allowed"
argument_list|)
throw|;
block|}
comment|// go over and remove it from the unassigned
for|for
control|(
name|Iterator
argument_list|<
name|MutableShardRouting
argument_list|>
name|it
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|!=
name|shardRouting
condition|)
block|{
continue|continue;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|routingNode
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

end_unit

