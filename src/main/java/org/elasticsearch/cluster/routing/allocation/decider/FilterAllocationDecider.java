begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.decider
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|FilterAllocationDecider
specifier|public
class|class
name|FilterAllocationDecider
extends|extends
name|AllocationDecider
block|{
static|static
block|{
name|MetaData
operator|.
name|addDynamicSettings
argument_list|(
literal|"cluster.routing.allocation.include.*"
argument_list|,
literal|"cluster.routing.allocation.exclude.*"
argument_list|)
expr_stmt|;
name|IndexMetaData
operator|.
name|addDynamicSettings
argument_list|(
literal|"index.routing.allocation.include.*"
argument_list|,
literal|"index.routing.allocation.exclude.*"
argument_list|)
expr_stmt|;
block|}
DECL|field|clusterIncludeFilters
specifier|private
specifier|volatile
name|DiscoveryNodeFilters
name|clusterIncludeFilters
decl_stmt|;
DECL|field|clusterExcludeFilters
specifier|private
specifier|volatile
name|DiscoveryNodeFilters
name|clusterExcludeFilters
decl_stmt|;
DECL|method|FilterAllocationDecider
annotation|@
name|Inject
specifier|public
name|FilterAllocationDecider
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NodeSettingsService
name|nodeSettingsService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|includeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
literal|"cluster.routing.allocation.include."
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterIncludeFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|clusterIncludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|includeMap
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|excludeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
literal|"cluster.routing.allocation.exclude."
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterExcludeFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|clusterExcludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|excludeMap
argument_list|)
expr_stmt|;
block|}
name|nodeSettingsService
operator|.
name|addListener
argument_list|(
operator|new
name|ApplySettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|canAllocate
annotation|@
name|Override
specifier|public
name|Decision
name|canAllocate
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|shouldFilter
argument_list|(
name|shardRouting
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
condition|?
name|Decision
operator|.
name|NO
else|:
name|Decision
operator|.
name|YES
return|;
block|}
DECL|method|canRemain
annotation|@
name|Override
specifier|public
name|boolean
name|canRemain
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
operator|!
name|shouldFilter
argument_list|(
name|shardRouting
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
return|;
block|}
DECL|method|shouldFilter
specifier|private
name|boolean
name|shouldFilter
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
if|if
condition|(
name|clusterIncludeFilters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|clusterIncludeFilters
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|clusterExcludeFilters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clusterExcludeFilters
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|IndexMetaData
name|indexMd
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMd
operator|.
name|includeFilters
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|indexMd
operator|.
name|includeFilters
argument_list|()
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|indexMd
operator|.
name|excludeFilters
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexMd
operator|.
name|excludeFilters
argument_list|()
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|class|ApplySettings
class|class
name|ApplySettings
implements|implements
name|NodeSettingsService
operator|.
name|Listener
block|{
DECL|method|onRefreshSettings
annotation|@
name|Override
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|includeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
literal|"cluster.routing.allocation.include."
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterIncludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|includeMap
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|excludeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
literal|"cluster.routing.allocation.exclude."
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|excludeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterExcludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|excludeMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

