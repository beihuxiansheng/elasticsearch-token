begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.command
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|MutableShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_comment
comment|/**  * A command that moves a shard from a specific node to another node. Note, the shards  * need to be in "started" state in order to be moved if from is specified.  */
end_comment

begin_class
DECL|class|MoveAllocationCommand
specifier|public
class|class
name|MoveAllocationCommand
implements|implements
name|AllocationCommand
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
annotation|@
name|Nullable
DECL|field|fromNode
specifier|private
specifier|final
name|String
name|fromNode
decl_stmt|;
DECL|field|toNode
specifier|private
specifier|final
name|String
name|toNode
decl_stmt|;
DECL|method|MoveAllocationCommand
specifier|public
name|MoveAllocationCommand
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|Nullable
name|String
name|fromNode
parameter_list|,
name|String
name|toNode
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|fromNode
operator|=
name|fromNode
expr_stmt|;
name|this
operator|.
name|toNode
operator|=
name|toNode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|DiscoveryNode
name|from
init|=
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|resolveNode
argument_list|(
name|fromNode
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|to
init|=
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|resolveNode
argument_list|(
name|toNode
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|MutableShardRouting
name|shardRouting
range|:
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|from
operator|.
name|id
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|found
operator|=
literal|true
expr_stmt|;
comment|// TODO we can possibly support also relocating cases, where we cancel relocation and move...
if|if
condition|(
operator|!
name|shardRouting
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[move_allocation] can't move "
operator|+
name|shardId
operator|+
literal|", shard is not started (state = "
operator|+
name|shardRouting
operator|.
name|state
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|RoutingNode
name|toRoutingNode
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|to
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|AllocationDecider
operator|.
name|Decision
name|decision
init|=
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|shardRouting
argument_list|,
name|toRoutingNode
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|decision
operator|.
name|allowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[move_allocation] can't move "
operator|+
name|shardId
operator|+
literal|", from "
operator|+
name|from
operator|+
literal|", to "
operator|+
name|to
operator|+
literal|", since its not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|decision
operator|.
name|allocate
argument_list|()
condition|)
block|{
comment|// its being throttled, maybe have a flag to take it into account and fail? for now, just do it since the "user" wants it...
block|}
name|toRoutingNode
operator|.
name|add
argument_list|(
operator|new
name|MutableShardRouting
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|id
argument_list|()
argument_list|,
name|toRoutingNode
operator|.
name|nodeId
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|primary
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|shardRouting
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|shardRouting
operator|.
name|relocate
argument_list|(
name|toRoutingNode
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[move_allocation] can't move "
operator|+
name|shardId
operator|+
literal|", failed to find it on node "
operator|+
name|from
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

