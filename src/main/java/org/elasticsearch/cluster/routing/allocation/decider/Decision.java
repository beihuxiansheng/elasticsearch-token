begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.decider
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|Decision
specifier|public
specifier|abstract
class|class
name|Decision
block|{
DECL|field|ALWAYS
specifier|public
specifier|static
specifier|final
name|Decision
name|ALWAYS
init|=
operator|new
name|Single
argument_list|(
name|Type
operator|.
name|YES
argument_list|)
decl_stmt|;
DECL|field|YES
specifier|public
specifier|static
specifier|final
name|Decision
name|YES
init|=
operator|new
name|Single
argument_list|(
name|Type
operator|.
name|YES
argument_list|)
decl_stmt|;
DECL|field|NO
specifier|public
specifier|static
specifier|final
name|Decision
name|NO
init|=
operator|new
name|Single
argument_list|(
name|Type
operator|.
name|NO
argument_list|)
decl_stmt|;
DECL|field|THROTTLE
specifier|public
specifier|static
specifier|final
name|Decision
name|THROTTLE
init|=
operator|new
name|Single
argument_list|(
name|Type
operator|.
name|THROTTLE
argument_list|)
decl_stmt|;
DECL|method|single
specifier|public
specifier|static
name|Decision
name|single
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|explanation
parameter_list|,
name|Object
modifier|...
name|explanationParams
parameter_list|)
block|{
return|return
operator|new
name|Single
argument_list|(
name|type
argument_list|,
name|explanation
argument_list|,
name|explanationParams
argument_list|)
return|;
block|}
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|YES
name|YES
block|,
DECL|enum constant|NO
name|NO
block|,
DECL|enum constant|THROTTLE
name|THROTTLE
block|}
DECL|method|type
specifier|public
specifier|abstract
name|Type
name|type
parameter_list|()
function_decl|;
DECL|class|Single
specifier|public
specifier|static
class|class
name|Single
extends|extends
name|Decision
block|{
DECL|field|type
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|explanation
specifier|private
specifier|final
name|String
name|explanation
decl_stmt|;
DECL|field|explanationParams
specifier|private
specifier|final
name|Object
index|[]
name|explanationParams
decl_stmt|;
DECL|method|Single
specifier|public
name|Single
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
literal|null
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Single
specifier|public
name|Single
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|explanation
parameter_list|,
name|Object
modifier|...
name|explanationParams
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|explanation
operator|=
name|explanation
expr_stmt|;
name|this
operator|.
name|explanationParams
operator|=
name|explanationParams
expr_stmt|;
block|}
DECL|method|type
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|explanation
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|+
literal|"()"
return|;
block|}
return|return
name|type
operator|+
literal|"("
operator|+
name|String
operator|.
name|format
argument_list|(
name|explanation
argument_list|,
name|explanationParams
argument_list|)
operator|+
literal|")"
return|;
block|}
block|}
DECL|class|Multi
specifier|public
specifier|static
class|class
name|Multi
extends|extends
name|Decision
block|{
DECL|field|decisions
specifier|private
specifier|final
name|List
argument_list|<
name|Decision
argument_list|>
name|decisions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|method|add
specifier|public
name|Multi
name|add
parameter_list|(
name|Decision
name|decision
parameter_list|)
block|{
name|decisions
operator|.
name|add
argument_list|(
name|decision
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|Type
name|type
parameter_list|()
block|{
name|Type
name|ret
init|=
name|Type
operator|.
name|YES
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decisions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Type
name|type
init|=
name|decisions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|NO
condition|)
block|{
return|return
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|THROTTLE
condition|)
block|{
name|ret
operator|=
name|type
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Decision
name|decision
range|:
name|decisions
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|decision
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

