begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.decider
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * This allocation decider allows shard allocations via the cluster wide settings {@link #CLUSTER_ROUTING_ALLOCATION_ENABLE}  * and the per index setting {@link #INDEX_ROUTING_ALLOCATION_ENABLE}. The per index settings overrides the cluster wide  * setting. Depending on the  *  * Both settings can have the following values:  *<ul>  *<li><code>NONE</code>, no shard allocation is allowed.  *<li><code>NEW_PRIMARIES</code> only primary shards of new indices are allowed to be allocated  *<li><code>PRIMARIES</code> only primary shards (of any index) are allowed to be allocated  *<li><code>ALL</code> all shards are allowed to be allocated  *</ul>  */
end_comment

begin_class
DECL|class|EnableAllocationDecider
specifier|public
class|class
name|EnableAllocationDecider
extends|extends
name|AllocationDecider
implements|implements
name|NodeSettingsService
operator|.
name|Listener
block|{
DECL|field|CLUSTER_ROUTING_ALLOCATION_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_ROUTING_ALLOCATION_ENABLE
init|=
literal|"cluster.routing.allocation.enable"
decl_stmt|;
DECL|field|INDEX_ROUTING_ALLOCATION_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_ROUTING_ALLOCATION_ENABLE
init|=
literal|"index.routing.allocation.enable"
decl_stmt|;
DECL|field|enable
specifier|private
specifier|volatile
name|Allocation
name|enable
decl_stmt|;
annotation|@
name|Inject
DECL|method|EnableAllocationDecider
specifier|public
name|EnableAllocationDecider
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NodeSettingsService
name|nodeSettingsService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|enable
operator|=
name|Allocation
operator|.
name|parse
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|CLUSTER_ROUTING_ALLOCATION_ENABLE
argument_list|,
name|Allocation
operator|.
name|ALL
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeSettingsService
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|canAllocate
specifier|public
name|Decision
name|canAllocate
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
if|if
condition|(
name|allocation
operator|.
name|ignoreDisable
argument_list|()
condition|)
block|{
return|return
name|Decision
operator|.
name|YES
return|;
block|}
name|Settings
name|indexSettings
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|()
decl_stmt|;
name|String
name|enableIndexValue
init|=
name|indexSettings
operator|.
name|get
argument_list|(
name|INDEX_ROUTING_ALLOCATION_ENABLE
argument_list|)
decl_stmt|;
specifier|final
name|Allocation
name|enable
decl_stmt|;
if|if
condition|(
name|enableIndexValue
operator|!=
literal|null
condition|)
block|{
name|enable
operator|=
name|Allocation
operator|.
name|parse
argument_list|(
name|enableIndexValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|enable
operator|=
name|this
operator|.
name|enable
expr_stmt|;
block|}
switch|switch
condition|(
name|enable
condition|)
block|{
case|case
name|ALL
case|:
return|return
name|Decision
operator|.
name|YES
return|;
case|case
name|NONE
case|:
return|return
name|Decision
operator|.
name|NO
return|;
case|case
name|NEW_PRIMARIES
case|:
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|&&
operator|!
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|shard
argument_list|(
name|shardRouting
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|primaryAllocatedPostApi
argument_list|()
condition|)
block|{
return|return
name|Decision
operator|.
name|YES
return|;
block|}
else|else
block|{
return|return
name|Decision
operator|.
name|NO
return|;
block|}
case|case
name|PRIMARIES
case|:
return|return
name|shardRouting
operator|.
name|primary
argument_list|()
condition|?
name|Decision
operator|.
name|YES
else|:
name|Decision
operator|.
name|NO
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Unknown allocation option"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Allocation
name|enable
init|=
name|Allocation
operator|.
name|parse
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|CLUSTER_ROUTING_ALLOCATION_ENABLE
argument_list|,
name|this
operator|.
name|enable
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|enable
operator|!=
name|this
operator|.
name|enable
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [cluster.routing.allocation.enable] from [{}] to [{}]"
argument_list|,
name|this
operator|.
name|enable
argument_list|,
name|enable
argument_list|)
expr_stmt|;
name|EnableAllocationDecider
operator|.
name|this
operator|.
name|enable
operator|=
name|enable
expr_stmt|;
block|}
block|}
DECL|enum|Allocation
specifier|public
enum|enum
name|Allocation
block|{
DECL|enum constant|NONE
name|NONE
block|,
DECL|enum constant|NEW_PRIMARIES
name|NEW_PRIMARIES
block|,
DECL|enum constant|PRIMARIES
name|PRIMARIES
block|,
DECL|enum constant|ALL
name|ALL
block|;
DECL|method|parse
specifier|public
specifier|static
name|Allocation
name|parse
parameter_list|(
name|String
name|strValue
parameter_list|)
block|{
if|if
condition|(
name|strValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|strValue
operator|=
name|strValue
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|Allocation
operator|.
name|valueOf
argument_list|(
name|strValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Illegal allocation.enable value ["
operator|+
name|strValue
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

