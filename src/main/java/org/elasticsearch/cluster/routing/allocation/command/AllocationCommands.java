begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.command
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|AllocationCommands
specifier|public
class|class
name|AllocationCommands
block|{
DECL|field|commands
specifier|private
specifier|final
name|List
argument_list|<
name|AllocationCommand
argument_list|>
name|commands
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|method|AllocationCommands
specifier|public
name|AllocationCommands
parameter_list|(
name|AllocationCommand
modifier|...
name|commands
parameter_list|)
block|{
if|if
condition|(
name|commands
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|commands
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|commands
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add
specifier|public
name|AllocationCommands
name|add
parameter_list|(
name|AllocationCommand
modifier|...
name|commands
parameter_list|)
block|{
if|if
condition|(
name|commands
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|commands
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|commands
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
for|for
control|(
name|AllocationCommand
name|command
range|:
name|commands
control|)
block|{
name|command
operator|.
name|execute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

