begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.decider
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|MutableShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * This {@link AllocationDecider} controls re-balancing operations based on the  * cluster wide active shard state. This decided can not be configured in  * real-time and should be pre-cluster start via  *<tt>cluster.routing.allocation.allow_rebalance</tt>. This setting respects the following  * values:  *<ul>  *<li><tt>indices_primaries_active</tt> - Re-balancing is allowed only once all  * primary shards on all indices are active.</li>  *   *<li><tt>indices_all_active</tt> - Re-balancing is allowed only once all  * shards on all indices are active.</li>  *   *<li><tt>always</tt> - Re-balancing is allowed once a shard replication group  * is active</li>  *</ul>  */
end_comment

begin_class
DECL|class|ClusterRebalanceAllocationDecider
specifier|public
class|class
name|ClusterRebalanceAllocationDecider
extends|extends
name|AllocationDecider
block|{
comment|/**      * An enum representation for the configured re-balance type.       */
DECL|enum|ClusterRebalanceType
specifier|public
specifier|static
enum|enum
name|ClusterRebalanceType
block|{
comment|/**          * Re-balancing is allowed once a shard replication group is active          */
DECL|enum constant|ALWAYS
name|ALWAYS
block|,
comment|/**          * Re-balancing is allowed only once all primary shards on all indices are active.          */
DECL|enum constant|INDICES_PRIMARIES_ACTIVE
name|INDICES_PRIMARIES_ACTIVE
block|,
comment|/**          * Re-balancing is allowed only once all shards on all indices are active.           */
DECL|enum constant|INDICES_ALL_ACTIVE
name|INDICES_ALL_ACTIVE
block|}
DECL|field|type
specifier|private
specifier|final
name|ClusterRebalanceType
name|type
decl_stmt|;
annotation|@
name|Inject
DECL|method|ClusterRebalanceAllocationDecider
specifier|public
name|ClusterRebalanceAllocationDecider
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|String
name|allowRebalance
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"cluster.routing.allocation.allow_rebalance"
argument_list|,
literal|"indices_all_active"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"always"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
condition|)
block|{
name|type
operator|=
name|ClusterRebalanceType
operator|.
name|ALWAYS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"indices_primaries_active"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
operator|||
literal|"indicesPrimariesActive"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
condition|)
block|{
name|type
operator|=
name|ClusterRebalanceType
operator|.
name|INDICES_PRIMARIES_ACTIVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"indices_all_active"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
operator|||
literal|"indicesAllActive"
operator|.
name|equalsIgnoreCase
argument_list|(
name|allowRebalance
argument_list|)
condition|)
block|{
name|type
operator|=
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[cluster.routing.allocation.allow_rebalance] has a wrong value {}, defaulting to 'indices_all_active'"
argument_list|,
name|allowRebalance
argument_list|)
expr_stmt|;
name|type
operator|=
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"using [cluster.routing.allocation.allow_rebalance] with [{}]"
argument_list|,
name|type
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|canRebalance
specifier|public
name|Decision
name|canRebalance
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|ClusterRebalanceType
operator|.
name|INDICES_PRIMARIES_ACTIVE
condition|)
block|{
comment|// check if there are unassigned primaries.
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|hasUnassignedPrimaries
argument_list|()
condition|)
block|{
return|return
name|Decision
operator|.
name|NO
return|;
block|}
comment|// check if there are initializing primaries that don't have a relocatingNodeId entry.
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|hasInactivePrimaries
argument_list|()
condition|)
block|{
return|return
name|Decision
operator|.
name|NO
return|;
block|}
return|return
name|Decision
operator|.
name|YES
return|;
block|}
if|if
condition|(
name|type
operator|==
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
condition|)
block|{
comment|// check if there are unassigned shards.
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|hasUnassignedShards
argument_list|()
condition|)
block|{
return|return
name|Decision
operator|.
name|NO
return|;
block|}
comment|// in case all indices are assigned, are there initializing shards which
comment|// are not relocating?
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|hasInactiveShards
argument_list|()
condition|)
block|{
return|return
name|Decision
operator|.
name|NO
return|;
block|}
block|}
comment|// type == Type.ALWAYS
return|return
name|Decision
operator|.
name|YES
return|;
block|}
block|}
end_class

end_unit

