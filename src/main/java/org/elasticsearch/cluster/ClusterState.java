begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexTemplateMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ClusterState
specifier|public
class|class
name|ClusterState
implements|implements
name|ToXContent
block|{
DECL|enum|ClusterStateStatus
specifier|public
specifier|static
enum|enum
name|ClusterStateStatus
block|{
DECL|enum constant|UNKNOWN
name|UNKNOWN
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|RECEIVED
name|RECEIVED
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
DECL|enum constant|BEING_APPLIED
name|BEING_APPLIED
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
DECL|enum constant|APPLIED
name|APPLIED
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|ClusterStateStatus
name|ClusterStateStatus
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
block|}
DECL|interface|Custom
specifier|public
interface|interface
name|Custom
block|{
DECL|interface|Factory
interface|interface
name|Factory
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
block|{
DECL|method|type
name|String
name|type
parameter_list|()
function_decl|;
DECL|method|readFrom
name|T
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|writeTo
name|void
name|writeTo
parameter_list|(
name|T
name|customState
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|toXContent
name|void
name|toXContent
parameter_list|(
name|T
name|customState
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
function_decl|;
block|}
block|}
DECL|field|customFactories
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Custom
operator|.
name|Factory
argument_list|>
name|customFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Register a custom index meta data factory. Make sure to call it from a static block.      */
DECL|method|registerFactory
specifier|public
specifier|static
name|void
name|registerFactory
parameter_list|(
name|String
name|type
parameter_list|,
name|Custom
operator|.
name|Factory
name|factory
parameter_list|)
block|{
name|customFactories
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|lookupFactory
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|Custom
operator|.
name|Factory
argument_list|<
name|T
argument_list|>
name|lookupFactory
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|customFactories
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|lookupFactorySafe
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|Custom
operator|.
name|Factory
argument_list|<
name|T
argument_list|>
name|lookupFactorySafe
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|Custom
operator|.
name|Factory
argument_list|<
name|T
argument_list|>
name|factory
init|=
name|customFactories
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No custom state factory registered for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|factory
return|;
block|}
DECL|field|UNKNOWN_VERSION
specifier|public
specifier|static
specifier|final
name|long
name|UNKNOWN_VERSION
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|routingTable
specifier|private
specifier|final
name|RoutingTable
name|routingTable
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|final
name|DiscoveryNodes
name|nodes
decl_stmt|;
DECL|field|metaData
specifier|private
specifier|final
name|MetaData
name|metaData
decl_stmt|;
DECL|field|blocks
specifier|private
specifier|final
name|ClusterBlocks
name|blocks
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
comment|// built on demand
DECL|field|routingNodes
specifier|private
specifier|volatile
name|RoutingNodes
name|routingNodes
decl_stmt|;
DECL|field|status
specifier|private
specifier|volatile
name|ClusterStateStatus
name|status
decl_stmt|;
DECL|method|ClusterState
specifier|public
name|ClusterState
parameter_list|(
name|long
name|version
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|this
argument_list|(
name|state
operator|.
name|clusterName
argument_list|,
name|version
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|state
operator|.
name|routingTable
argument_list|()
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
argument_list|,
name|state
operator|.
name|blocks
argument_list|()
argument_list|,
name|state
operator|.
name|customs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ClusterState
specifier|public
name|ClusterState
parameter_list|(
name|ClusterName
name|clusterName
parameter_list|,
name|long
name|version
parameter_list|,
name|MetaData
name|metaData
parameter_list|,
name|RoutingTable
name|routingTable
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|ClusterBlocks
name|blocks
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|this
operator|.
name|routingTable
operator|=
name|routingTable
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|customs
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|ClusterStateStatus
operator|.
name|UNKNOWN
expr_stmt|;
block|}
DECL|method|status
specifier|public
name|ClusterStateStatus
name|status
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|status
specifier|public
name|ClusterState
name|status
parameter_list|(
name|ClusterStateStatus
name|newStatus
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|newStatus
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|version
argument_list|()
return|;
block|}
DECL|method|nodes
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodes
return|;
block|}
DECL|method|getNodes
specifier|public
name|DiscoveryNodes
name|getNodes
parameter_list|()
block|{
return|return
name|nodes
argument_list|()
return|;
block|}
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|this
operator|.
name|metaData
return|;
block|}
DECL|method|getMetaData
specifier|public
name|MetaData
name|getMetaData
parameter_list|()
block|{
return|return
name|metaData
argument_list|()
return|;
block|}
DECL|method|routingTable
specifier|public
name|RoutingTable
name|routingTable
parameter_list|()
block|{
return|return
name|routingTable
return|;
block|}
DECL|method|getRoutingTable
specifier|public
name|RoutingTable
name|getRoutingTable
parameter_list|()
block|{
return|return
name|routingTable
argument_list|()
return|;
block|}
DECL|method|routingNodes
specifier|public
name|RoutingNodes
name|routingNodes
parameter_list|()
block|{
return|return
name|routingTable
operator|.
name|routingNodes
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getRoutingNodes
specifier|public
name|RoutingNodes
name|getRoutingNodes
parameter_list|()
block|{
return|return
name|readOnlyRoutingNodes
argument_list|()
return|;
block|}
DECL|method|blocks
specifier|public
name|ClusterBlocks
name|blocks
parameter_list|()
block|{
return|return
name|this
operator|.
name|blocks
return|;
block|}
DECL|method|getBlocks
specifier|public
name|ClusterBlocks
name|getBlocks
parameter_list|()
block|{
return|return
name|blocks
return|;
block|}
DECL|method|customs
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|()
block|{
return|return
name|this
operator|.
name|customs
return|;
block|}
DECL|method|getCustoms
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|getCustoms
parameter_list|()
block|{
return|return
name|this
operator|.
name|customs
return|;
block|}
DECL|method|getClusterName
specifier|public
name|ClusterName
name|getClusterName
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterName
return|;
block|}
comment|/**      * Returns a built (on demand) routing nodes view of the routing table.<b>NOTE, the routing nodes      * are mutable, use them just for read operations</b>      */
DECL|method|readOnlyRoutingNodes
specifier|public
name|RoutingNodes
name|readOnlyRoutingNodes
parameter_list|()
block|{
if|if
condition|(
name|routingNodes
operator|!=
literal|null
condition|)
block|{
return|return
name|routingNodes
return|;
block|}
name|routingNodes
operator|=
name|routingTable
operator|.
name|routingNodes
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|routingNodes
return|;
block|}
DECL|method|prettyPrint
specifier|public
name|String
name|prettyPrint
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"version: "
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"meta data version: "
argument_list|)
operator|.
name|append
argument_list|(
name|metaData
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|nodes
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|routingTable
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\"}"
return|;
block|}
block|}
DECL|enum|Metric
specifier|public
enum|enum
name|Metric
block|{
DECL|enum constant|VERSION
name|VERSION
argument_list|(
literal|"version"
argument_list|)
block|,
DECL|enum constant|MASTER_NODE
name|MASTER_NODE
argument_list|(
literal|"master_node"
argument_list|)
block|,
DECL|enum constant|BLOCKS
name|BLOCKS
argument_list|(
literal|"blocks"
argument_list|)
block|,
DECL|enum constant|NODES
name|NODES
argument_list|(
literal|"nodes"
argument_list|)
block|,
DECL|enum constant|METADATA
name|METADATA
argument_list|(
literal|"metadata"
argument_list|)
block|,
DECL|enum constant|ROUTING_TABLE
name|ROUTING_TABLE
argument_list|(
literal|"routing_table"
argument_list|)
block|,
DECL|enum constant|ROUTING_NODES
name|ROUTING_NODES
argument_list|(
literal|"routing_nodes"
argument_list|)
block|,
DECL|enum constant|CUSTOMS
name|CUSTOMS
argument_list|(
literal|"customs"
argument_list|)
block|;
DECL|field|valueToEnum
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|valueToEnum
decl_stmt|;
static|static
block|{
name|valueToEnum
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|Metric
operator|.
name|values
argument_list|()
control|)
block|{
name|valueToEnum
operator|.
name|put
argument_list|(
name|metric
operator|.
name|value
argument_list|,
name|metric
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|Metric
specifier|private
name|Metric
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|parseString
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|Metric
argument_list|>
name|parseString
parameter_list|(
name|String
name|param
parameter_list|,
name|boolean
name|ignoreUnknown
parameter_list|)
block|{
name|String
index|[]
name|metrics
init|=
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|param
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|Metric
argument_list|>
name|result
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Metric
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|metric
range|:
name|metrics
control|)
block|{
if|if
condition|(
literal|"_all"
operator|.
name|equals
argument_list|(
name|metric
argument_list|)
condition|)
block|{
name|result
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Metric
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
block|}
name|Metric
name|m
init|=
name|valueToEnum
operator|.
name|get
argument_list|(
name|metric
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ignoreUnknown
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown metric ["
operator|+
name|metric
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|EnumSet
argument_list|<
name|Metric
argument_list|>
name|metrics
init|=
name|Metric
operator|.
name|parseString
argument_list|(
name|params
operator|.
name|param
argument_list|(
literal|"metric"
argument_list|,
literal|"_all"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|VERSION
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|MASTER_NODE
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"master_node"
argument_list|,
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|BLOCKS
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"blocks"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"global"
argument_list|)
expr_stmt|;
for|for
control|(
name|ClusterBlock
name|block
range|:
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
control|)
block|{
name|block
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blocks
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|entry
range|:
name|blocks
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ClusterBlock
name|block
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|block
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|// nodes
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|NODES
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"nodes"
argument_list|)
expr_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
name|node
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"transport_address"
argument_list|,
name|node
operator|.
name|address
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"attributes"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
range|:
name|node
operator|.
name|attributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|// meta data
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|METADATA
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"metadata"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"templates"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|cursor
range|:
name|metaData
argument_list|()
operator|.
name|templates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexTemplateMetaData
name|templateMetaData
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|templateMetaData
operator|.
name|name
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"template"
argument_list|,
name|templateMetaData
operator|.
name|template
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"order"
argument_list|,
name|templateMetaData
operator|.
name|order
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|templateMetaData
operator|.
name|settings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|CompressedString
argument_list|>
name|cursor1
range|:
name|templateMetaData
operator|.
name|mappings
argument_list|()
control|)
block|{
name|byte
index|[]
name|mappingSource
init|=
name|cursor1
operator|.
name|value
operator|.
name|uncompressed
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|mappingSource
argument_list|)
operator|.
name|createParser
argument_list|(
name|mappingSource
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|parser
operator|.
name|map
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|mapping
operator|.
name|containsKey
argument_list|(
name|cursor1
operator|.
name|key
argument_list|)
condition|)
block|{
comment|// the type name is the root value, reduce it
name|mapping
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|mapping
operator|.
name|get
argument_list|(
name|cursor1
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|cursor1
operator|.
name|key
argument_list|)
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"state"
argument_list|,
name|indexMetaData
operator|.
name|state
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|indexMetaData
operator|.
name|settings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|mappings
argument_list|()
control|)
block|{
name|byte
index|[]
name|mappingSource
init|=
name|cursor
operator|.
name|value
operator|.
name|source
argument_list|()
operator|.
name|uncompressed
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|mappingSource
argument_list|)
operator|.
name|createParser
argument_list|(
name|mappingSource
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|parser
operator|.
name|map
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|mapping
operator|.
name|containsKey
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
condition|)
block|{
comment|// the type name is the root value, reduce it
name|mapping
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|mapping
operator|.
name|get
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"aliases"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|aliases
argument_list|()
operator|.
name|keys
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MetaData
operator|.
name|Custom
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|customs
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|MetaData
operator|.
name|lookupFactorySafe
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
operator|.
name|toXContent
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|// routing table
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|ROUTING_TABLE
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"routing_table"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexRoutingTable
name|indexRoutingTable
range|:
name|routingTable
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|indexRoutingTable
operator|.
name|index
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"shards"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexShardRoutingTable
name|indexShardRoutingTable
range|:
name|indexRoutingTable
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|indexShardRoutingTable
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|indexShardRoutingTable
control|)
block|{
name|shardRouting
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|// routing nodes
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|ROUTING_NODES
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"routing_nodes"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"unassigned"
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
control|)
block|{
name|shardRouting
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"nodes"
argument_list|)
expr_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|readOnlyRoutingNodes
argument_list|()
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|routingNode
operator|.
name|nodeId
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|routingNode
control|)
block|{
name|shardRouting
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|CUSTOMS
argument_list|)
condition|)
block|{
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|customs
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|lookupFactorySafe
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
operator|.
name|toXContent
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|ClusterName
name|clusterName
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|clusterName
argument_list|)
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|state
argument_list|)
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
literal|0
decl_stmt|;
DECL|field|metaData
specifier|private
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|EMPTY_META_DATA
decl_stmt|;
DECL|field|routingTable
specifier|private
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|EMPTY_ROUTING_TABLE
decl_stmt|;
DECL|field|nodes
specifier|private
name|DiscoveryNodes
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|EMPTY_NODES
decl_stmt|;
DECL|field|blocks
specifier|private
name|ClusterBlocks
name|blocks
init|=
name|ClusterBlocks
operator|.
name|EMPTY_CLUSTER_BLOCK
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|this
operator|.
name|clusterName
operator|=
name|state
operator|.
name|clusterName
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|state
operator|.
name|version
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|state
operator|.
name|nodes
argument_list|()
expr_stmt|;
name|this
operator|.
name|routingTable
operator|=
name|state
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|state
operator|.
name|metaData
argument_list|()
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|state
operator|.
name|blocks
argument_list|()
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|state
operator|.
name|customs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|ClusterName
name|clusterName
parameter_list|)
block|{
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
block|}
DECL|method|nodes
specifier|public
name|Builder
name|nodes
parameter_list|(
name|DiscoveryNodes
operator|.
name|Builder
name|nodesBuilder
parameter_list|)
block|{
return|return
name|nodes
argument_list|(
name|nodesBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|nodes
specifier|public
name|Builder
name|nodes
parameter_list|(
name|DiscoveryNodes
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|routingTable
specifier|public
name|Builder
name|routingTable
parameter_list|(
name|RoutingTable
operator|.
name|Builder
name|routingTable
parameter_list|)
block|{
return|return
name|routingTable
argument_list|(
name|routingTable
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|routingResult
specifier|public
name|Builder
name|routingResult
parameter_list|(
name|RoutingAllocation
operator|.
name|Result
name|routingResult
parameter_list|)
block|{
name|this
operator|.
name|routingTable
operator|=
name|routingResult
operator|.
name|routingTable
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|routingTable
specifier|public
name|Builder
name|routingTable
parameter_list|(
name|RoutingTable
name|routingTable
parameter_list|)
block|{
name|this
operator|.
name|routingTable
operator|=
name|routingTable
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|metaData
specifier|public
name|Builder
name|metaData
parameter_list|(
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
parameter_list|)
block|{
return|return
name|metaData
argument_list|(
name|metaDataBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|metaData
specifier|public
name|Builder
name|metaData
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|blocks
specifier|public
name|Builder
name|blocks
parameter_list|(
name|ClusterBlocks
operator|.
name|Builder
name|blocksBuilder
parameter_list|)
block|{
return|return
name|blocks
argument_list|(
name|blocksBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|blocks
specifier|public
name|Builder
name|blocks
parameter_list|(
name|ClusterBlocks
name|blocks
parameter_list|)
block|{
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|Builder
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCustom
specifier|public
name|Custom
name|getCustom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|customs
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|putCustom
specifier|public
name|Builder
name|putCustom
parameter_list|(
name|String
name|type
parameter_list|,
name|Custom
name|custom
parameter_list|)
block|{
name|customs
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|custom
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeCustom
specifier|public
name|Builder
name|removeCustom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|customs
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|ClusterState
name|build
parameter_list|()
block|{
return|return
operator|new
name|ClusterState
argument_list|(
name|clusterName
argument_list|,
name|version
argument_list|,
name|metaData
argument_list|,
name|routingTable
argument_list|,
name|nodes
argument_list|,
name|blocks
argument_list|,
name|customs
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toBytes
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|ClusterState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|os
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|writeTo
argument_list|(
name|state
argument_list|,
name|os
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|bytes
argument_list|()
operator|.
name|toBytes
argument_list|()
return|;
block|}
comment|/**          * @param data               input bytes          * @param localNode          used to set the local node in the cluster state.          */
DECL|method|fromBytes
specifier|public
specifier|static
name|ClusterState
name|fromBytes
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|DiscoveryNode
name|localNode
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readFrom
argument_list|(
operator|new
name|BytesStreamInput
argument_list|(
name|data
argument_list|)
argument_list|,
name|localNode
argument_list|)
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|.
name|clusterName
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|MetaData
operator|.
name|Builder
operator|.
name|writeTo
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|RoutingTable
operator|.
name|Builder
operator|.
name|writeTo
argument_list|(
name|state
operator|.
name|routingTable
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
operator|.
name|writeTo
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|ClusterBlocks
operator|.
name|Builder
operator|.
name|writeClusterBlocks
argument_list|(
name|state
operator|.
name|blocks
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|state
operator|.
name|customs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|state
operator|.
name|customs
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|lookupFactorySafe
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
operator|.
name|writeTo
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * @param in                 input stream          * @param localNode          used to set the local node in the cluster state. can be null.          */
DECL|method|readFrom
specifier|public
specifier|static
name|ClusterState
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
annotation|@
name|Nullable
name|DiscoveryNode
name|localNode
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterName
name|clusterName
init|=
name|ClusterName
operator|.
name|readClusterName
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|builder
operator|.
name|metaData
operator|=
name|MetaData
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|builder
operator|.
name|routingTable
operator|=
name|RoutingTable
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nodes
operator|=
name|DiscoveryNodes
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|,
name|localNode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|blocks
operator|=
name|ClusterBlocks
operator|.
name|Builder
operator|.
name|readClusterBlocks
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|customSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|customSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|Custom
name|customIndexMetaData
init|=
name|lookupFactorySafe
argument_list|(
name|type
argument_list|)
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putCustom
argument_list|(
name|type
argument_list|,
name|customIndexMetaData
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

