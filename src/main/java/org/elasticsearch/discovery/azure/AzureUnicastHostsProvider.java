begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.azure
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|AzureComputeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|unicast
operator|.
name|UnicastHostsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AzureUnicastHostsProvider
specifier|public
class|class
name|AzureUnicastHostsProvider
extends|extends
name|AbstractComponent
implements|implements
name|UnicastHostsProvider
block|{
DECL|enum|HostType
specifier|public
specifier|static
enum|enum
name|HostType
block|{
DECL|enum constant|PRIVATE_IP
name|PRIVATE_IP
block|,
DECL|enum constant|PUBLIC_IP
name|PUBLIC_IP
block|}
DECL|field|azureComputeService
specifier|private
specifier|final
name|AzureComputeService
name|azureComputeService
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
DECL|field|networkService
specifier|private
name|NetworkService
name|networkService
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|Version
name|version
decl_stmt|;
DECL|field|refreshInterval
specifier|private
specifier|final
name|TimeValue
name|refreshInterval
decl_stmt|;
DECL|field|lastRefresh
specifier|private
name|long
name|lastRefresh
decl_stmt|;
DECL|field|cachedDiscoNodes
specifier|private
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|cachedDiscoNodes
decl_stmt|;
DECL|field|host_type
specifier|private
specifier|final
name|HostType
name|host_type
decl_stmt|;
annotation|@
name|Inject
DECL|method|AzureUnicastHostsProvider
specifier|public
name|AzureUnicastHostsProvider
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|AzureComputeService
name|azureComputeService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|NetworkService
name|networkService
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|azureComputeService
operator|=
name|azureComputeService
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|refreshInterval
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
name|AzureComputeService
operator|.
name|Fields
operator|.
name|REFRESH
argument_list|,
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"cloud.azure."
operator|+
name|AzureComputeService
operator|.
name|Fields
operator|.
name|REFRESH
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|host_type
operator|=
name|HostType
operator|.
name|valueOf
argument_list|(
name|componentSettings
operator|.
name|get
argument_list|(
name|AzureComputeService
operator|.
name|Fields
operator|.
name|HOST_TYPE
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"cloud.azure."
operator|+
name|AzureComputeService
operator|.
name|Fields
operator|.
name|HOST_TYPE
argument_list|,
name|HostType
operator|.
name|PRIVATE_IP
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * We build the list of Nodes from Azure Management API      * Information can be cached using `cloud.azure.refresh_interval` property if needed.      * Setting `cloud.azure.refresh_interval` to `-1` will cause infinite caching.      * Setting `cloud.azure.refresh_interval` to `0` will disable caching (default).      */
annotation|@
name|Override
DECL|method|buildDynamicNodes
specifier|public
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|buildDynamicNodes
parameter_list|()
block|{
if|if
condition|(
name|refreshInterval
operator|.
name|millis
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|cachedDiscoNodes
operator|!=
literal|null
operator|&&
operator|(
name|refreshInterval
operator|.
name|millis
argument_list|()
operator|<
literal|0
operator|||
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastRefresh
operator|)
operator|<
name|refreshInterval
operator|.
name|millis
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|logger
operator|.
name|trace
argument_list|(
literal|"using cache to retrieve node list"
argument_list|)
expr_stmt|;
return|return
name|cachedDiscoNodes
return|;
block|}
name|lastRefresh
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"start building nodes list using Azure API"
argument_list|)
expr_stmt|;
name|cachedDiscoNodes
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Instance
argument_list|>
name|response
init|=
name|azureComputeService
operator|.
name|instances
argument_list|()
decl_stmt|;
name|String
name|ipAddress
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InetAddress
name|inetAddress
init|=
name|networkService
operator|.
name|resolvePublishHostAddress
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|inetAddress
operator|!=
literal|null
condition|)
block|{
name|ipAddress
operator|=
name|inetAddress
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|logger
operator|.
name|trace
argument_list|(
literal|"ipAddress found: [{}]"
argument_list|,
name|ipAddress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We can't find the publish host address... Hmmm. Too bad :-(
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|logger
operator|.
name|trace
argument_list|(
literal|"exception while finding ipAddress"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|Instance
name|instance
range|:
name|response
control|)
block|{
name|String
name|networkAddress
init|=
literal|null
decl_stmt|;
comment|// Let's detect if we want to use public or private IP
if|if
condition|(
name|host_type
operator|==
name|HostType
operator|.
name|PRIVATE_IP
condition|)
block|{
if|if
condition|(
name|instance
operator|.
name|getPrivateIp
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|instance
operator|.
name|getPrivateIp
argument_list|()
operator|.
name|equals
argument_list|(
name|ipAddress
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"adding ourselves {}"
argument_list|,
name|ipAddress
argument_list|)
expr_stmt|;
block|}
name|networkAddress
operator|=
name|instance
operator|.
name|getPrivateIp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"no private ip provided ignoring {}"
argument_list|,
name|instance
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|host_type
operator|==
name|HostType
operator|.
name|PUBLIC_IP
condition|)
block|{
if|if
condition|(
name|instance
operator|.
name|getPublicIp
argument_list|()
operator|!=
literal|null
operator|&&
name|instance
operator|.
name|getPublicPort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|networkAddress
operator|=
name|instance
operator|.
name|getPublicIp
argument_list|()
operator|+
literal|":"
operator|+
name|instance
operator|.
name|getPublicPort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"no public ip provided ignoring {}"
argument_list|,
name|instance
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|networkAddress
operator|==
literal|null
condition|)
block|{
comment|// We have a bad parameter here or not enough information from azure
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"can't find any "
operator|+
name|host_type
operator|.
name|name
argument_list|()
operator|+
literal|" address"
argument_list|)
throw|;
block|}
else|else
block|{
name|TransportAddress
index|[]
name|addresses
init|=
name|transportService
operator|.
name|addressesFromString
argument_list|(
name|networkAddress
argument_list|)
decl_stmt|;
comment|// we only limit to 1 addresses, makes no sense to ping 100 ports
name|logger
operator|.
name|trace
argument_list|(
literal|"adding {}, transport_address {}"
argument_list|,
name|networkAddress
argument_list|,
name|addresses
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cachedDiscoNodes
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"#cloud-"
operator|+
name|instance
operator|.
name|getName
argument_list|()
argument_list|,
name|addresses
index|[
literal|0
index|]
argument_list|,
name|version
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Exception caught during discovery {} : {}"
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Exception caught during discovery"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"{} node(s) added"
argument_list|,
name|cachedDiscoNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using dynamic discovery nodes {}"
argument_list|,
name|cachedDiscoNodes
argument_list|)
expr_stmt|;
return|return
name|cachedDiscoNodes
return|;
block|}
block|}
end_class

end_unit

