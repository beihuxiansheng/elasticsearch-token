begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link ClusterStatePublishResponseHandler}, allows to  await a reply  * to a cluster state publish from all non master nodes, up to a timeout  */
end_comment

begin_class
DECL|class|BlockingClusterStatePublishResponseHandler
specifier|public
class|class
name|BlockingClusterStatePublishResponseHandler
implements|implements
name|ClusterStatePublishResponseHandler
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
comment|/**      * Creates a new BlockingClusterStatePublishResponseHandler      * @param nonMasterNodes number of nodes that are supposed to reply to a cluster state publish from master      */
DECL|method|BlockingClusterStatePublishResponseHandler
specifier|public
name|BlockingClusterStatePublishResponseHandler
parameter_list|(
name|int
name|nonMasterNodes
parameter_list|)
block|{
comment|//Don't count the master, as it's the one that does the publish
comment|//the master won't call onResponse either
name|this
operator|.
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|nonMasterNodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|awaitAllNodes
specifier|public
name|boolean
name|awaitAllNodes
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|latch
operator|.
name|await
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
end_class

end_unit

