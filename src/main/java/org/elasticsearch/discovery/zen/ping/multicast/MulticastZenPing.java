begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen.ping.multicast
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|multicast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|MulticastChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|PingContextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|ZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
operator|.
name|readNode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
operator|.
name|newConcurrentMap
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|MulticastZenPing
specifier|public
class|class
name|MulticastZenPing
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|ZenPing
argument_list|>
implements|implements
name|ZenPing
block|{
DECL|field|ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
literal|"internal:discovery/zen/multicast"
decl_stmt|;
DECL|field|INTERNAL_HEADER
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|INTERNAL_HEADER
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|9
block|,
literal|8
block|,
literal|4
block|}
decl_stmt|;
DECL|field|address
specifier|private
specifier|final
name|String
name|address
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|group
specifier|private
specifier|final
name|String
name|group
decl_stmt|;
DECL|field|bufferSize
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
DECL|field|ttl
specifier|private
specifier|final
name|int
name|ttl
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|networkService
specifier|private
specifier|final
name|NetworkService
name|networkService
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|Version
name|version
decl_stmt|;
DECL|field|contextProvider
specifier|private
specifier|volatile
name|PingContextProvider
name|contextProvider
decl_stmt|;
DECL|field|pingEnabled
specifier|private
specifier|final
name|boolean
name|pingEnabled
decl_stmt|;
DECL|field|multicastChannel
specifier|private
specifier|volatile
name|MulticastChannel
name|multicastChannel
decl_stmt|;
DECL|field|pingIdGenerator
specifier|private
specifier|final
name|AtomicInteger
name|pingIdGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|receivedResponses
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|PingCollection
argument_list|>
name|receivedResponses
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|method|MulticastZenPing
specifier|public
name|MulticastZenPing
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|this
argument_list|(
name|EMPTY_SETTINGS
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|clusterName
argument_list|,
operator|new
name|NetworkService
argument_list|(
name|EMPTY_SETTINGS
argument_list|)
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
DECL|method|MulticastZenPing
specifier|public
name|MulticastZenPing
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|,
name|NetworkService
name|networkService
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"address"
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"port"
argument_list|,
literal|54328
argument_list|)
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"group"
argument_list|,
literal|"224.2.2.4"
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"buffer_size"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"ttl"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|this
operator|.
name|pingEnabled
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"ping.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using group [{}], with port [{}], ttl [{}], and address [{}]"
argument_list|,
name|group
argument_list|,
name|port
argument_list|,
name|ttl
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|.
name|registerHandler
argument_list|(
name|ACTION_NAME
argument_list|,
operator|new
name|MulticastPingResponseRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPingContextProvider
specifier|public
name|void
name|setPingContextProvider
parameter_list|(
name|PingContextProvider
name|nodesProvider
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Can't set nodes provider when started"
argument_list|)
throw|;
block|}
name|this
operator|.
name|contextProvider
operator|=
name|nodesProvider
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
try|try
block|{
comment|// we know OSX has bugs in the JVM when creating multiple instances of multicast sockets
comment|// causing for "socket close" exceptions when receive and/or crashes
name|boolean
name|shared
init|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"shared"
argument_list|,
name|Constants
operator|.
name|MAC_OS_X
argument_list|)
decl_stmt|;
name|multicastChannel
operator|=
name|MulticastChannel
operator|.
name|getChannel
argument_list|(
name|nodeName
argument_list|()
argument_list|,
name|shared
argument_list|,
operator|new
name|MulticastChannel
operator|.
name|Config
argument_list|(
name|port
argument_list|,
name|group
argument_list|,
name|bufferSize
argument_list|,
name|ttl
argument_list|,
name|networkService
operator|.
name|resolvePublishHostAddress
argument_list|(
name|address
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Receiver
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"multicast failed to start [{}], disabling. Consider using IPv4 only (by defining env. variable `ES_USE_IPV4`)"
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|msg
argument_list|,
name|t
argument_list|,
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
name|msg
argument_list|,
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
name|multicastChannel
operator|!=
literal|null
condition|)
block|{
name|multicastChannel
operator|.
name|close
argument_list|()
expr_stmt|;
name|multicastChannel
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
DECL|method|pingAndWait
specifier|public
name|PingResponse
index|[]
name|pingAndWait
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
specifier|final
name|AtomicReference
argument_list|<
name|PingResponse
index|[]
argument_list|>
name|response
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|ping
argument_list|(
operator|new
name|PingListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onPing
parameter_list|(
name|PingResponse
index|[]
name|pings
parameter_list|)
block|{
name|response
operator|.
name|set
argument_list|(
name|pings
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Ping execution rejected"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
name|PingResponse
operator|.
name|EMPTY
return|;
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|response
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
name|PingResponse
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|ping
specifier|public
name|void
name|ping
parameter_list|(
specifier|final
name|PingListener
name|listener
parameter_list|,
specifier|final
name|TimeValue
name|timeout
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pingEnabled
operator|||
name|multicastChannel
operator|==
literal|null
condition|)
block|{
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|listener
operator|.
name|onPing
argument_list|(
name|PingResponse
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|id
init|=
name|pingIdGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
try|try
block|{
name|receivedResponses
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|PingCollection
argument_list|()
argument_list|)
expr_stmt|;
name|sendPingRequest
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// try and send another ping request halfway through (just in case someone woke up during it...)
comment|// this can be a good trade-off to nailing the initial lookup or un-delivered messages
name|threadPool
operator|.
name|schedule
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to send second ping request"
argument_list|,
name|t
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|finalizePingCycle
argument_list|(
name|id
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doRun
parameter_list|()
block|{
name|sendPingRequest
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to send third ping request"
argument_list|,
name|t
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|finalizePingCycle
argument_list|(
name|id
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doRun
parameter_list|()
block|{
comment|// make one last ping, but finalize as soon as all nodes have responded or a timeout has past
name|PingCollection
name|collection
init|=
name|receivedResponses
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FinalizingPingCollection
name|finalizingPingCollection
init|=
operator|new
name|FinalizingPingCollection
argument_list|(
name|id
argument_list|,
name|collection
argument_list|,
name|collection
operator|.
name|size
argument_list|()
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|receivedResponses
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|finalizingPingCollection
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] sending last pings"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|sendPingRequest
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
operator|/
literal|4
argument_list|)
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to finalize ping"
argument_list|,
name|t
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|finalizePingCycle
argument_list|(
name|id
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to ping"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|finalizePingCycle
argument_list|(
name|id
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * takes all pings collected for a given id and pass them to the given listener.      * this method is safe to call multiple times as is guaranteed to only finalize once.      */
DECL|method|finalizePingCycle
specifier|private
name|void
name|finalizePingCycle
parameter_list|(
name|int
name|id
parameter_list|,
specifier|final
name|PingListener
name|listener
parameter_list|)
block|{
name|PingCollection
name|responses
init|=
name|receivedResponses
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|responses
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onPing
argument_list|(
name|responses
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendPingRequest
specifier|private
name|void
name|sendPingRequest
parameter_list|(
name|int
name|id
parameter_list|)
block|{
try|try
block|{
name|BytesStreamOutput
name|bStream
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|StreamOutput
name|out
init|=
operator|new
name|HandlesStreamOutput
argument_list|(
name|bStream
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|INTERNAL_HEADER
argument_list|)
expr_stmt|;
comment|// TODO: change to min_required version!
name|Version
operator|.
name|writeVersion
argument_list|(
name|version
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|clusterName
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|contextProvider
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|multicastChannel
operator|.
name|send
argument_list|(
name|bStream
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] sending ping request"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to send multicast ping request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send multicast ping request: {}"
argument_list|,
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|FinalizingPingCollection
class|class
name|FinalizingPingCollection
extends|extends
name|PingCollection
block|{
DECL|field|internalCollection
specifier|final
specifier|private
name|PingCollection
name|internalCollection
decl_stmt|;
DECL|field|expectedResponses
specifier|final
specifier|private
name|int
name|expectedResponses
decl_stmt|;
DECL|field|responseCount
specifier|final
specifier|private
name|AtomicInteger
name|responseCount
decl_stmt|;
DECL|field|listener
specifier|final
specifier|private
name|PingListener
name|listener
decl_stmt|;
DECL|field|id
specifier|final
specifier|private
name|int
name|id
decl_stmt|;
DECL|method|FinalizingPingCollection
specifier|public
name|FinalizingPingCollection
parameter_list|(
name|int
name|id
parameter_list|,
name|PingCollection
name|internalCollection
parameter_list|,
name|int
name|expectedResponses
parameter_list|,
name|PingListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|internalCollection
operator|=
name|internalCollection
expr_stmt|;
name|this
operator|.
name|expectedResponses
operator|=
name|expectedResponses
expr_stmt|;
name|this
operator|.
name|responseCount
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addPing
specifier|public
specifier|synchronized
name|boolean
name|addPing
parameter_list|(
name|PingResponse
name|ping
parameter_list|)
block|{
if|if
condition|(
name|internalCollection
operator|.
name|addPing
argument_list|(
name|ping
argument_list|)
condition|)
block|{
if|if
condition|(
name|responseCount
operator|.
name|incrementAndGet
argument_list|()
operator|>=
name|expectedResponses
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] all nodes responded"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|finish
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|addPings
specifier|public
specifier|synchronized
name|void
name|addPings
parameter_list|(
name|PingResponse
index|[]
name|pings
parameter_list|)
block|{
name|internalCollection
operator|.
name|addPings
argument_list|(
name|pings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toArray
specifier|public
specifier|synchronized
name|PingResponse
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|internalCollection
operator|.
name|toArray
argument_list|()
return|;
block|}
DECL|method|finish
name|void
name|finish
parameter_list|()
block|{
comment|// spawn another thread as we may be running on a network thread
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to call ping listener"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|finalizePingCycle
argument_list|(
name|id
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MulticastPingResponseRequestHandler
class|class
name|MulticastPingResponseRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|MulticastPingResponse
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|MulticastPingResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|MulticastPingResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|MulticastPingResponse
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] received {}"
argument_list|,
name|request
operator|.
name|id
argument_list|,
name|request
operator|.
name|pingResponse
argument_list|)
expr_stmt|;
block|}
name|PingCollection
name|responses
init|=
name|receivedResponses
operator|.
name|get
argument_list|(
name|request
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|responses
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"received ping response {} with no matching id [{}]"
argument_list|,
name|request
operator|.
name|pingResponse
argument_list|,
name|request
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responses
operator|.
name|addPing
argument_list|(
name|request
operator|.
name|pingResponse
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
DECL|class|MulticastPingResponse
specifier|static
class|class
name|MulticastPingResponse
extends|extends
name|TransportRequest
block|{
DECL|field|id
name|int
name|id
decl_stmt|;
DECL|field|pingResponse
name|PingResponse
name|pingResponse
decl_stmt|;
DECL|method|MulticastPingResponse
name|MulticastPingResponse
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|pingResponse
operator|=
name|PingResponse
operator|.
name|readPingResponse
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|pingResponse
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Receiver
specifier|private
class|class
name|Receiver
implements|implements
name|MulticastChannel
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|onMessage
specifier|public
name|void
name|onMessage
parameter_list|(
name|BytesReference
name|data
parameter_list|,
name|SocketAddress
name|address
parameter_list|)
block|{
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
name|DiscoveryNode
name|requestingNodeX
init|=
literal|null
decl_stmt|;
name|ClusterName
name|clusterName
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|externalPingData
init|=
literal|null
decl_stmt|;
name|XContentType
name|xContentType
init|=
literal|null
decl_stmt|;
try|try
block|{
name|boolean
name|internal
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|>
literal|4
condition|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|counter
operator|<
name|INTERNAL_HEADER
operator|.
name|length
condition|;
name|counter
operator|++
control|)
block|{
if|if
condition|(
name|data
operator|.
name|get
argument_list|(
name|counter
argument_list|)
operator|!=
name|INTERNAL_HEADER
index|[
name|counter
index|]
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|counter
operator|==
name|INTERNAL_HEADER
operator|.
name|length
condition|)
block|{
name|internal
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|internal
condition|)
block|{
name|StreamInput
name|input
init|=
name|CachedStreamInput
operator|.
name|cachedHandles
argument_list|(
operator|new
name|BytesStreamInput
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|data
operator|.
name|toBytes
argument_list|()
argument_list|,
name|INTERNAL_HEADER
operator|.
name|length
argument_list|,
name|data
operator|.
name|length
argument_list|()
operator|-
name|INTERNAL_HEADER
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
name|Version
operator|.
name|readVersion
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|input
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|id
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|clusterName
operator|=
name|ClusterName
operator|.
name|readClusterName
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|requestingNodeX
operator|=
name|readNode
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xContentType
operator|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|xContentType
operator|!=
literal|null
condition|)
block|{
comment|// an external ping
name|externalPingData
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|xContentType
argument_list|)
operator|.
name|createParser
argument_list|(
name|data
argument_list|)
operator|.
name|mapAndClose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"failed multicast message, probably message from previous version"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|externalPingData
operator|!=
literal|null
condition|)
block|{
name|handleExternalPingRequest
argument_list|(
name|externalPingData
argument_list|,
name|xContentType
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleNodePingRequest
argument_list|(
name|id
argument_list|,
name|requestingNodeX
argument_list|,
name|clusterName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
operator|||
operator|(
name|e
operator|instanceof
name|EsRejectedExecutionException
operator|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to read requesting data from {}"
argument_list|,
name|e
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read requesting data from {}"
argument_list|,
name|e
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|handleExternalPingRequest
specifier|private
name|void
name|handleExternalPingRequest
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|externalPingData
parameter_list|,
name|XContentType
name|contentType
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
if|if
condition|(
name|externalPingData
operator|.
name|containsKey
argument_list|(
literal|"response"
argument_list|)
condition|)
block|{
comment|// ignoring responses sent over the multicast channel
name|logger
operator|.
name|trace
argument_list|(
literal|"got an external ping response (ignoring) from {}, content {}"
argument_list|,
name|remoteAddress
argument_list|,
name|externalPingData
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|multicastChannel
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"can't send ping response, no socket, from {}, content {}"
argument_list|,
name|remoteAddress
argument_list|,
name|externalPingData
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|request
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|externalPingData
operator|.
name|get
argument_list|(
literal|"request"
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"malformed external ping request, no 'request' element from {}, content {}"
argument_list|,
name|remoteAddress
argument_list|,
name|externalPingData
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|requestClusterName
init|=
name|request
operator|.
name|containsKey
argument_list|(
literal|"cluster_name"
argument_list|)
condition|?
name|request
operator|.
name|get
argument_list|(
literal|"cluster_name"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|containsKey
argument_list|(
literal|"clusterName"
argument_list|)
condition|?
name|request
operator|.
name|get
argument_list|(
literal|"clusterName"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|requestClusterName
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"malformed external ping request, missing 'cluster_name' element within request, from {}, content {}"
argument_list|,
name|remoteAddress
argument_list|,
name|externalPingData
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|requestClusterName
operator|.
name|equals
argument_list|(
name|clusterName
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"got request for cluster_name {}, but our cluster_name is {}, from {}, content {}"
argument_list|,
name|requestClusterName
argument_list|,
name|clusterName
operator|.
name|value
argument_list|()
argument_list|,
name|remoteAddress
argument_list|,
name|externalPingData
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"got external ping request from {}, content {}"
argument_list|,
name|remoteAddress
argument_list|,
name|externalPingData
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|DiscoveryNode
name|localNode
init|=
name|contextProvider
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"cluster_name"
argument_list|,
name|clusterName
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"version"
argument_list|)
operator|.
name|field
argument_list|(
literal|"number"
argument_list|,
name|version
operator|.
name|number
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"snapshot_build"
argument_list|,
name|version
operator|.
name|snapshot
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"transport_address"
argument_list|,
name|localNode
operator|.
name|address
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextProvider
operator|.
name|nodeService
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
range|:
name|contextProvider
operator|.
name|nodeService
argument_list|()
operator|.
name|attributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|startObject
argument_list|(
literal|"attributes"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
range|:
name|localNode
operator|.
name|attributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|multicastChannel
operator|.
name|send
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"sending external ping response {}"
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send external multicast response"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleNodePingRequest
specifier|private
name|void
name|handleNodePingRequest
parameter_list|(
name|int
name|id
parameter_list|,
name|DiscoveryNode
name|requestingNodeX
parameter_list|,
name|ClusterName
name|requestClusterName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pingEnabled
operator|||
name|multicastChannel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|DiscoveryNodes
name|discoveryNodes
init|=
name|contextProvider
operator|.
name|nodes
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNode
name|requestingNode
init|=
name|requestingNodeX
decl_stmt|;
if|if
condition|(
name|requestingNode
operator|.
name|id
argument_list|()
operator|.
name|equals
argument_list|(
name|discoveryNodes
operator|.
name|localNodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// that's me, ignore
return|return;
block|}
if|if
condition|(
operator|!
name|requestClusterName
operator|.
name|equals
argument_list|(
name|clusterName
argument_list|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] received ping_request from [{}], but wrong cluster_name [{}], expected [{}], ignoring"
argument_list|,
name|id
argument_list|,
name|requestingNode
argument_list|,
name|requestClusterName
operator|.
name|value
argument_list|()
argument_list|,
name|clusterName
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// don't connect between two client nodes, no need for that...
if|if
condition|(
operator|!
name|discoveryNodes
operator|.
name|localNode
argument_list|()
operator|.
name|shouldConnectTo
argument_list|(
name|requestingNode
argument_list|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] received ping_request from [{}], both are client nodes, ignoring"
argument_list|,
name|id
argument_list|,
name|requestingNode
argument_list|,
name|requestClusterName
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|final
name|MulticastPingResponse
name|multicastPingResponse
init|=
operator|new
name|MulticastPingResponse
argument_list|()
decl_stmt|;
name|multicastPingResponse
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|multicastPingResponse
operator|.
name|pingResponse
operator|=
operator|new
name|PingResponse
argument_list|(
name|discoveryNodes
operator|.
name|localNode
argument_list|()
argument_list|,
name|discoveryNodes
operator|.
name|masterNode
argument_list|()
argument_list|,
name|clusterName
argument_list|,
name|contextProvider
operator|.
name|nodeHasJoinedClusterOnce
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] received ping_request from [{}], sending {}"
argument_list|,
name|id
argument_list|,
name|requestingNode
argument_list|,
name|multicastPingResponse
operator|.
name|pingResponse
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|transportService
operator|.
name|nodeConnected
argument_list|(
name|requestingNode
argument_list|)
condition|)
block|{
comment|// do the connect and send on a thread pool
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// connect to the node if possible
try|try
block|{
name|transportService
operator|.
name|connectToNode
argument_list|(
name|requestingNode
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|requestingNode
argument_list|,
name|ACTION_NAME
argument_list|,
name|multicastPingResponse
argument_list|,
operator|new
name|EmptyTransportResponseHandler
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to receive confirmation on sent ping response to [{}]"
argument_list|,
name|exp
argument_list|,
name|requestingNode
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to connect to requesting node {}"
argument_list|,
name|e
argument_list|,
name|requestingNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|requestingNode
argument_list|,
name|ACTION_NAME
argument_list|,
name|multicastPingResponse
argument_list|,
operator|new
name|EmptyTransportResponseHandler
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to receive confirmation on sent ping response to [{}]"
argument_list|,
name|exp
argument_list|,
name|requestingNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

