begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen.ping.unicast
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|unicast
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|elect
operator|.
name|ElectMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|PingContextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|ZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|readTimeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|ZenPing
operator|.
name|PingResponse
operator|.
name|readPingResponse
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|UnicastZenPing
specifier|public
class|class
name|UnicastZenPing
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|ZenPing
argument_list|>
implements|implements
name|ZenPing
block|{
DECL|field|ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
literal|"internal:discovery/zen/unicast"
decl_stmt|;
DECL|field|LIMIT_PORTS_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|LIMIT_PORTS_COUNT
init|=
literal|1
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|electMasterService
specifier|private
specifier|final
name|ElectMasterService
name|electMasterService
decl_stmt|;
DECL|field|concurrentConnects
specifier|private
specifier|final
name|int
name|concurrentConnects
decl_stmt|;
DECL|field|configuredTargetNodes
specifier|private
specifier|final
name|DiscoveryNode
index|[]
name|configuredTargetNodes
decl_stmt|;
DECL|field|contextProvider
specifier|private
specifier|volatile
name|PingContextProvider
name|contextProvider
decl_stmt|;
DECL|field|pingHandlerIdGenerator
specifier|private
specifier|final
name|AtomicInteger
name|pingHandlerIdGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// used to generate unique ids for nodes/address we temporarily connect to
DECL|field|unicastNodeIdGenerator
specifier|private
specifier|final
name|AtomicInteger
name|unicastNodeIdGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// used as a node id prefix for nodes/address we temporarily connect to
DECL|field|UNICAST_NODE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|UNICAST_NODE_PREFIX
init|=
literal|"#zen_unicast_"
decl_stmt|;
DECL|field|receivedResponses
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|PingCollection
argument_list|>
name|receivedResponses
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
comment|// a list of temporal responses a node will return for a request (holds requests from other configuredTargetNodes)
DECL|field|temporalResponses
specifier|private
specifier|final
name|Queue
argument_list|<
name|PingResponse
argument_list|>
name|temporalResponses
init|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
decl_stmt|;
DECL|field|hostsProviders
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|UnicastHostsProvider
argument_list|>
name|hostsProviders
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|UnicastZenPing
specifier|public
name|UnicastZenPing
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|,
name|Version
name|version
parameter_list|,
name|ElectMasterService
name|electMasterService
parameter_list|,
annotation|@
name|Nullable
name|Set
argument_list|<
name|UnicastHostsProvider
argument_list|>
name|unicastHostsProviders
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|electMasterService
operator|=
name|electMasterService
expr_stmt|;
if|if
condition|(
name|unicastHostsProviders
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UnicastHostsProvider
name|unicastHostsProvider
range|:
name|unicastHostsProviders
control|)
block|{
name|addHostsProvider
argument_list|(
name|unicastHostsProvider
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|concurrentConnects
operator|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"concurrent_connects"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|String
index|[]
name|hostArr
init|=
name|componentSettings
operator|.
name|getAsArray
argument_list|(
literal|"hosts"
argument_list|)
decl_stmt|;
comment|// trim the hosts
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hostArr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hostArr
index|[
name|i
index|]
operator|=
name|hostArr
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|hostArr
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using initial hosts {}, with concurrent_connects [{}]"
argument_list|,
name|hosts
argument_list|,
name|concurrentConnects
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|configuredTargetNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
try|try
block|{
name|TransportAddress
index|[]
name|addresses
init|=
name|transportService
operator|.
name|addressesFromString
argument_list|(
name|host
argument_list|)
decl_stmt|;
comment|// we only limit to 1 addresses, makes no sense to ping 100 ports
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|addresses
operator|.
name|length
operator|&&
name|i
operator|<
name|LIMIT_PORTS_COUNT
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|configuredTargetNodes
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
name|UNICAST_NODE_PREFIX
operator|+
name|unicastNodeIdGenerator
operator|.
name|incrementAndGet
argument_list|()
operator|+
literal|"#"
argument_list|,
name|addresses
index|[
name|i
index|]
argument_list|,
name|version
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Failed to resolve address for ["
operator|+
name|host
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|configuredTargetNodes
operator|=
name|configuredTargetNodes
operator|.
name|toArray
argument_list|(
operator|new
name|DiscoveryNode
index|[
name|configuredTargetNodes
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|ACTION_NAME
argument_list|,
operator|new
name|UnicastPingRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|transportService
operator|.
name|removeHandler
argument_list|(
name|ACTION_NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|addHostsProvider
specifier|public
name|void
name|addHostsProvider
parameter_list|(
name|UnicastHostsProvider
name|provider
parameter_list|)
block|{
name|hostsProviders
operator|.
name|add
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
DECL|method|removeHostsProvider
specifier|public
name|void
name|removeHostsProvider
parameter_list|(
name|UnicastHostsProvider
name|provider
parameter_list|)
block|{
name|hostsProviders
operator|.
name|remove
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPingContextProvider
specifier|public
name|void
name|setPingContextProvider
parameter_list|(
name|PingContextProvider
name|contextProvider
parameter_list|)
block|{
name|this
operator|.
name|contextProvider
operator|=
name|contextProvider
expr_stmt|;
block|}
comment|/**      * Clears the list of cached ping responses.      */
DECL|method|clearTemporalResponses
specifier|public
name|void
name|clearTemporalResponses
parameter_list|()
block|{
name|temporalResponses
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|pingAndWait
specifier|public
name|PingResponse
index|[]
name|pingAndWait
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
specifier|final
name|AtomicReference
argument_list|<
name|PingResponse
index|[]
argument_list|>
name|response
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ping
argument_list|(
operator|new
name|PingListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onPing
parameter_list|(
name|PingResponse
index|[]
name|pings
parameter_list|)
block|{
name|response
operator|.
name|set
argument_list|(
name|pings
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|response
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|ping
specifier|public
name|void
name|ping
parameter_list|(
specifier|final
name|PingListener
name|listener
parameter_list|,
specifier|final
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|ElasticsearchException
block|{
specifier|final
name|SendPingsHandler
name|sendPingsHandler
init|=
operator|new
name|SendPingsHandler
argument_list|(
name|pingHandlerIdGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
name|receivedResponses
operator|.
name|put
argument_list|(
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|PingCollection
argument_list|()
argument_list|)
expr_stmt|;
name|sendPings
argument_list|(
name|timeout
argument_list|,
literal|null
argument_list|,
name|sendPingsHandler
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sendPings
argument_list|(
name|timeout
argument_list|,
literal|null
argument_list|,
name|sendPingsHandler
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sendPings
argument_list|(
name|timeout
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|sendPingsHandler
argument_list|)
expr_stmt|;
name|PingCollection
name|responses
init|=
name|receivedResponses
operator|.
name|remove
argument_list|(
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|sendPingsHandler
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|sendPingsHandler
operator|.
name|nodeToDisconnect
control|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] disconnecting from {}"
argument_list|,
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|disconnectFromNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onPing
argument_list|(
name|responses
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Ping execution rejected"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Ping execution rejected"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|SendPingsHandler
class|class
name|SendPingsHandler
block|{
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|executor
specifier|private
specifier|volatile
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|nodeToDisconnect
specifier|private
specifier|final
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodeToDisconnect
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
DECL|method|SendPingsHandler
name|SendPingsHandler
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|int
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|closed
return|;
block|}
DECL|method|executor
specifier|public
name|Executor
name|executor
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|ThreadFactory
name|threadFactory
init|=
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"[unicast_connect]"
argument_list|)
decl_stmt|;
name|executor
operator|=
name|EsExecutors
operator|.
name|newScaling
argument_list|(
literal|0
argument_list|,
name|concurrentConnects
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
block|}
return|return
name|executor
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|executor
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|sendPings
name|void
name|sendPings
parameter_list|(
specifier|final
name|TimeValue
name|timeout
parameter_list|,
annotation|@
name|Nullable
name|TimeValue
name|waitTime
parameter_list|,
specifier|final
name|SendPingsHandler
name|sendPingsHandler
parameter_list|)
block|{
specifier|final
name|UnicastPingRequest
name|pingRequest
init|=
operator|new
name|UnicastPingRequest
argument_list|()
decl_stmt|;
name|pingRequest
operator|.
name|id
operator|=
name|sendPingsHandler
operator|.
name|id
argument_list|()
expr_stmt|;
name|pingRequest
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|DiscoveryNodes
name|discoNodes
init|=
name|contextProvider
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|pingRequest
operator|.
name|pingResponse
operator|=
name|createPingResponse
argument_list|(
name|discoNodes
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesToPingSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PingResponse
name|temporalResponse
range|:
name|temporalResponses
control|)
block|{
comment|// Only send pings to nodes that have the same cluster name.
if|if
condition|(
name|clusterName
operator|.
name|equals
argument_list|(
name|temporalResponse
operator|.
name|clusterName
argument_list|()
argument_list|)
condition|)
block|{
name|nodesToPingSet
operator|.
name|add
argument_list|(
name|temporalResponse
operator|.
name|node
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|UnicastHostsProvider
name|provider
range|:
name|hostsProviders
control|)
block|{
name|nodesToPingSet
operator|.
name|addAll
argument_list|(
name|provider
operator|.
name|buildDynamicNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add all possible master nodes that were active in the last known cluster configuration
for|for
control|(
name|ObjectCursor
argument_list|<
name|DiscoveryNode
argument_list|>
name|masterNode
range|:
name|discoNodes
operator|.
name|getMasterNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|nodesToPingSet
operator|.
name|add
argument_list|(
name|masterNode
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
comment|// sort the nodes by likelihood of being an active master
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|sortedNodesToPing
init|=
name|electMasterService
operator|.
name|sortByMasterLikelihood
argument_list|(
name|nodesToPingSet
argument_list|)
decl_stmt|;
comment|// new add the the unicast targets first
name|ArrayList
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesToPing
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|configuredTargetNodes
argument_list|)
decl_stmt|;
name|nodesToPing
operator|.
name|addAll
argument_list|(
name|sortedNodesToPing
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nodesToPing
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|DiscoveryNode
name|node
range|:
name|nodesToPing
control|)
block|{
comment|// make sure we are connected
specifier|final
name|boolean
name|nodeFoundByAddress
decl_stmt|;
name|DiscoveryNode
name|nodeToSend
init|=
name|discoNodes
operator|.
name|findByAddress
argument_list|(
name|node
operator|.
name|address
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeToSend
operator|!=
literal|null
condition|)
block|{
name|nodeFoundByAddress
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|nodeToSend
operator|=
name|node
expr_stmt|;
name|nodeFoundByAddress
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|transportService
operator|.
name|nodeConnected
argument_list|(
name|nodeToSend
argument_list|)
condition|)
block|{
if|if
condition|(
name|sendPingsHandler
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// if we find on the disco nodes a matching node by address, we are going to restore the connection
comment|// anyhow down the line if its not connected...
comment|// if we can't resolve the node, we don't know and we have to clean up after pinging. We do have
comment|// to make sure we don't disconnect a true node which was temporarily removed from the DiscoveryNodes
comment|// but will be added again during the pinging. We therefore create a new temporary node
if|if
condition|(
operator|!
name|nodeFoundByAddress
condition|)
block|{
if|if
condition|(
operator|!
name|nodeToSend
operator|.
name|id
argument_list|()
operator|.
name|startsWith
argument_list|(
name|UNICAST_NODE_PREFIX
argument_list|)
condition|)
block|{
name|DiscoveryNode
name|tempNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|""
argument_list|,
name|UNICAST_NODE_PREFIX
operator|+
name|unicastNodeIdGenerator
operator|.
name|incrementAndGet
argument_list|()
operator|+
literal|"_"
operator|+
name|nodeToSend
operator|.
name|id
argument_list|()
operator|+
literal|"#"
argument_list|,
name|nodeToSend
operator|.
name|getHostName
argument_list|()
argument_list|,
name|nodeToSend
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|nodeToSend
operator|.
name|address
argument_list|()
argument_list|,
name|nodeToSend
operator|.
name|attributes
argument_list|()
argument_list|,
name|nodeToSend
operator|.
name|version
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"replacing {} with temp node {}"
argument_list|,
name|nodeToSend
argument_list|,
name|tempNode
argument_list|)
expr_stmt|;
name|nodeToSend
operator|=
name|tempNode
expr_stmt|;
block|}
name|sendPingsHandler
operator|.
name|nodeToDisconnect
operator|.
name|add
argument_list|(
name|nodeToSend
argument_list|)
expr_stmt|;
block|}
comment|// fork the connection to another thread
specifier|final
name|DiscoveryNode
name|finalNodeToSend
init|=
name|nodeToSend
decl_stmt|;
name|sendPingsHandler
operator|.
name|executor
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|sendPingsHandler
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// connect to the node, see if we manage to do it, if not, bail
if|if
condition|(
operator|!
name|nodeFoundByAddress
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] connecting (light) to {}"
argument_list|,
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
name|finalNodeToSend
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|connectToNodeLight
argument_list|(
name|finalNodeToSend
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] connecting to {}"
argument_list|,
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
name|finalNodeToSend
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|connectToNode
argument_list|(
name|finalNodeToSend
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] connected to {}"
argument_list|,
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|receivedResponses
operator|.
name|containsKey
argument_list|(
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
comment|// we are connected and still in progress, send the ping request
name|sendPingRequestToNode
argument_list|(
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
name|timeout
argument_list|,
name|pingRequest
argument_list|,
name|latch
argument_list|,
name|node
argument_list|,
name|finalNodeToSend
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// connect took too long, just log it and bail
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] connect to {} was too long outside of ping window, bailing"
argument_list|,
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
name|e
parameter_list|)
block|{
comment|// can't connect to the node - this is a more common path!
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] failed to connect to {}"
argument_list|,
name|e
argument_list|,
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
name|finalNodeToSend
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed send ping to {}"
argument_list|,
name|e
argument_list|,
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
name|finalNodeToSend
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendPingRequestToNode
argument_list|(
name|sendPingsHandler
operator|.
name|id
argument_list|()
argument_list|,
name|timeout
argument_list|,
name|pingRequest
argument_list|,
name|latch
argument_list|,
name|node
argument_list|,
name|nodeToSend
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|waitTime
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|(
name|waitTime
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|method|sendPingRequestToNode
specifier|private
name|void
name|sendPingRequestToNode
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|TimeValue
name|timeout
parameter_list|,
specifier|final
name|UnicastPingRequest
name|pingRequest
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|,
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|DiscoveryNode
name|nodeToSend
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] sending to {}"
argument_list|,
name|id
argument_list|,
name|nodeToSend
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|nodeToSend
argument_list|,
name|ACTION_NAME
argument_list|,
name|pingRequest
argument_list|,
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withTimeout
argument_list|(
call|(
name|long
call|)
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.25
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|UnicastPingResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UnicastPingResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|UnicastPingResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|UnicastPingResponse
name|response
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] received response from {}: {}"
argument_list|,
name|id
argument_list|,
name|nodeToSend
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|response
operator|.
name|pingResponses
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|DiscoveryNodes
name|discoveryNodes
init|=
name|contextProvider
operator|.
name|nodes
argument_list|()
decl_stmt|;
for|for
control|(
name|PingResponse
name|pingResponse
range|:
name|response
operator|.
name|pingResponses
control|)
block|{
if|if
condition|(
name|pingResponse
operator|.
name|node
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|equals
argument_list|(
name|discoveryNodes
operator|.
name|localNodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// that's us, ignore
continue|continue;
block|}
if|if
condition|(
operator|!
name|pingResponse
operator|.
name|clusterName
argument_list|()
operator|.
name|equals
argument_list|(
name|clusterName
argument_list|)
condition|)
block|{
comment|// not part of the cluster
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] filtering out response from {}, not same cluster_name [{}]"
argument_list|,
name|id
argument_list|,
name|pingResponse
operator|.
name|node
argument_list|()
argument_list|,
name|pingResponse
operator|.
name|clusterName
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PingCollection
name|responses
init|=
name|receivedResponses
operator|.
name|get
argument_list|(
name|response
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|responses
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"received ping response {} with no matching handler id [{}]"
argument_list|,
name|pingResponse
argument_list|,
name|response
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responses
operator|.
name|addPing
argument_list|(
name|pingResponse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|exp
operator|instanceof
name|ConnectTransportException
condition|)
block|{
comment|// ok, not connected...
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to connect to {}"
argument_list|,
name|exp
argument_list|,
name|nodeToSend
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send ping to [{}]"
argument_list|,
name|exp
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|handlePingRequest
specifier|private
name|UnicastPingResponse
name|handlePingRequest
parameter_list|(
specifier|final
name|UnicastPingRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"received ping request while stopped/closed"
argument_list|)
throw|;
block|}
name|temporalResponses
operator|.
name|add
argument_list|(
name|request
operator|.
name|pingResponse
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|request
operator|.
name|timeout
operator|.
name|millis
argument_list|()
operator|*
literal|2
argument_list|)
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|temporalResponses
operator|.
name|remove
argument_list|(
name|request
operator|.
name|pingResponse
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PingResponse
argument_list|>
name|pingResponses
init|=
name|newArrayList
argument_list|(
name|temporalResponses
argument_list|)
decl_stmt|;
name|pingResponses
operator|.
name|add
argument_list|(
name|createPingResponse
argument_list|(
name|contextProvider
operator|.
name|nodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UnicastPingResponse
name|unicastPingResponse
init|=
operator|new
name|UnicastPingResponse
argument_list|()
decl_stmt|;
name|unicastPingResponse
operator|.
name|id
operator|=
name|request
operator|.
name|id
expr_stmt|;
name|unicastPingResponse
operator|.
name|pingResponses
operator|=
name|pingResponses
operator|.
name|toArray
argument_list|(
operator|new
name|PingResponse
index|[
name|pingResponses
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
return|return
name|unicastPingResponse
return|;
block|}
DECL|class|UnicastPingRequestHandler
class|class
name|UnicastPingRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|UnicastPingRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|UnicastPingRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|UnicastPingRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|UnicastPingRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|handlePingRequest
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UnicastPingRequest
specifier|static
class|class
name|UnicastPingRequest
extends|extends
name|TransportRequest
block|{
DECL|field|id
name|int
name|id
decl_stmt|;
DECL|field|timeout
name|TimeValue
name|timeout
decl_stmt|;
DECL|field|pingResponse
name|PingResponse
name|pingResponse
decl_stmt|;
DECL|method|UnicastPingRequest
name|UnicastPingRequest
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|timeout
operator|=
name|readTimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|pingResponse
operator|=
name|readPingResponse
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|pingResponse
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createPingResponse
specifier|private
name|PingResponse
name|createPingResponse
parameter_list|(
name|DiscoveryNodes
name|discoNodes
parameter_list|)
block|{
return|return
operator|new
name|PingResponse
argument_list|(
name|discoNodes
operator|.
name|localNode
argument_list|()
argument_list|,
name|discoNodes
operator|.
name|masterNode
argument_list|()
argument_list|,
name|clusterName
argument_list|,
name|contextProvider
operator|.
name|nodeHasJoinedClusterOnce
argument_list|()
argument_list|)
return|;
block|}
DECL|class|UnicastPingResponse
specifier|static
class|class
name|UnicastPingResponse
extends|extends
name|TransportResponse
block|{
DECL|field|id
name|int
name|id
decl_stmt|;
DECL|field|pingResponses
name|PingResponse
index|[]
name|pingResponses
decl_stmt|;
DECL|method|UnicastPingResponse
name|UnicastPingResponse
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|pingResponses
operator|=
operator|new
name|PingResponse
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pingResponses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pingResponses
index|[
name|i
index|]
operator|=
name|readPingResponse
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|pingResponses
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|PingResponse
name|pingResponse
range|:
name|pingResponses
control|)
block|{
name|pingResponse
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

