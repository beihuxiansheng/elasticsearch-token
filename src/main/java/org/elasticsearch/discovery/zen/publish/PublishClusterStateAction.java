begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen.publish
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|publish
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|DiscoveryNodesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PublishClusterStateAction
specifier|public
class|class
name|PublishClusterStateAction
extends|extends
name|AbstractComponent
block|{
DECL|interface|NewClusterStateListener
specifier|public
specifier|static
interface|interface
name|NewClusterStateListener
block|{
DECL|method|onNewClusterState
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
function_decl|;
block|}
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|nodesProvider
specifier|private
specifier|final
name|DiscoveryNodesProvider
name|nodesProvider
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|NewClusterStateListener
name|listener
decl_stmt|;
DECL|method|PublishClusterStateAction
specifier|public
name|PublishClusterStateAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|DiscoveryNodesProvider
name|nodesProvider
parameter_list|,
name|NewClusterStateListener
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|nodesProvider
operator|=
name|nodesProvider
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|PublishClusterStateRequestHandler
operator|.
name|ACTION
argument_list|,
operator|new
name|PublishClusterStateRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|transportService
operator|.
name|removeHandler
argument_list|(
name|PublishClusterStateRequestHandler
operator|.
name|ACTION
argument_list|)
expr_stmt|;
block|}
DECL|method|publish
specifier|public
name|void
name|publish
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|DiscoveryNode
name|localNode
init|=
name|nodesProvider
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Version
argument_list|,
name|CachedStreamOutput
operator|.
name|Entry
argument_list|>
name|serializedStates
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|DiscoveryNode
name|node
range|:
name|clusterState
operator|.
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|localNode
argument_list|)
condition|)
block|{
comment|// no need to send to our self
continue|continue;
block|}
comment|// try and serialize the cluster state once (or per version), so we don't serialize it
comment|// per node when we send it over the wire, compress it while we are at it...
name|CachedStreamOutput
operator|.
name|Entry
name|entry
init|=
name|serializedStates
operator|.
name|get
argument_list|(
name|node
operator|.
name|version
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|entry
operator|=
name|CachedStreamOutput
operator|.
name|popEntry
argument_list|()
expr_stmt|;
name|StreamOutput
name|stream
init|=
name|entry
operator|.
name|handles
argument_list|(
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setVersion
argument_list|(
name|node
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterState
operator|.
name|Builder
operator|.
name|writeTo
argument_list|(
name|clusterState
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|serializedStates
operator|.
name|put
argument_list|(
name|node
operator|.
name|version
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to serialize cluster_state before publishing it to nodes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|PublishClusterStateRequestHandler
operator|.
name|ACTION
argument_list|,
operator|new
name|PublishClusterStateRequest
argument_list|(
name|entry
operator|.
name|bytes
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withHighType
argument_list|()
operator|.
name|withCompress
argument_list|(
literal|false
argument_list|)
argument_list|,
comment|// no need to compress, we already compressed the bytes
operator|new
name|VoidTransportResponseHandler
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to send cluster state to [{}], should be detected as failed soon..."
argument_list|,
name|exp
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|CachedStreamOutput
operator|.
name|Entry
name|entry
range|:
name|serializedStates
operator|.
name|values
argument_list|()
control|)
block|{
name|CachedStreamOutput
operator|.
name|pushEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|PublishClusterStateRequest
class|class
name|PublishClusterStateRequest
implements|implements
name|Streamable
block|{
DECL|field|clusterStateInBytes
name|BytesReference
name|clusterStateInBytes
decl_stmt|;
DECL|field|version
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
DECL|method|PublishClusterStateRequest
specifier|private
name|PublishClusterStateRequest
parameter_list|()
block|{         }
DECL|method|PublishClusterStateRequest
specifier|private
name|PublishClusterStateRequest
parameter_list|(
name|BytesReference
name|clusterStateInBytes
parameter_list|)
block|{
name|this
operator|.
name|clusterStateInBytes
operator|=
name|clusterStateInBytes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|clusterStateInBytes
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|clusterStateInBytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PublishClusterStateRequestHandler
specifier|private
class|class
name|PublishClusterStateRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|PublishClusterStateRequest
argument_list|>
block|{
DECL|field|ACTION
specifier|static
specifier|final
name|String
name|ACTION
init|=
literal|"discovery/zen/publish"
decl_stmt|;
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|PublishClusterStateRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|PublishClusterStateRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|PublishClusterStateRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|Compressor
name|compressor
init|=
name|CompressorFactory
operator|.
name|compressor
argument_list|(
name|request
operator|.
name|clusterStateInBytes
argument_list|)
decl_stmt|;
name|StreamInput
name|in
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
name|CachedStreamInput
operator|.
name|cachedHandlesCompressed
argument_list|(
name|compressor
argument_list|,
name|request
operator|.
name|clusterStateInBytes
operator|.
name|streamInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
name|CachedStreamInput
operator|.
name|cachedHandles
argument_list|(
name|request
operator|.
name|clusterStateInBytes
operator|.
name|streamInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|setVersion
argument_list|(
name|request
operator|.
name|version
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|,
name|nodesProvider
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onNewClusterState
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|VoidStreamable
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
block|}
end_class

end_unit

