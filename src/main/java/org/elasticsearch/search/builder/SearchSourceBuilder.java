begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.builder
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectFloatOpenHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AbstractAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|innerhits
operator|.
name|InnerHitsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|source
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A search source builder allowing to easily build search source. Simple construction  * using {@link org.elasticsearch.search.builder.SearchSourceBuilder#searchSource()}.  *  * @see org.elasticsearch.action.search.SearchRequest#source(SearchSourceBuilder)  */
end_comment

begin_class
DECL|class|SearchSourceBuilder
specifier|public
class|class
name|SearchSourceBuilder
implements|implements
name|ToXContent
block|{
comment|/**      * A static factory method to construct a new search source.      */
DECL|method|searchSource
specifier|public
specifier|static
name|SearchSourceBuilder
name|searchSource
parameter_list|()
block|{
return|return
operator|new
name|SearchSourceBuilder
argument_list|()
return|;
block|}
comment|/**      * A static factory method to construct new search highlights.      */
DECL|method|highlight
specifier|public
specifier|static
name|HighlightBuilder
name|highlight
parameter_list|()
block|{
return|return
operator|new
name|HighlightBuilder
argument_list|()
return|;
block|}
DECL|field|queryBuilder
specifier|private
name|QueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|queryBinary
specifier|private
name|BytesReference
name|queryBinary
decl_stmt|;
DECL|field|postFilterBuilder
specifier|private
name|FilterBuilder
name|postFilterBuilder
decl_stmt|;
DECL|field|filterBinary
specifier|private
name|BytesReference
name|filterBinary
decl_stmt|;
DECL|field|from
specifier|private
name|int
name|from
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|explain
specifier|private
name|Boolean
name|explain
decl_stmt|;
DECL|field|version
specifier|private
name|Boolean
name|version
decl_stmt|;
DECL|field|sorts
specifier|private
name|List
argument_list|<
name|SortBuilder
argument_list|>
name|sorts
decl_stmt|;
DECL|field|trackScores
specifier|private
name|boolean
name|trackScores
init|=
literal|false
decl_stmt|;
DECL|field|minScore
specifier|private
name|Float
name|minScore
decl_stmt|;
DECL|field|timeoutInMillis
specifier|private
name|long
name|timeoutInMillis
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|terminateAfter
specifier|private
name|int
name|terminateAfter
init|=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
decl_stmt|;
DECL|field|fieldNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
DECL|field|fieldDataFields
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
decl_stmt|;
DECL|field|scriptFields
specifier|private
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
decl_stmt|;
DECL|field|fetchSourceContext
specifier|private
name|FetchSourceContext
name|fetchSourceContext
decl_stmt|;
DECL|field|aggregations
specifier|private
name|List
argument_list|<
name|AbstractAggregationBuilder
argument_list|>
name|aggregations
decl_stmt|;
DECL|field|aggregationsBinary
specifier|private
name|BytesReference
name|aggregationsBinary
decl_stmt|;
DECL|field|highlightBuilder
specifier|private
name|HighlightBuilder
name|highlightBuilder
decl_stmt|;
DECL|field|suggestBuilder
specifier|private
name|SuggestBuilder
name|suggestBuilder
decl_stmt|;
DECL|field|innerHitsBuilder
specifier|private
name|InnerHitsBuilder
name|innerHitsBuilder
decl_stmt|;
DECL|field|rescoreBuilders
specifier|private
name|List
argument_list|<
name|RescoreBuilder
argument_list|>
name|rescoreBuilders
decl_stmt|;
DECL|field|defaultRescoreWindowSize
specifier|private
name|Integer
name|defaultRescoreWindowSize
decl_stmt|;
DECL|field|indexBoost
specifier|private
name|ObjectFloatOpenHashMap
argument_list|<
name|String
argument_list|>
name|indexBoost
init|=
literal|null
decl_stmt|;
DECL|field|stats
specifier|private
name|String
index|[]
name|stats
decl_stmt|;
comment|/**      * Constructs a new search source builder.      */
DECL|method|SearchSourceBuilder
specifier|public
name|SearchSourceBuilder
parameter_list|()
block|{     }
comment|/**      * Constructs a new search source builder with a search query.      *      * @see org.elasticsearch.index.query.QueryBuilders      */
DECL|method|query
specifier|public
name|SearchSourceBuilder
name|query
parameter_list|(
name|QueryBuilder
name|query
parameter_list|)
block|{
name|this
operator|.
name|queryBuilder
operator|=
name|query
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|query
specifier|public
name|SearchSourceBuilder
name|query
parameter_list|(
name|byte
index|[]
name|queryBinary
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|queryBinary
argument_list|,
literal|0
argument_list|,
name|queryBinary
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|query
specifier|public
name|SearchSourceBuilder
name|query
parameter_list|(
name|byte
index|[]
name|queryBinary
parameter_list|,
name|int
name|queryBinaryOffset
parameter_list|,
name|int
name|queryBinaryLength
parameter_list|)
block|{
return|return
name|query
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|queryBinary
argument_list|,
name|queryBinaryOffset
argument_list|,
name|queryBinaryLength
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|query
specifier|public
name|SearchSourceBuilder
name|query
parameter_list|(
name|BytesReference
name|queryBinary
parameter_list|)
block|{
name|this
operator|.
name|queryBinary
operator|=
name|queryBinary
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|query
specifier|public
name|SearchSourceBuilder
name|query
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|queryString
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Constructs a new search source builder with a query from a builder.      */
DECL|method|query
specifier|public
name|SearchSourceBuilder
name|query
parameter_list|(
name|XContentBuilder
name|query
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|query
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Constructs a new search source builder with a query from a map.      */
DECL|method|query
specifier|public
name|SearchSourceBuilder
name|query
parameter_list|(
name|Map
name|query
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|Requests
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|query
argument_list|(
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|query
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Sets a filter that will be executed after the query has been executed and only has affect on the search hits      * (not aggregations). This filter is always executed as last filtering mechanism.      */
DECL|method|postFilter
specifier|public
name|SearchSourceBuilder
name|postFilter
parameter_list|(
name|FilterBuilder
name|postFilter
parameter_list|)
block|{
name|this
operator|.
name|postFilterBuilder
operator|=
name|postFilter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not aggs for example).      */
DECL|method|postFilter
specifier|public
name|SearchSourceBuilder
name|postFilter
parameter_list|(
name|String
name|postFilterString
parameter_list|)
block|{
return|return
name|postFilter
argument_list|(
name|postFilterString
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not aggs for example).      */
DECL|method|postFilter
specifier|public
name|SearchSourceBuilder
name|postFilter
parameter_list|(
name|byte
index|[]
name|postFilter
parameter_list|)
block|{
return|return
name|postFilter
argument_list|(
name|postFilter
argument_list|,
literal|0
argument_list|,
name|postFilter
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not aggs for example).      */
DECL|method|postFilter
specifier|public
name|SearchSourceBuilder
name|postFilter
parameter_list|(
name|byte
index|[]
name|postFilterBinary
parameter_list|,
name|int
name|postFilterBinaryOffset
parameter_list|,
name|int
name|postFilterBinaryLength
parameter_list|)
block|{
return|return
name|postFilter
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|postFilterBinary
argument_list|,
name|postFilterBinaryOffset
argument_list|,
name|postFilterBinaryLength
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not aggs for example).      */
DECL|method|postFilter
specifier|public
name|SearchSourceBuilder
name|postFilter
parameter_list|(
name|BytesReference
name|postFilterBinary
parameter_list|)
block|{
name|this
operator|.
name|filterBinary
operator|=
name|postFilterBinary
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a query from a builder.      */
DECL|method|postFilter
specifier|public
name|SearchSourceBuilder
name|postFilter
parameter_list|(
name|XContentBuilder
name|postFilter
parameter_list|)
block|{
return|return
name|postFilter
argument_list|(
name|postFilter
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Constructs a new search source builder with a query from a map.      */
DECL|method|postFilter
specifier|public
name|SearchSourceBuilder
name|postFilter
parameter_list|(
name|Map
name|postFilter
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|Requests
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|postFilter
argument_list|)
expr_stmt|;
return|return
name|postFilter
argument_list|(
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|postFilter
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * From index to start the search from. Defaults to<tt>0</tt>.      */
DECL|method|from
specifier|public
name|SearchSourceBuilder
name|from
parameter_list|(
name|int
name|from
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The number of search hits to return. Defaults to<tt>10</tt>.      */
DECL|method|size
specifier|public
name|SearchSourceBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the minimum score below which docs will be filtered out.      */
DECL|method|minScore
specifier|public
name|SearchSourceBuilder
name|minScore
parameter_list|(
name|float
name|minScore
parameter_list|)
block|{
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with an      * explanation of the hit (ranking).      */
DECL|method|explain
specifier|public
name|SearchSourceBuilder
name|explain
parameter_list|(
name|Boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with a version      * associated with it.      */
DECL|method|version
specifier|public
name|SearchSourceBuilder
name|version
parameter_list|(
name|Boolean
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * An optional timeout to control how long search is allowed to take.      */
DECL|method|timeout
specifier|public
name|SearchSourceBuilder
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeoutInMillis
operator|=
name|timeout
operator|.
name|millis
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * An optional timeout to control how long search is allowed to take.      */
DECL|method|timeout
specifier|public
name|SearchSourceBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeoutInMillis
operator|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|timeout
argument_list|,
literal|null
argument_list|)
operator|.
name|millis
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * An optional terminate_after to terminate the search after      * collecting<code>terminateAfter</code> documents      */
DECL|method|terminateAfter
specifier|public
name|SearchSourceBuilder
name|terminateAfter
parameter_list|(
name|int
name|terminateAfter
parameter_list|)
block|{
if|if
condition|(
name|terminateAfter
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"terminateAfter must be> 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|terminateAfter
operator|=
name|terminateAfter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a sort against the given field name and the sort ordering.      *      * @param name  The name of the field      * @param order The sort ordering      */
DECL|method|sort
specifier|public
name|SearchSourceBuilder
name|sort
parameter_list|(
name|String
name|name
parameter_list|,
name|SortOrder
name|order
parameter_list|)
block|{
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
name|name
argument_list|)
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Add a sort against the given field name.      *      * @param name The name of the field to sort by      */
DECL|method|sort
specifier|public
name|SearchSourceBuilder
name|sort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a sort builder.      */
DECL|method|sort
specifier|public
name|SearchSourceBuilder
name|sort
parameter_list|(
name|SortBuilder
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sorts
operator|==
literal|null
condition|)
block|{
name|sorts
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|sorts
operator|.
name|add
argument_list|(
name|sort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Applies when sorting, and controls if scores will be tracked as well. Defaults to      *<tt>false</tt>.      */
DECL|method|trackScores
specifier|public
name|SearchSourceBuilder
name|trackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|this
operator|.
name|trackScores
operator|=
name|trackScores
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add an get to perform as part of the search.      */
DECL|method|aggregation
specifier|public
name|SearchSourceBuilder
name|aggregation
parameter_list|(
name|AbstractAggregationBuilder
name|aggregation
parameter_list|)
block|{
if|if
condition|(
name|aggregations
operator|==
literal|null
condition|)
block|{
name|aggregations
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|aggregations
operator|.
name|add
argument_list|(
name|aggregation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) addAggregation.      */
DECL|method|aggregations
specifier|public
name|SearchSourceBuilder
name|aggregations
parameter_list|(
name|byte
index|[]
name|aggregationsBinary
parameter_list|)
block|{
return|return
name|aggregations
argument_list|(
name|aggregationsBinary
argument_list|,
literal|0
argument_list|,
name|aggregationsBinary
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) addAggregation.      */
DECL|method|aggregations
specifier|public
name|SearchSourceBuilder
name|aggregations
parameter_list|(
name|byte
index|[]
name|aggregationsBinary
parameter_list|,
name|int
name|aggregationsBinaryOffset
parameter_list|,
name|int
name|aggregationsBinaryLength
parameter_list|)
block|{
return|return
name|aggregations
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|aggregationsBinary
argument_list|,
name|aggregationsBinaryOffset
argument_list|,
name|aggregationsBinaryLength
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) addAggregation.      */
DECL|method|aggregations
specifier|public
name|SearchSourceBuilder
name|aggregations
parameter_list|(
name|BytesReference
name|aggregationsBinary
parameter_list|)
block|{
name|this
operator|.
name|aggregationsBinary
operator|=
name|aggregationsBinary
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) addAggregation.      */
DECL|method|aggregations
specifier|public
name|SearchSourceBuilder
name|aggregations
parameter_list|(
name|XContentBuilder
name|aggs
parameter_list|)
block|{
return|return
name|aggregations
argument_list|(
name|aggs
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Set the rescore window size for rescores that don't specify their window.      * @param defaultRescoreWindowSize      * @return      */
DECL|method|defaultRescoreWindowSize
specifier|public
name|SearchSourceBuilder
name|defaultRescoreWindowSize
parameter_list|(
name|int
name|defaultRescoreWindowSize
parameter_list|)
block|{
name|this
operator|.
name|defaultRescoreWindowSize
operator|=
name|defaultRescoreWindowSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) addAggregation.      */
DECL|method|aggregations
specifier|public
name|SearchSourceBuilder
name|aggregations
parameter_list|(
name|Map
name|aggregations
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|Requests
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|aggregations
argument_list|)
expr_stmt|;
return|return
name|aggregations
argument_list|(
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|aggregations
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|highlighter
specifier|public
name|HighlightBuilder
name|highlighter
parameter_list|()
block|{
if|if
condition|(
name|highlightBuilder
operator|==
literal|null
condition|)
block|{
name|highlightBuilder
operator|=
operator|new
name|HighlightBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|highlightBuilder
return|;
block|}
comment|/**      * Adds highlight to perform as part of the search.      */
DECL|method|highlight
specifier|public
name|SearchSourceBuilder
name|highlight
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|)
block|{
name|this
operator|.
name|highlightBuilder
operator|=
name|highlightBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|innerHitsBuilder
specifier|public
name|InnerHitsBuilder
name|innerHitsBuilder
parameter_list|()
block|{
if|if
condition|(
name|innerHitsBuilder
operator|==
literal|null
condition|)
block|{
name|innerHitsBuilder
operator|=
operator|new
name|InnerHitsBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|innerHitsBuilder
return|;
block|}
DECL|method|suggest
specifier|public
name|SuggestBuilder
name|suggest
parameter_list|()
block|{
if|if
condition|(
name|suggestBuilder
operator|==
literal|null
condition|)
block|{
name|suggestBuilder
operator|=
operator|new
name|SuggestBuilder
argument_list|(
literal|"suggest"
argument_list|)
expr_stmt|;
block|}
return|return
name|suggestBuilder
return|;
block|}
DECL|method|addRescorer
specifier|public
name|SearchSourceBuilder
name|addRescorer
parameter_list|(
name|RescoreBuilder
name|rescoreBuilder
parameter_list|)
block|{
if|if
condition|(
name|rescoreBuilders
operator|==
literal|null
condition|)
block|{
name|rescoreBuilders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|rescoreBuilders
operator|.
name|add
argument_list|(
name|rescoreBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|clearRescorers
specifier|public
name|SearchSourceBuilder
name|clearRescorers
parameter_list|()
block|{
name|rescoreBuilders
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicates whether the response should contain the stored _source for every hit      *      * @param fetch      * @return      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
name|boolean
name|fetch
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|fetchSourceContext
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
operator|new
name|FetchSourceContext
argument_list|(
name|fetch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|fetchSourceContext
operator|.
name|fetchSource
argument_list|(
name|fetch
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard      * elements.      *      * @param include An optional include (optionally wildcarded) pattern to filter the returned _source      * @param exclude An optional exclude (optionally wildcarded) pattern to filter the returned _source      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
name|include
parameter_list|,
annotation|@
name|Nullable
name|String
name|exclude
parameter_list|)
block|{
return|return
name|fetchSource
argument_list|(
name|include
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|include
block|}
argument_list|,
name|exclude
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|exclude
block|}
argument_list|)
return|;
block|}
comment|/**      * Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard      * elements.      *      * @param includes An optional list of include (optionally wildcarded) pattern to filter the returned _source      * @param excludes An optional list of exclude (optionally wildcarded) pattern to filter the returned _source      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|includes
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|fetchSourceContext
operator|=
operator|new
name|FetchSourceContext
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicate how the _source should be fetched.      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|FetchSourceContext
name|fetchSourceContext
parameter_list|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
name|fetchSourceContext
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets no fields to be loaded, resulting in only id and type to be returned per field.      */
DECL|method|noFields
specifier|public
name|SearchSourceBuilder
name|noFields
parameter_list|()
block|{
name|this
operator|.
name|fieldNames
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the fields to load and return as part of the search request. If none are specified,      * the source of the document will be returned.      */
DECL|method|fields
specifier|public
name|SearchSourceBuilder
name|fields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fields
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds the fields to load and return as part of the search request. If none are specified,      * the source of the document will be returned.      */
DECL|method|fields
specifier|public
name|SearchSourceBuilder
name|fields
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fieldNames
operator|==
literal|null
condition|)
block|{
name|fieldNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to load and return (note, it must be stored) as part of the search request.      * If none are specified, the source of the document will be return.      */
DECL|method|field
specifier|public
name|SearchSourceBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|fieldNames
operator|==
literal|null
condition|)
block|{
name|fieldNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|fieldNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to load from the field data cache and return as part of the search request.      */
DECL|method|fieldDataField
specifier|public
name|SearchSourceBuilder
name|fieldDataField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|fieldDataFields
operator|==
literal|null
condition|)
block|{
name|fieldDataFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|fieldDataFields
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a script field under the given name with the provided script.      *      * @param name   The name of the field      * @param script The script      */
DECL|method|scriptField
specifier|public
name|SearchSourceBuilder
name|scriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|script
parameter_list|)
block|{
return|return
name|scriptField
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|script
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Adds a script field.      *      * @param name   The name of the field      * @param script The script to execute      * @param params The script parameters      */
DECL|method|scriptField
specifier|public
name|SearchSourceBuilder
name|scriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
return|return
name|scriptField
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|script
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**      * Adds a script field.      *      * @param name   The name of the field      * @param lang   The language of the script      * @param script The script to execute      * @param params The script parameters (can be<tt>null</tt>)      */
DECL|method|scriptField
specifier|public
name|SearchSourceBuilder
name|scriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|scriptFields
operator|==
literal|null
condition|)
block|{
name|scriptFields
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|name
argument_list|,
name|lang
argument_list|,
name|script
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the boost a specific index will receive when the query is executeed against it.      *      * @param index      The index to apply the boost against      * @param indexBoost The boost to apply to the index      */
DECL|method|indexBoost
specifier|public
name|SearchSourceBuilder
name|indexBoost
parameter_list|(
name|String
name|index
parameter_list|,
name|float
name|indexBoost
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|indexBoost
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|indexBoost
operator|=
operator|new
name|ObjectFloatOpenHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|indexBoost
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|indexBoost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The stats groups this request will be aggregated under.      */
DECL|method|stats
specifier|public
name|SearchSourceBuilder
name|stats
parameter_list|(
name|String
modifier|...
name|statsGroups
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|statsGroups
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"\"}"
return|;
block|}
block|}
DECL|method|buildAsBytes
specifier|public
name|BytesReference
name|buildAsBytes
parameter_list|()
throws|throws
name|SearchSourceBuilderException
block|{
return|return
name|buildAsBytes
argument_list|(
name|Requests
operator|.
name|CONTENT_TYPE
argument_list|)
return|;
block|}
DECL|method|buildAsBytes
specifier|public
name|BytesReference
name|buildAsBytes
parameter_list|(
name|XContentType
name|contentType
parameter_list|)
throws|throws
name|SearchSourceBuilderException
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|bytes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SearchSourceBuilderException
argument_list|(
literal|"Failed to build search source"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|public
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|from
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"from"
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeoutInMillis
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"timeout"
argument_list|,
name|timeoutInMillis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terminateAfter
operator|!=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"terminate_after"
argument_list|,
name|terminateAfter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryBinary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|queryBinary
argument_list|)
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
literal|"query"
argument_list|,
name|queryBinary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"query_binary"
argument_list|,
name|queryBinary
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|postFilterBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"post_filter"
argument_list|)
expr_stmt|;
name|postFilterBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterBinary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|filterBinary
argument_list|)
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
literal|"filter"
argument_list|,
name|filterBinary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"filter_binary"
argument_list|,
name|filterBinary
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|minScore
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min_score"
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|explain
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"explain"
argument_list|,
name|explain
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchSourceContext
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fetchSourceContext
operator|.
name|fetchSource
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"_source"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"_source"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|array
argument_list|(
literal|"includes"
argument_list|,
name|fetchSourceContext
operator|.
name|includes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|array
argument_list|(
literal|"excludes"
argument_list|,
name|fetchSourceContext
operator|.
name|excludes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldNames
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"fields"
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"fields"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldDataFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"fielddata_fields"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldDataFields
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scriptFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"script_fields"
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptField
name|scriptField
range|:
name|scriptFields
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|scriptField
operator|.
name|fieldName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
name|scriptField
operator|.
name|script
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|scriptField
operator|.
name|lang
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
name|scriptField
operator|.
name|lang
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scriptField
operator|.
name|params
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"params"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|scriptField
operator|.
name|params
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sorts
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"sort"
argument_list|)
expr_stmt|;
for|for
control|(
name|SortBuilder
name|sort
range|:
name|sorts
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|sort
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trackScores
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"track_scores"
argument_list|,
name|trackScores
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexBoost
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices_boost"
argument_list|)
expr_stmt|;
specifier|final
name|boolean
index|[]
name|states
init|=
name|indexBoost
operator|.
name|allocated
decl_stmt|;
specifier|final
name|Object
index|[]
name|keys
init|=
name|indexBoost
operator|.
name|keys
decl_stmt|;
specifier|final
name|float
index|[]
name|values
init|=
name|indexBoost
operator|.
name|values
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|states
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|states
index|[
name|i
index|]
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
operator|(
name|String
operator|)
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"aggregations"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
for|for
control|(
name|AbstractAggregationBuilder
name|aggregation
range|:
name|aggregations
control|)
block|{
name|aggregation
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|aggregationsBinary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|aggregationsBinary
argument_list|)
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
literal|"aggregations"
argument_list|,
name|aggregationsBinary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"aggregations_binary"
argument_list|,
name|aggregationsBinary
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|highlightBuilder
operator|!=
literal|null
condition|)
block|{
name|highlightBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerHitsBuilder
operator|!=
literal|null
condition|)
block|{
name|innerHitsBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestBuilder
operator|!=
literal|null
condition|)
block|{
name|suggestBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rescoreBuilders
operator|!=
literal|null
condition|)
block|{
comment|// Strip empty rescoreBuilders from the request
name|Iterator
argument_list|<
name|RescoreBuilder
argument_list|>
name|itr
init|=
name|rescoreBuilders
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|itr
operator|.
name|next
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Now build the request taking care to skip empty lists and only send the object form
comment|// if there is just one builder.
if|if
condition|(
name|rescoreBuilders
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"rescore"
argument_list|)
expr_stmt|;
name|rescoreBuilders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|rescoreBuilders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|windowSize
argument_list|()
operator|==
literal|null
operator|&&
name|defaultRescoreWindowSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"window_size"
argument_list|,
name|defaultRescoreWindowSize
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|rescoreBuilders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"rescore"
argument_list|)
expr_stmt|;
for|for
control|(
name|RescoreBuilder
name|rescoreBuilder
range|:
name|rescoreBuilders
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|rescoreBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|rescoreBuilder
operator|.
name|windowSize
argument_list|()
operator|==
literal|null
operator|&&
name|defaultRescoreWindowSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"window_size"
argument_list|,
name|defaultRescoreWindowSize
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"stats"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|stat
range|:
name|stats
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ScriptField
specifier|private
specifier|static
class|class
name|ScriptField
block|{
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|String
name|script
decl_stmt|;
DECL|field|lang
specifier|private
specifier|final
name|String
name|lang
decl_stmt|;
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
DECL|method|ScriptField
specifier|private
name|ScriptField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|script
specifier|public
name|String
name|script
parameter_list|()
block|{
return|return
name|script
return|;
block|}
DECL|method|lang
specifier|public
name|String
name|lang
parameter_list|()
block|{
return|return
name|this
operator|.
name|lang
return|;
block|}
DECL|method|params
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|params
return|;
block|}
block|}
DECL|class|PartialField
specifier|private
specifier|static
class|class
name|PartialField
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|includes
specifier|private
specifier|final
name|String
index|[]
name|includes
decl_stmt|;
DECL|field|excludes
specifier|private
specifier|final
name|String
index|[]
name|excludes
decl_stmt|;
DECL|method|PartialField
specifier|private
name|PartialField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|includes
parameter_list|,
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|includes
operator|=
name|includes
expr_stmt|;
name|this
operator|.
name|excludes
operator|=
name|excludes
expr_stmt|;
block|}
DECL|method|PartialField
specifier|private
name|PartialField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|include
parameter_list|,
name|String
name|exclude
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|includes
operator|=
name|include
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|String
index|[]
block|{
name|include
block|}
expr_stmt|;
name|this
operator|.
name|excludes
operator|=
name|exclude
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|String
index|[]
block|{
name|exclude
block|}
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|includes
specifier|public
name|String
index|[]
name|includes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
DECL|method|excludes
specifier|public
name|String
index|[]
name|excludes
parameter_list|()
block|{
return|return
name|excludes
return|;
block|}
block|}
block|}
end_class

end_unit

