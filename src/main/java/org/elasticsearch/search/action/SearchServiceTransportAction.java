begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|IndicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|OriginalIndices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalScrollSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ShardSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|ScrollQuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * An encapsulation of {@link org.elasticsearch.search.SearchService} operations exposed through  * transport.  */
end_comment

begin_class
DECL|class|SearchServiceTransportAction
specifier|public
class|class
name|SearchServiceTransportAction
extends|extends
name|AbstractComponent
block|{
DECL|field|FREE_CONTEXT_SCROLL_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FREE_CONTEXT_SCROLL_ACTION_NAME
init|=
literal|"indices:data/read/search[free_context/scroll]"
decl_stmt|;
DECL|field|FREE_CONTEXT_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FREE_CONTEXT_ACTION_NAME
init|=
literal|"indices:data/read/search[free_context]"
decl_stmt|;
DECL|field|CLEAR_SCROLL_CONTEXTS_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CLEAR_SCROLL_CONTEXTS_ACTION_NAME
init|=
literal|"indices:data/read/search[clear_scroll_contexts]"
decl_stmt|;
DECL|field|DFS_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DFS_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/dfs]"
decl_stmt|;
DECL|field|QUERY_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query]"
decl_stmt|;
DECL|field|QUERY_ID_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_ID_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query/id]"
decl_stmt|;
DECL|field|QUERY_SCROLL_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_SCROLL_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query/scroll]"
decl_stmt|;
DECL|field|QUERY_FETCH_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_FETCH_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query+fetch]"
decl_stmt|;
DECL|field|QUERY_QUERY_FETCH_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_QUERY_FETCH_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query/query+fetch]"
decl_stmt|;
DECL|field|QUERY_FETCH_SCROLL_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_FETCH_SCROLL_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query+fetch/scroll]"
decl_stmt|;
DECL|field|FETCH_ID_SCROLL_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FETCH_ID_SCROLL_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/fetch/id/scroll]"
decl_stmt|;
DECL|field|FETCH_ID_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FETCH_ID_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/fetch/id]"
decl_stmt|;
DECL|field|SCAN_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SCAN_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/scan]"
decl_stmt|;
DECL|field|SCAN_SCROLL_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SCAN_SCROLL_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/scan/scroll]"
decl_stmt|;
DECL|class|FreeContextResponseHandler
specifier|static
specifier|final
class|class
name|FreeContextResponseHandler
implements|implements
name|TransportResponseHandler
argument_list|<
name|SearchFreeContextResponse
argument_list|>
block|{
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|Boolean
argument_list|>
name|listener
decl_stmt|;
DECL|method|FreeContextResponseHandler
name|FreeContextResponseHandler
parameter_list|(
specifier|final
name|ActionListener
argument_list|<
name|Boolean
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|SearchFreeContextResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|SearchFreeContextResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|handleResponse
specifier|public
name|void
name|handleResponse
parameter_list|(
name|SearchFreeContextResponse
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|freed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleException
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
comment|//
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|searchService
specifier|private
specifier|final
name|SearchService
name|searchService
decl_stmt|;
DECL|field|freeContextResponseHandler
specifier|private
specifier|final
name|FreeContextResponseHandler
name|freeContextResponseHandler
init|=
operator|new
name|FreeContextResponseHandler
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Boolean
name|aBoolean
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to send release search context"
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Inject
DECL|method|SearchServiceTransportAction
specifier|public
name|SearchServiceTransportAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|SearchService
name|searchService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|searchService
operator|=
name|searchService
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|FREE_CONTEXT_SCROLL_ACTION_NAME
argument_list|,
operator|new
name|ScrollFreeContextTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|FREE_CONTEXT_ACTION_NAME
argument_list|,
operator|new
name|SearchFreeContextTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|CLEAR_SCROLL_CONTEXTS_ACTION_NAME
argument_list|,
operator|new
name|ClearScrollContextsTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|DFS_ACTION_NAME
argument_list|,
operator|new
name|SearchDfsTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|QUERY_ACTION_NAME
argument_list|,
operator|new
name|SearchQueryTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|QUERY_ID_ACTION_NAME
argument_list|,
operator|new
name|SearchQueryByIdTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|QUERY_SCROLL_ACTION_NAME
argument_list|,
operator|new
name|SearchQueryScrollTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|QUERY_FETCH_ACTION_NAME
argument_list|,
operator|new
name|SearchQueryFetchTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|QUERY_QUERY_FETCH_ACTION_NAME
argument_list|,
operator|new
name|SearchQueryQueryFetchTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|QUERY_FETCH_SCROLL_ACTION_NAME
argument_list|,
operator|new
name|SearchQueryFetchScrollTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|FETCH_ID_SCROLL_ACTION_NAME
argument_list|,
operator|new
name|ScrollFetchByIdTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|FETCH_ID_ACTION_NAME
argument_list|,
operator|new
name|SearchFetchByIdTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|SCAN_ACTION_NAME
argument_list|,
operator|new
name|SearchScanTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|SCAN_SCROLL_ACTION_NAME
argument_list|,
operator|new
name|SearchScanScrollTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sendFreeContext
specifier|public
name|void
name|sendFreeContext
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|long
name|contextId
parameter_list|,
name|SearchRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|searchService
operator|.
name|freeContext
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|FREE_CONTEXT_ACTION_NAME
argument_list|,
operator|new
name|SearchFreeContextRequest
argument_list|(
name|request
argument_list|,
name|contextId
argument_list|)
argument_list|,
name|freeContextResponseHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendFreeContext
specifier|public
name|void
name|sendFreeContext
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|contextId
parameter_list|,
name|ClearScrollRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|Boolean
argument_list|>
name|actionListener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|boolean
name|freed
init|=
name|searchService
operator|.
name|freeContext
argument_list|(
name|contextId
argument_list|)
decl_stmt|;
name|actionListener
operator|.
name|onResponse
argument_list|(
name|freed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|node
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_4_0_Beta1
argument_list|)
condition|)
block|{
comment|//use the separate action for scroll when possible
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|FREE_CONTEXT_SCROLL_ACTION_NAME
argument_list|,
operator|new
name|ScrollFreeContextRequest
argument_list|(
name|request
argument_list|,
name|contextId
argument_list|)
argument_list|,
operator|new
name|FreeContextResponseHandler
argument_list|(
name|actionListener
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//fallback to the previous action name if the new one is not supported by the node we are talking to.
comment|//Do use the same request since it has the same binary format as the previous SearchFreeContextRequest (without the OriginalIndices addition).
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|FREE_CONTEXT_ACTION_NAME
argument_list|,
operator|new
name|ScrollFreeContextRequest
argument_list|(
name|request
argument_list|,
name|contextId
argument_list|)
argument_list|,
operator|new
name|FreeContextResponseHandler
argument_list|(
name|actionListener
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|sendClearAllScrollContexts
specifier|public
name|void
name|sendClearAllScrollContexts
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|ClearScrollRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|Boolean
argument_list|>
name|actionListener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|searchService
operator|.
name|freeAllScrollContexts
argument_list|()
expr_stmt|;
name|actionListener
operator|.
name|onResponse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|CLEAR_SCROLL_CONTEXTS_ACTION_NAME
argument_list|,
operator|new
name|ClearScrollContextsRequest
argument_list|(
name|request
argument_list|)
argument_list|,
operator|new
name|TransportResponseHandler
argument_list|<
name|TransportResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TransportResponse
name|newInstance
parameter_list|()
block|{
return|return
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|)
block|{
name|actionListener
operator|.
name|onResponse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|actionListener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteDfs
specifier|public
name|void
name|sendExecuteDfs
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|ShardSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|DfsSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|DfsSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DfsSearchResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeDfsPhase
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|DFS_ACTION_NAME
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|DfsSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DfsSearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|DfsSearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|DfsSearchResult
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteQuery
specifier|public
name|void
name|sendExecuteQuery
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|ShardSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|QuerySearchResultProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QuerySearchResultProvider
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|QUERY_ACTION_NAME
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|QuerySearchResultProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QuerySearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|QuerySearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|QuerySearchResultProvider
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteQuery
specifier|public
name|void
name|sendExecuteQuery
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|QuerySearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|QuerySearchResult
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|QuerySearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QuerySearchResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|QUERY_ID_ACTION_NAME
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|QuerySearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QuerySearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|QuerySearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|QuerySearchResult
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteQuery
specifier|public
name|void
name|sendExecuteQuery
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|InternalScrollSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|QuerySearchResult
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|QuerySearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QuerySearchResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|)
operator|.
name|queryResult
argument_list|()
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|QUERY_SCROLL_ACTION_NAME
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|ScrollQuerySearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScrollQuerySearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ScrollQuerySearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|ScrollQuerySearchResult
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
operator|.
name|queryResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteFetch
specifier|public
name|void
name|sendExecuteFetch
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|ShardSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|QueryFetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|QueryFetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QueryFetchSearchResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|QUERY_FETCH_ACTION_NAME
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|QueryFetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QueryFetchSearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|QueryFetchSearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|QueryFetchSearchResult
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteFetch
specifier|public
name|void
name|sendExecuteFetch
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|QuerySearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|QueryFetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|QueryFetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QueryFetchSearchResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|QUERY_QUERY_FETCH_ACTION_NAME
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|QueryFetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QueryFetchSearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|QueryFetchSearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|QueryFetchSearchResult
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteFetch
specifier|public
name|void
name|sendExecuteFetch
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|InternalScrollSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|QueryFetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|QueryFetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QueryFetchSearchResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|QUERY_FETCH_SCROLL_ACTION_NAME
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|ScrollQueryFetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScrollQueryFetchSearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ScrollQueryFetchSearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|ScrollQueryFetchSearchResult
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
operator|.
name|result
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteFetch
specifier|public
name|void
name|sendExecuteFetch
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|ShardFetchSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|FetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|sendExecuteFetch
argument_list|(
name|node
argument_list|,
name|FETCH_ID_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|sendExecuteFetchScroll
specifier|public
name|void
name|sendExecuteFetchScroll
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|ShardFetchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|FetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|String
name|action
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_4_0_Beta1
argument_list|)
condition|)
block|{
comment|//use the separate action for scroll when possible
name|action
operator|=
name|FETCH_ID_SCROLL_ACTION_NAME
expr_stmt|;
block|}
else|else
block|{
comment|//fallback to the previous action name if the new one is not supported by the node we are talking to.
comment|//Do use the same request since it has the same binary format as the previous FetchSearchRequest (without the OriginalIndices addition).
name|action
operator|=
name|FETCH_ID_ACTION_NAME
expr_stmt|;
block|}
name|sendExecuteFetch
argument_list|(
name|node
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|sendExecuteFetch
specifier|private
name|void
name|sendExecuteFetch
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|action
parameter_list|,
specifier|final
name|ShardFetchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|FetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|FetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FetchSearchResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|FetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FetchSearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|FetchSearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|FetchSearchResult
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteScan
specifier|public
name|void
name|sendExecuteScan
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|ShardSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|QuerySearchResult
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|QuerySearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QuerySearchResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeScan
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|SCAN_ACTION_NAME
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|QuerySearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QuerySearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|QuerySearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|QuerySearchResult
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteScan
specifier|public
name|void
name|sendExecuteScan
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|InternalScrollSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|QueryFetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|execute
argument_list|(
operator|new
name|Callable
argument_list|<
name|QueryFetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QueryFetchSearchResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|searchService
operator|.
name|executeScan
argument_list|(
name|request
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|SCAN_SCROLL_ACTION_NAME
argument_list|,
name|request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|ScrollQueryFetchSearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScrollQueryFetchSearchResult
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ScrollQueryFetchSearchResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|ScrollQueryFetchSearchResult
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResult
argument_list|(
name|response
operator|.
name|result
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|execute
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|execute
parameter_list|(
specifier|final
name|Callable
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|callable
parameter_list|,
specifier|final
name|SearchServiceListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
try|try
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Listeners typically do counting on errors and successes, and the decision to move to second phase, etc. is based on
comment|// these counts so we need to be careful here to never propagate exceptions thrown by onResult to onFailure
name|T
name|result
init|=
literal|null
decl_stmt|;
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|callable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
operator|=
name|t
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
assert|assert
name|error
operator|!=
literal|null
assert|;
name|listener
operator|.
name|onFailure
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|error
operator|==
literal|null
operator|:
name|error
assert|;
name|listener
operator|.
name|onResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ScrollFreeContextRequest
specifier|static
class|class
name|ScrollFreeContextRequest
extends|extends
name|TransportRequest
block|{
DECL|field|id
specifier|private
name|long
name|id
decl_stmt|;
DECL|method|ScrollFreeContextRequest
name|ScrollFreeContextRequest
parameter_list|()
block|{         }
DECL|method|ScrollFreeContextRequest
name|ScrollFreeContextRequest
parameter_list|(
name|ClearScrollRequest
name|request
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|this
argument_list|(
operator|(
name|TransportRequest
operator|)
name|request
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|ScrollFreeContextRequest
specifier|private
name|ScrollFreeContextRequest
parameter_list|(
name|TransportRequest
name|request
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|long
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SearchFreeContextRequest
specifier|static
class|class
name|SearchFreeContextRequest
extends|extends
name|ScrollFreeContextRequest
implements|implements
name|IndicesRequest
block|{
DECL|field|originalIndices
specifier|private
name|OriginalIndices
name|originalIndices
decl_stmt|;
DECL|method|SearchFreeContextRequest
name|SearchFreeContextRequest
parameter_list|()
block|{         }
DECL|method|SearchFreeContextRequest
name|SearchFreeContextRequest
parameter_list|(
name|SearchRequest
name|request
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|originalIndices
operator|=
operator|new
name|OriginalIndices
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|indices
specifier|public
name|String
index|[]
name|indices
parameter_list|()
block|{
if|if
condition|(
name|originalIndices
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|originalIndices
operator|.
name|indices
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|indicesOptions
specifier|public
name|IndicesOptions
name|indicesOptions
parameter_list|()
block|{
if|if
condition|(
name|originalIndices
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|originalIndices
operator|.
name|indicesOptions
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|originalIndices
operator|=
name|OriginalIndices
operator|.
name|readOriginalIndices
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|OriginalIndices
operator|.
name|writeOriginalIndices
argument_list|(
name|originalIndices
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SearchFreeContextResponse
specifier|static
class|class
name|SearchFreeContextResponse
extends|extends
name|TransportResponse
block|{
DECL|field|freed
specifier|private
name|boolean
name|freed
decl_stmt|;
DECL|method|SearchFreeContextResponse
name|SearchFreeContextResponse
parameter_list|()
block|{         }
DECL|method|SearchFreeContextResponse
name|SearchFreeContextResponse
parameter_list|(
name|boolean
name|freed
parameter_list|)
block|{
name|this
operator|.
name|freed
operator|=
name|freed
expr_stmt|;
block|}
DECL|method|isFreed
specifier|public
name|boolean
name|isFreed
parameter_list|()
block|{
return|return
name|freed
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_2_0
argument_list|)
condition|)
block|{
name|freed
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|freed
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_2_0
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|freed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|BaseFreeContextTransportHandler
specifier|private
specifier|abstract
class|class
name|BaseFreeContextTransportHandler
parameter_list|<
name|FreeContextRequest
extends|extends
name|ScrollFreeContextRequest
parameter_list|>
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|FreeContextRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
specifier|abstract
name|FreeContextRequest
name|newInstance
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|FreeContextRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|freed
init|=
name|searchService
operator|.
name|freeContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|SearchFreeContextResponse
argument_list|(
name|freed
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
comment|// freeing the context is cheap,
comment|// no need for fork it to another thread
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
DECL|class|ScrollFreeContextTransportHandler
class|class
name|ScrollFreeContextTransportHandler
extends|extends
name|BaseFreeContextTransportHandler
argument_list|<
name|ScrollFreeContextRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ScrollFreeContextRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ScrollFreeContextRequest
argument_list|()
return|;
block|}
block|}
DECL|class|SearchFreeContextTransportHandler
class|class
name|SearchFreeContextTransportHandler
extends|extends
name|BaseFreeContextTransportHandler
argument_list|<
name|SearchFreeContextRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|SearchFreeContextRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|SearchFreeContextRequest
argument_list|()
return|;
block|}
block|}
DECL|class|ClearScrollContextsRequest
specifier|static
class|class
name|ClearScrollContextsRequest
extends|extends
name|TransportRequest
block|{
DECL|method|ClearScrollContextsRequest
name|ClearScrollContextsRequest
parameter_list|()
block|{         }
DECL|method|ClearScrollContextsRequest
name|ClearScrollContextsRequest
parameter_list|(
name|TransportRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ClearScrollContextsTransportHandler
class|class
name|ClearScrollContextsTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|ClearScrollContextsRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ClearScrollContextsRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ClearScrollContextsRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ClearScrollContextsRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|searchService
operator|.
name|freeAllScrollContexts
argument_list|()
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
comment|// freeing the context is cheap,
comment|// no need for fork it to another thread
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
DECL|class|SearchDfsTransportHandler
specifier|private
class|class
name|SearchDfsTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|ShardSearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ShardSearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ShardSearchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|DfsSearchResult
name|result
init|=
name|searchService
operator|.
name|executeDfsPhase
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
DECL|class|SearchQueryTransportHandler
specifier|private
class|class
name|SearchQueryTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|ShardSearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ShardSearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ShardSearchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|QuerySearchResultProvider
name|result
init|=
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
DECL|class|SearchQueryByIdTransportHandler
specifier|private
class|class
name|SearchQueryByIdTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|QuerySearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|QuerySearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|QuerySearchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|QuerySearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|QuerySearchResult
name|result
init|=
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
DECL|class|SearchQueryScrollTransportHandler
specifier|private
class|class
name|SearchQueryScrollTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|InternalScrollSearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|InternalScrollSearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|InternalScrollSearchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|InternalScrollSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|ScrollQuerySearchResult
name|result
init|=
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
DECL|class|SearchQueryFetchTransportHandler
specifier|private
class|class
name|SearchQueryFetchTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|ShardSearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ShardSearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ShardSearchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|QueryFetchSearchResult
name|result
init|=
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
DECL|class|SearchQueryQueryFetchTransportHandler
specifier|private
class|class
name|SearchQueryQueryFetchTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|QuerySearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|QuerySearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|QuerySearchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|QuerySearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|QueryFetchSearchResult
name|result
init|=
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
DECL|class|FetchByIdTransportHandler
specifier|private
specifier|abstract
class|class
name|FetchByIdTransportHandler
parameter_list|<
name|Request
extends|extends
name|ShardFetchRequest
parameter_list|>
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|Request
argument_list|>
block|{
DECL|method|newInstance
specifier|public
specifier|abstract
name|Request
name|newInstance
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|FetchSearchResult
name|result
init|=
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
DECL|class|ScrollFetchByIdTransportHandler
specifier|private
class|class
name|ScrollFetchByIdTransportHandler
extends|extends
name|FetchByIdTransportHandler
argument_list|<
name|ShardFetchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ShardFetchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ShardFetchRequest
argument_list|()
return|;
block|}
block|}
DECL|class|SearchFetchByIdTransportHandler
specifier|private
class|class
name|SearchFetchByIdTransportHandler
extends|extends
name|FetchByIdTransportHandler
argument_list|<
name|ShardFetchSearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ShardFetchSearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ShardFetchSearchRequest
argument_list|()
return|;
block|}
block|}
DECL|class|SearchQueryFetchScrollTransportHandler
specifier|private
class|class
name|SearchQueryFetchScrollTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|InternalScrollSearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|InternalScrollSearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|InternalScrollSearchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|InternalScrollSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|ScrollQueryFetchSearchResult
name|result
init|=
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
DECL|class|SearchScanTransportHandler
specifier|private
class|class
name|SearchScanTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|ShardSearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ShardSearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ShardSearchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|QuerySearchResult
name|result
init|=
name|searchService
operator|.
name|executeScan
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
DECL|class|SearchScanScrollTransportHandler
specifier|private
class|class
name|SearchScanScrollTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|InternalScrollSearchRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|InternalScrollSearchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|InternalScrollSearchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|InternalScrollSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|ScrollQueryFetchSearchResult
name|result
init|=
name|searchService
operator|.
name|executeScan
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
block|}
end_class

end_unit

