begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|ScorerAware
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A {@link LeafBucketCollector} that delegates all calls to the sub leaf  * aggregator and sets the scorer on its source of values if it implements  * {@link ScorerAware}.  */
end_comment

begin_class
DECL|class|LeafBucketCollectorBase
specifier|public
class|class
name|LeafBucketCollectorBase
extends|extends
name|LeafBucketCollector
block|{
DECL|field|sub
specifier|private
specifier|final
name|LeafBucketCollector
name|sub
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|ScorerAware
name|values
decl_stmt|;
comment|/**      * @param sub    The leaf collector for sub aggregations.      * @param values The values. {@link ScorerAware#setScorer} will be called automatically on them if they implement {@link ScorerAware}.      */
DECL|method|LeafBucketCollectorBase
specifier|public
name|LeafBucketCollectorBase
parameter_list|(
name|LeafBucketCollector
name|sub
parameter_list|,
name|Object
name|values
parameter_list|)
block|{
name|this
operator|.
name|sub
operator|=
name|sub
expr_stmt|;
if|if
condition|(
name|values
operator|instanceof
name|ScorerAware
condition|)
block|{
name|this
operator|.
name|values
operator|=
operator|(
name|ScorerAware
operator|)
name|values
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|values
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|sub
operator|.
name|setScorer
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|setScorer
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|sub
operator|.
name|collect
argument_list|(
name|doc
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

