begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A base class for all bucket aggregation builders that are based on values (either script generated or field data values)  */
end_comment

begin_class
DECL|class|ValuesSourceAggregationBuilder
specifier|public
specifier|abstract
class|class
name|ValuesSourceAggregationBuilder
parameter_list|<
name|B
extends|extends
name|ValuesSourceAggregationBuilder
parameter_list|<
name|B
parameter_list|>
parameter_list|>
extends|extends
name|AggregationBuilder
argument_list|<
name|B
argument_list|>
block|{
DECL|field|script
specifier|private
name|Script
name|script
decl_stmt|;
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|scriptString
specifier|private
name|String
name|scriptString
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|lang
specifier|private
name|String
name|lang
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|params
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
DECL|field|missing
specifier|private
name|Object
name|missing
decl_stmt|;
comment|/**      * Constructs a new builder.      *      * @param name  The name of the aggregation.      * @param type  The type of the aggregation.      */
DECL|method|ValuesSourceAggregationBuilder
specifier|protected
name|ValuesSourceAggregationBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the field from which the values will be extracted.      *      * @param field     The name of the field      * @return          This builder (fluent interface support)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|field
specifier|public
name|B
name|field
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
comment|/**      * Sets the script which generates the values. If the script is configured along with the field (as in {@link #field(String)}), then      * this script will be treated as a {@code value script}. A<i>value script</i> will be applied on the values that are extracted from      * the field data (you can refer to that value in the script using the {@code _value} reserved variable). If only the script is configured      * (and the no field is configured next to it), then the script will be responsible to generate the values that will be aggregated.      *      * @param script    The configured script.      * @return          This builder (fluent interface support)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|script
specifier|public
name|B
name|script
parameter_list|(
name|Script
name|script
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
comment|/**      * Sets the script which generates the values. If the script is configured      * along with the field (as in {@link #field(String)}), then this script      * will be treated as a {@code value script}. A<i>value script</i> will be      * applied on the values that are extracted from the field data (you can      * refer to that value in the script using the {@code _value} reserved      * variable). If only the script is configured (and the no field is      * configured next to it), then the script will be responsible to generate      * the values that will be aggregated.      *      * @param script      *            The configured script.      * @return This builder (fluent interface support)      * @deprecated Use {@link #script(Script)} instead.      */
annotation|@
name|Deprecated
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|script
specifier|public
name|B
name|script
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|this
operator|.
name|scriptString
operator|=
name|script
expr_stmt|;
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
comment|/**      * Sets the language of the script (if one is defined).      *<p/>      * Also see {@link #script(String)}.      *      * @param lang      *            The language of the script.      * @return This builder (fluent interface support)      * @deprecated Use {@link #script(Script)} instead.      */
annotation|@
name|Deprecated
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|lang
specifier|public
name|B
name|lang
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
comment|/**      * Sets the value of a parameter that is used in the script (if one is      * configured).      *      * @param name      *            The name of the parameter.      * @param value      *            The value of the parameter.      * @return This builder (fluent interface support)      * @deprecated Use {@link #script(Script)} instead.      */
annotation|@
name|Deprecated
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|param
specifier|public
name|B
name|param
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
comment|/**      * Sets the values of a parameters that are used in the script (if one is      * configured).      *      * @param params      *            The the parameters.      * @return This builder (fluent interface support)      * @deprecated Use {@link #script(Script)} instead.      */
annotation|@
name|Deprecated
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|params
specifier|public
name|B
name|params
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|params
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|params
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|params
operator|.
name|putAll
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
comment|/**      * Configure the value to use when documents miss a value.      */
DECL|method|missing
specifier|public
name|B
name|missing
parameter_list|(
name|Object
name|missingValue
parameter_list|)
block|{
name|this
operator|.
name|missing
operator|=
name|missingValue
expr_stmt|;
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|internalXContent
specifier|protected
specifier|final
name|XContentBuilder
name|internalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|builderParams
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|scriptString
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
operator|new
name|Script
argument_list|(
name|scriptString
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|lang
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|missing
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"missing"
argument_list|,
name|missing
argument_list|)
expr_stmt|;
block|}
name|doInternalXContent
argument_list|(
name|builder
argument_list|,
name|builderParams
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|doInternalXContent
specifier|protected
specifier|abstract
name|XContentBuilder
name|doInternalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

