begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedLongValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Records a "collect" stream for subsequent play-back using a per-segment  * object to collect matches. Playback is fast because each collection  * contains only the required matches for the current reader.  */
end_comment

begin_class
DECL|class|RecordingPerReaderBucketCollector
specifier|public
class|class
name|RecordingPerReaderBucketCollector
extends|extends
name|RecordingBucketCollector
block|{
DECL|field|perSegmentCollections
specifier|final
name|List
argument_list|<
name|PerSegmentCollects
argument_list|>
name|perSegmentCollections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|currentCollection
specifier|private
name|PerSegmentCollects
name|currentCollection
decl_stmt|;
DECL|field|recordingComplete
specifier|private
name|boolean
name|recordingComplete
decl_stmt|;
DECL|class|PerSegmentCollects
specifier|static
class|class
name|PerSegmentCollects
block|{
DECL|field|readerContext
name|LeafReaderContext
name|readerContext
decl_stmt|;
DECL|field|docs
name|PackedLongValues
operator|.
name|Builder
name|docs
decl_stmt|;
DECL|field|buckets
name|PackedLongValues
operator|.
name|Builder
name|buckets
decl_stmt|;
DECL|field|lastDocId
name|int
name|lastDocId
init|=
literal|0
decl_stmt|;
DECL|method|PerSegmentCollects
name|PerSegmentCollects
parameter_list|(
name|LeafReaderContext
name|readerContext
parameter_list|)
block|{
name|this
operator|.
name|readerContext
operator|=
name|readerContext
expr_stmt|;
block|}
DECL|method|collect
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|owningBucketOrdinal
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|docs
operator|==
literal|null
condition|)
block|{
comment|// TODO unclear what might be reasonable constructor args to pass to this collection
comment|// No way of accurately predicting how many docs will be collected
name|docs
operator|=
name|PackedLongValues
operator|.
name|packedBuilder
argument_list|(
name|PackedInts
operator|.
name|COMPACT
argument_list|)
expr_stmt|;
block|}
comment|// Store as delta-encoded for better compression
name|docs
operator|.
name|add
argument_list|(
name|doc
operator|-
name|lastDocId
argument_list|)
expr_stmt|;
name|lastDocId
operator|=
name|doc
expr_stmt|;
if|if
condition|(
name|buckets
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|owningBucketOrdinal
operator|!=
literal|0
condition|)
block|{
comment|// Store all of the prior bucketOrds (which up until now have
comment|// all been zero based)
name|buckets
operator|=
name|PackedLongValues
operator|.
name|packedBuilder
argument_list|(
name|PackedInts
operator|.
name|COMPACT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|buckets
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// record the new non-zero bucketID
name|buckets
operator|.
name|add
argument_list|(
name|owningBucketOrdinal
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|buckets
operator|.
name|add
argument_list|(
name|owningBucketOrdinal
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|endCollect
name|void
name|endCollect
parameter_list|()
block|{         }
DECL|method|hasItems
name|boolean
name|hasItems
parameter_list|()
block|{
return|return
name|docs
operator|!=
literal|null
return|;
block|}
DECL|method|replay
name|void
name|replay
parameter_list|(
name|BucketCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|lastDocId
operator|=
literal|0
expr_stmt|;
name|collector
operator|.
name|setNextReader
argument_list|(
name|readerContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasItems
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|buckets
operator|==
literal|null
condition|)
block|{
specifier|final
name|PackedLongValues
operator|.
name|Iterator
name|docsIter
init|=
name|docs
operator|.
name|build
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|docsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|lastDocId
operator|+=
operator|(
name|int
operator|)
name|docsIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|collector
operator|.
name|collect
argument_list|(
name|lastDocId
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|docs
operator|.
name|size
argument_list|()
operator|==
name|buckets
operator|.
name|size
argument_list|()
assert|;
specifier|final
name|PackedLongValues
operator|.
name|Iterator
name|docsIter
init|=
name|docs
operator|.
name|build
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|PackedLongValues
operator|.
name|Iterator
name|bucketsIter
init|=
name|buckets
operator|.
name|build
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|docsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|lastDocId
operator|+=
operator|(
name|int
operator|)
name|docsIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|collector
operator|.
name|collect
argument_list|(
name|lastDocId
argument_list|,
name|bucketsIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|RecordingPerReaderBucketCollector
specifier|public
name|RecordingPerReaderBucketCollector
parameter_list|(
name|AggregationContext
name|context
parameter_list|)
block|{
comment|// Call this method to achieve better compression in the recorded arrays of matches
name|context
operator|.
name|ensureScoreDocsInOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|reader
parameter_list|)
block|{
if|if
condition|(
name|recordingComplete
condition|)
block|{
comment|// The way registration works for listening on reader changes we have the potential to be called> once
comment|// TODO fixup the aggs framework so setNextReader calls are delegated to child aggs and not reliant on
comment|// registering a listener.
return|return;
block|}
name|stowLastSegmentCollection
argument_list|()
expr_stmt|;
name|currentCollection
operator|=
operator|new
name|PerSegmentCollects
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|method|stowLastSegmentCollection
specifier|private
name|void
name|stowLastSegmentCollection
parameter_list|()
block|{
if|if
condition|(
name|currentCollection
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentCollection
operator|.
name|hasItems
argument_list|()
condition|)
block|{
name|currentCollection
operator|.
name|endCollect
argument_list|()
expr_stmt|;
name|perSegmentCollections
operator|.
name|add
argument_list|(
name|currentCollection
argument_list|)
expr_stmt|;
block|}
name|currentCollection
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|owningBucketOrdinal
parameter_list|)
throws|throws
name|IOException
block|{
name|currentCollection
operator|.
name|collect
argument_list|(
name|doc
argument_list|,
name|owningBucketOrdinal
argument_list|)
expr_stmt|;
block|}
comment|/*      * Allows clients to replay a stream of collected items.       *       */
annotation|@
name|Override
DECL|method|replayCollection
specifier|public
name|void
name|replayCollection
parameter_list|(
name|BucketCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|PerSegmentCollects
name|collection
range|:
name|perSegmentCollections
control|)
block|{
name|collection
operator|.
name|replay
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
name|collector
operator|.
name|postCollection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postCollection
specifier|public
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
block|{
name|recordingComplete
operator|=
literal|true
expr_stmt|;
name|stowLastSegmentCollection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
block|}
end_class

end_unit

