begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A base class for all bucket aggregation builders.  */
end_comment

begin_class
DECL|class|AggregationBuilder
specifier|public
specifier|abstract
class|class
name|AggregationBuilder
parameter_list|<
name|B
extends|extends
name|AggregationBuilder
parameter_list|<
name|B
parameter_list|>
parameter_list|>
extends|extends
name|AbstractAggregationBuilder
block|{
DECL|field|aggregations
specifier|private
name|List
argument_list|<
name|AbstractAggregationBuilder
argument_list|>
name|aggregations
decl_stmt|;
DECL|field|aggregationsBinary
specifier|private
name|BytesReference
name|aggregationsBinary
decl_stmt|;
DECL|method|AggregationBuilder
specifier|protected
name|AggregationBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a sub get to this bucket get.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|subAggregation
specifier|public
name|B
name|subAggregation
parameter_list|(
name|AbstractAggregationBuilder
name|aggregation
parameter_list|)
block|{
if|if
condition|(
name|aggregations
operator|==
literal|null
condition|)
block|{
name|aggregations
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|aggregations
operator|.
name|add
argument_list|(
name|aggregation
argument_list|)
expr_stmt|;
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) sub addAggregation.      */
DECL|method|subAggregation
specifier|public
name|B
name|subAggregation
parameter_list|(
name|byte
index|[]
name|aggregationsBinary
parameter_list|)
block|{
return|return
name|subAggregation
argument_list|(
name|aggregationsBinary
argument_list|,
literal|0
argument_list|,
name|aggregationsBinary
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) sub addAggregation.      */
DECL|method|subAggregation
specifier|public
name|B
name|subAggregation
parameter_list|(
name|byte
index|[]
name|aggregationsBinary
parameter_list|,
name|int
name|aggregationsBinaryOffset
parameter_list|,
name|int
name|aggregationsBinaryLength
parameter_list|)
block|{
return|return
name|subAggregation
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|aggregationsBinary
argument_list|,
name|aggregationsBinaryOffset
argument_list|,
name|aggregationsBinaryLength
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) sub addAggregation.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|subAggregation
specifier|public
name|B
name|subAggregation
parameter_list|(
name|BytesReference
name|aggregationsBinary
parameter_list|)
block|{
name|this
operator|.
name|aggregationsBinary
operator|=
name|aggregationsBinary
expr_stmt|;
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) sub addAggregation.      */
DECL|method|subAggregation
specifier|public
name|B
name|subAggregation
parameter_list|(
name|XContentBuilder
name|aggs
parameter_list|)
block|{
return|return
name|subAggregation
argument_list|(
name|aggs
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Sets a raw (xcontent / json) sub addAggregation.      */
DECL|method|subAggregation
specifier|public
name|B
name|subAggregation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|aggs
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|Requests
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
return|return
name|subAggregation
argument_list|(
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|aggs
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
specifier|final
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|internalXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggregations
operator|!=
literal|null
operator|||
name|aggregationsBinary
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"aggregations"
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractAggregationBuilder
name|subAgg
range|:
name|aggregations
control|)
block|{
name|subAgg
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|aggregationsBinary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|aggregationsBinary
argument_list|)
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
literal|"aggregations"
argument_list|,
name|aggregationsBinary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"aggregations_binary"
argument_list|,
name|aggregationsBinary
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|internalXContent
specifier|protected
specifier|abstract
name|XContentBuilder
name|internalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

