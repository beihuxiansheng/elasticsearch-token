begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|ReaderContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
operator|.
name|BucketAggregationMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A Collector that can collect data in separate buckets.  */
end_comment

begin_class
DECL|class|BucketCollector
specifier|public
specifier|abstract
class|class
name|BucketCollector
implements|implements
name|ReaderContextAware
block|{
DECL|field|NO_OP_COLLECTOR
specifier|public
specifier|static
name|BucketCollector
name|NO_OP_COLLECTOR
init|=
operator|new
name|BucketCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|bucketOrdinal
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no-op
block|}
block|}
decl_stmt|;
comment|/**      * Wrap the given collectors into a single instance.      */
DECL|method|wrap
specifier|public
specifier|static
name|BucketCollector
name|wrap
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|BucketCollector
argument_list|>
name|collectorList
parameter_list|)
block|{
specifier|final
name|BucketCollector
index|[]
name|collectors
init|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|collectorList
argument_list|,
name|BucketCollector
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|collectors
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
name|NO_OP_COLLECTOR
return|;
case|case
literal|1
case|:
return|return
name|collectors
index|[
literal|0
index|]
return|;
default|default:
return|return
operator|new
name|BucketCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|bucketOrdinal
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|BucketCollector
name|collector
range|:
name|collectors
control|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|docId
argument_list|,
name|bucketOrdinal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
for|for
control|(
name|BucketCollector
name|collector
range|:
name|collectors
control|)
block|{
name|collector
operator|.
name|setNextReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|BucketCollector
name|collector
range|:
name|collectors
control|)
block|{
name|collector
operator|.
name|postCollection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
comment|/**      * Called during the query phase, to collect& aggregate the given document.      *      * @param doc                   The document to be collected/aggregated      * @param bucketOrdinal         The ordinal of the bucket this aggregator belongs to, assuming this aggregator is not a top level aggregator.      *                              Typically, aggregators with {@code #bucketAggregationMode} set to {@link BucketAggregationMode#MULTI_BUCKETS}      *                              will heavily depend on this ordinal. Other aggregators may or may not use it and can see this ordinal as just      *                              an extra information for the aggregation context. For top level aggregators, the ordinal will always be      *                              equal to 0.      * @throws IOException      */
DECL|method|collect
specifier|public
specifier|abstract
name|void
name|collect
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|bucketOrdinal
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Post collection callback.      */
DECL|method|postCollection
specifier|public
specifier|abstract
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

