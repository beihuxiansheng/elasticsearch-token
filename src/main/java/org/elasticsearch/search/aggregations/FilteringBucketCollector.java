begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|LongHash
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Filters a collection stream of docIds and related buckets using a sorted   * list of valid bucket ordinals.  */
end_comment

begin_class
DECL|class|FilteringBucketCollector
specifier|public
class|class
name|FilteringBucketCollector
extends|extends
name|BucketCollector
implements|implements
name|Releasable
block|{
DECL|field|denseMap
specifier|private
specifier|final
name|LongHash
name|denseMap
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|BucketCollector
name|delegate
decl_stmt|;
comment|/**      *       * @param the  valid BucketOrds      * @param delegate The collector that will be called for any buckets listed in sortedBucketOrds      */
DECL|method|FilteringBucketCollector
specifier|public
name|FilteringBucketCollector
parameter_list|(
name|long
index|[]
name|validBucketOrds
parameter_list|,
name|BucketCollector
name|delegate
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|)
block|{
name|denseMap
operator|=
operator|new
name|LongHash
argument_list|(
name|validBucketOrds
operator|.
name|length
argument_list|,
name|bigArrays
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|validBucketOrds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|denseMap
operator|.
name|add
argument_list|(
name|validBucketOrds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
specifier|final
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
name|delegate
operator|.
name|setNextReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
specifier|final
name|void
name|collect
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|bucketOrdinal
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|ordinal
init|=
name|denseMap
operator|.
name|find
argument_list|(
name|bucketOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordinal
operator|>=
literal|0
condition|)
block|{
name|delegate
operator|.
name|collect
argument_list|(
name|docId
argument_list|,
name|ordinal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|postCollection
specifier|public
specifier|final
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|postCollection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|denseMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|gatherAnalysis
specifier|public
name|void
name|gatherAnalysis
parameter_list|(
name|BucketAnalysisCollector
name|analysisCollector
parameter_list|,
name|long
name|bucketOrdinal
parameter_list|)
block|{
name|long
name|ordinal
init|=
name|denseMap
operator|.
name|find
argument_list|(
name|bucketOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordinal
operator|>=
literal|0
condition|)
block|{
name|delegate
operator|.
name|gatherAnalysis
argument_list|(
name|analysisCollector
argument_list|,
name|ordinal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Aggregation requested on a missing bucket #"
operator|+
name|bucketOrdinal
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

