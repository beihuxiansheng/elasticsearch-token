begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|AbstractTermsParametersParser
specifier|public
specifier|abstract
class|class
name|AbstractTermsParametersParser
block|{
DECL|field|DEFAULT_REQUIRED_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REQUIRED_SIZE
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_SHARD_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHARD_SIZE
init|=
operator|-
literal|1
decl_stmt|;
comment|//Typically need more than one occurrence of something for it to be statistically significant
DECL|field|DEFAULT_MIN_DOC_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_DOC_COUNT
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_SHARD_MIN_DOC_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHARD_MIN_DOC_COUNT
init|=
literal|1
decl_stmt|;
DECL|field|EXECUTION_HINT_FIELD_NAME
specifier|static
specifier|final
name|ParseField
name|EXECUTION_HINT_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"execution_hint"
argument_list|)
decl_stmt|;
DECL|field|SHARD_SIZE_FIELD_NAME
specifier|static
specifier|final
name|ParseField
name|SHARD_SIZE_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"shard_size"
argument_list|)
decl_stmt|;
DECL|field|MIN_DOC_COUNT_FIELD_NAME
specifier|static
specifier|final
name|ParseField
name|MIN_DOC_COUNT_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_doc_count"
argument_list|)
decl_stmt|;
DECL|field|SHARD_MIN_DOC_COUNT_FIELD_NAME
specifier|static
specifier|final
name|ParseField
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"shard_min_doc_count"
argument_list|)
decl_stmt|;
DECL|method|getRequiredSize
specifier|public
name|int
name|getRequiredSize
parameter_list|()
block|{
return|return
name|requiredSize
return|;
block|}
DECL|method|getShardSize
specifier|public
name|int
name|getShardSize
parameter_list|()
block|{
return|return
name|shardSize
return|;
block|}
DECL|method|setMinDocCount
specifier|public
name|void
name|setMinDocCount
parameter_list|(
name|long
name|minDocCount
parameter_list|)
block|{
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
block|}
DECL|method|getMinDocCount
specifier|public
name|long
name|getMinDocCount
parameter_list|()
block|{
return|return
name|minDocCount
return|;
block|}
DECL|method|getShardMinDocCount
specifier|public
name|long
name|getShardMinDocCount
parameter_list|()
block|{
return|return
name|shardMinDocCount
return|;
block|}
comment|//These are the results of the parsing.
DECL|method|getExecutionHint
specifier|public
name|String
name|getExecutionHint
parameter_list|()
block|{
return|return
name|executionHint
return|;
block|}
DECL|method|getIncludeExclude
specifier|public
name|IncludeExclude
name|getIncludeExclude
parameter_list|()
block|{
return|return
name|includeExclude
return|;
block|}
DECL|field|requiredSize
specifier|private
name|int
name|requiredSize
init|=
name|DEFAULT_REQUIRED_SIZE
decl_stmt|;
DECL|field|shardSize
specifier|private
name|int
name|shardSize
init|=
name|DEFAULT_SHARD_SIZE
decl_stmt|;
DECL|field|minDocCount
specifier|private
name|long
name|minDocCount
init|=
name|DEFAULT_MIN_DOC_COUNT
decl_stmt|;
DECL|field|shardMinDocCount
specifier|private
name|long
name|shardMinDocCount
init|=
name|DEFAULT_SHARD_MIN_DOC_COUNT
decl_stmt|;
DECL|field|executionHint
specifier|private
name|String
name|executionHint
init|=
literal|null
decl_stmt|;
DECL|field|includeExclude
name|IncludeExclude
name|includeExclude
decl_stmt|;
DECL|method|parse
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|ValuesSourceParser
name|vsParser
parameter_list|,
name|IncludeExclude
operator|.
name|Parser
name|incExcParser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|setDefaults
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|vsParser
operator|.
name|token
argument_list|(
name|currentFieldName
argument_list|,
name|token
argument_list|,
name|parser
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|incExcParser
operator|.
name|token
argument_list|(
name|currentFieldName
argument_list|,
name|token
argument_list|,
name|parser
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
name|EXECUTION_HINT_FIELD_NAME
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|executionHint
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parseSpecial
argument_list|(
name|aggregationName
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|token
argument_list|,
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
if|if
condition|(
literal|"size"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|requiredSize
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SHARD_SIZE_FIELD_NAME
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|shardSize
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MIN_DOC_COUNT_FIELD_NAME
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|minDocCount
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|shardMinDocCount
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parseSpecial
argument_list|(
name|aggregationName
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|token
argument_list|,
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|parseSpecial
argument_list|(
name|aggregationName
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|token
argument_list|,
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
block|}
name|includeExclude
operator|=
name|incExcParser
operator|.
name|includeExclude
argument_list|()
expr_stmt|;
block|}
DECL|method|parseSpecial
specifier|public
specifier|abstract
name|void
name|parseSpecial
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|XContentParser
operator|.
name|Token
name|token
parameter_list|,
name|String
name|currentFieldName
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|setDefaults
specifier|public
specifier|abstract
name|void
name|setDefaults
parameter_list|()
function_decl|;
block|}
end_class

end_unit

