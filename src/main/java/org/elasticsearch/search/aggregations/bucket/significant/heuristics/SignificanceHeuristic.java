begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant.heuristics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|SignificanceHeuristic
specifier|public
specifier|abstract
class|class
name|SignificanceHeuristic
block|{
comment|/**      * @param subsetFreq   The frequency of the term in the selected sample      * @param subsetSize   The size of the selected sample (typically number of docs)      * @param supersetFreq The frequency of the term in the superset from which the sample was taken      * @param supersetSize The size of the superset from which the sample was taken  (typically number of docs)      * @return a "significance" score      */
DECL|method|getScore
specifier|public
specifier|abstract
name|double
name|getScore
parameter_list|(
name|long
name|subsetFreq
parameter_list|,
name|long
name|subsetSize
parameter_list|,
name|long
name|supersetFreq
parameter_list|,
name|long
name|supersetSize
parameter_list|)
function_decl|;
DECL|method|writeTo
specifier|abstract
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|checkFrequencyValidity
specifier|protected
name|void
name|checkFrequencyValidity
parameter_list|(
name|long
name|subsetFreq
parameter_list|,
name|long
name|subsetSize
parameter_list|,
name|long
name|supersetFreq
parameter_list|,
name|long
name|supersetSize
parameter_list|,
name|String
name|scoreFunctionName
parameter_list|)
block|{
if|if
condition|(
name|subsetFreq
operator|<
literal|0
operator|||
name|subsetSize
operator|<
literal|0
operator|||
name|supersetFreq
operator|<
literal|0
operator|||
name|supersetSize
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Frequencies of subset and superset must be positive in "
operator|+
name|scoreFunctionName
operator|+
literal|".getScore()"
argument_list|)
throw|;
block|}
if|if
condition|(
name|subsetFreq
operator|>
name|subsetSize
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"subsetFreq> subsetSize, in "
operator|+
name|scoreFunctionName
argument_list|)
throw|;
block|}
if|if
condition|(
name|supersetFreq
operator|>
name|supersetSize
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"supersetFreq> supersetSize, in "
operator|+
name|scoreFunctionName
argument_list|)
throw|;
block|}
block|}
DECL|method|initialize
specifier|public
name|void
name|initialize
parameter_list|(
name|InternalAggregation
operator|.
name|ReduceContext
name|reduceContext
parameter_list|)
block|{      }
block|}
end_class

end_unit

