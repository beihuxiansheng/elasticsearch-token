begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
operator|.
name|SubAggCollectionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ValuesSourceAggregationBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Builder for the {@link Terms} aggregation.  */
end_comment

begin_class
DECL|class|TermsBuilder
specifier|public
class|class
name|TermsBuilder
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|TermsBuilder
argument_list|>
block|{
DECL|field|bucketCountThresholds
specifier|private
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|bucketCountThresholds
init|=
operator|new
name|TermsAggregator
operator|.
name|BucketCountThresholds
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|valueType
specifier|private
name|Terms
operator|.
name|ValueType
name|valueType
decl_stmt|;
DECL|field|order
specifier|private
name|Terms
operator|.
name|Order
name|order
decl_stmt|;
DECL|field|includePattern
specifier|private
name|String
name|includePattern
decl_stmt|;
DECL|field|excludePattern
specifier|private
name|String
name|excludePattern
decl_stmt|;
DECL|field|executionHint
specifier|private
name|String
name|executionHint
decl_stmt|;
DECL|field|collectionMode
specifier|private
name|SubAggCollectionMode
name|collectionMode
decl_stmt|;
DECL|field|showTermDocCountError
specifier|private
name|Boolean
name|showTermDocCountError
decl_stmt|;
DECL|field|includeTerms
specifier|private
name|String
index|[]
name|includeTerms
init|=
literal|null
decl_stmt|;
DECL|field|excludeTerms
specifier|private
name|String
index|[]
name|excludeTerms
init|=
literal|null
decl_stmt|;
comment|/**      * Sole constructor.      */
DECL|method|TermsBuilder
specifier|public
name|TermsBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"terms"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the size - indicating how many term buckets should be returned (defaults to 10)      */
DECL|method|size
specifier|public
name|TermsBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|bucketCountThresholds
operator|.
name|setRequiredSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the shard_size - indicating the number of term buckets each shard will return to the coordinating node (the      * node that coordinates the search execution). The higher the shard size is, the more accurate the results are.      */
DECL|method|shardSize
specifier|public
name|TermsBuilder
name|shardSize
parameter_list|(
name|int
name|shardSize
parameter_list|)
block|{
name|bucketCountThresholds
operator|.
name|setShardSize
argument_list|(
name|shardSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the minimum document count terms should have in order to appear in the response.      */
DECL|method|minDocCount
specifier|public
name|TermsBuilder
name|minDocCount
parameter_list|(
name|long
name|minDocCount
parameter_list|)
block|{
name|bucketCountThresholds
operator|.
name|setMinDocCount
argument_list|(
name|minDocCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the minimum document count terms should have on the shard in order to appear in the response.      */
DECL|method|shardMinDocCount
specifier|public
name|TermsBuilder
name|shardMinDocCount
parameter_list|(
name|long
name|shardMinDocCount
parameter_list|)
block|{
name|bucketCountThresholds
operator|.
name|setShardMinDocCount
argument_list|(
name|shardMinDocCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Define a regular expression that will determine what terms should be aggregated. The regular expression is based      * on the {@link RegExp} class.      *      * @see {@link RegExp#RegExp(String)}      */
DECL|method|include
specifier|public
name|TermsBuilder
name|include
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
if|if
condition|(
name|includeTerms
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"exclude clause must be an array of strings or a regex, not both"
argument_list|)
throw|;
block|}
name|this
operator|.
name|includePattern
operator|=
name|regex
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Define a set of terms that should be aggregated.      */
DECL|method|include
specifier|public
name|TermsBuilder
name|include
parameter_list|(
name|String
index|[]
name|terms
parameter_list|)
block|{
if|if
condition|(
name|includePattern
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"include clause must be an array of exact values or a regex, not both"
argument_list|)
throw|;
block|}
name|this
operator|.
name|includeTerms
operator|=
name|terms
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Define a set of terms that should be aggregated.      */
DECL|method|include
specifier|public
name|TermsBuilder
name|include
parameter_list|(
name|long
index|[]
name|terms
parameter_list|)
block|{
if|if
condition|(
name|includePattern
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"include clause must be an array of exact values or a regex, not both"
argument_list|)
throw|;
block|}
name|this
operator|.
name|includeTerms
operator|=
name|longsArrToStringArr
argument_list|(
name|terms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|longsArrToStringArr
specifier|private
name|String
index|[]
name|longsArrToStringArr
parameter_list|(
name|long
index|[]
name|terms
parameter_list|)
block|{
name|String
index|[]
name|termsAsString
init|=
operator|new
name|String
index|[
name|terms
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|termsAsString
index|[
name|i
index|]
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|termsAsString
return|;
block|}
comment|/**      * Define a set of terms that should be aggregated.      */
DECL|method|include
specifier|public
name|TermsBuilder
name|include
parameter_list|(
name|double
index|[]
name|terms
parameter_list|)
block|{
if|if
condition|(
name|includePattern
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"include clause must be an array of exact values or a regex, not both"
argument_list|)
throw|;
block|}
name|this
operator|.
name|includeTerms
operator|=
name|doubleArrToStringArr
argument_list|(
name|terms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|doubleArrToStringArr
specifier|private
name|String
index|[]
name|doubleArrToStringArr
parameter_list|(
name|double
index|[]
name|terms
parameter_list|)
block|{
name|String
index|[]
name|termsAsString
init|=
operator|new
name|String
index|[
name|terms
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|termsAsString
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|toString
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|termsAsString
return|;
block|}
comment|/**      * Define a regular expression that will filter out terms that should be excluded from the aggregation. The regular      * expression is based on the {@link RegExp} class.      *      * @see {@link RegExp#RegExp(String)}      */
DECL|method|exclude
specifier|public
name|TermsBuilder
name|exclude
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
if|if
condition|(
name|excludeTerms
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"exclude clause must be an array of exact values or a regex, not both"
argument_list|)
throw|;
block|}
name|this
operator|.
name|excludePattern
operator|=
name|regex
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Define a set of terms that should not be aggregated.      */
DECL|method|exclude
specifier|public
name|TermsBuilder
name|exclude
parameter_list|(
name|String
index|[]
name|terms
parameter_list|)
block|{
if|if
condition|(
name|excludePattern
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"exclude clause must be an array of exact values or a regex, not both"
argument_list|)
throw|;
block|}
name|this
operator|.
name|excludeTerms
operator|=
name|terms
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Define a set of terms that should not be aggregated.      */
DECL|method|exclude
specifier|public
name|TermsBuilder
name|exclude
parameter_list|(
name|long
index|[]
name|terms
parameter_list|)
block|{
if|if
condition|(
name|excludePattern
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"exclude clause must be an array of exact values or a regex, not both"
argument_list|)
throw|;
block|}
name|this
operator|.
name|excludeTerms
operator|=
name|longsArrToStringArr
argument_list|(
name|terms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Define a set of terms that should not be aggregated.      */
DECL|method|exclude
specifier|public
name|TermsBuilder
name|exclude
parameter_list|(
name|double
index|[]
name|terms
parameter_list|)
block|{
if|if
condition|(
name|excludePattern
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"exclude clause must be an array of exact values or a regex, not both"
argument_list|)
throw|;
block|}
name|this
operator|.
name|excludeTerms
operator|=
name|doubleArrToStringArr
argument_list|(
name|terms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * When using scripts, the value type indicates the types of the values the script is generating.      */
DECL|method|valueType
specifier|public
name|TermsBuilder
name|valueType
parameter_list|(
name|Terms
operator|.
name|ValueType
name|valueType
parameter_list|)
block|{
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Defines the order in which the buckets will be returned.      */
DECL|method|order
specifier|public
name|TermsBuilder
name|order
parameter_list|(
name|Terms
operator|.
name|Order
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Expert: provide an execution hint to the aggregation.      */
DECL|method|executionHint
specifier|public
name|TermsBuilder
name|executionHint
parameter_list|(
name|String
name|executionHint
parameter_list|)
block|{
name|this
operator|.
name|executionHint
operator|=
name|executionHint
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Expert: set the collection mode.      */
DECL|method|collectMode
specifier|public
name|TermsBuilder
name|collectMode
parameter_list|(
name|SubAggCollectionMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|collectionMode
operator|=
name|mode
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Expert: return document count errors per term in the response.      */
DECL|method|showTermDocCountError
specifier|public
name|TermsBuilder
name|showTermDocCountError
parameter_list|(
name|boolean
name|showTermDocCountError
parameter_list|)
block|{
name|this
operator|.
name|showTermDocCountError
operator|=
name|showTermDocCountError
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doInternalXContent
specifier|protected
name|XContentBuilder
name|doInternalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|bucketCountThresholds
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|showTermDocCountError
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|AbstractTermsParametersParser
operator|.
name|SHOW_TERM_DOC_COUNT_ERROR
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|showTermDocCountError
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executionHint
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|AbstractTermsParametersParser
operator|.
name|EXECUTION_HINT_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|executionHint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueType
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"value_type"
argument_list|,
name|valueType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"order"
argument_list|)
expr_stmt|;
name|order
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collectionMode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SubAggCollectionMode
operator|.
name|KEY
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|collectionMode
operator|.
name|parseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeTerms
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"include"
argument_list|,
name|includeTerms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includePattern
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include"
argument_list|,
name|includePattern
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeTerms
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"exclude"
argument_list|,
name|excludeTerms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludePattern
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"exclude"
argument_list|,
name|excludePattern
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

