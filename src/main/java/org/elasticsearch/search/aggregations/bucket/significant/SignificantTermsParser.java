begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|BucketUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SignificantTermsParser
specifier|public
class|class
name|SignificantTermsParser
implements|implements
name|Aggregator
operator|.
name|Parser
block|{
DECL|field|DEFAULT_REQUIRED_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REQUIRED_SIZE
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_SHARD_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHARD_SIZE
init|=
literal|0
decl_stmt|;
comment|//Typically need more than one occurrence of something for it to be statistically significant
DECL|field|DEFAULT_MIN_DOC_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_DOC_COUNT
init|=
literal|3
decl_stmt|;
DECL|field|SHARD_MIN_DOC_COUNT_FIELD_NAME
specifier|static
specifier|final
name|ParseField
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"shard_min_doc_count"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SHARD_MIN_DOC_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHARD_MIN_DOC_COUNT
init|=
literal|1
decl_stmt|;
annotation|@
name|Override
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|SignificantStringTerms
operator|.
name|TYPE
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|AggregatorFactory
name|parse
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ValuesSourceParser
name|vsParser
init|=
name|ValuesSourceParser
operator|.
name|any
argument_list|(
name|aggregationName
argument_list|,
name|SignificantStringTerms
operator|.
name|TYPE
argument_list|,
name|context
argument_list|)
operator|.
name|scriptable
argument_list|(
literal|false
argument_list|)
operator|.
name|formattable
argument_list|(
literal|true
argument_list|)
operator|.
name|requiresSortedValues
argument_list|(
literal|true
argument_list|)
operator|.
name|requiresUniqueValues
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IncludeExclude
operator|.
name|Parser
name|incExcParser
init|=
operator|new
name|IncludeExclude
operator|.
name|Parser
argument_list|(
name|aggregationName
argument_list|,
name|SignificantStringTerms
operator|.
name|TYPE
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Filter
name|filter
init|=
literal|null
decl_stmt|;
name|int
name|requiredSize
init|=
name|DEFAULT_REQUIRED_SIZE
decl_stmt|;
name|int
name|shardSize
init|=
name|DEFAULT_SHARD_SIZE
decl_stmt|;
name|long
name|minDocCount
init|=
name|DEFAULT_MIN_DOC_COUNT
decl_stmt|;
name|long
name|shardMinDocCount
init|=
name|DEFAULT_SHARD_MIN_DOC_COUNT
decl_stmt|;
name|String
name|executionHint
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|vsParser
operator|.
name|token
argument_list|(
name|currentFieldName
argument_list|,
name|token
argument_list|,
name|parser
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|incExcParser
operator|.
name|token
argument_list|(
name|currentFieldName
argument_list|,
name|token
argument_list|,
name|parser
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
literal|"execution_hint"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"executionHint"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|executionHint
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|aggregationName
operator|+
literal|"]: ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
if|if
condition|(
literal|"size"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|requiredSize
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"shard_size"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"shardSize"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|shardSize
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"min_doc_count"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"minDocCount"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|minDocCount
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|shardMinDocCount
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|aggregationName
operator|+
literal|"]: ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
comment|// TODO not sure if code below is the best means to declare a filter for
comment|// defining an alternative background stats context.
comment|// In trial runs it becomes obvious that the choice of background does have to
comment|// be a strict superset of the foreground subset otherwise the significant terms algo
comment|// immediately singles out the odd terms that are in the foreground but not represented
comment|// in the background. So a better approach may be to use a designated parent agg as the
comment|// background because parent aggs are always guaranteed to be a superset whereas arbitrary
comment|// filters defined by end users and parsed below are not.
comment|//                if ("background_context".equals(currentFieldName)) {
comment|//                    filter = context.queryParserService().parseInnerFilter(parser).filter();
comment|//                }
block|}
else|else
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"Unexpected token "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|aggregationName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|shardSize
operator|==
name|DEFAULT_SHARD_SIZE
condition|)
block|{
comment|//The user has not made a shardSize selection .
comment|//Use default heuristic to avoid any wrong-ranking caused by distributed counting
comment|//but request double the usual amount.
comment|//We typically need more than the number of "top" terms requested by other aggregations
comment|//as the significance algorithm is in less of a position to down-select at shard-level -
comment|//some of the things we want to find have only one occurrence on each shard and as
comment|// such are impossible to differentiate from non-significant terms at that early stage.
name|shardSize
operator|=
literal|2
operator|*
name|BucketUtils
operator|.
name|suggestShardSideQueueSize
argument_list|(
name|requiredSize
argument_list|,
name|context
operator|.
name|numberOfShards
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// shard_size cannot be smaller than size as we need to at least fetch<size> entries from every shards in order to return<size>
if|if
condition|(
name|shardSize
operator|<
name|requiredSize
condition|)
block|{
name|shardSize
operator|=
name|requiredSize
expr_stmt|;
block|}
comment|// shard_min_doc_count should not be larger than min_doc_count because this can cause buckets to be removed that would match the min_doc_count criteria
if|if
condition|(
name|shardMinDocCount
operator|>
name|minDocCount
condition|)
block|{
name|shardMinDocCount
operator|=
name|minDocCount
expr_stmt|;
block|}
name|IncludeExclude
name|includeExclude
init|=
name|incExcParser
operator|.
name|includeExclude
argument_list|()
decl_stmt|;
return|return
operator|new
name|SignificantTermsAggregatorFactory
argument_list|(
name|aggregationName
argument_list|,
name|vsParser
operator|.
name|config
argument_list|()
argument_list|,
name|requiredSize
argument_list|,
name|shardSize
argument_list|,
name|minDocCount
argument_list|,
name|shardMinDocCount
argument_list|,
name|includeExclude
argument_list|,
name|executionHint
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

