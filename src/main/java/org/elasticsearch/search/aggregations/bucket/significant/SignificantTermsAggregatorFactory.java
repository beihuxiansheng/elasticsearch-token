begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterableTermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|FreqTermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
operator|.
name|BucketAggregationMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|NonCollectingAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceAggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SignificantTermsAggregatorFactory
specifier|public
class|class
name|SignificantTermsAggregatorFactory
extends|extends
name|ValuesSourceAggregatorFactory
implements|implements
name|Releasable
block|{
DECL|field|EXECUTION_HINT_VALUE_MAP
specifier|public
specifier|static
specifier|final
name|String
name|EXECUTION_HINT_VALUE_MAP
init|=
literal|"map"
decl_stmt|;
DECL|field|EXECUTION_HINT_VALUE_ORDINALS
specifier|public
specifier|static
specifier|final
name|String
name|EXECUTION_HINT_VALUE_ORDINALS
init|=
literal|"ordinals"
decl_stmt|;
DECL|field|requiredSize
specifier|private
specifier|final
name|int
name|requiredSize
decl_stmt|;
DECL|field|shardSize
specifier|private
specifier|final
name|int
name|shardSize
decl_stmt|;
DECL|field|minDocCount
specifier|private
specifier|final
name|long
name|minDocCount
decl_stmt|;
DECL|field|includeExclude
specifier|private
specifier|final
name|IncludeExclude
name|includeExclude
decl_stmt|;
DECL|field|executionHint
specifier|private
specifier|final
name|String
name|executionHint
decl_stmt|;
DECL|field|indexedFieldName
specifier|private
name|String
name|indexedFieldName
decl_stmt|;
DECL|field|mapper
specifier|private
name|FieldMapper
name|mapper
decl_stmt|;
DECL|field|termsEnum
specifier|private
name|FilterableTermsEnum
name|termsEnum
decl_stmt|;
DECL|field|numberOfAggregatorsCreated
specifier|private
name|int
name|numberOfAggregatorsCreated
init|=
literal|0
decl_stmt|;
DECL|field|filter
specifier|private
name|Filter
name|filter
decl_stmt|;
DECL|method|SignificantTermsAggregatorFactory
specifier|public
name|SignificantTermsAggregatorFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|ValuesSourceConfig
name|valueSourceConfig
parameter_list|,
name|int
name|requiredSize
parameter_list|,
name|int
name|shardSize
parameter_list|,
name|long
name|minDocCount
parameter_list|,
name|IncludeExclude
name|includeExclude
parameter_list|,
name|String
name|executionHint
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|SignificantStringTerms
operator|.
name|TYPE
operator|.
name|name
argument_list|()
argument_list|,
name|valueSourceConfig
argument_list|)
expr_stmt|;
name|this
operator|.
name|requiredSize
operator|=
name|requiredSize
expr_stmt|;
name|this
operator|.
name|shardSize
operator|=
name|shardSize
expr_stmt|;
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
name|this
operator|.
name|includeExclude
operator|=
name|includeExclude
expr_stmt|;
name|this
operator|.
name|executionHint
operator|=
name|executionHint
expr_stmt|;
if|if
condition|(
operator|!
name|valueSourceConfig
operator|.
name|unmapped
argument_list|()
condition|)
block|{
name|this
operator|.
name|indexedFieldName
operator|=
name|config
operator|.
name|fieldContext
argument_list|()
operator|.
name|field
argument_list|()
expr_stmt|;
name|mapper
operator|=
name|SearchContext
operator|.
name|current
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
name|indexedFieldName
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createUnmapped
specifier|protected
name|Aggregator
name|createUnmapped
parameter_list|(
name|AggregationContext
name|aggregationContext
parameter_list|,
name|Aggregator
name|parent
parameter_list|)
block|{
specifier|final
name|InternalAggregation
name|aggregation
init|=
operator|new
name|UnmappedSignificantTerms
argument_list|(
name|name
argument_list|,
name|requiredSize
argument_list|,
name|minDocCount
argument_list|)
decl_stmt|;
return|return
operator|new
name|NonCollectingAggregator
argument_list|(
name|name
argument_list|,
name|aggregationContext
argument_list|,
name|parent
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|InternalAggregation
name|buildEmptyAggregation
parameter_list|()
block|{
return|return
name|aggregation
return|;
block|}
block|}
return|;
block|}
DECL|method|hasParentBucketAggregator
specifier|private
specifier|static
name|boolean
name|hasParentBucketAggregator
parameter_list|(
name|Aggregator
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|.
name|bucketAggregationMode
argument_list|()
operator|==
name|BucketAggregationMode
operator|.
name|PER_BUCKET
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|hasParentBucketAggregator
argument_list|(
name|parent
operator|.
name|parent
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|protected
name|Aggregator
name|create
parameter_list|(
name|ValuesSource
name|valuesSource
parameter_list|,
name|long
name|expectedBucketsCount
parameter_list|,
name|AggregationContext
name|aggregationContext
parameter_list|,
name|Aggregator
name|parent
parameter_list|)
block|{
name|numberOfAggregatorsCreated
operator|++
expr_stmt|;
name|long
name|estimatedBucketCount
init|=
name|valuesSource
operator|.
name|metaData
argument_list|()
operator|.
name|maxAtomicUniqueValuesCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|estimatedBucketCount
operator|<
literal|0
condition|)
block|{
comment|// there isn't an estimation available.. 50 should be a good start
name|estimatedBucketCount
operator|=
literal|50
expr_stmt|;
block|}
comment|// adding an upper bound on the estimation as some atomic field data in the future (binary doc values) and not
comment|// going to know their exact cardinality and will return upper bounds in AtomicFieldData.getNumberUniqueValues()
comment|// that may be largely over-estimated.. the value chosen here is arbitrary just to play nice with typical CPU cache
comment|//
comment|// Another reason is that it may be faster to resize upon growth than to start directly with the appropriate size.
comment|// And that all values are not necessarily visited by the matches.
name|estimatedBucketCount
operator|=
name|Math
operator|.
name|min
argument_list|(
name|estimatedBucketCount
argument_list|,
literal|512
argument_list|)
expr_stmt|;
if|if
condition|(
name|valuesSource
operator|instanceof
name|ValuesSource
operator|.
name|Bytes
condition|)
block|{
if|if
condition|(
name|executionHint
operator|!=
literal|null
operator|&&
operator|!
name|executionHint
operator|.
name|equals
argument_list|(
name|EXECUTION_HINT_VALUE_MAP
argument_list|)
operator|&&
operator|!
name|executionHint
operator|.
name|equals
argument_list|(
name|EXECUTION_HINT_VALUE_ORDINALS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"execution_hint can only be '"
operator|+
name|EXECUTION_HINT_VALUE_MAP
operator|+
literal|"' or '"
operator|+
name|EXECUTION_HINT_VALUE_ORDINALS
operator|+
literal|"', not "
operator|+
name|executionHint
argument_list|)
throw|;
block|}
name|String
name|execution
init|=
name|executionHint
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|valuesSource
operator|instanceof
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
operator|)
condition|)
block|{
name|execution
operator|=
name|EXECUTION_HINT_VALUE_MAP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeExclude
operator|!=
literal|null
condition|)
block|{
name|execution
operator|=
name|EXECUTION_HINT_VALUE_MAP
expr_stmt|;
block|}
if|if
condition|(
name|execution
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|valuesSource
operator|instanceof
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
operator|)
operator|&&
operator|!
name|hasParentBucketAggregator
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|execution
operator|=
name|EXECUTION_HINT_VALUE_ORDINALS
expr_stmt|;
block|}
else|else
block|{
name|execution
operator|=
name|EXECUTION_HINT_VALUE_MAP
expr_stmt|;
block|}
block|}
assert|assert
name|execution
operator|!=
literal|null
assert|;
if|if
condition|(
name|execution
operator|.
name|equals
argument_list|(
name|EXECUTION_HINT_VALUE_ORDINALS
argument_list|)
condition|)
block|{
assert|assert
name|includeExclude
operator|==
literal|null
assert|;
return|return
operator|new
name|SignificantStringTermsAggregator
operator|.
name|WithOrdinals
argument_list|(
name|name
argument_list|,
name|factories
argument_list|,
operator|(
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
operator|)
name|valuesSource
argument_list|,
name|estimatedBucketCount
argument_list|,
name|requiredSize
argument_list|,
name|shardSize
argument_list|,
name|minDocCount
argument_list|,
name|aggregationContext
argument_list|,
name|parent
argument_list|,
name|this
argument_list|)
return|;
block|}
return|return
operator|new
name|SignificantStringTermsAggregator
argument_list|(
name|name
argument_list|,
name|factories
argument_list|,
name|valuesSource
argument_list|,
name|estimatedBucketCount
argument_list|,
name|requiredSize
argument_list|,
name|shardSize
argument_list|,
name|minDocCount
argument_list|,
name|includeExclude
argument_list|,
name|aggregationContext
argument_list|,
name|parent
argument_list|,
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|includeExclude
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"Aggregation ["
operator|+
name|name
operator|+
literal|"] cannot support the include/exclude "
operator|+
literal|"settings as it can only be applied to string values"
argument_list|)
throw|;
block|}
if|if
condition|(
name|valuesSource
operator|instanceof
name|ValuesSource
operator|.
name|Numeric
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|ValuesSource
operator|.
name|Numeric
operator|)
name|valuesSource
operator|)
operator|.
name|isFloatingPoint
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No support for examining floating point numerics"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SignificantLongTermsAggregator
argument_list|(
name|name
argument_list|,
name|factories
argument_list|,
operator|(
name|ValuesSource
operator|.
name|Numeric
operator|)
name|valuesSource
argument_list|,
name|config
operator|.
name|format
argument_list|()
argument_list|,
name|estimatedBucketCount
argument_list|,
name|requiredSize
argument_list|,
name|shardSize
argument_list|,
name|minDocCount
argument_list|,
name|aggregationContext
argument_list|,
name|parent
argument_list|,
name|this
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"sigfnificant_terms aggregation cannot be applied to field ["
operator|+
name|config
operator|.
name|fieldContext
argument_list|()
operator|.
name|field
argument_list|()
operator|+
literal|"]. It can only be applied to numeric or string fields."
argument_list|)
throw|;
block|}
comment|/**      * Creates the TermsEnum (if not already created) and must be called before any calls to getBackgroundFrequency      * @param context The aggregation context       * @return The number of documents in the index (after an optional filter might have been applied)      */
DECL|method|prepareBackground
specifier|public
name|long
name|prepareBackground
parameter_list|(
name|AggregationContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|termsEnum
operator|!=
literal|null
condition|)
block|{
comment|// already prepared - return
return|return
name|termsEnum
operator|.
name|getNumDocs
argument_list|()
return|;
block|}
name|SearchContext
name|searchContext
init|=
name|context
operator|.
name|searchContext
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|searchContext
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|numberOfAggregatorsCreated
operator|==
literal|1
condition|)
block|{
comment|// Setup a termsEnum for sole use by one aggregator
name|termsEnum
operator|=
operator|new
name|FilterableTermsEnum
argument_list|(
name|reader
argument_list|,
name|indexedFieldName
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// When we have> 1 agg we have possibility of duplicate term frequency lookups
comment|// and so use a TermsEnum that caches results of all term lookups
name|termsEnum
operator|=
operator|new
name|FreqTermsEnum
argument_list|(
name|reader
argument_list|,
name|indexedFieldName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|filter
argument_list|,
name|searchContext
operator|.
name|bigArrays
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to build terms enumeration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|termsEnum
operator|.
name|getNumDocs
argument_list|()
return|;
block|}
DECL|method|getBackgroundFrequency
specifier|public
name|long
name|getBackgroundFrequency
parameter_list|(
name|BytesRef
name|termBytes
parameter_list|)
block|{
assert|assert
name|termsEnum
operator|!=
literal|null
assert|;
comment|// having failed to find a field in the index we don't expect any calls for frequencies
name|long
name|result
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|termBytes
argument_list|)
condition|)
block|{
name|result
operator|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"IOException loading background document frequency info"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getBackgroundFrequency
specifier|public
name|long
name|getBackgroundFrequency
parameter_list|(
name|long
name|term
parameter_list|)
block|{
name|BytesRef
name|indexedVal
init|=
name|mapper
operator|.
name|indexedValueForSearch
argument_list|(
name|term
argument_list|)
decl_stmt|;
return|return
name|getBackgroundFrequency
argument_list|(
name|indexedVal
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
try|try
block|{
if|if
condition|(
name|termsEnum
operator|instanceof
name|Releasable
condition|)
block|{
operator|(
operator|(
name|Releasable
operator|)
name|termsEnum
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|termsEnum
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

