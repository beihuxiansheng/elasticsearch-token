begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * An internal {@link HistogramBase.Order} strategy which is identified by a unique id.  */
end_comment

begin_class
DECL|class|InternalOrder
class|class
name|InternalOrder
extends|extends
name|HistogramBase
operator|.
name|Order
block|{
DECL|field|id
specifier|final
name|byte
name|id
decl_stmt|;
DECL|field|key
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|asc
specifier|final
name|boolean
name|asc
decl_stmt|;
DECL|field|comparator
specifier|final
name|Comparator
argument_list|<
name|HistogramBase
operator|.
name|Bucket
argument_list|>
name|comparator
decl_stmt|;
DECL|method|InternalOrder
name|InternalOrder
parameter_list|(
name|byte
name|id
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|asc
parameter_list|,
name|Comparator
argument_list|<
name|HistogramBase
operator|.
name|Bucket
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|asc
operator|=
name|asc
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
DECL|method|id
name|byte
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|key
name|String
name|key
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|asc
name|boolean
name|asc
parameter_list|()
block|{
return|return
name|asc
return|;
block|}
annotation|@
name|Override
DECL|method|comparator
name|Comparator
argument_list|<
name|HistogramBase
operator|.
name|Bucket
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|key
argument_list|,
name|asc
condition|?
literal|"asc"
else|:
literal|"desc"
argument_list|)
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|class|Aggregation
specifier|static
class|class
name|Aggregation
extends|extends
name|InternalOrder
block|{
DECL|field|ID
specifier|static
specifier|final
name|byte
name|ID
init|=
literal|0
decl_stmt|;
DECL|method|Aggregation
name|Aggregation
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
name|super
argument_list|(
name|ID
argument_list|,
name|key
argument_list|,
name|asc
argument_list|,
operator|new
name|HistogramBase
operator|.
name|Bucket
operator|.
name|Comparator
argument_list|<
name|HistogramBase
operator|.
name|Bucket
argument_list|>
argument_list|(
name|key
argument_list|,
name|asc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|Aggregation
name|Aggregation
parameter_list|(
name|String
name|aggName
parameter_list|,
name|String
name|valueName
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
name|super
argument_list|(
name|ID
argument_list|,
name|key
argument_list|(
name|aggName
argument_list|,
name|valueName
argument_list|)
argument_list|,
name|asc
argument_list|,
operator|new
name|HistogramBase
operator|.
name|Bucket
operator|.
name|Comparator
argument_list|<
name|HistogramBase
operator|.
name|Bucket
argument_list|>
argument_list|(
name|aggName
argument_list|,
name|valueName
argument_list|,
name|asc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|key
specifier|private
specifier|static
name|String
name|key
parameter_list|(
name|String
name|aggName
parameter_list|,
name|String
name|valueName
parameter_list|)
block|{
return|return
operator|(
name|valueName
operator|==
literal|null
operator|)
condition|?
name|aggName
else|:
name|aggName
operator|+
literal|"."
operator|+
name|valueName
return|;
block|}
block|}
DECL|class|Streams
specifier|static
class|class
name|Streams
block|{
comment|/**          * Writes the given order to the given output (based on the id of the order).          */
DECL|method|writeOrder
specifier|public
specifier|static
name|void
name|writeOrder
parameter_list|(
name|InternalOrder
name|order
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|order
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|order
operator|instanceof
name|InternalOrder
operator|.
name|Aggregation
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|order
operator|.
name|asc
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|order
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Reads an order from the given input (based on the id of the order).          *          * @see Streams#writeOrder(InternalOrder, org.elasticsearch.common.io.stream.StreamOutput)          */
DECL|method|readOrder
specifier|public
specifier|static
name|InternalOrder
name|readOrder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|id
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|1
case|:
return|return
operator|(
name|InternalOrder
operator|)
name|Histogram
operator|.
name|Order
operator|.
name|KEY_ASC
return|;
case|case
literal|2
case|:
return|return
operator|(
name|InternalOrder
operator|)
name|Histogram
operator|.
name|Order
operator|.
name|KEY_DESC
return|;
case|case
literal|3
case|:
return|return
operator|(
name|InternalOrder
operator|)
name|Histogram
operator|.
name|Order
operator|.
name|COUNT_ASC
return|;
case|case
literal|4
case|:
return|return
operator|(
name|InternalOrder
operator|)
name|Histogram
operator|.
name|Order
operator|.
name|COUNT_DESC
return|;
case|case
literal|0
case|:
name|boolean
name|asc
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
return|return
operator|new
name|InternalOrder
operator|.
name|Aggregation
argument_list|(
name|key
argument_list|,
name|asc
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown histogram order"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

