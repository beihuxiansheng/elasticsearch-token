begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|MetricsAggregation
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_interface
DECL|interface|Bucket
specifier|public
interface|interface
name|Bucket
block|{
comment|/**      * @return The number of documents that fall within this bucket      */
DECL|method|getDocCount
name|long
name|getDocCount
parameter_list|()
function_decl|;
DECL|method|getAggregations
name|Aggregations
name|getAggregations
parameter_list|()
function_decl|;
DECL|class|SubAggregationComparator
specifier|static
class|class
name|SubAggregationComparator
parameter_list|<
name|B
extends|extends
name|Bucket
parameter_list|>
implements|implements
name|java
operator|.
name|util
operator|.
name|Comparator
argument_list|<
name|B
argument_list|>
block|{
DECL|field|aggName
specifier|private
specifier|final
name|String
name|aggName
decl_stmt|;
DECL|field|valueName
specifier|private
specifier|final
name|String
name|valueName
decl_stmt|;
DECL|field|asc
specifier|private
specifier|final
name|boolean
name|asc
decl_stmt|;
DECL|method|SubAggregationComparator
specifier|public
name|SubAggregationComparator
parameter_list|(
name|String
name|expression
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
name|this
operator|.
name|asc
operator|=
name|asc
expr_stmt|;
name|int
name|i
init|=
name|expression
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|this
operator|.
name|aggName
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|valueName
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|aggName
operator|=
name|expression
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueName
operator|=
name|expression
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|SubAggregationComparator
specifier|public
name|SubAggregationComparator
parameter_list|(
name|String
name|aggName
parameter_list|,
name|String
name|valueName
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
name|this
operator|.
name|aggName
operator|=
name|aggName
expr_stmt|;
name|this
operator|.
name|valueName
operator|=
name|valueName
expr_stmt|;
name|this
operator|.
name|asc
operator|=
name|asc
expr_stmt|;
block|}
DECL|method|asc
specifier|public
name|boolean
name|asc
parameter_list|()
block|{
return|return
name|asc
return|;
block|}
DECL|method|aggName
specifier|public
name|String
name|aggName
parameter_list|()
block|{
return|return
name|aggName
return|;
block|}
DECL|method|valueName
specifier|public
name|String
name|valueName
parameter_list|()
block|{
return|return
name|valueName
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|B
name|b1
parameter_list|,
name|B
name|b2
parameter_list|)
block|{
name|double
name|v1
init|=
name|value
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|double
name|v2
init|=
name|value
argument_list|(
name|b2
argument_list|)
decl_stmt|;
return|return
name|asc
condition|?
name|Double
operator|.
name|compare
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
else|:
name|Double
operator|.
name|compare
argument_list|(
name|v2
argument_list|,
name|v1
argument_list|)
return|;
block|}
DECL|method|value
specifier|private
name|double
name|value
parameter_list|(
name|B
name|bucket
parameter_list|)
block|{
name|MetricsAggregation
name|aggregation
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
name|aggName
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggregation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Unknown aggregation named ["
operator|+
name|aggName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|aggregation
operator|instanceof
name|MetricsAggregation
operator|.
name|SingleValue
condition|)
block|{
comment|//TODO should we throw an exception if the value name is specified?
return|return
operator|(
operator|(
name|MetricsAggregation
operator|.
name|SingleValue
operator|)
name|aggregation
operator|)
operator|.
name|value
argument_list|()
return|;
block|}
if|if
condition|(
name|aggregation
operator|instanceof
name|MetricsAggregation
operator|.
name|MultiValue
condition|)
block|{
if|if
condition|(
name|valueName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Cannot sort on multi valued aggregation ["
operator|+
name|aggName
operator|+
literal|"]. A value name is required"
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|MetricsAggregation
operator|.
name|MultiValue
operator|)
name|aggregation
operator|)
operator|.
name|value
argument_list|(
name|valueName
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"A mal attempt to sort terms by aggregation ["
operator|+
name|aggregation
operator|.
name|getName
argument_list|()
operator|+
literal|"]. Terms can only be ordered by either standard order or direct calc aggregators of the terms"
argument_list|)
throw|;
block|}
block|}
block|}
end_interface

end_unit

