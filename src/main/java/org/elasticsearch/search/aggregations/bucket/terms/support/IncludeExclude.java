begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Defines the include/exclude regular expression filtering for string terms aggregation. In this filtering logic,  * exclusion has precedence, where the {@code include} is evaluated first and then the {@code exclude}.  */
end_comment

begin_class
DECL|class|IncludeExclude
specifier|public
class|class
name|IncludeExclude
block|{
DECL|field|include
specifier|private
specifier|final
name|Matcher
name|include
decl_stmt|;
DECL|field|exclude
specifier|private
specifier|final
name|Matcher
name|exclude
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|CharsRef
name|scratch
init|=
operator|new
name|CharsRef
argument_list|()
decl_stmt|;
comment|/**      * @param include   The regular expression pattern for the terms to be included      *                  (may only be {@code null} if {@code exclude} is not {@code null}      * @param exclude   The regular expression pattern for the terms to be excluded      *                  (may only be {@code null} if {@code include} is not {@code null}      */
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|Pattern
name|include
parameter_list|,
name|Pattern
name|exclude
parameter_list|)
block|{
assert|assert
name|include
operator|!=
literal|null
operator|||
name|exclude
operator|!=
literal|null
operator|:
literal|"include& exclude cannot both be null"
assert|;
comment|// otherwise IncludeExclude object should be null
name|this
operator|.
name|include
operator|=
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|exclude
operator|=
name|exclude
operator|!=
literal|null
condition|?
name|exclude
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
comment|/**      * Returns whether the given value is accepted based on the {@code include}& {@code exclude} patterns.      */
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|value
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|include
operator|==
literal|null
condition|)
block|{
comment|// exclude must not be null
return|return
operator|!
name|exclude
operator|.
name|reset
argument_list|(
name|scratch
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|include
operator|.
name|reset
argument_list|(
name|scratch
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|exclude
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|!
name|exclude
operator|.
name|reset
argument_list|(
name|scratch
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
end_class

end_unit

