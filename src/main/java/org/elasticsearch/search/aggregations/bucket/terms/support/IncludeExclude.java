begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|LongOpenHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|LongSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomAccessOrds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|ByteRunAutomaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Defines the include/exclude regular expression filtering for string terms aggregation. In this filtering logic,  * exclusion has precedence, where the {@code include} is evaluated first and then the {@code exclude}.  */
end_comment

begin_class
DECL|class|IncludeExclude
specifier|public
class|class
name|IncludeExclude
block|{
comment|// The includeValue and excludeValue ByteRefs which are the result of the parsing
comment|// process are converted into a LongFilter when used on numeric fields
comment|// in the index.
DECL|class|LongFilter
specifier|public
specifier|static
class|class
name|LongFilter
block|{
DECL|field|valids
specifier|private
name|LongSet
name|valids
decl_stmt|;
DECL|field|invalids
specifier|private
name|LongSet
name|invalids
decl_stmt|;
DECL|method|LongFilter
specifier|private
name|LongFilter
parameter_list|(
name|int
name|numValids
parameter_list|,
name|int
name|numInvalids
parameter_list|)
block|{
if|if
condition|(
name|numValids
operator|>
literal|0
condition|)
block|{
name|valids
operator|=
operator|new
name|LongOpenHashSet
argument_list|(
name|numValids
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numInvalids
operator|>
literal|0
condition|)
block|{
name|invalids
operator|=
operator|new
name|LongOpenHashSet
argument_list|(
name|numInvalids
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|valids
operator|==
literal|null
operator|)
operator|||
operator|(
name|valids
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|invalids
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|invalids
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|)
operator|)
return|;
block|}
DECL|method|addAccept
specifier|private
name|void
name|addAccept
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|valids
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|addReject
specifier|private
name|void
name|addReject
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|invalids
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Only used for the 'map' execution mode (ie. scripts)
DECL|class|StringFilter
specifier|public
specifier|static
class|class
name|StringFilter
block|{
DECL|field|runAutomaton
specifier|private
specifier|final
name|ByteRunAutomaton
name|runAutomaton
decl_stmt|;
DECL|method|StringFilter
specifier|private
name|StringFilter
parameter_list|(
name|Automaton
name|automaton
parameter_list|)
block|{
name|this
operator|.
name|runAutomaton
operator|=
operator|new
name|ByteRunAutomaton
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns whether the given value is accepted based on the {@code include}& {@code exclude} patterns.          */
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
return|return
name|runAutomaton
operator|.
name|run
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
return|;
block|}
block|}
DECL|class|OrdinalsFilter
specifier|public
specifier|static
class|class
name|OrdinalsFilter
block|{
DECL|field|compiled
specifier|private
specifier|final
name|CompiledAutomaton
name|compiled
decl_stmt|;
DECL|method|OrdinalsFilter
specifier|private
name|OrdinalsFilter
parameter_list|(
name|Automaton
name|automaton
parameter_list|)
block|{
name|this
operator|.
name|compiled
operator|=
operator|new
name|CompiledAutomaton
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
block|}
comment|/**          * Computes which global ordinals are accepted by this IncludeExclude instance.          */
DECL|method|acceptedGlobalOrdinals
specifier|public
name|LongBitSet
name|acceptedGlobalOrdinals
parameter_list|(
name|RandomAccessOrds
name|globalOrdinals
parameter_list|,
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
name|valueSource
parameter_list|)
throws|throws
name|IOException
block|{
name|LongBitSet
name|acceptedGlobalOrdinals
init|=
operator|new
name|LongBitSet
argument_list|(
name|globalOrdinals
operator|.
name|getValueCount
argument_list|()
argument_list|)
decl_stmt|;
name|TermsEnum
name|globalTermsEnum
decl_stmt|;
name|Terms
name|globalTerms
init|=
operator|new
name|DocValuesTerms
argument_list|(
name|globalOrdinals
argument_list|)
decl_stmt|;
comment|// TODO: specialize based on compiled.type: for ALL and prefixes (sinkState>= 0 ) we can avoid i/o and just set bits.
name|globalTermsEnum
operator|=
name|compiled
operator|.
name|getTermsEnum
argument_list|(
name|globalTerms
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|term
init|=
name|globalTermsEnum
operator|.
name|next
argument_list|()
init|;
name|term
operator|!=
literal|null
condition|;
name|term
operator|=
name|globalTermsEnum
operator|.
name|next
argument_list|()
control|)
block|{
name|acceptedGlobalOrdinals
operator|.
name|set
argument_list|(
name|globalTermsEnum
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|acceptedGlobalOrdinals
return|;
block|}
block|}
DECL|field|include
DECL|field|exclude
specifier|private
specifier|final
name|RegExp
name|include
decl_stmt|,
name|exclude
decl_stmt|;
DECL|field|includeValues
DECL|field|excludeValues
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|includeValues
decl_stmt|,
name|excludeValues
decl_stmt|;
comment|/**      * @param include   The regular expression pattern for the terms to be included      * @param exclude   The regular expression pattern for the terms to be excluded      */
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|RegExp
name|include
parameter_list|,
name|RegExp
name|exclude
parameter_list|)
block|{
if|if
condition|(
name|include
operator|==
literal|null
operator|&&
name|exclude
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
name|this
operator|.
name|exclude
operator|=
name|exclude
expr_stmt|;
name|this
operator|.
name|includeValues
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|excludeValues
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * @param includeValues   The terms to be included      * @param excludeValues   The terms to be excluded      */
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|includeValues
parameter_list|,
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|excludeValues
parameter_list|)
block|{
if|if
condition|(
name|includeValues
operator|==
literal|null
operator|&&
name|excludeValues
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|this
operator|.
name|include
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|exclude
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|includeValues
operator|=
name|includeValues
expr_stmt|;
name|this
operator|.
name|excludeValues
operator|=
name|excludeValues
expr_stmt|;
block|}
comment|/**      * Terms adapter around doc values.      */
DECL|class|DocValuesTerms
specifier|private
specifier|static
class|class
name|DocValuesTerms
extends|extends
name|Terms
block|{
DECL|field|values
specifier|private
specifier|final
name|SortedSetDocValues
name|values
decl_stmt|;
DECL|method|DocValuesTerms
name|DocValuesTerms
parameter_list|(
name|SortedSetDocValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|values
operator|.
name|termsEnum
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|hasFreqs
specifier|public
name|boolean
name|hasFreqs
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasOffsets
specifier|public
name|boolean
name|hasOffsets
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasPositions
specifier|public
name|boolean
name|hasPositions
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayloads
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|Parser
specifier|public
specifier|static
class|class
name|Parser
block|{
DECL|field|include
name|String
name|include
init|=
literal|null
decl_stmt|;
DECL|field|exclude
name|String
name|exclude
init|=
literal|null
decl_stmt|;
DECL|field|includeValues
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|includeValues
decl_stmt|;
DECL|field|excludeValues
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|excludeValues
decl_stmt|;
DECL|method|token
specifier|public
name|boolean
name|token
parameter_list|(
name|String
name|currentFieldName
parameter_list|,
name|XContentParser
operator|.
name|Token
name|token
parameter_list|,
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
literal|"include"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|include
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"exclude"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|exclude
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
literal|"include"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|includeValues
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|parseArrayToSet
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"exclude"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|excludeValues
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|parseArrayToSet
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
literal|"include"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
literal|"pattern"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|include
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"exclude"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
literal|"pattern"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|exclude
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|parseArrayToSet
specifier|private
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|parseArrayToSet
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Missing start of array in include/exclude clause"
argument_list|)
throw|;
block|}
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
operator|!
name|parser
operator|.
name|currentToken
argument_list|()
operator|.
name|isValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Array elements in include/exclude clauses should be string values"
argument_list|)
throw|;
block|}
name|set
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|method|includeExclude
specifier|public
name|IncludeExclude
name|includeExclude
parameter_list|()
block|{
name|RegExp
name|includePattern
init|=
name|include
operator|!=
literal|null
condition|?
operator|new
name|RegExp
argument_list|(
name|include
argument_list|)
else|:
literal|null
decl_stmt|;
name|RegExp
name|excludePattern
init|=
name|exclude
operator|!=
literal|null
condition|?
operator|new
name|RegExp
argument_list|(
name|exclude
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|includePattern
operator|!=
literal|null
operator|||
name|excludePattern
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|includeValues
operator|!=
literal|null
operator|||
name|excludeValues
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Can only use regular expression include/exclude or a set of values, not both"
argument_list|)
throw|;
block|}
return|return
operator|new
name|IncludeExclude
argument_list|(
name|includePattern
argument_list|,
name|excludePattern
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|includeValues
operator|!=
literal|null
operator|||
name|excludeValues
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|IncludeExclude
argument_list|(
name|includeValues
argument_list|,
name|excludeValues
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
DECL|method|isRegexBased
specifier|public
name|boolean
name|isRegexBased
parameter_list|()
block|{
return|return
name|include
operator|!=
literal|null
operator|||
name|exclude
operator|!=
literal|null
return|;
block|}
DECL|method|toAutomaton
specifier|private
name|Automaton
name|toAutomaton
parameter_list|()
block|{
name|Automaton
name|a
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|include
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
name|include
operator|.
name|toAutomaton
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeValues
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
name|Automata
operator|.
name|makeStringUnion
argument_list|(
name|includeValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|a
operator|=
name|Automata
operator|.
name|makeAnyString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exclude
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
name|Operations
operator|.
name|minus
argument_list|(
name|a
argument_list|,
name|exclude
operator|.
name|toAutomaton
argument_list|()
argument_list|,
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|excludeValues
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
name|Operations
operator|.
name|minus
argument_list|(
name|a
argument_list|,
name|Automata
operator|.
name|makeStringUnion
argument_list|(
name|excludeValues
argument_list|)
argument_list|,
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
DECL|method|convertToStringFilter
specifier|public
name|StringFilter
name|convertToStringFilter
parameter_list|()
block|{
return|return
operator|new
name|StringFilter
argument_list|(
name|toAutomaton
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertToOrdinalsFilter
specifier|public
name|OrdinalsFilter
name|convertToOrdinalsFilter
parameter_list|()
block|{
return|return
operator|new
name|OrdinalsFilter
argument_list|(
name|toAutomaton
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertToLongFilter
specifier|public
name|LongFilter
name|convertToLongFilter
parameter_list|()
block|{
name|int
name|numValids
init|=
name|includeValues
operator|==
literal|null
condition|?
literal|0
else|:
name|includeValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numInvalids
init|=
name|excludeValues
operator|==
literal|null
condition|?
literal|0
else|:
name|excludeValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|LongFilter
name|result
init|=
operator|new
name|LongFilter
argument_list|(
name|numValids
argument_list|,
name|numInvalids
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|val
range|:
name|includeValues
control|)
block|{
name|result
operator|.
name|addAccept
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|val
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|excludeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|val
range|:
name|excludeValues
control|)
block|{
name|result
operator|.
name|addReject
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|val
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|convertToDoubleFilter
specifier|public
name|LongFilter
name|convertToDoubleFilter
parameter_list|()
block|{
name|int
name|numValids
init|=
name|includeValues
operator|==
literal|null
condition|?
literal|0
else|:
name|includeValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numInvalids
init|=
name|excludeValues
operator|==
literal|null
condition|?
literal|0
else|:
name|excludeValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|LongFilter
name|result
init|=
operator|new
name|LongFilter
argument_list|(
name|numValids
argument_list|,
name|numInvalids
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|val
range|:
name|includeValues
control|)
block|{
name|double
name|dval
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|val
operator|.
name|utf8ToString
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|addAccept
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|dval
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|excludeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|val
range|:
name|excludeValues
control|)
block|{
name|double
name|dval
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|val
operator|.
name|utf8ToString
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|addReject
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|dval
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

