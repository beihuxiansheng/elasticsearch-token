begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant.heuristics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParsingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|MutualInformation
specifier|public
class|class
name|MutualInformation
implements|implements
name|SignificanceHeuristic
block|{
DECL|field|NAMES_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|NAMES_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"mutual_information"
argument_list|)
decl_stmt|;
DECL|field|INCLUDE_NEGATIVES_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|INCLUDE_NEGATIVES_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"include_negatives"
argument_list|)
decl_stmt|;
DECL|field|BACKGROUND_IS_SUPERSET
specifier|protected
specifier|static
specifier|final
name|ParseField
name|BACKGROUND_IS_SUPERSET
init|=
operator|new
name|ParseField
argument_list|(
literal|"background_is_superset"
argument_list|)
decl_stmt|;
DECL|field|SCORE_ERROR_MESSAGE
specifier|protected
specifier|static
specifier|final
name|String
name|SCORE_ERROR_MESSAGE
init|=
literal|", does your background filter not include all documents in the bucket? If so and it is intentional, set \""
operator|+
name|BACKGROUND_IS_SUPERSET
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"\": false"
decl_stmt|;
DECL|field|log2
specifier|private
specifier|static
specifier|final
name|double
name|log2
init|=
name|Math
operator|.
name|log
argument_list|(
literal|2.0
argument_list|)
decl_stmt|;
comment|/**      * Mutual information does not differentiate between terms that are descriptive for subset or for      * the background without the subset. We might want to filter out the terms that are appear much less often      * in the subset than in the background without the subset.      */
DECL|field|includeNegatives
specifier|protected
name|boolean
name|includeNegatives
init|=
literal|false
decl_stmt|;
DECL|field|backgroundIsSuperset
specifier|private
name|boolean
name|backgroundIsSuperset
init|=
literal|true
decl_stmt|;
DECL|method|MutualInformation
specifier|private
name|MutualInformation
parameter_list|()
block|{}
empty_stmt|;
DECL|method|MutualInformation
specifier|public
name|MutualInformation
parameter_list|(
name|boolean
name|includeNegatives
parameter_list|,
name|boolean
name|backgroundIsSuperset
parameter_list|)
block|{
name|this
operator|.
name|includeNegatives
operator|=
name|includeNegatives
expr_stmt|;
name|this
operator|.
name|backgroundIsSuperset
operator|=
name|backgroundIsSuperset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|MutualInformation
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|MutualInformation
operator|)
name|other
operator|)
operator|.
name|includeNegatives
operator|==
name|includeNegatives
operator|&&
operator|(
operator|(
name|MutualInformation
operator|)
name|other
operator|)
operator|.
name|backgroundIsSuperset
operator|==
name|backgroundIsSuperset
return|;
block|}
DECL|field|STREAM
specifier|public
specifier|static
specifier|final
name|SignificanceHeuristicStreams
operator|.
name|Stream
name|STREAM
init|=
operator|new
name|SignificanceHeuristicStreams
operator|.
name|Stream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SignificanceHeuristic
name|readResult
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MutualInformation
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|,
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAMES_FIELD
operator|.
name|getPreferredName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Calculates mutual information      * see "Information Retrieval", Manning et al., Eq. 13.17      *      * @param subsetFreq     The frequency of the term in the selected sample      * @param subsetSize   The size of the selected sample (typically number of docs)      * @param supersetFreq   The frequency of the term in the superset from which the sample was taken      * @param supersetSize The size of the superset from which the sample was taken  (typically number of docs)      * @return a "significance" score      */
annotation|@
name|Override
DECL|method|getScore
specifier|public
name|double
name|getScore
parameter_list|(
name|long
name|subsetFreq
parameter_list|,
name|long
name|subsetSize
parameter_list|,
name|long
name|supersetFreq
parameter_list|,
name|long
name|supersetSize
parameter_list|)
block|{
if|if
condition|(
name|subsetFreq
operator|<
literal|0
operator|||
name|subsetSize
operator|<
literal|0
operator|||
name|supersetFreq
operator|<
literal|0
operator|||
name|supersetSize
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Frequencies of subset and superset must be positive in MutualInformation.getScore()"
argument_list|)
throw|;
block|}
if|if
condition|(
name|subsetFreq
operator|>
name|subsetSize
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"subsetFreq> subsetSize, in MutualInformation.score(..)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|supersetFreq
operator|>
name|supersetSize
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"supersetFreq> supersetSize, in MutualInformation.score(..)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|backgroundIsSuperset
condition|)
block|{
if|if
condition|(
name|subsetFreq
operator|>
name|supersetFreq
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"subsetFreq> supersetFreq"
operator|+
name|SCORE_ERROR_MESSAGE
argument_list|)
throw|;
block|}
if|if
condition|(
name|subsetSize
operator|>
name|supersetSize
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"subsetSize> supersetSize"
operator|+
name|SCORE_ERROR_MESSAGE
argument_list|)
throw|;
block|}
if|if
condition|(
name|supersetFreq
operator|-
name|subsetFreq
operator|>
name|supersetSize
operator|-
name|subsetSize
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"supersetFreq - subsetFreq> supersetSize - subsetSize"
operator|+
name|SCORE_ERROR_MESSAGE
argument_list|)
throw|;
block|}
block|}
name|double
name|N00
decl_stmt|,
name|N01
decl_stmt|,
name|N10
decl_stmt|,
name|N11
decl_stmt|,
name|N0_
decl_stmt|,
name|N1_
decl_stmt|,
name|N_0
decl_stmt|,
name|N_1
decl_stmt|,
name|N
decl_stmt|;
if|if
condition|(
name|backgroundIsSuperset
condition|)
block|{
comment|//documents not in class and do not contain term
name|N00
operator|=
name|supersetSize
operator|-
name|supersetFreq
operator|-
operator|(
name|subsetSize
operator|-
name|subsetFreq
operator|)
expr_stmt|;
comment|//documents in class and do not contain term
name|N01
operator|=
operator|(
name|subsetSize
operator|-
name|subsetFreq
operator|)
expr_stmt|;
comment|// documents not in class and do contain term
name|N10
operator|=
name|supersetFreq
operator|-
name|subsetFreq
expr_stmt|;
comment|// documents in class and do contain term
name|N11
operator|=
name|subsetFreq
expr_stmt|;
comment|//documents that do not contain term
name|N0_
operator|=
name|supersetSize
operator|-
name|supersetFreq
expr_stmt|;
comment|//documents that contain term
name|N1_
operator|=
name|supersetFreq
expr_stmt|;
comment|//documents that are not in class
name|N_0
operator|=
name|supersetSize
operator|-
name|subsetSize
expr_stmt|;
comment|//documents that are in class
name|N_1
operator|=
name|subsetSize
expr_stmt|;
comment|//all docs
name|N
operator|=
name|supersetSize
expr_stmt|;
block|}
else|else
block|{
comment|//documents not in class and do not contain term
name|N00
operator|=
name|supersetSize
operator|-
name|supersetFreq
expr_stmt|;
comment|//documents in class and do not contain term
name|N01
operator|=
name|subsetSize
operator|-
name|subsetFreq
expr_stmt|;
comment|// documents not in class and do contain term
name|N10
operator|=
name|supersetFreq
expr_stmt|;
comment|// documents in class and do contain term
name|N11
operator|=
name|subsetFreq
expr_stmt|;
comment|//documents that do not contain term
name|N0_
operator|=
name|supersetSize
operator|-
name|supersetFreq
operator|+
name|subsetSize
operator|-
name|subsetFreq
expr_stmt|;
comment|//documents that contain term
name|N1_
operator|=
name|supersetFreq
operator|+
name|subsetFreq
expr_stmt|;
comment|//documents that are not in class
name|N_0
operator|=
name|supersetSize
expr_stmt|;
comment|//documents that are in class
name|N_1
operator|=
name|subsetSize
expr_stmt|;
comment|//all docs
name|N
operator|=
name|supersetSize
operator|+
name|subsetSize
expr_stmt|;
block|}
name|double
name|score
init|=
operator|(
name|getMITerm
argument_list|(
name|N00
argument_list|,
name|N0_
argument_list|,
name|N_0
argument_list|,
name|N
argument_list|)
operator|+
name|getMITerm
argument_list|(
name|N01
argument_list|,
name|N0_
argument_list|,
name|N_1
argument_list|,
name|N
argument_list|)
operator|+
name|getMITerm
argument_list|(
name|N10
argument_list|,
name|N1_
argument_list|,
name|N_0
argument_list|,
name|N
argument_list|)
operator|+
name|getMITerm
argument_list|(
name|N11
argument_list|,
name|N1_
argument_list|,
name|N_1
argument_list|,
name|N
argument_list|)
operator|)
operator|/
name|log2
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|score
argument_list|)
condition|)
block|{
name|score
operator|=
operator|-
literal|1.0
operator|*
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
comment|// here we check if the term appears more often in subset than in background without subset.
if|if
condition|(
operator|!
name|includeNegatives
operator|&&
name|N11
operator|/
name|N_1
operator|<
name|N10
operator|/
name|N_0
condition|)
block|{
name|score
operator|=
operator|-
literal|1.0
operator|*
name|Double
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
comment|/*  make sure that         0 * log(0/0) = 0         0 * log(0) = 0         Else, this would be the score:         double score =                   N11 / N * Math.log((N * N11) / (N1_ * N_1))                 + N01 / N * Math.log((N * N01) / (N0_ * N_1))                 + N10 / N * Math.log((N * N10) / (N1_ * N_0))                 + N00 / N * Math.log((N * N00) / (N0_ * N_0));          but we get many NaN if we do not take case of the 0s */
DECL|method|getMITerm
name|double
name|getMITerm
parameter_list|(
name|double
name|Nxy
parameter_list|,
name|double
name|Nx_
parameter_list|,
name|double
name|N_y
parameter_list|,
name|double
name|N
parameter_list|)
block|{
name|double
name|numerator
init|=
name|Math
operator|.
name|abs
argument_list|(
name|N
operator|*
name|Nxy
argument_list|)
decl_stmt|;
name|double
name|denominator
init|=
name|Math
operator|.
name|abs
argument_list|(
name|Nx_
operator|*
name|N_y
argument_list|)
decl_stmt|;
name|double
name|factor
init|=
name|Math
operator|.
name|abs
argument_list|(
name|Nxy
operator|/
name|N
argument_list|)
decl_stmt|;
if|if
condition|(
name|numerator
operator|<
literal|1.e-7
operator|&&
name|factor
operator|<
literal|1.e-7
condition|)
block|{
return|return
literal|0.0
return|;
block|}
else|else
block|{
return|return
name|factor
operator|*
name|Math
operator|.
name|log
argument_list|(
name|numerator
operator|/
name|denominator
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|STREAM
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|includeNegatives
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|backgroundIsSuperset
argument_list|)
expr_stmt|;
block|}
DECL|method|getIncludeNegatives
specifier|public
name|boolean
name|getIncludeNegatives
parameter_list|()
block|{
return|return
name|includeNegatives
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
operator|(
name|includeNegatives
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|backgroundIsSuperset
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|class|MutualInformationParser
specifier|public
specifier|static
class|class
name|MutualInformationParser
implements|implements
name|SignificanceHeuristicParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|SignificanceHeuristic
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
throws|,
name|QueryParsingException
block|{
name|NAMES_FIELD
operator|.
name|match
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|ParseField
operator|.
name|EMPTY_FLAGS
argument_list|)
expr_stmt|;
name|boolean
name|includeNegatives
init|=
literal|false
decl_stmt|;
name|boolean
name|backgroundIsSuperset
init|=
literal|true
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|equals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|)
condition|)
block|{
if|if
condition|(
name|INCLUDE_NEGATIVES_FIELD
operator|.
name|match
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|ParseField
operator|.
name|EMPTY_FLAGS
argument_list|)
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|includeNegatives
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BACKGROUND_IS_SUPERSET
operator|.
name|match
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|ParseField
operator|.
name|EMPTY_FLAGS
argument_list|)
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|backgroundIsSuperset
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Field "
operator|+
name|parser
operator|.
name|currentName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" unknown for mutual_information."
argument_list|)
throw|;
block|}
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
comment|// move to the closing bracket
return|return
operator|new
name|MutualInformation
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNames
specifier|public
name|String
index|[]
name|getNames
parameter_list|()
block|{
return|return
name|NAMES_FIELD
operator|.
name|getAllNamesIncludedDeprecated
argument_list|()
return|;
block|}
block|}
DECL|class|MutualInformationBuilder
specifier|public
specifier|static
class|class
name|MutualInformationBuilder
implements|implements
name|SignificanceHeuristicBuilder
block|{
DECL|field|includeNegatives
name|boolean
name|includeNegatives
init|=
literal|true
decl_stmt|;
DECL|field|backgroundIsSuperset
specifier|private
name|boolean
name|backgroundIsSuperset
init|=
literal|true
decl_stmt|;
DECL|method|MutualInformationBuilder
specifier|private
name|MutualInformationBuilder
parameter_list|()
block|{}
empty_stmt|;
DECL|method|MutualInformationBuilder
specifier|public
name|MutualInformationBuilder
parameter_list|(
name|boolean
name|includeNegatives
parameter_list|,
name|boolean
name|backgroundIsSuperset
parameter_list|)
block|{
name|this
operator|.
name|includeNegatives
operator|=
name|includeNegatives
expr_stmt|;
name|this
operator|.
name|backgroundIsSuperset
operator|=
name|backgroundIsSuperset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|STREAM
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|INCLUDE_NEGATIVES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|includeNegatives
argument_list|)
operator|.
name|field
argument_list|(
name|BACKGROUND_IS_SUPERSET
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|backgroundIsSuperset
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

