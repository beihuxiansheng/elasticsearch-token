begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|MultiBucketsAggregation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * A {@code histogram} aggregation. Defines multiple buckets, each representing an interval in a histogram.  */
end_comment

begin_interface
DECL|interface|Histogram
specifier|public
interface|interface
name|Histogram
extends|extends
name|MultiBucketsAggregation
block|{
comment|/**      * A bucket in the histogram where documents fall in      */
DECL|interface|Bucket
specifier|static
interface|interface
name|Bucket
extends|extends
name|MultiBucketsAggregation
operator|.
name|Bucket
block|{
comment|/**          * @return The key associated with the bucket (all documents that fall in this bucket were rounded to this key)          */
DECL|method|getKeyAsNumber
name|Number
name|getKeyAsNumber
parameter_list|()
function_decl|;
block|}
comment|/**      * @return  The buckets of this histogram (each bucket representing an interval in the histogram)      */
DECL|method|getBuckets
name|Collection
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|getBuckets
parameter_list|()
function_decl|;
comment|/**      * Returns a bucket by the key associated with it.      *      * @param key The key of the bucket.      * @return The bucket that is associated with the given key.      */
DECL|method|getBucketByKey
name|Bucket
name|getBucketByKey
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
comment|/**      * Returns a bucket by the key associated with it.      *      * @param key The key of the bucket.      * @return The bucket that is associated with the given key.      */
DECL|method|getBucketByKey
name|Bucket
name|getBucketByKey
parameter_list|(
name|Number
name|key
parameter_list|)
function_decl|;
comment|/**      * A strategy defining the order in which the buckets in this histogram are ordered.      */
DECL|class|Order
specifier|static
specifier|abstract
class|class
name|Order
implements|implements
name|ToXContent
block|{
DECL|field|KEY_ASC
specifier|public
specifier|static
specifier|final
name|Order
name|KEY_ASC
init|=
operator|new
name|InternalOrder
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|"_key"
argument_list|,
literal|true
argument_list|,
operator|new
name|Comparator
argument_list|<
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|InternalHistogram
operator|.
name|Bucket
name|b1
parameter_list|,
name|InternalHistogram
operator|.
name|Bucket
name|b2
parameter_list|)
block|{
return|return
name|Longs
operator|.
name|compare
argument_list|(
name|b1
operator|.
name|key
argument_list|,
name|b2
operator|.
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|KEY_DESC
specifier|public
specifier|static
specifier|final
name|Order
name|KEY_DESC
init|=
operator|new
name|InternalOrder
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
literal|"_key"
argument_list|,
literal|false
argument_list|,
operator|new
name|Comparator
argument_list|<
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|InternalHistogram
operator|.
name|Bucket
name|b1
parameter_list|,
name|InternalHistogram
operator|.
name|Bucket
name|b2
parameter_list|)
block|{
return|return
operator|-
name|Longs
operator|.
name|compare
argument_list|(
name|b1
operator|.
name|key
argument_list|,
name|b2
operator|.
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|COUNT_ASC
specifier|public
specifier|static
specifier|final
name|Order
name|COUNT_ASC
init|=
operator|new
name|InternalOrder
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|,
literal|"_count"
argument_list|,
literal|true
argument_list|,
operator|new
name|Comparator
argument_list|<
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|InternalHistogram
operator|.
name|Bucket
name|b1
parameter_list|,
name|InternalHistogram
operator|.
name|Bucket
name|b2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Longs
operator|.
name|compare
argument_list|(
name|b1
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|b2
operator|.
name|getDocCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|Longs
operator|.
name|compare
argument_list|(
name|b1
operator|.
name|key
argument_list|,
name|b2
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|COUNT_DESC
specifier|public
specifier|static
specifier|final
name|Order
name|COUNT_DESC
init|=
operator|new
name|InternalOrder
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|,
literal|"_count"
argument_list|,
literal|false
argument_list|,
operator|new
name|Comparator
argument_list|<
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|InternalHistogram
operator|.
name|Bucket
name|b1
parameter_list|,
name|InternalHistogram
operator|.
name|Bucket
name|b2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|-
name|Longs
operator|.
name|compare
argument_list|(
name|b1
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|b2
operator|.
name|getDocCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|Longs
operator|.
name|compare
argument_list|(
name|b1
operator|.
name|key
argument_list|,
name|b2
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|/**          * Creates a bucket ordering strategy that sorts buckets based on a single-valued calc sug-aggregation          *          * @param path the name of the aggregation          * @param asc             The direction of the order (ascending or descending)          */
DECL|method|aggregation
specifier|public
specifier|static
name|Order
name|aggregation
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
return|return
operator|new
name|InternalOrder
operator|.
name|Aggregation
argument_list|(
name|path
argument_list|,
name|asc
argument_list|)
return|;
block|}
comment|/**          * Creates a bucket ordering strategy that sorts buckets based on a multi-valued calc sug-aggregation          *          * @param aggregationName the name of the aggregation          * @param valueName       The name of the value of the multi-value get by which the sorting will be applied          * @param asc             The direction of the order (ascending or descending)          */
DECL|method|aggregation
specifier|public
specifier|static
name|Order
name|aggregation
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|String
name|valueName
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
return|return
operator|new
name|InternalOrder
operator|.
name|Aggregation
argument_list|(
name|aggregationName
operator|+
literal|"."
operator|+
name|valueName
argument_list|,
name|asc
argument_list|)
return|;
block|}
comment|/**          * @return The bucket comparator by which the order will be applied.          */
DECL|method|comparator
specifier|abstract
name|Comparator
argument_list|<
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
name|comparator
parameter_list|()
function_decl|;
block|}
block|}
end_interface

end_unit

