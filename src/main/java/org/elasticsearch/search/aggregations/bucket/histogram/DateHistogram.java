begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * A {@code date_histogram} aggregation.  */
end_comment

begin_interface
DECL|interface|DateHistogram
specifier|public
interface|interface
name|DateHistogram
extends|extends
name|Histogram
block|{
DECL|interface|Bucket
specifier|static
interface|interface
name|Bucket
extends|extends
name|Histogram
operator|.
name|Bucket
block|{
comment|/**          * @return the key as a date construct.          */
DECL|method|getKeyAsDate
name|DateTime
name|getKeyAsDate
parameter_list|()
function_decl|;
block|}
annotation|@
name|Override
DECL|method|getBuckets
name|Collection
argument_list|<
name|?
extends|extends
name|DateHistogram
operator|.
name|Bucket
argument_list|>
name|getBuckets
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getBucketByKey
name|Bucket
name|getBucketByKey
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getBucketByKey
name|Bucket
name|getBucketByKey
parameter_list|(
name|Number
name|key
parameter_list|)
function_decl|;
DECL|method|getBucketByKey
name|Bucket
name|getBucketByKey
parameter_list|(
name|DateTime
name|key
parameter_list|)
function_decl|;
comment|/**      * The interval the date histogram is based on.      */
DECL|class|Interval
specifier|static
class|class
name|Interval
block|{
DECL|field|SECOND
specifier|public
specifier|static
specifier|final
name|Interval
name|SECOND
init|=
operator|new
name|Interval
argument_list|(
literal|"1s"
argument_list|)
decl_stmt|;
DECL|field|MINUTE
specifier|public
specifier|static
specifier|final
name|Interval
name|MINUTE
init|=
operator|new
name|Interval
argument_list|(
literal|"1m"
argument_list|)
decl_stmt|;
DECL|field|HOUR
specifier|public
specifier|static
specifier|final
name|Interval
name|HOUR
init|=
operator|new
name|Interval
argument_list|(
literal|"1h"
argument_list|)
decl_stmt|;
DECL|field|DAY
specifier|public
specifier|static
specifier|final
name|Interval
name|DAY
init|=
operator|new
name|Interval
argument_list|(
literal|"1d"
argument_list|)
decl_stmt|;
DECL|field|WEEK
specifier|public
specifier|static
specifier|final
name|Interval
name|WEEK
init|=
operator|new
name|Interval
argument_list|(
literal|"1w"
argument_list|)
decl_stmt|;
DECL|field|MONTH
specifier|public
specifier|static
specifier|final
name|Interval
name|MONTH
init|=
operator|new
name|Interval
argument_list|(
literal|"1M"
argument_list|)
decl_stmt|;
DECL|field|QUARTER
specifier|public
specifier|static
specifier|final
name|Interval
name|QUARTER
init|=
operator|new
name|Interval
argument_list|(
literal|"1q"
argument_list|)
decl_stmt|;
DECL|field|YEAR
specifier|public
specifier|static
specifier|final
name|Interval
name|YEAR
init|=
operator|new
name|Interval
argument_list|(
literal|"1y"
argument_list|)
decl_stmt|;
DECL|method|seconds
specifier|public
specifier|static
name|Interval
name|seconds
parameter_list|(
name|int
name|sec
parameter_list|)
block|{
return|return
operator|new
name|Interval
argument_list|(
name|sec
operator|+
literal|"s"
argument_list|)
return|;
block|}
DECL|method|minutes
specifier|public
specifier|static
name|Interval
name|minutes
parameter_list|(
name|int
name|min
parameter_list|)
block|{
return|return
operator|new
name|Interval
argument_list|(
name|min
operator|+
literal|"m"
argument_list|)
return|;
block|}
DECL|method|hours
specifier|public
specifier|static
name|Interval
name|hours
parameter_list|(
name|int
name|hours
parameter_list|)
block|{
return|return
operator|new
name|Interval
argument_list|(
name|hours
operator|+
literal|"h"
argument_list|)
return|;
block|}
DECL|method|days
specifier|public
specifier|static
name|Interval
name|days
parameter_list|(
name|int
name|days
parameter_list|)
block|{
return|return
operator|new
name|Interval
argument_list|(
name|days
operator|+
literal|"d"
argument_list|)
return|;
block|}
DECL|method|weeks
specifier|public
specifier|static
name|Interval
name|weeks
parameter_list|(
name|int
name|weeks
parameter_list|)
block|{
return|return
operator|new
name|Interval
argument_list|(
name|weeks
operator|+
literal|"w"
argument_list|)
return|;
block|}
DECL|field|expression
specifier|private
specifier|final
name|String
name|expression
decl_stmt|;
DECL|method|Interval
specifier|public
name|Interval
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
block|}
block|}
end_interface

end_unit

