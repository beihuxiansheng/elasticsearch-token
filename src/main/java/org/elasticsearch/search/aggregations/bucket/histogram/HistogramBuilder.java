begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ValuesSourceAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A builder for a histogram aggregation.  */
end_comment

begin_class
DECL|class|HistogramBuilder
specifier|public
class|class
name|HistogramBuilder
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|HistogramBuilder
argument_list|>
block|{
DECL|field|interval
specifier|private
name|Long
name|interval
decl_stmt|;
DECL|field|order
specifier|private
name|Histogram
operator|.
name|Order
name|order
decl_stmt|;
DECL|field|minDocCount
specifier|private
name|Long
name|minDocCount
decl_stmt|;
DECL|field|extendedBoundsMin
specifier|private
name|Long
name|extendedBoundsMin
decl_stmt|;
DECL|field|extendedBoundsMax
specifier|private
name|Long
name|extendedBoundsMax
decl_stmt|;
DECL|field|preOffset
specifier|private
name|Long
name|preOffset
decl_stmt|;
DECL|field|postOffset
specifier|private
name|Long
name|postOffset
decl_stmt|;
comment|/**      * Constructs a new histogram aggregation builder.      *      * @param name  The name of the aggregation (will serve as the unique identifier for the aggregation result in the response)      */
DECL|method|HistogramBuilder
specifier|public
name|HistogramBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|InternalHistogram
operator|.
name|TYPE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the interval for the histogram.      *      * @param interval  The interval for the histogram      * @return          This builder      */
DECL|method|interval
specifier|public
name|HistogramBuilder
name|interval
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the order by which the buckets will be returned.      *      * @param order The order by which the buckets will be returned      * @return      This builder      */
DECL|method|order
specifier|public
name|HistogramBuilder
name|order
parameter_list|(
name|Histogram
operator|.
name|Order
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the minimum document count per bucket. Buckets with less documents than this min value will not be returned.      *      * @param minDocCount   The minimum document count per bucket      * @return              This builder      */
DECL|method|minDocCount
specifier|public
name|HistogramBuilder
name|minDocCount
parameter_list|(
name|long
name|minDocCount
parameter_list|)
block|{
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|extendedBounds
specifier|public
name|HistogramBuilder
name|extendedBounds
parameter_list|(
name|Long
name|min
parameter_list|,
name|Long
name|max
parameter_list|)
block|{
name|extendedBoundsMin
operator|=
name|min
expr_stmt|;
name|extendedBoundsMax
operator|=
name|max
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preOffset
specifier|public
name|HistogramBuilder
name|preOffset
parameter_list|(
name|long
name|preOffset
parameter_list|)
block|{
name|this
operator|.
name|preOffset
operator|=
name|preOffset
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|postOffset
specifier|public
name|HistogramBuilder
name|postOffset
parameter_list|(
name|long
name|postOffset
parameter_list|)
block|{
name|this
operator|.
name|postOffset
operator|=
name|postOffset
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doInternalXContent
specifier|protected
name|XContentBuilder
name|doInternalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|interval
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SearchSourceBuilderException
argument_list|(
literal|"[interval] must be defined for histogram aggregation ["
operator|+
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"interval"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"order"
argument_list|)
expr_stmt|;
name|order
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preOffset
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"pre_offset"
argument_list|,
name|preOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postOffset
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"post_offset"
argument_list|,
name|postOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minDocCount
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min_doc_count"
argument_list|,
name|minDocCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extendedBoundsMin
operator|!=
literal|null
operator|||
name|extendedBoundsMax
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|HistogramParser
operator|.
name|EXTENDED_BOUNDS
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extendedBoundsMin
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min"
argument_list|,
name|extendedBoundsMin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extendedBoundsMax
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max"
argument_list|,
name|extendedBoundsMax
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

