begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Explicit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|BucketsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|InternalOrder
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|OrderPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|TermsAggregator
specifier|public
specifier|abstract
class|class
name|TermsAggregator
extends|extends
name|BucketsAggregator
block|{
DECL|class|BucketCountThresholds
specifier|public
specifier|static
class|class
name|BucketCountThresholds
block|{
DECL|field|minDocCount
specifier|private
name|Explicit
argument_list|<
name|Long
argument_list|>
name|minDocCount
decl_stmt|;
DECL|field|shardMinDocCount
specifier|private
name|Explicit
argument_list|<
name|Long
argument_list|>
name|shardMinDocCount
decl_stmt|;
DECL|field|requiredSize
specifier|private
name|Explicit
argument_list|<
name|Integer
argument_list|>
name|requiredSize
decl_stmt|;
DECL|field|shardSize
specifier|private
name|Explicit
argument_list|<
name|Integer
argument_list|>
name|shardSize
decl_stmt|;
DECL|method|BucketCountThresholds
specifier|public
name|BucketCountThresholds
parameter_list|(
name|long
name|minDocCount
parameter_list|,
name|long
name|shardMinDocCount
parameter_list|,
name|int
name|requiredSize
parameter_list|,
name|int
name|shardSize
parameter_list|)
block|{
name|this
operator|.
name|minDocCount
operator|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|minDocCount
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardMinDocCount
operator|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|shardMinDocCount
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|requiredSize
operator|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|requiredSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardSize
operator|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|shardSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|BucketCountThresholds
specifier|public
name|BucketCountThresholds
parameter_list|()
block|{
name|this
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|BucketCountThresholds
specifier|public
name|BucketCountThresholds
parameter_list|(
name|BucketCountThresholds
name|bucketCountThresholds
parameter_list|)
block|{
name|this
argument_list|(
name|bucketCountThresholds
operator|.
name|minDocCount
operator|.
name|value
argument_list|()
argument_list|,
name|bucketCountThresholds
operator|.
name|shardMinDocCount
operator|.
name|value
argument_list|()
argument_list|,
name|bucketCountThresholds
operator|.
name|requiredSize
operator|.
name|value
argument_list|()
argument_list|,
name|bucketCountThresholds
operator|.
name|shardSize
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureValidity
specifier|public
name|void
name|ensureValidity
parameter_list|()
block|{
if|if
condition|(
name|shardSize
operator|.
name|value
argument_list|()
operator|==
literal|0
condition|)
block|{
name|setShardSize
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requiredSize
operator|.
name|value
argument_list|()
operator|==
literal|0
condition|)
block|{
name|setRequiredSize
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|// shard_size cannot be smaller than size as we need to at least fetch<size> entries from every shards in order to return<size>
if|if
condition|(
name|shardSize
operator|.
name|value
argument_list|()
operator|<
name|requiredSize
operator|.
name|value
argument_list|()
condition|)
block|{
name|setShardSize
argument_list|(
name|requiredSize
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// shard_min_doc_count should not be larger than min_doc_count because this can cause buckets to be removed that would match the min_doc_count criteria
if|if
condition|(
name|shardMinDocCount
operator|.
name|value
argument_list|()
operator|>
name|minDocCount
operator|.
name|value
argument_list|()
condition|)
block|{
name|setShardMinDocCount
argument_list|(
name|minDocCount
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requiredSize
operator|.
name|value
argument_list|()
operator|<
literal|0
operator|||
name|minDocCount
operator|.
name|value
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"parameters [requiredSize] and [minDocCount] must be>=0 in terms aggregation."
argument_list|)
throw|;
block|}
block|}
DECL|method|getShardMinDocCount
specifier|public
name|long
name|getShardMinDocCount
parameter_list|()
block|{
return|return
name|shardMinDocCount
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|setShardMinDocCount
specifier|public
name|void
name|setShardMinDocCount
parameter_list|(
name|long
name|shardMinDocCount
parameter_list|)
block|{
name|this
operator|.
name|shardMinDocCount
operator|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|shardMinDocCount
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getMinDocCount
specifier|public
name|long
name|getMinDocCount
parameter_list|()
block|{
return|return
name|minDocCount
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|setMinDocCount
specifier|public
name|void
name|setMinDocCount
parameter_list|(
name|long
name|minDocCount
parameter_list|)
block|{
name|this
operator|.
name|minDocCount
operator|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|minDocCount
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getRequiredSize
specifier|public
name|int
name|getRequiredSize
parameter_list|()
block|{
return|return
name|requiredSize
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|setRequiredSize
specifier|public
name|void
name|setRequiredSize
parameter_list|(
name|int
name|requiredSize
parameter_list|)
block|{
name|this
operator|.
name|requiredSize
operator|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|requiredSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getShardSize
specifier|public
name|int
name|getShardSize
parameter_list|()
block|{
return|return
name|shardSize
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|setShardSize
specifier|public
name|void
name|setShardSize
parameter_list|(
name|int
name|shardSize
parameter_list|)
block|{
name|this
operator|.
name|shardSize
operator|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|shardSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|requiredSize
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|AbstractTermsParametersParser
operator|.
name|REQUIRED_SIZE_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|requiredSize
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardSize
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|AbstractTermsParametersParser
operator|.
name|SHARD_SIZE_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|shardSize
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minDocCount
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|AbstractTermsParametersParser
operator|.
name|MIN_DOC_COUNT_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minDocCount
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardMinDocCount
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|AbstractTermsParametersParser
operator|.
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|shardMinDocCount
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|bucketCountThresholds
specifier|protected
specifier|final
name|BucketCountThresholds
name|bucketCountThresholds
decl_stmt|;
DECL|field|order
specifier|protected
name|InternalOrder
name|order
decl_stmt|;
DECL|field|aggUsedForSorting
specifier|protected
name|Aggregator
name|aggUsedForSorting
decl_stmt|;
DECL|field|subAggCollectMode
specifier|protected
name|SubAggCollectionMode
name|subAggCollectMode
decl_stmt|;
DECL|method|TermsAggregator
specifier|public
name|TermsAggregator
parameter_list|(
name|String
name|name
parameter_list|,
name|BucketAggregationMode
name|bucketAggregationMode
parameter_list|,
name|AggregatorFactories
name|factories
parameter_list|,
name|long
name|estimatedBucketsCount
parameter_list|,
name|AggregationContext
name|context
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|BucketCountThresholds
name|bucketCountThresholds
parameter_list|,
name|InternalOrder
name|order
parameter_list|,
name|SubAggCollectionMode
name|subAggCollectMode
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|bucketAggregationMode
argument_list|,
name|factories
argument_list|,
name|estimatedBucketsCount
argument_list|,
name|context
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucketCountThresholds
operator|=
name|bucketCountThresholds
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|InternalOrder
operator|.
name|validate
argument_list|(
name|order
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|subAggCollectMode
operator|=
name|subAggCollectMode
expr_stmt|;
comment|// Don't defer any child agg if we are dependent on it for pruning results
if|if
condition|(
name|order
operator|instanceof
name|Aggregation
condition|)
block|{
name|OrderPath
name|path
init|=
operator|(
operator|(
name|Aggregation
operator|)
name|order
operator|)
operator|.
name|path
argument_list|()
decl_stmt|;
name|aggUsedForSorting
operator|=
name|path
operator|.
name|resolveTopmostAggregator
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|shouldDefer
specifier|protected
name|boolean
name|shouldDefer
parameter_list|(
name|Aggregator
name|aggregator
parameter_list|)
block|{
return|return
operator|(
name|subAggCollectMode
operator|==
name|SubAggCollectionMode
operator|.
name|BREADTH_FIRST
operator|)
operator|&&
operator|(
name|aggregator
operator|!=
name|aggUsedForSorting
operator|)
return|;
block|}
block|}
end_class

end_unit

