begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|BucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|FilteringBucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|RecordingBucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|RecordingPerReaderBucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhaseExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Buffers the matches in a collect stream and can replay a subset of the collected buckets  * to a deferred set of collectors.  * The rationale for not bundling all this logic into {@link RecordingBucketCollector} is to allow  * the possibility of alternative recorder impl choices while keeping the logic in here for  * setting {@link AggregationContext}'s setNextReader method and preparing the appropriate choice   * of filtering logic for stream replay. These felt like agg-specific functions that should be kept away  * from the {@link RecordingBucketCollector} impl which is concentrated on efficient storage of doc and bucket IDs    */
end_comment

begin_class
DECL|class|DeferringBucketCollector
specifier|public
class|class
name|DeferringBucketCollector
extends|extends
name|BucketCollector
implements|implements
name|Releasable
block|{
DECL|field|deferred
specifier|private
specifier|final
name|BucketCollector
name|deferred
decl_stmt|;
DECL|field|recording
specifier|private
specifier|final
name|RecordingBucketCollector
name|recording
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|AggregationContext
name|context
decl_stmt|;
DECL|field|filteredCollector
specifier|private
name|FilteringBucketCollector
name|filteredCollector
decl_stmt|;
DECL|method|DeferringBucketCollector
specifier|public
name|DeferringBucketCollector
parameter_list|(
name|BucketCollector
name|deferred
parameter_list|,
name|AggregationContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|deferred
operator|=
name|deferred
expr_stmt|;
name|this
operator|.
name|recording
operator|=
operator|new
name|RecordingPerReaderBucketCollector
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
name|recording
operator|.
name|setNextReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|bucketOrdinal
parameter_list|)
throws|throws
name|IOException
block|{
name|recording
operator|.
name|collect
argument_list|(
name|docId
argument_list|,
name|bucketOrdinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postCollection
specifier|public
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
block|{
name|recording
operator|.
name|postCollection
argument_list|()
expr_stmt|;
block|}
comment|/**      * Plays a selection of the data cached from previous collect calls to the      * deferred collector.      *       * @param survivingBucketOrds      *            the valid bucket ords for which deferred collection should be      *            attempted      */
DECL|method|prepareSelectedBuckets
specifier|public
name|void
name|prepareSelectedBuckets
parameter_list|(
name|long
modifier|...
name|survivingBucketOrds
parameter_list|)
block|{
name|BucketCollector
name|subs
init|=
operator|new
name|BucketCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
comment|// Need to set AggregationContext otherwise ValueSources in aggs
comment|// don't read any values
name|context
operator|.
name|setNextReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|deferred
operator|.
name|setNextReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|bucketOrdinal
parameter_list|)
throws|throws
name|IOException
block|{
name|deferred
operator|.
name|collect
argument_list|(
name|docId
argument_list|,
name|bucketOrdinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
block|{
name|deferred
operator|.
name|postCollection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|gatherAnalysis
parameter_list|(
name|BucketAnalysisCollector
name|results
parameter_list|,
name|long
name|bucketOrdinal
parameter_list|)
block|{
name|deferred
operator|.
name|gatherAnalysis
argument_list|(
name|results
argument_list|,
name|bucketOrdinal
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|filteredCollector
operator|=
operator|new
name|FilteringBucketCollector
argument_list|(
name|survivingBucketOrds
argument_list|,
name|subs
argument_list|,
name|context
operator|.
name|bigArrays
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|recording
operator|.
name|replayCollection
argument_list|(
name|filteredCollector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryPhaseExecutionException
argument_list|(
name|context
operator|.
name|searchContext
argument_list|()
argument_list|,
literal|"Failed to replay deferred set of matching docIDs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|recording
argument_list|,
name|filteredCollector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|gatherAnalysis
specifier|public
name|void
name|gatherAnalysis
parameter_list|(
name|BucketAnalysisCollector
name|analysisCollector
parameter_list|,
name|long
name|bucketOrdinal
parameter_list|)
block|{
name|filteredCollector
operator|.
name|gatherAnalysis
argument_list|(
name|analysisCollector
argument_list|,
name|bucketOrdinal
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

