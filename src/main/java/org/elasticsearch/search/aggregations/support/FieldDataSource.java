begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InPlaceMergeSorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|ReaderContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicFieldData
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|FieldDataSource
operator|.
name|Bytes
operator|.
name|SortedAndUnique
operator|.
name|SortedUniqueBytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|bytes
operator|.
name|ScriptBytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|numeric
operator|.
name|ScriptDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|numeric
operator|.
name|ScriptLongValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_class
DECL|class|FieldDataSource
specifier|public
specifier|abstract
class|class
name|FieldDataSource
block|{
DECL|class|MetaData
specifier|public
specifier|static
class|class
name|MetaData
block|{
DECL|field|UNKNOWN
specifier|public
specifier|static
specifier|final
name|MetaData
name|UNKNOWN
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
DECL|enum|Uniqueness
specifier|public
enum|enum
name|Uniqueness
block|{
DECL|enum constant|UNIQUE
name|UNIQUE
block|,
DECL|enum constant|NOT_UNIQUE
name|NOT_UNIQUE
block|,
DECL|enum constant|UNKNOWN
name|UNKNOWN
block|;
DECL|method|unique
specifier|public
name|boolean
name|unique
parameter_list|()
block|{
return|return
name|this
operator|==
name|UNIQUE
return|;
block|}
block|}
DECL|field|maxAtomicUniqueValuesCount
specifier|private
name|long
name|maxAtomicUniqueValuesCount
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|multiValued
specifier|private
name|boolean
name|multiValued
init|=
literal|true
decl_stmt|;
DECL|field|uniqueness
specifier|private
name|Uniqueness
name|uniqueness
init|=
name|Uniqueness
operator|.
name|UNKNOWN
decl_stmt|;
DECL|method|MetaData
specifier|private
name|MetaData
parameter_list|()
block|{}
DECL|method|MetaData
specifier|private
name|MetaData
parameter_list|(
name|MetaData
name|other
parameter_list|)
block|{
name|this
operator|.
name|maxAtomicUniqueValuesCount
operator|=
name|other
operator|.
name|maxAtomicUniqueValuesCount
expr_stmt|;
name|this
operator|.
name|multiValued
operator|=
name|other
operator|.
name|multiValued
expr_stmt|;
name|this
operator|.
name|uniqueness
operator|=
name|other
operator|.
name|uniqueness
expr_stmt|;
block|}
DECL|method|MetaData
specifier|private
name|MetaData
parameter_list|(
name|long
name|maxAtomicUniqueValuesCount
parameter_list|,
name|boolean
name|multiValued
parameter_list|,
name|Uniqueness
name|uniqueness
parameter_list|)
block|{
name|this
operator|.
name|maxAtomicUniqueValuesCount
operator|=
name|maxAtomicUniqueValuesCount
expr_stmt|;
name|this
operator|.
name|multiValued
operator|=
name|multiValued
expr_stmt|;
name|this
operator|.
name|uniqueness
operator|=
name|uniqueness
expr_stmt|;
block|}
DECL|method|maxAtomicUniqueValuesCount
specifier|public
name|long
name|maxAtomicUniqueValuesCount
parameter_list|()
block|{
return|return
name|maxAtomicUniqueValuesCount
return|;
block|}
DECL|method|multiValued
specifier|public
name|boolean
name|multiValued
parameter_list|()
block|{
return|return
name|multiValued
return|;
block|}
DECL|method|uniqueness
specifier|public
name|Uniqueness
name|uniqueness
parameter_list|()
block|{
return|return
name|uniqueness
return|;
block|}
DECL|method|load
specifier|public
specifier|static
name|MetaData
name|load
parameter_list|(
name|IndexFieldData
name|indexFieldData
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|metaData
operator|.
name|uniqueness
operator|=
name|Uniqueness
operator|.
name|UNIQUE
expr_stmt|;
for|for
control|(
name|AtomicReaderContext
name|readerContext
range|:
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|AtomicFieldData
name|fieldData
init|=
name|indexFieldData
operator|.
name|load
argument_list|(
name|readerContext
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|multiValued
operator||=
name|fieldData
operator|.
name|isMultiValued
argument_list|()
expr_stmt|;
name|metaData
operator|.
name|maxAtomicUniqueValuesCount
operator|=
name|Math
operator|.
name|max
argument_list|(
name|metaData
operator|.
name|maxAtomicUniqueValuesCount
argument_list|,
name|fieldData
operator|.
name|getNumberUniqueValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|metaData
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|MetaData
name|other
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|other
argument_list|)
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|metaData
specifier|private
specifier|final
name|MetaData
name|metaData
decl_stmt|;
DECL|method|Builder
specifier|private
name|Builder
parameter_list|()
block|{
name|metaData
operator|=
operator|new
name|MetaData
argument_list|()
expr_stmt|;
block|}
DECL|method|Builder
specifier|private
name|Builder
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|metaData
operator|=
operator|new
name|MetaData
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
block|}
DECL|method|maxAtomicUniqueValuesCount
specifier|public
name|Builder
name|maxAtomicUniqueValuesCount
parameter_list|(
name|long
name|maxAtomicUniqueValuesCount
parameter_list|)
block|{
name|metaData
operator|.
name|maxAtomicUniqueValuesCount
operator|=
name|maxAtomicUniqueValuesCount
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|multiValued
specifier|public
name|Builder
name|multiValued
parameter_list|(
name|boolean
name|multiValued
parameter_list|)
block|{
name|metaData
operator|.
name|multiValued
operator|=
name|multiValued
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|uniqueness
specifier|public
name|Builder
name|uniqueness
parameter_list|(
name|Uniqueness
name|uniqueness
parameter_list|)
block|{
name|metaData
operator|.
name|uniqueness
operator|=
name|uniqueness
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|MetaData
name|build
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
block|}
block|}
comment|/**      * Get the current {@link BytesValues}.      */
DECL|method|bytesValues
specifier|public
specifier|abstract
name|BytesValues
name|bytesValues
parameter_list|()
function_decl|;
comment|/**      * Ask the underlying data source to provide pre-computed hashes, optional operation.      */
DECL|method|setNeedsHashes
specifier|public
name|void
name|setNeedsHashes
parameter_list|(
name|boolean
name|needsHashes
parameter_list|)
block|{}
DECL|method|metaData
specifier|public
specifier|abstract
name|MetaData
name|metaData
parameter_list|()
function_decl|;
DECL|class|Bytes
specifier|public
specifier|static
specifier|abstract
class|class
name|Bytes
extends|extends
name|FieldDataSource
block|{
DECL|class|WithOrdinals
specifier|public
specifier|static
specifier|abstract
class|class
name|WithOrdinals
extends|extends
name|Bytes
block|{
DECL|method|bytesValues
specifier|public
specifier|abstract
name|BytesValues
operator|.
name|WithOrdinals
name|bytesValues
parameter_list|()
function_decl|;
DECL|class|FieldData
specifier|public
specifier|static
class|class
name|FieldData
extends|extends
name|WithOrdinals
implements|implements
name|ReaderContextAware
block|{
DECL|field|needsHashes
specifier|protected
name|boolean
name|needsHashes
decl_stmt|;
DECL|field|indexFieldData
specifier|protected
specifier|final
name|IndexFieldData
operator|.
name|WithOrdinals
argument_list|<
name|?
argument_list|>
name|indexFieldData
decl_stmt|;
DECL|field|metaData
specifier|protected
specifier|final
name|MetaData
name|metaData
decl_stmt|;
DECL|field|atomicFieldData
specifier|protected
name|AtomicFieldData
operator|.
name|WithOrdinals
argument_list|<
name|?
argument_list|>
name|atomicFieldData
decl_stmt|;
DECL|field|bytesValues
specifier|private
name|BytesValues
operator|.
name|WithOrdinals
name|bytesValues
decl_stmt|;
DECL|method|FieldData
specifier|public
name|FieldData
parameter_list|(
name|IndexFieldData
operator|.
name|WithOrdinals
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|needsHashes
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
DECL|method|setNeedsHashes
specifier|public
specifier|final
name|void
name|setNeedsHashes
parameter_list|(
name|boolean
name|needsHashes
parameter_list|)
block|{
name|this
operator|.
name|needsHashes
operator|=
name|needsHashes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
name|atomicFieldData
operator|=
name|indexFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesValues
operator|!=
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|(
name|needsHashes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|BytesValues
operator|.
name|WithOrdinals
name|bytesValues
parameter_list|()
block|{
if|if
condition|(
name|bytesValues
operator|==
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|(
name|needsHashes
argument_list|)
expr_stmt|;
block|}
return|return
name|bytesValues
return|;
block|}
block|}
block|}
DECL|class|FieldData
specifier|public
specifier|static
class|class
name|FieldData
extends|extends
name|Bytes
implements|implements
name|ReaderContextAware
block|{
DECL|field|needsHashes
specifier|protected
name|boolean
name|needsHashes
decl_stmt|;
DECL|field|indexFieldData
specifier|protected
specifier|final
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
decl_stmt|;
DECL|field|metaData
specifier|protected
specifier|final
name|MetaData
name|metaData
decl_stmt|;
DECL|field|atomicFieldData
specifier|protected
name|AtomicFieldData
argument_list|<
name|?
argument_list|>
name|atomicFieldData
decl_stmt|;
DECL|field|bytesValues
specifier|private
name|BytesValues
name|bytesValues
decl_stmt|;
DECL|method|FieldData
specifier|public
name|FieldData
parameter_list|(
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|needsHashes
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
DECL|method|setNeedsHashes
specifier|public
specifier|final
name|void
name|setNeedsHashes
parameter_list|(
name|boolean
name|needsHashes
parameter_list|)
block|{
name|this
operator|.
name|needsHashes
operator|=
name|needsHashes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
name|atomicFieldData
operator|=
name|indexFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesValues
operator|!=
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|(
name|needsHashes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
name|bytesValues
parameter_list|()
block|{
if|if
condition|(
name|bytesValues
operator|==
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|(
name|needsHashes
argument_list|)
expr_stmt|;
block|}
return|return
name|bytesValues
return|;
block|}
block|}
DECL|class|Script
specifier|public
specifier|static
class|class
name|Script
extends|extends
name|Bytes
block|{
DECL|field|values
specifier|private
specifier|final
name|ScriptBytesValues
name|values
decl_stmt|;
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|SearchScript
name|script
parameter_list|)
block|{
name|values
operator|=
operator|new
name|ScriptBytesValues
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|MetaData
operator|.
name|UNKNOWN
return|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
name|bytesValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
block|}
DECL|class|SortedAndUnique
specifier|public
specifier|static
class|class
name|SortedAndUnique
extends|extends
name|Bytes
implements|implements
name|ReaderContextAware
block|{
DECL|field|delegate
specifier|private
specifier|final
name|FieldDataSource
name|delegate
decl_stmt|;
DECL|field|metaData
specifier|private
specifier|final
name|MetaData
name|metaData
decl_stmt|;
DECL|field|bytesValues
specifier|private
name|BytesValues
name|bytesValues
decl_stmt|;
DECL|method|SortedAndUnique
specifier|public
name|SortedAndUnique
parameter_list|(
name|FieldDataSource
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|MetaData
operator|.
name|builder
argument_list|(
name|delegate
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|uniqueness
argument_list|(
name|MetaData
operator|.
name|Uniqueness
operator|.
name|UNIQUE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
name|bytesValues
operator|=
literal|null
expr_stmt|;
comment|// order may change per-segment -> reset
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
name|bytesValues
parameter_list|()
block|{
if|if
condition|(
name|bytesValues
operator|==
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|delegate
operator|.
name|bytesValues
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytesValues
operator|.
name|isMultiValued
argument_list|()
operator|&&
operator|(
operator|!
name|delegate
operator|.
name|metaData
argument_list|()
operator|.
name|uniqueness
operator|.
name|unique
argument_list|()
operator|||
name|bytesValues
operator|.
name|getOrder
argument_list|()
operator|!=
name|Order
operator|.
name|BYTES
operator|)
condition|)
block|{
name|bytesValues
operator|=
operator|new
name|SortedUniqueBytesValues
argument_list|(
name|bytesValues
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bytesValues
return|;
block|}
DECL|class|SortedUniqueBytesValues
specifier|static
class|class
name|SortedUniqueBytesValues
extends|extends
name|FilterBytesValues
block|{
DECL|field|spare
specifier|final
name|BytesRef
name|spare
decl_stmt|;
DECL|field|sortedIds
name|int
index|[]
name|sortedIds
decl_stmt|;
DECL|field|bytes
specifier|final
name|BytesRefHash
name|bytes
decl_stmt|;
DECL|field|numUniqueValues
name|int
name|numUniqueValues
decl_stmt|;
DECL|field|pos
name|int
name|pos
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|method|SortedUniqueBytesValues
specifier|public
name|SortedUniqueBytesValues
parameter_list|(
name|BytesValues
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|bytes
operator|=
operator|new
name|BytesRefHash
argument_list|()
expr_stmt|;
name|spare
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
specifier|final
name|int
name|numValues
init|=
name|super
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
name|sortedIds
operator|=
literal|null
expr_stmt|;
return|return
literal|0
return|;
block|}
name|bytes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bytes
operator|.
name|reinit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
name|bytes
operator|.
name|add
argument_list|(
name|super
operator|.
name|nextValue
argument_list|()
argument_list|,
name|super
operator|.
name|currentValueHash
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numUniqueValues
operator|=
name|bytes
operator|.
name|size
argument_list|()
expr_stmt|;
name|sortedIds
operator|=
name|bytes
operator|.
name|sort
argument_list|(
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
return|return
name|numUniqueValues
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|BytesRef
name|nextValue
parameter_list|()
block|{
name|bytes
operator|.
name|get
argument_list|(
name|sortedIds
index|[
name|pos
operator|++
index|]
argument_list|,
name|spare
argument_list|)
expr_stmt|;
return|return
name|spare
return|;
block|}
annotation|@
name|Override
DECL|method|currentValueHash
specifier|public
name|int
name|currentValueHash
parameter_list|()
block|{
return|return
name|spare
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOrder
specifier|public
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|Order
operator|.
name|BYTES
return|;
block|}
block|}
block|}
block|}
DECL|class|Numeric
specifier|public
specifier|static
specifier|abstract
class|class
name|Numeric
extends|extends
name|FieldDataSource
block|{
comment|/** Whether the underlying data is floating-point or not. */
DECL|method|isFloatingPoint
specifier|public
specifier|abstract
name|boolean
name|isFloatingPoint
parameter_list|()
function_decl|;
comment|/** Get the current {@link LongValues}. */
DECL|method|longValues
specifier|public
specifier|abstract
name|LongValues
name|longValues
parameter_list|()
function_decl|;
comment|/** Get the current {@link DoubleValues}. */
DECL|method|doubleValues
specifier|public
specifier|abstract
name|DoubleValues
name|doubleValues
parameter_list|()
function_decl|;
DECL|class|WithScript
specifier|public
specifier|static
class|class
name|WithScript
extends|extends
name|Numeric
block|{
DECL|field|longValues
specifier|private
specifier|final
name|LongValues
name|longValues
decl_stmt|;
DECL|field|doubleValues
specifier|private
specifier|final
name|DoubleValues
name|doubleValues
decl_stmt|;
DECL|field|bytesValues
specifier|private
specifier|final
name|FieldDataSource
operator|.
name|WithScript
operator|.
name|BytesValues
name|bytesValues
decl_stmt|;
DECL|method|WithScript
specifier|public
name|WithScript
parameter_list|(
name|Numeric
name|delegate
parameter_list|,
name|SearchScript
name|script
parameter_list|)
block|{
name|this
operator|.
name|longValues
operator|=
operator|new
name|LongValues
argument_list|(
name|delegate
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|this
operator|.
name|doubleValues
operator|=
operator|new
name|DoubleValues
argument_list|(
name|delegate
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytesValues
operator|=
operator|new
name|FieldDataSource
operator|.
name|WithScript
operator|.
name|BytesValues
argument_list|(
name|delegate
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isFloatingPoint
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
literal|true
return|;
comment|// even if the underlying source produces longs, scripts can change them to doubles
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|BytesValues
name|bytesValues
parameter_list|()
block|{
return|return
name|bytesValues
return|;
block|}
annotation|@
name|Override
DECL|method|longValues
specifier|public
name|LongValues
name|longValues
parameter_list|()
block|{
return|return
name|longValues
return|;
block|}
annotation|@
name|Override
DECL|method|doubleValues
specifier|public
name|DoubleValues
name|doubleValues
parameter_list|()
block|{
return|return
name|doubleValues
return|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|MetaData
operator|.
name|UNKNOWN
return|;
block|}
DECL|class|LongValues
specifier|static
class|class
name|LongValues
extends|extends
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|LongValues
block|{
DECL|field|source
specifier|private
specifier|final
name|Numeric
name|source
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|SearchScript
name|script
decl_stmt|;
DECL|method|LongValues
specifier|public
name|LongValues
parameter_list|(
name|Numeric
name|source
parameter_list|,
name|SearchScript
name|script
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|source
operator|.
name|longValues
argument_list|()
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|long
name|nextValue
parameter_list|()
block|{
name|script
operator|.
name|setNextVar
argument_list|(
literal|"_value"
argument_list|,
name|source
operator|.
name|longValues
argument_list|()
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|script
operator|.
name|runAsLong
argument_list|()
return|;
block|}
block|}
DECL|class|DoubleValues
specifier|static
class|class
name|DoubleValues
extends|extends
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|DoubleValues
block|{
DECL|field|source
specifier|private
specifier|final
name|Numeric
name|source
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|SearchScript
name|script
decl_stmt|;
DECL|method|DoubleValues
specifier|public
name|DoubleValues
parameter_list|(
name|Numeric
name|source
parameter_list|,
name|SearchScript
name|script
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|source
operator|.
name|doubleValues
argument_list|()
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|double
name|nextValue
parameter_list|()
block|{
name|script
operator|.
name|setNextVar
argument_list|(
literal|"_value"
argument_list|,
name|source
operator|.
name|doubleValues
argument_list|()
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|script
operator|.
name|runAsDouble
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|FieldData
specifier|public
specifier|static
class|class
name|FieldData
extends|extends
name|Numeric
implements|implements
name|ReaderContextAware
block|{
DECL|field|needsHashes
specifier|protected
name|boolean
name|needsHashes
decl_stmt|;
DECL|field|indexFieldData
specifier|protected
specifier|final
name|IndexNumericFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
decl_stmt|;
DECL|field|metaData
specifier|protected
specifier|final
name|MetaData
name|metaData
decl_stmt|;
DECL|field|atomicFieldData
specifier|protected
name|AtomicNumericFieldData
name|atomicFieldData
decl_stmt|;
DECL|field|bytesValues
specifier|private
name|BytesValues
name|bytesValues
decl_stmt|;
DECL|field|longValues
specifier|private
name|LongValues
name|longValues
decl_stmt|;
DECL|field|doubleValues
specifier|private
name|DoubleValues
name|doubleValues
decl_stmt|;
DECL|method|FieldData
specifier|public
name|FieldData
parameter_list|(
name|IndexNumericFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|needsHashes
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
annotation|@
name|Override
DECL|method|isFloatingPoint
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
name|indexFieldData
operator|.
name|getNumericType
argument_list|()
operator|.
name|isFloatingPoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setNeedsHashes
specifier|public
specifier|final
name|void
name|setNeedsHashes
parameter_list|(
name|boolean
name|needsHashes
parameter_list|)
block|{
name|this
operator|.
name|needsHashes
operator|=
name|needsHashes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
name|atomicFieldData
operator|=
name|indexFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesValues
operator|!=
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|(
name|needsHashes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|longValues
operator|!=
literal|null
condition|)
block|{
name|longValues
operator|=
name|atomicFieldData
operator|.
name|getLongValues
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doubleValues
operator|!=
literal|null
condition|)
block|{
name|doubleValues
operator|=
name|atomicFieldData
operator|.
name|getDoubleValues
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
name|bytesValues
parameter_list|()
block|{
if|if
condition|(
name|bytesValues
operator|==
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|(
name|needsHashes
argument_list|)
expr_stmt|;
block|}
return|return
name|bytesValues
return|;
block|}
annotation|@
name|Override
DECL|method|longValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|LongValues
name|longValues
parameter_list|()
block|{
if|if
condition|(
name|longValues
operator|==
literal|null
condition|)
block|{
name|longValues
operator|=
name|atomicFieldData
operator|.
name|getLongValues
argument_list|()
expr_stmt|;
block|}
assert|assert
name|longValues
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|NUMERIC
assert|;
return|return
name|longValues
return|;
block|}
annotation|@
name|Override
DECL|method|doubleValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|DoubleValues
name|doubleValues
parameter_list|()
block|{
if|if
condition|(
name|doubleValues
operator|==
literal|null
condition|)
block|{
name|doubleValues
operator|=
name|atomicFieldData
operator|.
name|getDoubleValues
argument_list|()
expr_stmt|;
block|}
assert|assert
name|doubleValues
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|NUMERIC
assert|;
return|return
name|doubleValues
return|;
block|}
block|}
DECL|class|Script
specifier|public
specifier|static
class|class
name|Script
extends|extends
name|Numeric
block|{
DECL|field|scriptValueType
specifier|private
specifier|final
name|ScriptValueType
name|scriptValueType
decl_stmt|;
DECL|field|doubleValues
specifier|private
specifier|final
name|ScriptDoubleValues
name|doubleValues
decl_stmt|;
DECL|field|longValues
specifier|private
specifier|final
name|ScriptLongValues
name|longValues
decl_stmt|;
DECL|field|bytesValues
specifier|private
specifier|final
name|ScriptBytesValues
name|bytesValues
decl_stmt|;
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|SearchScript
name|script
parameter_list|,
name|ScriptValueType
name|scriptValueType
parameter_list|)
block|{
name|this
operator|.
name|scriptValueType
operator|=
name|scriptValueType
expr_stmt|;
name|longValues
operator|=
operator|new
name|ScriptLongValues
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|doubleValues
operator|=
operator|new
name|ScriptDoubleValues
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|bytesValues
operator|=
operator|new
name|ScriptBytesValues
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|MetaData
operator|.
name|UNKNOWN
return|;
block|}
annotation|@
name|Override
DECL|method|isFloatingPoint
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
name|scriptValueType
operator|!=
literal|null
condition|?
name|scriptValueType
operator|.
name|isFloatingPoint
argument_list|()
else|:
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|longValues
specifier|public
name|LongValues
name|longValues
parameter_list|()
block|{
return|return
name|longValues
return|;
block|}
annotation|@
name|Override
DECL|method|doubleValues
specifier|public
name|DoubleValues
name|doubleValues
parameter_list|()
block|{
return|return
name|doubleValues
return|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|BytesValues
name|bytesValues
parameter_list|()
block|{
return|return
name|bytesValues
return|;
block|}
block|}
DECL|class|SortedAndUnique
specifier|public
specifier|static
class|class
name|SortedAndUnique
extends|extends
name|Numeric
implements|implements
name|ReaderContextAware
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Numeric
name|delegate
decl_stmt|;
DECL|field|metaData
specifier|private
specifier|final
name|MetaData
name|metaData
decl_stmt|;
DECL|field|longValues
specifier|private
name|LongValues
name|longValues
decl_stmt|;
DECL|field|doubleValues
specifier|private
name|DoubleValues
name|doubleValues
decl_stmt|;
DECL|field|bytesValues
specifier|private
name|BytesValues
name|bytesValues
decl_stmt|;
DECL|method|SortedAndUnique
specifier|public
name|SortedAndUnique
parameter_list|(
name|Numeric
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|MetaData
operator|.
name|builder
argument_list|(
name|delegate
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|uniqueness
argument_list|(
name|MetaData
operator|.
name|Uniqueness
operator|.
name|UNIQUE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
annotation|@
name|Override
DECL|method|isFloatingPoint
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isFloatingPoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
name|longValues
operator|=
literal|null
expr_stmt|;
comment|// order may change per-segment -> reset
name|doubleValues
operator|=
literal|null
expr_stmt|;
name|bytesValues
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|longValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|LongValues
name|longValues
parameter_list|()
block|{
if|if
condition|(
name|longValues
operator|==
literal|null
condition|)
block|{
name|longValues
operator|=
name|delegate
operator|.
name|longValues
argument_list|()
expr_stmt|;
if|if
condition|(
name|longValues
operator|.
name|isMultiValued
argument_list|()
operator|&&
operator|(
operator|!
name|delegate
operator|.
name|metaData
argument_list|()
operator|.
name|uniqueness
operator|.
name|unique
argument_list|()
operator|||
name|longValues
operator|.
name|getOrder
argument_list|()
operator|!=
name|Order
operator|.
name|NUMERIC
operator|)
condition|)
block|{
name|longValues
operator|=
operator|new
name|SortedUniqueLongValues
argument_list|(
name|longValues
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|longValues
return|;
block|}
annotation|@
name|Override
DECL|method|doubleValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|DoubleValues
name|doubleValues
parameter_list|()
block|{
if|if
condition|(
name|doubleValues
operator|==
literal|null
condition|)
block|{
name|doubleValues
operator|=
name|delegate
operator|.
name|doubleValues
argument_list|()
expr_stmt|;
if|if
condition|(
name|doubleValues
operator|.
name|isMultiValued
argument_list|()
operator|&&
operator|(
operator|!
name|delegate
operator|.
name|metaData
argument_list|()
operator|.
name|uniqueness
operator|.
name|unique
argument_list|()
operator|||
name|doubleValues
operator|.
name|getOrder
argument_list|()
operator|!=
name|Order
operator|.
name|NUMERIC
operator|)
condition|)
block|{
name|doubleValues
operator|=
operator|new
name|SortedUniqueDoubleValues
argument_list|(
name|doubleValues
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|doubleValues
return|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
name|bytesValues
parameter_list|()
block|{
if|if
condition|(
name|bytesValues
operator|==
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|delegate
operator|.
name|bytesValues
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytesValues
operator|.
name|isMultiValued
argument_list|()
operator|&&
operator|(
operator|!
name|delegate
operator|.
name|metaData
argument_list|()
operator|.
name|uniqueness
operator|.
name|unique
argument_list|()
operator|||
name|bytesValues
operator|.
name|getOrder
argument_list|()
operator|!=
name|Order
operator|.
name|BYTES
operator|)
condition|)
block|{
name|bytesValues
operator|=
operator|new
name|SortedUniqueBytesValues
argument_list|(
name|bytesValues
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bytesValues
return|;
block|}
DECL|class|SortedUniqueLongValues
specifier|private
specifier|static
class|class
name|SortedUniqueLongValues
extends|extends
name|FilterLongValues
block|{
DECL|field|numUniqueValues
name|int
name|numUniqueValues
decl_stmt|;
DECL|field|array
name|long
index|[]
name|array
init|=
operator|new
name|long
index|[
literal|2
index|]
decl_stmt|;
DECL|field|pos
name|int
name|pos
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|sorter
specifier|final
name|InPlaceMergeSorter
name|sorter
init|=
operator|new
name|InPlaceMergeSorter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
specifier|final
name|long
name|tmp
init|=
name|array
index|[
name|i
index|]
decl_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|array
index|[
name|j
index|]
expr_stmt|;
name|array
index|[
name|j
index|]
operator|=
name|tmp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
specifier|final
name|long
name|l1
init|=
name|array
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|long
name|l2
init|=
name|array
index|[
name|j
index|]
decl_stmt|;
return|return
name|l1
operator|<
name|l2
condition|?
operator|-
literal|1
else|:
name|l1
operator|==
name|l2
condition|?
literal|0
else|:
literal|1
return|;
block|}
block|}
decl_stmt|;
DECL|method|SortedUniqueLongValues
specifier|protected
name|SortedUniqueLongValues
parameter_list|(
name|LongValues
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
specifier|final
name|int
name|numValues
init|=
name|super
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|array
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|super
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
name|pos
operator|=
literal|0
expr_stmt|;
return|return
name|numUniqueValues
operator|=
name|CollectionUtils
operator|.
name|sortAndDedup
argument_list|(
name|array
argument_list|,
name|numValues
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|long
name|nextValue
parameter_list|()
block|{
assert|assert
name|pos
operator|<
name|numUniqueValues
assert|;
return|return
name|array
index|[
name|pos
operator|++
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getOrder
specifier|public
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|Order
operator|.
name|NUMERIC
return|;
block|}
block|}
DECL|class|SortedUniqueDoubleValues
specifier|private
specifier|static
class|class
name|SortedUniqueDoubleValues
extends|extends
name|FilterDoubleValues
block|{
DECL|field|numUniqueValues
name|int
name|numUniqueValues
decl_stmt|;
DECL|field|array
name|double
index|[]
name|array
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
DECL|field|pos
name|int
name|pos
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|sorter
specifier|final
name|InPlaceMergeSorter
name|sorter
init|=
operator|new
name|InPlaceMergeSorter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
specifier|final
name|double
name|tmp
init|=
name|array
index|[
name|i
index|]
decl_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|array
index|[
name|j
index|]
expr_stmt|;
name|array
index|[
name|j
index|]
operator|=
name|tmp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
name|array
index|[
name|j
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|SortedUniqueDoubleValues
name|SortedUniqueDoubleValues
parameter_list|(
name|DoubleValues
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
specifier|final
name|int
name|numValues
init|=
name|super
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|array
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|super
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
name|pos
operator|=
literal|0
expr_stmt|;
return|return
name|numUniqueValues
operator|=
name|CollectionUtils
operator|.
name|sortAndDedup
argument_list|(
name|array
argument_list|,
name|numValues
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|double
name|nextValue
parameter_list|()
block|{
assert|assert
name|pos
operator|<
name|numUniqueValues
assert|;
return|return
name|array
index|[
name|pos
operator|++
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getOrder
specifier|public
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|Order
operator|.
name|NUMERIC
return|;
block|}
block|}
block|}
block|}
comment|// No need to implement ReaderContextAware here, the delegate already takes care of updating data structures
DECL|class|WithScript
specifier|public
specifier|static
class|class
name|WithScript
extends|extends
name|Bytes
block|{
DECL|field|bytesValues
specifier|private
specifier|final
name|BytesValues
name|bytesValues
decl_stmt|;
DECL|method|WithScript
specifier|public
name|WithScript
parameter_list|(
name|FieldDataSource
name|delegate
parameter_list|,
name|SearchScript
name|script
parameter_list|)
block|{
name|this
operator|.
name|bytesValues
operator|=
operator|new
name|BytesValues
argument_list|(
name|delegate
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|MetaData
operator|.
name|UNKNOWN
return|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|BytesValues
name|bytesValues
parameter_list|()
block|{
return|return
name|bytesValues
return|;
block|}
DECL|class|BytesValues
specifier|static
class|class
name|BytesValues
extends|extends
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
block|{
DECL|field|source
specifier|private
specifier|final
name|FieldDataSource
name|source
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|SearchScript
name|script
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
decl_stmt|;
DECL|method|BytesValues
specifier|public
name|BytesValues
parameter_list|(
name|FieldDataSource
name|source
parameter_list|,
name|SearchScript
name|script
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|scratch
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|source
operator|.
name|bytesValues
argument_list|()
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|BytesRef
name|nextValue
parameter_list|()
block|{
name|BytesRef
name|value
init|=
name|source
operator|.
name|bytesValues
argument_list|()
operator|.
name|nextValue
argument_list|()
decl_stmt|;
name|script
operator|.
name|setNextVar
argument_list|(
literal|"_value"
argument_list|,
name|value
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|scratch
operator|.
name|copyChars
argument_list|(
name|script
operator|.
name|run
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|scratch
return|;
block|}
block|}
block|}
DECL|class|GeoPoint
specifier|public
specifier|static
class|class
name|GeoPoint
extends|extends
name|FieldDataSource
implements|implements
name|ReaderContextAware
block|{
DECL|field|needsHashes
specifier|protected
name|boolean
name|needsHashes
decl_stmt|;
DECL|field|indexFieldData
specifier|protected
specifier|final
name|IndexGeoPointFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
decl_stmt|;
DECL|field|metaData
specifier|private
specifier|final
name|MetaData
name|metaData
decl_stmt|;
DECL|field|atomicFieldData
specifier|protected
name|AtomicGeoPointFieldData
argument_list|<
name|?
argument_list|>
name|atomicFieldData
decl_stmt|;
DECL|field|bytesValues
specifier|private
name|BytesValues
name|bytesValues
decl_stmt|;
DECL|field|geoPointValues
specifier|private
name|GeoPointValues
name|geoPointValues
decl_stmt|;
DECL|method|GeoPoint
specifier|public
name|GeoPoint
parameter_list|(
name|IndexGeoPointFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|needsHashes
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
annotation|@
name|Override
DECL|method|setNeedsHashes
specifier|public
specifier|final
name|void
name|setNeedsHashes
parameter_list|(
name|boolean
name|needsHashes
parameter_list|)
block|{
name|this
operator|.
name|needsHashes
operator|=
name|needsHashes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
name|atomicFieldData
operator|=
name|indexFieldData
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesValues
operator|!=
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|(
name|needsHashes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|geoPointValues
operator|!=
literal|null
condition|)
block|{
name|geoPointValues
operator|=
name|atomicFieldData
operator|.
name|getGeoPointValues
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
name|bytesValues
parameter_list|()
block|{
if|if
condition|(
name|bytesValues
operator|==
literal|null
condition|)
block|{
name|bytesValues
operator|=
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|(
name|needsHashes
argument_list|)
expr_stmt|;
block|}
return|return
name|bytesValues
return|;
block|}
DECL|method|geoPointValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|GeoPointValues
name|geoPointValues
parameter_list|()
block|{
if|if
condition|(
name|geoPointValues
operator|==
literal|null
condition|)
block|{
name|geoPointValues
operator|=
name|atomicFieldData
operator|.
name|getGeoPointValues
argument_list|()
expr_stmt|;
block|}
return|return
name|geoPointValues
return|;
block|}
block|}
block|}
end_class

end_unit

