begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support.numeric
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|numeric
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|DateMathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|DateFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ip
operator|.
name|IpFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_interface
DECL|interface|ValueParser
specifier|public
interface|interface
name|ValueParser
block|{
DECL|field|IPv4
specifier|static
specifier|final
name|ValueParser
name|IPv4
init|=
operator|new
name|ValueParser
operator|.
name|IPv4
argument_list|()
decl_stmt|;
DECL|method|parseLong
name|long
name|parseLong
parameter_list|(
name|String
name|value
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
function_decl|;
DECL|method|parseDouble
name|double
name|parseDouble
parameter_list|(
name|String
name|value
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
function_decl|;
comment|/**      * Knows how to parse datatime values based on date/time format      */
DECL|class|DateTime
specifier|static
class|class
name|DateTime
implements|implements
name|ValueParser
block|{
DECL|field|formatter
specifier|private
name|FormatDateTimeFormatter
name|formatter
decl_stmt|;
DECL|method|DateTime
specifier|public
name|DateTime
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|this
argument_list|(
name|Joda
operator|.
name|forPattern
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|DateTime
specifier|public
name|DateTime
parameter_list|(
name|FormatDateTimeFormatter
name|formatter
parameter_list|)
block|{
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseLong
specifier|public
name|long
name|parseLong
parameter_list|(
name|String
name|value
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
block|{
return|return
name|formatter
operator|.
name|parser
argument_list|()
operator|.
name|parseMillis
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseDouble
specifier|public
name|double
name|parseDouble
parameter_list|(
name|String
name|value
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
block|{
return|return
name|parseLong
argument_list|(
name|value
argument_list|,
name|searchContext
argument_list|)
return|;
block|}
block|}
comment|/**      * Knows how to parse datatime values based on elasticsearch's date math expression      */
DECL|class|DateMath
specifier|static
class|class
name|DateMath
implements|implements
name|ValueParser
block|{
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|DateMath
name|DEFAULT
init|=
operator|new
name|ValueParser
operator|.
name|DateMath
argument_list|(
operator|new
name|DateMathParser
argument_list|(
name|DateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
argument_list|,
name|DateFieldMapper
operator|.
name|Defaults
operator|.
name|TIME_UNIT
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|parser
specifier|private
name|DateMathParser
name|parser
decl_stmt|;
DECL|method|DateMath
specifier|public
name|DateMath
parameter_list|(
name|String
name|format
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|DateMathParser
argument_list|(
name|Joda
operator|.
name|forPattern
argument_list|(
name|format
argument_list|)
argument_list|,
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|DateMath
specifier|public
name|DateMath
parameter_list|(
name|DateMathParser
name|parser
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseLong
specifier|public
name|long
name|parseLong
parameter_list|(
name|String
name|value
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
block|{
return|return
name|parser
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|searchContext
operator|.
name|nowInMillis
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseDouble
specifier|public
name|double
name|parseDouble
parameter_list|(
name|String
name|value
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
block|{
return|return
name|parseLong
argument_list|(
name|value
argument_list|,
name|searchContext
argument_list|)
return|;
block|}
block|}
comment|/**      * Knows how to parse IPv4 formats      */
DECL|class|IPv4
specifier|static
class|class
name|IPv4
implements|implements
name|ValueParser
block|{
DECL|method|IPv4
specifier|private
name|IPv4
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|parseLong
specifier|public
name|long
name|parseLong
parameter_list|(
name|String
name|value
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
block|{
return|return
name|IpFieldMapper
operator|.
name|ipToLong
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseDouble
specifier|public
name|double
name|parseDouble
parameter_list|(
name|String
name|value
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
block|{
return|return
name|parseLong
argument_list|(
name|value
argument_list|,
name|searchContext
argument_list|)
return|;
block|}
block|}
block|}
end_interface

end_unit

