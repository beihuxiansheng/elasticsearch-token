begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|format
operator|.
name|ValueFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ValuesSourceAggregatorFactory
specifier|public
specifier|abstract
class|class
name|ValuesSourceAggregatorFactory
parameter_list|<
name|VS
extends|extends
name|ValuesSource
parameter_list|>
extends|extends
name|AggregatorFactory
block|{
DECL|class|LeafOnly
specifier|public
specifier|static
specifier|abstract
class|class
name|LeafOnly
parameter_list|<
name|VS
extends|extends
name|ValuesSource
parameter_list|>
extends|extends
name|ValuesSourceAggregatorFactory
argument_list|<
name|VS
argument_list|>
block|{
DECL|method|LeafOnly
specifier|protected
name|LeafOnly
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
name|valuesSourceConfig
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|valuesSourceConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subFactories
specifier|public
name|AggregatorFactory
name|subFactories
parameter_list|(
name|AggregatorFactories
name|subFactories
parameter_list|)
block|{
throw|throw
operator|new
name|AggregationInitializationException
argument_list|(
literal|"Aggregator ["
operator|+
name|name
operator|+
literal|"] of type ["
operator|+
name|type
operator|+
literal|"] cannot accept sub-aggregations"
argument_list|)
throw|;
block|}
block|}
DECL|field|config
specifier|protected
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
name|config
decl_stmt|;
DECL|method|ValuesSourceAggregatorFactory
specifier|protected
name|ValuesSourceAggregatorFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createInternal
specifier|public
name|Aggregator
name|createInternal
parameter_list|(
name|AggregationContext
name|context
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|boolean
name|collectsFromSingleBucket
parameter_list|,
name|List
argument_list|<
name|Reducer
argument_list|>
name|reducers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|VS
name|vs
init|=
name|context
operator|.
name|valuesSource
argument_list|(
name|config
argument_list|,
name|context
operator|.
name|searchContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|vs
operator|==
literal|null
condition|)
block|{
return|return
name|createUnmapped
argument_list|(
name|context
argument_list|,
name|parent
argument_list|,
name|reducers
argument_list|,
name|metaData
argument_list|)
return|;
block|}
return|return
name|doCreateInternal
argument_list|(
name|vs
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|collectsFromSingleBucket
argument_list|,
name|reducers
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doValidate
specifier|public
name|void
name|doValidate
parameter_list|()
block|{
if|if
condition|(
name|config
operator|==
literal|null
operator|||
operator|!
name|config
operator|.
name|valid
argument_list|()
condition|)
block|{
name|resolveValuesSourceConfigFromAncestors
argument_list|(
name|name
argument_list|,
name|parent
argument_list|,
name|config
operator|.
name|valueSourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createUnmapped
specifier|protected
specifier|abstract
name|Aggregator
name|createUnmapped
parameter_list|(
name|AggregationContext
name|aggregationContext
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|List
argument_list|<
name|Reducer
argument_list|>
name|reducers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|doCreateInternal
specifier|protected
specifier|abstract
name|Aggregator
name|doCreateInternal
parameter_list|(
name|VS
name|valuesSource
parameter_list|,
name|AggregationContext
name|aggregationContext
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|boolean
name|collectsFromSingleBucket
parameter_list|,
name|List
argument_list|<
name|Reducer
argument_list|>
name|reducers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|resolveValuesSourceConfigFromAncestors
specifier|private
name|void
name|resolveValuesSourceConfigFromAncestors
parameter_list|(
name|String
name|aggName
parameter_list|,
name|AggregatorFactory
name|parent
parameter_list|,
name|Class
argument_list|<
name|VS
argument_list|>
name|requiredValuesSourceType
parameter_list|)
block|{
name|ValuesSourceConfig
name|config
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|instanceof
name|ValuesSourceAggregatorFactory
condition|)
block|{
name|config
operator|=
operator|(
operator|(
name|ValuesSourceAggregatorFactory
operator|)
name|parent
operator|)
operator|.
name|config
expr_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|valid
argument_list|()
condition|)
block|{
if|if
condition|(
name|requiredValuesSourceType
operator|==
literal|null
operator|||
name|requiredValuesSourceType
operator|.
name|isAssignableFrom
argument_list|(
name|config
operator|.
name|valueSourceType
argument_list|)
condition|)
block|{
name|ValueFormat
name|format
init|=
name|config
operator|.
name|format
decl_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
comment|// if the user explicitly defined a format pattern, we'll do our best to keep it even when we inherit the
comment|// value source form one of the ancestor aggregations
if|if
condition|(
name|this
operator|.
name|config
operator|.
name|formatPattern
operator|!=
literal|null
operator|&&
name|format
operator|!=
literal|null
operator|&&
name|format
operator|instanceof
name|ValueFormat
operator|.
name|Patternable
condition|)
block|{
name|this
operator|.
name|config
operator|.
name|format
operator|=
operator|(
operator|(
name|ValueFormat
operator|.
name|Patternable
operator|)
name|format
operator|)
operator|.
name|create
argument_list|(
name|this
operator|.
name|config
operator|.
name|formatPattern
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
name|parent
operator|=
name|parent
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"could not find the appropriate value context to perform aggregation ["
operator|+
name|aggName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

