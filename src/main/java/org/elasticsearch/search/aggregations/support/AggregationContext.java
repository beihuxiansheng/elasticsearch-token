begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|PageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexGeoPointFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexOrdinalsFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|ParentChildIndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AggregationContext
specifier|public
class|class
name|AggregationContext
block|{
DECL|field|searchContext
specifier|private
specifier|final
name|SearchContext
name|searchContext
decl_stmt|;
DECL|method|AggregationContext
specifier|public
name|AggregationContext
parameter_list|(
name|SearchContext
name|searchContext
parameter_list|)
block|{
name|this
operator|.
name|searchContext
operator|=
name|searchContext
expr_stmt|;
block|}
DECL|method|searchContext
specifier|public
name|SearchContext
name|searchContext
parameter_list|()
block|{
return|return
name|searchContext
return|;
block|}
DECL|method|pageCacheRecycler
specifier|public
name|PageCacheRecycler
name|pageCacheRecycler
parameter_list|()
block|{
return|return
name|searchContext
operator|.
name|pageCacheRecycler
argument_list|()
return|;
block|}
DECL|method|bigArrays
specifier|public
name|BigArrays
name|bigArrays
parameter_list|()
block|{
return|return
name|searchContext
operator|.
name|bigArrays
argument_list|()
return|;
block|}
comment|/** Get a value source given its configuration and the depth of the aggregator in the aggregation tree. */
DECL|method|valuesSource
specifier|public
parameter_list|<
name|VS
extends|extends
name|ValuesSource
parameter_list|>
name|VS
name|valuesSource
parameter_list|(
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|config
operator|.
name|valid
argument_list|()
operator|:
literal|"value source config is invalid - must have either a field context or a script or marked as unmapped"
assert|;
assert|assert
operator|!
name|config
operator|.
name|unmapped
operator|:
literal|"value source should not be created for unmapped fields"
assert|;
if|if
condition|(
name|config
operator|.
name|fieldContext
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ValuesSource
operator|.
name|Numeric
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|config
operator|.
name|valueSourceType
argument_list|)
condition|)
block|{
return|return
operator|(
name|VS
operator|)
name|numericScript
argument_list|(
name|config
argument_list|)
return|;
block|}
if|if
condition|(
name|ValuesSource
operator|.
name|Bytes
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|config
operator|.
name|valueSourceType
argument_list|)
condition|)
block|{
return|return
operator|(
name|VS
operator|)
name|bytesScript
argument_list|(
name|config
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"value source of type ["
operator|+
name|config
operator|.
name|valueSourceType
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"] is not supported by scripts"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ValuesSource
operator|.
name|Numeric
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|config
operator|.
name|valueSourceType
argument_list|)
condition|)
block|{
return|return
operator|(
name|VS
operator|)
name|numericField
argument_list|(
name|config
argument_list|)
return|;
block|}
if|if
condition|(
name|ValuesSource
operator|.
name|GeoPoint
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|config
operator|.
name|valueSourceType
argument_list|)
condition|)
block|{
return|return
operator|(
name|VS
operator|)
name|geoPointField
argument_list|(
name|config
argument_list|)
return|;
block|}
comment|// falling back to bytes values
return|return
operator|(
name|VS
operator|)
name|bytesField
argument_list|(
name|config
argument_list|)
return|;
block|}
DECL|method|numericScript
specifier|private
name|ValuesSource
operator|.
name|Numeric
name|numericScript
parameter_list|(
name|ValuesSourceConfig
argument_list|<
name|?
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ValuesSource
operator|.
name|Numeric
operator|.
name|Script
argument_list|(
name|config
operator|.
name|script
argument_list|,
name|config
operator|.
name|scriptValueType
argument_list|)
return|;
block|}
DECL|method|numericField
specifier|private
name|ValuesSource
operator|.
name|Numeric
name|numericField
parameter_list|(
name|ValuesSourceConfig
argument_list|<
name|?
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|ValuesSource
operator|.
name|Numeric
name|dataSource
init|=
operator|new
name|ValuesSource
operator|.
name|Numeric
operator|.
name|FieldData
argument_list|(
operator|(
name|IndexNumericFieldData
operator|)
name|config
operator|.
name|fieldContext
operator|.
name|indexFieldData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|script
operator|!=
literal|null
condition|)
block|{
name|dataSource
operator|=
operator|new
name|ValuesSource
operator|.
name|Numeric
operator|.
name|WithScript
argument_list|(
name|dataSource
argument_list|,
name|config
operator|.
name|script
argument_list|)
expr_stmt|;
block|}
return|return
name|dataSource
return|;
block|}
DECL|method|bytesField
specifier|private
name|ValuesSource
name|bytesField
parameter_list|(
name|ValuesSourceConfig
argument_list|<
name|?
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
init|=
name|config
operator|.
name|fieldContext
operator|.
name|indexFieldData
argument_list|()
decl_stmt|;
name|ValuesSource
name|dataSource
decl_stmt|;
if|if
condition|(
name|indexFieldData
operator|instanceof
name|ParentChildIndexFieldData
condition|)
block|{
name|dataSource
operator|=
operator|new
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
operator|.
name|ParentChild
argument_list|(
operator|(
name|ParentChildIndexFieldData
operator|)
name|indexFieldData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexFieldData
operator|instanceof
name|IndexOrdinalsFieldData
condition|)
block|{
name|dataSource
operator|=
operator|new
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
operator|.
name|FieldData
argument_list|(
operator|(
name|IndexOrdinalsFieldData
operator|)
name|indexFieldData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataSource
operator|=
operator|new
name|ValuesSource
operator|.
name|Bytes
operator|.
name|FieldData
argument_list|(
name|indexFieldData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|script
operator|!=
literal|null
condition|)
block|{
name|dataSource
operator|=
operator|new
name|ValuesSource
operator|.
name|WithScript
argument_list|(
name|dataSource
argument_list|,
name|config
operator|.
name|script
argument_list|)
expr_stmt|;
block|}
return|return
name|dataSource
return|;
block|}
DECL|method|bytesScript
specifier|private
name|ValuesSource
operator|.
name|Bytes
name|bytesScript
parameter_list|(
name|ValuesSourceConfig
argument_list|<
name|?
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ValuesSource
operator|.
name|Bytes
operator|.
name|Script
argument_list|(
name|config
operator|.
name|script
argument_list|)
return|;
block|}
DECL|method|geoPointField
specifier|private
name|ValuesSource
operator|.
name|GeoPoint
name|geoPointField
parameter_list|(
name|ValuesSourceConfig
argument_list|<
name|?
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ValuesSource
operator|.
name|GeoPoint
argument_list|(
operator|(
name|IndexGeoPointFieldData
operator|)
name|config
operator|.
name|fieldContext
operator|.
name|indexFieldData
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

