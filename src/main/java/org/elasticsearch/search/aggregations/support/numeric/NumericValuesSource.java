begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support.numeric
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|numeric
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|DoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|LongValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|FieldDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_comment
comment|/**  * A source of numeric data.  */
end_comment

begin_class
DECL|class|NumericValuesSource
specifier|public
specifier|final
class|class
name|NumericValuesSource
implements|implements
name|ValuesSource
block|{
DECL|field|source
specifier|private
specifier|final
name|FieldDataSource
operator|.
name|Numeric
name|source
decl_stmt|;
DECL|field|formatter
specifier|private
specifier|final
name|ValueFormatter
name|formatter
decl_stmt|;
DECL|field|parser
specifier|private
specifier|final
name|ValueParser
name|parser
decl_stmt|;
DECL|method|NumericValuesSource
specifier|public
name|NumericValuesSource
parameter_list|(
name|FieldDataSource
operator|.
name|Numeric
name|source
parameter_list|,
annotation|@
name|Nullable
name|ValueFormatter
name|formatter
parameter_list|,
annotation|@
name|Nullable
name|ValueParser
name|parser
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|BytesValues
name|bytesValues
parameter_list|()
block|{
return|return
name|source
operator|.
name|bytesValues
argument_list|()
return|;
block|}
DECL|method|isFloatingPoint
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
name|source
operator|.
name|isFloatingPoint
argument_list|()
return|;
block|}
DECL|method|longValues
specifier|public
name|LongValues
name|longValues
parameter_list|()
block|{
return|return
name|source
operator|.
name|longValues
argument_list|()
return|;
block|}
DECL|method|doubleValues
specifier|public
name|DoubleValues
name|doubleValues
parameter_list|()
block|{
return|return
name|source
operator|.
name|doubleValues
argument_list|()
return|;
block|}
DECL|method|formatter
specifier|public
name|ValueFormatter
name|formatter
parameter_list|()
block|{
return|return
name|formatter
return|;
block|}
DECL|method|parser
specifier|public
name|ValueParser
name|parser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
block|}
end_class

end_unit

