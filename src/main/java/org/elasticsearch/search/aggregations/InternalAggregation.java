begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|CacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An internal implementation of {@link Aggregation}. Serves as a base class for all aggregation implementations.  */
end_comment

begin_class
DECL|class|InternalAggregation
specifier|public
specifier|abstract
class|class
name|InternalAggregation
implements|implements
name|Aggregation
implements|,
name|ToXContent
implements|,
name|Streamable
block|{
comment|/**      * The aggregation type that holds all the string types that are associated with an aggregation:      *<ul>      *<li>name - used as the parser type</li>      *<li>stream - used as the stream type</li>      *</ul>      */
DECL|class|Type
specifier|public
specifier|static
class|class
name|Type
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|stream
specifier|private
name|BytesReference
name|stream
decl_stmt|;
DECL|method|Type
specifier|public
name|Type
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|Type
specifier|public
name|Type
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|Type
specifier|public
name|Type
parameter_list|(
name|String
name|name
parameter_list|,
name|BytesReference
name|stream
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
block|}
comment|/**          * @return The name of the type (mainly used for registering the parser for the aggregator (see {@link org.elasticsearch.search.aggregations.Aggregator.Parser#type()}).          */
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * @return  The name of the stream type (used for registering the aggregation stream          *          (see {@link AggregationStreams#registerStream(AggregationStreams.Stream, org.elasticsearch.common.bytes.BytesReference...)}).          */
DECL|method|stream
specifier|public
name|BytesReference
name|stream
parameter_list|()
block|{
return|return
name|stream
return|;
block|}
block|}
DECL|class|ReduceContext
specifier|protected
specifier|static
class|class
name|ReduceContext
block|{
DECL|field|aggregations
specifier|private
specifier|final
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
decl_stmt|;
DECL|field|cacheRecycler
specifier|private
specifier|final
name|CacheRecycler
name|cacheRecycler
decl_stmt|;
DECL|method|ReduceContext
specifier|public
name|ReduceContext
parameter_list|(
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|,
name|CacheRecycler
name|cacheRecycler
parameter_list|)
block|{
name|this
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
name|this
operator|.
name|cacheRecycler
operator|=
name|cacheRecycler
expr_stmt|;
block|}
DECL|method|aggregations
specifier|public
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
DECL|method|cacheRecycler
specifier|public
name|CacheRecycler
name|cacheRecycler
parameter_list|()
block|{
return|return
name|cacheRecycler
return|;
block|}
block|}
DECL|field|name
specifier|protected
name|String
name|name
decl_stmt|;
comment|/** Constructs an un initialized addAggregation (used for serialization) **/
DECL|method|InternalAggregation
specifier|protected
name|InternalAggregation
parameter_list|()
block|{}
comment|/**      * Constructs an get with a given name.      *      * @param name The name of the get.      */
DECL|method|InternalAggregation
specifier|protected
name|InternalAggregation
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return The {@link Type} of this aggregation      */
DECL|method|type
specifier|public
specifier|abstract
name|Type
name|type
parameter_list|()
function_decl|;
comment|/**      * Reduces the given addAggregation to a single one and returns it. In<b>most</b> cases, the assumption will be the all given      * addAggregation are of the same type (the same type as this aggregation). For best efficiency, when implementing,      * try reusing an existing get instance (typically the first in the given list) to save on redundant object      * construction.      */
DECL|method|reduce
specifier|public
specifier|abstract
name|InternalAggregation
name|reduce
parameter_list|(
name|ReduceContext
name|reduceContext
parameter_list|)
function_decl|;
comment|/**      * Read a size under the assumption that a value of 0 means unlimited.      */
DECL|method|readSize
specifier|protected
specifier|static
name|int
name|readSize
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
return|return
name|size
operator|==
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|size
return|;
block|}
comment|/**      * Write a size under the assumption that a value of 0 means unlimited.      */
DECL|method|writeSize
specifier|protected
specifier|static
name|void
name|writeSize
parameter_list|(
name|int
name|size
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|size
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**      * Common xcontent fields that are shared among addAggregation      */
DECL|class|CommonFields
specifier|public
specifier|static
specifier|final
class|class
name|CommonFields
block|{
DECL|field|BUCKETS
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|BUCKETS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
DECL|field|VALUE
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|VALUE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
DECL|field|VALUE_AS_STRING
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|VALUE_AS_STRING
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"value_as_string"
argument_list|)
decl_stmt|;
DECL|field|DOC_COUNT
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|DOC_COUNT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"doc_count"
argument_list|)
decl_stmt|;
DECL|field|KEY
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|KEY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
DECL|field|KEY_AS_STRING
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|KEY_AS_STRING
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"key_as_string"
argument_list|)
decl_stmt|;
DECL|field|FROM
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|FROM
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
DECL|field|FROM_AS_STRING
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|FROM_AS_STRING
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"from_as_string"
argument_list|)
decl_stmt|;
DECL|field|TO
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|TO
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"to"
argument_list|)
decl_stmt|;
DECL|field|TO_AS_STRING
specifier|public
specifier|static
specifier|final
name|XContentBuilderString
name|TO_AS_STRING
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"to_as_string"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

