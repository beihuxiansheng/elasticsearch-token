begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.percentiles.tdigest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ObjectArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|PercentilesEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TDigest
specifier|public
class|class
name|TDigest
extends|extends
name|PercentilesEstimator
block|{
DECL|field|ID
specifier|public
specifier|final
specifier|static
name|byte
name|ID
init|=
literal|0
decl_stmt|;
DECL|field|bigArrays
specifier|private
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|states
specifier|private
name|ObjectArray
argument_list|<
name|TDigestState
argument_list|>
name|states
decl_stmt|;
DECL|field|compression
specifier|private
specifier|final
name|double
name|compression
decl_stmt|;
DECL|method|TDigest
specifier|public
name|TDigest
parameter_list|(
name|double
index|[]
name|percents
parameter_list|,
name|double
name|compression
parameter_list|,
name|long
name|estimatedBucketsCount
parameter_list|,
name|AggregationContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|percents
argument_list|)
expr_stmt|;
name|bigArrays
operator|=
name|context
operator|.
name|bigArrays
argument_list|()
expr_stmt|;
name|states
operator|=
name|bigArrays
operator|.
name|newObjectArray
argument_list|(
name|estimatedBucketsCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|boolean
name|release
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|states
operator|.
name|release
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|offer
specifier|public
name|void
name|offer
parameter_list|(
name|double
name|value
parameter_list|,
name|long
name|bucketOrd
parameter_list|)
block|{
name|states
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|states
argument_list|,
name|bucketOrd
operator|+
literal|1
argument_list|)
expr_stmt|;
name|TDigestState
name|state
init|=
name|states
operator|.
name|get
argument_list|(
name|bucketOrd
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
operator|new
name|TDigestState
argument_list|(
name|compression
argument_list|)
expr_stmt|;
name|states
operator|.
name|set
argument_list|(
name|bucketOrd
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|result
specifier|public
name|PercentilesEstimator
operator|.
name|Result
name|result
parameter_list|(
name|long
name|bucketOrd
parameter_list|)
block|{
if|if
condition|(
name|bucketOrd
operator|>=
name|states
operator|.
name|size
argument_list|()
operator|||
name|states
operator|.
name|get
argument_list|(
name|bucketOrd
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|emptyResult
argument_list|()
return|;
block|}
return|return
operator|new
name|Result
argument_list|(
name|percents
argument_list|,
name|states
operator|.
name|get
argument_list|(
name|bucketOrd
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|emptyResult
specifier|public
name|PercentilesEstimator
operator|.
name|Result
name|emptyResult
parameter_list|()
block|{
return|return
operator|new
name|Result
argument_list|(
name|percents
argument_list|,
operator|new
name|TDigestState
argument_list|(
name|compression
argument_list|)
argument_list|)
return|;
block|}
DECL|class|Result
specifier|public
specifier|static
class|class
name|Result
extends|extends
name|PercentilesEstimator
operator|.
name|Result
argument_list|<
name|TDigest
argument_list|,
name|Result
argument_list|>
block|{
DECL|field|state
specifier|private
name|TDigestState
name|state
decl_stmt|;
DECL|method|Result
specifier|public
name|Result
parameter_list|()
block|{}
comment|// for serialization
DECL|method|Result
specifier|public
name|Result
parameter_list|(
name|double
index|[]
name|percents
parameter_list|,
name|TDigestState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|percents
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|id
specifier|protected
name|byte
name|id
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
annotation|@
name|Override
DECL|method|estimate
specifier|public
name|double
name|estimate
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|state
operator|.
name|quantile
argument_list|(
name|percents
index|[
name|index
index|]
operator|/
literal|100
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|merger
specifier|public
name|Merger
name|merger
parameter_list|(
name|int
name|estimatedMerges
parameter_list|)
block|{
return|return
operator|new
name|Merger
argument_list|()
return|;
block|}
DECL|method|read
specifier|public
specifier|static
name|Result
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
name|result
init|=
operator|new
name|Result
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|percents
operator|=
operator|new
name|double
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|percents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|percents
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readDouble
argument_list|()
expr_stmt|;
block|}
name|state
operator|=
name|TDigestState
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|percents
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|percents
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|writeDouble
argument_list|(
name|percents
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|TDigestState
operator|.
name|write
argument_list|(
name|state
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|class|Merger
specifier|private
class|class
name|Merger
implements|implements
name|PercentilesEstimator
operator|.
name|Result
operator|.
name|Merger
argument_list|<
name|TDigest
argument_list|,
name|Result
argument_list|>
block|{
DECL|field|merged
specifier|private
name|Result
name|merged
decl_stmt|;
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|merged
operator|==
literal|null
operator|||
name|merged
operator|.
name|state
operator|==
literal|null
condition|)
block|{
name|merged
operator|=
name|result
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|result
operator|.
name|state
operator|==
literal|null
operator|||
name|result
operator|.
name|state
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|merged
operator|.
name|state
operator|.
name|add
argument_list|(
name|result
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|Result
name|merge
parameter_list|()
block|{
return|return
name|merged
return|;
block|}
block|}
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|PercentilesEstimator
operator|.
name|Factory
block|{
DECL|field|compression
specifier|private
specifier|final
name|double
name|compression
decl_stmt|;
DECL|method|Factory
specifier|public
name|Factory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|settings
parameter_list|)
block|{
name|double
name|compression
init|=
literal|100
decl_stmt|;
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
name|Object
name|compressionObject
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"compression"
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressionObject
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|compressionObject
operator|instanceof
name|Number
operator|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"tdigest compression must be number, got a "
operator|+
name|compressionObject
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|compression
operator|=
operator|(
operator|(
name|Number
operator|)
name|compressionObject
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
block|}
DECL|method|create
specifier|public
name|TDigest
name|create
parameter_list|(
name|double
index|[]
name|percents
parameter_list|,
name|long
name|estimtedBucketCount
parameter_list|,
name|AggregationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|TDigest
argument_list|(
name|percents
argument_list|,
name|compression
argument_list|,
name|estimtedBucketCount
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

