begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements. See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.percentiles.tdigest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|GroupRedBlackTree
operator|.
name|SizeAndSum
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Fork of https://github.com/tdunning/t-digest/blob/master/src/main/java/com/tdunning/math/stats/TDigest.java  * Modified for less object allocation, faster estimations and integration with Elasticsearch serialization.  */
end_comment

begin_class
DECL|class|TDigestState
specifier|public
class|class
name|TDigestState
block|{
DECL|field|gen
specifier|private
specifier|final
name|Random
name|gen
decl_stmt|;
DECL|field|compression
specifier|private
name|double
name|compression
init|=
literal|100
decl_stmt|;
DECL|field|summary
specifier|private
name|GroupRedBlackTree
name|summary
decl_stmt|;
DECL|field|count
specifier|private
name|long
name|count
init|=
literal|0
decl_stmt|;
DECL|field|sizeAndSum
specifier|private
specifier|final
name|SizeAndSum
name|sizeAndSum
init|=
operator|new
name|SizeAndSum
argument_list|()
decl_stmt|;
comment|/**      * A histogram structure that will record a sketch of a distribution.      *      * @param compression How should accuracy be traded for size?  A value of N here will give quantile errors      *                    almost always less than 3/N with considerably smaller errors expected for extreme      *                    quantiles.  Conversely, you should expect to track about 5 N centroids for this      *                    accuracy.      */
DECL|method|TDigestState
specifier|public
name|TDigestState
parameter_list|(
name|double
name|compression
parameter_list|)
block|{
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
name|gen
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|summary
operator|=
operator|new
name|GroupRedBlackTree
argument_list|(
operator|(
name|int
operator|)
name|compression
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a sample to a histogram.      *      * @param x The value to add.      */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|add
argument_list|(
name|x
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a sample to a histogram.      *      * @param x The value to add.      * @param w The weight of this point.      */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|double
name|x
parameter_list|,
name|long
name|w
parameter_list|)
block|{
name|int
name|startNode
init|=
name|summary
operator|.
name|floorNode
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|startNode
operator|==
name|RedBlackTree
operator|.
name|NIL
condition|)
block|{
name|startNode
operator|=
name|summary
operator|.
name|ceilingNode
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startNode
operator|==
name|RedBlackTree
operator|.
name|NIL
condition|)
block|{
name|summary
operator|.
name|addGroup
argument_list|(
name|x
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|count
operator|=
name|w
expr_stmt|;
block|}
else|else
block|{
name|double
name|minDistance
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|int
name|lastNeighbor
init|=
literal|0
decl_stmt|;
name|summary
operator|.
name|headSum
argument_list|(
name|startNode
argument_list|,
name|sizeAndSum
argument_list|)
expr_stmt|;
specifier|final
name|int
name|headSize
init|=
name|sizeAndSum
operator|.
name|size
decl_stmt|;
name|int
name|i
init|=
name|headSize
decl_stmt|;
for|for
control|(
name|int
name|node
init|=
name|startNode
init|;
name|node
operator|!=
name|RedBlackTree
operator|.
name|NIL
condition|;
name|node
operator|=
name|summary
operator|.
name|nextNode
argument_list|(
name|node
argument_list|)
control|)
block|{
name|double
name|z
init|=
name|Math
operator|.
name|abs
argument_list|(
name|summary
operator|.
name|mean
argument_list|(
name|node
argument_list|)
operator|-
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|z
operator|<=
name|minDistance
condition|)
block|{
name|minDistance
operator|=
name|z
expr_stmt|;
name|lastNeighbor
operator|=
name|i
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|int
name|closest
init|=
name|RedBlackTree
operator|.
name|NIL
decl_stmt|;
name|long
name|sum
init|=
name|sizeAndSum
operator|.
name|sum
decl_stmt|;
name|i
operator|=
name|headSize
expr_stmt|;
name|double
name|n
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|node
init|=
name|startNode
init|;
name|node
operator|!=
name|RedBlackTree
operator|.
name|NIL
condition|;
name|node
operator|=
name|summary
operator|.
name|nextNode
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|i
operator|>
name|lastNeighbor
condition|)
block|{
break|break;
block|}
name|double
name|z
init|=
name|Math
operator|.
name|abs
argument_list|(
name|summary
operator|.
name|mean
argument_list|(
name|node
argument_list|)
operator|-
name|x
argument_list|)
decl_stmt|;
name|double
name|q
init|=
operator|(
name|sum
operator|+
name|summary
operator|.
name|count
argument_list|(
name|node
argument_list|)
operator|/
literal|2.0
operator|)
operator|/
name|count
decl_stmt|;
name|double
name|k
init|=
literal|4
operator|*
name|count
operator|*
name|q
operator|*
operator|(
literal|1
operator|-
name|q
operator|)
operator|/
name|compression
decl_stmt|;
comment|// this slightly clever selection method improves accuracy with lots of repeated points
if|if
condition|(
name|z
operator|==
name|minDistance
operator|&&
name|summary
operator|.
name|count
argument_list|(
name|node
argument_list|)
operator|+
name|w
operator|<=
name|k
condition|)
block|{
if|if
condition|(
name|gen
operator|.
name|nextDouble
argument_list|()
operator|<
literal|1
operator|/
name|n
condition|)
block|{
name|closest
operator|=
name|node
expr_stmt|;
block|}
name|n
operator|++
expr_stmt|;
block|}
name|sum
operator|+=
name|summary
operator|.
name|count
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|closest
operator|==
name|RedBlackTree
operator|.
name|NIL
condition|)
block|{
name|summary
operator|.
name|addGroup
argument_list|(
name|x
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
name|centroid
init|=
name|summary
operator|.
name|mean
argument_list|(
name|closest
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|summary
operator|.
name|count
argument_list|(
name|closest
argument_list|)
decl_stmt|;
name|count
operator|+=
name|w
expr_stmt|;
name|centroid
operator|+=
name|w
operator|*
operator|(
name|x
operator|-
name|centroid
operator|)
operator|/
name|count
expr_stmt|;
name|summary
operator|.
name|updateGroup
argument_list|(
name|closest
argument_list|,
name|centroid
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|count
operator|+=
name|w
expr_stmt|;
if|if
condition|(
name|summary
operator|.
name|size
argument_list|()
operator|>
literal|100
operator|*
name|compression
condition|)
block|{
comment|// something such as sequential ordering of data points
comment|// has caused a pathological expansion of our summary.
comment|// To fight this, we simply replay the current centroids
comment|// in random order.
comment|// this causes us to forget the diagnostic recording of data points
name|compress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|shuffleNodes
specifier|private
name|int
index|[]
name|shuffleNodes
parameter_list|(
name|RedBlackTree
name|tree
parameter_list|)
block|{
name|int
index|[]
name|nodes
init|=
operator|new
name|int
index|[
name|tree
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IntCursor
name|cursor
range|:
name|tree
control|)
block|{
name|nodes
index|[
name|i
operator|++
index|]
operator|=
name|cursor
operator|.
name|value
expr_stmt|;
block|}
assert|assert
name|i
operator|==
name|tree
operator|.
name|size
argument_list|()
assert|;
for|for
control|(
name|i
operator|=
name|tree
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
specifier|final
name|int
name|slot
init|=
name|gen
operator|.
name|nextInt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|tmp
init|=
name|nodes
index|[
name|slot
index|]
decl_stmt|;
name|nodes
index|[
name|slot
index|]
operator|=
name|nodes
index|[
name|i
index|]
expr_stmt|;
name|nodes
index|[
name|i
index|]
operator|=
name|tmp
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|TDigestState
name|other
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|shuffledNodes
init|=
name|shuffleNodes
argument_list|(
name|other
operator|.
name|summary
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|node
range|:
name|shuffledNodes
control|)
block|{
name|add
argument_list|(
name|other
operator|.
name|summary
operator|.
name|mean
argument_list|(
name|node
argument_list|)
argument_list|,
name|other
operator|.
name|summary
operator|.
name|count
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|merge
specifier|public
specifier|static
name|TDigestState
name|merge
parameter_list|(
name|double
name|compression
parameter_list|,
name|Iterable
argument_list|<
name|TDigestState
argument_list|>
name|subData
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|subData
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|"Can't merge 0 digests"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TDigestState
argument_list|>
name|elements
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|subData
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|elements
operator|.
name|size
argument_list|()
operator|/
literal|4
argument_list|)
decl_stmt|;
name|TDigestState
name|r
init|=
operator|new
name|TDigestState
argument_list|(
name|compression
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|n
control|)
block|{
if|if
condition|(
name|n
operator|>
literal|1
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|merge
argument_list|(
name|compression
argument_list|,
name|elements
operator|.
name|subList
argument_list|(
name|i
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|i
operator|+
name|n
argument_list|,
name|elements
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|add
argument_list|(
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
DECL|method|compress
specifier|public
name|void
name|compress
parameter_list|()
block|{
name|compress
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
DECL|method|compress
specifier|private
name|void
name|compress
parameter_list|(
name|GroupRedBlackTree
name|other
parameter_list|)
block|{
name|TDigestState
name|reduced
init|=
operator|new
name|TDigestState
argument_list|(
name|compression
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|shuffledNodes
init|=
name|shuffleNodes
argument_list|(
name|other
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|node
range|:
name|shuffledNodes
control|)
block|{
name|reduced
operator|.
name|add
argument_list|(
name|other
operator|.
name|mean
argument_list|(
name|node
argument_list|)
argument_list|,
name|other
operator|.
name|count
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|summary
operator|=
name|reduced
operator|.
name|summary
expr_stmt|;
block|}
comment|/**      * Returns the number of samples represented in this histogram.  If you want to know how many      * centroids are being used, try centroids().size().      *      * @return the number of samples that have been added.      */
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|centroids
specifier|public
name|GroupRedBlackTree
name|centroids
parameter_list|()
block|{
return|return
name|summary
return|;
block|}
comment|/**      * @param x the value at which the CDF should be evaluated      * @return the approximate fraction of all samples that were less than or equal to x.      */
DECL|method|cdf
specifier|public
name|double
name|cdf
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|GroupRedBlackTree
name|values
init|=
name|summary
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Double
operator|.
name|NaN
return|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|x
operator|<
name|values
operator|.
name|mean
argument_list|(
name|values
operator|.
name|root
argument_list|()
argument_list|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
else|else
block|{
name|double
name|r
init|=
literal|0
decl_stmt|;
comment|// we scan a across the centroids
name|Iterator
argument_list|<
name|IntCursor
argument_list|>
name|it
init|=
name|values
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|a
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|value
decl_stmt|;
comment|// b is the look-ahead to the next centroid
name|int
name|b
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|value
decl_stmt|;
comment|// initially, we set left width equal to right width
name|double
name|left
init|=
operator|(
name|values
operator|.
name|mean
argument_list|(
name|b
argument_list|)
operator|-
name|values
operator|.
name|mean
argument_list|(
name|a
argument_list|)
operator|)
operator|/
literal|2
decl_stmt|;
name|double
name|right
init|=
name|left
decl_stmt|;
comment|// scan to next to last element
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|x
operator|<
name|values
operator|.
name|mean
argument_list|(
name|a
argument_list|)
operator|+
name|right
condition|)
block|{
return|return
operator|(
name|r
operator|+
name|values
operator|.
name|count
argument_list|(
name|a
argument_list|)
operator|*
name|interpolate
argument_list|(
name|x
argument_list|,
name|values
operator|.
name|mean
argument_list|(
name|a
argument_list|)
operator|-
name|left
argument_list|,
name|values
operator|.
name|mean
argument_list|(
name|a
argument_list|)
operator|+
name|right
argument_list|)
operator|)
operator|/
name|count
return|;
block|}
name|r
operator|+=
name|values
operator|.
name|count
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
name|b
expr_stmt|;
name|b
operator|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|value
expr_stmt|;
name|left
operator|=
name|right
expr_stmt|;
name|right
operator|=
operator|(
name|values
operator|.
name|mean
argument_list|(
name|b
argument_list|)
operator|-
name|values
operator|.
name|mean
argument_list|(
name|a
argument_list|)
operator|)
operator|/
literal|2
expr_stmt|;
block|}
comment|// for the last element, assume right width is same as left
name|left
operator|=
name|right
expr_stmt|;
name|a
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|x
operator|<
name|values
operator|.
name|mean
argument_list|(
name|a
argument_list|)
operator|+
name|right
condition|)
block|{
return|return
operator|(
name|r
operator|+
name|values
operator|.
name|count
argument_list|(
name|a
argument_list|)
operator|*
name|interpolate
argument_list|(
name|x
argument_list|,
name|values
operator|.
name|mean
argument_list|(
name|a
argument_list|)
operator|-
name|left
argument_list|,
name|values
operator|.
name|mean
argument_list|(
name|a
argument_list|)
operator|+
name|right
argument_list|)
operator|)
operator|/
name|count
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
comment|/**      * @param q The quantile desired.  Can be in the range [0,1].      * @return The minimum value x such that we think that the proportion of samples is<= x is q.      */
DECL|method|quantile
specifier|public
name|double
name|quantile
parameter_list|(
name|double
name|q
parameter_list|)
block|{
if|if
condition|(
name|q
argument_list|<
literal|0
operator|||
name|q
argument_list|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"q should be in [0,1], got "
operator|+
name|q
argument_list|)
throw|;
block|}
name|GroupRedBlackTree
name|values
init|=
name|summary
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Double
operator|.
name|NaN
return|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|values
operator|.
name|mean
argument_list|(
name|values
operator|.
name|root
argument_list|()
argument_list|)
return|;
block|}
comment|// if values were stored in a sorted array, index would be the offset we are interested in
specifier|final
name|double
name|index
init|=
name|q
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
decl_stmt|;
name|double
name|previousMean
init|=
name|Double
operator|.
name|NaN
decl_stmt|,
name|previousIndex
init|=
literal|0
decl_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
name|int
name|next
decl_stmt|;
name|Iterator
argument_list|<
name|IntCursor
argument_list|>
name|it
init|=
name|centroids
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|next
operator|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|value
expr_stmt|;
specifier|final
name|double
name|nextIndex
init|=
name|total
operator|+
operator|(
name|values
operator|.
name|count
argument_list|(
name|next
argument_list|)
operator|-
literal|1.0
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|nextIndex
operator|>=
name|index
condition|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|previousMean
argument_list|)
condition|)
block|{
comment|// special case 1: the index we are interested in is before the 1st centroid
if|if
condition|(
name|nextIndex
operator|==
name|previousIndex
condition|)
block|{
return|return
name|values
operator|.
name|mean
argument_list|(
name|next
argument_list|)
return|;
block|}
comment|// assume values grow linearly between index previousIndex=0 and nextIndex2
name|int
name|next2
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|value
decl_stmt|;
specifier|final
name|double
name|nextIndex2
init|=
name|total
operator|+
name|values
operator|.
name|count
argument_list|(
name|next
argument_list|)
operator|+
operator|(
name|values
operator|.
name|count
argument_list|(
name|next2
argument_list|)
operator|-
literal|1.0
operator|)
operator|/
literal|2
decl_stmt|;
name|previousMean
operator|=
operator|(
name|nextIndex2
operator|*
name|values
operator|.
name|mean
argument_list|(
name|next
argument_list|)
operator|-
name|nextIndex
operator|*
name|values
operator|.
name|mean
argument_list|(
name|next2
argument_list|)
operator|)
operator|/
operator|(
name|nextIndex2
operator|-
name|nextIndex
operator|)
expr_stmt|;
block|}
comment|// common case: we found two centroids previous and next so that the desired quantile is
comment|// after 'previous' but before 'next'
return|return
name|quantile
argument_list|(
name|previousIndex
argument_list|,
name|index
argument_list|,
name|nextIndex
argument_list|,
name|previousMean
argument_list|,
name|values
operator|.
name|mean
argument_list|(
name|next
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// special case 2: the index we are interested in is beyond the last centroid
comment|// again, assume values grow linearly between index previousIndex and (count - 1)
comment|// which is the highest possible index
specifier|final
name|double
name|nextIndex2
init|=
name|count
operator|-
literal|1
decl_stmt|;
specifier|final
name|double
name|nextMean2
init|=
operator|(
name|values
operator|.
name|mean
argument_list|(
name|next
argument_list|)
operator|*
operator|(
name|nextIndex2
operator|-
name|previousIndex
operator|)
operator|-
name|previousMean
operator|*
operator|(
name|nextIndex2
operator|-
name|nextIndex
operator|)
operator|)
operator|/
operator|(
name|nextIndex
operator|-
name|previousIndex
operator|)
decl_stmt|;
return|return
name|quantile
argument_list|(
name|nextIndex
argument_list|,
name|index
argument_list|,
name|nextIndex2
argument_list|,
name|values
operator|.
name|mean
argument_list|(
name|next
argument_list|)
argument_list|,
name|nextMean2
argument_list|)
return|;
block|}
name|total
operator|+=
name|values
operator|.
name|count
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|previousMean
operator|=
name|values
operator|.
name|mean
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|previousIndex
operator|=
name|nextIndex
expr_stmt|;
block|}
block|}
DECL|method|quantile
specifier|private
specifier|static
name|double
name|quantile
parameter_list|(
name|double
name|previousIndex
parameter_list|,
name|double
name|index
parameter_list|,
name|double
name|nextIndex
parameter_list|,
name|double
name|previousMean
parameter_list|,
name|double
name|nextMean
parameter_list|)
block|{
specifier|final
name|double
name|delta
init|=
name|nextIndex
operator|-
name|previousIndex
decl_stmt|;
specifier|final
name|double
name|previousWeight
init|=
operator|(
name|nextIndex
operator|-
name|index
operator|)
operator|/
name|delta
decl_stmt|;
specifier|final
name|double
name|nextWeight
init|=
operator|(
name|index
operator|-
name|previousIndex
operator|)
operator|/
name|delta
decl_stmt|;
return|return
name|previousMean
operator|*
name|previousWeight
operator|+
name|nextMean
operator|*
name|nextWeight
return|;
block|}
DECL|method|centroidCount
specifier|public
name|int
name|centroidCount
parameter_list|()
block|{
return|return
name|summary
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|compression
specifier|public
name|double
name|compression
parameter_list|()
block|{
return|return
name|compression
return|;
block|}
DECL|method|interpolate
specifier|private
name|double
name|interpolate
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|x0
parameter_list|,
name|double
name|x1
parameter_list|)
block|{
return|return
operator|(
name|x
operator|-
name|x0
operator|)
operator|/
operator|(
name|x1
operator|-
name|x0
operator|)
return|;
block|}
comment|//===== elastic search serialization ======//
DECL|method|write
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|TDigestState
name|state
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeDouble
argument_list|(
name|state
operator|.
name|compression
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|state
operator|.
name|summary
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IntCursor
name|cursor
range|:
name|state
operator|.
name|summary
control|)
block|{
specifier|final
name|int
name|node
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|state
operator|.
name|summary
operator|.
name|mean
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|state
operator|.
name|summary
operator|.
name|count
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|read
specifier|public
specifier|static
name|TDigestState
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|compression
init|=
name|in
operator|.
name|readDouble
argument_list|()
decl_stmt|;
name|TDigestState
name|state
init|=
operator|new
name|TDigestState
argument_list|(
name|compression
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|state
operator|.
name|add
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|,
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
block|}
end_class

end_unit

